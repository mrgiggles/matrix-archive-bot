2020-06-01
[17:04:04.0406] <immibis>
What is a store buffer?

[17:13:20.0768] <iain>
immibis: This comment might be useful: https://searchfox.org/mozilla-central/source/js/src/gc/Barrier.h#205-206

[02:04:55.0732] <brunoais>
Hello. I'm looking for migration documentation for spidermonkey 52.
This one doesn't help at all: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Releases/52

[06:06:54.0979] <tcampbell>
Here is a 60 -> 68 guide: https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr68/docs/Migration%20Guide.md I'm not sure if anyone wrote one for 52. 

[06:37:22.0646] <immibis>
Is there something wrong with using this pattern to iterate over an object?
```
function iterobj(obj, func) {
	for(var key in obj) {
		if(!obj.hasOwnProperty(key))
			continue;
		func(key, obj[key]); // for this test, func is an empty function
	}
}
```
I'm using this function to iterate over an object with ~40000 keys, and it triggers 7 minor GCs, taking about 21ms.
This alternative doesn't cause the same GC pressure:
```
function iterobj(obj, func) {
	var keys = Object.keys(obj);
	for(var k = 0; k < keys.length; k++) {
		func(keys[k], obj[keys[k]]); // still an empty function
	}
}
```
I don't have chrome installed, but I also tried the first function in node.js and didn't see a single garbage collection, not even with a tiny heap size.

[06:41:06.0269] <immibis>
I am running an ESR version of Firefox (thanks to Gentoo)

[06:52:31.0986] <nbp>
cfallin: https://en.wikipedia.org/wiki/Binfmt_misc This is a way to run Aarch64, .exe and even WASM files natively.  Thus we should no longer have to care about cross-compilation issues (at least on Linux), when you can run natively in an emulated environment.

[08:14:03.0941] <sfink>
jonco: ping (about alternative whole cell buffer arrangements)

[08:36:56.0193] <jonco>
sfink: hey

[08:37:15.0587] <sfink>
I just emailed you with my question. Probably a good thing, seeing how much verbiage I used.

[08:38:36.0935] <jonco>
oh right

[08:38:45.0314] <jonco>
so I like having two separate lists for strings and non-strings

[08:39:09.0486] <sfink>
ok, cool, I think that was the way I was leaning.

[08:39:11.0252] <jonco>
can you remind me why strings need to be traced first? something to do with the fact that they don't have children maybe?

[08:39:48.0606] <sfink>
heh. It's where you have a tenured dependent string whose base is in the nursery.

[08:40:08.0507] <sfink>
it's incorrect to deduplicate that base, since we won't trace the dependent string to update it (it's already tenured.)

[08:40:32.0906] <sfink>
so we have to visit all of the tenured -> nursery edges and mark those (potential) bases as non-deduplicatable

[08:40:42.0056] <sfink>
and those edges are all in the whole cell buffer

[08:41:10.0612] <jonco>
wouldn't we have a store buffer entry for the base's pointer into the nursery?

[08:41:28.0469] <sfink>
yes, that's the whole cell buffer entry

[08:41:54.0169] <sfink>
it's exactly what we need -- but it has to be traced before any dependent strings are

[08:42:37.0828] <jonco>
oh right, we have to mark it as non-deduplictable before we do any de-duplication

[08:42:58.0377] <sfink>
er... or rather, in that case we *would* be tracing it. But there could be a second dependent string with the same base.

[08:43:28.0057] <sfink>
Yes. All non-deduplicatable bit marking needs to happen before any potential deduplication.

[08:43:50.0618] <jonco>
ok, and tracing the other store buffers can result in deduplication happening?

[08:43:57.0353] <sfink>
yes

[08:44:02.0531] <sfink>
(The other thing that can set the nondeduplicatable bit is AutoStableStringChars)

[08:44:05.0231] <jonco>
(sorry, trying to remember how this works)

[08:44:27.0613] <sfink>
yeah, it's tricky

[08:44:37.0610] <sfink>
less so than it was, with undepended strings gone \o/

[08:45:14.0954] <jonco>
oh because the tenuring tracer will potentially de deduplicate any child string it finds, but the part that marks strings non-deduplicatable only happens for store buffer entries?

[08:45:37.0618] <jonco>
(isn't the base a child pointer though?)

[08:45:58.0262] <sfink>
the non-deduplicatable marking only happens for whole cell store buffer entries

[08:46:15.0242] <jonco>
ah right, ok

[08:48:07.0239] <sfink>
well, now only *string* whole cell store buffer entries. And all tenured dependent -> nursery base edges will be in the string whole cell buffer.

[08:48:55.0776] <sfink>
it can go ahead and start deduplicating if it finds an object -> string edge while tracing the an object in the whole cell buffer

[08:49:09.0499] <sfink>
 * it can go ahead and start deduplicating if it finds an object -> string edge while tracing an object in the whole cell buffer

[08:50:03.0416] <sfink>
(or rather, any tenured dependent string with a nursery base will be in the string whole cell buffer)

[08:50:29.0840] <sfink>
there are assertions that we don't use any other type of store buffer for those edges

[08:50:38.0567] <jonco>
I need think about this...

[08:50:58.0915] <jonco>
that last part sounds ok

[08:51:58.0786] <jonco>
let's talk about this more on Wednesday

[08:52:04.0258] <sfink>
the logic is basically "we can deduplicate any nursery string as long as its chars are not pointed to by a tenured string, but fortunately we have a record of all such pointers."

[08:52:06.0129] <jonco>
in the mean time, two lists sounds good

[08:52:11.0368] <sfink>
yep, ok

[08:52:37.0049] <jonco>
oh, it's because the dependent has a pointer into its chars?  

[08:52:47.0269] <jonco>
I guess we could fix that up

[08:53:01.0582] <jonco>
or is it more complicated than that?

[08:53:05.0008] <sfink>
yes, a dependent string has two pointers: one to the base string, and one directly to the chars it is using from that base string

[08:53:15.0044] <jonco>
oh right, that makes more sense now

[08:53:22.0220] <sfink>
so when we deduplicate a string, we have to be sure to fixup any dependent strings using its chars buffer

[08:54:19.0206] <sfink>
(but there could be a chain of bases: D1 -> D2 -> D3 -> S1, so you're not necessarily using chars from the base string; you might be using chars from your base's base)

[08:55:19.0330] <sfink>
but yes, we can talk on Wednesday

[08:55:57.0736] <jonco>
yuck - it would be great if we could get rid of those chains, but I seem to remember there was some reason why we needed to support them

[08:56:17.0425] <sfink>
we just don't have the information at the time they're created

[08:57:01.0645] <sfink>
it happens when you have a rope and flatten it (producing dependent strings from the former leaves.) Then you put that resulting string into a new rope and flatten that one too. You can't find the original rope's leaves anymore.

[08:57:19.0485] <sfink>
it's not even *that* uncommon of a thing to happen.

[08:58:14.0646] <sfink>
eg you construct a string through concatenation, put it into an object, and JSON.stringify the object

[08:58:32.0220] <sfink>
(which concatenates stuff)

[08:59:02.0936] <jonco>
right ok

[08:59:13.0682] <jonco>
thanks for explaining and let's talk further on Wednesday

[08:59:22.0176] <sfink>
yep, thanks

[09:00:46.0428] <mgaudet>
jit-tests have the `// |jit-test|` preamble/control comment (not sure what the right name is)

Is there an equivalent thing I can use for the tests in `js/src/tests/` -- I'd like make some of the private field tests get skipped if private fields are not enabled, -or-, require that when the test gets run private fields get enabled (which is a |jit-test| feature).

While I can feature test, it would be nice to be able to do this from the harness, as feature testing means that I have to wrap my tests in `evals` to avoid them getting parsed when the parser won't support the syntax I need to use. 

Is there an established pattern for how to do this? 

[09:14:17.0293] <arai>
mgaudet: there's `|reftest|` directive

[09:14:21.0354] <arai>
example https://searchfox.org/mozilla-central/source/js/src/tests/non262/Date/time-zone-path.js#1

[09:15:24.0496] <arai>
but iirc you need to be careful of whitespaces etc inside the condition

[09:15:44.0979] <arai>
(I thought, you cannot use whitespaces there

[09:16:12.0184] <mgaudet>
hrm. Do we have an object that contains the command line options I could read? like... `// |reftest| skip-if('--enable-private-fields' in args)`

[09:18:45.0069] <arai>
I guess, you can first test if it's shell (`xulRuntime.shel`)

[09:19:01.0679] <arai>
 * I guess, you can first test if it's shell (`xulRuntime.shell`)

[09:19:16.0888] <arai>
and then read JS shell's built-in global property

[09:20:23.0485] <arai>
especially, `getBuildConfiguration()`

[09:20:48.0171] <arai>
https://searchfox.org/mozilla-central/rev/5e4d4827aa005d031580d2d17a01bae1af138b2e/js/src/builtin/TestingFunctions.cpp#148

[09:21:05.0581] <arai>
err, wait

[09:21:22.0057] <arai>
is `--enable-private-fields` JS shell's arguments?

[09:21:30.0910] <arai>
or configure option?

[09:22:37.0242] <arai>
if configure option, `getBuildConfiguration` should be the right place to add it

[09:22:49.0362] <arai>
so that you can check if the option is set or not, by the property value

[09:23:35.0623] <arai>
if JS shell's arguments.  it depends on how it's handled there

[09:26:53.0144] <mgaudet>
it's a shell argument  (sorry, ran a way for a bit there)

[09:30:26.0351] <arai>
if it's handled by JS shell's `OptionParser`, I think the argument itself isn't available to the script

[09:30:45.0839] <mgaudet>
I suppose I could add a 'isPrivateFieldsEnabled' testing function, and use that

[09:31:37.0046] <sfink>
how hard would it be to feature-detect? try { eval("class X { #foo =1  }") } ... or whatever?

[09:31:45.0889] <sfink>
(I don't even know what the syntax is)

[09:31:53.0167] <mgaudet>
you've got it

[09:32:05.0257] <sfink>
the jstests get run both in the JS shell and in the browser, so it's messy

[09:32:10.0783] <mgaudet>
it's easy enough, -but- would still force me to hide all the testing inside evals, 

[09:32:33.0756] <mgaudet>
which maybe is the best choice, but I was sort of hoping to avoid

[09:32:41.0187] <sfink>
I mean put the feature detection in the |reftest| line

[09:32:53.0844] <sfink>
I'm hoping that would prevent it from parsing the rest of the file at all

[09:35:24.0659] <mgaudet>
Oh... I. Yeah.  I could try that

[09:36:09.0623] <sfink>
it needs to be an expression not a statement, though, so it may still be tricky

[09:37:23.0680] <mgaudet>
heh. /me summons do-expression proposal

[09:37:46.0108] <sfink>
eval(`eval("...")`) maybe? 

[09:37:53.0844] <sfink>
er, there was supposed to be a backtick in there

[09:38:58.0340] <sfink>
perhaps we should add a getRuntimeConfiguration() alongside getBuildConfiguration()

[09:41:06.0493] <sfink>
I always intended to rename (or at least alias) getBuildConfiguration().foo to vm.config.foo. I didn't consider the build vs runtime dimension.

[09:41:21.0896] <sfink>
 * I always intended to rename (or at least alias) `getBuildConfiguration().foo` to `vm.config.foo`. I didn't consider the build vs runtime dimension.

[09:42:33.0383] <mgaudet>
Well, lemme see what I can come up with; in your mind would `getRuntimeConfiguration()` be exhaustive, or just a bare-bones subset initially? 

[09:43:00.0373] <sfink>
it can start out bare-bones

[09:46:16.0627] <mgaudet>
👍️

[10:56:58.0823] <smaug>
is there some WeakRefs-for-dummies documentation ?

[11:05:32.0211] <sfink>
https://github.com/tc39/proposal-weakrefs/blob/master/reference.md is the best I know of

[11:06:32.0938] <sfink>
at least it's shorter than the explainer

[11:08:30.0459] <sfink>
hm, and it talks about `cleanupSome` at the end. For now, just know that we are *not* shipping `cleanupSome` in the browser context, at least for now. (It's available behind an experimental flag for testing, as you'll see in the context of the patch you're looking at.) That's following the current tc39 consensus.

[11:09:32.0565] <sfink>
smaug: I can try to answer any questions you have

[11:09:59.0923] <smaug>
sfink: so I guess it is basically something like var w = new WeakRef(someobject);

[11:10:22.0884] <smaug>
and later if nothing strong points to object, w.get() or some such starts to return null?

[11:10:42.0856] <sfink>
at a supposedly safe time after it has been collected, yes

[11:12:03.0656] <sfink>
but then there's a separate FinalizationRegistry thing that allows registering a callback to be invoked after an object is collected. WeakRef + FinalizationRegistry are closely related, but you'd commonly only use one or the other.

[11:13:44.0147] <sfink>
neither gives access to the collected object, so there's no way to resurrect stuff

[12:00:59.0110] <gankra>
quick check that sDefaultJSSettings isn't magical to spidermonkey and that this field is indeed write-only (and can be removed)? https://searchfox.org/mozilla-central/search?q=maxScriptRuntime&path=

[12:02:13.0895] <gankra>
(the actual pref's value is initialized by all.js/mobile.js)

[12:02:41.0565] <gankra>
 * (the actual pref's value is initialized by all.js/mobile.js and used elsewhere)

[12:09:37.0902] <iain>
Doesn't look like sDefaultJSSettings is ever referenced inside SM: https://searchfox.org/mozilla-central/search?q=sDefaultJSSettings&path=

[12:09:41.0296] <iain>
And I've never heard of it

[12:09:47.0558] <iain>
So I think you are in the clear

[12:09:59.0609] <iain>
 * gankra: Doesn't look like sDefaultJSSettings is ever referenced inside SM: https://searchfox.org/mozilla-central/search?q=sDefaultJSSettings&path=

[12:17:56.0631] <gankra>
iain: oh, actually, ok now that i look closer, only tests/telemetry seem to use the pref? what tells the JS watchdog how long to wait these days..?

[12:18:01.0279] <gankra>
https://searchfox.org/mozilla-central/search?q=dom.max_script_run&path=&case=false&regexp=false

[12:19:46.0405] <iain>
I think it might be here? https://searchfox.org/mozilla-central/source/modules/libpref/init/all.js#2524

[12:20:27.0766] <gankra>
iain: no i mean: nothing seems to ever actually *read* the value

[12:20:50.0473] <gankra>
same for the chrome_script version

[12:21:33.0566] <gankra>
like, entire pref appears to be dead code..?

[12:21:41.0376] <gankra>
 * like, this entire pref appears to be dead code..?

[12:22:37.0578] <iain>
Here? https://searchfox.org/mozilla-central/source/js/xpconnect/src/XPCJSContext.cpp#244-255

[12:24:56.0889] <iain>
More specifically: https://searchfox.org/mozilla-central/source/js/xpconnect/src/XPCJSContext.cpp#384

[12:24:58.0783] <gankra>
iain: oh yes, ok, good

[12:26:01.0585] <gankra>
sometimes nice to be wrong

[13:30:22.0825] <evilpie>
jorendorff: Seems like removing GetClassName and Proxy::className makes the devtools tests orange:  https://treeherder.mozilla.org/#/jobs?repo=try&revision=bc1a0b137e86050406f308386969a9a41207b5de&selectedTaskRun=b7qEfyA5QemRBLDhD4qq1Q-0

[13:54:05.0400] <tcampbell>
evilpie: your stack still seems to have references to `.class` https://hg.mozilla.org/try/file/bc1a0b137e86050406f308386969a9a41207b5de/devtools/shared/DevToolsUtils.js#l175

[13:54:35.0406] <evilpie>
of course, I didn't remove the class getter

[13:54:53.0779] <evilpie>
tbh I don't plan on doing that work either

[13:54:57.0636] <tcampbell>
ah

[13:59:10.0968] <djvj>
Waldo: is there any clean way to declare an opaque typename reference (i.e. without a 'class' or 'struct')?  I'm trying to opaquely predeclare some typedefs in a header.

[13:59:39.0580] <Waldo>
djvj: No.  ("Don't do that.")

[14:00:55.0305] <djvj>
It's a perfectly reasonable thing to want to do.

[14:01:38.0651] <djvj>
To also not have to care whether an opaque type is a class or a struct either.  `typename Foo` should be a thing.

[14:04:44.0215] <Waldo>
We really just need to bite the bullet and make everything `class`, perhaps only excepting fully-public `struct`s used as their fields (and maybe only if it's in a single file).

[14:04:58.0791] <Waldo>
It is faintly on my list of things I want to do, to change that.

[14:05:55.0105] <tcampbell>
well, we just forked what will be next ESR build, so now is as good a time as any

[14:06:48.0902] <Waldo>
I'm writing documentation on updating ICU, tzdata, currencies, and all related things `Intl` right now, that's my current semi-justifiable distraction.

[14:08:40.0268] <Waldo>
For Reasons I won't get into here, I wanted to write some documentation Thursday, and that's what I ended up picking to write.  The entire set of scripts and commands has really sprawled, and honestly if anba weren't doing it right now it would take me possibly multiple days to figure out how to invoke everything that needs invoking, when it needs invoking -- which is obviously bad for all sorts of reasons.

[14:09:40.0692] <Waldo>
Also Fedora 30's `python` was 2 and Fedora 32's is 3, so things are sort of falling apart on their own in ways I am only now coming to learn.

[14:10:46.0852] <tcampbell>
python 3 migration is now over a decade, right?

[14:12:01.0053] <sfink>
I believe Fedora 31 switched to py3, fwiw

[14:12:25.0368] <Waldo>
I think it came out in 2008.  `mozbuild` is still not fully Python 3, and somewhat surprisingly the update scripts invoke our `pymake` which hasn't been touched in years and clearly never cared to be Python 3 (for example, it doesn't use `print` function syntax), so who knows how much work must go into that.

[14:13:05.0604] <Waldo>
I basically skipped Fedora 31, because I ended up installing 30 very close to the end of its latest-release time and was too fatigued to do an update so quickly after.

[14:14:00.0281] <sfink>
yeah, I figured that's why you had those two versions. I occasionally get lazy and skip versions as well.

[14:14:16.0419] <Waldo>
On the plus side, for quasi-laziness now I finally did try out actually _updating_ Fedora, not reinstalling -- 30 to 31, then 31 to 32.  It seems to have worked and not broken anything, other than I think my freshrmps repo stuffs don't work (but I haven't needed to use anything from them yet, so haven't bothered dealing with that fallout).

[14:14:29.0476] <sfink>
or rather, I frequently get lazy, but only occasionally in that particular way

[14:15:10.0504] <Waldo>
If I was sure I had a USB key floating around with enough space to store a full Fedora installer, I probably would have reinstalled instead of updating.  But I'm not sure I do, I think all I have are maybe 1GB which is not quite enough space.

[14:16:31.0285] <Waldo>
If memory serves, I returned from the PCT and used my laptop for a few months only to discover _entirely too late_ my Fedora had become unsupported while I wasn't looking.  That necessitated an emergency backup and install of latest Fedora, no matter the time in the normal Fedora release cycle.  Hence moving to 30 near its end.

[14:16:57.0369] <sfink>
1GB is pretty small, you should probably put 4 of them into a horadric cube and get yourself a 4G stick at least

[14:17:19.0709] <sfink>
oops, sorry. Our latest family activity is playing Diablo II.

[14:19:01.0542] <Waldo>
It probably wouldn't hurt to have a decent USB stick at hand for random purposes, but the need is so vanishingly rare (particularly for the extra space over the ones I have already) to not be worth it.  And when I can't just pick a random store to go to to get one, if I'm opsec-paranoid enough.

[14:21:37.0326] <sfink>
confession: it's awfully hard to test duplicate string counting when the GC is automatically deduplicating strings during tenuring. Looking for an easy way to force tenured string allocation and not finding it. Questioning as to whether I want to do the plumbing that would be necessary.

[14:21:39.0407] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:22:55.0312] <sfink>
maybe I could implement a testing function configureFeature('deduplication', 'off')? Ugh.

[14:27:44.0991] <Waldo>
sfink: Whimsyshire in Diablo III might be more family-friendly.

[14:28:05.0444] <Waldo>
(not a Diablo player, but I'm peripherally aware of these sillinesses)

[14:40:23.0561] <sfink>
last I tried, Diablo III required a better graphics card than the crappy laptops I stuck my kids with

[14:41:33.0178] <mgaudet>
confession: Getting close to having my morass of patches in shape for review; was hoping for today, but will have to be tomorrow, out of time. 

[16:25:38.0583] <Waldo>
confession: Finished a lengthy yet solid first draft of care-and-feeding-of-ICU documentation for bug 1642505.

[16:25:41.0531] <botzilla>
https://bugzil.la/1642505 — ASSIGNED (Waldo) — Add ICU/tzdata care-and-feeding documentation


2020-06-02
[03:26:01.0489] <smaug>
jonco: I think I don't understand how WeakRef is supposed to work

[03:26:40.0173] <smaug>
the proposal hints that var w = new WeakRef({foo: "bar"}); should start returning undefined from w.deref() at some point

[03:35:03.0566] <jonco>
smaug: yes, deref() will return undefined if the target of the WeakRef has been collected

[03:35:55.0277] <smaug>
I couldn't get that to work at least with DOM objects, when using browser console

[03:36:05.0062] <smaug>
but perhaps browser console is doing something weird

[03:36:22.0297] <jonco>
targets are kept alive for the current turn

[03:36:29.0966] <jonco>
and GC has to happen in between

[03:36:36.0974] <smaug>
I tried something like var w = new WeakRef(document.createElement("div"));

[03:36:48.0440] <smaug>
and then kept calling GC and CC

[03:36:51.0077] <smaug>
and waited

[03:37:00.0471] <smaug>
and then used w.deref()

[03:38:00.0641] <smaug>
anyhow, my testing might have had some problem, but I'd like to see some automated tests for WeakRef using DOM objects

[03:39:04.0550] <jonco>
ok, and more than the existing mochitests

[03:39:22.0450] <smaug>
I haven't found anything using DOM objects

[03:39:27.0458] <smaug>
only JS objects

[03:40:22.0466] <annevk>
I can't get x = new WeakRef(document.createElement("div")); setInterval(() => console.log(x.deref()), 200); to return something else in Chrome either

[03:40:25.0451] <jonco>
there's one that does makeDOMCycle to make a cycle of objects going through the DOM

[03:40:59.0844] <smaug>
https://searchfox.org/mozilla-central/source/js/xpconnect/tests/mochitest/test_finalizationRegistry.html ?

[03:41:30.0959] <jonco>
yes

[03:41:31.0540] <smaug>
but that test is more about FinalizationRegistry part of the API

[03:41:40.0542] <jonco>
oh right, OJ

[03:41:46.0061] <jonco>
 * oh right, OK

[03:41:53.0562] <jonco>
sure, I'll add some for WeakRef

[03:43:50.0653] <jonco>
annevk: a longer interval (I tried 10 seconds) works in firefox

[03:44:13.0176] <jonco>
annevk: probably due to deref() keeping the target alive for the current turn

[03:44:58.0036] <smaug>
jonco: and because how wrappers are handled, worth to test objects both with preserved wrappers and without.  So case 1: new WeakRef(document.createElement("div")); and case 2: let o = document.createElement("div"); o.foobarproperty = true;  new WeakRef(o); o = null;

[03:45:30.0297] <smaug>
yeah, calling defer() too often might have been the reason why my testing failed, though I did trigger GC/CC from about:memory

[03:45:42.0060] <jonco>
smaug: great, thanks

[04:11:49.0701] <annevk>
Ah okay, deref can essentially prolong the lifetime

[06:47:13.0104] <smaug>
jonco: does something guarantee that if CC unlinks some DOM object, but the wrapper hasn't died yet, one can't use WeakRef to get access to the DOM object again?

[07:31:56.0374] <jorendorff>
How does V8 initialize new globals? I know they don't lazily populate the global the way we do, but ... what's the alternative? That's a lot of constructors and methods

[07:32:28.0336] <jorendorff>
 * How does V8 initialize new globals? I know they don't lazily populate global properties the way we do, but ... what's the alternative? That's a lot of constructors and methods

[07:38:38.0920] <wingo>
snapshots, right?

[07:38:44.0354] <wingo>
my knowledge is out of date tho

[07:39:03.0196] <smaug>
https://groups.google.com/a/chromium.org/forum/#!searchin/blink-dev/global$20object%7Csort:date/blink-dev/llHBIsHBb8M/8y5iFb5tBAAJ

[08:00:45.0870] <mgaudet>
how does one run a single reftest in js/src/tests/non262 with the browser? I've tried `mach run reftest <path to test>` and a few variants therein, with no joy. 

[08:02:07.0714] <smaug>
/me doesn't know, but would try ./mach test path/to/test

[08:07:11.0097] <mgaudet>
alas : `It's possible my little brain doesn't know about the type of test you are trying to execute.`

[08:07:18.0957] <mgaudet>
but I didn't know about that, so I learned something! 

[08:09:37.0567] <jonco>
smaug: WeakRefs don't do anything special; as long as the object is still alive you can get it via deref() and when it's found to be dead you can't get it any more

[08:09:53.0932] <smaug>
sure

[08:10:01.0451] <Ms2ger [~half-time dedication]>
mgaudet: `mach run` is just for running the browser, no?

[08:10:01.0731] <smaug>
but how does that work with our GC/CC setup

[08:10:19.0775] <smaug>
the wrapper stays alive pasts unlink 

[08:10:25.0485] <smaug>
or may stay alive

[08:10:32.0062] <smaug>
 * the wrapper stays alive past unlink 

[08:10:49.0282] <mgaudet>
to be clear: I have a failure in `Windows 10 x64 debug Reftests test-windows10-64/debug-jsreftest-e10s-1 R(J1)` (but I doubt it's platform specific) in a newly added test, but only if run via the browser I think. 

[08:10:53.0746] <Ms2ger [~half-time dedication]>
mgaudet: maybe `mach jstestbrowser`?

[08:11:34.0146] <mgaudet>
Ms2ger [~half-time dedication]: oh... I hope not... last time I used that it was awful :P

[08:11:40.0982] <mgaudet>
but I'll bet you're right. 

[08:12:01.0784] <sfink>
mgaudet: I have attempted to do that at various times. I did not come away a happier person than I was when I started. What I remember is that I had to use something from the installed (packaging?) location, and that the options for restricting to a single test or a subset of the tests were very, very flaky. As in, they didn't work unless you figured out how to make things look exactly like automation, which unpacks packaged tarballs in various places.

[08:12:20.0964] <mgaudet>
😬

[08:12:34.0117] <sfink>
I do have this in my NOTES file: `cd js/src/tests; MOZ_DISABLE_CONTENT_SANDBOX=1 mach reftest --total-chunks 3 --this-chunk 1 jstests.list`

[08:12:36.0665] <sfink>
it might mean something

[08:13:08.0014] <mgaudet>
Alright. Lemme take a few whacks using that as a starting point. (never considered a non-top level invocation of mach) 

[08:13:16.0924] <sfink>
(the sandbox disabling is almost certainly because I was writing out my own trace files; you don't need it)

[08:13:17.0071] <jonco>
smaug: I'm trying to remember what makes this work in the absence of weak refs

[08:13:43.0239] <jonco>
smaug: tracing the wrapper prevents the DOM objected from being CCed?

[08:14:12.0103] <smaug>
that doesn't prevent it to be CCed

[08:14:49.0390] <smaug>
normally if wrapper is gray, nothing in gc land can touch it, and then CC finds the cycle and unlinks

[08:14:54.0930] <smaug>
and then GC can collect the wrapper

[08:15:19.0810] <smaug>
(but I need to memorize again WeakMap handling. Or let mccr8 explain, yet again )

[08:15:55.0793] <mgaudet>
parsing manifests failed. :S Irksome. 

First things first: I'm gonna open a bug to see if someone can't teach `mach test` to just _do the right thing_ because this shouldn't be so hard

[08:16:50.0418] <jonco>
smaug: interesting, so can JS get the same wrapper again once it is gray?

[08:17:10.0758] <smaug>
well, the wrapper is there

[08:17:19.0811] <smaug>
and CC doesn't do anything to it

[08:17:28.0534] <smaug>
other than traces through

[08:17:31.0871] <smaug>
to find cycles

[08:18:49.0755] <smaug>
jonco: does use of WeakRef force preserving wrappers?

[08:19:03.0031] <smaug>
(tiny bit different topic, related still)

[08:19:16.0587] <jonco>
smaug: no

[08:20:30.0389] <smaug>
since if not, what happens if one does: document.body.appendChild(document.createElement("div")); var w = new WeakRef(document.body.lastChild);

[08:20:51.0660] <smaug>
document.body.lastChild certainly stays alive there, but its wrapper may die

[08:20:58.0612] <smaug>
when GC runs

[08:22:27.0607] <jonco>
smaug: yes that would seem to be a problem

[08:23:39.0688] <jonco>
I guess it exposes that our implementation may collect and recreate wrappers, which would not be expected

[08:27:51.0499] <jonco>
smaug: so we should make the target of a WeakRef a preserving wrapper right?

[08:28:03.0740] <mccr8>
We have to do the same thing for weak map keys, for similar reasons.

[08:28:06.0794] <jonco>
smaug: would that also fix the first problem, by keeping the DOM object alive longer?

[08:29:13.0524] <mccr8>
jonco: what about weak maps to cross compartment wrappers? That's a similar issue.

[08:29:16.0938] <mccr8>
err weak refs

[08:30:19.0112] <jonco>
mccr8: I don't remember exactly now, but we did a lot of work around handling CCWs

[08:30:33.0356] <mccr8>
jonco: ok great.

[08:30:34.0415] <jonco>
this all makes me think I need to write more tests though

[08:31:00.0666] <mccr8>
jonco: also keep in mind CCWs to DOM wrappers, if that requires additional handling.

[08:31:25.0705] <jonco>
good point

[08:31:39.0379] <mccr8>
All of this weak map key stuff is coming back to me now...

[08:31:44.0091] <mccr8>
I think that's all of the cases though

[08:32:32.0280] <mccr8>
Learn from our past mistakes! Fixing that long tail of weak map key issues over the course of like 4 years was annoying.

[08:33:07.0611] <jonco>
honestly weak references of one form or another seem to cause most of the headaches with GC...

[08:33:42.0860] <mccr8>
Well, weak references are basically users saying "I don't understand the lifetime of my objects... handle it for me!" so it sort of makes sense. ;)

[08:33:54.0160] <jonco>
yeah

[08:36:06.0382] <mccr8>
Hmm I wonder if remote window proxies are a new case for these weak references to deal with. I'm not sure how preservation might work with those.

[09:57:05.0417] <jorendorff>
yulia: If a bug is worth looking at for a twitch stream, how do I mark it in bugzilla

[09:57:33.0817] <yulia>
good question, you can just ping me and i will add it to my list

[09:59:26.0292] <jorendorff>
bug 1639078 and bug 605515. Like any bug, though, 90% chance they'll turn out to be horrifying in unexpected ways :-|

[09:59:27.0633] <botzilla>
https://bugzil.la/1639078 — UNCONFIRMED (nobody) — typeof an uninitialized variable should throw a ReferenceError

[09:59:28.0186] <botzilla>
https://bugzil.la/605515 — NEW (nobody) — Strict mode code should throw ReferenceError when assigning to a global if it doesn't exist at BINDNAME time

[10:01:29.0228] <yulia>
neat

[10:03:52.0872] <yulia>
i ran into https://bugzilla.mozilla.org/show_bug.cgi?id=1639078 actually, i was planning on doing this next

[10:04:11.0354] <yulia>
it looks kinda hard actually

[10:04:23.0789] <yulia>
a bunch of tests that should have been fixed by the last stream are now failing this way

[13:37:53.0543] <mgaudet>
jorendorff: ping? 

[13:37:59.0635] <jorendorff>
pong

[13:38:44.0519] <mgaudet>
Hey: so in https://phabricator.services.mozilla.com/D74104 Andre added "newPrivateSymbol" a testing function which returns a private symbol 

[13:38:56.0092] <mgaudet>
erm -- patch before that 

[13:39:29.0615] <mgaudet>
anyhow; the problem is that this seems to anger the browser and I can't figure out why

[13:39:36.0462] <mgaudet>
or if I should bother to care 

[13:39:37.0913] <jorendorff>
mgaudet: whaaat

[13:39:43.0039] <jorendorff>
the browser though

[13:40:05.0486] <Waldo>
it hateses us

[13:40:09.0898] <mgaudet>
specifically: `var v = newPrivateSymbol('')` blows up, because browser bindings seem to try to convert the symbol to a string

[13:40:22.0103] <mgaudet>
and we throw an error that says you can't

[13:41:02.0164] <mgaudet>
https://paste.mozilla.org/5Kkjh4TW (for backtrace) 

[13:41:52.0134] <jorendorff>
totally wild

[13:42:09.0836] <mgaudet>
(Like, what confuses me is why `var v = Symbol('x')` works 

[13:42:12.0156] <mgaudet>
 * (Like, what confuses me is why `var v = Symbol('x')` works) 

[13:42:12.0826] <jorendorff>
oh, this isn't `var v = `, it's `var name = `'

[13:42:15.0879] <jorendorff>
 * oh, this isn't `var v =`, it's `var name =`

[13:42:29.0489] <jorendorff>
there is actually a `window.name` property that's a setter, and DOM setters have types

[13:42:30.0809] <mgaudet>
erm. yes. oh crap. This is an important word isn't it

[13:42:34.0064] <jorendorff>
so they auto-coerce

[13:42:48.0687] <mgaudet>
/me sadly drops face onto keyboard

[13:42:54.0261] <Waldo>
Haha, you got DOM0'd!  😁

[13:43:06.0490] <Waldo>
I do love me some DOM0.

[13:43:20.0351] <mgaudet>
Well.

[13:43:22.0907] <jorendorff>
i mean if you like a good hazing

[13:43:37.0852] <mgaudet>
Definitely a good hazing today :D 

[13:43:50.0169] <mgaudet>
This should be an easy enough fix then! 

[13:43:57.0641] <Waldo>
You will never find a more wretched hive of scum and villainy.

[13:45:52.0661] <mgaudet>
tada. Test passes. That was only many hours of time (most of which was harness related issues) 

[13:46:04.0251] <mgaudet>
Thank you jorendorff !

[13:46:27.0996] <mgaudet>
(Though, I should have clued in it was a setter and that was a bit odd when I saw the stack) 

[14:13:45.0719] <mgaudet>
jorendorff: You've got a whole bunch of phabricator stuff coming at you. 1. Lemme know if you want me to spread reviewer load around at all. 2. The stack is.... speculative... in places. Which is to say, I took a stab at things, but I definitely don't think the stack is 'land-as-is' necessarily; There was the patch earlier that you believed led to a BCE assertion... I wasn't quite able to figure that out, so I'd say let's leave it as is; but I tried fairly hard to make sure things worked and didn't crash within the stack.

[14:16:10.0838] <mgaudet>
The thing I need most is some high level feedback jsut to avoid spending too much time outside the realm of reasonableness 

[14:23:41.0525] <mgaudet>
confession: Spent morning fighting jstestbrowser, because of test case issue. Trying to land first pieces of private fields functionality. Got rest of stack published for feedback/review

[14:23:43.0827] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:49:17.0283] <jorendorff>
mgaudet: nope, bring it on

[14:49:35.0256] <jorendorff>
i will look, but mostly tomorrow. tired after diplomacy


2020-06-03
[18:53:32.0238] <Waldo>
confession: Snuck "haruspex" into a comment on a patch.

[22:09:18.0965] <annevk>
jorendorff: Waldo: are you aware of https://github.com/whatwg/streams/pull/1035? (Rewriting Streams in terms of IDL.) Domenic is asking if we're okay with that.

[00:55:21.0162] <Ms2ger [~half-time dedication]>
SM already implements the wasm js api, which is specced with idl, fwiw

[01:40:44.0636] <jandem>
hm, time to rename `JSOp::ToId` to `JSOp::ToPropertyKey`

[01:42:26.0305] <annevk>
Ms2ger [~half-time dedication]: well, and there's problems with that, right? Such as https://github.com/heycam/webidl/issues/865. And as long as we don't use IDL to implement things that probably won't be fixed...

[07:20:40.0799] <evilpie>
Style question: For new code. Should I prefer `js::jit::Bla(js::jit::XX x)` or just add `using namespace js::jit`

[07:23:10.0151] <tcampbell>
evilpie `using namespace js::jit;` is okay if this is in `js/src/jit`

[07:24:08.0867] <tcampbell>
the `js`, `js::jit`, `js::gc`, `js::frontend` are pretty pervasive right now

[07:24:48.0236] <tcampbell>
they mostly follow directory structure and moz.build files so that unified builds don't end up mixing them

[07:32:18.0218] <evilpie>
tcampbell: nice thanks

[07:32:47.0972] <tcampbell>
(don't add any global using beyond those though..)

[08:26:52.0849] <jonco>
@allstarschh|afk: did you manage to reproduce that compilation error?

[08:27:21.0652] <@allstarschh|afk>
yes, so I tried with one gtest in dom/

[08:28:16.0073] <@allstarschh|afk>
jonco: or should I add a gtest in js/ ?

[08:28:36.0298] <jonco>
ok, does your patch fix it?

[08:29:09.0451] <@allstarschh|afk>
yes

[08:29:58.0713] <jonco>
well, that's good, the problem wasn't what I thought it was then

[08:31:33.0563] <@allstarschh|afk>
@jonco, oh, there's another problem?  

[08:34:32.0440] <jonco>
@allstarschh|afk: no, all good

[08:38:16.0986] <@allstarschh|afk>
jonco: I'll try to add a gtest for it, in js/,  or you have better suggestion for a location to test this outside js/ ?

[08:42:49.0172] <jonco>
@allstarschh|afk: I don't know how gtests work, and it's not super important to add test, but probably best add it somewhere in js

[08:42:55.0023] <jonco>
if you feel like doing that...

[08:46:20.0728] <Waldo>
> <@annevk:mozilla.org> jorendorff: Waldo: are you aware of https://github.com/whatwg/streams/pull/1035? (Rewriting Streams in terms of IDL.) Domenic is asking if we're okay with that.

I haven't closely followed general activity in the repository, sadly.  Various aspects of the bulleted list are things we pretty much already implement (perhaps in violation of the current spec).  Other things are pretty easy to do.  I assume I'd have to go through the entire diff to say absolutely 100% positively certainly everything is fine and dandy, but based on what I see listed there, I don't think this is likely to pose any impossible or sufficiently-difficult problems for us.  And even if there _were_ something, the general tenor of the changes is sensible enough that we probably ought suck up whatever difficulty might arise.  (This is all predicated on our code continuing to remain inside the JS engine, such that "implement WebIDL semantics" means we end up hand-rolling the conversion code ourselves for now still.  For the style of coding we are doing, in terms of managing JS object layout and slots directly, we need to continue to remain there.  A few things would be simplified if this code were moved outside of the JS engine for sure.  But un-fusing allocation of a C++ object and a JS object/wrapper around it would almost certainly harm memory consumption and perf both, over what we do now where the JS object contains slots that contain internal implementation detail inline.)

[08:47:04.0357] <@allstarschh|afk>
jonco: my zoom has some problem. join later

[08:49:09.0584] <jorendorff>
This change to the spec is overdue. On the spec side, it will help make things more consistent. We have to figure out how to avoid ending up with two flavors of webidl glue, but that's on us

[08:51:42.0135] <Waldo>
Yeah.  I have a vague dream that at some point something like WebIDL, or just the idea of well-typed kernels of all functions, being something the JITs know about -- so given arguments they can assure are adequately typed at runtime, all the conversion boilerplate could be boiled out of existence.  I'm not sure what the right path from here to there might be, not least because you really want this as a public JS engine interface anyone can use, and that's a whole boatload of new API to design, at least semi-stably.

[08:53:28.0996] <Ms2ger [~half-time dedication]>
We need a wall-of-text reaction emoji

[08:53:41.0971] <Waldo>
Ms2ger [~half-time dedication]: Go to sleep.

[08:53:55.0138] <Waldo>
/me slaps Ms2ger [~half-time dedication] around with a wall of text a bit

[09:22:54.0613] <nbp>
> <@evilpie:mozilla.org> Style question: For new code. Should I prefer `js::jit::Bla(js::jit::XX x)` or just add `using namespace js::jit`

In C++, you do not need to specify `js::jit::XX` as `js::jit` would be used for the lookup of arguments, based on the fact that the function is defined within `js::jit::` it-self.

[09:23:35.0099] <nbp>
IIRC

[09:24:46.0333] <Waldo>
Well, so, `using namespace js::jit; void foo() {}` assuming that there was `namespace js { namespace jit { void foo(); } }` previously _does not actually define the declared function -- you have to use a qualified name.  So you _must_ at least do `void jit::foo() {}`.

[09:25:30.0434] <Waldo>
Very much agreed that adding qualifiers to argument types, that duplicate qualification on the function name, is not necessary and not desirable.

[09:26:24.0584] <Waldo>
 * Well, so, `using namespace js::jit; void foo() {}` assuming that there was `namespace js { namespace jit { void foo(); } }` previously _does not actually define the declared function_ -- you have to use a qualified name.  So you _must_ at least do `void jit::foo() {}`.

[09:28:09.0924] <sfink>
https://v8.dev/blog/pointer-compression

[09:28:56.0423] <nbp>
x32 is making a come-back 😁

[09:30:58.0091] <mgaudet>
compressedRefs in java

[09:37:45.0672] <nbp>
I guess we could do the same in Rust, by having 4GZones.

[09:41:10.0041] <nbp>
However this would imply re-implementing every library type using these 32 bits pointers.

[09:43:26.0318] <froydnj>
> <@nbp:mozilla.org> x32 is making a come-back 😁

n32, you mean 😛

[09:45:57.0812] <froydnj>
https://techpubs.jurassic.nl/manuals/0630/developer/Mpro_n32_ABI/sgi_html/ch01.html

[09:49:29.0841] <nbp>
I actually meant x32, which was a proposal to use 32bits address space for program running on 64 bits architecture.

[09:49:40.0855] <nbp>
but this indeed looks similar.

[09:51:26.0124] <nbp>
https://en.wikipedia.org/wiki/X32_ABI

[09:51:51.0470] <froydnj>
indeed

[10:10:13.0243] <annevk>
Waldo: jorendorff: thanks for following up! And those future musings sound very interesting :-)

[10:11:07.0862] <Waldo>
Hey, I'm just musing up work for mostly Other People to do.  😁

[10:12:46.0009] <evilpie>
ugh InlinableNatives.h was never independently build-able anyway. Thanks non-unified 

[10:22:45.0237] <jorendorff>
Thanks for the ping

[12:42:09.0683] <mgaudet>
confession: Grumbling at tests not testing what I thought they were testing. 

[12:42:12.0073] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:01:37.0678] <mgaudet>
confession: Implementing a prototype of better locations for private name tracking was easier than I expected. Given I spent all day looking at other stuff, I'm pretty happy I got that working before EOD! 

[14:16:49.0302] <smaug>
jonco: or sfink where did https://bugzilla.mozilla.org/show_bug.cgi?id=1642974#c8 happen?

[14:16:54.0715] <smaug>
I mean preserve wrapper part

[14:17:00.0005] <smaug>
of perhaps mccr8 knows

[14:17:37.0963] <smaug>
oh, I see

[14:17:58.0815] <smaug>
nm.  I thought the link was to wrong bug, but the patch there had changed. 

[14:18:21.0870] <mccr8>
smaug: https://bugzilla.mozilla.org/show_bug.cgi?id=1642685

[14:19:36.0482] <smaug>
yup, silly me

[14:20:22.0934] <smaug>
I got lost which patches I had reviewed in which bugs

[14:23:04.0821] <sfink>
there was a patch that switched bugs, I know

[16:06:18.0338] <iain>
confession: Fixed what I hope is the last ignoreCase-without-unicode corner-case bug in upstream irregexp, just in time to discover that ignoreCase-*with*-unicode is broken in a new and different way


2020-06-04
[00:49:18.0271] <jonco>
smaug: yeah, I moved the test code to a different bug, sorry for the confusion!

[03:33:59.0516] <smaug>
jonco: sorry, a bit slow with this review. Trying to find some tricks to get from non-nsISupports object to nsWrapperCache

[04:01:52.0493] <smaug>
jonco: hopefully we can use addProperty hook or objectMoved hook here

[04:01:57.0749] <smaug>
as commented in phab

[04:03:51.0434] <jonco>
smaug: no worries!

[04:04:22.0085] <jonco>
I'll try casting if there's an addProperty hook but I suspect that it might not work in all cases

[04:05:32.0372] <smaug>
right. I was looking at https://searchfox.org/mozilla-central/source/dom/bindings/BindingUtils.cpp#1136-1137,1147 too

[04:05:59.0762] <smaug>
if nothing else works, DOMJSClass could also have some helper hook to convert to wrapper cache

[04:06:32.0311] <jonco>
OK I'll try that if casting doesn't work

[04:06:34.0011] <jonco>
cheers!

[07:13:46.0470] <jorendorff>
avandolder: Nobody expects DecompileArg. Its behavior is astonishing. But in a good cause

[07:15:09.0872] <jorendorff>
The idea is if you say `[].map(thing.method)` and by mistake `thing` has no `.method`, we want the error message to say:
`thing.method is not a function`
rather than
`undefined is not a function`

[07:15:26.0966] <jorendorff>
 * The idea is if you say `[].map(thing.method)` and by mistake `thing` has no `.method`, we want the error message to say:
`thing.method is not a function`
or
`thing.method is undefined`
rather than
`undefined is not a function`

[07:16:42.0107] <jorendorff>
avandolder: Actually doing that turns out to be ... a very strange thing to do

[07:17:52.0497] <jorendorff>
we have to figure out what _code_ was passed as the argument to `.map()`, even though of course ordinarily we only know what _value_ was passed

[07:18:24.0614] <jorendorff>
so we actually look at the caller's bytecode and try to reproduce what they were doing

[07:19:28.0956] <jorendorff>
that's why it has the weird restriction that it can only appear in functions called directly by user code

[07:19:37.0655] <jorendorff>
 * that's why it has the weird restriction that it can only be used in functions called directly by user code

[07:20:07.0273] <jorendorff>
no point looking at the caller's bytecode if the caller is a self-hosted function the user knows nothing about

[07:21:40.0424] <jorendorff>
We can change that, though. It wouldn't be hard to walk up the stack until we find a non-self-hosted frame.

[07:22:02.0340] <jorendorff>
 * We can change that, though. I don't _think_ it would be hard to have `DecompileArg` walk up the stack until we find a non-self-hosted frame.

[07:22:13.0730] <jorendorff>
another thing for your notes on self-hosting

[07:22:35.0288] <avandolder>
alright. that does make sense, I guess i just saw it being used and didn't really look into it

[08:33:18.0007] <jorendorff>
jandem: everything to do with iterators is basically a nightmare to optimize, right? is there any hope?

[08:35:07.0840] <jandem>
scalar replacement can help but I don't know how often that kicks in right now

[08:35:20.0038] <jandem>
but yes in general there's quite a lot of overhead from the iterator protocol

[08:35:23.0246] <jorendorff>
at the least we'd have to be inlining .next to get that

[08:35:28.0186] <jorendorff>
right?

[08:36:09.0131] <jandem>
correct

[08:38:22.0132] <jandem>
(with Warp the hope is that inlining can be combined with specialized ICs for the inlined callees, that should help some with polymorphic functions)

[08:38:38.0959] <jandem>
 * (with Warp the hope is that inlining can be combined with specialized Baseline ICs for the inlined callees, that should help some with polymorphic functions)

[08:40:31.0481] <avandolder>
just wondering, is it possible to break out of a for-of loop without having the iterator be closed? my reading of the spec implies that you can't but I'm not certain

[08:41:01.0547] <iain>
I believe that it should not be possible

[08:41:46.0052] <yulia>
what defines an optimizing tier? we have ion, but we also have the bytecode compiler. 

[08:42:09.0189] <iain>
Although maybe there are corner cases like the uncatchable error thrown for slow scripts

[08:42:41.0582] <iain>
yulia: What do you mean by "what defines"?

[08:43:08.0790] <yulia>
keith and jason are chatting about sm optimizing tiers, and jorendorff mentioned that there is only one

[08:43:14.0154] <yulia>
which would be ion, i think

[08:43:23.0560] <yulia>
but i am wondering how the other layers are defined

[08:43:53.0890] <iain>
Oh, I see

[08:44:13.0023] <jorendorff>
yulia: yeah, there's our jargon and then there's the rest of the world

[08:44:19.0501] <jorendorff>
the way I think about it, we have 4 execution engines

[08:44:27.0151] <iain>
Baseline is a template JIT, which is a fancy of way of saying it takes each JSOp and emits code for it without looking much at the broader context

[08:44:27.0762] <jorendorff>
C++ interpreter, baseline interpreter, baseline compiler, Ion

[08:44:45.0804] <evilpie>
there are like 4 or 5? interpreter/basline-interpreter, baseline, ion "normal", ion "full"

[08:45:13.0117] <iain>
Ion (and in the future Warp) are optimizing JITs, which means that they take the bytecode, convert it to an intermediate representation, look at it holistically, optimize it, and then generate code

[08:45:19.0647] <jorendorff>
/me makes a vague gesture

[08:46:06.0777] <yulia>
i see, and if i understand correctly, we are not optimizing (which i read as transforming the code so that it is more efficient) in the other engines, but using other techniques to make things faster?

[08:46:43.0943] <iain>
It's a fuzzy line

[08:47:16.0147] <iain>
But I think it would be most accurate to say that tiers below Ion/Warp are not optimizing at a level higher than an individual op

[08:47:20.0579] <jandem>
the Baseline JIT without TI can be surprisingly fast for how it works

[08:47:25.0424] <jorendorff>
right, "optimizing compiler" is an oldish term

[08:47:34.0005] <jorendorff>
established before the lines were blurred so much

[08:47:39.0423] <jorendorff>
it means traditional optimizations

[08:48:15.0140] <jorendorff>
inlining, constant folding, dead code elimination, code motion, nontrivial register allocation

[08:48:54.0573] <jorendorff>
but baseline interpreter and baseline compiler do have important optimizations relative to the C++ interpreter which is astonishingly dumb

[08:49:09.0077] <iain>
Baseline makes individual ops faster, but it does not try to improve the function as a whole

[08:49:10.0953] <jorendorff>
just not ... "compiler optimizations"

[08:49:22.0508] <yulia>
i see, makes a lot of sense

[08:49:23.0894] <jorendorff>
jargon

[08:49:46.0154] <yulia>
what does "TI" stand for ? (sorry, my guess is type inference but that might be totally off)

[08:49:50.0989] <iain>
Correct

[08:50:47.0265] <iain>
Although at this point it's more like "the pile of code that we call TI"

[08:52:26.0068] <iain>
And "Type Information" might be a less misleading name

[08:53:53.0311] <jandem>
"Baseline is faster without TI" is because (hand waving) only Ion benefits from TI, so Baseline just has to do a lot of bookkeeping to maintain all the invariants and type information

[08:54:14.0081] <jandem>
 * "Baseline is faster without TI" is because (hand waving) only Ion benefits from TI, so Baseline has to do a lot of bookkeeping to maintain all the invariants and type information

[08:54:21.0684] <yulia>
ah right

[09:02:27.0513] <overholt>
great hacks post, iain 

[09:03:24.0491] <yulia>
oh nice, i didn't see that

[09:05:53.0606] <iain>
Thanks!

[09:10:26.0537] <jorendorff>
jandem: Is there a way to find out if scalar replacement kicked in for a given loop?

[09:13:33.0879] <jandem>
if you have a debug shell build, maybe `IONFLAGS=escape`?

[09:21:03.0276] <nbp>
jorendorff: If some code is not optimized with scalar replacement + escape analysis, adding support for new instructions is quite easy.

[09:21:26.0103] <jorendorff>
jandem: thanks.

[09:22:11.0015] <nbp>
One extra note, Scalar Replacement does not remove the allocation, it only move the computation of fields away. So there is some extra logic needed to recover the allocation during bailout with Recover instructions.

[09:23:13.0892] <nbp>
They should also be easy to add.

[09:23:14.0483] <jorendorff>
interesting. what then is the main optimization benefit when Scalar Replacement happens?

[09:23:26.0965] <jorendorff>
Currently, I mean

[09:23:48.0268] <nbp>
Enabling the later one which removes the allocation.

[09:24:25.0836] <nbp>
and optimizing operation without have to write-back & read-back the computed values.

[09:26:11.0690] <nbp>
jorendorff: https://blog.mozilla.org/javascript/2016/07/05/ionmonkey-evil-on-your-behalf/

[09:34:55.0116] <nbp>
jorendorff: Splitting the removal of the allocation from Scalar Replacement was actually a good design choice, it simplified things a lot, and we already had code to remove code which was only used on bailout (such as allocations).

[09:38:32.0198] <nbp>
“Hopefully, this will be addressed in the future in a project with the code name ThreeHeadedMonkey.” 😥

[12:46:50.0414] <Waldo>
confession: Snuck "tinpot dictator" into documentation.

[12:46:52.0608] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[12:59:21.0080] <evilpie>
What can we do about cases like bug 1639565 ?

[12:59:22.0503] <botzilla>
https://bugzil.la/1639565 — NEW (nobody) — JS engine doesn't provide useful stack or source reference for certain errors

[12:59:47.0929] <evilpie>
tl;dr: We are throwing, but there aren't any JavaScript frames on the stack, it's pure C++

[13:14:43.0286] <Waldo>
Good news, everyone!  Our ICU integration is now documented, including how to update it and all its subcomponents and associated data sources.  https://searchfox.org/mozilla-central/source/intl/icu/README.md  Feel free to file bugs on it, make changes to it, etc.  (also sent mail about this to the newsgroup)

[13:17:14.0306] <evilpie>
how can I access that via https://firefox-source-docs.mozilla.org/i ?

[13:18:15.0442] <Waldo>
evilpie: Write the patches to move it over to `intl/docs`.  😉  Nudge nudge, wink wink...

[13:18:23.0875] <Waldo>
(or maybe `intl/doc`)

[13:19:17.0519] <evilpie>
there is already https://searchfox.org/mozilla-central/source/intl/docs

[13:20:02.0307] <Waldo>
Yeah, I picked _a_ format to just get something up there (and thinking maybe Markdown had half a chance of being the proper format).

[13:20:48.0340] <evilpie>
well this is super easy to fix. Just run `pandoc README.md -o icu.rst`

[13:22:24.0609] <Waldo>
...wait, this is really an automated thing?  See, I didn't know that, that's why I didn't do it.  😉

[13:22:35.0250] <Waldo>
(automatable)

[13:23:14.0065] <evilpie>
pandoc is basically magic conjured by Haskell

[14:43:34.0109] <mgaudet>
confession: cleaned up some test case issues, focusing on proxy support for private fields right now. A few wrong attempts so far.


2020-06-05
[23:41:52.0258] <lth>
iain: fyi https://phabricator.services.mozilla.com/D74935#change-rvnfG73Ny9La

[00:25:59.0053] <Waldo>
lth: You done being relaxed now?

[00:26:20.0296] <Waldo>
(I am going to hammer this stupid joke so hard whether anyone wants it or not) 

[00:41:58.0003] <Ms2ger [~half-time dedication]>
/me wraps Waldo in a mutex

[00:58:47.0362] <wingo>
can't take the nuclear option without atomics

[00:59:04.0763] <Waldo>
Won't work, I'm on my guard

[01:00:36.0851] <lth>
/me feels like saying something racy

[01:01:03.0663] <lth>
but then HR would just lock me up

[01:01:33.0164] <Waldo>
I am *here* to consume this content.

[01:02:16.0847] <lth>
talk about being in an uncritical section...

[01:02:21.0879] <lth>
/me leaves for a bit again

[02:21:01.0795] <@allstarschh|afk>
jonco: ping

[02:26:23.0823] <@allstarschh|afk>
jonco: unping, asked in https://bugzilla.mozilla.org/show_bug.cgi?id=1628204#c22

[02:26:38.0970] <jonco>
@allstarschh|afk: sorry I missed your ping

[02:36:01.0807] <jonco>
smaug: that was a good suggestion for a testcase

[02:49:34.0435] <smaug>
jonco: did it find more issues? :)

[02:49:50.0795] <smaug>
I've always hoped we could limit the cases we support

[02:50:06.0134] <smaug>
like, require to always inherit nsISupports shouldn't be that 

[02:50:37.0388] <smaug>
and maybe even always inherit nsWrapperCache, and then rename that to CycleCollectable or some such

[02:50:50.0501] <smaug>
 * like, require to always inherit nsISupports shouldn't be that bad

[05:07:09.0806] <yulia>
I am wondering, is this a reason why this is at the top level of js/src? https://searchfox.org/mozilla-central/source/js/src/Y.js

[05:08:08.0621] <lth>
hm, checked in in changeset #1...

[05:13:23.0705] <nbp>
No idea, I never noticed it before.

[05:13:49.0397] <yulia>
I saw it and thought i checked something in by mistake

[05:13:53.0992] <Ms2ger [~half-time dedication]>
That's one thing, but why was it changed in https://bugzilla.mozilla.org/show_bug.cgi?id=1277479 ?

[05:14:08.0039] <Ms2ger [~half-time dedication]>
Dates back to 2005: https://github.com/mozilla/gecko-dev/commit/b6f6d30bdcc8e6cfa027855c6abd9ead1f14e362

[05:14:08.0507] <yulia>
yes, its maintained but there isn't much info about why...

[05:14:26.0572] <nbp>
That might be the reason on how it got in the repository in the first place.

[05:24:09.0484] <nbp>
apparently "why" is "for fun", based on the urgency of the last fix.

[05:24:38.0768] <tcampbell>
yeah, I just assume it was a smoke-test that engine works

[05:32:51.0056] <iain>
lth: Is there a reason that change was necessary? That code is in a different namespace, and the change will be overwritten the next time we pull changes from upstream

[05:33:13.0047] <lth>
yes, the code did not compile without that change because it resolved Address as js::jit::Address

[05:33:28.0615] <lth>
i can only guess this is some kind of header file interference somewhere

[05:48:00.0540] <iain>
lth: Which builds were failing? I think I see what's going on, but I want to make sure I test the fix properly

[05:48:25.0227] <lth>
iain: debug-noopt builds on x64 linux locally

[05:49:11.0536] <lth>
i'm sorry about the obvious hack because i know this is 3rd party code

[05:49:44.0634] <iain>
No, this is my fault for forgetting about unified builds

[05:49:57.0452] <iain>
I don't know why this wasn't a problem much earlier

[05:59:24.0782] <lth>
iain: i should also mention, this was a problem on mozilla-central even before my patch, so you just got lucky i guess

[06:01:39.0499] <jonco>
@allstarschh|afk: I can't apply your patch from comment 20 on top of the previous one - does that need updating?

[06:02:07.0859] <@allstarschh|afk>
jonco: okay, I'll rebase 

[06:05:20.0649] <@allstarschh|afk>
jonco: just did, I'll submit a try now

[06:11:00.0796] <iain>
lth: Were you using any other configure options beyond `--disable-optimize --enable-debug`?

[06:11:43.0396] <lth>
iain: also --without-intl-api

[06:12:14.0703] <lth>
(because, who has time to wait while that's compiling...)

[06:12:59.0587] <iain>
Ah, that might explain why I hadn't seen it locally

[06:16:07.0150] <jonco>
@allstarschh|afk: maybe easiest if you send me the try link and I can get the patches from tehre

[06:16:15.0715] <jonco>
 * @allstarschh|afk: maybe easiest if you send me the try link and I can get the patches from there

[06:17:22.0370] <jonco>
@allstarschh|afk: oh, it's a standalone patch, that explains things...

[06:24:45.0216] <@allstarschh|afk>
jonco:  right, sorry for not mentioning that, it's applied on m-c, and no other patches in that bug are needed,

[06:38:56.0383] <jonco>
@allstarschh|afk: ok, no worries

[06:40:20.0118] <jonco>
@allstarschh|afk: so the problem is that now the helper thread lock is released between the task being freed inside runTask() and currentTask.release() in handleCompressionWorkload

[06:40:42.0336] <jonco>
I'm not exactly sure what to do about that

[06:44:00.0889] <jonco>
possibly runTask() should be called with the lock held and every implementation would then have to release it internally.  This would help in some cases - GCParallelTask has a whole extra 'finishing' state that it wouldn't need if this were the case

[06:45:42.0480] <jonco>
btw, if you replace the call to task->runTask() with ss->performTaskWork(task) in SynchronouslyCompressSource I think you don't need to add the sync_ field and the extra logic around that

[07:02:05.0718] <@allstarschh|afk>
jonco: sorry, was in a meeting

[07:03:04.0263] <@allstarschh|afk>
jonco: can I call sourceComressionTask->complete() on a helper thread? then I could get away to finishList thing

[07:04:43.0625] <jonco>
@allstarschh|afk: I don't know, I don't know what this does

[07:06:29.0098] <@allstarschh|afk>
jonco: okay, I'll check that, thanks

[07:06:56.0699] <tcampbell>
@allstarschh|afk: probably not. It would race

[07:07:57.0317] <@allstarschh|afk>
tcampbell: yeah, tsan has some failure.....don't know if there's a way to prevent that..

[07:08:12.0244] <@allstarschh|afk>
the tsan failure is https://pastebin.com/SMAd3zkJ

[07:08:47.0124] <tcampbell>
yeah, that is what I expect. It is a real issue

[07:58:01.0978] <nbp>
I noticed it and opened a bug a while ago about it, for what it worth I do not recall it being a security issue but an optimization issue.

[07:58:12.0652] <nbp>
let me dig the bug …

[08:00:54.0276] <nbp>
https://bugzilla.mozilla.org/show_bug.cgi?id=1377268 (I thought I had a better bug than that, more specific …)

[08:01:35.0899] <nbp>
oh, this is a race with tracing … then nvm.

[08:55:32.0663] <mgaudet>
Anyone have time to chat with me a bit about how proxies work internally? (video might be quickest, but I can also try to explain more via chat) 

[08:57:22.0199] <avandolder>
While working on https://phabricator.services.mozilla.com/D78080#inline-451590, I tested some very unscientific microbenchmarks on different ways of implementing forEach on iterators

[08:58:28.0816] <avandolder>
I tried three different implementations, one using a while(true) loop and stepping through the iterator directly, one using a for-of loop with a wrapper around the `next` method, and a for-of loop without wrapping `next`

[08:58:46.0725] <avandolder>
for-of is significantly (~ 1/3) slower for small iterators (10 elements), but much faster (about twice as fast) for large iterators (1000 elements).
weirdly, the version with a wrapped next method is actually slightly faster(!?) then the unwrapped one

[08:59:54.0672] <avandolder>
evilpie: jandemI'm not sure if much can be done about the performance here, or what would be the better approach

[09:00:11.0791] <avandolder>
jorendorff: 

[09:09:04.0010] <jandem>
not sure. Maybe using the most idiomatic version (is that for-of?) makes sense, as long as it's not a whole lot slower. I expect our optimization story to change around that the coming months and for-of is something that will have to be fast anyway

[09:10:43.0664] <iain>
mgaudet: Do you need somebody who actually understands it, or will a rubber duck suffice?

[09:11:33.0274] <mgaudet>
Erm. Not sure! 

[09:12:15.0163] <mgaudet>
We could probably figure it out together :D 

[09:35:33.0180] <evilpie>
avandolder: hard to say what would be fastest. What I did a few years ago was to sit down and look at the iongraph output for for-of with array and hand optimized away everything

[09:35:57.0112] <evilpie>
at this point we sadly regressed this because we also need to handle typed arrays and some other silliness

[09:36:28.0075] <evilpie>
I agree with jandem, for now using for-of if that is the simplest implementation is probably the best solution

[09:38:28.0979] <avandolder>
Alright. That's kind of what I was thinking made sense

[09:40:51.0136] <evilpie>
Is see you are writing a lot of tests. Is the idea to upstream those to test262?

[09:58:48.0617] <avandolder>
Yeah. I have a test262 fork that I'm slowing converting all these tests over to their style in

[11:22:00.0980] <syg>
is numeric separators implemented in spidermonkey?

[11:23:00.0309] <jandem>
yes 

[11:23:27.0987] <jandem>
shipped in 70

[11:23:54.0570] <syg>
excellent, thanks

[11:42:28.0120] <loganfsmyth>
What are the limits of data that can be accessed in a `finalize` handler? Say you had some data on another object that can be cleared when this object is deleted. Right now Debugger instances do a lot of this by having its own `DebugAPI::sweepAll`, and I'm curious if that is something that could be simplified or made to use fewer special-cased APIs.

[11:45:10.0201] <loganfsmyth>
In this case, when a Debugger is GCed, we need to reset a bunch of flags on the Realm so that scripts can be optimized again

[12:01:43.0252] <tcampbell>
loganfsmyth: traversing a gcthing-to-gcthing edge in a finalizer will by default, blow up in your face

[12:02:42.0696] <tcampbell>
there are a few cases we specially allow it to happen, and make that work by running finalizers in phases (we have 3 today)

[12:04:23.0496] <tcampbell>
an example this has bit me before is trying to find a scripts filename while cleaning up. Since it is script->scriptSourceObject->scriptSource->filename(), it blows up

[12:04:54.0545] <loganfsmyth>
alright, so better to stick with the explicit sweepAll call to clear state tied to debugger objects that are being finalized?

[12:05:12.0504] <tcampbell>
/me looks at sweep all

[12:06:46.0404] <tcampbell>
depends how much you like cans of worms

[12:07:29.0019] <loganfsmyth>
there's a lot of ugly GC stuff for the debugger, I've been just kind of theorizing about ways to clean it up in the future

[12:07:44.0272] <loganfsmyth>
so trying to get a sense of what is and isn't allowed

[12:08:04.0383] <tcampbell>
it is a fair ambition

[12:21:18.0555] <tcampbell>
confession: spent more time than I should have optimizing `Object.toString` for things that are not objects because "why, reddit, whyyyy"

[12:21:21.0864] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[12:22:00.0948] <tcampbell>
`function c(e){return"[object Object]"===Object.prototype.toString.call(e)}`

[12:22:37.0706] <tcampbell>
actual function that called an excessive number of times

[12:22:43.0787] <jorendorff>
who can review js/xpconnect/wrappers/XrayWrapper.cpp?

[12:22:47.0223] <botzilla>
bholley x11, peterv x7, bzbarsky x5: /js/xpconnect/wrappers/XrayWrapper.cpp

[12:22:59.0770] <jorendorff>
bleak

[12:25:39.0595] <tcampbell>
mgaudet: this field patch is ready to go now, right?

[12:26:28.0706] <mgaudet>
tcampbell: which?

[12:27:08.0464] <tcampbell>
References to PrivateIdentifiers..

[12:28:09.0791] <mgaudet>
tcampbell: yes, that can be reviewed

[12:33:16.0787] <bholley>
jorendorff: Is it a simple patch?

[12:35:12.0512] <jorendorff>
bholley: It's this: https://phabricator.services.mozilla.com/D77181 and the relevant change is to JSXrayTraits::resolveOwnProperty, to poke a new hole for (AggregateError object).errors

[12:35:27.0178] <jorendorff>
it's a _tiny_ patch, i dunno about "simple"

[12:35:37.0865] <jorendorff>
the xpconnect part is tiny, anyway

[12:38:29.0667] <bholley>
jorendorff: so, why do we need this hole?

[12:39:13.0865] <jorendorff>
bholley: If it had a getter, we wouldn't need it, but this is a new data property like (Error object).message.

[12:39:41.0841] <jorendorff>
So, if we want it to be visible through x-rays, my understanding is we have to have a hole exactly here? I could be wrong

[12:40:33.0778] <bholley>
jorendorff: ok, looks like peterv reviewed the previous AggregateError handling for JS Xrays so I suppose he's probably the best person to review this

[12:40:53.0234] <jorendorff>
ok, sounds good

[12:40:56.0621] <bholley>
(I started to dig in but I'm trying to finish something by EOD)

[12:41:37.0169] <jorendorff>
Sure. Thanks for looking.

[13:01:44.0319] <mgaudet>
confession: Thought a bunch about how we're going to have to handle Proxies + Private Fields. The answer isn't amazing, but should be doable. Monday I'll get deeper into the implementaion, but I started at 5 today, so leaving that till monday. 

[14:10:12.0087] <sfink>
loganfsmyth: a Realm isn't a GC thing, so that doesn't sound too crazy to me.

[14:11:06.0685] <sfink>
I think they are collected by the GC when they're empty, so it's not *entirely* not a GC thing. But I would expect the Realm sweeping to happen well after all Cells are swept. (I should check that, to be sure.)

[14:14:36.0299] <sfink>
yes, `GCRuntime::sweepZones` does `assertBackgroundSweepingFinished` before it calls `zone->sweepCompartments`, which is what will sweep the `Realm`s. So it really seems like a finalizer, especially a foreground finalizer, should be able to access the Realm no problem.

[14:15:49.0811] <sfink>
(a background finalizer might need a mutex.)

[14:33:31.0650] <loganfsmyth>
Cool, if I ever make actual progress on this I'll keep that in mind

[15:09:34.0545] <jorendorff>
well that conversation was a little terrifying

[15:13:55.0822] <iain>
Which conversation?

[15:14:20.0785] <iain>
 * jorendorff: Which conversation?

[15:17:11.0684] <jorendorff>
the one containing the word "finalizer"

[15:22:37.0074] <jorendorff>
I just realized `[false, false, false, true].some()` doesn't work, you must pass a function

[15:22:49.0103] <jorendorff>
I wonder if that's ok


2020-06-06
[17:13:10.0218] <Waldo>
An implied functor seems worse than a user-provided explicit functor.

[17:27:02.0270] <syg>
sfink: what happened to mrgiggles?

[17:27:31.0920] <Waldo>
syg: Hasn't made the transition to Matrix yet, but #freenode_#mrgiggles:matrix.org does exist as a backstop.

[17:27:47.0387] <Waldo>
We have top men working on the transition right now.

[17:27:53.0344] <syg>
where do i get puns 

[17:28:05.0600] <Waldo>
#freenode_#mrgiggles:matrix.org :-)


2020-06-07
[07:12:46.0815] <jorendorff>
Waldo: it's more like: "some" finds out if there are any truthy values, and for convenience there is a `map` baked into it

[07:13:42.0022] <jorendorff>
but what if it happens _not_ to be convenient, you just want to know if any values are true

[11:44:59.0376] <loganfsmyth>
jorendorff: I'd write `.some(Boolean)` personally

[11:45:14.0484] <jorendorff>
ok


2020-06-08
[03:40:41.0465] <nbp>
Does anybody has an AMD Ryzen CPU, to investigate an IonMonkey issue?

[03:40:57.0956] <nbp>
(rr does not yet seems to work on AMD)

[03:41:42.0289] <Benjamin Bouvier>
nbp: yep

[03:42:37.0740] <nbp>
Benjamin Bouvier: https://bugzilla.mozilla.org/show_bug.cgi?id=1643369 can you run the test suite, just in case something crashes.

[03:43:01.0103] <Benjamin Bouvier>
nbp: yep, will run it while i get lunch

[03:44:14.0909] <Benjamin Bouvier>
nbp: note my /proc/cpuinfo gives slightly different information:

```
cpu family	: 23
model		: 113
stepping	: 0
```

[03:45:28.0133] <nbp>
So don't bother, as it really seems specific to the one model reported in the bug.

[05:13:55.0974] <Benjamin Bouvier>
nbp: fwiw i did run while lunch, and only getting GC timeouts, no crashes, with --tbpl and m-c ce2095089a2a 

[06:29:57.0162] <tcampbell>
nbp: I looked at a few and unsurprisingly it is crashing on random arithmetic instructions

[06:30:27.0311] <tcampbell>
In the past I've blamed thermal issues on early ryzen processors

[06:30:50.0205] <nbp>
AMD used to have some bugs due to the scheduling of instructions, I wonder if this is not something similar.

[06:32:23.0839] <tcampbell>
there are definitely scheduling issues when it comes up. My pet theory is that overheating is when caused the scheduler to go weird

[06:34:34.0077] <tcampbell>
can't remember why I thought that last time. I did study a previous wave of ryzen crashes and you could see instructions retiring incorrectly and values going backwards in time (eg. `b = c; a = b;` resulting in `a = c` while `b` ended up with old value)

[06:36:25.0921] <tcampbell>
oh right.. the more cores the processor had, the higher the individual crash rate

[06:36:32.0889] <tcampbell>
that is why I thought it was thermal

[06:36:46.0185] <tcampbell>
Bug 1512430

[06:36:47.0451] <botzilla>
https://bugzil.la/1512430 — NEW (nobody) — Ryzen crashes in irregexp (more cores -> more crashes)

[06:56:31.0155] <nbp>
https://en.wikichip.org/wiki/amd/microarchitectures/zen#CPUID

[07:11:05.0460] <tcampbell>
I'm thinking of adding "JS JIT(blinterp)" to the profiler side-bar summary for the BaselineInterpreter. It is currently lumped into "JS Interpreter". Now would be a good time to object to the name :)

[07:12:01.0513] <tcampbell>
(In this example, I'm looking at JS-only mode, so 'native code' is DOM, etc. I think this breakdown is nice to have)

[07:31:50.0483] <evilpie>
tcampbell: I am thinking "JS optimized interpreter" ?

[07:40:11.0844] <tcampbell>
(mostly just ended with with that because the code is https://github.com/firefox-devtools/profiler/blob/master/src/profile-logic/profile-data.js#L2079 )

[08:31:18.0544] <mgaudet>
Are CCWs 1:1, or can you have multiple CCWs to the same object on another compartment?

[08:34:29.0749] <jandem>
1 CCW per compartment for a specific object

[08:34:58.0935] <jandem>
(multiple CCWs would break object identity)

[08:36:12.0107] <mgaudet>
/me sighs in relief 

[08:36:28.0377] <mgaudet>
phew. Got worried for a second there :D 

[08:37:40.0225] <mgaudet>
Hrm. I'm still in trouble if a third compartment is involved. 

[08:37:48.0376] <mgaudet>
/me adds to test case sketch 

[08:39:00.0578] <tcampbell>
mgaudet wrapping a CCW into a new compartment will unwrap and then rewrap, leading back to a normalized form

[08:40:43.0189] <mgaudet>
I'm trying to work through semantics for CCWs and private fields. What you said reminded me tho: from the prviate field perspective, CCWs are -not- proxies, which is good for me actually. It means things work out... nicer. 

[10:10:35.0136] <sfink>
mgaudet: there's a question on es-discuss ("Why does a JavaScript class getter for a private field fail using a Proxy?") that I didn't try to understand but seems relevant to your nemesis^Winterests.

[10:13:26.0193] <mgaudet>
sfink: thanks for the pointer

[10:13:37.0438] <mgaudet>
that does seem relevant to my interests

[10:13:45.0816] <mgaudet>
(I suppose I ought to subscribe to es-discuss?) 

[10:14:10.0450] <sfink>
es-discuss is mostly dead

[10:14:26.0605] <sfink>
I believe the current recommendation is to follow the github repo

[10:45:34.0125] <Waldo>
/me mutters

[11:29:56.0117] <sfink>
I wonder if there's an easy way to limit PID values. Fedora 31 seems to have lifted the 16-bit limit, which means my pids are now something I have to cut & paste instead of just remembering a number. </first-world-problems>

[11:30:10.0270] <tcampbell>
mgaudet: a CCW is a `ProxyObject`. Things from js `new Proxy(..)` are also `ProxyObject` but use the `ScriptedProxyHandler`

[11:30:24.0252] <Waldo>
32K of PIDs ought to be enough for anybody.

[11:30:46.0504] <Waldo>
Or I guess maybe 64K, not sure if signed or not.

[11:30:50.0315] <tcampbell>
Out `ProxyObject` interface abstracts a fair number more hooks than the spec describes for object extension

[11:30:55.0309] <tcampbell>
 * Our `ProxyObject` interface abstracts a fair number more hooks than the spec describes for object extension

[11:31:03.0457] <mgaudet>
tcampbell: oh yeah, I have all that sorted. 

[11:31:09.0204] <sfink>
you're right, it's 32K

[11:31:29.0980] <sfink>
I can set the kernel limit to anything up to 2^22, apparently. Not sure I want to do that.

[11:31:46.0723] <Waldo>
That's a weird kernel API to offer.

[11:33:14.0644] <sfink>
I'm going to try `echo 12 | sudo tee /proc/sys/kernel/bug_max` and see how many programs still run. It'll be fun.

[11:33:24.0832] <sfink>
er, no I won't. I'll go make lunch instead.

[12:13:50.0573] <tcampbell>
Would "JS JIT (Tier 1 / BaselineInterpreter)" be too verbose in profiler?

[12:14:12.0306] <tcampbell>
baseline-interp feels a lot closer to JIT than interpreter, depite it's name

[12:14:31.0960] <Waldo>
"Baseline interpreted JIT"?

[12:14:38.0092] <tcampbell>
but our "blinterp" / "baseline" / "ion" names are not js-dev friendly

[12:14:59.0687] <Waldo>
Maybe you could call everything variants of "gczeal(2, 4)".

[12:15:45.0045] <tcampbell>
`JS JIT` / `JS JITTER` / `JS JITTEST`

[12:18:09.0643] <tcampbell>
those aggregations probably need their subcategories to should compile time vs exec time

[12:18:25.0194] <mgaudet>
One option would just be to have "interpreter, tier 1, tier 2, tier 3" (which we would know is interp, blinterp, baseline, ion) 

[12:18:41.0660] <tcampbell>
that would probably help give the message very clearly that not having 100 tier 3 is not a bad thing

[12:55:49.0984] <tcampbell>
confession: Adding baseline interpreter labels to profile data. (Bug 1644218)

[12:55:55.0054] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[12:55:56.0276] <botzilla>
https://bugzil.la/1644218 — NEW (tcampbell) — Distinguish BaselineInterpreter samples in Profiler

[13:10:07.0669] <sfink>
"precompiled non-JS", "precompiled JS interpreter", "JIT JS interpreter", "JIT JS baseline", "JIT JS optimized"? (or s/precompiled/AOT/) (or s/baseline/unoptimized) (or "unoptimized", "pseudo optimized", "quasi optimized", "semi optimized", "profile guided optimized", "optimized profile guide", "guided optimized racially profiled",...)

[13:10:16.0066] <sfink>
some of those suggestions might be more useful than others

[13:17:10.0183] <tcampbell>
A suggestion from mstange  is to port the "implementation" field to the JS subcategories (that appear with colors on the side-bar). Then we can have unified sub-categories for Parse/Emitter/Delazify/BaselineInterpreter/BaselineCompile/Baseline/etc..

[13:17:43.0845] <tcampbell>
rather than having to figure out the difference better the two sets of info in that side bar

[13:18:43.0611] <mstange>
tcampbell: if you want to make a full list of subcategories, I also have the following additions: "Structured Clone Reading", "Structure Clone Writing", "Encode Bytecode"

[13:19:08.0212] <tcampbell>
good point

[13:19:23.0069] <tcampbell>
/me looks forwarding to getting rid of "Encode Bytecode" :)

[13:19:56.0681] <mstange>
hah

[13:20:23.0861] <tcampbell>
It will no longer block page-load (https://bugzilla.mozilla.org/show_bug.cgi?id=stencil-serdes )

[13:20:34.0164] <mstange>
nice!

[13:20:56.0445] <tcampbell>
we also can then change the must-load-page-four-times heuristic

[14:23:17.0529] <mgaudet>
confession: Progress on proxies and private fields. Just had my first simple testcase pass. The patch is made from duct tape and bailing wire, but proves the approach


2020-06-09
[22:01:59.0289] <arai>
am I correct that CompilationInfo is the top-level struct to hold the stencil data?

[22:42:01.0995] <Waldo>
It has a `FunctionType` vector, so probably.

[22:43:17.0535] <arai>
now I'm trying to figure out the current relation between frontend-local data, stencil data, and runtime data

[22:44:38.0522] <arai>
(and trying to draw a graph between them

[22:44:43.0549] <arai>
is there already such graph?

[22:45:32.0491] <arai>
(like, what's created where, what's copied over, what's referred from where, etc

[23:44:29.0846] <arai>
also, the lifetime of each struct

[02:16:19.0792] <annevk>
Who is working on top-level await, if anyone? https://github.com/whatwg/html/pull/4352 could maybe use some input.

[02:18:54.0486] <yulia>
annevk: i am, i will take a look

[02:19:25.0333] <yulia>
jonco is helping me find my way, maybe he could take a look too?

[02:20:03.0093] <jonco>
yulia: sure, will take a look

[02:26:52.0650] <annevk>
yulia: jonco: not sure if you saw but service workers also require some dedicated work for this feature and I think there was also a question of disabling it for worklets

[02:27:25.0025] <annevk>
not sure where the worklets thing ended up though, the core spec isn't that well maintained unfortunately

[02:29:32.0464] <annevk>
Thinking about it more, probably for worklets it's fine, since it's only about initial startup

[02:30:05.0927] <jonco>
yulia: you might want to ask someone with more browser knowledge about the nuances of the ignore-destructive-writes counter, I'm not clear on that

[02:31:46.0163] <yulia>
jonco is there someone on our team who has this knowledge? still reading the thread..

[02:32:28.0003] <annevk>
hsivonen will know

[02:33:05.0113] <yulia>
ok, great I will get in touch with him

[03:17:35.0707] <hsivonen>
I was called in as the document.write abyss gazer. Is there some explainer that I should read before the above-linked GitHub issue?

[03:18:56.0764] <yulia>
hsivonen: i am still finding my way around the spec... there is a general explainer on top level await but i am not sure it will help here

[03:19:03.0378] <yulia>
https://github.com/tc39/proposal-top-level-await

[03:20:51.0753] <yulia>
maybe Ms2ger [~half-time dedication] knows?

[03:21:28.0991] <Ms2ger [~half-time dedication]>
hsivonen: sorry :)

[03:21:42.0243] <hsivonen>
> <@yulia:mozilla.org> hsivonen: i am still finding my way around the spec... there is a general explainer on top level await but i am not sure it will help here

Thanks.

[03:24:50.0434] <hsivonen>
Am I misreading our code or is our ignore-destructive-writes counter already wrong for module scripts?

[03:25:11.0298] <Ms2ger [~half-time dedication]>
I guess the shortest summary is: "run a module script" now returns a Promise that will resolve at some arbitrary point in the future - if at all. What happens if you call document.write while one of those Promises is pending?

[03:25:32.0456] <yulia>
hsivonen jonco might know, but i also am in the process of updating our modules to conform with recent changes to the spec

[03:25:48.0117] <yulia>
I don't know yet if i will touch the counter

[03:26:34.0243] <hsivonen>
> <@ms2ger:igalia.com> I guess the shortest summary is: "run a module script" now returns a Promise that will resolve at some arbitrary point in the future - if at all. What happens if you call document.write while one of those Promises is pending?

What's the argument for the pending promise having an effect on document.write?

[03:27:11.0243] <hsivonen>
I.e. what else is the promise supposed to block while pending?

[03:28:34.0447] <hsivonen>
(Looks like this stuff involves a bunch of JS idioms that I'm not up-to-date about.)

[03:29:52.0310] <Ms2ger [~half-time dedication]>
I don't recall

[03:32:38.0624] <Ms2ger [~half-time dedication]>
hsivonen: did you see https://github.com/whatwg/html/pull/4352#issuecomment-611193922 ?

[03:34:42.0879] <hsivonen>
Why are we trying to protect Web authors from themselves if they call `document.write` from module scripts? IIRC, the ignore counter was introduced to paper over some Web compat issue. What problem is being solved here?

[03:35:44.0662] <Ms2ger [~half-time dedication]>
littledan: ⬆︎

[03:38:11.0285] <Ms2ger [~half-time dedication]>
It's not really about using it *from* module scripts, I think. Isn't that prevented by "If the script's type for scriptElement is " module ", then increment document 's ignore-destructive-writes counter . "?

[03:38:34.0878] <Ms2ger [~half-time dedication]>
It's about using it from classic scripts while a module script is in progress

[03:38:58.0493] <Ms2ger [~half-time dedication]>
```js
<script type=module>
await new Promise(() => {})
</script>
<script>
setInterval(() => document.write("foo"), 1000);
</script>
```

[03:39:08.0105] <Ms2ger [~half-time dedication]>
 * ```html
<script type=module>
await new Promise(() => {})
</script>
<script>
setInterval(() => document.write("foo"), 1000);
</script>
```

[03:39:55.0460] <Ms2ger [~half-time dedication]>
(I'm trying to page it all back in right now as well, I haven't looked at TLA for a month)

[03:40:37.0270] <jonco>
hsivonen: we do increment/decrement the counter around executing scripts - is there somewhere else this needs to happen? https://searchfox.org/mozilla-central/source/dom/script/ScriptLoader.cpp#2474,2478

[03:40:56.0752] <hsivonen>
> <@ms2ger:igalia.com> ```html
> <script type=module>
> await new Promise(() => {})
> </script>
> <script>
> setInterval(() => document.write("foo"), 1000);
> </script>
> ```

Why should this do anything different that `document.write` from `setInterval` otherwise?

[03:41:58.0034] <hsivonen>
> <@jonco:mozilla.org> hsivonen: we do increment/decrement the counter around executing scripts - is there somewhere else this needs to happen? https://searchfox.org/mozilla-central/source/dom/script/ScriptLoader.cpp#2474,2478

Does that code run for module scripts, too?

[03:42:37.0786] <Ms2ger [~half-time dedication]>
annevk: so, actually, were you looking for input on the write counter, or the error event timing?

[03:42:59.0204] <jonco>
hsivonen: yes

[03:43:20.0111] <hsivonen>
> <@jonco:mozilla.org> hsivonen: yes

Ah, I misread the code earlier. I guess we're OK spec-wise at the moment, then.

[03:43:33.0827] <jonco>
hsivonen: great 👍

[03:53:51.0027] <annevk>
Ms2ger [~half-time dedication]: the whole PR :-)

[03:54:16.0709] <annevk>
It wasn't entirely clear to me if the WebVM had looked at it at least

[04:00:15.0314] <hsivonen>
I commented on the issue. I'm attributing intent to the counter based on my recollection, because the spec's repo history looks insufficient for showing a record of intent.

[04:01:07.0105] <hsivonen>
s/issue/PR/

[04:05:47.0243] <annevk>
hsivonen: the motivation for that is in https://github.com/whatwg/html/pull/4352#issuecomment-611193922

[04:06:03.0361] <annevk>
(it might have been hidden as the PR is fairly long)

[04:07:33.0378] <annevk>
(in general I'm also somewhat supportive of making old features throw in new contexts as it forces adoption of newer patterns)

[04:07:36.0630] <hsivonen>
I read that comment, and point 2 makes sense to me.

[04:09:01.0154] <hsivonen>
So basically: 1) we had a counter that classic external scripts incremented/decremented, 2) module scripts were introduced and are the closest to external, so they were specced to do the same 3) now modules become fundamentally different, so what to do about the counter?

[04:09:18.0541] <hsivonen>
Well, don't touch the counter if we're now far removed from the reason the counter exists.

[05:03:09.0336] <tcampbell>
> <@arai:mozilla.org> am I correct that CompilationInfo is the top-level struct to hold the stencil data?

It will be split into two structs. One for the stencil data (which lives long enough to cross threads) and one for the parser/emitter temporary state (lifoalloc, usednametracker)

[05:03:32.0875] <arai>
good to know :)

[05:06:18.0396] <tcampbell>
arai: the two missing pieces from the stencil data right now are: es-module-import-map and atoms table

[05:06:43.0681] <tcampbell>
(and asm.js refs, but there is a patch landing soon)

[05:07:02.0950] <arai>
is JSFunction going to be replaced by non-GC struct?

[05:07:38.0961] <tcampbell>
the name/flags/nargs will be moved to ScriptStencil

[05:07:49.0729] <arai>
ah, I see

[05:08:13.0410] <tcampbell>
the JSFunction* vector is only used for the final instantiation, and will be removed from CompilationInfo

[05:08:52.0711] <tcampbell>
once name/flags/nargs and SourceExtent are in ScriptStencil, we no longer will need to FunctionBox to instantiate

[05:09:03.0682] <tcampbell>
at that point we should have complete info

[05:09:17.0266] <arai>
great :)

[05:09:32.0612] <tcampbell>
ScriptSourceObject also needs to go away

[05:11:28.0565] <arai>
I was about to prepare function part in SmooshMonkey, but sounds like it's better work on that after JSFunction gets removed from CompilationInfo

[05:17:06.0981] <tcampbell>
the real issue is that you don't use FunctionBox in smoosh.

[05:17:17.0611] <tcampbell>
The JSFunction vector is barely used right now

[05:17:26.0917] <tcampbell>
(only for lazy)

[05:20:33.0386] <arai>
yeah, currently, jsparagus creates a list of `FunctionStencil` struct for `JSFunction` fields, and that has a field for `ScriptStencil`, for `BaseScript`

[05:21:02.0599] <arai>
so, once all fields are moved to `ScriptStencil`, I'll merge those 2 structs, and we should be ready

[05:21:47.0406] <tcampbell>
If you are feeling brave, you could start trying to move flags/name/nargs to ScriptStencil

[05:22:04.0815] <arai>
okay :)

[05:22:11.0741] <tcampbell>
https://bugzilla.mozilla.org/show_bug.cgi?id=1641202

[05:22:43.0608] <tcampbell>
I have a prototype to deal with SourceExtent but I wasn't super happy with the copies it was doing.

[05:23:49.0172] <tcampbell>
arai: basically we need to eliminate `FunctionBox::createFunction`

[05:25:29.0654] <tcampbell>
We don't have a good story for the threading yet, but just splitting `FunctionBox::createFunction` into a step that syncs data from Funbox to ScriptStencil, and a step that turns that into a JSFunction would be a good step

[05:27:27.0286] <arai>
so, ScriptStencil isn't going to be created at parse time?

[05:30:55.0761] <tcampbell>
It probably will continue to be, but something like FunctionFlags is cheap to copy and we can avoid weird indirections

[05:31:07.0314] <tcampbell>
my concerns are just about perf

[05:31:52.0552] <arai>
I see

[05:42:40.0263] <tcampbell>
Benjamin Bouvier: Why I ended up `INTERPRETED_NORMAL` was because that is what the normal parser generates in that placement. I don't see any parts of frontend that read the CONSTRUCTOR bit, so I'm tempted to keep as INTERPRETED_NORMAL.

[05:46:03.0286] <Benjamin Bouvier>
tcampbell: wouldn't this change the behavior in some of the generic JIT codegen paths for function calls? https://searchfox.org/mozilla-central/search?q=symbol:E_%3CT_js%3A%3AFunctionFlags%3A%3AFlags%3E_CONSTRUCTOR&redirect=false

[05:46:25.0436] <Benjamin Bouvier>
I mean, perhaps they will just work and go through the C++ call in all the cases, and that's fine

[05:46:42.0831] <tcampbell>
These are only for the parse-time dummy functions for asm.js

[05:46:56.0440] <tcampbell>
to build a FunctionBox for the AST

[05:47:25.0742] <tcampbell>
the asm.js module JSFunction uses a different set of flags

[05:47:35.0713] <Benjamin Bouvier>
ohh ok, so yeah that's fine then

[05:48:14.0345] <tcampbell>
cool. thanks for noticing the difference though

[05:49:42.0876] <Benjamin Bouvier>
asm.js code is mostly dormant these days, wondering when will be a good time to remove it altogether...

[05:49:42.0986] <tcampbell>
here we go. Added you as reviewer to the relevant patch :)

[05:50:37.0656] <tcampbell>
Benjamin Bouvier: Thinking seems to be that we will *not* support in the new parser, which is maybe a year out from being default

[05:51:40.0759] <Benjamin Bouvier>
https://georgf.github.io/usecounters/index.html#kind=page&group=JS&channel=beta&version=78 says 0.48% of web pages still use asm.js, but the trend is declining, so this makes sense

[05:52:48.0795] <tcampbell>
The guidance was mostly coming from Luke

[05:54:27.0040] <nbp>
Nice numbers!

[05:54:47.0700] <nbp>
I wonder how much time before WASM takes over JS.

[05:57:59.0678] <Benjamin Bouvier>
yeah, and the use counters are very pleasant and easy to use

[06:00:32.0421] <wingo>
Benjamin Bouvier: 0.048%, not 0.48%

[06:00:38.0604] <wingo>
yeah nice page!

[06:05:10.0704] <Benjamin Bouvier>
oops, thanks

[06:37:20.0738] <nbp>
https://twitter.com/ioctaptceb/status/1270272999564992512 (in 1:23)

[06:37:40.0445] <yulia>
yes, that is happening today!

[06:38:13.0754] <yulia>
It will be a summary of what happened at last weeks tc39 meeting. It was supposed to be streamed on friday, but i delayed in order to not take away attention from on going protests

[06:38:52.0393] <yulia>
today's won't include code, it will be just about the tc39 process, the recent meeting, and a few highlights. Please join if you want to chat to people as well! last time that was really great. We had some nice back and forth

[06:41:30.0532] <yulia>
jandem: i assigned thee last stream's pr to you because you helped me look at it, https://phabricator.services.mozilla.com/D78905 but if you don't have time I can move it!

[06:42:57.0754] <jandem>
great, I'll take a look soon

[06:44:11.0410] <yulia>
 * jandem: i assigned the last stream's pr to you because you helped me look at it, https://phabricator.services.mozilla.com/D78905 but if you don't have time I can move it!

[07:18:23.0080] <jorendorff>
Anyone know what is being measured here? https://treeherder.mozilla.org/perf.html#/alerts?id=26164

[07:20:52.0386] <froydnj>
jorendorff: content JS memory?

[07:22:03.0807] <jorendorff>
froydnj: the wiki says, of this test: "It tracks resident unique, heap unclassified, JS, and explicit memory metrics". is that 4 separate numbers? can I tell which one we regressed?

[07:22:32.0204] <tcampbell>
base content js -> about:blank in a fresh content process, looking at js runtime size

[07:22:56.0693] <jorendorff>
I think this is just: we added some self-hosted code

[07:23:04.0131] <jorendorff>
because everything else is preffed off by default

[07:23:14.0203] <tcampbell>
that is likely it

[07:23:34.0953] <tcampbell>
base content js is surprisingly stable so the alert level is sensitive

[07:24:52.0368] <tcampbell>
so if you added a few functions to selfhosted.js, then 10kB is not a surprise and is fine

[07:25:11.0554] <jorendorff>
ok!

[07:25:14.0297] <jorendorff>
good to know

[07:25:24.0782] <tcampbell>
the concern is that this is unshared memory between fission processes

[07:25:45.0285] <tcampbell>
but in future we will share all self-hosted bytecode directly

[07:25:52.0157] <jorendorff>
that makes sense.

[07:25:57.0724] <tcampbell>
(the future that is my backlog...)

[07:25:59.0602] <nika>
That'd be nice :-)

[07:26:10.0205] <nika>
/me likes that future

[07:26:24.0429] <jorendorff>
tcampbell: seems like it might be a better thing to work on than generator perf :-\ so immediate

[07:26:26.0177] <nika>
:p

[07:26:27.0420] <tcampbell>
do you have a keyword on fission? :p

[07:26:33.0527] <nika>
I do :p

[07:26:51.0541] <nika>
It's become less advisable to keep on over time

[07:27:07.0922] <jorendorff>
tcampbell: is there a bug on file for sharing self-hosted code?

[07:28:33.0786] <tcampbell>
jorendorff: https://bugzilla.mozilla.org/show_bug.cgi?id=1458339

[07:29:03.0112] <tcampbell>
which depends on https://bugzilla.mozilla.org/show_bug.cgi?id=1523749

[07:29:36.0849] <tcampbell>
and then gets plan gets modified by https://bugzilla.mozilla.org/show_bug.cgi?id=stencil-serdes

[07:30:31.0946] <tcampbell>
I have a prototype that does it. Things may be simpler now that `RuntimeScriptData` no longer contains atoms

[07:30:54.0122] <jorendorff>
> so if you added a few functions to selfhosted.js, then 10kB is not a surprise and is fine

tcampbell: Adam will be adding a bunch more of those, though.

[07:31:02.0821] <jorendorff>
How worried should we be?

[07:31:16.0708] <jorendorff>
tcampbell: awesome

[07:31:30.0550] <jorendorff>
 * tcampbell: (re mmapping XDR) awesome

[07:32:02.0338] <tcampbell>
I wouldn't be overly worried at this point

[07:32:14.0550] <jorendorff>
tcampbell: lol, ok!

[07:32:55.0105] <tcampbell>
jorendorff: I was currently hoping to replace XDR first before tackling the self-hosted stuff

[07:33:26.0899] <tcampbell>
self-hosted is both a memory and a perf issue for startup

[07:33:49.0102] <tcampbell>
using stencil forms for the self-hosted world and sharing them should solve both

[07:33:57.0276] <tcampbell>
(and be faster than XDR)

[07:34:19.0063] <jorendorff>
tcampbell: Does this alert bite Intl code? Or do we somehow avoid that

[07:34:26.0039] <jorendorff>
because Intl is frickin huge

[07:34:45.0514] <tcampbell>
I believe it does

[07:37:10.0811] <jorendorff>
ok, thanks

[08:05:13.0388] <mgaudet>
confession: Small tweak to yesterdays duct-tape-and-baling-wire patch, and I now pass all of the test262 tests for private-fields. Still more work to do, but like I'm on the right path

[08:05:15.0560] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[09:18:40.0246] <djvj>
anyone had time to take a look at that mailing list post about js::SharedArrayRawBufferRefs::~SharedArrayRawBufferRefs?

[09:19:09.0406] <yulia>
iain: fantastic answers you are adding

[09:19:27.0083] <djvj>
I couldn't find anything obvious that indicates that the destructor would not be exported

[09:19:36.0847] <cybai>
yulia: it was a great talk! don't have a twitch account so leave a comment here 😂

[09:19:44.0443] <yulia>
happy to hear!

[09:27:45.0715] <iain>
Yeah, good talk! I keep laughing when you give good off-the-cuff answers to hard questions and then apologize for them not being perfect answers

[09:29:05.0460] <yulia>
ah, its good practice. hopefully i can eventually give really clear good answers but eh

[09:29:08.0778] <yulia>
for now it works

[09:29:35.0628] <iain>
I'm also excited about how many people in the chat want to contribute

[09:29:35.0793] <yulia>
oooo iain you are famous

[09:30:49.0055] <iain>
We apparently found the only person other than my parents who thinks I'm the most famous Mozillian

[09:31:01.0476] <evilpie>
?!?

[09:31:11.0745] <iain>
Somebody in chat recognized my name from the regexp work

[09:31:15.0438] <yulia>
yep, someone really into regexp

[09:31:30.0610] <evilpie>
lol haa congrats on your fanclub

[09:31:32.0425] <iain>
"It's pretty funny though, Iain is the only name I could recognize at mozilla if I had a gun to my head but he was here in chat"

[09:36:36.0462] <mgaudet>
Searchfox suggests that there's no subclases of js::Wrapper other than CrossCompartmentWrapper -- but it is in the public directory; do we expect that there are non-CCW wrappers?

[09:37:42.0541] <tcampbell>
mgaudet: https://searchfox.org/mozilla-central/source/dom/base/MaybeCrossOriginObject.h#168

[09:37:52.0600] <tcampbell>
(sorry)

[09:38:02.0777] <mgaudet>
ahah! 

[09:38:13.0109] <mgaudet>
tcampbell: thanks. 

[09:38:31.0745] <mgaudet>
Definitely into the last 99% now :p 

[09:39:02.0018] <tcampbell>
Did CPOWs previously extend js::Wrapper?

[09:39:13.0211] <mgaudet>
CPOW? 

[09:40:03.0097] <tcampbell>
cross-process-object-wrapper :p

[09:40:14.0462] <jandem>
Xray waivers are also non-ccw wrappers 

[09:40:16.0063] <tcampbell>
This seems to be another wrapper https://searchfox.org/mozilla-central/source/js/xpconnect/wrappers/WrapperFactory.h#26

[09:41:40.0941] <mgaudet>
Oof. Whelp. About what I expected. 

[09:42:25.0936] <mgaudet>
Another question, on a different front: in order to handle the slightly peculiar semantics of proxies + private fields, I've added an 'expando' object to Proxy; the original plan was to use a reserved slot, but I ran into a problem: we have at least two different `JSClass`es for proxies, with different numbers of reserved slots: e.g. [ShellWindowProxyClasss](https://searchfox.org/mozilla-central/source/js/src/shell/js.cpp#558-559) and [ProxyClass](https://searchfox.org/mozilla-central/source/js/src/proxy/Proxy.cpp#769-773) 

[09:43:00.0870] <mgaudet>
Is there a -best- way to handle this? Stop using a reserved slot? compute the correct slot more dynamically? 

[09:43:44.0845] <tcampbell>
Do you have an example where you need this expando?

[09:45:01.0077] <mgaudet>
https://paste.mozilla.org/RWf86B1u#L12

[09:45:15.0223] <mgaudet>
(except ignore the accidentally highlighted line) 

[09:45:57.0767] <mgaudet>
Essentially, the semantics are such that if you extend a proxy, you can add private fields. However, our ProxyObjects have fixed layout and don't derive from NativeObject. So we need -somewhere- to put that private field. 

[09:47:35.0021] <tcampbell>
ah, interesting

[09:47:54.0185] <mgaudet>
My duct-tape patch adds the expando  for all proxy types, but the entrypoints are overridable; the plan then is that for CrossCompartmentWrapper, we'll instead manipulate the target, wrapping as necessary 

[09:48:55.0712] <mgaudet>
(It may be that this is the wrong decision, and that only -scripted- proxies should use the expando, but I wasn't sure, and it was easiest to do this in the base class) 

[09:49:29.0230] <mgaudet>
I suspect something similar would be required for dom wrappers tho, so that was another argument in favour of base class implementation

[09:53:40.0482] <tcampbell>
where is the handler object stored?

[09:54:07.0619] <tcampbell>
(the scripted JSObject)

[09:55:00.0847] <tcampbell>
looks like: https://searchfox.org/mozilla-central/source/js/src/proxy/ScriptedProxyHandler.h#95

[09:56:12.0072] <mgaudet>
right;

[09:56:42.0434] <mgaudet>
as a reserved slot in the ProxyObject. Which was why I'd sort of went down the road of using a reserved slot. 

[09:57:02.0074] <mgaudet>
That works for ScriptedProxyHandler because I don't think it'll ever see a proxy with a different JSClass 

[09:57:49.0105] <mgaudet>
Whereas my prototype puts the expando support into all proxy object types, and then expects CCWs to bypass that and talk to their targets wrapping as necessary. 

[09:58:26.0316] <mgaudet>
but it means we can't count on having the 'correct' number of reserved slots, as each class determines that number. 

[09:58:36.0566] <tcampbell>
I'd be tempted to lean towards just messing with ScriptedProxyHandler and maybe stealing the IS_CALLCONSTRUCT_EXTRA slot

[10:03:58.0209] <mgaudet>
Hmm. I think I need to do some more work on this before I can answer this. I just realized there's parts of the proxy hierarchy that I didn't expect / understand 

[10:04:45.0110] <mgaudet>
i.e. I expected ScriptedProxyHandler to derive from ForwardingProxyHandler, because it has a target -- and yet: it does not.

[10:06:09.0103] <mgaudet>
I'm also not sure what semantics are actually going to be the 'default' semantics. My guess for the same as scripted was mostly a guess (and thinking a bit about DOM objects; but I realize now that there must be a pre-existing solution for adding properties to dom objects) 

[10:08:53.0838] <tcampbell>
yes, DOM proxies have expando objects of their own

[10:09:12.0522] <tcampbell>
https://searchfox.org/mozilla-central/search?q=ExpandoAndGeneration&redirect=false

[12:03:01.0209] <tcampbell>
https://deploy-preview-2590--perf-html.netlify.app/public/ce999e75f255ea96c9ee60d06fba759e781d556f/calltree/?globalTrackOrder=0&localTrackOrderByPid=14824-0-1~&thread=0&v=4

[12:03:27.0844] <tcampbell>
Here is an example with the implementation summaries fixed, and also a bunch of category summaries for different JIT tiers, etc

[12:04:01.0946] <tcampbell>
Little things like mousing over entries in stack charts now show the jit tier properly

[12:50:16.0616] <Waldo>
Proxies "deriving" at all is a bad thing and we need to get rid of it.  Having handlers explicitly list the exact implemented operations in an explicit table is just way clearer.

[13:26:55.0227] <jorendorff>
is slack down for everyone, or just me? its status page says everything is fine, and it works in chrome

[13:27:53.0906] <jorendorff>
(re: Proxies, certainly the current class hierarchy is not doing anyone any favors)

[13:29:37.0325] <iain>
jorendorff: It seems to work fine for me

[13:29:58.0481] <iain>
Or as well as slack ever works

[13:31:14.0072] <Waldo>
A SCOTUS hobbyist Slack I'm in is functional right now.

[13:32:02.0455] <jorendorff>
huh

[13:32:04.0810] <jorendorff>
thanks

[13:36:47.0263] <avandolder>
jorendorff: did you leave the iterator_helpers pref on? it still breaks slack

[13:36:56.0709] <jorendorff>
oh

[13:36:58.0352] <jorendorff>
of course

[13:37:29.0463] <tcampbell>
lol

[13:37:33.0001] <evilpie>
Oh, interesting. Any details on that?

[13:37:38.0262] <jorendorff>
avandolder: That means we can't ship it. Would you mind fixing it please?

[13:37:45.0764] <jorendorff>
evilpie: It was a mistake on our part

[13:38:20.0671] <jorendorff>
evilpie: The proposal didn't contain a `Symbol.toStringTag` for `Iterator.prototype`; I asked the author and he said there was no particular reason for it

[13:38:25.0518] <jorendorff>
so, we added it

[13:38:47.0358] <jorendorff>
readonly, like the standard toStringTgs

[13:38:49.0362] <jorendorff>
 * readonly, like the standard toStringTags

[13:40:13.0081] <avandolder>
will do!

[13:40:15.0277] <jorendorff>
this breaks the web; Slack is doing something like

```
function MyIteratorType() { ... }
MyIteratorType.prototype.__proto__ = /* ...compute %IteratorPrototype%...*/;
MyIteratorType.prototype[Symbol.toStringTag] = "MyIteratorType";
```

in strict mode, which throws on assignment to an inherited const property

[13:40:20.0959] <jorendorff>
avandolder: thanks!

[13:40:35.0323] <jorendorff>
avandolder: I suppose it messes up the other patch you sent me?

[13:40:35.0543] <evilpie>
Interesting thanks!

[13:41:01.0037] <avandolder>
Uh I think it's a small change, shouldn't touch it?

[13:44:28.0635] <avandolder>
jorendorff: should I file a new bug for this or just re-open the Iterator constructor bug it was added in?

[13:44:53.0690] <jorendorff>
Don't reopen. Isn't there a bug on file for this? let's look

[13:45:28.0642] <jorendorff>
I guess not. avandolder All right! new bug, then :)

[13:51:17.0605] <mgaudet>
confession: Mostly having trouble writing a test case that keeps JS semantics straight in my head, rather than having implementation issues. *facepalm* 

[13:51:20.0627] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[13:55:32.0815] <mgaudet>
(I keep thinking initializer semantics apply to class member functions and getting super confused when they don't get stamped into an object via the constructor return trick) 

[14:29:40.0783] <mgaudet>
confession: Private fields on CCWs work right now, and correctly throw when nuked. Tomorrow to figure out DOM objects... 

[15:22:55.0644] <djvj>
template <typename ConcreteScope, typename AtomType>
using MaybeRootedScopeData =
    MaybeRooted<typename std::conditional<
                    std::is_same_v<AtomType, JSAtom>,
                    UniquePtr<typename ConcreteScope::Data>,
                    AbstractScopeData<ConcreteScope, AtomType>*>::type,
                std::is_same_v<AtomType, JSAtom> ? AllowGC::CanGC
                                                 : AllowGC::NoGC>;


[15:23:21.0128] <sfink>
isn't it beautiful? You're admiring the beauty of it, right?

[15:23:32.0532] <djvj>
that's exactly why I posted it.

[15:24:51.0913] <djvj>
I remember when I used to be a huge objective-C and smalltalk fan and made fun of people who wrote code like this.

[15:24:59.0730] <sfink>
my eyes are bleeding it's so beautiful

[15:26:04.0253] <Waldo>
djvj: Note `std::conditional_t` exists and is probably preferred to `typename std::conditional<...>::type`, not least for getting rid of the `typename` in there.

[15:26:27.0242] <Waldo>
I think concepts are supposed to make some of those sorts of restrictions clearer, but I haven't fully studied them yet.

[15:26:34.0309] <djvj>
Waldo: noted, I'll fix it, saves some bytes and makes this slightly less beautiful.

[15:27:16.0921] <Waldo>
Also the repetition of `std::is_same_v` seems probably worse than making that distinction top-level and repeating `MaybeRooted` instead.  IMO.

[15:44:11.0203] <Waldo>
Wait wait wait sfink, you did _not_ just throw me under the bus like that...

[15:44:27.0186] <sfink>
bwahahahahaa

[15:45:07.0743] <sfink>
I guess I could've worded it "...but Waldo plans to fix all that"

[15:46:16.0580] <sfink>
https://bugzilla.mozilla.org/show_bug.cgi?id=1642154#c15 for the lookers-on


2020-06-10
[03:10:44.0162] <nbp>
I think this code would be much nicer if we were to add a comma operator overload!

[03:22:46.0674] <shawnjohnjr>
sfink:  is it possible to dump JS object class name in gc log? It's hard to investigate js object leakage...specially js application.
usually i can only see "JS Object (Object)" from gc log
looking at https://searchfox.org/mozilla-central/rev/fac90408bcf52ca88a3dcd2ef30a379b68ab24e2/xpcom/base/CycleCollectedJSRuntime.cpp#795

[03:26:39.0805] <shawnjohnjr>
or is there any other tool that can reveal JS object leakage, i found it's a bit hard to point out the leak,

[03:29:35.0376] <nbp>
shawnjohnjr: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Hacking_Tips#Debugging_GC_markingrooting (it might be outdated)

[03:48:56.0651] <shawnjohnjr>
> <@nbp:mozilla.org> shawnjohnjr: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Hacking_Tips#Debugging_GC_markingrooting (it might be outdated)

That means i have to know which object i should look at. But now my situation is to find the patterns of JS object leak.

[03:50:29.0685] <nbp>
I know we had tools for that, and I recall some of these were documented in this page, but it seems to no longer be there.

[03:50:52.0184] <nbp>
Maybe the version copied from MDN was outdated :/

[05:21:09.0058] <tcampbell>
jonco @allstarschh|afk I'm wondering about adding profiler subcategories for GC things. Eg https://share.firefox.dev/3e2vpwN

[05:21:53.0098] <tcampbell>
Was also thinking about adding a subcategory for non-incremental time

[05:22:14.0439] <jonco>
tcampbell: do you mean for the different parts of GC?

[05:22:47.0646] <tcampbell>
well the question would be what sorts of high-level groupings are useful as you click around in a profile

[05:23:14.0785] <jonco>
yeah, I'm not sure what would actually be useful

[05:24:09.0672] <tcampbell>
for general JS I am looking at compile/exec of the different tiers


[05:24:54.0624] <jonco>
right, we could certainly do something like this for the different GC phases

[05:25:30.0749] <jonco>
I'm just not sure how useful that is to someone looking at a profile

[05:26:45.0319] <jonco>
the stuff GC does is not always that closely related to what the program is doing at that point

[05:26:55.0892] <jonco>
anyway, it would be interesting to see for sure

[05:29:36.0928] <tcampbell>
I'd be curious to have a summary subcategory for non-incremental gc time

[05:39:24.0162] <jonco>
tcampbell: it would be good to see the time spent in barriers and gray unmarking split out if that's possible

[05:39:47.0380] <jonco>
as that doesn't normally show up as a separate GC blob on the timeline

[05:40:03.0855] <jonco>
I'm not sure what you mean by non-incremental time

[05:41:14.0584] <tcampbell>
I mean time spent with unlimited slice budget

[05:51:25.0630] <jonco>
yeah ok it would be good to highlight when we go non-incremental

[05:51:33.0993] <jonco>
that should be pretty rare now

[07:29:57.0624] <froydnj>
tcampbell++

[07:55:50.0355] <mgaudet>
jorendorff: Review ping, just to get back in your todo queue (I can also shuffle patches off to others if you'd like) 

[07:56:17.0764] <jorendorff>
i will clear all of those today

[07:56:36.0008] <jorendorff>
sorry for the slow reviews, distracted with TC39 and intern stuff :-P

[07:57:00.0200] <mgaudet>
jorendorff: No worries. I've got stuff to tackle, just making sure don't stall out on it tho. 

[08:05:42.0446] <mgaudet>
 * jorendorff: No worries. I've got stuff to tackle, just making sure we don't stall out on it tho.

[08:10:42.0265] <annevk>
yulia: jonco: FWIW, I discussed some top-level await things in #dom:mozilla.org as well with Olli (in particular error reporting integration)

[08:10:58.0535] <annevk>
I'll ensure it all gets reflected in the HTML PR though

[08:48:23.0795] <@allstarschh|afk>
tcampbell: meeting ?

[08:48:55.0259] <tcampbell>
@allstarschh|afk: can't make it this week

[08:49:09.0376] <@allstarschh|afk>
tcampbell: ok

[09:37:46.0455] <sfink>
shawnjohnjr: I guess I would first point at the Memory tool in devtools. (You might need to enable it?)

[09:38:28.0546] <sfink>
as for printing out the collected objects' class names during GC, it's a little tricky if I understand what you're asking for

[09:39:49.0982] <sfink>
it's relatively easy to get the internal JSClass name, but that's only "Object" or "Array" or similar.

[09:40:16.0465] <sfink>
I'm guessing you'd want the JS constructor name?

[09:40:50.0462] <sfink>
that would require traversing through data structures starting from a dying thing, and generally speaking that's not easy/safe

[09:41:20.0487] <sfink>
but if you file a bug, we could probably come up with a more definitive answer

[12:16:41.0467] <arai>
Waldo: review ping for bug 1642268

[12:16:42.0926] <botzilla>
https://bugzil.la/1642268 — ASSIGNED (arai) — Octal literals must use '0o' in strict mode

[12:17:35.0305] <Waldo>
arai: You're behind bug 1636984 right now, but I might be able to bump it given the one is a bit smaller than the other.

[12:17:36.0499] <botzilla>
https://bugzil.la/1636984 — ASSIGNED (anba) — Add workarounds for ICU/CLDR issues with display names and append items

[12:19:04.0958] <arai>
okay.  this is not urgent.  just wanted to make sure it's on your radar

[14:55:35.0037] <sfink>
ooh, if I procrastinate long enough, I won't need to figure out how to regenerate these binast tests again? \o/

[14:58:46.0752] <evilpie>
I usually just delete them

[15:01:09.0842] <sfink>
oh, like remove the individual ones that are failing? I guess that'd work.


2020-06-11
[19:52:34.0105] <shawnjohnjr>
> <@sfink:mozilla.org> I'm guessing you'd want the JS constructor name?

yes. getting js object/array class name is not useful when finding potential memory leak.

[19:53:33.0758] <shawnjohnjr>
> <@sfink:mozilla.org> but if you file a bug, we could probably come up with a more definitive answer

okay, i will file a bug.

[05:11:23.0328] <tcampbell>
Benjamin Bouvier: If you don't have any particular input for https://phabricator.services.mozilla.com/D78089 feel free to remove yourself as a reviewer. It touches AsmJS.cpp but is mostly function creation stuff.

[05:18:09.0490] <@allstarschh|afk>
jonco: ping

[05:26:39.0030] <@allstarschh|afk>
jonco: unping, I replied in moz-phab, will let you know the result later

[06:30:49.0846] <Benjamin Bouvier>
tcampbell: indeed, there was a lot to grasp to be able to review this; assuming this code works, rs=me ;)

[06:32:28.0984] <emilio>
Is there a way to print the toSource() of a function in the stack from the debugger?

[06:32:31.0770] <tcampbell>
Benjamin Bouvier: Probably the main thing is that I hold on to a RefPtr<wasm::Module> and defer when I allocate the JSFunction

[06:33:11.0482] <tcampbell>
 * Benjamin Bouvier: Probably the main thing is that I hold on to a `RefPtr<wasm::Module>` and defer when I allocate the JSFunction

[06:34:12.0105] <emilio>
/me guesses he can download the script

[06:36:52.0301] <tcampbell>
emilio: I think `JS_DecompileScript` is what you want

[06:37:47.0247] <tcampbell>
that may not be debugger friendly though =\

[06:40:00.0300] <Benjamin Bouvier>
tcampbell: ok, it does make sense

[06:40:24.0498] <Benjamin Bouvier>
(so, for my own curiosity: deferring allocations is a first step before being able to switch the parser's implementation, is that correct?)

[06:41:13.0664] <tcampbell>
We defer allocations so that we can stop allocating any GC-things off-main-thread

[06:41:36.0025] <tcampbell>
as well, the parser output format can be directly serialized to caches

[06:42:07.0947] <tcampbell>
also, this makes it significantly simpler to switch to new parser

[06:43:20.0976] <tcampbell>
(each of this separately is an important win)

[06:43:28.0676] <tcampbell>
 * (each of these separately is an important win)

[06:44:48.0595] <tcampbell>
Currently off-thread allocations require GC locks that can reorder scripts by several seconds during page load which is problematic.

[06:46:28.0103] <tcampbell>
For caches, we currently have to encode on main-thread which is also problematic.

[06:52:15.0129] <tcampbell>
Overall off-thread GC-heap access is complex, so if we can get the parser fully decoupled from the GC, we have a lot of flexibility for caching/speculation/scheduling of the parsing work (which is non-trivial element of pageload)

[06:53:34.0524] <Benjamin Bouvier>
sounds great!

[06:55:23.0701] <tcampbell>
WASM already has taking a gc-less approach for the compilation, which gives it a good off-thread story already.

[06:55:30.0094] <tcampbell>
 * WASM already has taken a gc-less approach for the compilation, which gives it a good off-thread story already.

[07:31:31.0275] <Benjamin Bouvier>
Yep, it was required to get the Promise-based APIs work off the main thread

[07:31:53.0718] <Benjamin Bouvier>
The counterpoint to this is that it mallocs a lot, so we try to reuse memory allocations across function compilations as much as we can

[07:54:18.0869] <yulia>
Waldo: a heads up: this is the proposal we are reviewing https://github.com/tc39/proposal-intl-numberformat-v3

[08:00:57.0919] <yulia>
forgot to add the conferencing link

[08:00:59.0976] <yulia>
its there now

[08:01:10.0755] <Waldo>
...was just going to ask.  :-)

[08:07:17.0549] <nbp>
djvj: https://wiki.mozilla.org/JavaScript:Bugzilla#Triage

[14:00:59.0496] <avandolder>
when i'm creating and then populating an array in self-hosted code, should I be using _DefineDataProperty or just using indexing and assignment? (there doesn't seem to be a nicer way to create an array from an async iterator) 

[14:04:25.0985] <mgaudet>
confession: Working through review feedback today (thanks everyone!), did a few reviews. Off tomorrow, see y'all Monday! 

[14:04:28.0946] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:24:25.0738] <evilpie>
> <@avandolder:mozilla.org> when i'm creating and then populating an array in self-hosted code, should I be using _DefineDataProperty or just using indexing and assignment? (there doesn't seem to be a nicer way to create an array from an async iterator)

Depends on what the spec says. You most likely want to to use _DefineDataProperty otherwise defining the elements would be oberservable via a setter on Array.prototype.

[14:26:23.0351] <avandolder>
Ah alright, that makes sense

[15:02:08.0110] <tcampbell>
sfink: do you have any idea about this TSAN atoms complaint? https://bugzilla.mozilla.org/show_bug.cgi?id=1644386

[15:04:14.0546] <sfink>
(looking)

[15:06:36.0217] <jorendorff>
tcampbell: I'm not sure I'm doing this right. Is https://bugzilla.mozilla.org/show_bug.cgi?id=1637424 in your review queue now?

[15:06:58.0326] <jorendorff>
tcampbell: We do need it after all, possibly not so much for generators but definitely for async functions (the stack seems to work for both)

[15:07:37.0748] <tcampbell>
yep, it appears and emails triggered. Will look at it again

[15:07:44.0315] <jorendorff>
ok, thanks

[15:15:20.0510] <sfink>
tcampbell: it's more in jonco's area, but it makes sense what is happening. I'll comment in the bug. I wouldn't trust myself to know the right fix, though.

[15:15:36.0024] <tcampbell>
thanks

[16:18:18.0433] <sfink>
confession: queued string deduplication for landing! (After big fight with phabricator because it accused me of reviewing my own patch. Which is a lie. If I wanted to sneak something in without review, I would just land it without review like I usually do.)

[16:21:07.0114] <Waldo>
LEEROY JEEENNNKIIIINNNSSSS


2020-06-12
[03:44:14.0383] <nbp>
Guess what we could rename the VM to 🕷︎🐒 without changing the name :P

[04:20:43.0172] <yulia>
eh, dumb questions abound. I am trying to figure out the best way to write a microbenchmark. I found this file: https://searchfox.org/mozilla-central/source/js/src/devtools/gc-ubench/spidermonkey.js -- sfink is this something I should use if I am writing a microbenchmark for something small?

[04:21:49.0174] <yulia>
or, should i stop worrying and learn to love performance.now()?

[04:23:10.0734] <Ms2ger [~half-time dedication]>
 perf.now is no longer really accurate, is it?

[04:23:17.0769] <Ms2ger [~half-time dedication]>
Since spectr

[04:24:48.0047] <yulia>
i am not really sure, but i thought it was inaccurate, but maybe its good enough for small stuff? This isn't something I have done often so I don't know the best practices

[04:25:20.0813] <yulia>
 * i am not really sure, but i thought it was more accurate than other options, but maybe its good enough for small stuff? This isn't something I have done often so I don't know the best practices

[04:26:08.0449] <annevk>
I think it should be accurate in chrome code still

[04:26:17.0493] <jandem>
I usually do something like this: https://paste.mozilla.org/gAyNQ37U - if the interesting code takes more than a few ms it works well

[04:26:42.0378] <yulia>
oh, dateNow is fine. ok thats good to know

[04:27:03.0881] <yulia>
ok neat, thank you!

[04:28:00.0326] <jandem>
np

[04:35:37.0035] <yulia>
In the upcoming stream I am planning on covering:
1) the issue raised by anba
2) eshosts, how to use it, and reasons why an engine might not fix a given issue
3) doing the benchmark, and verifying if there is a significant performance cost to the change
4) highlighting the other tests that are failing and starting the fix for that

I think that might take up the whole hour. Is there anything more interesting that I could do here?

[04:36:53.0303] <yulia>
 * In the upcoming stream I am planning on covering:
1. the issue raised by anba (https://bugzilla.mozilla.org/show_bug.cgi?id=1286997#c5)
2. eshosts, how to use it, and reasons why an engine might not fix a given issue
3. doing the benchmark, and verifying if there is a significant performance cost to the change
4. highlighting the other tests that are failing and starting the fix for that

I think that might take up the whole hour. Is there anything more interesting that I could do here?

[09:50:15.0765] <dereknongeneric>
hello all, I invited here by Yulia and Iain

[09:50:29.0387] <dereknongeneric>
 * hello all, I was invited here by Yulia and Iain

[09:51:23.0235] <rockon999>
🤨

[09:51:24.0901] <dereknongeneric>
hoping to catch up on getting the repo cloned and tackling a GFI real quick

[09:52:01.0682] <iain>
Yulia's stream is working! We are luring them in!

[09:52:10.0914] <yulia>
 :D

[09:52:11.0267] <dereknongeneric>
:)

[09:52:13.0463] <yulia>
hi dereknongeneric 

[09:52:52.0395] <dereknongeneric>
hello, this is the first time I use this chat service and have never used mercurial :p

[09:53:29.0378] <rockon999>
yulia: I have heard of the stream, but can you link me 😃

just a casual embedder lurking

[09:54:10.0179] <dereknongeneric>
is the following bug in the engine or elsewhere? https://bugzilla.mozilla.org/show_bug.cgi?id=1645364

[09:54:18.0498] <yulia>
two of the streams are here rockon999 https://www.twitch.tv/codehag

[09:54:24.0514] <yulia>
one is missing but will be uploaded later

[09:55:05.0332] <iain>
dereknongeneric: https://searchfox.org/ is a great place to find out

[09:55:10.0258] <dereknongeneric>
where are your diagnostic messages I guess the question is

[09:55:46.0989] <yulia>
yep, searchfox is a great place to star!

[09:55:49.0151] <yulia>
start*

[09:56:02.0070] <iain>
Looks like it's in DOM code: https://searchfox.org/mozilla-central/search?q=This+page+uses+the+non+standard+property&path=

[09:56:05.0944] <dereknongeneric>
thanks, I will check it out

[09:57:53.0010] <yulia>
ok, im gunna switch to home mode

[09:58:19.0380] <yulia>
will check back on monday

[09:58:35.0462] <iain>
Have a good weekend!

[09:58:49.0366] <dereknongeneric>
👋

[10:02:01.0227] <dereknongeneric>
https://searchfox.org/mozilla-central/source/dom/locales/en-US/chrome/dom/dom.properties#335

[10:02:36.0145] <dereknongeneric>
I don't think this URL should be curly quoted. Is there an error style guide I can take a look at?

[10:04:39.0307] <iain>
dereknongeneric: I'm not sure. Maybe ask in #dom?

[10:12:31.0690] <dereknongeneric>
I was hesitant to file this as a defect since it seemed so trivial, but it looks worth fixing to me

[10:14:44.0811] <dereknongeneric>
It's in the same repo as what's going on in the stream, correct?

[10:15:45.0863] <iain>
Yep! Although it's part of the browser, not part of spidermonkey itself

[10:17:14.0044] <iain>
So instead of the "Building spidermonkey" docs, which only build the JS engine, you'll want to look here: https://firefox-source-docs.mozilla.org/setup/index.html

[10:18:32.0267] <dereknongeneric>
excellent, how steep is the learning curve for mercurial if you're already proficient w/ git?

[10:19:06.0750] <iain>
Not too bad

[10:19:38.0321] <iain>
As part of `./mach bootstrap` you can get some customization of your `.hgrc` that gives some useful commands

[10:20:29.0909] <iain>
I think the difference that most frequently trips people up is that you don't need named branches in hg

[10:21:10.0974] <iain>
Actually, let me just link this: https://mozilla-version-control-tools.readthedocs.io/en/latest/hgmozilla/index.html

[10:22:43.0688] <dereknongeneric>
uh oh, I already did `sudo apt-get install mercurial`

[10:23:22.0419] <dereknongeneric>
wasn't aware this was a python thing

[10:23:56.0721] <iain>
I think you're probably fine

[10:24:11.0484] <dereknongeneric>
ok, cool

[10:24:15.0930] <iain>
I have 4.8.2 locally, and I don't have any problems with it

[10:24:37.0945] <dereknongeneric>
great, I have the same version

[10:27:34.0015] <dereknongeneric>
just ran `hg clone https://hg.mozilla.org/mozilla-central`, this might be a little while

[10:28:31.0668] <dereknongeneric>
exciting ^^

[13:01:55.0732] <Waldo>
Note that Mercurial has a downloadable archive format that may be preferable to cloning -- not that cloning is less efficient itself, the wire protocol is pretty good these days, I hear -- but because downloading a single file is a _resumable_ operation with HTTP.

Or at least it is if the URL you're downloading is resumable.  Given Mercurial is a pretty dynamic beast, I don't actually know what links are resumable.  https://hg.mozilla.org/mozilla-central/archive/tip.zip for example may or may not be, I don't know.  (And probably isn't, given "tip" is a constantly changing bookmark.)

[13:05:26.0205] <dereknongeneric>
it's almost done, apparently ;)

[13:06:12.0521] <dereknongeneric>
appreciate the tip

[13:19:55.0853] <Waldo>
Used to be, when I wanted a m-c clone I would just clone from the canonical repository.  Then at some point it just started taking too long, not sure when, and I began cloning from one of my local repositories, then I'd fix up the defaults in `.hg/hrc` to point to actual mozilla-central or mozilla-inbound.  I no longer remember the last time I cloned directly from mozilla-central.  It's possible the last actual clone from Mozilla servers I did was for a beta or ESR repo.

[13:56:37.0190] <Waldo>
Also I think I set up http://whereswalden.com/2011/11/03/how-i-organize-my-mozilla-trees/ at a time when cloning directly was adequately fast, and so (aside from an alias to update _not_ by cronjob) all my local trees are clones of a single canonical local repo that mostly just stays up-to-date in the background.

[13:57:57.0670] <evilpie>
I am just using https://hg.mozilla.org/mozilla-unified nowadays works quite well

[14:13:47.0593] <RyanVM>
fwiw, Mozilla's hg instances serves up bundles automatically if you do a fresh clone

[14:14:00.0064] <RyanVM>
 * fwiw, Mozilla's hg instance serves up bundles automatically if you do a fresh clone

[14:14:27.0067] <Waldo>
Yeah, "the wire protocol is pretty good these days, I hear" was a gesture at that.

[15:11:58.0638] <crazypython>
Why does Spidermonkey regularly perform full GCs on the JS heap on applications running animations?

[15:13:38.0886] <Waldo>
SpiderMonkey doesn't know what the application is doing, or that it might be time-sensitive at particular moments.  We may have some hacky tricks to get around this, for embeddings that are willing to be sufficiently dirty -- basically we only mean Gecko for this -- but otherwise, the solution to GC jank interfering with stuff is "don't do stuff in JS that could GC".

[15:18:18.0402] <crazypython>
It's very difficult to write JavaScript code that doesn't use the GC at all, but it's easier to write JS code that avoids making garbage that will need to be freed by a major GC. Is there a way-- ideally in a release build-- to get a list of garbage that was collected in a major cycle?

[15:22:20.0823] <Waldo>
This is not necessarily an answer to the concern, but Web Assembly can far more readily be written to not invoke GCs than JS can.

[15:23:16.0827] <Waldo>
Indeed, we recommend it for audio worklets, for that reason.

[15:23:47.0234] <Waldo>
(and in that case, we've gone to specific efforts to allow Web Assembly to be usable with guaranteed minimal GCs and allocations, even)

[15:23:54.0090] <crazypython>
I appreciate your mention. I'm trying to find the performance regression in a JavaScript game that was 60FPS.

[15:24:46.0487] <crazypython>
(Obviously, I cannot rewrite my game in WebAssembly so easily.)

[15:25:26.0547] <evilpie>
I think https://profiler.firefox.com/ shows memory usage?

[15:25:28.0670] <Waldo>
Yeah, it depends what slice of work you're doing, to say if it could be rewritten.  Audio processing is separate enough it's not bad, often.

[15:25:29.0358] <crazypython>
 * (Obviously, I cannot rewrite my game in a language that compiles to WebAssembly so easily.)

[15:26:18.0646] <crazypython>
I have used the Allocations view. 

[15:26:33.0748] <crazypython>
When does SM run FinalizationRegistry handlers?

[15:26:46.0095] <crazypython>
(Perhaps I could use the timing of FRs to detect major-cycle garbage.)

[15:28:04.0408] <Waldo>
My vague understanding is those handlers run when you return to the event loop, which may not be useful for that purpose.

[15:28:08.0832] <Waldo>
I could be wrong.

[15:32:41.0786] <Waldo>
/me sighs

[15:32:43.0984] <Waldo>
"streams"

[15:51:08.0360] <sfink>
C++ question. Well, optimizer question. I'm staring at some generated code for `str->zone() == z && str->asTenured().getAllocKind() == kind`. The zone accessor is generating code for testing whether `str` is tenured. Is there any way I can persuade it that `str` is guaranteed to be tenured here, without implementing `JSString::tenuredZone()` or whatever? `if (!str->isTenured()) { *nullptr = 42; }`?

[15:58:23.0243] <Waldo>
I would just implement that. You could use the make-assume-unreachable macro in Attributes.h, but one function seems better. 

[15:58:26.0606] <sfink>
actually, I think `str->asTenured().zone()` will work; I don't need to go through `JSString::zone()` specifically.

[15:59:59.0160] <sfink>
I have the reverse problem with another parameter -- it's guaranteed to *not* be tenured. But I think I'll stop playing this micro-optimization game now. I got sidetracked.

[16:04:26.0736] <sfink>
crazypython: I'm guessing 0AD again? shawnjohnjr was going to file a related bug, not that I was really able to come up with much for them.

[16:04:28.0463] <sfink>
I haven't seen a bug yet, and couldn't find anything with some searching.

[16:06:48.0366] <sfink>
I guess my recommendation of using the devtools isn't very helpful for an embedding.

[16:28:43.0810] <sfink>
darn, I thought loganfsmyth might be about to chip in with some clever way of doing it

[16:29:52.0441] <loganfsmyth>
nope! Just was going to ask a question and then thought of a possible solution mid-way through writing it, as happens so often

[16:30:29.0264] <sfink>
I resemble that comment


2020-06-13
[17:44:21.0050] <froydnj>
> <@sfink:mozilla.org> I resemble that comment

so say we all

[19:03:27.0300] <crazypython>
> crazypython: I'm guessing 0AD again? shawnjohnjr was going to file a related bug, not that I was really able to come up with much for them.

no, different open-source game. I've skimmed the hacking tips on the jsshell, surely there's a way to trigger a nursery collection, and *surely* there is a series of commands I can use to get unreachable objects? 

[20:11:19.0624] <sfink>
the JS shell has a minorgc() test function for the first. You'd need to either expose your own, or it's part of the test function collection if you've called js::DefineTestingFunctions() at some point.

[20:12:53.0750] <sfink>
For the second, no, nothing exposes unreachable objects.

[20:14:39.0252] <sfink>
necromancy is a dangerous game

[20:19:52.0708] <sfink>
let's see... you'd need to do it after marking but before sweeping or finalizing anything. It would be interesting to have a mode where you never actually collect anything, just pile everything into a deadStuff list. I imagine something would break, but I'm not sure what. Some of the objects would be internal objects.

[20:28:13.0716] <crazypython>
Hmmm. Is there 1)  a mode that calls FinalizationRegistry immediately after sweeping 2) a thing that calls a function for every created object?

[20:28:30.0833] <crazypython>
 * Hmmm. Is there 1)  a mode that calls finalizers backed by FinalizationRegistry immediately after sweeping 2) a thing that calls a function for every created object?

[21:16:03.0161] <sfink>
1) no 2) not exactly. There is an "object metadata builder" that will capture a stack for allocated objects. It looks like it supports sampling some percentage.

[21:16:50.0079] <sfink>
in the shell, it looks like you access it with `enableShellAllocationMetadataBuilder()` and then `getAllocationMetadata(obj)` -- so it's still only going to work for live objects.

[21:17:32.0601] <sfink>
(oh, and I know one reason why exposing all dead objects would be problematic -- it would expose ones that were partly initialized and then discarded, so you'd probably end up crashing if you iterated over all of them to histogram them or something)

[21:19:40.0482] <sfink>
https://developer.mozilla.org/en-US/docs/Tools/Debugger-API/Debugger.Memory looks like the real user of it. That sounds promising.

[21:22:03.0881] <sfink>
it seems like we ought to be able to provide *something* to embedders for identifying leaks or excessive allocation.

[21:22:07.0983] <sfink>
but for now, it's my bedtime

[21:24:02.0550] <rockon999>
ptomato gjs has work on detecting leaks and generating heap graphs, the latter was andyholmes work I believe?

[07:08:33.0430] <crazypython>
If I could get a callback on every object I could store a weakref to everything, call minorgc(), then fork the process, then trigger major gc (How?) and check which indices

[07:09:17.0083] <crazypython>
 * @sfink If I could get a callback on every object I could store a weakref to everything, then call minorgc(), then fork the process, then trigger major gc (How?) and check which indices.

[07:09:32.0743] <crazypython>
 * sfink:  If I could get a callback on every object I could store a weakref to everything, then call minorgc(), then fork the process, then trigger major gc (How?) and check which indices.

[07:42:42.0009] <sfink>
crazypython: there's really no way to hook things at that level in a way that would allow executing JS code. Ignoring the infinite loop from the objects allocated during weakref registration, which is fixable by filtering them out, many objects are allocated at internal points that can't just suspend and resume well enough to run JS code.

[07:43:05.0798] <sfink>
I think the basic idea of recording things before they're dead, and then identifying which ones are gone later, is good.

[07:43:25.0354] <sfink>
but I think that's what the Debugger.Memory stuff does (?)

[07:43:42.0019] <sfink>
or you could do it manually by dumping the entire heap and doing some sort of diff

[07:43:54.0947] <sfink>
see dumpHeap() in the shell


2020-06-14
[18:43:01.0135] <crazypython>
Different tactics this time-- Trying to go through git history to find the issue. What is an easy way to see garbage collections? I need to know major GC collections and the amount collected.

[18:43:17.0088] <crazypython>
Ideally, just some command line flag that outputs GC logs to a file.

[18:48:09.0464] <crazypython>
I tried using MOZ_GCTIMER and a file, and I see some dumping output, but firefox crashes

[18:52:40.0936] <crazypython>
I am on Windows (temporarily) and I set the sandbox level to zero

[19:12:21.0779] <crazypython>
I see, I also need to add $Env:MOZ_DISABLE_CONTENT_SANDBOX="t"

[19:22:46.0325] <crazypython>
Are all non-incremental GCs major GCs?


2020-06-15
[00:33:58.0418] <jonco>
crazypython: incremental/non-incremental is only used in connection with major GC

[00:35:08.0858] <jonco>
minor GC is not incremental usually takes little time

[03:37:50.0065] <evilpie>
jonco: do you think you could fix https://bugzilla.mozilla.org/show_bug.cgi?id=1566307 ?

[03:41:55.0693] <jonco>
evilpie: sure, I can look at that

[05:52:07.0520] <nbp>
sfink, jandem, caroline: ping me back if you are available to do a meeting today to look at the parser generator. The rest of the weeks sounds already well packed on the time-zone overlap between CEST and PST.

[05:53:07.0968] <mgaudet>
nbp: I'd listen in too if it happens! 

[05:53:55.0981] <nbp>
mgaudet: ok, I'll send you the invite as well if it happens.

[05:55:41.0902] <mgaudet>
nbp: thanks! 

[06:17:38.0617] <tcampbell>
nbp: I'd like to listen in too

[06:17:46.0754] <yulia>
nbp: same here

[06:25:24.0459] <sdetar>
nbp: I wonder if Wed at 7:00am PT could be another day/time to use.  I would listen in also.

[06:26:19.0608] <nbp>
sdetar: That might be short with the plenary after.

[06:26:39.0897] <sdetar>
@nbp got it

[06:27:07.0376] <sdetar>
 * got it

[06:27:52.0749] <nbp>
also I do not want to bet on everybody waking up at 7am for this presentation/discussion.

[06:30:31.0875] <jandem>
I think we need someone to schedule a time slot for our meetings (or multiple slots)?

[06:46:56.0794] <nbp>
jandem: I will do, as soon as I get caroline answer. (and sfink which is typing)

[06:47:15.0456] <sfink>
nbp: today would be great for me. But not for the next 45minutes. Then there's a plenary not long after. But I can do anytime today after that. 

[06:47:23.0018] <nbp>
 * jandem: I will do, as soon as I get caroline answer.

[06:47:54.0910] <nbp>
there is a plenray today?

[06:48:04.0837] <yulia>
i think its tomorrow... today is avatar building

[06:48:05.0228] <nbp>
 * there is a plenary today? the avatar creation?

[06:48:42.0223] <sfink>
Oh. Darn, I thought I had the schedule figured out. 

[06:49:06.0400] <sfink>
Ok then, I'm available anytime starting in 45min

[06:49:36.0965] <nbp>
I will schedule it for 8am PST / 17:00 CEST (currently moving the charger between 2 laptops, such that I can hope to potentially draw things)

[06:50:33.0750] <sfink>
Perfect, thanks. I think you're supposed to do zoom scheduling via avops or something. 

[06:50:34.0033] <nbp>
unless people want to go to the avatar creation?

[06:51:01.0522] <sfink>
I attended an earlier one

[06:51:08.0238] <nbp>
zoom scheduling via avops ?! I was thinking of doing using my calendar.

[06:52:01.0296] <sfink>
Maybe not avops. It was in a vurtuallhands email. 

[06:52:29.0013] <sfink>
(Sorry, still in bed atm. Hard to look things up. )

[06:54:39.0854] <nbp>
looking briefly, I do not see anything which suggests a different way of setting up zoom meetings.

[06:57:16.0506] <sfink>
Maybe it's not still required? Initially they wanted all meetings scheduled via https://forms.gle/PZVQD8zQuXXjeM5j7

[06:58:15.0857] <sfink>
Anyway, maybe just go ahead the usual way and don't worry about it 

[07:03:42.0279] <sfink>
I forwarded you the message where they mentioned this

[07:04:14.0980] <yulia>
I noticed we don't have a social event, i just wrote about one to everyone 

[07:06:11.0545] <yulia>
i wonder if we could do an exquisite corpse with ... programming? is that fun or ? https://en.wikipedia.org/wiki/Surrealist_techniques#Games

[07:06:44.0087] <yulia>
 * i wonder if we could do an exquisite corpse with ... programming? is that fun or ? https://en.wikipedia.org/wiki/Exquisite_corpse

[07:07:18.0423] <jorendorff>
I am strongly in favor of doing stuff like that

[07:07:38.0845] <jorendorff>
no idea how that would turn out

[07:07:54.0921] <yulia>
jackbox games is kind of a structured version of that, but we might be able to do it with that programming language for making text adventures

[07:08:05.0358] <yulia>
but i don't know how we would hide parts of it

[07:08:17.0348] <nbp>
invitation sent.

[07:08:26.0050] <jorendorff>
You know what we should do

[07:09:17.0882] <tcampbell>
jonco: do you know what next steps are for https://bugzilla.mozilla.org/show_bug.cgi?id=1644386

[07:09:25.0281] <jorendorff>
we should have a meeting where everyone asks the dumb questions they've been afraid to ask, about parts of the codebase they're not familiar with. we can timebox the answers to 5 minutes... or 3 minutes, and use it to discover topics where we'd be interested in setting aside more time

[07:10:34.0304] <Benjamin Bouvier>
q: what's javascript

[07:10:36.0641] <tcampbell>
ha, that sounds kind of fun

[07:10:40.0824] <Benjamin Bouvier>
(no serisouly, i think that's a great idea)

[07:10:49.0415] <Benjamin Bouvier>
 * (no seriously, i think that's a great idea)

[07:10:55.0720] <yulia>
yeah that would be awesome

[07:12:40.0280] <yulia>
I added something to that effect on the list of things?

[07:13:11.0653] <yulia>
because it feels like something that could be a dedicated session

[07:18:54.0009] <jorendorff>
Does factorio support multiplayer?

[07:18:59.0972] <yulia>
yep

[07:19:09.0028] <jorendorff>
sounds dangerous

[07:19:12.0016] <yulia>
its a lot of fun with people, you end up planning stuff 

[07:19:18.0503] <yulia>
it is :|

[07:24:47.0192] <nbp>
I never played factorui in multiplayer, maybe i should try one day... 

[07:25:00.0416] <nbp>
* I never played factorio in multiplayer, maybe i should try one day... 

[07:25:11.0447] <froydnj>
can confirm it is a lot of fun

[07:29:12.0070] <yulia>
I think i still have a server somewhere..

[07:29:33.0446] <sfink>
wow, I am just completely incapable of reading schedules. Or counting. I see the spreadsheet I was looking at last night, and now realize that I mentally shifted it over a day.

[07:29:35.0082] <jonco>
tcampbell: not off the top of my head... I need to look into that

[07:29:52.0810] <sfink>
y'all are right, today is wide open

[07:30:38.0196] <tcampbell>
multiplayer factorio is dangerous and fun. Especially with persistent servers

[07:31:26.0991] <nbp>
I wonder if this would work as a team bonding experience... 

[07:31:43.0046] <yulia>
let me see what the story about my server is

[07:32:56.0568] <yulia>
I don't want to exclude people who don't have / dont want to have factorio so i will add it as separate thing

[07:33:10.0507] <yulia>
please sign up i you have it or want to try playing multiplayer factorio

[07:33:50.0771] <Waldo>
I've been playing a bit of code words with friends lately, codewords.io maybe? Can't remember the link. Also dominion.games as well. 

[07:34:25.0078] <iain>
caroline has all the expansions on dominion.games

[07:34:29.0839] <Waldo>
No, that must not have been the link, I'll find it when I get on the laptop. 

[07:35:09.0114] <Waldo>
I've only played it in free mode, so just base plus the rotating additional set. 

[07:35:35.0088] <Waldo>
Nine of us have been quite invested enough to want a specific expansion. 

[07:36:11.0190] <iain>
Nine seems like too many, in these times of social distancing

[07:36:26.0051] <Waldo>
"none" 😉

[07:37:18.0310] <Waldo>
I woke up early for the depressingly anticlimactic SCOTUS orders list, haven't really woken up yet. 

[07:38:23.0898] <iain>
No QI?

[07:39:50.0090] <yulia>
i killed my server last year, my partner will let us use his (i owe him a beer)

[07:41:53.0873] <yulia>
ha, we both deleted it 

[07:42:44.0298] <Waldo>
iain: As best I can tell, every single QI case, and every single Second Amendment case, was denied. And it appears the explanation for both being sat on for the last six or so weeks was dissents from denial being written. The orders list is big and messy and I don't know the relevant cases' captions well enough to say it 100% confidently, but that's what it looks like to me, and SCOTUSblog live blog seems to concur. 

[07:44:36.0780] <Waldo>
The orders list is formatted as "Cert granted: <list of captions> Cert denied: <list of captions>" so if you don't know the relevant captions by heart, it leaves you a bit floundering. 

[07:45:02.0133] <Waldo>
Bah. There were angle-bracketed "list of captions" in there. 

[07:46:00.0391] <Waldo>
Anyway. If there's a talk at 8 I should get ready, back in 15.

[07:46:53.0547] <yulia>
... is there a talk at 8?

[07:49:58.0351] <sfink>
nbp is talking about the Parser in 11 min. (Sorry, relative times seem easier.)

[07:50:13.0050] <sfink>
I added it to the spreadsheet at https://docs.google.com/spreadsheets/d/12OfEj4rtZgGFXZ6wLOmso3KRhbutx4c7HDP4cvb_T0s/edit#gid=0

[07:52:09.0247] <sfink>
How late is ok with you people on the other side of the world? It sounds like maybe we should just randomly grab a bunch of schedule slots for everything, and if it doesn't work we can negotiate to shift them around.

[07:52:58.0059] <evilpie>
Is there a schedule anywhere?

[07:53:25.0609] <jandem>
yeah I need a time slot to talk about Warp too.. any time works for me, I'm shifting my work schedule this week

[07:53:34.0987] <sfink>
I'm in PDT, which is the early limiting timezone, but I don't think there are very many of us here so to some extent I feel like we should just suck it up. We can always trick Waldo to get up early by making up some SCOTUS nonsense to make him perk up his ears.

[07:53:58.0143] <sfink>
evilpie: can you see https://docs.google.com/spreadsheets/d/10jg2WMJaUWueQpSujlVgnYFpDITw_lqughhGZPgaiTI/edit#gid=0 ?

[07:54:10.0598] <sfink>
there's not much on it, though

[07:54:13.0621] <yulia>
oh yes there it is

[07:55:35.0986] <sfink>
that said, my sleep has been crap recently so it's possible I will overpromise my ability to get up early. 7:30am is safe, though. (That's 4:30pm CEST, I think?)

[07:56:41.0596] <sfink>
jandem: is today ok? We could do right after the parser meeting. It seems like all interested parties are online here already.

[07:56:53.0582] <jandem>
works for me

[07:57:26.0254] <sfink>
nbp: do you think 1hr is good? 1.5 hrs?

[07:57:42.0214] <nbp>
I set it for 2h … and I think it might be short

[08:02:10.0882] <sfink>
ok, I sent out an invite for 2.5hours after

[08:02:33.0146] <Waldo>
Are people talking on the Zoom, or is my audio _not_ busted?

[08:02:40.0750] <jandem>
no talking yet

[08:02:50.0223] <Waldo>
Ah, heard a bell, it's working.

[08:03:02.0109] <jandem>
sfink: thanks!

[08:03:28.0023] <Waldo>
(I'm on Bluetooth earbuds, they work fine but on Linux they're laggy, so there's a pile of craggy tech involved in this.)

[08:04:54.0420] <yulia>
good news everyone (except for your families) we have a factorio server

[08:05:33.0085] <sdetar>
Thanks everyone for organizing stuff for this week

[08:10:33.0315] <tcampbell>
confession: Adding JIT execution categories to gecko profiler (Bug 1645469)

[08:10:37.0305] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[08:10:38.0655] <botzilla>
https://bugzil.la/1645469 — NEW (tcampbell) — Add profiler sub-categories for SpiderMonkey JITs

[08:14:04.0636] <jonco>
tcampbell: do you know why this has just started happening?

[08:15:57.0585] <tcampbell>
Nope =\

[08:16:36.0087] <jonco>
tcampbell: if it's the pinning thing that sfink suggested, maybe we should just suppress it until stencil lands?

[08:18:19.0701] <tcampbell>
yeah, it sounds a lot like the pinning tsan thing from before

[08:18:23.0296] <nbp>
https://www.whiteboard.team/app/board/EFB3CD2P4BZETOB

[08:36:00.0964] <jorendorff>
The treatment of `let[` doesn't seem to depend on strict vs. non-strict mode, oddly enough

[08:36:28.0440] <Waldo>
Hrm, memory fuzzy on this then.

[08:37:49.0351] <jorendorff>
async arrows probably

[08:38:06.0180] <jorendorff>
`async ( )` is a function-call, unless the next token is `=>`

[08:38:50.0028] <Waldo>
Something around that, yeah, maybe.  Not _quite_ that, the argument list can be arbitrarily long so it couldn't be exactly that, tho.

[08:39:07.0467] <jorendorff>
hmm, true, we rewind for arrow functions

[08:41:51.0623] <yulia>
this section is summarized here i think: https://tc39.es/ecma262/#prod-grammar-notation-StatementList

[08:42:17.0143] <yulia>
(need to scroll up to the previous paragraph for more detail)

[08:42:43.0463] <jorendorff>
yep, 5.1.5 is required reading for understanding how the grammar is specified

[08:42:49.0347] <jorendorff>
which is necessary in many many corner cases

[08:43:03.0672] <Waldo>
I think the three-token lookahead might be https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.cpp#8007 possibly.

[08:44:55.0030] <jorendorff>
Oh, `let` is a reserved word in strict mode, that's why stuff like `let = 3` is different in strict vs. non-strict code

[08:45:01.0123] <jorendorff>
banned in strict

[08:51:51.0466] <jorendorff>
All parsers seem to suck in terms of branch prediction :-\

[09:06:38.0564] <caroline>
yulia: love jack box, also as iain  said i have the expansions for dominion online so if anyone wanted to play sometime this week we could do that!

[09:07:30.0759] <Waldo>
http://codewordsgame.com/ is the Code Names-alike site I mentioned earlier.

[09:08:20.0166] <caroline>
oo codenames is super fun too!

[09:08:46.0947] <Waldo>
That site has...a Harry Potter mode we have not tried out yet.  No idea what it entails.

[09:16:40.0666] <yulia>
i gotta bounce for a bit, have a conflict meeting

[09:26:33.0284] <Waldo>
...oh wow, you can change the screen split between shared video and grid view of people on a Zoom call, didn't know you could do that as the splitter widget is invisible unless you hover directly over it.

[09:32:46.0454] <yulia>
what did i miss?

[09:34:36.0448] <jorendorff>
uh

[09:35:03.0607] <jorendorff>
we gave a very brief tour of all the code downstream of the parser generator, the rust crates

[10:03:10.0799] <nbp>
/me grab a glass of water …

[10:16:27.0120] <sfink>
iain: how long would you estimate would be useful for talking about irregexp?

[10:17:22.0656] <sfink>
(I'm imagining iain getting on Zoom and saying "read the damn blog post kthxbye")

[10:18:18.0116] <sfink>
tcampbell: same question for post-stencil stuff. With the understanding that it might depend more on what questions people have than on what you have to say.

[10:19:27.0523] <iain>
sfink: Depends on what questions people have

[10:19:27.0823] <tcampbell>
10-30 min? depending on questions

[10:19:52.0975] <sfink>
also, does anyone /have/ anything they'd like to talk about with respect to gdb/rr/Pernosco? I know stuff. nbp knows stuff. Other people know stuff. I don't know what people might want to know.

[10:20:03.0767] <iain>
Similar size to tcampbell, I think

[10:20:13.0302] <sfink>
 * also, does anyone *have* anything they'd like to talk about with respect to gdb/rr/Pernosco? I know stuff. nbp knows stuff. Other people know stuff. I don't know what people might want to know.

[10:20:19.0362] <sfink>
ok, thanks

[10:21:49.0827] <mgaudet>
I guess I'd be curious to hear how useful pernosco is being to you, in tips/tricks that help enhance it

[10:21:51.0500] <Waldo>
I use rr.  I get mileage out of it.  I _think_ I know what I need to about it and how to use it?  Or maybe I don't know what I don't know...

[10:22:12.0484] <evilpie>
Oh no factorio. I remember buying the came and playing till 6am in the morning. I didn't touch it again after that

[10:22:26.0460] <iain>
evilpie: Same, except I did touch it after that

[10:22:31.0775] <nbp>
sfink: This is the reason why I did not register. I expect to know the major things already.

[10:22:35.0343] <evilpie>
 * Oh no factorio. I remember buying the game and playing till 6am in the morning. I didn't touch it again after that

[10:22:35.0944] <mgaudet>
I'm comfortable with rr, and have found pernosco's interface to be just a little weird enough that I've retreated to rr

[10:22:58.0497] <Waldo>
Haven't had need for Pernosco yet.

[10:23:53.0589] <sfink>
I guess if anyone has managed to be successful with Pernosco without immediately retreating to the gdb interface, I'd be interested to hear how that works.

[10:24:30.0128] <nbp>
> <@mgaudet:mozilla.org> I'm comfortable with rr, and have found pernosco's interface to be just a little weird enough that I've retreated to rr

You might want to report that to @roc in the #rr channel.

[10:25:30.0239] <sfink>
I love Pernosco, but mainly because it covers rr + automated reproduction. I've started to use its dataflow tracking, which is really awesome yet confusing and I'm not sure it exactly matches the sort of things I tend to need to do.

[10:27:15.0673] <sfink>
(not sure, as in I end up using watchpoints and things to track my data back, and then I notice that the dataflow stuff sometimes gives me the same result way way easier. Maybe I have trouble trusting it? Or understanding exactly what it's telling me?)

[10:30:39.0537] <nbp>
Warp meeting starting ssonish

[10:31:54.0292] <nbp>
yulia: Does the factorio multiplayer handles microphones, or another service has to be used for that?

[10:32:46.0979] <mgaudet>
sfink: I want to love the dataflow stuff, but have no idea what's it's doing; it's 90% of why I love rr, but I just don't have any inuitition for the interface. 

[10:32:56.0703] <mgaudet>
which is a long way of saying "same"

[10:40:07.0566] <mgaudet>
sfink: It's generated via the fallback stub ([`DoSetElemFallback`](https://searchfox.org/mozilla-central/source/js/src/jit/BaselineIC.cpp#2111)), which in turn invokes the [`SetPropIRGenerator`](https://searchfox.org/mozilla-central/source/js/src/jit/CacheIR.cpp#3294) 

[10:40:25.0265] <sfink>
oh! whoa, thanks.

[10:40:58.0418] <mgaudet>
then inside of `SetPropIRGenerator`, there's a whole bunch of `tryAttachFoo`, which are aiming to generate the IR for specific classes of ICs

[10:41:11.0779] <Waldo>
Are these slides available for me to skim through separately?  I hopped on a few minutes in.

[10:52:49.0283] <tcampbell>
jandem^ ?

[10:53:17.0074] <jandem>
yeah will share a link soon

[11:07:35.0031] <mgaudet>
Oops. I over shot. Gotta run! Thanks for the presentation Jan! 

[11:08:29.0515] <sfink>
mgaudet: I just wanted to mention, if you mirrored your right side, the greenery behind you makes a perfect green angel's wing.

[11:11:22.0896] <mgaudet>
Hah. My random tree. Came with the house, and now lives in my office. 

[11:12:50.0058] <nbp>
s/jitting/cheating/g

[11:16:07.0777] <Waldo>
It's okay to cheat as long as you don't get caught.

[11:21:14.0456] <yulia>
nbp i think we need another audio solution

[11:21:23.0908] <yulia>
we can use zoom or something

[11:29:53.0025] <sfink>
new JS golf game, where you try to implement something while spending the fewest caroline stub points

[11:30:08.0851] <sfink>
would actually be a useful exercise, far more useful than bytes of code

[11:32:41.0071] <yulia>
factorio server is up and running

[11:41:17.0916] <caroline>
sfink:  par health score 9 

[11:41:31.0149] <sfink>
:-)

[11:41:42.0556] <nbp>
yulia: for how long?

[11:41:55.0854] <sfink>
that was a pretty awesome session. Can someone go back in time and record it for me? Thanks.

[11:42:01.0537] <jandem>
Waldo: [here](https://docs.google.com/presentation/d/1394_aLrAgHpCIuWlEE-o6VIgpgnfDZ1PbbPhaTOveeE/edit?usp=sharing)

[11:42:15.0486] <jandem>
 * Waldo: [slides here](https://docs.google.com/presentation/d/1394_aLrAgHpCIuWlEE-o6VIgpgnfDZ1PbbPhaTOveeE/edit?usp=sharing)

[11:42:20.0243] <nbp>
 * yulia: for how long? and what is the address for joining (I presume you don't want to share it here)

[11:50:01.0945] <sfink>
people of JS: I marked down some proposed times for the other work-related sessions in the spreadsheet, spreading them out over the next 2 days and avoiding overlapping with the lightning talks and plenary-type sessions.

[11:50:14.0709] <sfink>
let me know if you have any issues with those times

[11:51:24.0399] <sfink>
I'll set them in stone and send out invites this afternoon after most of you are either asleep or melting your brain cells on factorio or whatever

[11:58:21.0006] <Waldo>
Hmm, dumb questions.  What are the dumb questions I have...

[11:58:24.0803] <Waldo>
(other than that one)

[11:59:48.0918] <evilpie>
yulia: what was the plan for factorio?

[12:01:25.0231] <jandem>
sfink: we should celebrate your 10 year Moz-anniversary, just got the email :) 

[12:01:44.0437] <jandem>
 * sfink: we should celebrate your 10 year Moz-anniversary, just got the (linkedin) email :)

[12:01:55.0290] <sfink>
huh. I haven't seen that yet!

[12:02:14.0008] <sfink>
10 years... I guess that's about right. Dang, I've been here way too long.

[12:02:50.0745] <tcampbell>
and yet we keep making more garbage for you to collect

[12:03:00.0731] <iain>
Gotta keep him around somehow

[12:09:42.0340] <Waldo>
Long-lived and no longer in the nursery.

[12:58:19.0716] <yulia>
factorio?

[12:58:44.0911] <yulia>
sorry i was... playing starbound

[12:58:50.0760] <jorendorff>
haha

[12:59:16.0395] <yulia>
the server is running if anyone wants to have a go

[12:59:17.0100] <jorendorff>
it's, like, the middle of the afternoon here

[12:59:21.0201] <yulia>
aw

[12:59:35.0313] <yulia>
but its like ... allhands

[12:59:38.0649] <Waldo>
It's lunchtime here and I am not eating yet.  This seems like a self own.

[13:00:05.0707] <yulia>
i just remodelled the house in starbound

[13:00:16.0022] <yulia>
i guess i should start adventuring or smthng

[13:02:27.0596] <sfink>
/me notices that "smthing" could be shortened from either "something" or "smithing", both of which might make sense.

[13:02:44.0368] <yulia>
🤔

[13:03:27.0182] <yulia>
in german, something translates to irgendwas, the kids shorten it to iwas

[13:03:35.0081] <Waldo>
https://phabricator.services.mozilla.com/D79606

[13:06:29.0176] <jandem>
I knew you wanted to take that one ;) 

[13:07:37.0436] <Waldo>
jandem: For some inexplicable reason I am wishing at this instant that this all-hands were not virtual and you were sitting across a cleared table from me...

[13:09:10.0332] <avandolder>
`	++*s++;` hmm

[13:10:17.0103] <mgaudet>
erm 

[13:10:34.0216] <jorendorff>
wh ... where

[13:10:47.0846] <mgaudet>
https://searchfox.org/mozilla-central/search?q=%2B%2B*s%2B%2B%3B&path=

[13:11:10.0724] <mgaudet>
😬

[13:11:36.0723] <mgaudet>
If that showed up on a coding test I would fail so hard. 

[13:11:40.0397] <mgaudet>
out of sheer panic

[13:11:40.0979] <jorendorff>
that's awesome

[13:11:46.0421] <yulia>
oh thats funny

[13:11:50.0368] <yulia>
why

[13:11:55.0279] <Waldo>
If that showed up on a coding test I would fail _the author_ so hard.

[13:12:53.0265] <mgaudet>
`Copyright (c) 1991, 2000, 2001 by Lucent Technologies.` 

The nineties really were a different time weren't they .

[13:13:02.0541] <mgaudet>
 * `Copyright (c) 1991, 2000, 2001 by Lucent Technologies.`

The nineties really were a different time weren't they.

[13:13:07.0637] <Waldo>
NOTHING GOOD EVER CAME OF THE NINETIES

[13:13:29.0363] <Waldo>
(usually I say this about the eighties, with the obvious joke unstated, but sometimes you gotta flex it)

[13:13:37.0488] <evilpie>
lol 4 copies

[13:13:42.0903] <yulia>
... javascript

[13:13:54.0416] <evilpie>
all modified apparently

[13:14:52.0674] <mgaudet>
Yeah -- I was going to say; I wonder what the chances of all those having been equally maintained was. 

[13:15:09.0491] <Waldo>
Oh they're all equally maintained...

[13:15:17.0884] <mgaudet>
😹

[13:16:54.0493] <evilpie>
the chrome version actually has a similar change: https://searchfox.org/mozilla-central/source/security/sandbox/chromium/base/third_party/dmg_fp/dtoa.cc#4104

[13:17:19.0415] <jandem>
you get to review all four

[13:18:30.0391] <evilpie>
I am on the factorion server now

[13:19:44.0887] <sfink>
yulia: jandem: mgaudet: (and anyone else who might be interested) yinz all registered interest in gdb/rr/Pernosco. I'm realizing I'm not sure what to cover, and need some guidance on interests. I added a tab to the planning spreadsheet with a large set of potential topics.

[13:20:16.0622] <sfink>
if at some point you could take a look and tell me what you'd like to hear, then maybe I can scope out what I might say

[13:20:34.0110] <yulia>
evilpie: have you played before?

[13:20:34.0386] <sfink>
(and it might not be for this week)

[13:20:46.0786] <evilpie>
yulia: yes twice

[13:21:08.0662] <yulia>
evilpie: ok hmm .... we should find some dedicated time. my partner and i are playing starbound rn

[13:21:22.0369] <evilpie>
ok

[13:21:23.0600] <yulia>
(before we got distracted trying to figure out what exactly ++*s++ does)

[13:21:33.0277] <yulia>
(he is writing c now)

[13:21:48.0684] <yulia>
but feel free to get comfy on the server

[13:21:51.0078] <avandolder>
i'm surprised ++*s++ works but *s++++ doesn't tbh

[13:22:05.0272] <Waldo>
"Expecto luncho!"

[13:22:10.0630] <Waldo>
It isn't very effective...

[13:22:22.0642] <yulia>
I think nbp was also interested in getting started

[13:22:35.0815] <jorendorff>
avandolder: oh, well, `++*s++` is incrementing two different things

[13:23:04.0333] <jorendorff>
it says roughly "increment `*s`, then increment `s`"

[13:23:22.0245] <jorendorff>
`(*s++)++` should work the same

[13:23:46.0004] <sfink>
mgaudet: those last two might be the same, I'm not sure :-)

[13:23:52.0761] <yulia>
this is some dark magic

[13:24:02.0627] <mgaudet>
sfink: you're probably not wrong

[13:24:30.0220] <sfink>
I mean, it's a little unfair. You also have the stuff where it shows all executions of a line and things.

[13:24:57.0109] <sfink>
and the tracing back of stdout messages

[13:25:04.0098] <sfink>
but in practice... yeah

[13:26:06.0145] <mgaudet>
I think I find it a bit overwhelming; it's been super useful for me on occasion-- like, cut multiple hours off investigations; but I also feel like I am using an alien machine capable of reshaping matter into any shape, as if it were a hammer.

[13:26:36.0624] <sfink>
yes, exactly

[13:27:15.0017] <yulia>
sfink: I am curious abotu Pernosco

[13:27:19.0062] <yulia>
but i don't know what to ask

[13:27:49.0021] <mgaudet>
Maybe a walk through would be useful? 

[13:28:12.0963] <Waldo>
If you do something I will put it on whilst I sammich.

[13:28:16.0105] <sfink>
<idle speculation> I wonder if we could accumulate a list of "how could Pernosco knock this problem out of the park?" type questions, with sample traces associated with each, and have roc or khuey walk us through things sometime

[13:28:52.0404] <yulia>
that would be really cool to sit in on

[13:29:18.0511] <sfink>
yulia: (re: don't know what to ask) yes, that's fair. It's possible a bunch of people are in that same boat. A basic walkthrough of an example might be nic.

[13:29:24.0252] <sfink>
 * yulia: (re: don't know what to ask) yes, that's fair. It's possible a bunch of people are in that same boat. A basic walkthrough of an example might be nice.

[13:29:41.0112] <iain>
Yeah, I use rr all the time, but I have never tried pernosco

[13:30:54.0114] <mgaudet>
Whenever I use it, I end up using it like a faster `rr`; 

[13:31:12.0682] <mgaudet>
(which for some traces is -something- in and of itself) 

[13:31:27.0899] <iain>
One other potential topic for this session: every so often I discover the existence of a command in gdb/rr and go "oh, wow, that exists? Why haven't I been using that all along?"

[13:31:50.0773] <yulia>
no one: 

partner: I love this language. https://twitter.com/janstepien/status/1272627391605755904

[13:32:02.0447] <sfink>
iain:  I think that's a universal experience

[13:32:14.0801] <iain>
It might be worthwhile for people to just mention some of their favourite commands, in the hope of giving at least one person the same experience

[13:32:39.0619] <Waldo>
`p`

[13:32:47.0568] <Waldo>
`watch`

[13:32:52.0996] <Waldo>
(I doubt this is helpful :-) )

[13:33:36.0034] <mgaudet>
skip is a new one to me, that I'm as we speaking trying to figure out how I can finangle it into our -gdb.py stuff 

[13:33:48.0261] <iain>
`tui enable` was a big discovery for me

[13:34:59.0004] <mgaudet>
oooh; 

[13:35:13.0475] <mgaudet>
I need to remember that. I used it a lot a long while ago, and forgot

[13:35:32.0857] <mgaudet>
(and then realized there's a keycombo because I accidentally got into it at one point)


[13:36:02.0943] <sfink>
I use emacs so get 90% of the benefit of tui that way, but tui has some other stuff that I don't get and would like to have.

[13:36:37.0960] <iain>
Oh, wow, there's a key combo

[13:36:42.0583] <iain>
See, this has already been valuable

[13:37:21.0768] <iain>
I should figure out how to set things up in emacs

[13:37:26.0418] <sfink>
or rather, I think I could have it in emacs, but I'd have to use the many-window-mode, and that makes a mess of everything

[13:37:26.0671] <iain>
That would make a lot of sense

[13:38:22.0393] <sfink>
emacs is also hindered in that it switched the way it talks to gdb to something that's much better and also broken, so you have to do some configuration to get it to actually work

[13:50:31.0783] <Waldo>
noms

[13:50:53.0823] <Waldo>
Also where's that discussion I can flip on now to multitask :-)

[13:55:14.0256] <mccr8>
Waldo hamming it up in chat

[13:55:31.0984] <Waldo>
Raisin the bar

[13:55:56.0263] <mgaudet>
> <@mgaudet:mozilla.org> skip is a new one to me, that I'm as we speaking trying to figure out how I can finangle it into our -gdb.py stuff

(of course, I mention the `skip` command seemingly aspirationally, as I can't seem to get it actually to do anything in rr while I'm experimenting... ☹︎) 

[14:08:11.0712] <mgaudet>
Hmm. Seems to be working on unmangled names? this is irksome. 

[14:17:55.0626] <sfink>
this is why we can't have nice things

[14:20:13.0023] <mgaudet>
This could be my GDB being old/broken

[14:20:37.0468] <mgaudet>
mostly because the documentation mentions `set debug skip [on|off]` and I definitely do not have that

[14:22:35.0676] <mgaudet>
do people build their own GDBs? Is that a crazy thing to do? 

[14:22:49.0726] <Waldo>
Probably.

[14:30:46.0409] <sfink>
I did for a while, because my distro's gdb had broken Python support. I've successfully avoided it for a while now.

[14:35:18.0092] <Waldo>
Hum, really?  Did I dodge a minefield essentially skipping by Fedora 31?

[14:35:40.0111] <sfink>
no, this was on older Fedorae

[14:36:12.0331] <sfink>
the main thing was just that it had py2 embedded, and our prettyprinters wanted py3

[14:37:41.0026] <sfink>
Fedora 31 has gdb 9.1, which does not complain when I lovingly whisper `set debug skip on` into its terminal

[14:38:20.0517] <mgaudet>
(building gdb has so far gone well. It's colourizing in my terminal now, which is kind of cool.) 

[14:38:26.0168] <sfink>
wow, that was a traumatic experience. I dug up my 2019 Whistler lightning talk and... and... *watched myself*

[14:38:28.0830] <sfink>
it was horrible

[14:38:51.0883] <sfink>
I patched gdb once, it wasn't too awful and the building experience was pretty smooth

[14:39:02.0967] <mgaudet>
alas, `skip -rfunction .*Handle<.*>::Handle.* ` does not appear to have skipped `JS::Handle<JS::PropertyKey>::Handle<JS::PropertyKey>` so... 

[14:39:09.0847] <mgaudet>
not sure what's up with that.

[14:39:40.0144] <mgaudet>
https://sourceware.org/gdb/onlinedocs/gdb/Skipping-Over-Functions-and-Files.html seems to heavily hint that it ought to work... 

[14:41:50.0105] <mgaudet>
Oh yeah, gdb 9.2 helpfully tells me to go eat a lemon: 

[14:41:54.0447] <mgaudet>
```
(gdb) step
skip: checking if function _ZN2JS6HandleINS_11PropertyKeyEEC2IS1_EERKNS_6RootedIT_EENSt9enable_ifIXsr3stdE16is_convertible_vIS5_S1_EEiE4typeE matches regex .*Handle<.*>::Handle.*...no.
skip: checking if function _ZN2JS6HandleINS_11PropertyKeyEEC2IS1_EERKNS_6RootedIT_EENSt9enable_ifIXsr3stdE16is_convertible_vIS5_S1_EEiE4typeE matches regex .*Handle<.*>::Handle.*...no.
```

[14:42:57.0943] <mgaudet>
confession: All Hands Day One: Definitely not a normal day, but looks like if I want to get GDB skipping working I'm going to have to figure out how to write a regexp that matches mangled names? Or somehow iterate over symbols in python and skip the list of ones that match my regexp. 

[14:43:00.0156] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:43:55.0918] <sfink>
skip -rfunction .*2JS6Handle.*EC2I.* might do it in that particular case

[14:44:12.0542] <sfink>
 * skip -rfunction `.*2JS6Handle._EC2I.` might do it in that particular case

[14:44:23.0309] <sfink>
 * skip -rfunction `.*2JS6Handle._EC2I` might do it in that particular case

[14:44:31.0878] <mgaudet>
Probably (I am assuming that's somewhere in the neighbourhood of 'a handle constructor' mangling) 

[14:45:07.0233] <sfink>
`2JS6Handle` is `JS::Handle`, C2 is one type of constructor (there's C1..C4 or so). I need to look up the other two. I think E ends one part, and I is for an instantiation.

[14:45:39.0904] <mgaudet>
I'm at EOD: But if you have a good mangling reference that describes the above, I'd be willing ot keep working on this tomorrow.

[14:45:44.0999] <mgaudet>
 * I'm at EOD: But if you have a good mangling reference that describes the above, I'd be willing to keep working on this tomorrow.

[14:46:26.0075] <sfink>
er, I don't think you want the E. It's really C2E or C2I for constructors. Or perhaps better, C\d[IE]. Though obviously that'll have false positives.

[14:46:40.0652] <sfink>
E terminates the method name (and precedes the method parameters).

[14:47:05.0783] <sfink>
I...E demarcates template args

[14:47:13.0005] <sfink>
let me see where I dug this stuff up from

[14:47:25.0720] <jorendorff>
/me checks his calendar

[14:47:27.0616] <jorendorff>
what year is this

[14:47:28.0667] <mgaudet>
:D Appreciate it! Have a good evening all

[14:47:35.0536] <jorendorff>
same

[14:47:44.0077] <sfink>
yep

[14:49:04.0918] <sfink>
aha: https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling

[14:49:51.0120] <sfink>
(but obviously, matching against mangled names is sheer masochism. Error-prone sheer masochism.)

[14:50:20.0887] <Waldo>
Particularly so when the names have embedded SFINAE.

[14:50:59.0250] <sfink>
 * skip -rfunction `.*2JS6Handle.*EC2I` might do it in that particular case (Riot stop mangling my text)

[14:51:26.0124] <Waldo>
It probably would be clearer and more obviously necessary if I thought harder, but I find it deeply disturbing that you get mangled expression sequences in symbol names when you start using SFINAE or `decltype` or similar.

[14:53:01.0712] <sfink>
it opens up interesting avenues of speculation wrt Kolmogorov complexity 😄

[14:56:30.0666] <Waldo>
You sure you didn't mean Cherenkov?

[14:58:14.0013] <sfink>
isn't that the radiation guy?

[15:01:07.0887] <sfink>
argh, you nerd-sniped me. A photonic boom is a pretty cool idea.

[15:15:28.0891] <loganfsmyth>
sfink: I think you're the right person to ask, I know the debugger's is currently very special-cased because it has cross-compartment links. Is that something that was done on purpose, or just kind of because it was the easiest thing to do at the time? Does anyone actually like it being this way? One of the things I've been exploring is what would be required to allow the debugger to not be restricted to only debugging compartments other than its own, and it seems like using normal CCWs in cases where we have cross-compartment references would be one blocker for that.

[15:16:08.0298] <loganfsmyth>
 * sfink: I think you're the right person to ask, I know the debugger is currently very special-cased because it has cross-compartment links. Is that something that was done on purpose, or just kind of because it was the easiest thing to do at the time? Does anyone actually like it being this way? One of the things I've been exploring is what would be required to allow the debugger to not be restricted to only debugging compartments other than its own, and it seems like using normal CCWs in cases where we have cross-compartment references would be one blocker for that.

[15:16:09.0264] <sfink>
jorendorff would probably be a better one for this, but maybe I can speculate

[15:16:20.0169] <jorendorff>
I'd be speculating myself

[15:16:32.0033] <jorendorff>
I just don't remember at this point

[15:16:51.0469] <loganfsmyth>
I guess mostly my question is, how often does that code come up as a problem, does it mostly just work and no-one looks at it?

[15:17:38.0519] <loganfsmyth>
It seems like it could be made to work with a bunch of weakmaps and CCWs, but that's not a trivial amount of moving code around

[15:17:46.0492] <jorendorff>
I think at the time I was at least a little worried about accidentally stepping into debugger code

[15:17:57.0185] <sfink>
I guess I kinda thought that the Debugger relied on the compartment boundary to make things work, or make it much easier to be sure to get wrappers, or something.

[15:18:15.0762] <jorendorff>
as it stands, the compartment boundary, and the fact that the debugger just _won't_ debug the compartment it's in, makes that super impossible

[15:19:09.0803] <jorendorff>
it also means that if for some stupid reason you have two different Debugger objects pointed at the same realm, they won't debug each other

[15:19:18.0510] <jorendorff>
i'm not saying that's a good reason

[15:19:50.0262] <jorendorff>
But also ... it just seemed like the debugger would necessarily be chrome code, and the debuggee would usually be content

[15:20:10.0041] <jorendorff>
(in our actual sole customer, devtools)

[15:20:48.0126] <jorendorff>
and so it was definitely necessary to make it work cross-compartment; same-compartment was then a special case we would have to do extra work to support, it would seem?

[15:20:55.0808] <sfink>
lies. jorendb is awesome.

[15:21:00.0797] <jorendorff>
haha

[15:23:48.0380] <ptomato>
you laugh but we based our debugger in GJS off of jorendb

[15:24:25.0538] <tcampbell>
`DebuggerObject` also provides an interface over the target though? I guess in a weird world, DebuggerObject could extend CCW, although that might be just more bizarre

[15:25:11.0438] <jorendorff>
we wanted Debugger.Object to reveal wrapper behavior accurately

[15:25:35.0533] <tcampbell>
`TraceManuallyBarrieredCrossCompartmentEdge` is a mouthful

[15:25:38.0446] <sfink>
I'm not kidding about liking jorendb. I've used it quite a bit for debugging the hazard analysis code.

[15:25:58.0370] <jorendorff>
i'm tearing up

[15:26:35.0644] <sfink>
(I *am* kidding about considering it to be a significant customer. Though I'm glad to hear it's useful for at least Someone Who Is Not Me.)

[15:26:50.0516] <Waldo>
A modest proposal: https://twitter.com/isotrumpp/status/1272653300974804992

[15:27:26.0068] <jorendorff>
re: wrapper behavior, if a Debugger.Object's referent is a wrapper in the debuggee compartment, the thinking went, it should let you observe that wrapper's behavior

[15:28:09.0103] <jorendorff>
by contract CCW maps always fully unwrap before wrapping, so if a Debugger.Object was a CCW, you see the issue

[15:28:15.0374] <jorendorff>
 * by contrast CCW maps always fully unwrap before wrapping, so if a Debugger.Object was a CCW, you see the issue

[15:31:09.0069] <tcampbell>
oh right. that makes a lot of sense

[15:31:52.0907] <jorendorff>
I do feel it is overengineered but there's a reason for everything :-P sorry

[16:00:24.0389] <loganfsmyth>
welp, asked that and got pulled into another call, of course. jorendorff to your question about debugging being mostly in chrome, you're right, I think the harder part is when we're in the browser toolbox and potentially are debugging the content debugger from the toolbox debugger, so we end up with https://searchfox.org/mozilla-central/source/devtools/shared/builtin-modules.js#217 for instance, where we explicitly create a new compartment, just so that we can have a debugger that is safely able to debug everything else

[16:02:21.0291] <loganfsmyth>
debugging the same compartment is _mostly_ an added bonus on top of potentially removing a lot of the custom tracing logic that the debugger has

[16:02:32.0986] <loganfsmyth>
and needing stuff like https://searchfox.org/mozilla-central/source/js/src/debugger/Debugger.cpp#3880

[16:02:52.0356] <loganfsmyth>
and https://searchfox.org/mozilla-central/source/js/src/debugger/Debugger.cpp#3605

[16:04:08.0111] <jorendorff>
i agree the extremely custom GC stuff is nauseating

[16:04:34.0958] <loganfsmyth>
I think if we moved to standard CCWs and moved more of the debugger state to be held in the actual debuggee realm, instead of living in the debugger realm with tons of tracing logic, we'd be able to drop all that, and get same-compartment debugging for free

[16:05:36.0305] <loganfsmyth>
kind of inverting a lot of the links we have now by using CCWs and WeakMaps

[16:05:36.0690] <jorendorff>
I have to go, it's dinner here

[16:05:45.0425] <loganfsmyth>
no problem

[16:06:03.0152] <Waldo>
Food, psh.

[16:06:06.0570] <jorendorff>
I think this could be good -- I'll add, a lot of the GC specialness is to make Debugger.Objects persist

[16:07:09.0511] <jorendorff>
so if the server isn't using that end-to-end property, or if it can get the same functionality out of a normal WeakMap,

[16:07:35.0619] <jorendorff>
all the more reason to radically simplify

[16:07:45.0810] <jorendorff>
 * all the more reason to simplify a bunch

[16:09:18.0143] <loganfsmyth>
cool

[16:09:45.0084] <jorendorff>
by "persist" I just mean you always get the same one when you request one for the same debuggee object

[16:09:55.0420] <loganfsmyth>
yeah absolutely

[16:10:52.0296] <jorendorff>
ok, really afk now

[16:11:53.0402] <loganfsmyth>
👋


2020-06-16
[18:34:59.0767] <loganfsmyth>
Alright unrelated question, but it's also getting late so if no-one replies I'll just ping again tomorrow. I'd be very curious to hear what you all think might be possible approaches for https://bugzilla.mozilla.org/show_bug.cgi?id=1645942

[01:21:33.0465] <Benjamin Bouvier>
confession: resurrected a git branch i thought i pushed to a remote branch and accidentally deleted, thanks `git reflog`

[01:21:36.0053] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[04:21:26.0801] <Ms2ger [~half-time dedication]>
Waldo: https://pbs.twimg.com/media/EakyfcrUMAAmKPh?format=jpg&name=medium

[05:47:09.0906] <jandem>
I added a Fuzzing discussion to our spreadsheet, after talking to decoder today. He's interested in fuzzing priorities for H2, please add your name if you're interested in that

[05:48:35.0199] <jandem>
sfink: since you're doing scheduling, maybe you can help us find a time slot (tomorrow works best for decoder, but he can do other days too)

[07:09:45.0470] <jonco>
sfink: @allstarschh|afk shall we skip the GC meeting tomorrow, as it overlaps with all hands events?

[07:10:45.0190] <@allstarschh|afk>
jonco sfink : good to me

[07:11:41.0345] <sfink>
Yes. There was an email requesting everyone to cancel recurring meetings for the week anyway. 

[07:14:04.0849] <jonco>
great, will do

[07:15:40.0056] <mgaudet>
confession: So, the saga of `skip -rfunc` gets more unfortunate. I figured I ought to file a GDB bug, because it seemed silly that it didn't work. While building a minimal test case tho... everything worked. In fact, during the execution of the shell, the regexp was being matched against demangled names regularly... just not the ones we care about. At the moment, the problem appears to be that GDB cannot demangle the handle constructor mangled name:

```
(gdb) demangle _ZN2JS6HandleINS_11PropertyKeyEEC2IS1_EERKNS_6RootedIT_EENSt9enable_ifIXsr3stdE16is_convertible_vIS5_S1_EEiE4typeE   
Can't demangle "_ZN2JS6HandleINS_11PropertyKeyEEC2IS1_EERKNS_6RootedIT_EENSt9enable_ifIXsr3stdE16is_convertible_vIS5_S1_EEiE4typeE"
```

which appears to be the root cause behind the regexp not working; it tries to demangle, and fails. 

[07:17:33.0171] <mgaudet>
`c++filt` also appears to have no idea what that symbol demangles to either

[07:18:27.0281] <sfink>
oh, wow

[07:19:06.0927] <sfink>
yeah, my c++filt can't handle it either

[07:19:15.0441] <Ms2ger [~half-time dedication]>
How about https://github.com/gimli-rs/cpp_demangle ?

[07:20:00.0342] <mgaudet>
Ms2ger [~half-time dedication]: Lemme try... 

[07:20:14.0462] <jorendorff>
/me watches with interest

[07:20:48.0188] <mgaudet>
```
$ /home/matthew/.cargo/bin/cppfilt 
_ZN2JS6HandleINS_11PropertyKeyEEC2IS1_EERKNS_6RootedIT_EENSt9enable_ifIXsr3stdE16is_convertible_vIS5_S1_EEiE4typeE 
JS::Handle<JS::PropertyKey>::Handle<JS::PropertyKey>(std::enable_if<std::is_convertible_v<JS::PropertyKey, JS::PropertyKey>, int>::type) 
```

[07:20:58.0610] <mgaudet>
Yep: gimli gets it

[07:20:59.0761] <jorendorff>
\o/

[07:21:26.0702] <mgaudet>
Looks like I'm filing a -different- gdb bug

[07:21:46.0381] <mgaudet>
After breakfast tho :) 

[07:21:47.0444] <sfink>
ok, then just file a PR adding Rust to the gdb build. Shouldn't be a big deal. ;-)

[07:22:02.0917] <jorendorff>
ISTR fitzgen's tests for that project are prodigious

[07:23:14.0439] <sfink>
I accidentally added a symbol to our build that crashed gdb's (binutil's) demangler. It was fixed in a newer version, but my confidence is not high.

[07:33:26.0281] <sfink>
decoder: for the fuzzing discussion, do you think you could talk us through how fuzzing works? for an audience that mostly cares about whether they're doing whatever needs to be done to cause their new code to be fuzzed, as well as perhaps suggestions about how to better expose things in a fuzzable way

[07:34:10.0297] <sfink>
hm, I guess I have other ideas for fuzzing-related discussion; I'll make a list in another sheet of https://docs.google.com/spreadsheets/d/12OfEj4rtZgGFXZ6wLOmso3KRhbutx4c7HDP4cvb_T0s/edit#gid=0

[07:34:11.0990] <decoder>
I think we can do something like that. the reason why I wanted the meeting is because I would like to know what is planned for H2 in particular, and how important each feature is

[07:34:25.0910] <decoder>
because I need to plan ahead for those things

[07:34:41.0733] <sfink>
ok

[07:35:09.0306] <decoder>
we can first discuss that and then maybe I can show you some (new) fuzzing 

[07:35:14.0806] <sfink>
I'll just make a list of potential topics. You can use whatever you like, starting with the priorities

[07:35:15.0771] <sfink>
yeah

[07:35:18.0568] <decoder>
things that you can also use for your own testing if you need something quickly

[07:35:22.0763] <decoder>
great

[07:44:39.0506] <sfink>
tcampbell: you're probably the best one to opine on loganfsmyth's bug 1645942

[07:44:40.0890] <botzilla>
https://bugzil.la/1645942 — NEW (nobody) — Revisit ScriptSource GC handling for late loading of the Debugger

[07:46:40.0406] <loganfsmyth>
cool, added an NI for him

[07:47:00.0654] <tcampbell>
will have to ponder more for better answers

[07:47:27.0920] <tcampbell>
one thing is that with Stencil, it should be a lot more predicatable how to reparse

[07:48:09.0483] <tcampbell>
also, my previous understanding of the issue was less about source being GC'd and more about top-level script being GC'd. I can see how both might apply

[07:48:12.0629] <sfink>
loganfsmyth: one question I had -- how often do users expect everything to work out of the box vs immediately doing a reload? Is this use case mostly when a page logs an error?

[07:49:02.0591] <tcampbell>
If a source is GC'd because no scripts are live, it seems hard to blame the debugger for pretending it never existed until they reload

[07:49:19.0680] <sfink>
do scripts keep their source alive?

[07:49:43.0348] <tcampbell>
yes

[07:50:06.0641] <sfink>
oh, I guess there's `toSource` or something, so we have to

[07:50:27.0027] <tcampbell>
`BaseScript::sourceObject_` is a strong edge

[08:02:18.0322] <mccr8>
There's also this relazification, so we can throw out the script object, so we have to keep around the source for that. Or something.

[08:04:14.0741] <loganfsmyth>
> <@sfink:mozilla.org> loganfsmyth: one question I had -- how often do users expect everything to work out of the box vs immediately doing a reload? Is this use case mostly when a page logs an error?

I'd say it is a combination of wanting to see the file that caused an error and it not being found, and wanting to add a breakpoint to a file to discover that it isn't in the list of files (or in the case of inline scripts, maybe one inline script hasn't been GCed and one has, so only part of the file allows you to add breakpoints to it, but part does not)

[08:06:59.0739] <mccr8>
(We used to be able to drop source information for chrome JS, but we can't now due to relazification, or something. Disclaimer that my memory is hazy and this is years out of date.)

[09:42:45.0472] <Waldo>
That's right.

[09:43:21.0219] <Waldo>
Although, we have the source hook now to dynamically re-acquire source info for chrome JS, so we're not literally keeping the source around in memory just for delazification.

[09:45:25.0174] <sfink>
whoa. "Jeffrey Walden", huh?

[09:45:34.0010] <sfink>
not a name I recognize

[09:45:37.0781] <evilpie>
Waldo: I want to improve CallNonGenericMethod so that we can log error messages like "Map.prototype.entries called on .." instead of "entries called on .." 

[09:45:49.0497] <evilpie>
not sure yet what the best API would be

[09:46:10.0727] <evilpie>
A JSClass* ? Changing the templates so we derive MapObject::is as well as the name?

[09:46:11.0098] <Waldo>
sfink: ?  Where are you seeing that name?

[09:46:11.0240] <sfink>
I thought people wanted to shoot CallNonGenericMethod in the head

[09:46:19.0185] <Waldo>
(I mean it is one, but)

[09:46:23.0412] <evilpie>
well that would be nice too

[09:46:30.0029] <sfink>
Waldo: the email where you accepted the calendar appointments

[09:46:51.0745] <Waldo>
sfink: Oh, maybe that's compelled by Mozilla's Google setup.  I never set it specifically.

[09:47:27.0898] <Waldo>
"This setting can’t be changed for your account"

[09:48:11.0068] <sfink>
🍍

[09:49:31.0585] <Waldo>
evilpie: Don't pile on `JSClass` for sure.  I'm skeptical about inferring `T::is` being a good idea, but I could be mistaken.  Gut sense is a new data structure to represent this is probably better than trying to reuse something, but that could be wrong.

[09:49:56.0127] <evilpie>
I mean we already have to JSObject::is specalizations anyway

[09:50:30.0038] <evilpie>
So we would do `this.is<T>()` ?

[09:50:57.0882] <evilpie>
Sadly this doesn't really work for cases like Symbol, because this is on JSObject, so it won't work primitive symbols

[09:55:30.0114] <Waldo>
> <@ms2ger:igalia.com> Waldo: https://pbs.twimg.com/media/EakyfcrUMAAmKPh?format=jpg&name=medium

Mm.  This is how the Internet works, this is how the memeing is...but this sort of knife-twisting is basically inaccurate and not helpful to anyone -- except culture-war poo-flingers.  There are reasonable legal arguments for each side; the question is "close" as Gorsuch himself put it in oral argument.  And while florid assertions about equality are the sort of airy fluffery that might have been in a Kennedy opinion, they really have nothing at all to do with the textual interpretation Gorsuch performed.  There are ways to discuss this that may cause people to re-examine their priors.  This is not it at all, and seems more specifically designed to enrage than anything.  And when people get enraged in politics...well, uh, it shouldn't take more than gesturing at the last several years to explain why this is a myopically stupid idea.

[09:56:06.0360] <Waldo>
evilpie: Yeah, `Symbol` is probably one of the examples why inferring isn't good enough.

[10:18:08.0306] <yulia>
hokey important question. -> when do we factorio?

[10:19:06.0672] <jorendorff>
pick a time, i'll appear

[10:19:52.0487] <yulia>
we have meetings today until 9 pm my time..

[10:20:09.0070] <yulia>
tomorrow i had the idea of doing the social at 8 pm, maybe we can just use that time?

[10:20:18.0746] <iain>
I reinstalled Factorio last night and started it up just to make sure it worked

[10:20:28.0187] <yulia>
and then there is thursday during ET lightning talks...

[10:20:34.0832] <iain>
I am pleased to report that I only played until 1:30 in the morning

[10:20:40.0888] <yulia>
hah nice

[10:20:55.0956] <iain>
Which is several hours better than last time I installed Factorio

[10:21:27.0218] <yulia>
the server is still running if anyone wants to jump in at any time

[10:21:36.0674] <mccr8>
I set an alarm when I play Factorio to keep things from getting too out of control.

[10:25:03.0254] <sfink>
I fear this factorio thing. I don't even know what it is, but already strongly suspect I will be instantly addicted.

[10:25:45.0125] <sfink>
some jerk posted a link to that paper clip making game on Slack about a year ago. 8 hours later, I'd finished it.

[10:26:13.0337] <yulia>
it is rather addictive

[10:29:58.0974] <sfink>
tomorrow at 8pm seems like a good time to me, though. There are a few more JS topics I could schedule in, but I'm kinda feeling like there are enough already.

[10:30:07.0818] <jorendorff>
should I be downloading version 0.18.32 from factorio.com?

[10:30:31.0244] <sfink>
and maybe doing them after this week is a way to force us to get more comfortable with the notion of doing things like this not just during All-Hands

[10:30:34.0683] <yulia>
lemme check the version

[10:31:00.0019] <sfink>
(though I know that's asking for more of the evening hours of Europe people)

[10:31:03.0932] <yulia>
server is 0.17.79

[10:31:15.0363] <sfink>
 * (though I know that's asking for more of the evening hours from Europe people)

[10:31:16.0014] <yulia>
jorendorff: ^

[10:31:44.0600] <yulia>
sfink: i am also wondering if we should have more js topics

[10:31:51.0519] <yulia>
but, it does start to cut into social time

[10:32:32.0786] <yulia>
i might shift my day tomorrow to start at 4 pm so that im not so exhausted at this time...

[10:37:34.0422] <sfink>
wow, hubs has my Web Content process pegged at 200%CPU

[10:39:04.0372] <sfink>
this demo is overloaded. Haven't made it to the lobby yet. I've had audio for about 5minutes already, though.

[10:42:16.0585] <sfink>
the hubs flow is pretty clunky

[10:42:48.0519] <sfink>
if you leave a room, you get condemned to a nonfunctional page instead of the main page

[10:44:59.0350] <sfink>
it would be cool to tailor hubs to meetings like this. Selectively break the rules of reality, when it makes for a better experience.

[10:45:15.0947] <sfink>
though for all I know, a bunch of things I wanted might already be there. I don't know hubs.

[10:45:28.0293] <sfink>
(not sure why I'm talking about this here.)

[11:04:48.0328] <Waldo>
/me waves to anyone in the photo session now

[11:31:30.0153] <mgaudet>
https://github.com/mgaudet/mozconfigs

[11:32:42.0478] <sfink>
https://gist.githubusercontent.com/hotsphink/776f9cbe0ae5bf7c2501fdf415f8ed52/raw/text.txt

[11:33:51.0726] <Waldo>
`rm -rf dbg && autoconf-2.13 && mkdir dbg && (cd dbg && LLVM_SYMBOLIZER='/home/jwalden/.programs/new-compilers/llvm-symbolizer-tip' LLVMCONFIG='/home/jwalden/.programs/new-compilers/llvm-config-tip' CC='clang-tip' CXX='clang++-tip' ../configure --enable-oom-breakpoint --enable-debug --disable-optimize --enable-readline --enable-signed-overflow-sanitizer --enable-unsigned-overflow-sanitizer --enable-undefined-sanitizer=shift,pointer-overflow --enable-valgrind --enable-warnings-as-errors && BUILD_VERBOSE_LOG=1 make -s -j8)`

[11:33:58.0318] <Waldo>
(God bless shell autocomplete.)

[11:34:04.0593] <mgaudet>
https://firefox-source-docs.mozilla.org/js/build.html

[11:34:10.0351] <Waldo>
(I do have a separate command to just remake.)

[11:35:32.0309] <Waldo>
jandem y u no like

[11:36:25.0848] <yulia>
this is mine unfortunately:

/bin/sh ../configure.in --enable-debug --disable-optimize --enable-ccache --enable-oom-breakpoint --with-macos-sdk=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk

[11:36:35.0797] <yulia>
 * this is mine unfortunately:
```
/bin/sh ../configure.in --enable-debug --disable-optimize --enable-ccache --enable-oom-breakpoint --with-macos-sdk=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk
```

[11:36:45.0880] <yulia>
 * this is mine unfortunately:
`
/bin/sh ../configure.in --enable-debug --disable-optimize --enable-ccache --enable-oom-breakpoint --with-macos-sdk=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk
`

[11:38:58.0256] <Waldo>
Not sure if a difference between `--enable-ccache` and shoving `ccache` into `CC/CXX/CPP`.

[11:39:17.0840] <Waldo>
Sadly,

```
# Don't ccache for now due to
#  2:52.82 ccache: error: missing equal sign in "os_Linux_x86_64.o"
# for non-obvious reasons that are not going to be debugged now...
```

[11:39:35.0841] <Waldo>
in my current `mozconfig`, and I've cut `ccache` out of the shell one-liners too.

[11:39:43.0667] <mgaudet>
`./mach jittest <path to test>` 

[11:39:46.0201] <Waldo>
Not clear where the fault lies with that bug.  😒

[11:40:16.0807] <jandem>
`export MOZCONFIG=file`

[11:40:44.0095] <yulia>
should it be the absolute path?

[11:40:46.0381] <nbp>
https://github.com/nbp/spidermonkey-dev-tools/blob/master/make.sh#L347-L427

[11:40:53.0850] <mgaudet>
yulia: Yes, it needs to be absolute

[11:41:02.0063] <Waldo>
Ideally the absolute path.  Relative _probably_ works sometimes, but why be not resilient?

[11:41:05.0129] <yulia>
ah here it is

[11:41:05.0605] <yulia>
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Configuring_Build_Options

[11:41:26.0938] <yulia>
thanks, sorry it takes me a while to catch up

[11:41:31.0221] <jandem>
I have a small library of mozconfig files for opt/debug/either arm/arm64-simulators... 

[11:41:38.0409] <jorendorff>
yulia: i'm a little amazed configure worked for you -- seems like we must have a bad wiki page somewhere

[11:41:49.0661] <sfink>
https://gist.githubusercontent.com/hotsphink/a91a34cfa07147ac93c98f5a7376f721/raw/mach

[11:41:56.0413] <yulia>
jorendorff: its from our old build documentation

[11:42:09.0248] <sfink>
^ so I don't have to do an absolute path for mach

[11:42:18.0945] <sfink>
but still get the right one from whatever source tree I'm in

[11:42:19.0387] <yulia>
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Build_Documentation

[11:42:43.0513] <jandem>
for setting MOZCONFIG, Ctrl + R is invaluable to search for one

[11:42:47.0807] <yulia>
i just never got around to updating

[11:47:32.0922] <Waldo>
https://paste.rs/qEH.sh to build clang tip, typically.

[11:50:06.0497] <sfink>
https://gist.githubusercontent.com/hotsphink/b7d7a53ef4b5ad5b2f926033249188bd/raw/crontab

[11:50:52.0190] <sfink>
https://gist.githubusercontent.com/hotsphink/ce18bdd0915eab9356e22e08cd698670/raw/nightly-builds

[11:52:18.0547] <nbp>
tcampbell: here is a proof that I was using git way before git-cinnabar https://github.com/nbp/spidermonkey-dev-tools/tree/master/git-hg-bridge

[11:53:19.0553] <mgaudet>
```
[rebase]
experimental.inmemory = True
```

[11:53:41.0377] <Waldo>
```for b in `hg show bookmarks --template '{bookmarks} '`; do if hg phase "$b" | grep public >/dev/null; then echo "$b"; fi; done```

[11:55:48.0277] <sfink>
Waldo: in my [alias] section: `lsb = log -r 'bookmark() and not public()' -T '{pad("{bookmarks}", 30)} {desc|firstline}\n'`

[11:55:58.0870] <yulia>
`hg up dot`?

[11:56:01.0059] <yulia>
or `hg up .`?

[11:56:04.0384] <Waldo>
`hg up .`

[11:56:18.0436] <jandem>
or `.^` for the parent rev

[11:56:33.0812] <Waldo>
`^` modifies to parent rev, just like with git.

[11:56:40.0426] <yulia>
`git co -`

[11:56:49.0237] <Waldo>
So `hg up .^` to prev, `hg up .^^` to prev's prev, etc.

[11:57:59.0215] <yulia>
another thing i use all the time in place of `git rebase -i master` is `hg rebase -s . -d central` ... repeatedly

[11:58:02.0724] <yulia>
i think there is a better way

[11:58:25.0861] <nbp>
I like the fact that we move from a build system discussion to a DVCS discussion

[11:58:28.0094] <sfink>
yulia: I think the better way is `hg rebase -d central` :)

[11:58:40.0881] <yulia>
sfink: but how do you modify commits in between?

[11:58:44.0570] <jandem>
I like `hg up central; hg grab $rev`

[11:59:06.0116] <Waldo>
Wait, `grab`?  /me looks up

[11:59:12.0101] <yulia>
same

[11:59:20.0670] <jandem>
from the evolve extension

[11:59:45.0820] <Waldo>
Huh.  That looks simpler than a histedit...

[12:00:07.0860] <jandem>
yeah I find `hg amend/next/prev/fold` useful and faster, but histedit is more flexible

[12:00:19.0032] <mgaudet>
hg next/prev are new favs for me

[12:00:24.0939] <yulia>
git rebase -i master is really nice, because you get a list of commits and can select the ones that you want to modify (for example, a comment requests a restructring of the code, i use it then quite a bit)

[12:00:25.0767] <jorendorff>
i miss all these tools

[12:00:30.0341] <yulia>
so i miss that with hg

[12:00:30.0960] <Waldo>
`hg next` and `hg prev` are lifesavers.

[12:00:35.0214] <jorendorff>
i've been using git for a while now and `rebase -i` is the only tool

[12:00:42.0590] <yulia>
ooo prev, next

[12:00:51.0326] <sfink>
https://github.com/hotsphink/sfink-tools

[12:00:55.0774] <jorendorff>
yulia: that's `hg histedit`

[12:01:09.0753] <jorendorff>
yulia: it's the same thing as `git rebase -i`

[12:01:12.0889] <yulia>
oh!

[12:01:28.0089] <nbp>
`EDITOR=true git commit -p --amend` <-- add changes without editting the commit message

[12:01:38.0658] <jorendorff>
haha, funny!

[12:01:39.0535] <yulia>
damn but it sounds so scary

[12:01:49.0610] <jorendorff>
I was looking for that the other day,

[12:01:54.0968] <jorendorff>
nbp: but there's also `--no-edit`

[12:02:05.0178] <nbp>
oh, great!

[12:02:10.0383] <jorendorff>
`EDITOR=true` is the Unix Way though lol

[12:03:39.0034] <evilpie>
https://addons.mozilla.org/en-US/firefox/addon/phabricator-in-bugzilla/

[12:04:49.0446] <sfink>
evilpie: thanks, installed!

[12:05:02.0041] <mgaudet>
https://addons.mozilla.org/en-CA/firefox/addon/searchfox-phabricator/

[12:05:50.0716] <Waldo>
https://addons.mozilla.org/en-US/firefox/addon/phabrinter/ arai's phabricator make-it-suck-not-quite-so-much addon

[12:07:20.0605] <Waldo>
Phabricator: "LEEROY JEEEENKIIIIINSSS"

[12:08:19.0968] <sfink>
mgaudet++

[12:09:47.0766] <yulia>
z - go to bottom of phabricator but it never closes (in case anyone scrolls back to see hints from this chat log)

[12:10:11.0805] <jandem>
you can press z again to close it

[12:10:26.0644] <caroline>
^ if you click out of the comment box and press z again it will close

[12:10:26.0827] <yulia>
oh you have to unhover the box

[12:10:34.0492] <yulia>
magic

[12:10:44.0291] <yulia>
unhover -> unselect

[12:11:12.0405] <evilpie>
neat. ESC would be better

[12:12:46.0818] <sfink>
yulia: https://docs.google.com/spreadsheets/d/12OfEj4rtZgGFXZ6wLOmso3KRhbutx4c7HDP4cvb_T0s/edit#gid=0

[12:13:03.0349] <Waldo>
Okay, so that spreadsheet is _not_ ordered by day of discussion or time, so I am going to fix that now.

[12:14:28.0179] <Waldo>
Okay, everything that has a time/date on it is ordered, I think.

[12:14:39.0400] <jorendorff>
thanks

[12:14:47.0620] <yulia>
the sound of "javascript" here is epic

[12:14:48.0152] <yulia>
https://twitter.com/EmmanuelCAdigwe/status/1272510944162308097

[12:17:48.0582] <yulia>
"this is civilization"

[12:17:56.0931] <Waldo>
I dunno if I'm up for factorio, looks too engrossing, but if people want to Dominion at some point I am on board for sure.

[12:19:35.0989] <avandolder>
I've never played either, but I'm willing to try

[12:19:55.0401] <sfink>
the one week I have an all-hands and can't participate, the rest of my family has started playing Dominion. I ought to play here to spite them.

[12:20:00.0393] <yulia>
factorio is worth it

[12:20:36.0021] <yulia>
i feel like that  is a makeup slogan for some reason..

[12:20:37.0944] <Waldo>
Dominion at least is a game you pretty much just go through the motions of, the first several times, and see what happens.  Eventually you start getting a feel for things, recognizing interactions, and you can become competent.

[12:22:00.0668] <yulia>
ok, factorio tomorrow at 8 yall

[12:22:05.0710] <yulia>
with spatial chat in the background.

[12:22:57.0658] <jorendorff>
EXCELLENT what time is 8

[12:23:12.0695] <evilpie>
Like now -1:20

[12:23:58.0104] <yulia>
8 pm CEST is 2 pm PDT

[12:24:05.0420] <yulia>
I made us a spatial chat https://spatial.chat/s/socialspider

[12:24:13.0012] <jorendorff>
yulia: i sent you a thing with the *wrong* time slot then

[12:24:20.0699] <jorendorff>
yulia: but you can modify the event, add people, etc.

[12:24:27.0153] <yulia>
no thats right!

[12:24:52.0678] <jorendorff>
oh! then it's 2pm Eastern time, not 2pm PDT

[12:25:07.0127] <jorendorff>
it'll be like 11am PDT

[12:25:18.0352] <yulia>
ah i just sent it to all steve's directs

[12:25:27.0318] <yulia>
addiction for everyone

[12:25:37.0045] <yulia>
apparently i have 15 minutes to play factorio

[12:25:42.0745] <yulia>
so i will go do that

[12:26:02.0386] <yulia>
and then dinner will appear so i will have to leavee

[12:26:02.0552] <Waldo>
You can quit any time you want.

[12:26:09.0744] <yulia>
:|

[12:29:15.0127] <mgaudet>
yulia: Does spatial.chat work in firefox for you? (I got wierd long error, but not sure if me) 

[12:29:57.0502] <yulia>
yese

[12:30:07.0369] <iain>
Works for me too

[12:30:30.0290] <mgaudet>
kk. Must be my end

[12:30:32.0162] <mgaudet>
(OT_CREATE_PEER_CONNECTION_FAILED: Session.publish :: NewPeerConnection: Publisher PeerConnection with connection (not found) failed: Failed to create PeerConnection, exception: Error: Failed to create valid RTCPeerConnection object) 

[12:56:34.0839] <crazypython>
I suggest documenting spidermonkey internals-- specifically memory layout and dataflow algorithms-- so it's easier to optimize for it. IT's easy to optimize for V8 and WebKit because their engines are documented

[12:57:04.0912] <crazypython>
I suggest opening sub-channels for spidermonkey, roughly organized by overlapping subtopics, and trying to continue threads in one channel.

[13:49:06.0335] <jdm>
could somebody help me understand the purpose behind https://searchfox.org/mozilla-central/source/js/src/builtin/Promise.cpp#3168 and what what situation would cause us to execute that code?

[13:49:27.0200] <Waldo>
Bah, you said the cursed word.

[13:49:35.0643] <jdm>
specifically, we're hitting it in servo, and I'd like to write a minimal test case that executes that code path

[13:50:00.0010] <jdm>
 * specifically, we're hitting it in servo on vimeo.com, and I'd like to write a minimal test case that executes that code path

[13:53:33.0576] <jorendorff>
I usually find this sort of thing by adding a `MOZ_CRASH("jorendorff intentionally broke it");` and running the regression tests.

[13:53:51.0485] <Waldo>
Blame may also help.

[13:55:57.0577] <jorendorff>
https://hg.mozilla.org/mozilla-central/rev/0b2b4b7fec99ab1ab584036e1c1dafae683709cd

[13:57:00.0571] <jorendorff>
jdm: https://searchfox.org/mozilla-central/source/js/src/jit-test/tests/promise/debugger-reaction-does-not-resolve.js

[13:57:47.0255] <jdm>
ok, that looks like it could be helpful

[13:57:48.0030] <jdm>
thanks!

[13:58:20.0852] <jdm>
my main issue is that I have no problem breaking on the code in servo, but I've tried to replicate the triggering condition in an isolated test and failed so far

[13:58:44.0518] <jdm>
oh, I missed the "running the regression tests" you suggested. that's a good idea.

[14:00:14.0366] <jdm>
but good lord, this test

[14:02:22.0442] <jorendorff>
jdm: maybe i can help a little more... what do you need? a test that you can understand, or is that not a requirement (sometimes it's not)

[14:02:41.0722] <jdm>
I don't _really_ need to understand it

[14:03:02.0355] <jdm>
I've already got the gist in my head; I just want something I can add to our own regression test suite for servo

[14:05:32.0313] <jdm>
https://hg.mozilla.org/mozilla-central/rev/0b2b4b7fec99ab1ab584036e1c1dafae683709cd#l3.28 looks promising

[14:06:24.0361] <jdm>
aha!

[14:06:30.0610] <Waldo>
`js/src/tests/test262/built-ins/Promise/race/invoke-then.js` will hit that code.

[14:06:34.0908] <jdm>
I just needed to use Promise.all with a promise value that has a non-default then()

[14:09:24.0472] <jdm>
in case anybody's curious, this triggers the case I was looking for:

[14:09:33.0364] <jdm>
 * in case anybody's curious, this triggers the case I was looking for:
```js
  let p = new Promise((r) => setTimeout(r, 0));
  p.then = function() {};
  Promise.all([p]);
```

[14:41:13.0786] <loganfsmyth>
jorendorff: Just tagged you on https://bugzilla.mozilla.org/show_bug.cgi?id=1646017 since it seems to be an issue that will affect the `Promise.any` in a not-great way

[14:53:29.0609] <sfink>
crazypython: this channel is usually much less active. Mozilla is having a remote All-Hands right now, which is why there's so much (overlapping) activity. Especially the stuff before your message was really a backchannel from a Zoom meeting.

[14:54:45.0772] <jorendorff>
loganfsmyth: afk a bit ... i'm also unsure though

[14:55:28.0782] <sfink>
as for documentation: I agree it would be great to have things more documented, but we have way too many things going on to drop everything and work on documentation for everything. And for the foreseeable future, anything that doesn't pretty directly relate to SpiderMonkey's usage within Gecko tends to get less attention.

[14:56:14.0191] <sfink>
that said, if you could explain specifically what limited-effort documentation would provide the highest impact, I think you could make a convincing case that somebody might act upon

[14:56:47.0547] <sfink>
I don't understand, for example, what external purpose a full documentation of the heap layout would serve

[14:57:32.0004] <sfink>
things like our Shapes ("hidden classes" I think is what at least one of the other engine calls them?) make sense to me as something you'd want to know about, though I'm not sure if our setup is different enough from anyone else's to matter

[14:57:48.0490] <sfink>
(as in, if you optimize for eg v8, it'll usually translate to SpiderMonkey)

[14:58:07.0180] <sfink>
there are certainly areas where this advice is flat-out wrong. Maybe you have one of those in mind.

[14:58:43.0249] <sfink>
also, we're currently in the middle of a major change to the JIT engine, which is going to change the advice we'd give

[14:59:18.0787] <sfink>
now I need to leave for an hour so

[15:06:29.0631] <jorendorff>
loganfsmyth: Does `Promise.reject(new Error())` capture an async stack?

[15:07:12.0145] <jorendorff>
I'm trying to reason by analogy to existing cases (`Promise.any` is a new feature)


2020-06-17
[17:32:30.0902] <loganfsmyth>
jorendorff: sorry was away, did you look into that more or should I try to answer your question?

[17:35:00.0902] <loganfsmyth>
If I had to guess, the Error object would have a stack trace, but the promise itself would not have an associated stack (unless devtools was open at the time)

[17:35:42.0412] <loganfsmyth>
I guess the difficulty of  `Promise.any` is that it potentially has to instantiate and throw a new error, but it doesn't know at the time it is called whether or not it will need to

[17:37:00.0766] <loganfsmyth>
for instance, https://searchfox.org/mozilla-central/rev/2c1092dc68c63f7bad6da6a03c5883a5ab5ff2ca/js/src/tests/non262/Promise/any-stack.js#10 works fine because it is able to instantiate the error synchronously, but https://searchfox.org/mozilla-central/rev/2c1092dc68c63f7bad6da6a03c5883a5ab5ff2ca/js/src/tests/non262/Promise/any-stack.js#40 fails because it has to wait to decide if it needs an AggregateError

[17:38:16.0789] <jorendorff>
Right ... I guess it's just surprising there aren't other builtin async things that throw; but there aren't many builtin async things in the spec

[17:38:41.0281] <jorendorff>
Streams, maybe?

[17:39:33.0555] <loganfsmyth>
yeah I was thinking about that too, I guess maybe this is the first in ECMAScript directly, but I do suppose that `fetch("https://fake.com").catch(err => console.log(err.stack))` logs an empty string for instance

[17:39:43.0839] <loganfsmyth>
so maybe it is fine and just something I haven't thought about before

[17:40:08.0019] <jorendorff>
ooh cool

[17:41:16.0992] <jorendorff>
loganfsmyth: 

[17:41:31.0896] <jorendorff>
 * loganfsmyth: that seems relevant!

[17:41:44.0023] <jorendorff>
Someone who'

[17:42:07.0231] <jorendorff>
 * Someone who thinks a lot about developer experience should probably decide this...

[17:42:47.0729] <jorendorff>
we could capture an async stack for fetch always

[17:42:58.0153] <jorendorff>
...do we grab one when the pref is enabled?

[17:43:23.0424] <jorendorff>
but now it seems clear that `Promise.any` should do whatever `fetch` does

[17:45:59.0511] <loganfsmyth>
fetch seems to _never_ set a stacktrace on the error, which is interesting? Assuming I'm not missing something

[17:46:38.0013] <loganfsmyth>
oh wait no, it's similar

[17:47:15.0403] <loganfsmyth>
it's a bit more inconsistent though

[17:47:26.0185] <loganfsmyth>
let me compare to chrome

[18:00:04.0442] <loganfsmyth>
Yeah so V8 has one different from SpiderMonkey affects this a bit. V8 does not show async frames in `err.stack` from my tests

[18:01:30.0108] <loganfsmyth>
so that means that a fetch() error's stack is either the sync portion of the stack when fetch() was called, if the error is generated when it is called, or the stack is empty if the trace was generated asynchronously

[18:06:59.0607] <loganfsmyth>
that's actually similar to Gecko's fetch() which also doesn't include async pieces in the fetch trace, since they'd have to manually pull the allocation data out of the promise and use `AutoSetAsyncStackForNewCalls` before capturing the stack, which in retrospect there may not be an API to do? 

[05:45:29.0602] <tcampbell>
Yoric: review ping on https://phabricator.services.mozilla.com/D77947 . (I can also forward to arai if they are more familiar with the rust code for BinAST)

[05:50:00.0939] <arai>
taking over

[05:51:20.0268] <tcampbell>
TY

[05:51:30.0108] <tcampbell>
 * thanks

[05:52:14.0576] <tcampbell>
(I've never worked with our rust vendoring before so don't assume I know what I'm doing :)

[05:52:23.0165] <arai>
tcampbell: is js/src/jsapi-tests/binast going to be removed in the patch not on phabricator?

[05:52:50.0152] <tcampbell>
arai: correct. Thanks for the reminder.. I need to go bribe a sheriff 

[05:53:01.0511] <arai>
(the files there has some reference to the crate

[05:53:11.0809] <tcampbell>
oh.. hmm

[05:53:24.0845] <arai>
I mean, just README.md

[05:53:43.0043] <tcampbell>
ah, okay. I was thinking of doing the test removal tomorrow once this sticks

[05:53:43.0835] <arai>
not something used while building

[05:57:41.0944] <tcampbell>
Aryx what is the best way to manually land patches that are not supported by lando? Can I ask you to do push directly tomorrow? It is two directories to remove, but about 10k files in them.

[05:57:59.0218] <tcampbell>
https://bugzilla.mozilla.org/show_bug.cgi?id=1642708#c10

[05:58:53.0431] <tcampbell>
(tests are auto-generated but bit-rotting. We can regenerate them in future)

[06:05:57.0996] <RyanVM>
maybe the simplest option is to push the entire stack to Try

[06:06:16.0761] <RyanVM>
then they can be pulled from there and rebased onto autoland

[06:07:31.0707] <Yoric>
arai: Ok, thanks!

[06:07:48.0485] <Yoric>
tcampbell: Sorry, for some  reason, the patch didn't show up as r? me.

[06:09:09.0622] <tcampbell>
ah, no worries

[06:12:41.0400] <RyanVM>
tcampbell: does ^ work for you?

[06:14:02.0064] <tcampbell>
The mega-patch can be landed separately, so I'll land the normal code on autoland today and then can make a try link tomorrow for the test-removal  patch

[06:14:09.0088] <tcampbell>
 * RyanVM: The mega-patch can be landed separately, so I'll land the normal code on autoland today and then can make a try link tomorrow for the test-removal  patch

[06:15:48.0951] <tcampbell>
yikes.. auto-bounced for missing WebIDL review in vendored rust

[06:15:58.0648] <tcampbell>
that seems wrong

[06:20:15.0380] <froydnj>
probably matches `*.webidl`, which I believe the binast crates had?

[06:22:30.0483] <tcampbell>
It uses `weedle` with is an IDL parser, so it has test cases

[06:23:04.0560] <froydnj>
guess we should change the check to exclude `third_party/rust` or somesuch

[06:23:11.0546] <tcampbell>
This is a rare case, so I think the rule still makes sesnse as is

[06:25:43.0276] <mccr8>
tcampbell: I can r+ it if you want

[06:27:37.0893] <mccr8>
ah great emilio got it already

[07:23:29.0819] <jorendorff>
factorio is ok, but have y'all tried Lean?

[07:25:55.0341] <jorendorff>
L∃∀N - addictive, super-puzzly text adventure game by Microsoft Research
http://leanprover.github.io/

[07:26:42.0508] <jorendorff>
Play here, and I'm so sorry http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/

[07:28:07.0405] <iain>
I did play that!

[09:02:58.0709] <jandem>
regexp meeting now

[09:04:56.0197] <mgaudet>
(Will join after group photo) 

[09:05:16.0810] <mgaudet>
While I wait for this to happen, Q: `evaluate("code throws a SyntaxError", {global: newGlobal()})` throws an what I am assume is a wrapper, which doesn't return true for `instanceof SyntaxError`; is there a recommended way of validating what we get is infact a syntax error, or should I just regexp match the `.message` property? 


[09:06:31.0088] <jandem>
`assertEq(ex.name, "SyntaxError")`?

[09:07:26.0441] <mgaudet>
aha! I was doing getOwnPropertyNames to see what was there, but I forgot that the name would likely be on the proto. 

[09:07:47.0246] <yulia>
same in the group photo

[09:07:48.0046] <mgaudet>
that's awesome. Thanks Jandem!)

[09:08:07.0300] <jandem>
:)

[09:37:36.0524] <denispal>
what does it mean if there are live runtimes during JS_ShutDown ?  Can they still be used afterwards?

[09:38:17.0068] <Waldo>
denispal: You probably leaked a window somehow.  You can't use those live runtimes, no.

[09:38:52.0799] <denispal>
Waldo: is this here just for safe measure then?  https://searchfox.org/mozilla-central/source/js/src/vm/Initialization.cpp#273

[09:40:38.0446] <Waldo>
denispal: I think so, yes.  I don't see any other reason for it.

[09:42:38.0237] <denispal>
Waldo: ok, thank you

[09:52:13.0120] <yulia>
maybe i missed it, are the slides online anywhere?

[09:52:38.0313] <jorendorff>
missed what?

[09:53:29.0400] <yulia>
slides for the discussion about the parserAtom refactor

[09:53:59.0461] <iain>
djvj: Post your slides when you have the chance?

[09:54:12.0994] <iain>
(I don't think they are currently posted)

[09:54:18.0594] <yulia>
ok

[09:56:14.0769] <djvj>
iain: sorry will do

[09:59:15.0509] <yulia>
thanks djvj! i wasn't sure if it was already online -- i wanted to take a look at some of the slides again

[10:00:41.0866] <djvj>
yulia: iain https://docs.google.com/presentation/d/1n69hc9XMgEjlULBFf65C8m70oedP0vlr4drja58hhG8/edit?usp=sharing

[10:11:14.0032] <RyanVM>
caroline: did you mean to reset all the flags in bug 1645818?

[10:11:15.0603] <botzilla>
https://bugzil.la/1645818 — NEW (nobody) — Assertion failure: lastStub->isFallback(), at jit/BaselineIC.h:616 with shell-only rateMyCacheIR function

[10:12:03.0978] <caroline>
No I did not, sorry about that. Dont know how I did that.

[10:12:15.0801] <caroline>
 * RyanVM:  No I did not, sorry about that. Dont know how I did that.

[10:12:21.0157] <RyanVM>
mid-air?

[10:12:43.0134] <jandem>
yeah I've had mid-airing do that :/

[10:13:11.0069] <RyanVM>
yeah, BMO warns about that

[10:13:51.0832] <jandem>
hm does it always? I had it reset flags last week without me "forcing" it

[10:13:58.0052] <sfink>
I think the label "submit anyway" or whatever it is, is not nearly scary enough. "Submit anyway and blow away everything that everyone else did", maybe? (Even better, enumerate what will change.)

[10:14:12.0476] <RyanVM>
jandem: that sounds like a bug

[10:16:27.0485] <sfink>
I guess the fancypants version would be to merge the changes (or at least, report whether any overlap and if not just apply what you changed). But that gets messy fast.

[10:16:31.0578] <jandem>
(I think it was a "collision" with one of the relman bots)

[10:25:37.0092] <sfink>
iain: I had a couple of minor questions about irregexp. Should I post them to this channel, or stick them in a document, or stick them where the sun don't shine, or what would you prefer?

[10:26:01.0106] <sfink>
the big thing I learned: it's "*IR* regexp", not "irregular expression compiler" as I had thought

[10:27:12.0143] <iain>
sfink: Here works!

[10:27:32.0369] <sfink>
ok. Probably not until after the fuzzing discussion.

[10:45:15.0556] <yulia>
jorendorff's facial expression was pretty priceless there

[10:45:54.0251] <yulia>
re the "the api is called 'eval'"

[10:46:03.0361] <yulia>
 * re "the api is called 'eval'"

[10:46:24.0721] <Waldo>
I was thinking, it really is not actually easy to generate valid bytecode other than from a valid string...

[10:46:46.0258] <Waldo>
I don't really even think we have a definition of "valid".

[10:51:27.0192] <jandem>
it's a bit better now that IonBuilder is no longer a control flow decompiler, but yeah it's still Hard

[10:54:04.0694] <sfink>
tinderbox!

[10:54:44.0878] <jorendorff>
Waldo: we don't, but Opcodes.h now documents every rule i could think of

[10:55:15.0069] <jorendorff>
Waldo: it's a long list https://searchfox.org/mozilla-central/source/js/src/vm/Opcodes.h#41

[11:03:20.0638] <yulia>
factorio is a little delayed

[11:03:43.0821] <yulia>
we are still in the fuzzing call

[11:03:54.0112] <yulia>
i see evilpie is already in the game

[11:03:58.0240] <yulia>
_we are coming_

[11:08:20.0658] <yulia>
FACTORIOZEIT

[11:08:31.0151] <yulia>
🦾

[11:08:45.0100] <yulia>
 and social time in socialspider

[11:08:57.0808] <jorendorff>
haha someone is using my steam account on another computer

[11:09:03.0027] <yulia>
https://spatial.chat/s/socialspider

[11:09:12.0421] <jorendorff>
i didn't even buy factorio through steam, darn it

[11:09:20.0375] <Waldo>
jorendorff: You sound...steamed right now.

[11:09:28.0104] <nbp>
yulia: timeout for me: OT_TIMEOUT: Session.publish :: Could not publish in a reasonable amount of time

[11:09:32.0400] <yulia>
hm

[11:09:33.0072] <yulia>
ok

[11:09:36.0019] <yulia>
lets use zoom i. guses?

[11:09:38.0269] <yulia>
guess*

[11:10:13.0525] <yulia>
there is now a meeting link in the calendar

[11:15:50.0735] <sfink>
iain: dumb question time

[11:15:58.0837] <Waldo>
Nah, that's tomorrow?

[11:16:06.0824] <iain>
sfink: Go ahead

[11:16:10.0727] <sfink>
ok, dumb irregexp-specific question time

[11:16:14.0067] <Waldo>
/me needs to come up with some dumb questions

[11:16:16.0546] <sfink>
1. does v8 use exceptions? I assume not.

[11:16:36.0104] <iain>
V8 does not use exceptions

[11:16:51.0143] <sfink>
2. How far does your shim work get you to what SpiderNode was doing? As in, enough of a compatibility layer to run Node.

[11:16:54.0297] <jorendorff>
yulia: how do i log in

[11:17:16.0608] <sfink>
3. Are there any places where the v8 API felt significantly better or worse than JSAPI?

[11:17:16.0896] <iain>
My shim layer is exactly as thick as it needs to be to run irregexp, and not much thicker

[11:17:55.0712] <iain>
I don't know what's necessary to run node, but I think it would involve significantly more work

[11:18:02.0748] <sfink>
4. ugh, this came up when I was writing a patch a week ago, and I've lost it now. I found a place where it was copying the input string, and wondered if it had to. I'll need to dig it up.

[11:19:00.0518] <sfink>
oh, maybe JS::ExecuteRegExp

[11:19:09.0059] <iain>
V8 API feeling worse: they don't have a unified masm API. Instead you write your assembly-generation code once per platform

[11:19:38.0046] <iain>
Which maybe ekes out a few more cycles from tighter codegen

[11:19:44.0905] <iain>
At the expense of doing eight times as much work

[11:19:50.0070] <yulia>
anyone trying to get on factorio please join th zoom room!

[11:21:44.0211] <iain>
V8 API feeling better: I'm not entirely sure how I feel about V8's rooting API, but it does make code simpler to write

[11:23:41.0705] <sfink>
cool, thanks!

[11:24:04.0581] <iain>
(I'm still thinking about that question)

[11:25:59.0164] <iain>
It seemed like V8's objects are not allocated in typed arenas, so they might have more flexibility in defining new arbitrary GC things without much effort

[11:27:53.0729] <iain>
I noticed this while writing the shim for ByteArray: https://source.chromium.org/chromium/chromium/src/+/master:v8/src/heap/factory-base.cc;l=159?q=newbytearray&ss=chromium%2Fchromium%2Fsrc&originalUrl=https:%2F%2Fcs.chromium.org%2F

[11:28:53.0811] <iain>
Not an API thing, but I felt like we have stricter discipline in terms of static analysis

[11:29:17.0111] <iain>
I didn't see anything equivalent to our hazard analysis

[11:29:22.0792] <sfink>
right, yeah

[11:29:57.0635] <iain>
So there was some code that I rewrote to store handles instead of raw pointers so that our hazard analysis didn't complain

[11:31:04.0915] <iain>
I've spent some time wondering whether there's better cache locality for V8's root stack, compared to our Rooted<T>

[11:31:46.0509] <iain>
Although I guess in theory we could rewrite Rooted<T> to store roots on a side stack too

[11:32:28.0540] <iain>
And just adjust the high-water mark when constructing/destructing a Rooted

[11:32:38.0625] <sfink>
I'm really not sure. On the one hand "ooh! A linked list! Bad for caching!" On the other, one of the pointers is on the stack so should be warm already, and the other is the same address over and over.

[11:33:34.0783] <Waldo>
All the `Rooted` back pointers are into the stack anyway, no?

[11:33:39.0603] <iain>
There's a bit of an advantage for a separate root stack when tracing, because we only have to access the roots and not the entire C++ stack

[11:33:51.0637] <iain>
But I'm not sure how much it matters

[11:34:12.0823] <Waldo>
We could split up the root list into multiple root lists by type, if there's concern about the type-checking when marking the root list.

[11:34:29.0651] <sfink>
I mean, you can always make your own rooted vector and hand out handles to its contents.

[11:34:43.0647] <sfink>
they're already split up by type. So I lied, it's not a single address.

[11:35:22.0075] <Waldo>
That doesn't sound right to me...

[11:35:24.0185] <Waldo>
/me checks

[11:36:00.0507] <sfink>
https://searchfox.org/mozilla-central/source/js/public/RootingAPI.h#1074

[11:36:10.0890] <Waldo>
Oh hm, `this->stack = &roots[JS::MapTypeToRootKind<T>::kind]`

[11:36:33.0647] <sfink>
split up by "type" anyway. Root kind.

[11:37:36.0000] <sfink>
I mean, if we were able to jettison the hazard analysis because it isn't necessary, and have a nicer-to-use interface at the same time, that would be a good thing, right?

[11:37:47.0377] <sfink>
I feel like I should have some ironclad justification for why our setup is better

[11:37:55.0083] <sfink>
even if it's more work

[11:38:29.0845] <sfink>
I'm not going to make the argument that their scheme roots too much, because I think most GC is probably with an empty stack anyway

[11:38:47.0740] <Waldo>
Our setup doesn't require random allocations of bunches of roots, just one-off quick uses of stack space.

[11:39:08.0549] <Waldo>
And it's like three instructions to set/create a root.

[11:39:19.0282] <iain>
They allocate roots in the rough equivalent of a segmented vector

[11:39:22.0274] <Waldo>
Mostly acting on stack space.

[11:39:24.0708] <sfink>
but it's all amortized, right? If you're making a handle scope or whatever it's called at a high level, and then bump-allocate into it

[11:39:49.0022] <Waldo>
Amortized actual allocations are going to have higher constant factor than three instructions and a stack access.

[11:41:12.0479] <iain>
I don't think they're much more than three instructions

[11:41:33.0495] <iain>
Check that the current arena chunk isn't full, store a pointer, bump the current size

[11:41:44.0950] <sfink>
even with an efficiency argument, I just don't have a good sense for how much of a difference it makes.

[11:41:48.0482] <Waldo>
Anything that has to allocate is going to have a pretty big burst of instructions when you do have to allocate.

[11:41:57.0822] <Waldo>
Heap manipulation ain't cheap.

[11:42:06.0345] <iain>
They're not doing heap manipulation, though

[11:42:26.0103] <iain>
At least, not in the common case

[11:42:32.0431] <Waldo>
Not even to allocate new segments of the vector?  You can only bump-allocate so long until you have to.

[11:42:43.0833] <Waldo>
Yeah, "not in the common case" is a big concession.  :-)

[11:42:50.0650] <iain>
The vector has big segments

[11:43:16.0075] <sfink>
you have a branch, but well-predicted if the segments are large

[11:45:24.0109] <sfink>
I suppose it wouldn't be too hard to mock up a performance comparison. Make Rooted allocate into an arena or segmented vector. It'd have to crash on oom.

[11:45:43.0731] <iain>
(We should always be crashing on oom)

[11:45:57.0149] <sfink>
heh, that's a never-ending argument

[11:46:09.0887] <iain>
One of these days I will add the telemetry to end it

[11:46:21.0930] <jandem>
we're all rooting for you

[11:46:37.0512] <Waldo>
jandem: Not in this context.

[11:46:41.0649] <sfink>
I think our thousands of embedders who depend on being able to embed a non-crashing JS engine directly invalidate your argument

[11:46:45.0715] <sfink>
right, embedders?

[11:46:48.0513] <sfink>
embedders?

[11:46:50.0477] <sfink>
...

[11:47:50.0528] <sfink>
 * I think our thousands of embedders who depend on being able to embed a non-crashing JS engine invalidate your argument

[11:48:38.0452] <iain>
In terms of removing the hazard analysis, there's still a concern about somebody stashing away a handle beyond the lifetime of its HandleScope

[11:48:53.0284] <sfink>
right, I was just thinking through that part too

[11:48:54.0470] <iain>
I'm not sure how V8 avoids that issue, other than the classic approach of looking at the code really hard

[11:50:52.0735] <iain>
(It's possible that they do have static analyses and I just never tripped over them)

[11:52:48.0559] <jandem>
I've always preferred our linked-list-of-Rooted design but maybe just because I'm used to it

[11:53:19.0599] <iain>
Completely separate V8 API complaint: where we have `MOZ_ASSERT(a < b)`, they have `DCHECK_LT(a, b)` (and all of the other variations)

[11:53:56.0044] <iain>
Which doesn't seem like a great use of time 

[11:54:11.0838] <Waldo>
Hot take: C++ could give better tools for writing assertions so there's no need to do stupid macro things like that so that (probably) the values on each side of the comparison can be part of the assertion message.

[11:54:18.0815] <iain>
And the difference between LT and LE bit me a couple of times

[11:54:38.0920] <jandem>
yeah that seems less readable because everywhere else you'd use `a < b`

[11:54:59.0485] <Waldo>
If they wanted to be really cool they could do `DCHECK(a, <, b)`.  🙃

[11:55:28.0262] <iain>
Well they also have `CHECK` for `MOZ_RELEASE_ASSERT`

[11:55:47.0106] <iain>
So the true cool approach is `CHECK(D, a, <, b)`

[11:56:13.0215] <sfink>
totally different topic: a rather fascinating profile at https://profiler.firefox.com/public/95a32a9c513ff2400492b694b19a7ca0fb4c72d6/flame-graph/?globalTrackOrder=5-0-1-2-3-4&hiddenGlobalTracks=1-2-3&hiddenLocalTracksByPid=42626-0-2-3~42629-0&localTrackOrderByPid=42626-2-3-0-1~42628-0~42631-0~42630-0~42629-0-1~&range=4.9472_12.1251~5.0357_12.0532&thread=6&transforms=ff-550&v=4

[11:56:24.0220] <sfink>
this is a CSS lexer written in JS

[11:56:26.0964] <sfink>
used by devtools

[11:56:51.0570] <sfink>
I was looking at just the time in IsIdentStart

[11:57:08.0903] <jandem>
`with_LookupProperty`, bleh

[11:57:38.0911] <sfink>
much of which is in `IonGetNameIC::update`

[11:57:56.0644] <sfink>
I think from `gLexTable[ch]`, I guess?

[11:58:25.0141] <jandem>
this is probably the "environments chains are dumb in chrome code" issue

[11:58:36.0427] <jandem>
so we get these slow Name ops

[12:00:37.0330] <sfink>
bug 1644138

[12:00:38.0659] <botzilla>
https://bugzil.la/1644138 — NEW (nobody) — 2.5s content hangs caused by Inspector's `parseDeclarations`

[12:00:40.0318] <sfink>
(ouch)

[12:01:44.0354] <yulia>
iain: if you want you can join us in the zoom room

[12:01:46.0741] <yulia>
its on th calendar

[12:02:24.0595] <iain>
Oh, right, you're in zoom

[12:02:37.0548] <iain>
I'm not sure my laptop will be able to handle zoom and factorio at the same time

[12:02:55.0946] <iain>
Let's find out

[12:04:46.0442] <sfink>
jandem: is there an easy hackaround? some way to store things so that the lookup can be optimized?

[12:06:01.0107] <jandem>
rely less on global properties, a bit annoying because it also affects things like `undefined`

[12:07:55.0180] <sfink>
ugh

[12:08:13.0681] <sfink>
could IIFE the whole file, I suppose...

[12:08:26.0947] <sfink>
lunchtime for me

[12:08:27.0865] <sfink>
thanks!

[12:08:52.0207] <jorendorff>
`var undefined;` :-|

[12:09:00.0495] <sfink>
yep

[13:11:55.0304] <loganfsmyth>
Should https://searchfox.org/mozilla-central/rev/eef39502e08bcd3c40573c65a6827828dce4a032/js/src/vm/ObjectGroup.cpp#657 have a `ReportOutOfMemory(cx);` call? I don't see `new_` setting it

[13:13:00.0515] <jorendorff>
loganfsmyth: I think you're right, it should have one!

[13:13:03.0960] <jorendorff>
please file

[13:13:35.0044] <Waldo>
It seems like it should be fairly simple to verify that with an oomTest -- does look skeevy for sure.

[13:13:59.0527] <Waldo>
The MallocProvider setup is so terrible.  :-(

[13:15:49.0680] <loganfsmyth>
https://bugzilla.mozilla.org/show_bug.cgi?id=1646506

[13:33:13.0468] <tcampbell>
I think it hits https://searchfox.org/mozilla-central/source/js/src/vm/MallocProvider.h#114

[13:33:39.0170] <tcampbell>
but what Waldo said, is attrocious

[13:34:04.0906] <jorendorff>
ok, now i'm convinced of _that_

[13:34:20.0070] <jorendorff>
i.e. that the current code is correct

[13:34:27.0525] <Waldo>
Oh hrm, I stopped at `pod_arena_malloc` and didn't look at its body to see it reporting.  😐️

[13:36:05.0963] <tcampbell>
the real way to set your foot blown off is to use `Vector`, because if js::Vector is visible you are fine, but if only mozilla::Vector is visible you are not

[13:36:12.0165] <tcampbell>
¯\_(ツ)_/¯

[13:36:30.0296] <tcampbell>
 * the real way to get your foot blown off is to use `Vector`, because if js::Vector is visible you are fine, but if only mozilla::Vector is visible you are not

[13:37:03.0226] <tcampbell>
We really need a lint for this that just says sorry

[13:38:08.0965] <Waldo>
The interface of the two does differ in how you construct one, so you can just check down the construction action to verify, usually.

[13:38:23.0180] <Waldo>
`js::Vector` will take a `cx`.  `mozilla::Vector` will not.

[13:38:36.0147] <jorendorff>
 "j u s t"

[13:38:48.0869] <Waldo>
¯\_(ツ)_/¯

[13:39:53.0977] <tcampbell>
Pft.. that assumes I look at the constructor

[13:46:15.0103] <Waldo>
Just look at the declaration of the local variable, or the constructor of the class that contains it.  Not too hard.

[13:48:33.0405] <loganfsmyth>
ahh nice, so I should close that then

[13:53:56.0500] <iain>
sfink: The extra copy you were asking about is here? https://searchfox.org/mozilla-central/source/js/src/vm/RegExpObject.cpp#1266-1269

[13:54:10.0673] <iain>
I have no idea why we're doing that; I didn't touch that code

[13:54:40.0576] <sfink>
yes. But now that I trace that back, it seems unavoidable.

[13:54:56.0692] <sfink>
as in, the data is coming from ns*Strings

[13:55:04.0798] <sfink>
and don't regexps have a `.input` field or something?

[13:55:13.0987] <sfink>
matches, I mean

[13:55:36.0454] <iain>
Yeah

[13:56:01.0076] <sfink>
it could make an ExternalString, but then you would have to keep the owner alive somehow

[14:04:01.0837] <Waldo>
Munging up an external string for this is 1) a bit of trouble, 2) only rarely actually helpful anyway.

[14:04:49.0915] <sfink>
agreed. Sorry, I wasn't implying that we should do that. The lifetime issue is enough to say that we shouldn't.

[14:05:28.0372] <Waldo>
You almost have to wonder, is there some way we could recognize/incorporate pointers to string data _into our GC system_ so that you could have `Rooted<StringCharacters>` or something, that would be rewritten to the new thing by the GC if necessary?

[14:05:42.0749] <Waldo>
Yeah, I didn't think you were suggesting it was a good idea.  :-)

[14:07:03.0267] <sfink>
we've looked into doing that. But the things that want to access the char data tend to be passing the data pointers through several layers. `AutoStableStringChars` is the compromise.

[14:07:13.0379] <Waldo>
At least for strings, there _is_ always going to be a new pointer you could substitute in.  Typed memory doesn't have the same convenience, because of detaching.  You could rewrite the pointer if it's just for GC, but detaching goes beyond that and would require fresh null-checks or something, if a non-null pointer were rewritten to null or so.

[14:07:56.0100] <Waldo>
I hope I am not the only person around who thinks of `AutoStableStringChars` often in terms of its appropriate initialism.

[14:08:55.0600] <sfink>
It's an RAII class, so I think it's appropriate to initial it `ASSCII`.

[14:09:29.0282] <Waldo>
Universal Text Fortress, 8th ed.

[15:04:47.0826] <jorendorff>
loganfsmyth: ping

[15:10:01.0518] <tcampbell>
mozilla-unified, y u no update?!

[15:55:39.0840] <loganfsmyth>
jorendorff: what's up? Unfortunately have to run in 5 minutes

[15:57:41.0452] <jorendorff>
never mind -- it was a question about bug 1646017, but I figured it out and have forgotten what it was

[15:57:42.0928] <botzilla>
https://bugzil.la/1646017 — ASSIGNED (loganfsmyth) — Perma JavaScript error: file:///builds/worker/workspace/build/tests/jsreftest/tests/js/src/tests/shell.js, line 127: TypeError: Assertion failed: got "false", expected "true": [stack: ]

[15:59:11.0562] <loganfsmyth>
great

[16:15:04.0057] <jorendorff>
oh, right, it was actually about whether it might be related to bug 1646009, but it isn't

[16:15:05.0603] <botzilla>
https://bugzil.la/1646009 — ASSIGNED (jorendorff) — several Promise.any related test failures when Gecko 79 merges to Beta on 2020-06-29

[16:26:59.0330] <Waldo>
jorendorff: Stamped with caveat.


2020-06-18
[01:11:54.0915] <decoder>
mgaudet: yulia : so from what I can tell, looking at the private fields syntax, I have to say, it's a really bad proposal if I may say so

[01:12:39.0384] <decoder>
it adds more stuff to the language that makes things contextual syntax errors. I cannot simply allow "#" in identifiers, because it seems to be only valid syntax inside classes, is that correct?

[01:16:37.0607] <decoder>
imho a "private" keyword would be so much cleaner

[01:20:41.0006] <yulia>
decoder: please let me know what you notice. I will compare it with the ongoing discussions and if we have new feedback to add i will report it back to committee

[01:21:17.0415] <decoder>
thanks. I havent been able to try out the exact behavior yet, have to wait for mgaudet 's patches

[01:21:57.0627] <decoder>
from what I could grasp here: https://v8.dev/features/class-fields

[01:22:07.0117] <decoder>
any use of # in property names outside a class is a SyntaxError

[01:22:45.0360] <decoder>
this kind of pattern is similar to super() which is already a nightmare. it makes parsing the language really complicated, because you need arbitrary context to decide over syntax errors.

[01:23:30.0754] <yulia>
yeah thats right

[01:23:46.0849] <yulia>
it will be restricted to classes, i don't think we will be able to change that

[01:24:04.0610] <decoder>
yea. I guess it will be nearly impossible to implement this in LangFuzz

[01:24:36.0859] <decoder>
essentially you would have to drag an "InClass" throughout the cover grammar

[01:28:27.0229] <Ms2ger [~half-time dedication]>
A little late to come up with that, isn't it?

[01:28:53.0054] <decoder>
Ms2ger [~half-time dedication]: I received the mail a week ago, to look at this feature and fuzz it.

[01:31:14.0219] <Ms2ger [~half-time dedication]>
https://github.com/tc39/proposal-class-fields/blob/master/PRIVATE_SYNTAX_FAQ.md#why-arent-declarations-private-x dates back to December 2017

[05:15:16.0439] <mgaudet>
decoder: Does the cover grammar of langfuzz need to be 100% accurate? or is it just an impediment to fuzzing speed if it's inaccurate, as you end up generating more syntax error samples? 

[05:27:45.0520] <decoder>
mgaudet: if the syntax error rate gets too high (and allowing # in identifiers would cause langfuzz to rewrite existing identifiers potentially to some with #), then most testcases produced will be useless as they wont even parse

[05:29:22.0839] <decoder>
I could try to come up with a hack that solves this outside the grammar, by not rewriting identifiers to private fields at the identifier rewriting stage, but it's quite complicated 

[05:29:57.0329] <decoder>
in any case, if this is not done properly, it has the potential to disrupt all JS fuzzing :/

[05:30:43.0041] <mgaudet>
Right; that was maybe the larger question I was asking. 

[05:31:03.0973] <decoder>
Ms2ger [~half-time dedication]: i am not sure what you are trying to tell me. we (the fuzzing team) look at features when people reach out to us. it is impossible for us to track and review every single proposal in W3C or TC39.

[05:32:22.0317] <Ms2ger [~half-time dedication]>
decoder: your representatives in TC39 have been in the room each of the dozen times this syntax has been discussed... I can't tell you why they didn't ask for your feedback then

[05:33:02.0880] <decoder>
I dont think I'm that important when it comes to TC39 decisions ;) 

[05:33:25.0575] <yulia>
Ms2ger [~half-time dedication]: i know that the private fields discussion has been a difficult one

[05:34:17.0232] <yulia>
When it began, we were in a period of transition. We are catching up. But, arguably stage 3 is about implementer feedback, and fuzzing is part of our implementation process

[05:34:47.0296] <yulia>
at the moment, the only fully independent implementation that is being done by a separate team is ours, and I want to make sure that the team can speak freely

[05:35:52.0812] <yulia>
This isn't tc39, so I would like to make sure that people feel like they can raise their frustrations. Something significant might come up and I will take that to committee if that is the case. Otherwise, we are just wrapping our heads around the proposal  and understanding it as we go. Some things might be raised that might have been discussed before, some might be new :)

[05:38:52.0303] <Ms2ger [~half-time dedication]>
yulia: sure, and I also hope you understand that it's frustrating when people bring up the same question over and over again - even if it's new to them

[05:40:33.0092] <yulia>
Ms2ger [~half-time dedication]: yes i can imagine it is frustrating. However since this is not the decision making space, people need to be able to work through these things freely. 

I think it was great for you to bring up the issue as a way of giving context. That is important and appreciateed. 

[05:41:33.0606] <decoder>
mgaudet: so both with private fields and methods, am I right to assume that it "coarsely" boils down to "identifiers with a # prefix are only allowed inside classes" ? or can you in some ways define things involving those identifiers outside a class, that would not be a syntax error?

[05:42:47.0610] <mgaudet>
Well -- there's the silly `class A { #x=10; es(s) { eval(s); } }; a = new A(); a.es("this.#x");` 

[05:44:10.0617] <mgaudet>
AIUI tho, we need to be within class context when parsing private identifiers; that one works because the eval is logically within the class context; 

[05:47:43.0340] <jorendorff>
decoder: how does langfuzz currently avoid emitting `return` statements outside of functions, or `continue` statements outside of loops?

[05:48:50.0568] <decoder>
mgaudet: yea, thats inside a string, so LangFuzz wouldnt touch that

[05:50:44.0281] <decoder>
jorendorff: it does not and LangFuzz has a certain syntax error rate already (return and continue are contributors, but it doesnt happen too often). `super` is another offender (and another example why JS syntax is bad). some of the errors are fixed at runtime. for private fields, it might be possible to do that too, it's just bound to happen a lot more often I guess

[06:51:36.0725] <jorendorff>
decoder: ok, LangFuzz uses an antlr grammar, right? And the fuzzer is not public?

[06:52:25.0847] <decoder>
jorendorff: correct. and I already have a lot of hackery in place to minimize issues with syntax errors in JS

[06:57:29.0637] <jorendorff>
decoder: any chance I could get access to the repository? apologies in advance, since I'm sure I've already asked this

[06:57:46.0148] <decoder>
jorendorff: of course, ill pm you :)

[06:57:53.0737] <jorendorff>
Thanks, Christian

[07:40:41.0150] <mgaudet>
(Ok, I'm actually starting to get sold on the idea of hanging out in hubs. It works better than I expected!. Hanging out in the cafe right now with a few people)

[09:01:20.0522] <jonco>
sfink: ping :)

[09:06:47.0219] <Waldo>
FWIW I'm mostly just lurking in the GC ubench discussion, I don't do enough GC stuff to _know_ I will benefit from something discussed here -- but maybe I might!

[09:10:52.0186] <tcampbell>
  iain you are unmuted

[09:12:05.0528] <yulia>
ack i forgot

[09:50:29.0212] <sfink>
now everybody needs to quickly brainstorm their dumbest questions

[09:50:37.0951] <yulia>
ugh sorry dumb question again sfink do you have that document online somewhere?

[09:50:44.0381] <jorendorff>
haha

[09:50:53.0934] <jorendorff>
happy coincidence there

[09:50:54.0277] <yulia>
i had a hard time focusing because the keynote made me really excited 

[09:50:55.0595] <sfink>
I'll put it up

[09:51:01.0981] <jorendorff>
i am trying to think of dumber questions

[09:51:31.0851] <yulia>
I would like to learn how we "upgrade" between tiers of the jit...

[09:51:37.0784] <yulia>
but i think thats because i don't know anything about that area

[09:51:43.0486] <yulia>
and maybe there is documentation somewhere

[09:52:10.0478] <tcampbell>
only if by "documentation", you mean "assembly code"

[09:52:12.0876] <sfink>
no, that's a great question

[09:52:23.0891] <sfink>
but you're cheating by introducing it earlier

[09:52:31.0933] <yulia>
ah sorry

[09:52:35.0189] <sfink>
people won't have to answer it on the spot :-)

[09:52:35.0244] <yulia>
i will think silently

[09:55:25.0814] <sfink>
yulia: I threw the doc into my dumping ground. https://hg.sr.ht/~sfink/sfink-tools/raw/doc/gc-ubench.org?rev=default

[09:55:29.0100] <yulia>
ok, dumb question that is appropriate for this chat

[09:55:38.0489] <yulia>
who wants to play factorio while listening to ET talks?

[09:55:54.0278] <yulia>
because nbp suggested it and it sounds fun?

[10:21:37.0385] <sfink>
the answer to yulia's question is "an elephant". I feel like everyone is taking a turn at describing their own favorite part of the elephant.

[10:28:56.0871] <yulia>
haha

[10:29:14.0145] <jorendorff>
very very true

[10:30:19.0273] <yulia>
i summarized that as "There is a counter. When the counter reaches a certain point we will run the next tier. When we do this, we first map the values from the lower level tier to the higher level tier’s data structure. Each tier collects certain types of data. When we make the jump, we use a pointer to point to the compiled code."

[10:30:23.0073] <yulia>
Super simplified

[10:30:34.0611] <yulia>
i will look into the code to get a better idea

[10:30:39.0963] <jorendorff>
yep

[10:31:04.0623] <sfink>
djvj: you may need to ask that through interpretive dance

[10:31:08.0321] <sfink>
oh, it got through that time

[10:31:29.0739] <Waldo>
nbp: It's an aquarium bubbling, surprised it came through, honestly.

[10:31:56.0863] <nbp>
Waldo: definitely sounds like a boat.

[10:33:13.0407] <jorendorff>
we forgot to time-box

[10:33:41.0352] <sfink>
yeah, true

[10:34:06.0424] <yulia>
"Using registers is important, how significant is it if you point to a register and use as many registers as will fit in a cache line

- There is one instruction causing problems. When we call with variable arguments with funApply. We need enough registers to make a copy of the vector of arguments. 
- We could use some trickery to have a frame pointer, but we will be spilling from it all the time. This will be a performance loss for this instruction. Not sure about others
- Coverage of wasm might also be an issue."

[10:39:17.0177] <iain>
yulia: "coverage of wasm" -> "coverage of masm"

[10:40:11.0154] <jorendorff>
i don't understand the first sentence, maybe i'm the only one

[10:40:17.0352] <yulia>
whoops

[10:40:24.0556] <yulia>
 * "Using registers is important, how significant is it if you point to a register and use as many registers as will fit in a cache line
- There is one instruction causing problems. When we call with variable arguments with funApply. We need enough registers to make a copy of the vector of arguments.
- We could use some trickery to have a frame pointer, but we will be spilling from it all the time. This will be a performance loss for this instruction. Not sure about others
- Coverage of masm might also be an issue."

[10:40:28.0270] <yulia>
jorendorff: i actually don't either

[10:40:29.0597] <jorendorff>
I think the question from steve was something like "can I have a register just for allocation please?"

[10:40:32.0055] <yulia>
i didn't hear the question fully

[10:40:38.0304] <yulia>
ah thats better

[10:40:49.0185] <yulia>
 * "can I have a register just for allocation please?
- There is one instruction causing problems. When we call with variable arguments with funApply. We need enough registers to make a copy of the vector of arguments.
- We could use some trickery to have a frame pointer, but we will be spilling from it all the time. This will be a performance loss for this instruction. Not sure about others
- Coverage of masm might also be an issue."

[10:41:00.0220] <sfink>
no, it's more like "we don't have enough registers. Let's use a cache line that will always be in L1 cache. Does it really cost us all that much performance?"

[10:41:21.0439] <sfink>
sorry, "Let's use a cache line as an extension set of registers."

[10:41:33.0966] <jorendorff>
ok got it

[10:41:55.0137] <iain>
I think the answer is that do that, and we call that cache line the stack

[10:42:09.0607] <nbp>
sfink: at one point I was wondering whether we could use xmm registers as stashing space.

[10:42:17.0341] <iain>
 * I think the answer is that we do that, and we call that cache line the stack

[10:42:17.0951] <nbp>
(not for this issue)

[10:43:03.0819] <sfink>
nbp: good idea, I hadn't considered that

[10:44:06.0544] <yulia>
 * "Let's use a cache line as an extension set of registers.
- There is one instruction causing problems. When we call with variable arguments with funApply. We need enough registers to make a copy of the vector of arguments.
- We could use some trickery to have a frame pointer, but we will be spilling from it all the time. This will be a performance loss for this instruction. Not sure about others
- Coverage of masm might also be an issue."

[10:45:00.0957] <iain>
Using L1 is slow enough relative to a real register that you really just want to use your "extra" registers as a holding area for values that you're not currently working with, and do all your computation in real registers

[10:45:29.0603] <sfink>
iain: yeah, I'm not quite grasping what the practical difference between stack and magic cache line is.

[10:46:01.0241] <sfink>
right, and that's how th stack is used

[10:46:05.0683] <iain>
My point is that there isn't one, and pushing/popping values to the stack is the optimized version of your suggestion

[10:46:11.0147] <sfink>
 * right, and that's how the stack is used

[10:46:18.0701] <iain>
So we're kind of already doing the thing

[10:46:21.0772] <sfink>
right, I understand

[10:47:06.0672] <yulia>
sorry behind on notes:

[10:47:08.0970] <yulia>
"Why do we still have support for typedObjects?

For wasm there is a plan to implement them still (from our side) — lets look at what can be changed to make it better.
"

[10:47:46.0813] <yulia>
"what is Cell<somethingSomething>" -- I completely missed this

[10:48:03.0789] <jorendorff>
`CeellHeaderWithTenuredGCPointer`

[10:48:06.0233] <jorendorff>
 * `CellHeaderWithTenuredGCPointer`

[10:48:07.0106] <sfink>
CellHeaderWithTenuredGCPointer

[10:48:26.0245] <sfink>
there's also CellHeaderWithNonGCPointer, CellHeaderWithLengthAndFlags, CellHeaderWithCodePtr

[10:48:38.0147] <yulia>
 * "what is CellHeaderWithTenuredGCPointer
- The reason we have this is mostly for nursery stuff
- Makes it more explicit how it is used
"

[10:49:29.0532] <yulia>
 * "what is CellHeaderWithTenuredGCPointer
- The reason we have this is mostly for nursery stuff
- Makes it more explicit how it is used
- information about what kind of thing this is is stored before this cell (was different before)
"

[10:50:13.0101] <yulia>
i didnt quite get "what kind of nursury stuff"

[10:51:04.0758] <jorendorff>
ok, we have to put this in a google doc next timee

[10:51:06.0401] <jorendorff>
 * ok, we have to put this in a google doc next time

[10:51:10.0263] <jorendorff>
so it's not just you taking notes

[10:51:45.0139] <iain>
"The GC is hiding information in the first pointer of each object. CellHeaderWithTenuredPointer is our way of showing that it is happening, instead of doing it secretly"

[10:52:01.0332] <yulia>
https://docs.google.com/document/d/1mWmgl_uJY5SqGjwe9tPWyCSD9eaaul6yNkUkq25PpqU/edit?usp=sharing

[10:52:05.0548] <sfink>
we store a bit there temporarily while moving stuff out of the nursery. Which means that the interpretation of that first word changes, and technically we were violating the C++ object model by accessing it as different things over its lifetime

[10:52:16.0695] <yulia>
 * "what is CellHeaderWithTenuredGCPointer
- The reason we have this is mostly for nursery stuff
- The GC is hiding information in the first pointer of each object. CellHeaderWithTenuredPointer is our way of showing that it is happening, instead of doing it secretly
- Makes it more explicit how it is used
- information about what kind of thing this is is stored before this cell (was different before)
"

[10:52:21.0074] <jorendorff>
I think what was said is ,Currently the only user of this stuff is moving GC, where it indicates "the data you're looking for has been moved"

[10:52:51.0951] <yulia>
 * i didnt quite get "what kind of nursery stuff"

[10:53:01.0767] <jorendorff>
(From the nursery to the tenured heap is the only time we ever move GC things)

[10:53:16.0124] <sfink>
we move stuff during compaction too

[10:53:21.0934] <yulia>
idk if that notes doc will be useful now

[10:53:30.0736] <jorendorff>
drio

[10:53:33.0614] <jorendorff>
 * derp right

[10:53:36.0336] <yulia>
but if a new topic comes up i will do that there

[10:53:41.0130] <sfink>
"any invariant you come up, with violate somewhere"

[10:53:53.0631] <sfink>
 * "any invariant you come up, we violate somewhere"

[10:56:36.0012] <sdetar>
We should have meetings with the title "Stupid Questions" more often.

[10:59:58.0734] <sfink>
 * "any invariant you come up with, we violate somewhere"

[11:01:56.0899] <yulia>
yes

[11:01:58.0581] <yulia>
omg

[11:02:00.0158] <yulia>
this is awesome

[11:03:35.0670] <mgaudet>
had to run, but yes, that was great. 

[11:03:59.0785] <yulia>
stupid questions monthly?

[11:04:03.0783] <yulia>
could we do that?

[11:07:03.0698] <sfink>
+1. And we could have cake. And jorendorff could host it.

[11:08:24.0079] <yulia>
Im ready for ET talks

[11:09:06.0607] <sfink>
(we used to have a meeting called "cake & JS" that jorendorff put together. It didn't live very long. It's possible that "stupid questions" would be a more effective draw than virtual cake.)

[11:10:37.0300] <jorendorff>
well ... monthly would be a much better pace, maybe quarterly is better still

[11:11:00.0212] <yulia>
quarterly would also be good

[11:14:04.0304] <Waldo>
Hrm, lightning talks joining is being whack.

[11:14:50.0983] <Waldo>
Guess I can switch to airmo.

[11:17:00.0281] <yulia>
i am having pretty bad connectionn issues

[11:57:44.0165] <djvj>
> <@sfink:mozilla.org> +1. And we could have cake. And jorendorff could host it.

lol, sly.

[12:09:22.0694] <Waldo>
If we had cake, we could have cake and a host, if we had a host.

[12:10:29.0311] <sdetar>
I would be happy to host 

[12:10:53.0012] <yulia>
like... actual cake?

[12:11:01.0885] <Waldo>
Dream big

[12:11:06.0797] <jorendorff>
I would gladly bake a cake for me once a quarter

[12:11:35.0841] <Waldo>
I would gladly go to a discussion tomorrow, for a cake today.

[12:11:59.0579] <yulia>
so, we are going to have a cake off

[12:12:00.0677] <mgaudet>
(maybe we should see about expensing treats for that) 

[12:12:04.0131] <mgaudet>
:P

[12:12:15.0464] <mgaudet>
Down that road lies danger :P 

[12:12:29.0151] <jorendorff>
yes, I am here to make your cake look good

[12:13:08.0502] <Waldo>
cakewrecks!

[12:18:31.0482] <iain>
Question from fxr: "I have one question about SpiderMonkey. When a JSContext is destroyed does it always call all destructors of associated native objects or is there any instance were those destructors won't be called? I'm researching an issue where WebGLContext destructor is not released (so some graphics resources are leaked). In some pages the destructor is called once the page gets torn down and then GCd but not on others"

[12:19:15.0239] <jorendorff>
GC folks can take it but the question is a little confused

[12:22:10.0280] <sfink>
I don't know the answer, but I suspect these sorts of things are more likely to be rooted in the CC graph. The GC attempts to clear everything out, but I think there are cases where we still have roots from Gecko and so there's no valid finalization order we could pick. mccr8 ? ^

[12:26:53.0197] <Waldo>
`JSContext` doesn't actually pertain to GC really, does it?  If the entire runtime is destroyed, that ought run the finalizers on everything (...I think?), but just destroying a context isn't guaranteed to do anything GC-related, I thought.

[12:27:30.0680] <jorendorff>
iain: Also, we have tools to answer the question "what is keeping X object alive?"

[12:28:03.0293] <jorendorff>
that's what all the ubinode stuff is for, nick fitzgerald implemented a dominator tree algorithm on the heap graph

[12:28:32.0134] <sfink>
Oh, I was ignoring the "JSContext is destroyed" part, since the last part of the question seemed to specify page navigation.

[12:28:54.0634] <iain>
jorendorff: How do we use those tools?

[12:28:57.0339] <ptomato>
jorendorff: is there any link on how to use that? I would find it very useful

[12:29:05.0812] <sfink>
or closing a tab, perhaps

[12:29:08.0146] <jorendorff>
I don't know

[12:29:48.0132] <sfink>
in the devtools, there's a Memory tool

[12:29:49.0641] <jorendorff>
the code is in devtools/shared/heapsnapshot

[12:30:04.0427] <sfink>
I believe that's where the ubi node stuff is surfaced. You may have to enable it separately.

[12:30:39.0921] <sfink>
for embedding, there's dumpHeap(). And then maybe mccr8's heap walking tools.

[12:31:02.0338] <sfink>
alternatively, there's `findPath()` in the shell

[12:31:06.0820] <jorendorff>
sfink: When we destroy a JSContext, do we close out the whole heap and do a final sweep of it?

[12:31:16.0912] <sfink>
and `shortestPaths`

[12:31:49.0374] <sfink>
jorendorff: we do. Or try to. But if there's still stuff being held onto by Gecko roots, I think we throw our hands up in despair.

[12:31:52.0063] <jorendorff>
paths is not usually what you want

[12:32:36.0714] <jorendorff>
you want to know if there is an edge common to all paths

[12:33:08.0979] <sfink>
`shortestPaths` should get that, no? It uses retaining paths. Though it appears you need to give it a start. Hm.

[12:33:18.0981] <sfink>
(I've never used either of those in practice.)

[12:34:03.0063] <sfink>
why does it need a start? Doesn't ubinode stuff know what the roots are?

[12:34:04.0646] <jorendorff>
I don't know that either

[12:37:37.0968] <sfink>
I'm curious, so I'll put it down on my list of things to look into (a `shortestPaths` that provides its own root). But I don't have a great track record of getting to things on my todo list.

[12:38:02.0734] <sfink>
/me lunches

[12:38:11.0209] <tcampbell>
ah yes, TODON'T lists

[12:48:06.0068] <yulia>
excellent work everyone.

[12:48:12.0014] <yulia>
its beautiful

[12:49:53.0327] <mccr8>
Yeah, for WebGL-ish leaks the CC logs are going to be what you want to look at first, as the leaks are probably going through DOM refcounted stuff.

[12:50:09.0043] <mccr8>
ptomato: There's some documentation on using GC/CC logs for investigating a leak here: https://developer.mozilla.org/en-US/docs/Mozilla/Performance/DMD/Heap_Scan_Mode

[12:50:17.0831] <mccr8>
You can ignore the stuff about DMD and just do the rest...

[12:50:28.0022] <mccr8>
Emilio also wrote a blog post about some related stuff not too long ago.

[12:50:58.0317] <ptomato>
thanks!

[12:55:51.0680] <tcampbell>
mgaudet: is that patch supposed to be in my review queue?

[12:55:55.0766] <mgaudet>
jorendorff / tcampbell You both had some quibbles here in this patch https://phabricator.services.mozilla.com/D77934#inline-460857 -- can you clarify a bit what you meant? 

[12:56:26.0271] <mgaudet>
tcampbell: it's not been updated; working on that, but have question. See linked comment above^ (I am assuming this is what you're talking about) 

[12:59:20.0743] <mgaudet>
OH; maybe you're suggesting that privateMemberReference ought to be checking that we're inside class context? 

[12:59:26.0537] <tcampbell>
mgaudet: I was thinking 
```
  if (pc_->sc()->isGlobalContext() && scope == &pc_->varScope()) {
    MOZ_ASERT(visibility == NameVisibility::Public);
    return true;
  }
```
but that may be wrong with your example

[13:00:23.0908] <jorendorff>
mgaudet: I was just misunderstanding the code.

[13:00:27.0611] <jorendorff>
ignore my comment

[13:01:06.0856] <mgaudet>
Ok; thanks for the clarificatioN! 

[13:01:09.0045] <mgaudet>
 * Ok; thanks for the clarification!

[13:30:28.0608] <imanol>
> <@mccr8:mozilla.org> Yeah, for WebGL-ish leaks the CC logs are going to be what you want to look at first, as the leaks are probably going through DOM refcounted stuff.

that's really useful. I'll try to find where the FxR WebGLContext leak is using DMD heap scan mode

[13:33:16.0980] <imanol>
> <@mccr8:mozilla.org> Yeah, for WebGL-ish leaks the CC logs are going to be what you want to look at first, as the leaks are probably going through DOM refcounted stuff.

 * that's really useful. I'll try to find where the FxR WebGLContext leak is using DMD heap scan mode tutorial

[13:33:54.0758] <sfink>
presented without comment: `Rooted<GCVector<GCVector<GCVector<Value>>>>`

[13:36:40.0307] <iain>
Why comment? It is clearly self-documenting code

[13:36:54.0852] <mgaudet>
confession: Wrote a new test case while addressing review feedback, which failed. Seems like a good time to bid the channel Adieu, and thank everyone for a great (but surprisingly busy) VirtuAllHands. 

[13:36:59.0576] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[13:37:23.0762] <sfink>
agreed. Bye!

[13:37:53.0674] <iain>
Yeah, this felt more like a real all-hands than I was expecting

[13:38:20.0624] <iain>
sfink++ for getting the organization ball rolling

[13:38:37.0225] <Waldo>
Certain stretches of it did for me for sure.  Other stretches of time, far less so.

[13:39:58.0011] <Waldo>
Meanwhile I'm still staring at this stupid piping logic code trying to wrangle all the intersecting asynchronous states into submission and understandability, and still floundering.

[13:41:16.0240] <sfink>
maybe you're holding upside down. Or inside out.

[13:43:18.0763] <Waldo>
Maybe I should get outside and go for a walk and clear my head some.

[13:44:05.0270] <sfink>
my experience was definitely heavily flavored by timezones. Get started early, big plenary type thing, meetings. Break for lunch, discover I'm way more exhausted than I would've expected. Come back, find everyone leaving or gone. Work on something minor. Prep for the next day. Repeat.

[13:47:49.0256] <sfink>
 * maybe you're holding it upside down. Or inside out.


2020-06-19
[11:20:26.0949] <ptomato>
when is the ESR 78 release? I'm wondering when would be a good time to start working on the migration guide for embedders from 68 to 78

[11:21:40.0852] <evilpie>
https://wiki.mozilla.org/Release_Management/Calendar#Future_branch_dates

[11:22:07.0935] <evilpie>
11 days

[11:22:38.0653] <evilpie>
but there is quite some overlap with 68

[11:26:05.0552] <ptomato>
oh, wow, the overlap is 3 release cycles now

[11:27:45.0326] <evilpie>
I think 68 is special because the old  Firefox for Android is based on it, but not sure

[11:34:03.0062] <hussam>
Many open source projects such as polkit and gjs use spidermonkey from firefox 68 as well.

[11:35:06.0415] <ptomato>
well I will likely write the migration guide based on what I have to do to upgrade gjs from 68 to 78, so that's why I ask :-)

[11:35:59.0466] <evilpie>
Hopefully fewer changes nowadays and we got some of those error APIs exposed


2020-06-20
[04:32:28.0391] <arai>
`mach bootstrap` starts building python 2 and python 3 :P

[04:35:22.0987] <arai>
I guess I should've pushed this one-liner fix to try server, instead of testing locally

[04:35:54.0735] <arai>
oh... it's building both python 3.7 and 3.8...

[15:43:33.0771] <sfink>
it *builds* them? Bizarre!


2020-06-22
[20:47:50.0340] <dereknongeneric>
is this the right place to ask questions about test262? I'm curious about why it doesn't include `node`. My understanding of it is because it uses V8 under the hood and that would be repetitive, but not entirely sure

[20:51:10.0151] <dereknongeneric>
also, looking forward to learning about how to build this project

[20:55:57.0766] <dereknongeneric>
I guess there's no correlation to https://docs.npmjs.com/configuring-npm/package-json.html#engines

[20:59:31.0908] <arai>
#tc39 channel on freenode might be better place for the question about test262

[20:59:55.0430] <dereknongeneric>
ty

[22:04:55.0920] <dereknongeneric>
I don't think I will ask that question in there. This package.json field seems to be confused

[22:06:15.0055] <dereknongeneric>
¯\_(ツ)_/¯

[22:17:19.0847] <dereknongeneric>
hope to learn more about test262 in general

[22:18:44.0723] <dereknongeneric>
JavaScript engine conformance is really important

[22:19:53.0493] <dereknongeneric>
looking forward to spectating :)

[09:16:30.0897] <djvj>
> <@sfink:mozilla.org> it *builds* them? Bizarre!

If you want something done right, you gotta do it yourself.. I guess.

[09:17:42.0993] <djvj>
Also, is the View in Lando page erroring for anyone else in phabricator?  It started doing that for me immediately after I submitted patch for landing which seems vaguely inauspicious.

[09:18:46.0094] <djvj>
"Lando API returned an unexpected error"

[09:22:07.0987] <mccr8>
somebody else is complaining about it in #developers

[09:22:16.0211] <jorendorff>
Does your commit message contain a divide by 0?

[09:22:44.0307] <djvj>
Should it?

[09:23:05.0406] <djvj>
mccr8: strength in numbers, I'll take it.

[09:23:43.0835] <mccr8>
I actually broke the b2g hg2git bridge many years ago by hand editing the timestamp on a patch I submitted. Some kind of rounding issue when converting it.

[10:24:09.0408] <avandolder>
jorendorff: test262 has a really nice way of testing async functions by requiring all tests flagged async to call their $DONE function, which throws if passed a truthy value. so I could just test promises that are supposed to fail with `.then($DONE, err => { .... })`. in non262 it seems like the closest thing is to just have `.then(() => assertEq(true, false, "expected error"), err => { .... 

[10:24:22.0039] <avandolder>
 * jorendorff: test262 has a really nice way of testing async functions by requiring all tests flagged async to call their $DONE function, which throws if passed a truthy value. so I could just test promises that are supposed to fail with `.then($DONE, err => { .... })`. in non262 it seems like the closest thing is to just have `.then(() => assertEq(true, false, "expected error"), err => { .... })`

[11:50:18.0614] <mgaudet>
tcampbell: ping?

[11:50:30.0410] <tcampbell>
mgaudet: pong-ish

[11:51:06.0323] <mgaudet>
would you happen to have an idea of how scopes + Debugger.frame.eval are supposed to coordinate? 

[11:51:51.0129] <tcampbell>
generally yes, but that is a reasonably big topic..

[11:51:55.0449] <mgaudet>
(I was surprised when I found out that it seems to not use the scope associated with the function frame, but a an empty global scope, and I'm wondering how this works ) 

[11:52:10.0322] <tcampbell>
oh that

[11:52:16.0549] <tcampbell>
it uses non-syntactic scopes

[11:53:06.0279] <tcampbell>
so that DebuggerEnvironmentProxyObjects can be used

[11:53:46.0966] <mgaudet>
Alright -- I know some of these words. I'll need to do some reading :P 

[11:54:02.0345] <mgaudet>
That's probably a good enough pointer for now.

[11:54:27.0210] <tcampbell>
mgaudet: https://bugzilla.mozilla.org/show_bug.cgi?id=1638309

[11:54:35.0585] <tcampbell>
"Open" .. oops

[11:55:17.0056] <mgaudet>
(Context is that `Debugger.frame.eval` can't see private fields at the moment because sytnax-error-emitting code I wrote tries to analyze the scope chain looking for name bindings, and freaks out in that situation because they're not on the scope chain )

[11:55:17.0595] <tcampbell>
/me wonders if it is fair game to change assignee..

[11:56:04.0460] <tcampbell>
that makes a lot of sense. You are in the territory of `computeThisBinding` and `computeAllowSyntax`

[11:56:39.0805] <tcampbell>
and how good an emulation the debugger provides when executing inside live pre-existing frames

[11:57:46.0326] <mgaudet>
mmm. Looking like the right answer would be to reproduce / factor out that interesting chain jump code

[11:57:49.0212] <tcampbell>
mgaudet: I expect you need something like the workaround in `computeThisBinding` to determine an "effective" scope

[11:57:58.0062] <mgaudet>
yep

[11:58:06.0088] <mgaudet>
Definitely moving this into a new bug tho

[11:58:33.0876] <mgaudet>
Thanks! This was perfect :D 

[11:58:36.0757] <tcampbell>
mgaudet: also see https://bugzilla.mozilla.org/show_bug.cgi?id=793345 

[11:59:24.0689] <tcampbell>
which fairly argues we should remove non-syntactic scopes from the debug case

[11:59:42.0518] <tcampbell>
 * which fairly argues we should remove non-syntactic scopes from the debugger case

[15:21:22.0294] <mgaudet>
confession: Continuing review feedback for private fields; new test cases, new bugs :) Steady-going. 

[15:21:25.0039] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2020-06-23
[03:40:08.0782] <yulia>
I got the following question recently

"I have a couple questions for you. Has anyone written a formal semantics
of the SpiderMonkey bytecode? How about the translation from JS to the
bytecode, is it only documented in the code itself? I find that what you
presented was quite clean and could be formalized."

I believe the answer here is --> no, but we also change it so it might not make sense to formalize?

[03:40:38.0204] <yulia>
the other question i got was this one, and I don't know enough for this:

"
The next question is a bit unrelated. You mention at the beginning of
the stream that you also work on wasm. We've written a formal semantics
of wasm and we're now able to extract an interpreter and run tests. We
would like to run things starting from JS, and we're wondering if there
is a way to call into *our* interpreter starting from a JS interpreter.
I hope that there are debug tools that could do that… Do you know of
any?
"

Any thoughts?

[03:40:51.0061] <yulia>
 * the other question i got was this one, and I don't know enough for this:

`
The next question is a bit unrelated. You mention at the beginning of
the stream that you also work on wasm. We've written a formal semantics
of wasm and we're now able to extract an interpreter and run tests. We
would like to run things starting from JS, and we're wondering if there
is a way to call into _our_ interpreter starting from a JS interpreter.
I hope that there are debug tools that could do that… Do you know of
any?
`

Any thoughts?

[03:40:57.0488] <yulia>
 * I got the following question recently

`I have a couple questions for you. Has anyone written a formal semantics
of the SpiderMonkey bytecode? How about the translation from JS to the
bytecode, is it only documented in the code itself? I find that what you
presented was quite clean and could be formalized.`

I believe the answer here is --> no, but we also change it so it might not make sense to formalize?

[03:41:55.0754] <yulia>
maybe @nbp @jandem or @lth have some insight here

[03:43:02.0104] <yulia>
also jorendorff or anyone else if they are already up at this time

[03:44:09.0819] <jandem>
for the bytecode itself, we have the [docs](https://wiki.developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Internals/Bytecode) generated from `vm/Opcodes.h`

[03:44:58.0229] <jandem>
bytecode generation gets more complicated for things like for-of loops or spread syntax. We don't have this documented anywhere outside the code

[03:45:31.0403] <yulia>
the person asking is a research scientist who did a formal proof of es3 so the threat to formalize is quite real

[03:46:03.0137] <yulia>
i wonder if it would be useful, it would be cool to see...

[03:46:08.0526] <yulia>
 * the person asking is a research scientist who did a formal proof of es3 so the threat to formalize is quite real ;)

[03:46:42.0238] <jandem>
for the wasm interpreter, we could add a shell/testing function that called their interpreter I suppose? they could also compile their wasm interpreter to wasm, and then run it in spidermonkey

[03:47:09.0018] <yulia>
ok, interesting

[03:49:19.0124] <jandem>
(also depends on what they want to do exactly. Replacing our wasm implementation with their interpreter and supporting all features is probably hard)

[03:51:44.0698] <yulia>
 * the person asking is one of the research scientists behind jscert so the threat to formalize is quite real ;)

[04:04:16.0064] <nbp>
The docs has comments which are specifying what is the expected context stack and how it is being mutated. This is not a formal definition of it, as a formal definition would describe precisely what are the values which are pushed back to the stack, and how the rest of the engine gets mutated (such as global object, this objects, and so on …)

[04:05:13.0255] <nbp>
The translation from JS to bytecode is only in the code, yes.

[04:06:45.0224] <nbp>
For making a wasm interpreter, it should be doable to find the execution entry point for WASM and replace them in SpiderMonkey. 

[04:08:20.0978] <nbp>
As Jan suggested, compiling the interpreter it-self to WASM, and re-doing the functions for loading WASM from JS might be doable and work on multiple engine, not only SpiderMonkey. Thus, having a WASM interpreter running it-self in WASM sounds like an interesting approach.

[04:35:36.0199] <lth>
it's probably practical to replace much of the wasm subsystem, esp if high performance and tight js integration are not important

[04:36:21.0286] <jorendorff>
yulia: Assuming this team has already formalised JS, formalizing SM bytecode is mainly a matter of figuring out how to formalize the SM implementation details it exposes

[04:36:25.0590] <jorendorff>
(and then dealing with churn)

[04:37:05.0350] <lth>
as it is, js is the memory provider for wasm but if it's possible for their engine to use memory provided by spidermonkey or for their engine not to expose the memory to js, then it's probably not a terrible job

[04:37:59.0373] <jorendorff>
https://searchfox.org/mozilla-central/source/js/src/vm/Opcodes.h#814 "Create and push a new object of a predetermined shape."

[05:06:24.0659] <yulia>
oh, hm i don't quite understand your last comment jorendorff -- is this related to aspects of the SM implementation that are exposed?

[05:08:41.0244] <jorendorff>
yulia: Yes, because "shape" isn't in the spec; so this instruction creates an object and puts it in a weird state that the formalization would have to know about

[05:08:54.0936] <jorendorff>
a nonstandard state

[05:09:31.0485] <yulia>
right

[05:10:00.0218] <yulia>
thats an internal detail of sm

[05:10:45.0904] <jorendorff>
Another example: you'd have to figure out how environments in SM correspond to environments in the standard, which is not documented at the level of detail you'd need

[05:18:32.0578] <yulia>
ok

[05:18:35.0721] <yulia>
I think i have a good picture

[05:18:53.0940] <yulia>
my understanding now is -> Formalization might not hurt, and it might be good to have  this written down?

[05:42:32.0870] <jorendorff>
your first understanding is still super relevant

[05:42:44.0668] <jorendorff>
formalizing things is very hard work, and it's just going to change

[06:03:15.0265] <nbp>
https://www.netsuite.com/blog/suitescript-21-delivers-modern-javascript-syntax-for-server-side-development

[06:10:28.0772] <yulia>
what was the paper that first described the "shapes" optimization that we use ?

[06:13:02.0619] <nbp>
My guess would be something about smalltalk / self.

[06:14:26.0207] <nbp>
or maybe lisp

[06:14:30.0501] <jorendorff>
I should know that, I was around when it was implemented

[06:15:11.0367] <jorendorff>
IIRC, smalltalk objects have fixed classes and each class has a fixed number of slots, so it wouldn't be relevant

[06:15:12.0550] <yulia>
i think it is small talk... maybe self though..

[06:15:17.0340] <yulia>
ah ok

[06:15:28.0777] <yulia>
it was something about a general optimization for dynamic objects?

[06:15:42.0457] <jorendorff>
Brendan Eich implemented it, you could ask him

[06:15:47.0098] <jorendorff>
he's on twitter

[06:16:16.0509] <mgaudet>
My memory says ["An Efficient Implementation of SELF,a Dynamically-Typed Object-Oriented Language Based on Prototypes"](https://bibliography.selflanguage.org/_static/implementation.pdf) 

[06:17:11.0747] <yulia>
i think that might be the one!

[06:17:14.0629] <mgaudet>
but I haven't re-skimmed it to verify; I'm 85% confident it's an idea from self, and equally confident it was David Ungar involved; but it's been a while since I've explored this.

[06:17:25.0849] <yulia>
thanks!

[06:18:01.0152] <mgaudet>
Perhaps we ought to add a "pre-javascript" or "inspirations for implementations" section to https://mgaudet.github.io/SpiderMonkeyBibliography/

[06:18:57.0404] <yulia>
oh wow!

[06:19:12.0771] <yulia>
we should add the papers nbp is using for the new front end for that

[06:20:31.0339] <mgaudet>
I'd welcome PRs! I'd also be open to re-organizing that to support papers about -not spidermonkey- in a much better fashion (yet, still be a useful reference for papers *about* spiderrmonkey

[06:20:48.0884] <yulia>
also jan's baseline interpreter

[06:20:51.0430] <yulia>
ill make a pr!

[06:20:56.0150] <jorendorff>
yulia: Re: formalizing SpiderMonkey bytecode, the other crucial thing for them to understand is that our understanding of a "compiled Script" is not just bytecode but includes try notes and scopes.

[06:21:42.0117] <yulia>
jorendorff: i am wondering, would it make sense for them to look at stencil?

[06:21:59.0331] <yulia>
one thing i could see coming out of this, is it could be a nice collaboration

[06:22:04.0072] <yulia>
the university is inria

[06:22:32.0459] <jorendorff>
yulia: Yes. That and "[SMDOC] Bytecode Invariants" would go a long way for them, I hope.

[06:22:40.0647] <jorendorff>
 * yulia: Yes. Stencil and "[SMDOC] Bytecode Invariants" would go a long way for them, I hope.

[06:24:15.0532] <tcampbell>
yulia: do you have any outstanding patches for the module self-hosting? I'm doing `export * as foo from 'a';` support right now and updating more steps

[06:25:03.0696] <yulia>
tcampbell: no, the ones i was working on landed

[06:25:09.0890] <tcampbell>
great

[06:25:31.0259] <yulia>
ill be picking that up again soon though, i can ping you to make sure we don't conflict

[06:26:11.0355] <tcampbell>
sounds good. I don't think I'll be touching it much beyond today. This is a surprisingly straightforward feature to support

[06:26:23.0709] <yulia>
cool :)

[06:26:49.0967] <tcampbell>
(trying to figure out the stencil structures for modules and noticed we were missing this form still)

[06:36:53.0540] <tcampbell>
do we use any formatting or linting for self-hosted js?

[06:44:13.0271] <jandem>
ESLint is used afaik, https://searchfox.org/mozilla-central/source/js/src/builtin/.eslintrc.js

[06:45:24.0958] <jorendorff>
how would we know if `mach lint` actually runs eslint on those files?

[06:46:17.0223] <jorendorff>
and, those files are full of ifdefs, how does that work

[06:50:56.0126] <jandem>
there's an eslint plugin that [strips those](https://searchfox.org/mozilla-central/rev/3d39d3b7dd1b2be30692d4541ea681614e34c786/tools/lint/eslint/eslint-plugin-spidermonkey-js/lib/processors/self-hosted.js#14)

[07:01:16.0910] <tcampbell>
hmm.. I can't get the lint to do anything

[07:04:54.0654] <jandem>
`./mach eslint js/src/builtin/` (or lint instead of eslint) gives me an error if I add an empty block to Array.js

[07:06:48.0049] <tcampbell>
hrm.. I see that. I guess we don't have style fixing on js?

[07:07:53.0920] <jandem>
I guess that's what prettier is for? it ignores our JS files [here](https://searchfox.org/mozilla-central/source/.prettierignore#45-46)

[07:08:18.0055] <jandem>
 * I guess that's what Prettier is for? it ignores our JS files [here](https://searchfox.org/mozilla-central/source/.prettierignore#45-46)

[07:08:53.0311] <jandem>
 * I think that's what Prettier is for? it ignores our JS files [here](https://searchfox.org/mozilla-central/source/.prettierignore#45-46)

[07:09:15.0702] <tcampbell>
ah

[07:13:18.0504] <jandem>
would be nice if we could make that work..

[07:41:46.0051] <jorendorff>
hey everyone -- avandolder needs vouchers for level 3 in https://bugzilla.mozilla.org/show_bug.cgi?id=1647733

[07:43:09.0516] <yulia>
jorendorff: can i vouch?

[07:43:21.0430] <yulia>
don't know if there are limitations

[07:43:44.0185] <jorendorff>
https://www.mozilla.org/en-US/about/governance/policies/commit/access-policy/

[07:44:09.0279] <jorendorff>
> Requirements: two vouchers - module owners or peers of code stored at this level, or owners or peers of the "Tree Sheriffs" module

this requirement is pretty crusty. you're effectively a peer in this module, sorry if we haven't made it official

[07:44:12.0012] <jorendorff>
should do a pass

[07:44:25.0848] <avandolder>
thanks jandem !

[07:45:59.0099] <yulia>
yes, not a peer yet

[07:46:04.0870] <jorendorff>
adding you

[07:58:02.0014] <jorendorff>
added https://wiki.mozilla.org/Modules/Core#JavaScript

[07:59:58.0345] <iain>
Oh, hey, that's funny, I'm a peer on the JIT but apparently not on JS itself

[08:00:06.0707] <jorendorff>
pfft

[08:01:00.0907] <nbp>
iain: I do not see any issue with that.

[08:02:25.0376] <jorendorff>
nbp: too bad, you're a JS peer now, unless you object

[08:02:25.0392] <iain>
Huh, yeah, I guess I'm not the only one

[08:02:35.0380] <jorendorff>
i added matt too

[08:02:58.0991] <nbp>
jorendorff: I totally object it, I do not know anything about JS, except all the bad cases.

[08:03:02.0505] <froydnj>
you get to be a JS peer!  you get to be a JS peer!

[08:03:39.0513] <jorendorff>
nbp: what else is there to know, though

[08:40:18.0562] <caroline>
i am apparently also not a peer 🤣

[08:42:51.0427] <jorendorff>
added to list of JS peers, but also jandem should add you to the list of jit peers

[09:23:43.0524] <evilpie>
jorendorff maybe also a good time to remove Brian ...

[09:23:51.0495] <evilpie>
Till maybe too

[09:24:11.0497] <till>
/me nods

[11:12:36.0336] <Waldo>
confession: Making actual progress through the piping state-transition graph, after staring too hard for too long at it.

[11:12:38.0619] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[11:37:50.0835] <RyanVM>
anba: hi, I was wondering if you could give me an idea of how severe bug 1646317 is?

[11:37:52.0203] <botzilla>
https://bugzil.la/1646317 — NEW (nobody) — Assertion failure: errorObj->type() == JSEXN_AGGREGATEERR, at builtin/Promise.cpp:3896

[11:39:03.0528] <jorendorff>
RyanVM: looking

[11:39:45.0769] <jorendorff>
ok, so guessing that's a stack overflow...

[11:40:20.0705] <jorendorff>
I can't believe it, I looked at that code

[11:40:25.0595] <jorendorff>
it's already special-cased for OOM

[11:40:29.0794] <Waldo>
RyanVM: Matrix gives the impression of presence even when it isn't really true, last I checked with him he was only on during Berlin and hasn't been on since.  You'd want to comment in bugs or email directly if you want his take on something.

[11:40:38.0208] <jorendorff>
we have two things, OOM and stack overflow

[11:41:51.0239] <jorendorff>
RyanVM: definitely needs to be fixed. thanks for the ping. easy fix, i'll fix today

[12:06:51.0798] <tcampbell>
jorendorff: I'm considering adding some sort of ".namespace" or "*namespace*" binding to all module environments. What are some reasons that I might regret this?

[12:07:35.0823] <jorendorff>
Hmm. It'll be a strong reference to the module namespace object?

[12:07:54.0746] <tcampbell>
probably lazy init, but yes

[12:08:05.0905] <tcampbell>
The problem is that our parser decides to use a lexical vs indirect binding for 'import a from "a"

[12:08:26.0059] <tcampbell>
 * The problem is that our parser decides to use a lexical vs indirect binding for `import a from "a"` vs `import * as a from "a"`

[12:08:47.0297] <tcampbell>
In the current version of spec, that decision is made at module-link time

[12:09:47.0209] <tcampbell>
this comes up when doing `export * as foo from "inner";` followed by `import foo from "outer";`

[12:11:01.0465] <jorendorff>
How is it observable?

[12:11:04.0151] <tcampbell>
https://tc39.es/ecma262/#sec-source-text-module-record-initialize-environment Step 8.d.iii.2

[12:11:40.0560] <jorendorff>
I think you're saying: we currently choose indirect binding, but the spec says it should be lexical. ...Or is it the other way round?

[12:11:41.0368] <tcampbell>
it isn't really observable, but breaks several invariants

[12:12:27.0352] <tcampbell>
the spec says lexical, so the binding lives in importers environment as a binding

[12:12:51.0157] <tcampbell>
our indirect bindings need a (shape,env) tuple which does not exist for this case

[12:14:24.0691] <tcampbell>
before this feature, one could do:
```
// a.mjs
export let x;

// b.mjs
import * as ns from "a";
export {ns};

// c.mjs
import {ns} from "b";
```
This works fine because c's `ns` is a lexical binding in env-b

[12:15:30.0984] <tcampbell>
My one idea is to add `.namespace` to a, b, c. Then the (env,shape) tuple can refer to `.namespace` slot.

[12:16:00.0589] <tcampbell>
(The link step would do the initialization of the slot as needed)

[12:19:38.0734] <jorendorff>
oh i see, so `c::ns` would be indirect referring to `a::.namespace`

[12:19:54.0585] <tcampbell>
that is a good summary

[12:20:10.0453] <jorendorff>
and in this plan, we are still using an indirect binding

[12:20:15.0821] <jorendorff>
though the spec says lexical

[12:20:28.0053] <jorendorff>
to go back to your actual question here, i don't see any reason you'd regret it

[12:21:22.0792] <tcampbell>
okay, thanks. I'll try it

[12:21:39.0975] <tcampbell>
right now we have the namespace on `env->module()->namespace()`

[12:22:03.0916] <jorendorff>
unless there's some potential bad interaction between lazy initialization (hence mutability) and being able to detect that the value never changes for downstream optimization purposes

[12:22:28.0030] <tcampbell>
I would force the init during linking

[12:22:29.0183] <jorendorff>
yeah, i thought that was there somewhere already, didn't find it

[12:23:37.0100] <tcampbell>
 * right now we have the namespace on `env->module()->namespace_()`

[12:25:44.0806] <tcampbell>
I guess I need to make sure the indirect-binding isn't mutable in this case

[12:26:15.0512] <jorendorff>
oh, right, it is also a correctness concern... but again, probably not an actual problem

[12:29:24.0459] <tcampbell>
in the spec, these indirect namespaces all use a spec immutable-binding. I think if I make the `.namespace` shape readonly I get the right thing?

[12:38:47.0275] <jorendorff>
tcampbell: actually... I think it doesn't matter because you can't assign through indirect bindings anyway...

[12:39:30.0461] <jorendorff>
https://tc39.es/ecma262/#sec-createimportbinding

[12:39:36.0595] <jorendorff>
always immutable

[12:51:14.0607] <tcampbell>
ah, thanks. I was getting lost in the spec

[13:47:37.0935] <ampdot>
Hi, I'm the same person from earlier (CrazyPython) who was asking about major GC necromancy. I was wondering, how can I find out what objects are moved to old space?

[13:57:38.0178] <mgaudet>
confession: Try shook out a few missed directives and a couple of small issues with my patch stack. Spent the day fixing those. Finished the day working on private fields on dom proxies.

[13:57:42.0245] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:45:41.0099] <mrklkrl>
Hello. I am evaluating webRTC for a native C++ application on Win/Mac. I understand that spidermonkey seems to be the most W3C compliant implementation out there.  I want to use spidermonkey's webrtc implementation in my code but can't find a whole lot of information out there. Do I need to clone the entire Mozilla repo and build firefox to read the source? Are there any guides that exist?

[14:57:41.0950] <iain>
mrklkrl: SpiderMonkey is the JavaScript engine for Firefox. WebRTC is a separate component of the browser, so the people in this channel mostly won't be able to answer WebRTC questions. If you want to look at source code, the best place to do so is on (searchfox)[https://searchfox.org/mozilla-central/search?q=webrtc]

[14:57:53.0137] <iain>
 * mrklkrl: SpiderMonkey is the JavaScript engine for Firefox. WebRTC is a separate component of the browser, so the people in this channel mostly won't be able to answer WebRTC questions. If you want to look at source code, the best place to do so is on searchfox: https://searchfox.org/mozilla-central/search?q=webrtc

[14:58:10.0818] <mrklkrl>
ok thanks for the clarification. 

[14:58:54.0176] <Waldo>
#media:mozilla.org is probably the place to look for WebRTC discussion and expertise.


2020-06-24
[02:42:50.0837] <arai>
looks like, whatwg streams spec stopped using "a, b, c" or "i, ii, iii" for step numbers?

[02:57:56.0268] <Ms2ger [~half-time dedication]>
I suspect that's part of the emu-algify removal in https://github.com/whatwg/streams/commit/caf3cea28134d8be2ec69b6a1105748a7c8d10b5

[02:59:28.0376] <arai>
thanks :)

[04:45:59.0709] <yulia>
neat -> this is a new browser that is embedding spidermonkey : https://www.ekioh.com/flow-browser/

[08:14:47.0548] <mgaudet>
confession: Looking at SecurityWrapper.cpp and thinking about private fields: 😬

[08:44:56.0223] <jdm>
does anyone have a quick example of a string that would not take the latin1 fast path?

[08:45:36.0484] <Waldo>
jdm: Which Latin-1 fast path?  Just a string with non-Latin-1 is easy, "\uabcd" say.

[08:46:08.0430] <Waldo>
Our string handling tends to be massively bifurcated with separate Latin-1/UTF-16 paths at nearly every single point that deals with string contents.

[08:46:28.0907] <jorendorff>
Waldo: you were supposed to say, we removed unicode support, all strings are latin1 now

[08:46:51.0415] <Waldo>
Wow, someone's had his coffee already today.  :-D

[08:47:29.0479] <jdm>
I'm trying to use JS_NewUCStringCopyZ with a string containing a thai character and a japanese character, and my assertion that !JS_StringHasLatin1() is failing

[08:47:43.0355] <jdm>
`        let s = b"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxy\x01\x7c\x30\x6f\0";`

[08:48:22.0787] <jdm>
/me checks if it's the \x escapes no behaving the way he expects

[08:49:26.0727] <Waldo>
Those are all code units below U+00FF, so they'd all be Latin-1.

[08:50:14.0201] <Waldo>
But of course note that _how we choose to encode a string_ is an implementation decision in many cases, and merely not containing code units above 0xFF does not necessarily guarantee the string is going to be Latin-1-encoded.

[08:52:32.0887] <jdm>
there's no difference when I used `        let s = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxy\u{abcd}";`

[08:53:32.0056] <jorendorff>
wait, this has to be translated from UTF8 to UTF16 at some point if you're going through a `UC` api

[08:54:02.0271] <jdm>
jorendorff: yes, I call String::encode_utf16 and pass a pointer to the vec<u16>

[08:56:02.0500] <Waldo>
jdm: Well, your latter string is _necessarily_ `!JS_StringHasLatin1()`, but your former string could be has-Latin-1 or not-has-Latin-1, so it doesn't really change much.

[08:56:31.0609] <Waldo>
jdm: Perhaps a pastebin of your actual code might help more than anything here.

[08:57:23.0885] <jdm>
Waldo: https://paste.rs/BAX - the !JS_StringHasLatin1Chars(*left) assertion fails

[08:58:02.0346] <jdm>
wait, that's a lie - I've got a different panic now. carry on.

[09:18:44.0992] <@allstarschh|afk>
jonco: sfink sdetar :https://bugzilla.mozilla.org/show_bug.cgi?id=1645153

[09:21:08.0336] <sfink>
bug 1632825

[09:21:11.0425] <botzilla>
https://bugzil.la/1632825 — NEW (allstars.chh) — Assertion failure: IsEmpty(), at obj-x86_64-pc-linux-gnu/dist/include/mozilla/Queue.h:57

[09:48:38.0096] <Waldo>
> <@ms2ger:igalia.com> I suspect that's part of the emu-algify removal in https://github.com/whatwg/streams/commit/caf3cea28134d8be2ec69b6a1105748a7c8d10b5

You know if there's any prospect of all the excess empty lines being removed?  https://streams.spec.whatwg.org/#create-writable-stream steps for example are spaced out for no good reason, and if I copy-paste them the line breaks are even preserved, which is pretty unhelpful.

[09:49:51.0357] <Waldo>
(also ye gods, that change size)

[09:56:37.0879] <mgaudet>
confession: In w-t-f of the day, if my editor's autoformat deploys on a mochitest, the mochitest hangs. 

Whhhhhhy

[09:56:39.0907] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[09:58:31.0726] <mgaudet>
(answer: autoformatter turns `<![CDATA[` into `< ![CDATA[`

[09:58:35.0563] <mgaudet>
 * (answer: autoformatter turns `<![CDATA[` into `< ![CDATA[`)

[10:01:28.0987] <jorendorff>
good griefe

[10:01:30.0749] <jorendorff>
 * good grief

[10:27:42.0743] <yulia>
The summary for the 76th meeting is now live: https://github.com/codehag/TC39-news/blob/master/meetings/2020/tc39-06-2020.md

[10:28:44.0696] <mgaudet>
jorendorff: What are your feelings around the more exotic proxy types, and how they ought to interact with private fields? For example, ChromeObjectWrappers; these deny access via most abstract operations (silently in some cases, apparently for compat reasons); the implemenation I have right now throws if you try to stamp a private field onto one... is that OK? Or do you think we need to support that?

[10:29:37.0687] <jorendorff>
mgaudet: It has been years since I had to think about COWs

[10:30:16.0408] <jorendorff>
mgaudet: are those the ones that are visible to script, used to implement stuff like `HTMLVideoElement`?

[10:30:32.0452] <mgaudet>
Oh dear.

[10:30:37.0573] <jorendorff>
certainly anything that's internal we can probably punt on

[10:31:03.0352] <jorendorff>
But it might be just as easy to use slots for native objects and a weakmap fallback for everything else

[10:31:11.0836] <jorendorff>
rather than implement N fallbacks

[10:31:40.0360] <jorendorff>
granting that weakmaps are bad

[10:32:22.0632] <mgaudet>
😬

[10:32:40.0985] <jorendorff>
agree

[10:32:44.0599] <mgaudet>
So the thing that has me most afraid is trying to maintain any of the security invariants

[10:33:22.0863] <mgaudet>
(mostly as a result of me not having the clearest understanding of all the pieces; but there's some scary comments here and there...) 

[10:33:23.0161] <jorendorff>
hmm

[10:38:34.0443] <jorendorff>
mgaudet: OK. Did you already add a virtual method(s) to `ProxyHandler` for private field access?

[10:38:42.0808] <mgaudet>
Yes. 

[10:39:10.0088] <mgaudet>
(this all may be easier to talk about with a stack pushed to try to discuss;) 

[10:39:35.0575] <mgaudet>
/me pushes empty

[10:39:41.0749] <jorendorff>
ok, so if those "fail closed" by default, at least we won't have a hole. then the next question is, how many kinds of wrappers are actually exposed to user code (the web and extensions)

[10:40:04.0258] <mgaudet>
(and how can I enumerate them... and make sure I test hem all :P) 

[10:40:10.0747] <mgaudet>
 * (and how can I enumerate them... and make sure I test them all :P) 

[10:40:12.0937] <jorendorff>
well, yes

[10:40:30.0832] <jorendorff>
pretty sure COWs still are, peterv and bholley are some people to ask

[10:40:48.0262] <mgaudet>
I want a crazy html page that has every element type on it so I could do `for (e of document.all) { ... test .. } ` 

[10:41:38.0417] <mgaudet>
jorendorff: https://treeherder.mozilla.org/#/jobs?repo=try&revision=f0a06addc44ce79bf32aa5baa3193d1be1a116fa 

[10:42:46.0430] <mgaudet>
(rough code warning, but [this](https://hg.mozilla.org/try/rev/eaa4c740aa01d9d148665d5dba24bdb02f3c98f0) is the basic proxy support, and [this](https://hg.mozilla.org/try/rev/7db0cebd2fbff13fb3a729d34d209a7f625b1f9c) is the cut that got added for CCWs) 

[10:44:29.0065] <jorendorff>
> <@mgaudet:mozilla.org> I want a crazy html page that has every element type on it so I could do `for (e of document.all) { ... test .. } `

that's a great idea. we should have a JS script with every value in it

[10:44:55.0486] <mgaudet>
(I cannot tell if you're being sarcastic or not?) 

[10:45:05.0538] <jorendorff>
only frivolous

[10:46:05.0358] <mgaudet>
(I wonder if there already is such a page somewhere; it seems like it _ought_ to exist) 

[10:46:53.0127] <jorendorff>
mgaudet: `+var g = newGlobal({newCompartment: false});`

[10:46:58.0859] <jorendorff>
should be `true`, yes?

[10:47:35.0454] <mgaudet>
almost certainly; which rev is that (I think I fixed that elsewhere) 

[10:47:59.0272] <jorendorff>
it's 7db0cebd2fbff13fb3a729d34d209a7f625b1f9c  Support private fields that traverse CCWs.

[10:48:43.0031] <mgaudet>
Yeah, that gets fixed in the next patch; rough patches :P 

[10:48:53.0775] <sfink>
frivolous? are you calling representativeStringArray() frivolous?

[10:49:16.0981] <sfink>
(it might be; I've only kept it working, not actually used it)

[10:49:30.0465] <Waldo>
I think this JS script should also contain the set of all values not found in it.

[10:49:52.0577] <Waldo>
`representativeStringArray()` is good stuff and not frivolous, pistols at ten.

[10:50:36.0828] <jorendorff>
mgaudet: regarding https://hg.mozilla.org/try/rev/eaa4c740aa01d9d148665d5dba24bdb02f3c98f0 

[10:52:23.0147] <sfink>
the set of all buggy implementations of binary search includes all bug-free implementations of everything else

[10:52:35.0908] <jorendorff>
mgaudet: you might consider adding these to vm/ObjectOperations.h so that almost all code can treat them as having nothing to do with shapes and properties

[10:53:00.0217] <jorendorff>
i mean, except the ICs and everything that has to know the awful troth

[10:53:02.0402] <jorendorff>
 * i mean, except the ICs and everything that has to know the awful truth

[10:53:37.0257] <jorendorff>
@sfink but that's not saying much; the set of all bug-free implementations of everything is small

[10:54:21.0077] <Waldo>
A small infinity.

[10:54:25.0912] <Waldo>
(smol infinity?)

[10:54:29.0144] <sfink>
I guess I was thinking theoretical existence; actual manifestations are too rare to bother with, you're right

[10:55:10.0317] <mgaudet>
> <@jorendorff:mozilla.org> mgaudet: you might consider adding these to vm/ObjectOperations.h so that almost all code can treat them as having nothing to do with shapes and properties

Then under the covers provide special case handling for proxies there? Or do these still get added as proxy traps? 

[10:56:02.0428] <jorendorff>
mgaudet: a little stronger: that header is meant to serve as an abstraction boundary, for all users who don't have an overriding need to know more; they line up with ProxyHandler methods, not by accident

[10:56:08.0294] <jorendorff>
I think they're all inline functions, see ObjectOperations-inl.h

[10:56:33.0261] <jorendorff>
ok, going to a meeting

[10:56:47.0959] <jorendorff>
mgaudet: but i think you're probably doing the right thing and it's just painful

[10:56:52.0227] <jorendorff>
sorry :(

[10:57:06.0085] <mgaudet>
No worries -- I need to lunch.

[10:57:13.0586] <mgaudet>
It's for -sure- painful :P 

[10:57:31.0076] <Waldo>
mgaudet: Remind me, which time zone are you in these days?

[10:57:41.0293] <mgaudet>
Mountain

[10:58:21.0578] <Waldo>
Mm, so your lunch is not terribly untimely, indeed the opposite, unlike mine often.

[10:58:53.0434] <mgaudet>
I have some outside schedule influencers

[10:59:20.0379] <sfink>
lunch ript untimely from the kitchen

[11:02:43.0449] <Waldo>
Yeah, I have almost no schedule influences these days except a handful of scheduled events and meetings.  It...goes.

[11:52:09.0966] <ampdot>
is there a way to see which objects are moved to old space?

[12:00:01.0076] <mgaudet>
ampdot: If you're building SM yourself, there's an empty hook [`PromoteToTenured`](https://searchfox.org/mozilla-central/search?q=symbol:_ZN2js2gc8gcprobes16PromoteToTenuredEPNS0_4CellES3_&redirect=false) that you could implement

[12:00:32.0658] <mgaudet>
There may be better ways! But that's *one* way

[12:13:02.0027] <jdm>
ES define a Cyclic Module Record in https://tc39.es/ecma262/#sec-cyclic-module-records; is there any such representation in spidermonkey?

[12:13:37.0988] <jdm>
more specifically, I guess - does spidermonkey do anything special with regards to modules that participate in cycles?

[12:14:26.0170] <jorendorff>
jdm: It looks like we do implement cyclic module records pretty much literally

[12:14:46.0302] <jorendorff>
the spec requires coping with cycles as a somewhat special case

[12:28:29.0649] <iain>
I have a vague recollection that originally all modules were cyclic modules, and then the spec split them up so that wasm modules could reuse parts

[12:28:53.0749] <iain>
But I can't find the history and might be misremembering

[12:38:00.0520] <tcampbell>
yes, "cyclic module" is the base type

[12:43:09.0255] <tcampbell>
There isn't a cyclic-module-record type in C++, since most of the machinery for them is in Module.js and it is largely represented with normal properties on JS-exposed objects

[12:44:41.0825] <tcampbell>
(There does seem to be a TODO around support for non-cyclic modules, but that is mostly because we have no examples of them in any specs implemented specs yet)

[13:11:54.0386] <sfink>
ampdot: or you could go the full data dump parsing route and use dumpHeap(), then traverse the resulting dump to figure out what things are.

[13:13:01.0230] <sfink>
it can be difficult to figure out what some random object is, though. You can look at the shape to see its properties. Or the ObjectGroup to get its constructor if it has something other than Object.

[13:13:20.0270] <sfink>
(and ObjectGroup is only an estimate, and may be going away at some point)

[13:39:35.0146] <mgaudet>
confession: Built an _ok_ mochitest for private fields, and learning I have a lot to learn :D 

[13:39:37.0583] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:13:05.0378] <annyG>
hi, i remember there is a file somewhere with different helper functions defined to be used in JS to see things like an address of some proxy object and other things (i forget what else), does anyone know the name of that file? sorry for the vague description

[14:13:54.0522] <jorendorff>
maybe you're looking for https://searchfox.org/mozilla-central/source/js/src/builtin/TestingFunctions.h

[14:14:35.0091] <mgaudet>
(and https://searchfox.org/mozilla-central/search?q=getJSTestingFunctions&path=) 

[14:14:42.0154] <jorendorff>
yup

[14:15:02.0083] <mgaudet>
Is there a reference somewhere that describes how JS and the DOM interact? 

[14:15:14.0304] <sfink>
you can do `$js -e 'help(/dump/i)'` to do a case-insensitive search for helper functions that have "dump" in their name, for example.

[14:15:15.0260] <mgaudet>
I clearly have some half-understood ideas that baked into incorrect assumptions

[14:16:16.0650] <mgaudet>
(for example, I thought that every DOM object was a proxy from the perspective of the JS engine; but https://searchfox.org/mozilla-central/source/__GENERATED__/dom/bindings/HTMLDivElementBinding.cpp#288 suggests maybe not?) 

[14:16:40.0030] <sfink>
mgaudet: I don't know what you're confused about. It's all clearly documented in the brain of a distinguished engineer who has left Mozilla. If you can't be bothered to look there, I don't know how I can help you.

[14:20:42.0652] <evilpie>
mgaudet: no I think most DOM objects are just "normal" JSClasses

[14:20:53.0231] <evilpie>
AFAIK we only uses proxies if really necessary

[14:21:15.0786] <jorendorff>
Right

[14:21:20.0759] <jorendorff>
it's been that way for a super long time

[14:21:26.0114] <evilpie>
most of the time this is something like an array, a collection or list

[14:21:29.0646] <Waldo>
What part of `Codegen.py` don't you understand?

[14:21:37.0392] <evilpie>
or whatever DOM decides to call them today

[14:22:03.0302] <mgaudet>
hmmmmmmmmmmmmm.

[14:22:31.0881] <mgaudet>
Ok. So DOM object have expandos to handle property addition right? 

[14:22:32.0949] <Waldo>
The channel is glad to have been of its customary level of service.

[14:22:52.0976] <mgaudet>
can someone gesture vaguely in the direction of how that happens? 

[14:22:56.0404] <Waldo>
mgaudet: DOM objects are, for the most part, just normal objects with slots and shapes and all, no expando object needed.

[14:23:05.0701] <jorendorff>
agree again

[14:23:07.0664] <mgaudet>
Oh they are? 

[14:23:08.0511] <mgaudet>
hm. 

[14:23:16.0485] <sfink>
mgaudet: you owe us one (1) blog post entitled "This is Why Adding New Features to SpiderMonkey is So #$@!! Hard"

[14:23:19.0918] <Waldo>
mgaudet: The few DOM objects that are proxies, I'm not sure how they store their objects, but most likely using some expando object, yes.

[14:23:20.0256] <jorendorff>
i mean, if you were generating custom bindings, that's how you'd do it

[14:23:43.0170] <jorendorff>
no way you'd use proxies, this stuff is perf-critical

[14:24:06.0076] <mgaudet>
Alright: I need to spend more time in the debugger to figure out why this is failing then -- because my obvious candidates are all out now :) 

[14:24:12.0887] <jdm>
proxy objects are mainly used for DOM objects with specific runtime key lookup behaviours like LocalStorage, or Document (document.some_id resolves to an element with id="some_id")

[14:24:15.0662] <evilpie>
yes all DOM proxies objects have an expando object

[14:24:37.0432] <Waldo>
It shouldn't be drastically difficult to read through the generated bindings for, say, the `document.all` object to figure out how it handles expandos.

[14:24:48.0616] <evilpie>
https://searchfox.org/mozilla-central/source/dom/bindings/DOMJSProxyHandler.cpp#201

[14:24:52.0565] <evilpie>
most of the code is shared anyway

[14:24:56.0076] <mgaudet>
jdm: Oh, that's a good example: thanks! 

[14:26:14.0378] <mgaudet>
Ok. Back to the `rr` mines I go.... maybe I ought to upload this trace to pernosco. This is one of those traces that seems to have rr go real slow. 

[14:43:56.0091] <tcampbell>
mgaudet: read this https://wiki.mozilla.org/Gecko:Overview#Scripting

[14:46:26.0951] <tcampbell>
(it won't answer your questions, but it is a collection of js/gecko details that one doesn't pick up from spidermonkey-land itself)

[14:46:55.0011] <tcampbell>
we probably should migrate a bunch of that to firefox source docs though..

[14:48:46.0861] <mgaudet>
tcampbell: that is some good stuff. It's helpful to have this delineate different concepts

[14:53:43.0527] <tcampbell>
jorendorff (or maybe mgaudet these days).. I created a synthetic environment binding by using `noteDeclaredName`, but I also want to make it non-enumerable because some internal functions for module environments use js_enumerate.. Is this possible, or am I really down the wrong rabbit hole

[14:54:35.0844] <tcampbell>
(maybe I should have started the name with a `.` instead a `*`?)

[14:54:38.0155] <jorendorff>
No, unfortunately that totally makes sense to me and I kind of expected something like that

[14:54:43.0577] <jorendorff>
though not that exact thing

[14:56:13.0038] <jorendorff>
you also need to somehow prevent the namespace object from dumbly exposing it, via `module[".namespace"]` or whatever

[14:56:46.0115] <tcampbell>
so, the binding is on module-env which isn't exposed outside of self-hosted internals

[15:02:06.0967] <tcampbell>
currently the only bad thing is a testing function in shell, so I could special case the name, but that feels wrong

[15:03:06.0038] <jorendorff>
tcampbell:  i mean, synthetic bindings are a little bit wrong, i don't know what to do about it

[15:04:24.0497] <Waldo>
FWIW people, I am pondering taking tomorrow morning off and biking up to Alice's Restaurant for breakfast.  I am faintly considering bringing laptop with and maybe working some over breakfast, but given I'd have to do so around whatever mild crowd wants in on the limited outdoor seating, and I am not going to take up a seat someone else would actually use, I'll probably decide it's not worth the effort and will just leave the laptop home.

[15:05:58.0218] <jorendorff>
tcampbell: whoa, is this code really used? https://searchfox.org/mozilla-central/source/js/src/builtin/ModuleObject.cpp#614

[15:05:59.0972] <jorendorff>
/me thinks

[15:06:09.0856] <jorendorff>
how can that be right in the case of indirect bindings?

[15:06:59.0822] <tcampbell>
the indirect binding map is a cache of (env,shape) tuples

[15:07:21.0505] <jorendorff>
oh! of course

[15:07:23.0048] <tcampbell>
so each entry has already located the correct environment, so the shape must exist

[15:07:51.0616] <jorendorff>
i read this as a native object lookup, never mind

[15:08:05.0063] <tcampbell>
that is the code that got me. I tried to use `nullptr` as a placeholder, but it was far worse than the synthetic binding

[15:10:27.0439] <tcampbell>
hmm.. right, shapes of environments are always enumerable because that is silly otherwise https://searchfox.org/mozilla-central/source/js/src/vm/Scope.cpp#105


2020-06-25
[17:55:25.0155] <ampdot>
> <@mgaudet:mozilla.org> ampdot: If you're building SM yourself, there's an empty hook [`PromoteToTenured`](https://searchfox.org/mozilla-central/search?q=symbol:_ZN2js2gc8gcprobes16PromoteToTenuredEPNS0_4CellES3_&redirect=false) that you could implement

Is there a way to attach a FinalizationRegistry finalizer to a gc::Cell? or a way to call a JS function from PromoteToTenured?
Do you have the .o files for Spidermonkey, so I could override PromoteToTenured at the linker level without needing to compile SM myself?

[17:56:10.0772] <ampdot>
(Or have I misunderstood, and it's the embedder that implements it? If so, how would I override the hook in Firefox?)

[02:15:06.0834] <yulia>
I am trying to nail down what it means to refer to the backend as a virtual machine. What i have so far is that it a "process virtual machine", in that it is designed to execute programs independent of platform. I am wondering if there is a better definition for this?

[02:16:29.0860] <yulia>
 * I am trying to nail down what it means to refer to the backend as a virtual machine. What i have so far is that it a "process virtual machine", in that it is designed to execute programs independent of platform (but, skimming thee wiki, it looks like this is a single thread on a host OS which isn't the case?). I am wondering if there is a better definition for this?

[02:17:22.0221] <yulia>
 * I am trying to nail down what it means to refer to the backend as a virtual machine. What i have so far is that it a "process virtual machine", in that it is designed to execute programs independent of platform. I am wondering if there is a better definition for this?

[02:19:04.0496] <yulia>
I want to give enough detail so people can search on their own lateer

[02:22:25.0925] <padenot>
istr Andrew Tanenbaum has a nice definition of this in the beginning of his Structure Computer Organizattion

[02:22:28.0130] <padenot>
 * istr Andrew Tanenbaum has a nice definition of this in the beginning of his Structure Computer Organization

[04:02:06.0706] <Ms2ger [~half-time dedication]>
> <@waldo:mozilla.org> You know if there's any prospect of all the excess empty lines being removed?  https://streams.spec.whatwg.org/#create-writable-stream steps for example are spaced out for no good reason, and if I copy-paste them the line breaks are even preserved, which is pretty unhelpful.

File a bug

[05:46:27.0227] <yulia>
factorio server has been turned off for now, lemme know if i should turn it back on

[06:09:21.0655] <nbp>
I suggest yes 😛 , but maybe not all the time as someone has to pay for the electricity, and it is best if we can all join at the same time.

[08:12:14.0567] <jonco>
> <@ampdot:matrix.org> (Or have I misunderstood, and it's the embedder that implements it? If so, how would I override the hook in Firefox?)

what are you trying to acheive?

[08:20:21.0894] <padenot>
yulia: sorry I forgot I said that and then didn't do anything. I found my copy and can scan you the chapter, or maybe you found it ?

[08:20:29.0379] <padenot>
it's not as short as I remembered

[08:25:10.0885] <peterv>
> yes all DOM proxies objects have an expando object

evilpie: the Window named properties proxy is an exception, because it doesn't support expandos

[08:34:15.0901] <mgaudet>
peterv: which is the "window named properties" proxy? (forgive the possibly dumb question) this is the thing that maps `window.foo` to some element with `id=foo`? 

[08:35:22.0999] <mgaudet>
peterv: (for context: I'm working on implementing private fields for javascript, and one of the peculiarities is that you can stamp private fields onto arbitrary objects, so I'm trying to figure out how I'm going to make adding a private field to `window` work) 

[08:35:58.0662] <peterv>
right

[08:36:48.0429] <peterv>
but the window named properties object is not the window object, it's on the prototype chain

[08:37:13.0594] <mgaudet>
Ok, that's heartening :D 

[08:37:39.0248] <peterv>
but if the goal is to support private fields on all objects it seems like you would need to add support for that too

[08:37:48.0459] <peterv>
and for proxies in general?

[08:37:54.0294] <jorendorff>
this is good implementation feedback for TC39 I think

[08:37:56.0504] <mgaudet>
I was going to ask if you could access it programmaticaly

[08:38:09.0190] <jorendorff>
or, could be, once we've thought it through

[08:38:44.0026] <jorendorff>
It's not clear to me that proxies should unconditionally allow private symbols. Perhaps they should be allowed just to say yes or no

[08:38:58.0663] <jorendorff>
as an extension point, allowing the HTML spec to say no for the WindowProxy

[08:39:51.0166] <peterv>
mgaudet: sure, Object.getPrototypeOf(Object.getPrototypeOf(window))

[08:40:05.0682] <mgaudet>
peterv: Hah. I literally just came up with that myself :P 

[08:40:12.0116] <jorendorff>
The reason it should say no, apart from being hellacious to implement and completely useless, is navigation and cross-site info leakage risk

[08:40:48.0515] <peterv>
yeah, in general I think it would be best to allow the WebIDL/HTML specs to have a say in this

[08:41:04.0240] <mgaudet>
(I really really need to figure out how window+navigation works before I'm done with this) 

[08:41:54.0025] <mgaudet>
So, at least right now chrome (/edge beta, which is what I have) does let me stamp a private field into WindowProperties

[08:44:55.0972] <mgaudet>
jorendorff: do you have a link handy (if you don't no worries) that helps explain what gets preserved across navigation on window? I'd love to experimentally write a test case but I don't really understand beyond vague notions that this is a thing that happens

[08:45:19.0493] <jorendorff>
Mmmm, no, I don't.

[08:45:24.0071] <peterv>
mgaudet: if all objects support private fields I would expect the generic proxy code to handle this without the DOM bindings needing to do anything special 🙂

[08:46:06.0860] <jorendorff>
peterv: where does the HTML spec describe the effect of navigation on the window?

[08:46:23.0752] <jorendorff>
particularly JS global variables and such

[08:46:45.0242] <mgaudet>
peterv: I think it depends on what -kind- of proxy handler these things use. which isn't clear to me just yet

[08:48:12.0451] <yulia>
padenot: taht would be super useful!

[08:48:22.0528] <peterv>
jorendorff: probably just "When the browsing context is navigated, the Window object wrapped by the browsing context's associated WindowProxy object is changed." in https://html.spec.whatwg.org/multipage/window-object.html#the-windowproxy-exotic-object ?

[08:48:53.0362] <yulia>
i looked at it online and it is 60 euro but i should probably get it anyway 😬

[08:49:03.0419] <peterv>
jorendorff: which is a pretty short sentence hiding some complexity 🙂

[08:49:07.0078] <yulia>
padenot: so, if you have thee page scanned that would be really helpful

[08:49:35.0593] <jorendorff>
ooohh

[08:49:59.0577] <iain>
yulia re backend as virtual machine - it might help to think about it in comparison to a more traditional compiler. Say I'm compiling SM locally. I'm using clang, which is targeting a specific machine: x86-64. x86-64 has an instruction set that the compiler can use to represent the program. As a compiler developer, I mostly don't care how those instructions are implemented under the covers. I just need to know the agreed-upon interface: if I generate these bytes in this order, the hardware will take it from there. A virtual machine is an instruction set architecture that doesn't actually correspond to a real chip. Instead of hardware, all the instructions are implemented in software.

[08:50:03.0139] <padenot>
yulia: I enjoyed it and learnt a lot. I'm going to scan you this chapter right now, one sec

[08:50:38.0679] <mgaudet>
> <@yulia:mozilla.org> i looked at it online and it is 60 euro but i should probably get it anyway 😬

May still qualify under profession development expenses despite these covidian times

[08:51:23.0174] <padenot>
that shouldn't be particularly hard to justify yeah, for someone working on SM heh

[08:51:40.0044] <peterv>
mgaudet: I think the proxy handlers for the DOM are https://searchfox.org/mozilla-central/source/dom/bindings/DOMJSProxyHandler.h https://searchfox.org/mozilla-central/source/dom/base/WindowNamedPropertiesHandler.h and https://searchfox.org/mozilla-central/source/dom/base/nsGlobalWindowOuter.cpp#334

[08:52:35.0427] <mgaudet>
peterv: Ah, sweet. Hmm. This may do the right thing right now, accidentally-on-purpose

[08:52:47.0401] <mgaudet>
Still; many test cases yet to write :) 

[08:53:06.0543] <peterv>
DOMProxyHandler is used as a base class for generated handler classes

[08:53:36.0307] <peterv>
hmm, actually

[08:54:01.0749] <peterv>
I lied, there's now also https://searchfox.org/mozilla-central/source/dom/bindings/RemoteObjectProxy.h for fission

[08:54:04.0213] <iain>
The pithier version of that wall of text: a virtual machine is an imaginary computer that the frontend can run programs on that is specifically designed to be good at expressing JS. The backend is responsible for making that imaginary computer run on a real computer.

[08:56:20.0987] <mgaudet>
peterv: oh yeah, I knew remote was going to be a thing I'd need to look at. While I have you (and thanks so much for your attention at the moment), do you have a pointer to a test case for remote object proxies (so I can piggyback off it for my own purposes) 

[08:58:02.0908] <peterv>
hmm, not off the top of my head

[09:02:01.0335] <mgaudet>
peterv: ok, no worries. I'll make a more concerted effort to figure it out as I get closer.Going back to windowproxy / navigation; I guess one thing I want to be clear on: is mutation of the window observable in some way after navigation? 

[09:03:06.0577] <mgaudet>
(This sort of stuff makes me feel brand new at Mozilla all over again) 

[09:04:32.0769] <padenot>
yulia: sent to your moco email

[09:05:05.0597] <peterv>
mgaudet: observable from where?

[09:05:19.0267] <mgaudet>
/me gestures vaguely. 

[09:05:23.0710] <peterv>
and what kind of mutation?

[09:05:24.0465] <mgaudet>
the question may be ill posed

[09:05:24.0575] <peterv>
heh

[09:05:25.0176] <yulia>
thanks padenot !

[09:07:00.0184] <evilpie>
peterv mgaudet oh I should have remembered that. I actually run into the missing expandos on the named properties object when implementing @@toStringTag

[09:07:02.0157] <djvj>
iain: punted a triage bug to you (mgaudet's).  I think it's related to potentially higher usage of Object::assign happening, and our implementation of that is very naive.

[09:07:27.0038] <evilpie>
In Chrome that object however has an expando!

[09:08:13.0041] <mgaudet>
so; I guess the question is: can I add a property on the windowproxy, navigate, then read the property back; and after navigation, is the windowproxy the same object? 

[09:09:25.0064] <mgaudet>
peterv: I'm trying to reason through jorendorff's information leak concern (and also, there's potentially memory leak issues too -- though now that I think about it, they're probably small, because I would assume the compartment would go away) 

[09:09:33.0391] <peterv>
evilpie: I think that's a bug in Chrome, given https://heycam.github.io/webidl/#named-properties-object-defineownproperty

[09:41:43.0739] <ampdot>
> <@jonco:mozilla.org> what are you trying to acheive?

I am trying to build a tool that prints out major garbage for a JavaScript-based browser game. For example, if an object is moved to old space and is later garbage-collected, I want to know who allocated it or what the object is.

[10:21:09.0791] <ptomato>
ampdot: is it 0AD? :-)

[10:24:02.0532] <ampdot>
> <@pchimento:igalia.com> ampdot: is it 0AD? :-)

No. Also, not the audio thread. Different open source javascript game :)  

[10:24:53.0198] <ampdot>
I'm the same person as CrazyPython from earlier-- posted some posts on asking if there was a way of printing dead old space objects-- but I was locked out of that Riot account.

[10:25:21.0647] <ptomato>
in any case - in GNOME we have some instrumentation that does something similar but not exactly what you want

[10:26:57.0514] <ptomato>
we use js::DumpHeap and then have some scripts that analyze the output

[10:27:11.0938] <ptomato>
https://gitlab.gnome.org/GNOME/gjs/-/blob/master/tools/heapgraph.py

[10:27:18.0162] <ampdot>
It's a web-- in a web browser-- game. Does what you do print dead objects on the old space heap?

[10:27:30.0050] <ptomato>
oh!

[10:27:51.0467] <ptomato>
sorry, ignore me then - I assumed you were embedding spidermonkey in the game engine

[10:28:03.0465] <ptomato>
this won't help you I'm afraid :-)

[10:30:30.0398] <ampdot>
> <@jonco:mozilla.org> what are you trying to acheive?

 * I am trying to build a tool that prints out major garbage for a JavaScript-based browser game. For example, if an object is moved to old space and is later garbage-collected, I want to know who allocated it or what the object is. This will help me prevent pauses due to Major GCs.

[11:03:00.0481] <mccr8>
ampdot: if you want some help logging detailed tenuring information like that, a GC person like @sfink is probably your best bet.

[11:03:21.0875] <mccr8>
We do have GC logs in the browser, and you could call js::DumpHeap() before and after a GC to figure out what went away but that might not be too easy to interpret.

[11:03:37.0826] <mccr8>
Ah, I see you are already talking to Jon in the channel.

[11:04:36.0495] <mccr8>
I've used heapgraph.py and DumpHeap to look at garbage before, but only once kind of on a lark.

[11:12:56.0165] <sfink>
yeah, the way you would do this now with no changes would be to do a dumpHeap before and after a major GC (you can trigger a heap dump from about:memory), and then write something that would diff them.

[11:13:23.0200] <sfink>
unless the GC is a compacting GC, the addresses in the tenured heap (the only heap that is dumped) won't change

[11:14:56.0471] <sfink>
it looks like ptomato's script above has some diffing functionality

[11:15:52.0999] <sfink>
to display the addresses of objects collected during a major GC, I'm afraid you would have to modify the code for that

[11:16:29.0539] <sfink>
and it's not totally straightforward -- unless a dead object has a finalizer, we never look at it during a major GC

[11:16:58.0823] <sfink>
so it would require a custom thing that iterates during sweeping

[11:17:54.0122] <sfink>
(and the "not looking at it" holds even if it's the target of a WeakRef or FinalizationRegistry, although in that case we could at least see the address before clearing it out.)

[11:18:37.0396] <sfink>
but if you were adding something to support this for real, then I don't think there's any need to muck about with WeakRefs or FinalizationRegistry; those would require knowing what objects might leak in advance anyway

[11:20:17.0809] <sfink>
I have a patch lying around that is close to what you'd want for displaying dead tenured objects. If I get some time, I could dust it off. (I abandoned it once I realized that I can't access dead objects *at all* without crashing, because some of them will be uninitialized and have invalid pointers in them. But I hadn't considered just displaying the addresses and relying on a previous heap dump to figure out what they are.)

[12:42:11.0605] <tcampbell>
async-generator-debugger-interrupt testcase, whyyy

[12:48:05.0725] <jorendorff>
interrupt test cases :chefs-kiss:

[12:50:22.0253] <iain>
IIRC, I managed to break the build on two separate occasions because SM doesn't have good test coverage for interrupts in regexps

[12:50:48.0702] <iain>
We have `interruptTest` to go with `oomTest`, but it's been broken for a long time and nobody noticed

[12:51:28.0652] <tcampbell>
I'm able to use interruptTest here and trigger what I need

[12:51:37.0512] <jorendorff>
broken how/

[12:51:38.0944] <jorendorff>
 * broken how?

[12:52:53.0712] <iain>
The iterative failure test code expects exceptions on failures, but interrupts don't set an exception on the context

[12:54:03.0554] <iain>
IIRC, if nobody catches the interrupt, we assert

[12:55:08.0306] <tcampbell>
I just use `interruptTest(function() { ... }, {expectExceptionOnFailure: false})`

[12:55:57.0657] <iain>
Oh, yeah, I guess that works

[12:57:36.0022] <iain>
Might not hurt to turn that on by default, though

[13:52:02.0147] <Waldo>
zbraniecki: FYI, https://twitter.com/jswalden/status/1276254575113039877 thread may be of interest to you as dateStyle/timeStyle dude.  It is not clear to me there's anything that can be done about this, given that `Intl.DateTimeFormat` options of `{ timeStyle }` previously set a default at all and the `*Style` properties intentionally prohibit any specification of a date or time sub-component that could affirmatively in the old world trigger either date-specific or time-specific handling.

[14:09:45.0452] <zbraniecki>
no, I don't think we can do anything about it

[14:36:32.0395] <Waldo>
zbraniecki: Poked #freenode_#tc39-ecma402:matrix.org about the concern.  n theory I guess maybe we could reopen the "are {date,time}Style mutually exclusive with specifying individual subcomponents, or should they just override those components" issue, and then you could pass `{ hour: "short", minute: "short", second: "short", timeStyle: "short" }` and get backwards-compatible behavior again.  I'm not inclined to do it if it's only me who recognizes a legitimate concern here, that might be worth addressing with such change.  But if other people agree, it seems at least worth discussing.

[14:36:39.0002] <Waldo>
 * zbraniecki: Poked #freenode_#tc39-ecma402:matrix.org about the concern.  In theory I guess maybe we could reopen the "are {date,time}Style mutually exclusive with specifying individual subcomponents, or should they just override those components" issue, and then you could pass `{ hour: "short", minute: "short", second: "short", timeStyle: "short" }` and get backwards-compatible behavior again.  I'm not inclined to do it if it's only me who recognizes a legitimate concern here, that might be worth addressing with such change.  But if other people agree, it seems at least worth discussing.

[14:37:13.0574] <Waldo>
(of course that change wouldn't help out the Twitter thread example, that'd still have to be rewritten)

[14:37:21.0993] <evilpie>
https://bugzilla.mozilla.org/show_bug.cgi?id=1648544 is super weird. Looks almost like a compiler bug

[14:37:53.0880] <evilpie>
https://searchfox.org/mozilla-central/source/js/src/jit/CacheIR.cpp#8340 vs https://searchfox.org/mozilla-central/source/js/src/jit/CacheIR.cpp#8361-8380


2020-06-26
[17:28:29.0950] <ampdot>
> <@sfink:mozilla.org> yeah, the way you would do this now with no changes would be to do a dumpHeap before and after a major GC (you can trigger a heap dump from about:memory), and then write something that would diff them.

is there a way to simply see when an object is promoted to old space, ideally with minimal recompilation? I can profile my application in a state where it shouldn't allocate any old space memory anyhow, which will help me detect what will become major garbage. I feel printing promoted-to-old objects would be easier than diffing DumpHeap.

[17:32:08.0902] <sfink>
Stick in a printf at https://searchfox.org/mozilla-central/source/js/src/gc/Marking.cpp#3438

[17:32:25.0644] <sfink>
`fprintf(stderr, "tenured %p\n", dst);` or something

[17:33:12.0613] <sfink>
oh. Except it looks like you'd need line 3469 too. Or search for `gcprobes::PromoteToTenured` to find them all.

[17:40:07.0905] <sfink>
(and no, there's no way to run JS code when an object is tenured. You're deep in the internals, not in any state to be running code.)

[17:40:18.0193] <sfink>
If we really wanted to support something like that, we'd do it by marking the allocation positions in all parts of the tenured heap, then iterating over everything allocated since that time.

[17:40:55.0606] <sfink>
but then you could GC in the middle of doing that, which means we'd have to root everything until you were done with it.

[17:42:02.0968] <sfink>
we'd probably be better off making `gcprobes::PromoteToTenured` a dtrace probe point or something...

[17:47:05.0237] <ampdot>
sfink: hmmm, seems like if the fastest way would be to set a breakpoint that runs a printf on that piece of code

[17:47:41.0251] <sfink>
good idea, though it may be pretty slow

[17:47:44.0650] <ampdot>
assuming that function isn't inlined anywhere

[17:47:52.0732] <sfink>
but there's a gdb feature that combines those two

[17:48:06.0564] <ampdot>
 * assuming that function isn't inlined anywhere-- I'm not sure I've got the hardware to recompile SM or Firefox

[17:49:09.0207] <ampdot>
is there a way to get compiled .o or .so files of SM so I would only have to recompile that one file I modify?

[17:49:19.0706] <sfink>
(I haven't used it.) tracepoints? 

[17:49:23.0592] <sfink>
oh, dprintf looks good

[17:49:52.0574] <sfink>
you'd have to relink all of libxul.so regardless

[17:49:53.0268] <ampdot>
(the last time I tried to compile LLVM, I got multiple disk connection failures and it took 8 hours on -O0 :()

[17:50:18.0657] <ampdot>
 * (the last time I compiled LLVM, I got multiple disk connection failures and it took 8 hours on -O0 :()

[17:50:20.0534] <sfink>
I mean, what you're asking for is theoretically possible, but I suspect it would be a lot of trouble to get it to work

[17:50:39.0610] <sfink>
(afk for a bit, dinnertime)

[18:46:06.0342] <ampdot>
By the way--looking out for the server-side runtime-- will SM eventually rival V8 in runtime performance of long-running applications?

[18:46:16.0029] <ampdot>
 * By the way--looking out for the server-side portion of the game-- will SM eventually rival V8 in runtime performance of long-running applications?

[18:49:03.0044] <sfink>
I don't know where they stand today. Have you observed SM to do poorly at that? Mostly, I assumed that server side stuff uses v8 because of Node.

[19:04:12.0088] <ampdot>
SM runs the game client at a lower FPS than V8, so I doubt it can run the server faster. Does SM have escape analysis?

[19:08:23.0205] <ampdot>
As a developer of CPU-sensitive JavaScript programs, I find it much more difficult to find documentation on SM compiler and memory management internals than for V8 and JSC. This makes it harder to optimize for SM. When writing code, I use heuristics to estimate the performance of it on various engines.

[19:08:51.0729] <ampdot>
tl;dr You could boost the performance of my JavaScript app on SM by writing documentation on SM.

[19:27:15.0530] <sfink>
it's not organized, but the best list of current SM documentation can be dug out of the source files. Major comments are tagged `[SMDOC]`. Here's the list: https://searchfox.org/mozilla-central/search?q=SMDOC&path=

[19:28:34.0877] <sfink>
As for escape analysis, I think we support some amount of it, and https://searchfox.org/mozilla-central/search?q=escape%20analysis&path= seems to corroborate

[19:28:54.0786] <sfink>
but just having it doesn't mean it'll handle the particular situations you might care about

[19:30:34.0724] <sfink>
I wonder if you can get jitspew when running in the browser? That would give a way of seeing which optimizations applied.

[19:40:26.0914] <sfink>
ampdot: what OS are you on? I could do pushes to our try server in order to make builds with small patches for you to try. But I wanted to eg tag tenured promotions with the pid to keep them separate, it'd be nice if didn't have to worry about making it portable.

[19:59:26.0745] <sfink>
if I didn't mess anything up too badly, you could try downloading a build from https://treeherder.mozilla.org/#/jobs?repo=try&revision=0dee5069fc0f1c04260b0841d37826e569b741d3 and run it (in a fresh profile, to be safe) with the environment variable GC_LOG_PROMOTIONS set. (I just pushed it, so it'll take some time to build.)

[07:41:10.0625] <iain>
yulia: Your zine is unreasonably charming

[07:53:20.0054] <yulia>
aah thank you

[07:53:22.0874] <yulia>
FULL PANIC MODE

[08:02:51.0683] <jandem>
I always like how positive the commenters are

[08:03:22.0062] <jandem>
 * I always like how positive the chat comments are

[08:15:09.0793] <jandem>
 * I always like how positive the chat comments are on there

[08:31:34.0552] <ampdot>
> <@sfink:mozilla.org> ampdot: what OS are you on? I could do pushes to our try server in order to make builds with small patches for you to try. But I wanted to eg tag tenured promotions with the pid to keep them separate, it'd be nice if didn't have to worry about making it portable.

I'm on macOS. I could spin up a GUI'd Linux VM, though.

[08:33:49.0776] <sfink>
can you run the browser in https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/cDPRs04hTIGERO1G_ts1EQ/runs/0/artifacts/public/build/target.tar.gz ?

[08:34:13.0457] <sfink>
(that's the link from the try push I sent earlier)

[08:34:44.0995] <ampdot>
Thank you for your kindness 😃

[08:34:46.0871] <sfink>
osx is fine. Windows is where I worry about portability of quick hacks.

[08:34:47.0848] <ampdot>
I see the patch prints a pointer to the moved memory location. Mind my noobishness, how would I turn that pointer into an object description? (preferably with allocation stack?)

[08:35:06.0619] <sfink>
My idea is that you'd pair this with a heap dump

[08:35:10.0273] <sfink>
no allocation stacks, sadly

[08:35:25.0186] <sfink>
but the heap dump will show you the properties, for example.

[08:35:33.0223] <sfink>
and the constructor, though you have to chase a couple of links to get there

[08:36:01.0223] <sfink>
for allocation stacks, we'd have to somehow incorporate the metadata builder stuff

[08:36:06.0180] <ampdot>
Interesting. I'm opening the binary you sent (need to bypass macos' gatekeeper)

[08:38:15.0580] <froydnj>
huh, no jit-reviewers group in phab?

[08:39:57.0804] <tcampbell>
no, we attempted at one point, but notifications weren't working out so we removed group

[08:41:19.0150] <ampdot>
thank you for the information, it will still useful without allocation stacks
I got the tenured logging to work.

[08:41:38.0321] <ampdot>
I'm trying it on a real version of the app I want to debug now

[08:42:35.0732] <ampdot>
I am getting duplicate addresses-- does that mean an object is being logged twice or two different objects were moved to the same memory location?

[08:42:57.0044] <ampdot>
 * ~~I am getting duplicate addresses-- does that mean an object is being logged twice or two different objects were moved to the same memory location?~~

[08:43:11.0055] <ampdot>
 * <strike>I am getting duplicate addresses-- does that mean an object is being logged twice or two different objects were moved to the same memory location?</strike>

[08:43:49.0091] <sfink>
huh. I wouldn't expect that. The only way that happens is with duplicate strings, which can be tenured to the same thing.

[08:43:58.0763] <sfink>
but I'm skeptical that would happen much

[08:44:17.0170] <ampdot>
 * <strike>I am getting duplicate addresses-- does that mean an object is being logged twice or two different objects were moved to the same memory location?</strike> (I misread the addresses, my bad)

[08:44:27.0206] <sfink>
if a major GC discarded some stuff, the addresses would get reused

[08:45:55.0021] <ampdot>
sorry for my need for handholding, but, how would I get a heap dump with pointers from within a browser? (does the browser's debugger's own heap snapshot mechanism work?)

[08:46:46.0491] <sfink>
Go to about:memory. There's something like "dump concise log" that should work.

[08:47:01.0347] <mccr8>
Under Save GC & CC logs

[08:47:26.0388] <mccr8>
I think the heap snapshot stuff won't give you pointers, as it is higher level

[08:54:42.0166] <ampdot>
I grepped the verbose and concise logs from about:memory, and I see descriptions of the objects there, but I don't see any properties (keys and values) for each JavaScript object. How would I get those properties?

[08:55:19.0281] <sfink>
I think you have to look through the shape

[08:55:22.0618] <sfink>
let me look at a random dump

[08:55:43.0263] <mccr8>
ampdot: the first line describes the object, then the ">" lines after it are fields

[08:55:56.0284] <mccr8>
it only shows properties that have pointers in them, though.

[08:56:04.0637] <ampdot>
(are you asking for a heap dump from me?)

[08:57:03.0338] <mccr8>
I think he's just looking at one of his own just to remember the format.

[08:57:16.0551] <ampdot>
> <@mccr8:mozilla.org> I think he's just looking at one of his own just to remember the format.

(yeah, just making sure)

[08:57:29.0533] <sfink>
yeah. It's kind of painful. You'd have to script this.

[08:57:42.0180] <sfink>
starting from an object pointer, you look at the `shape` under it

[08:58:02.0993] <sfink>
each `shape` will have a single `propid`

[08:58:14.0270] <sfink>
looking up that `propid` should get you to the string name of the property

[08:58:28.0826] <sfink>
it's all very raw

[08:58:29.0311] <ampdot>
what is "group"?

[08:58:47.0347] <mgaudet>
> <@tcampbell:mozilla.org> no, we attempted at one point, but notifications weren't working out so we removed group

Yeah, that was pre-phabricator.  Post phabricator we ought to take another stab at it.

[08:59:04.0013] <mccr8>
https://paste.mozilla.org/7OO3vTVM

[08:59:05.0456] <sfink>
oh, sorry. And to get to the next property, you'd follow the `parent` link

[08:59:09.0381] <mccr8>
Here's an example of a single object.

[08:59:33.0790] <mccr8>
That one's a little weird because it is really used for certain local variables, but you can see the "property" names like "getInnerWindowID"

[08:59:58.0521] <ampdot>
> <@mccr8:mozilla.org> https://paste.mozilla.org/7OO3vTVM

is that an object shape?

[09:00:21.0203] <mccr8>
I have a bunch of GC log parsing scripts here: https://github.com/amccreight/heapgraph/tree/master/g

[09:00:44.0119] <mccr8>
the function in parse_gc_graph will turn a log file into a python graph you can further analyze.

[09:01:08.0110] <mccr8>
ampdot: no, that's a scope object.

[09:01:16.0389] <sfink>
`group` is for "type inference", which will be going away ~soon.

[09:01:54.0907] <mccr8>
You shouldn't actually need to look at the shapes or groups yourself, most of the time, if you just want property names.

[09:01:55.0431] <sfink>
it is a bit of a guess as to what sort of object this could be

[09:03:03.0092] <ampdot>
I wonder how much bash-fu it would take to print the properties of each object without pulling in a big library. (Or is there [part of ] a script in the repo you linked for converting a gc pointer into an object's properties?)

[09:06:01.0977] <ampdot>
Interesting, I grepped this pointer in the log files, and I found property names in GC and _CC_ logs. 

[09:06:17.0055] <ampdot>
Why would JavaScript objects end up in cycle collector logs?

[09:07:15.0968] <mccr8>
The format is pretty simple. Using my script would just save you writing the regexes yourself.

[09:07:40.0377] <mccr8>
The CC has to know about JS because cycles can go through JS and C++

[09:07:46.0639] <sfink>
mccr8: isn't your example some kind of scope or environment object thing, not actual object properties?

[09:08:11.0570] <sfink>
though a dictionary mode shape might look like that too, I don't know

[09:08:12.0242] <mccr8>
sfink: yes. but actual object properties show up in the same way and I couldn't find a better example.

[09:08:50.0350] <mccr8>
ampdot: keep in mind that properties that have scalar values don't show up in the GC log, so if you want to have a special marker value, you have to do something like "x.blahBlah = {}" and not "x.blahBlah = 3"

[09:09:12.0961] <mccr8>
Though having a mode that dumps scalar properties might be cool.

[09:10:08.0035] <sfink>
I did a dumb shell test case that I can't find now, something like `js -e 'obj = { glubble: 5, globble: 7 }; minorgc(); dumpHeap("/tmp/heap.dump"); dumpObject(obj)'`

[09:10:22.0616] <sfink>
for that, I had to chase through shapes

[09:11:03.0711] <mccr8>
right, because you used a scalar value for the property

[09:11:21.0042] <emilio>
tcampbell: ping?

[09:12:05.0835] <ampdot>
I have a pointer "0xd2b2704f380," and when I grep logs, it shows "0xd2b2704f380 G getter" and sometimes "0xd2b2704f380 G Uint8Array 0x11dc51000." Does that mean it's a Uint8Array?

[09:13:28.0476] <sfink>
cool, things I learn

[09:14:07.0921] <sfink>
uh... that seems weird. Are they from the same process? Or maybe the first was collected and the address reused.

[09:15:08.0063] <sfink>
by the way, I don't know if any of this will actually be useful in tracking down your real problem. It's more like "this is what we have right now".

[09:16:24.0972] <mccr8>
yeah, it probably means the address was reused. You'll want the most recent log.

[09:17:00.0773] <ampdot>
> <@sfink:mozilla.org> by the way, I don't know if any of this will actually be useful in tracking down your real problem. It's more like "this is what we have right now".

hmmm, if I do an intense in-game action that allocates a bunch of objects, the pools should be filled, so if I do the in-game action again but less intense, I should get a list of things that I forgot to pool

[09:18:16.0646] <ampdot>
Hmmm, this pointer I followed has "0xd2b2704fd40 [gc] JS Object (Function - set offset-rotate)" and " 0xd2b2704fd40 G setter"

[09:19:15.0727] <ampdot>
Oh-- I'm probably in the wrong process-- how do I tell the PID of a tab?

[09:21:09.0277] <sfink>
I usually do it by looking at the about:memory report (click the leftmost "Measure" button) and finding my url

[09:21:13.0116] <sfink>
there may be a better way

[09:21:23.0925] <iain>
If you are on nightly you can hover over the tab and see the pid

[09:22:05.0750] <sfink>
ooh, I didn't know about that. But then, I use Tree Style Tabs and its tabs don't do that. And I forget the top bar is still there.

[09:23:28.0947] <sfink>
ok, I'm out for a bit. Shopping day. Time to brave the zombie apocalypse again.

[09:24:09.0852] <ampdot>
see you and thank you all

[09:24:24.0034] <zombie>
/me whistles

[09:25:17.0575] <iain>
yulia: If there is anything that other people can do to help ease the workload of these streams, let us know!

[09:27:40.0676] <yulia>
iain: thanks! ugh i think half of it is the amount that i don't know

[09:27:49.0863] <yulia>
answering all the dumb questions i come up with is a huge help though

[09:27:59.0310] <yulia>
esp. when it comes to finding information, i had a hard time with that today

[09:28:03.0080] <froydnj>
> <@tcampbell:mozilla.org> no, we attempted at one point, but notifications weren't working out so we removed group

what notifications weren't working out, ooc?

[09:28:09.0489] <yulia>
i was posting in js-frontend but i can do that here next time

[09:28:17.0774] <yulia>
i have _the dumbest questions_ not gunna lie

[09:28:52.0364] <tcampbell>
emilio: pong in 20min

[09:31:08.0407] <yulia>
how do computers, even

[09:31:20.0105] <iain>
The great mystery of our time

[09:31:48.0291] <froydnj>
magnets, obvs.

[09:32:08.0882] <yulia>
and sand

[09:32:14.0470] <yulia>
why did we teach sand to think

[09:32:18.0054] <yulia>
im not sure it was a good idea..

[09:33:13.0199] <froydnj>
sentient sand sounds like a dune spin-off

[09:33:27.0964] <jorendorff>
sounds like a magic card to me

[09:41:52.0519] <mgaudet>
> <@froydnj:mozilla.org> what notifications weren't working out, ooc?

This was pre-phab, we had a special jit-bugs alias we were using; but the idea had been we'd follow the activity of the jitbugs alias in bugzilla, but following a user's review requests at the time wasn't correctly generating notifications. We should do this again in the phab groups way

[09:57:39.0871] <nbp>
yulia: one idea for a future stream, would be how to improve JS error documentation: https://nbp.github.io/arewedocumentedyet/

[09:57:52.0187] <yulia>
oh nice

[09:58:04.0720] <yulia>
ohhhh this is  good

[09:58:19.0711] <yulia>
would these work as good entry bugs?

[09:58:28.0640] <nbp>
These are the key code which appeared in the devtool console.

[09:58:34.0963] <yulia>
maybe i could do one, and then have everyone who wants to take one on?

[09:58:48.0469] <yulia>
and walk people through doing their first patch, etc etc?

[09:59:10.0614] <nbp>
This is mostly about reading code, and figuring out how to trigger these error cases.

[09:59:39.0840] <nbp>
and writing documentation on MDN.

[10:00:30.0014] <yulia>
hmm ok

[10:01:06.0014] <nbp>
An easy one might be  JSMSG_SYMBOL_TO_STRING

[10:03:40.0123] <nbp>
and to make the example even better, is to look on the internet whether someone asked about the printed error message.

[10:04:02.0148] <nbp>
I found a few example of bad code while digging issues on github.

[10:05:14.0019] <nbp>
yulia:  I think these might be good first bugs for people who want to get in the code base, but might be frighten by making modifications.

[10:05:33.0673] <yulia>
ok, brilliant

[10:05:37.0525] <yulia>
ill  see what i can do

[10:05:47.0519] <yulia>
because thats exactly what we need

[10:05:53.0691] <yulia>
something to help people get comfortable

[10:06:11.0429] <yulia>
and there will always be new people joining

[10:06:25.0656] <nbp>
And new error messages to document :P

[10:06:49.0619] <nbp>
(what ios new is that DOM error keys are also being listed there!)

[10:06:56.0597] <nbp>
 * (what is new is that DOM error keys are also being listed there!)

[10:08:14.0626] <evilpie>
ah interesting, my fault

[10:09:49.0685] <evilpie>
cool page though. Hadn't seen this before

[10:11:02.0374] <ptomato>
> <@mccr8:mozilla.org> ampdot: keep in mind that properties that have scalar values don't show up in the GC log, so if you want to have a special marker value, you have to do something like "x.blahBlah = {}" and not "x.blahBlah = 3"

strings do, so I've successfully done things like `x.__heapgraph_name = 'foo'`

[10:46:23.0639] <RyanVM>
lth: hi, can you please r+ bug 1648623 soon? The merge is Monday

[10:46:25.0993] <botzilla>
https://bugzil.la/1648623 — ASSIGNED (rhunt) — Perma SM asserts.js:65:27 Error: Assertion failed: expected /ref/, got at offset 25: bad type when Gecko 79 merges to Beta on 2020-06-29

[10:47:09.0855] <RyanVM>
 * lth: hi, can you please r+ bug 1648623 when you get a chance? The merge is Monday and we'd like to get another simulation run in as soon as possible ahead of that

[10:50:13.0639] <ampdot>
@sfink just want to confirm, so that I don't go on a wild goose chase, it only prints when an object is tenured to the oldest generation, correct?

[10:50:59.0771] <ampdot>
 * sfink just want to confirm, so that I don't go on a wild goose chase, it only prints when an object is tenured to the oldest generation, correct?

[10:52:10.0296] <RyanVM>
 * lth: hi, can you please r+ bug 1648623 and bug 1648748 when you get a chance? The merge is Monday and we'd like to get another simulation run in as soon as possible ahead of that

[10:52:11.0609] <botzilla>
https://bugzil.la/1648748 — ASSIGNED (rhunt) — Perma SM TEST-UNEXPECTED-FAIL | js/src/jit-test/tests/wasm/limits.js | /builds/worker/checkouts/gecko/js/src/jit-test/lib/wasm.js:27:9 CompileError: at offset 12: expected 'funcref' element type when Gecko 79 merges to Beta on 2020-06-29

[10:52:21.0545] <Ryan Hunt>
RyanVM: I'm guessing lth is out for the weekend. the change is very simple, are r=me's still a thing? otherwise I can try to find another reviewer

[10:53:32.0747] <RyanVM>
Ryan Hunt: D81367 looks trivial enough to self-review and land, not as sure about D81368

[10:57:11.0960] <Ryan Hunt>
RyanVM: I don't think you actually need D81368, the issue there is that test requires reference-types to work, but reference-types is now enabled on beta. the central-as-beta simulation that found that issue was before the reftypes flag was flipped, I would guess new runs will not have that issue

[10:57:24.0826] <RyanVM>
even better!

[10:57:46.0119] <RyanVM>
Ryan Hunt: which bug enabled reference-types?

[10:58:56.0093] <RyanVM>
Ryan Hunt: I stole the review for bug 1648623

[10:58:59.0678] <botzilla>
https://bugzil.la/1648623 — ASSIGNED (rhunt) — Perma SM asserts.js:65:27 Error: Assertion failed: expected /ref/, got at offset 25: bad type when Gecko 79 merges to Beta on 2020-06-29

[10:59:21.0804] <Ryan Hunt>
RyanVM: bug 1637884 shipped reference-types

[10:59:23.0214] <botzilla>
https://bugzil.la/1637884 — RESOLVED (rhunt) — Reference types: Ship it

[10:59:25.0899] <RyanVM>
thanks!

[11:00:28.0992] <Ryan Hunt>
RyanVM: I'll land that fix in a second, need to de-capitalize 'WasmGcEnabled()' in the patch

[11:00:44.0797] <RyanVM>
whoops, I lando-queued it already :\

[11:00:48.0779] <RyanVM>
will backout

[11:01:10.0924] <RyanVM>
actually, I wonder if you update the rev now what'll happen

[11:01:25.0466] <RyanVM>
autoland's closed

[11:01:46.0050] <Ryan Hunt>
RyanVM: we'll see, uploading now

[11:01:50.0214] <RyanVM>
heh

[11:04:00.0610] <ampdot>
 * sfink just want to confirm, so that I don't go on a wild goose chase, it only prints when an object is tenured to the oldest generation, correct?
The logs printed pointers to Uint8Arrays. I was confused since the only part of the codebase and its dependencies that allocates Uint8Arrays is the network layer. I used ".TAINTED_DECODE = 'true'" to mark the decoder's Uint8Array. It doesn't seem like the Uint8Array in the decoding function escapes it. The decode is fully synchronous. Despite this, "TAINTED_DECODE" appeared as a property of a pointer printed by tenured object logging.

[11:05:10.0221] <Ryan Hunt>
RyanVM: It's uploaded now. there's no way to cancel a pending landing right? sorry for the mess here

[11:06:13.0102] <RyanVM>
Yeah, can't cancel once it's queued. Can only backout after landing. And nothing to apologize for, I'm the one who jumped the gun!

[11:06:22.0160] <RyanVM>
I'm honestly curious to see what'll happen

[11:08:03.0889] <tcampbell>
jorendorff: ping?

[11:08:31.0824] <jorendorff>
oops, omw

[11:47:39.0240] <Ryan Hunt>
RyanVM: ah, looks like it landed the bad version

[11:47:48.0876] <RyanVM>
boo-urns

[11:47:53.0670] <RyanVM>
i'll backout and land the right one

[11:48:29.0251] <Ryan Hunt>
thank you!

[11:55:28.0781] <RyanVM>
done

[11:58:47.0051] <mccr8>
ampdot: yes, the GC log only includes the tenured heap. I don't know of a way to log the nursery but it might be possible.

[12:07:01.0096] <ampdot>
> <@mccr8:mozilla.org> ampdot: yes, the GC log only includes the tenured heap. I don't know of a way to log the nursery but it might be possible.

I matched a printed pointer up with the logs, and underneath the object's log was the property name "TAINTED_DECODE," and I put ".TAINTED_DECODE = 'true'" on and only on the decoding function's Uint8Array. I swear that Uint8Array is not being escaped outside of the function. It seems unlikely that SM would run out of nursery space and move the Uint8Array to the old space, unless it decides to allocate all (large?) Uint8Arrays on the old space heap immediately?

[12:07:50.0576] <ampdot>
> <@mccr8:mozilla.org> ampdot: yes, the GC log only includes the tenured heap. I don't know of a way to log the nursery but it might be possible.

 * I matched a printed pointer up with the logs, and underneath the object's log was the property name "TAINTED_DECODE," and I put ".TAINTED_DECODE = 'true'" on and only on the decoding function's new Uint8Array. I swear that Uint8Array is not being escaped outside of the function. It seems unlikely that SM would run out of nursery space and move the Uint8Array to the old space, unless it decides to allocate all (large?) Uint8Arrays on the old space heap immediately?

[12:07:57.0584] <mccr8>
ampdot: yes, it is possible that it does that. I don't know exactly how that works.

[12:08:31.0701] <mccr8>
I'm not familiar with the way the nursery works.

[12:11:32.0135] <mccr8>
we might do a minor collection before we get the GC log, which could throw things off.

[12:16:43.0509] <ampdot>
The Uint8Array is created directly from the ArrayBuffer passed by the native browser's WebSocket.onmessage. I wonder where those ArrayBuffers are stored. If stored on the JavaScript old space heap, that sounds like a huge performance hit for all websocket apps.

[12:19:41.0818] <ampdot>
I hear another game of the same genre-- fast paced websocket game-- lags in Firefox much more in Chrome. Except, that game is written in C++ with asm.js.

[12:38:28.0153] <RyanVM>
Ryan Hunt: https://treeherder.mozilla.org/#/jobs?repo=autoland&resultStatus=testfailed%2Cbusted%2Cexception&classifiedState=unclassified&revision=1f9316f122778f707e1197f722da026b4746e1c2&selectedTaskRun=YZm-uy7_Se6cE_Lxp_dxAg.0 :(

[12:39:20.0756] <RyanVM>
*sigh* it pulled the same diff as the first time

[12:45:11.0179] <ampdot>
how do I see the contents of an array from a gc log?

[12:48:06.0475] <mgaudet>
I note that there's `HasOwnDataPropertyPure` which uses `LookupIOwnPropertyPure` -- outside of the DataProperty part of that (which I get) what's the Pure portion of these functions signify again? Is it just that it won't fire Proxy and resolve hooks? (I think I'm OK with proxy hooks, as I have them special cased for private fields. I'm less sure about resolve hooks... what are the rules around them?) 

[12:48:55.0100] <mccr8>
ampdot: I think they show up in the same way as a property. Which is to say, they won't show up unless they contain GC things like strings and objects.

[12:49:02.0467] <iain>
Generally `Pure` = "has no side effects, including GC"

[12:49:29.0133] <iain>
 * mgaudet: Generally `Pure` = "has no side effects, including GC"

[12:50:07.0727] <mccr8>
the name of the "property" will indicate that it is an array element, IIRC

[12:50:34.0249] <mgaudet>
Ok. I guess I'm a tiny bit concerned about my implementation calling HasOwnProperty twice and that potentially causing issues. 

[12:51:17.0451] <mgaudet>
mostly around the non-proxy non-gc potential side-effects of HasOwnProperty (Which I don't really know what they are :P )

[12:51:44.0260] <iain>
mgaudet: I believe we return false if we can't do it without side effects, and the `Pure` was part of tcampbell's quest to make it more obvious when we were deviating from our "return false on failure" convention

[12:52:09.0362] <iain>
So it should be safe to call HasOwnPropertyPure multiple times

[12:52:42.0488] <mgaudet>
(no such call; there's `HasOwnDataPropertyPure`, but I was thinking of adding `HasOwnPropertyPure`) 

[12:53:15.0507] <iain>
Oh, I see

[12:53:36.0386] <iain>
LookupPropertyPure?

[12:53:55.0623] <mgaudet>
LookupOwnPropertyPure I guess 

[12:55:06.0560] <iain>
Oh, right, I guess private fields don't use the prototype chain?

[12:55:31.0996] <mgaudet>
Correct

[13:26:22.0644] <sfink>
ampdot: yes, dumpHeap only dumps out stuff in the old (tenured) generation. (We only have 2 generations, the nursery and the tenured heap.)

[13:27:08.0833] <sfink>
and ArrayBuffers are pretenured (allocated directly into the old generation). Partly because they have finalizers, and for the most part, anything with a finalizer has to go straight to the tenured heap.

[13:27:41.0803] <sfink>
though for small typed arrays, the ArrayBuffers are created lazily, and the typed array *can* be nursery-allocated.

[13:28:04.0925] <sfink>
mccr8: we can't dump the contents of the nursery because the nursery isn't iterable.

[13:28:44.0007] <sfink>
we bump allocate whatever random crap we want to put into it, and on a minor GC trace through everything reachable, moving it to the tenured heap, then dump the entire nursery in one go

[13:28:57.0107] <sfink>
(which is the main reason finalizers prevent nursery allocation; we don't know what we're dumping)

[13:29:03.0815] <Waldo>
Mm, ArrayBuffers.

[13:29:27.0695] <Waldo>
I can't be the only person in the world who occasionally goes back and reads particularly pleasing old bugs and patches for a pick-me-up, can I?

[13:29:38.0641] <sfink>
ArrayBuffers happen to be Waldo's most favoritest part of the engine, so he would be overjoyed to answer any questions you might have about them

[13:30:06.0951] <ampdot>
I'm not getting any good data from the tenured buffer printer, there's arrays with no property names and tons of ArrayBuffers that are passed from the WebSocket

[13:30:58.0446] <sfink>
array property names tend to be pretty boring. Things like '0', '1', and sometimes even '2'.

[13:31:01.0565] <ampdot>
> <@sfink:mozilla.org> and ArrayBuffers are pretenured (allocated directly into the old generation). Partly because they have finalizers, and for the most part, anything with a finalizer has to go straight to the tenured heap.

well, no wonder major GC on JS-based .io games, you're constantly allocating kilobytes of old space memory for every packet, forcing major GCs

[13:31:32.0574] <ampdot>
My arrays had no property names at all, so no luck there

[13:31:44.0835] <ampdot>
I'm also getting objects with property names that I set only in places where I only create the object once

[13:31:49.0922] <ampdot>
 * I'm also getting objects with property names that I set only in places where I only create the object once, ever

[13:32:09.0760] <sfink>
well, element indexes wouldn't normally show up as property names. But if the array stored GC things, they should show up in the dump.

[13:32:30.0625] <ampdot>
Agar.io -- the simplest, original .io game-- sends 4kb/s of data. For more complex games, the bandwidth usage is probably double or triple.

[13:33:09.0101] <sfink>
most of that data will be malloc data, which won't trigger GCs as early, but yeah I don't think it really changes the picture you're describing

[13:33:22.0287] <ampdot>
 * Agar.io -- the simplest, original .io game-- sends 4kb/s of data. For more complex games, the bandwidth usage is probably double or triple.
for reference, one version specifically tested not to drop frames under any circumstance in Chrome (getting 28.9fps at worst), got 25FPS in Firefox

[13:33:53.0712] <sfink>
can you run for a little while with the env var MOZ_GCTIMER set to a filename, to see what is triggering the GCs?

[13:34:28.0060] <ampdot>
ok

[13:34:40.0865] <sfink>
this is interesting to me. I started implementing nursery-allocatable ArrayBuffers once, but it turned out to be not at all the right thing for what I was trying to fix.

[13:36:02.0930] <sfink>
it's doable by breaking the rules of the nursery -- minor GC time is supposed to depend only on the amount of live data, independent of the amount of dead data. But if you keep a collection of allocated stuff, you can iterate over it after a minor GC.

[13:36:39.0432] <ampdot>
you could keep native arraybuffers on the native heap, but I know nothing about Firefox's architecture to know if that would be feasable

[13:36:44.0587] <sfink>
for ArrayBuffers, you have to be careful because we have a whole bunch of different types, and you only want to play these tricks with the simplest ones. But it's doable.

[13:37:09.0302] <sfink>
what's a "native arraybuffer"?

[13:37:10.0727] <ampdot>
 * Agar.io -- the simplest, original .io game-- sends 4kb/s of data. For more complex games, the bandwidth usage is probably double or triple.
for reference, one version specifically tested not to drop frames under any circumstance in Chrome (getting 28.9fps at worst), got 25FPS in Firefox [this is a 30hz high resolution monitor]

[13:37:16.0643] <iain>
ampdot: The question is how you free those buffers if the ArrayBuffer doesn't get tenured

[13:37:38.0694] <iain>
One of the design goals of the nursery is that we can copy the live values out, and ignore all the dead ones

[13:37:40.0504] <ampdot>
> <@sfink:mozilla.org> what's a "native arraybuffer"?

an arraybuffer allocated or passed in by the embedder, such as an arraybuffer returned by a websocket

[13:38:23.0571] <ampdot>
> <@sfink:mozilla.org> can you run for a little while with the env var MOZ_GCTIMER set to a filename, to see what is triggering the GCs?

give me a moment, I just ran out of system storage

[13:38:49.0629] <sfink>
oh, the embedder can sort of do that. For the data, at least -- we call it an external ArrayBuffer. You have to manage lifetimes carefully.

[13:39:29.0398] <sfink>
alternatively, you could run with the Gecko Profiler. It will capture the needed GC data.

[13:39:48.0242] <sfink>
if you're tuning performance, it's probably a good thing to get comfortable with

[13:40:11.0102] <ampdot>
I don't see a way to see frame end and frame start markers for Gecko Profiler

[13:40:39.0554] <ampdot>
for chrome devtools, I tend to zoom in on a frame that missed a deadline and look at what took up the most time

[13:41:37.0402] <sfink>
if it missed a frame by far enough, it'll show up as a red bar that you can zoom the whole view to

[13:41:59.0446] <ampdot>
 * for chrome devtools, I tend to zoom in on a frame that missed a deadline and look at what took up time

[13:42:19.0061] <ampdot>
how much is 'by far enough'? 1ms? 100ms?

[13:44:21.0835] <sfink>
mstange: (I should probably look this up, but if you're around, maybe you can say?)

[13:44:38.0477] <sfink>
plus, you'd know how to do frame-based stuff, which I haven't paid attention to

[13:46:41.0453] <sfink>
https://profiler.firefox.com/docs/#/./guide-ui-tour?id=timeline just says "a long time". That's really a different sort of thing than the dropped frames you're looking at.

[13:47:37.0138] <sfink>
I've been adding some instrumentation to answer those sorts of questions when you're mocking up a frame-based application using the JS shell, but that's not going to help here.

[13:49:26.0381] <sfink>
zooming out a bit, one way to avoid missing frames is to never do a major GC. Another way is for the major GC slices to be fast enough that you have enough time for some GC work as well as your application within the inter-frame time.

[13:49:46.0538] <ampdot>
or, you could have an embedder's arraybuffer be refcounted, i.e. each js-side arraybuffer is really a handle that when collected decrements the refcount

[13:50:13.0700] <sfink>
by default, we should be trying to keep GC pauses to 5ms or less. Though I'd want to verify that you're getting the right budget in your case.

[13:50:26.0021] <sfink>
(that'll also be in both the profiler data, or the MOZ_GCTIMER data)

[13:50:58.0978] <sfink>
yeah, the engine supports refcounted arraybuffers, but I don't think Gecko uses them

[13:52:22.0724] <ampdot>
I have the output of MOZ_GCTIMER, but I only see 3 gc entries, which doesn't seem to be the write number. Is there a special way of killing the process so logs are flushed? sfink 

[13:53:12.0083] <sfink>
if you can produce a profile that shows that the arraybuffer stuff is a problem, we can certainly look into doing something about it

[13:53:49.0387] <ampdot>
 * I have the output of MOZ_GCTIMER, but I only see 3 gc entries, which doesn't seem to be the right number. Is there a special way of killing the process so logs are flushed? sfink

[13:53:51.0132] <sfink>
hm. I think it flushes after every GC. Backing up, how do you know that you're running into a problem with GCs?

[13:54:47.0693] <sfink>
yes, it flushes: https://searchfox.org/mozilla-central/source/js/src/gc/Statistics.cpp#1020

[13:56:01.0506] <ampdot>
Wait, no, I simply looked in the wrong folder, whoops

[13:57:05.0934] <sfink>
I'm not sure how it works with the multiple processes, honestly.

[13:57:47.0716] <sfink>
oh, it opens in append mode, so they'll all be smushed together

[14:05:31.0936] <ampdot>
I can't get logging to work. I ran firefox from within sudo -H bash (sudo -H root shell) and pointed MOZ_GCTIMER at a file inside my non-root home directory, and nothing gets logged to the file. I tried it with a pre-created file and without.

[14:06:01.0169] <sfink>
if you can get a profile, that'd be easier for me to look at anyway

[14:06:08.0216] <sfink>
and it has pretty much a superset of the info

[14:06:10.0708] <mgaudet>
Do we have a jsapi function that answers the question "Would doing `DefineProperty` succeed or would it throw?" 

I thought I'd seen this, but I can't seem to find  anything similar, so I could be wrong.  

[14:06:13.0981] <ampdot>
I shall try stdout with a shell file redirect

[14:06:28.0103] <sfink>
oh. It might be because of sandboxing.

[14:06:48.0679] <sfink>
you could set `MOZ_DISABLE_CONTENT_SANDBOX=1`

[14:06:55.0433] <sfink>
though your stdout thing should work as well

[14:07:13.0301] <ampdot>
Still nothing, guess I'll use Gecko Profiler

[14:12:04.0163] <mgaudet>
To answer my own question, I don't think this is possible. Which is irksome, but I shall have to press on. 

[14:12:22.0984] <ampdot>
which gecko profiler categories should I enable so you can get the data you need? I don't want method names appearing in the file I send you. sfink 

[14:34:21.0297] <sfink>
Hm. I think the GC stuff is always included? I think to eliminate method names, you'd probably have to unselect "JavaScript".

[14:35:04.0394] <sfink>
at least, I don't *think* anything else would store method names, but I don't know for sure

[14:35:28.0880] <sfink>
there's also an option to share an anonymized profile, I think, though I don't know what anonymous means there

[14:35:36.0511] <sfink>
/me skims the docs again

[14:38:59.0746] <sfink>
hm, no, it looks like you can only redact "resource URLs and paths". So turning off JavaScript stacks is probably the only option.

[14:40:06.0175] <mgaudet>
confession: Inspired by Iain, I think I have a much nicer way to make my private fields inline caches nice and safe; will have to clean it up tho, and I am out of time. 'See' everyone Thursday next week: 🇨🇦 👋

[14:40:10.0469] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:41:07.0610] <sfink>
happy pto! Vacationing to the other side of the couch?

[14:43:01.0404] <sfink>
I just profiled agar.io, just to see. Very few major GCs. But most slices had around a 49ms budget, which means we're not treating it as an animation.

[16:36:37.0946] <ampdot>
the gc pause time for major gc is proportional to the number of live objects, not the number of dead objects, so this 'websocket arraybuffers spawn on old heap' thing gives all JavaScript code an artificial disadvantage. Perhaps the game would be faster if we compiled a JS interpreter QuickJS to WASM and ran it inside there.

[16:39:15.0830] <ampdot>
Could a possible workaround be to use Blob (WebSocket.binaryType = "blob") and ReadableStream instead? Would those allocate on old space?


2020-06-27
[17:26:12.0759] <sfink>
I would want to prove that arraybuffer-induced major GCs are the culprit in the first place. Incremental major GC slices don't have to be slow, though there are a number of reasons why they can be. But this might be a scheduling thing -- I'm skeptical that we give the right budget in all cases.

[17:27:23.0594] <sfink>
if you have a profile, go to the Marker Chart, and hover over several entries on the GCSlice row. Look at the time in the top left of the popup, as well as the budget listed.

[17:28:15.0348] <sfink>
eg I have one here with budget of 5ms that took 19ms. Scheduling isn't going to help that. But I also see several with a budget of 49ms.

[19:20:31.0855] <loganfsmyth>
Should a slot with a PrivateValue be preferred over JSCLASS_HAS_PRIVATE these days? Is PrivateValue meant to replace HAS_PRIVATE eventually?

[23:37:39.0628] <jandem>
yeah probably best to use a PrivateValue, it's more flexible (you can easily add a second slot if needed) and JSCLASS_HAS_PRIVATE is a bit obscure

[06:33:07.0426] <ampdot>
Yesterday Riot failed to receive messages while still letting me send them 🙃

[06:35:17.0548] <ampdot>
> <@sfink:mozilla.org> I just profiled agar.io, just to see. Very few major GCs. But most slices had around a 49ms budget, which means we're not treating it as an animation.

agar.io is a WASM/asm.js-based game. It doesn't allocate GC memory. Try slither.io

[06:35:58.0696] <ampdot>
> <@sfink:mozilla.org> I would want to prove that arraybuffer-induced major GCs are the culprit in the first place. Incremental major GC slices don't have to be slow, though there are a number of reasons why they can be. But this might be a scheduling thing -- I'm skeptical that we give the right budget in all cases.

In all versions of my game, non-incremental GC repeatedly appeared in profiles.

[06:37:15.0205] <ampdot>
Sorry, yesterday I didn't see any replies, so I didn't reply to your messages sfink :/


2020-06-28
[16:10:47.0875] <dereknongeneric>
it was mentioned that there was a way to get paired w/ a mentor in yulia's first Compiler Compiler stream — is that still possible? I would be interested in having someone show me around the codebase and possibly help answer a few question I had while trying to map my understanding of Java (bytecode & VM) to my understanding of SpiderMonkey 🙏

[16:36:09.0673] <arai>
sure.  also, if you have questions, feel free to ask here

[16:48:02.0562] <dereknongeneric>
awesome, I'm in the process of making a table to help me identify gaps in my knowledge (there are few empty cells already). I'll share it in a moment :)


2020-06-29
[17:06:14.0858] <ampdot>
There's the output of MOZ_GCTIMER from the latest alpha build of my game.

[22:16:10.0944] <DerekNonGeneric>
narrator: he shared it w/ aria and discovered that there

[22:16:32.0266] <DerekNonGeneric>
 * narrator: he shared it w/ aria and discovered that there's no equivalent to `javac` from Java

[22:20:50.0767] <DerekNonGeneric>
 * narrator: he shared it w/ aria and discovered that there's no equivalent to `javac` from Java

(now wonders if it's possible to point the bytecode emitter at a file to save this intermediate representation)

[22:22:31.0356] <DerekNonGeneric>
 * narrator: he shared it w/ aria and discovered that there's no equivalent to `javac` from Java
(now wonders if possible to point bytecode emitter at a file to save this intermediate representation to be ahead-of-time compiled or just-in-time compiled at a later time)

[22:27:56.0350] <DerekNonGeneric>
 * narrator: he shared it w/ aria and discovered that there's no equivalent to `javac` from Java
(now wonders if it's possible to point the bytecode emitter at a file or serialize the bytecode cache to save this intermediate representation for later)

[23:25:30.0943] <jandem>
DerekNonGeneric: bytecode caching/serialization is possible with XDR (it's used in the browser for bytecode caching and some other things) but we'll be [making some](https://bugzilla.mozilla.org/show_bug.cgi?id=stencil-serdes) changes in that area soon

[01:27:58.0504] <DerekNonGeneric>
 * narrator: he shared it w/ arai and discovered that there's no equivalent to `javac` from Java
(now wonders if it's possible to point the bytecode emitter at a file or serialize the bytecode cache to save this intermediate representation for later)

[07:39:35.0829] <tcampbell>
jorendorff: ping?

[07:39:43.0308] <jorendorff>
tcampbell: pong

[07:40:31.0846] <tcampbell>
I'm trying to figure out how to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1647309 which trips https://searchfox.org/mozilla-central/rev/21f2b48e01f2e14a94e8d39a665b56fcc08ecbdb/js/src/debugger/Debugger.cpp#2574-2576

[07:41:01.0427] <tcampbell>
The issue is that on most error pathways in the async generator code, we close the generator

[07:41:24.0304] <tcampbell>
The naive fix is just `if (genObj.isClosed()) { continue; }`

[07:41:53.0669] <tcampbell>
but the stepperCount stuff is not very clear to me

[07:43:01.0365] <tcampbell>
Eg, It is possible the closed generator still has an `onStep` hook, but was closed without clearing it

[07:43:18.0691] <tcampbell>
jorendorff: ^

[07:43:59.0172] <tcampbell>
and a closed generator clears it's `callee` slot

[07:44:19.0065] <jorendorff>
tcampbell: Talk with loganfsmyth about it. There was an invariant regarding generator Debugger.Frames that I think changed recently

[07:44:50.0936] <tcampbell>
This traces back to https://bugzilla.mozilla.org/show_bug.cgi?id=1551176

[07:45:17.0156] <jorendorff>
Right, I just mean with regard to what the right fix is now

[07:45:39.0530] <tcampbell>
ah, got it

[07:46:38.0755] <loganfsmyth>
oh hii

[07:47:16.0293] <tcampbell>
Simplified testcase:
```js
const g = newGlobal({ newCompartment: true });
const dbg = new Debugger(g);

// Define async generator in debuggee compartment.
g.eval("async function* f() { }");

// Use onEnterFrame hook to create generatorFrames entry.
dbg.onEnterFrame = () => {};

// Trigger failure in AsyncGeneratorNext.
ignoreUnhandledRejections();
oomTest(function() { g.f().next(); });

// Trigger DebugAPI::onSingleStep to check generatorFrames.
dbg.onDebuggerStatement = frame => { frame.onStep = () => {}; }
g.eval("debugger");
```

[07:48:05.0493] <tcampbell>
I'm not sure if there is a variant without async or not, but I did get rid of the microtask queue from the original fuzz bug

[07:48:05.0758] <jorendorff>
The way I approach these is
- figure out what the invariant was supposed to be
- see if that invariant is at all workable (usually it is out of sync because two events we expect to coincide do not exactly coincide, either one is skipped sometimes or they can get separated in time, so it sometimes is the case that the invariant sucks and will just be an enduring headache to maintain)


[07:50:21.0970] <jorendorff>
tcampbell: i suspect from the testcase that this is about generator frame liveness, not about stepperCount in particular (?)

[07:52:00.0264] <loganfsmyth>
I'm gonna guess that that the generator is closed and the assertion should be inside the `if` after it

[07:52:48.0564] <tcampbell>
yes, the generator has been closed

[07:53:34.0110] <tcampbell>
closed generators make `callee` fail

[07:53:41.0620] <loganfsmyth>
Similar to https://bugzilla.mozilla.org/show_bug.cgi?id=1644699, there are _some_ cases where `generatorFrames` can contain a closed generator

[07:54:28.0083] <tcampbell>
ah, interesting

[07:55:31.0426] <loganfsmyth>
I'm curious what specific path causes it in the case of this test

[07:56:15.0677] <tcampbell>
I've got a whole lot of variants, but here is one example https://searchfox.org/mozilla-central/source/js/src/vm/AsyncIteration.cpp#396

[07:57:09.0285] <loganfsmyth>
cool, that's the same place that failed 1644699 by closing earlier than expected

[07:57:25.0206] <loganfsmyth>
I couldn't find any other branches when I looked into that one, so at least it's consistent

[08:23:56.0929] <bc>
I'm looking for people interested in helping test Bug 1486004 - Use run-as to eliminate rooting requirement for devices on a variety of unrooted devices. Anyone who has a build environment and has ever wanted to run our unittests on an unrooted phone are candidates. A wip patch is available in  https://phabricator.services.mozilla.com/D79650

[08:24:00.0886] <botzilla>
https://bugzil.la/1486004 — ASSIGNED (bc) — Support unrooted Android devices in our Unit tests

[08:26:16.0396] <tcampbell>
bc: Nice! I'll give it a try later today

[08:26:27.0089] <bc>
Thanks!

[09:51:11.0563] <sfink>
is there a typo in にわにはにわにわとり from yulia's summary? It's a wonderfully confusing sentence fragment, but I'm trying to understand if the "two" is really には as written or にわ as in the original sentence. (And if it's the former, if it's pronounced "niha" -- you can't particle-は twice in a sentence, can you?)

[09:51:42.0689] <ampdot>
sfink👋

[09:53:51.0233] <sfink>
ampdot: I'm kicking myself for not including a pid in MOZ_GCTIMER output. There's quite a range of "Reason"s in that dump, but I'm having trouble figuring out which are coming from your game.

[09:54:05.0873] <sfink>
eg there's a DOM_WORKER one that seems like it must be something else.

[09:55:38.0371] <sfink>
there are also a bunch of different budgets: 5ms, 10ms, 49ms, and unlmited

[09:56:35.0384] <ampdot>
> <@sfink:mozilla.org> ampdot: I'm kicking myself for not including a pid in MOZ_GCTIMER output. There's quite a range of "Reason"s in that dump, but I'm having trouble figuring out which are coming from your game.

hmmmmmm I presume I should try it with gecko profiler then

[09:57:07.0665] <sfink>
yeah, that would fix the problem of it being mixed up

[09:57:54.0231] <sfink>
you can unselect javascript stack frames. I'm not sure how private the profiles are if you send a private link (or the profile itself)

[09:58:44.0955] <sfink>
there are 5 INIT_SELF_HOSTING GCs in there, which I assume are done once per runtime

[09:59:22.0274] <sfink>
does it have similar behavior?

[10:00:35.0105] <ampdot>
so no, it does not behave similarly

[10:02:40.0156] <sfink>
hm. I grabbed a 6 second profile. No GCs. I'll let it run longer. Do you think I need to move around or shoot or something to trigger the memory usage?

[10:04:28.0595] <sfink>
ok. In a 26 second profile, it started allocating memory in the last 4 seconds. And pausing.

[10:04:30.0421] <sfink>
so this is good

[10:04:43.0803] <ampdot>
I'm uploading my current profile

[10:05:34.0501] <ampdot>
That one generates so much garbage I'm not sure you'd be able to see ArrayBuffers

[10:05:50.0993] <ampdot>
https://share.firefox.dev/3ifsxif

[10:08:48.0361] <ampdot>
I find the new Gecko profiler extremely confusing-- I'm not sure I played for long enough to allocate enough memory to trigger a major GC

[10:08:59.0703] <sfink>
that's definitely giving things a workout. Lots and lots of minor GCs. Half the major GCs seem to do ok, with a max pause of around 5ms. The other half are much worse.

[10:11:08.0162] <sfink>
it has 6 major GCs

[10:11:18.0403] <sfink>
easiest way to see it is to go to "Marker Chart"

[10:11:21.0888] <ampdot>
~~how many major GCs did you see?~~ I can do the same thing again in Chrome/V8 to see how many it has

[10:11:28.0647] <yulia>
sfink i think it is right, i got it from makoto

[10:11:38.0501] <sfink>
you'll see GCMajors marked that correspond to drops in the memory graph

[10:12:07.0738] <yulia>
(but i have no idea tbh, arai might)

[10:13:00.0300] <arai>
where is that?

[10:13:12.0507] <yulia>
this thing ->  にわにはにわにわとり 

[10:13:41.0877] <yulia>
i got  "にわには" (in the garden), "には" (two) and "にわとり" (chickens) 

[10:13:43.0950] <sfink>
how does this game animate? The longer pauses have longer budgets. I *thought* we were supposed to be detecting that we're animating and capping the budgets lower.

[10:13:49.0578] <sfink>
arai: it's in https://github.com/tc39/notes/blob/master/meetings/2020-06/june-2.md#introducing-unicode-support

[10:14:05.0021] <yulia>
ah yeah, thats the context!

[10:14:23.0941] <yulia>
i read it as "ni wa"  not "ni ha" but now im not so sure

[10:14:31.0754] <sfink>
but I've never been too confident on how the scheduling works. I'll probably be looking much more into this soon.

[10:14:50.0592] <ampdot>
> <@sfink:mozilla.org> how does this game animate? The longer pauses have longer budgets. I *thought* we were supposed to be detecting that we're animating and capping the budgets lower.

It calls requestAnimationFrame at the end of every frame.

[10:14:58.0180] <sfink>
I did too, but then it seemed like there was both "niwa ni wa" and "ni wa".

[10:15:26.0529] <ampdot>
That's a similar test I ran on the game for chrome

[10:15:46.0845] <sfink>
ok, good. I even have a test setup that does exactly that, to compare with.

[10:16:03.0171] <ampdot>
I'm not sure if the pauses were due to major garbage or just my laptop lagging in the background, I will test again

[10:16:25.0423] <sfink>
I need to go out for half an hour or so right now. I'll look when I get back.

[10:17:10.0859] <arai>
I cannot locate the sentence in the page

[10:17:27.0061] <ampdot>
I remember on a slightly earlier alpha build there was only one Major GC in Chrome, so the current results I just posted are anomalous to me

[10:17:54.0805] <sfink>
oops, sorry. See https://github.com/codehag/TC39-news/blob/master/meetings/2020/tc39-06-2020.md

[10:18:11.0751] <sfink>
arai: ^

[10:18:42.0070] <arai>
ah

[10:20:03.0992] <arai>
yes, there is typo.  the original sentence is correct, but segmented one says "には" (two), it should be "にわ" (two)

[10:21:39.0440] <arai>
yulia: ^

[10:27:46.0117] <arai>
err, maybe "correct" isn't appropriate word here

[10:29:59.0759] <yulia>
aha!

[10:30:09.0378] <yulia>
very good :)

[10:30:11.0381] <yulia>
i will fix it

[10:32:45.0277] <yulia>
(was eating)

[10:32:53.0859] <arai>
I think, writing two as "にわ" would be more common (or modern) than "には"

[10:33:41.0170] <evilpie>
lol gtranslate thinks that means garden

[10:34:11.0627] <ampdot>
hmmm chrome is getting lots of GC too, let me compare the two on a beta build

[10:35:27.0546] <yulia>
fixed: https://github.com/codehag/TC39-news/blob/master/meetings/2020/tc39-06-2020.md#intlsegmenter-for-stage-3

[10:35:51.0769] <arai>
looks good :)

[10:36:01.0503] <yulia>
google thinks it means "crocodile crocodile" https://translate.google.com/#view=home&op=translate&sl=auto&tl=en&text=%E3%81%AB%E3%82%8F%E3%81%AB%E3%81%AF%E3%81%AB%E3%82%8F%E3%81%AB%E3%82%8F%E3%81%A8%E3%82%8A

[10:36:44.0973] <arai>
lol

[10:37:03.0666] <arai>
crocodile = わに

[10:37:36.0374] <yulia>
i noticed gt tends to drop words completely, its been really difficult to use it to play pokemon

[10:37:40.0492] <yulia>
the word segmentation is really off

[10:38:36.0952] <evilpie>
https://www.deepl.com/translator#ja/en/%E3%81%AB%E3%82%8F%E3%81%AB%E3%81%AF%E3%81%AB%E3%82%8F%E3%81%AB%E3%82%8F%E3%81%A8%E3%82%8A

[10:38:47.0974] <yulia>
omg thats amazing.

[10:40:38.0654] <yulia>
with spaces: にわには にわ にわとり

[10:40:46.0303] <yulia>
https://www.deepl.com/translator#ja/en/%E3%81%AB%E3%82%8F%E3%81%AB%E3%81%AF%20%E3%81%AB%E3%82%8F%20%E3%81%AB%E3%82%8F%E3%81%A8%E3%82%8A

[10:41:34.0763] <evilpie>
What is the correct translation?

[10:41:47.0260] <yulia>
i think "in the garden two chickens"

[10:41:52.0099] <yulia>
arai, is that right?

[10:42:03.0203] <arai>
yes

[10:42:24.0827] <evilpie>
haha wow "It's a fine line between life and death" is a hardcore translation

[10:42:41.0962] <yulia>
i want this as a shirt

[10:43:35.0549] <yulia>
i am working on it already

[10:44:08.0911] <ampdot>
https://share.firefox.dev/2NRUfnD (select only the first 17 seconds when you look at it because the chrome profile is 17 seconds long)

[10:44:49.0746] <ampdot>
This test on the beta build is much more deterministic than the one I did on the alpha build

[10:52:04.0110] <ampdot>
I see you are planning to restrict subclassing built-ins. Will this have an effect on adding properties to Object.prototype? 

[10:55:03.0279] <Waldo>
No.

[11:08:34.0020] <yulia>
too much? evilpie 

[11:08:42.0264] <yulia>
i hope you like times new roman.

[11:09:05.0835] <Waldo>
what precisely am I looking at here

[11:09:25.0883] <Waldo>
(segmenter needs to be capitalized)

[11:09:31.0511] <yulia>
damn.

[11:09:55.0192] <yulia>
ok fixed

[11:10:32.0315] <yulia>
Waldo: read the convo between arai, evilpie, and myself

[11:12:07.0283] <yulia>
as the creator of this masterful tshirt (image stolen from Ito Jakuchu), i personally think we should print it. (maybe fix it up a bit) i think we should print it.

[11:12:11.0277] <Waldo>
Is there something that happened before "is there a typo in にわにはにわにわとり from yulia's summary?" that I don't know about?  (Maybe I need to read email or something today.)

[11:12:18.0222] <yulia>
 * as the creator of this masterful tshirt (image stolen from Ito Jakuchu), i personally think we should print it. (maybe fix it up a bit) 

[11:12:28.0175] <yulia>
it was part of my summary for tc39

[11:12:35.0857] <yulia>
around how word segmentation is a complicated thing

[11:12:43.0558] <yulia>
and intl.segmenter will take care of it

[11:16:41.0541] <sfink>
whoa, that is awesome! I want one.

[11:18:25.0415] <sfink>
I guess it would require excessive chicken contortion to get them into a more yin/yang pose while still standing comfortably

[11:29:01.0447] <ampdot>
sfink: having lunch

[11:59:26.0394] <Waldo>
/me eyes jandem beadily

[12:01:31.0429] <jandem>
Waldo : hm? 

[12:01:49.0770] <Waldo>
dtoa.c

[12:02:17.0109] <jandem>
haha

[12:02:33.0669] <Waldo>
I'll show you a haha, you doublecrosser

[12:03:05.0169] <Waldo>
`#if defined(IEEE_Arith) + defined(VAX)`

[12:03:06.0310] <jandem>
/me floats away quietly

[12:03:22.0974] <arai>
confession: finally achieved Phabricator diff view without "New Inline Comment" popup appearing every time I search text, by tiny extension

[12:03:26.0794] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[12:15:04.0807] <ampdot>
I wonder how much money a good marketer could raise from hype for a new version of Git by repeating the word "blockchain"

[12:19:40.0973] <jandem>
Waldo : that file is full of gems, even the {} style is obscure 

[12:20:33.0151] <ampdot>
sfink: another way to solve this gc issue for my game is to use refcounting and a cycle collector

[12:20:41.0745] <ampdot>
though I suspect Mozilla would hate that

[12:24:10.0896] <ampdot>
Is Firefox willing to enable APIs before Chrome does? (That would let website owners force users to use Firefox like Google did with its "chrome experiments")

[12:25:12.0404] <ampdot>
Although, it could lead to fragmentation and compatibility issues because of the need for the spec to move in sync

[12:49:09.0278] <ampdot>
 * This test on the beta build is much more deterministic than the one I did on the alpha build sfink 

[13:54:20.0901] <Waldo>
Bah, I don't have time to fork `dtoa.c` and remove all the garbage legacy code and just do the simplest straightforwardest thing that works...

[13:54:27.0297] <Waldo>
But I really want to.

[13:55:17.0091] <Waldo>
Also in principle Rust stdlib has all this in it already somewhere, but whether it could be extracted into something standalone and easily embeddable is far less clear.

[13:56:05.0609] <iain>
https://github.com/dtolnay/dtoa?

[13:59:03.0962] <evilpie>
Waldo: there are also other more up to date version of dtoa.c I believe

[14:00:36.0467] <Waldo>
Yeah, probably.

[14:00:59.0964] <evilpie>
https://searchfox.org/mozilla-central/search?q=dtoa.c&path= 

[14:01:22.0445] <Waldo>
It's just so insane I have to read over VAX code, K&R header style code, dealing with 64 bits of data using only 32-bit halves because `uint64_t` is theoretically unavailable, etc.

[14:01:57.0679] <evilpie>
yeah that seriously sucks (not joking)

[14:04:34.0246] <Waldo>
Arguably there are 300+ lines of configuration macros in `dtoa.c` for all these bizarre platform combinations that are irrelevant or no longer exist.  Stuff like this is why uclibc makes sense.

[14:05:01.0410] <Waldo>
Nobody needs the last iotas of perf this setup purportedly _might_ gain.

[14:05:20.0166] <Waldo>
Nor the accompanying potential insecurity for playing so fast and loose.

[14:05:47.0098] <sfink>
jorendorff: sent you a badnasty review, but you don't necessarily have to read any code. It's really for answering the last question posed in the latest comment in https://phabricator.services.mozilla.com/D81427

[14:06:08.0682] <Waldo>
Ooh ooh is someone taking badnasty reviews?

[14:06:42.0910] <evilpie>
iain: that C++ version of the rust code you posted actually seems sane. I wonder how "correct" it is. i.e does it produce the same results as dtoa.c

[14:08:58.0352] <evilpie>
mhm this might actually be like the fast dtoa thing we already have

[14:09:33.0499] <Waldo>
I should say I don't understand how it is that we have both Google's decimal library in our tree, _and_ still `dtoa.c` that is apparently actually used still.

[14:10:08.0800] <froydnj>
> <@waldo:mozilla.org> I should say I don't understand how it is that we have both Google's decimal library in our tree, _and_ still `dtoa.c` that is apparently actually used still.

you haven't been around here very long, have you?

[14:10:24.0979] <Waldo>
Like, wasn't the point of the Google thing to stop using a terrible old `dtoa.c`?  Google can't possibly want to just use `dtoa.c` as-is, they have the NIH kool-aid.

[14:10:43.0639] <evilpie>
From what I remember the Google code can fail for some specific numbers and we need to fallback to dtoa.c

[14:11:07.0683] <Waldo>
froydnj: I'm more talking about Google, I'd think they'd have needed to cover all the bases we need to cover, and their interest would have been killing the `dtoa.c` dependency entirely.

[14:13:16.0608] <jorendorff>
sfink: ...

[14:15:43.0759] <jorendorff>
sfink: OK, to start, what is the relevant meaning of "delegate" here?

[14:16:27.0169] <sfink>
jorendorff: CCW target. We used to support other types of "delegates" for weakmaps.

[14:16:29.0108] <sfink>
they're dead now

[14:17:02.0293] <sfink>
or 99% dead. I think there's still a funky hook available for getting a delegate? Or maybe I killed it already.

[14:17:48.0811] <jorendorff>
sfink: But why do we care about delegates at all?

[14:18:34.0123] <sfink>
jorendorff: sorry, I'm a bad person. I shouldn't have asked you quite yet; I need to be doing something else for the next hour.

[14:18:46.0671] <jorendorff>
No worries, ping me

[14:18:53.0142] <sfink>
but one reason is that we need to preserve the wrapper if it's a weakmap key, in case you re-wrap and re-lookup

[14:20:26.0766] <jorendorff>
ok, just to record what my next question was going to be

[14:22:07.0097] <jorendorff>
actually we should probably do a video call when you're free


2020-06-30
[01:55:58.0568] <Ms2ger [~half-time dedication]>
🐔

[05:31:32.0546] <dbezhetskov>
hi! I want to debug SM in firefox in gdb. I emit some int3 inside generated code and want to catch this in gdb. I run `gdb firefox... some-params` and set `follow-fork-mode child` but tab just crashes

[05:31:51.0266] <dbezhetskov>
what should I add to catch these int3 in gdb?

[05:35:17.0400] <Benjamin Bouvier>
dbezhetskov: (not really answering the question, sorry, but) is there an easy way to reproduce in the shell?

[05:35:37.0153] <Benjamin Bouvier>
otherwise, it might be a good question for #developers:mozilla.org , where people are more used to debug the whole browser and sub processes

[05:36:57.0631] <dbezhetskov>
aah, thanks Benjamin Bouvier yeah, for js shell it works perfect, but I need to investigate into difference between browser and js/shell.

[06:13:54.0460] <tcampbell>
I usually use rr to capture all browser processes then replay the one that crashed

[08:14:20.0425] <yulia>
I have a request from JSKongress to have SpiderMonkey do a group chat as part of their online series

[08:14:35.0604] <yulia>
It will likely be in european time zone (so, morning / afternoon for many of you)

[08:14:53.0829] <yulia>
they did one with the chrome devtools: https://t.co/WVeygIFMf2?amp=1

[08:15:01.0448] <yulia>
and. they would be interested in one with our team

[08:15:29.0600] <yulia>
some more links to give an idea: https://t.co/CX1E7a0Lvz?amp=1 and https://t.co/mp8uOMT2vz?amp=1

[08:15:51.0127] <yulia>
i did the leg work and they look good. Have a solid code of conduct and good organizers

[08:16:23.0436] <yulia>
this would be a space to talk about stuff we are excited about, we have freedom in terms of the format

[08:16:27.0477] <yulia>
are people interested?

[08:17:26.0013] <yulia>
 * this would be a space to talk about stuff we are excited about, we have freedom in terms of the format and content (we could talk smoosh, warp, whatever)

[08:20:50.0164] <tcampbell>
hmm

[15:43:01.0141] <sfink>
jorendorff: sorry for ghosting you (for *my* review, no less.) I can zoom whenever you're available.

[15:43:28.0160] <sfink>
hopefully that will not make my laptop overheat and shut down, like compiling has suddenly started to do.

[15:47:04.0698] <iain>
yulia: I would be willing to be part of a group chat, although I can't guarantee much about my audio/video/network quality

[16:20:20.0768] <zbraniecki>
Waldo: +1 on the exciting ideas about the future of dtoa.c

[16:29:14.0791] <jorendorff>
sfink: sorry, it was a quarter to 6 when I got that and then I wandered off and finished a patch a little bit. let's try again tomorrow

[16:29:31.0493] <sfink>
ok, np

[16:29:41.0672] <jorendorff>
today was kind of a trash fire for me anyway, 5 hours at the DMV, no lie

[16:29:58.0975] <sfink>
I wasn't exactly being timezone friendly there

[16:30:00.0106] <sfink>
ouch!

[16:30:21.0961] <sfink>
that's really pretty awful

[16:54:26.0679] <Waldo>
zbraniecki: "exciting ideas" that may never come to fruition because those stables are _Augean_, yo.

[16:56:11.0065] <zbraniecki>
I'm wondering if there's an existing rust crate for that

[16:56:34.0269] <Waldo>
I searched through the Rust code once; I think there may be an implementation in stdlib.  Maybe.

[16:56:58.0236] <Waldo>
But that might only cover string-to-double, not the double-to-string cases we still use `dtoa.c` for.

