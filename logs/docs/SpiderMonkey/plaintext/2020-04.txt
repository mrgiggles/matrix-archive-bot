2020-04-01
[19:27:13.0997] <ptomato>
in GNOME we have an "interesting" backwards compatibility problem that other spidermonkey embedders might have, I thought someone here might have some good ideas

[19:27:44.0277] <ptomato>
exposing C APIs into JS that return 64-bit numbers, you always run the risk that the return value is larger than Number.MAX_SAFE_INTEGER

[19:28:18.0728] <ptomato>
in the old days we just converted these into Numbers, and logged a warning in C++ before the conversion, if the value was unsafe

[19:28:26.0703] <ptomato>
now we have BigInt in ESR68!

[19:29:09.0601] <ptomato>
C APIs that take a 64-bit int as a parameter are easy to convert, we just accept either a Number or a BigInt

[19:29:33.0562] <ptomato>
but C APIs that return a 64-bit int, the trick is to do it without breaking all of GNOME's code

[19:29:58.0047] <ptomato>
if we just start returning BigInt from those APIs then they will break everywhere

[19:30:32.0519] <ptomato>
has anyone else ever dealt with constraints like these?

[19:31:01.0588] <ptomato>
we have some brainstorming in https://gitlab.gnome.org/GNOME/gjs/-/merge_requests/412

[20:22:19.0341] <loganfsmyth>
arai or anyone else around: Do you have any thoughts on who would be good to loop into reviewing https://bugzilla.mozilla.org/show_bug.cgi?id=1601179 ?

[20:24:37.0406] <arai>
/me looks

[20:46:37.0107] <arai>
what I can think of is, people in bug 1280819

[20:46:38.0526] <botzilla>
https://bugzil.la/1280819 — NEW (nobody) — Disable async stacks by default in more cases

[20:46:50.0176] <arai>
and jorendorff 

[20:56:45.0498] <loganfsmyth>
arai: thanks!

[21:19:10.0754] <Waldo>
ptomato: Honestly, I don't think you have a good solution here that preserves all the existing API uses.  I would probably be inclined to create new, different APIs that always return a `BigInt`.

[22:38:49.0151] <Waldo>
/me rebuilds SpiderMonkey a bunch of times in non-unified mode to test his patches properly

[01:49:09.0177] <peterv>
sefeng: the WindowNamedPropertiesHandler is the proxy handler for the named properties object (https://heycam.github.io/webidl/#named-properties-object) for a Window object

[01:50:04.0110] <peterv>
sefeng: so it's the prototype of the Window object which is the global object

[01:55:19.0978] <peterv>
sefeng: sorry, the second object on the prototype chain of a Window object

[01:57:51.0494] <peterv>
sefeng: so you could do Object.getOwnPropertyDescriptor(Object.getPrototypeOf(Object.getPrototypeOf(this)), "iframeName") in a page with a <iframe name="iframeName">

[06:05:05.0545] <tcampbell>
confession: Add SMDOC for js::BaseScript (Bug 1622589)

[06:05:09.0111] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[06:05:10.0453] <botzilla>
https://bugzil.la/1622589 — ASSIGNED (tcampbell) — Add SMDOC for js::BaseScript

[07:39:06.0583] <tcampbell>
confession: Time to consider LazyScript / JSScript unified! Closing Bug 1529456.

[07:39:10.0658] <botzilla>
https://bugzil.la/1529456 — RESOLVED (tcampbell) — [meta] Unify JSScript and LazyScript types

[08:46:58.0185] <ptomato>
> <@waldo:mozilla.org> ptomato: Honestly, I don't think you have a good solution here that preserves all the existing API uses.  I would probably be inclined to create new, different APIs that always return a `BigInt`.

yeah, that's what I was afraid of ... we autogenerate our APIs from C API description, so creating different ones is not an option, but I think the best course open to us is to add renamed versions of the same APIs, with `_bigint` appended or something like that. thanks for the advice.

[09:18:17.0466] <sfink>
tcampbell's bug is bug 1626132

[09:18:18.0995] <botzilla>
https://bugzil.la/1626132 — NEW (nobody) — Large CycleCollector pause on new Slack UI

[09:36:16.0890] <tcampbell>
Hmm.. collecting CC log is just spinning a thread in parent process

[09:44:38.0904] <Waldo>
ptomato: Your "best course" is what I meant by "creating different ones", so we seem to be in agreement.  :-)

[09:52:54.0890] <sfink>
Argh. gcc 9 is getting too smart. I'm trying to avoid a warning that I'm passing a nullptr to a function, and trying to hide it in a function `static const char* zero() { return uintptr_t(&zero) == 0x1 ? "never happens" : nullptr; }`

[09:53:04.0306] <sfink>
gcc *still* knows that I'm passing nullptr

[09:53:15.0305] <sfink>
if I replace `0x1` with `0xdeadbee0`, it works.

[09:54:07.0655] <sfink>
`0xdeadbeef` does not work. I guess it knows the function is going to aligned?

[09:54:20.0089] <sfink>
 * `0xdeadbeef` does not work. I guess it knows the function is going to be aligned?

[09:56:01.0079] <sfink>
`0x2` also works! Wtf? If it knows it's aligned, surely it knows it'll be aligned on more than a 2 byte boundary??!

[09:56:10.0735] <Waldo>
I believe in principle implementations are permitted to know that numbers that are not synthesized from actual pointers, need not be treated as if they were the legitimate address that equals a valid pointer.

[09:56:29.0365] <Waldo>
But it sounds like that's not the behavior you're seeing.

[09:58:47.0952] <sfink>
yeah, you're right that it would be fair to always return false or something. Or even always return true, though that would be mean.

[12:24:31.0669] <jdm>
if we build spidermonkey standalone and don't pass --enable-optimize, is it still optimized by default?

[12:25:04.0513] <jdm>
/me reads https://github.com/servo/mozjs/blob/8c64c9441cc5941089c192af262d19fbc7f82580/mozjs/build/moz.configure/toolchain.configure#L33-L48 and wonders if that assumption is false

[12:25:17.0728] <Waldo>
sfink: What about playing a bell every time you do it?  https://twitter.com/jfbastien/status/1245362601367760896

[12:25:39.0122] <Waldo>
(handwaving the exact point at which this becomes UB)

[12:56:50.0653] <sfink>
that would, uh, "work"

[13:33:49.0054] <tcampbell>
jdm: I believe it is optimized by default. The `js_option` line usually has the non-default state in it

[13:35:19.0317] <tcampbell>
yeah, seems to be optimized by default

[13:38:15.0979] <jdm>
curious; running sunspider in a build without an explicit --enable-optimize and one with it shows a significant difference

[13:38:25.0265] <jdm>
** TOTAL **:           1.102x as fast    185.3ms +/- 3.7%    168.2ms +/- 3.7%      significant

[13:49:24.0373] <jdm>
mmm, this might be a red herring based on other changes in the build, especially since the --enable-optimize build is reporting the slower times.

[14:13:20.0162] <tcampbell>
caroline: ping

[14:14:25.0270] <caroline>
tcampbell: pong

[14:24:32.0330] <yulia>
sfink: are you around by chance?

[14:24:50.0196] <sfink>
yes

[14:25:30.0201] <yulia>
weakrefs was just presented, and there are some questions around cleanup some -- are you familiar with it or should i ping jon and yoshi tomorrow morning?

[14:26:09.0937] <sfink>
I am probably as familiar with it as any of the GC team, though the wasm people are really the ones that is intended for

[14:26:21.0559] <yulia>
ok, i will run it by lars as well

[14:26:46.0248] <yulia>
the idea is that there are some folks who are uncomfortable with cleanup some -- they think it is risky to allow something like that on the main thread

[14:27:14.0851] <yulia>
this can be achieved either by saying throwing on [[CanBlock]] or adding a host hook so hosts (HTML) can decide for itself 

[14:27:38.0127] <yulia>
would this be an issue for us, implementation wise?

[14:27:56.0737] <yulia>
I asked the champions for a write up with the change, its very short notice

[14:29:14.0320] <yulia>
(i can also say "too short notice, please let us think about it" if it needs more time for us to discuss)

[14:29:26.0486] <sfink>
[[CanBlock]] is an es thing, or a webidl thing, or ?

[14:30:19.0147] <yulia>
i think it is a js thing but let mee double check

[14:30:47.0363] <sfink>
is the idea that the host can prevent cleanupSome from doing anything?

[14:31:26.0938] <sfink>
oh, I think I misparsed "throwing on [[CanBlock]]"

[14:31:34.0738] <sfink>
you mean throwing an exception

[14:31:39.0438] <yulia>
yes

[14:31:49.0548] <sfink>
implementation-wise, I don't see a problem

[14:32:01.0777] <yulia>
ok

[14:32:05.0787] <yulia>
great

[14:32:15.0177] <sfink>
what to think about this as a potential source of blocking the main thread, I don't know, but I'm probably not the right person

[14:32:43.0062] <yulia>
is there anyone you can recommend that i can ping?

[14:32:58.0581] <sfink>
sadly, bz was the first name to spring to mind :(

[14:33:38.0737] <sfink>
I'm a little fuzzy on who deals with this sort of thing. emilio?

[14:34:07.0731] <yulia>
ok! i can probably also bug anne in that case

[14:34:17.0378] <sfink>
that's a good idea

[14:34:19.0438] <yulia>
but both of them are in berlin. I will get in touch with them

[14:35:02.0309] <sfink>
I mean, in theory anything that cleanupSome would do would be done at the end of the current turn anyway

[14:35:38.0868] <sfink>
or could be done

[14:37:26.0679] <sfink>
but I guess maybe the end of turn stuff could be considered to be host-controlled already?

[14:37:41.0361] <djvj>
Waldo: minor nit bug for you to r?, fixup to the InflatedChar16Sequence  constructor 

[14:37:42.0419] <sfink>
since if it really didn't want to block, it could always defer the finalizations

[14:38:15.0438] <sfink>
then again, it could just refuse to do anything on cleanupSome in that case

[14:38:22.0954] <yulia>
i just checked, it shouldn't block the main thread

[14:39:21.0367] <sfink>
what does "block the main thread" mean, though? I mean, you're running JS. You call cleanupSome, it runs more of your JS. When it's done, it'll return. It's not exactly blocking in a new way.

[14:41:17.0503] <yulia>
hmm maybe i didn't understand this question you asked earlier? "what to think about this as a potential source of blocking the main thread"

[14:41:47.0117] <sfink>
in fact, we're not going to be doing a GC just because someone called cleanupSome. So the only effect, normally, is to bring some finalization earlier than the end of the current turn.

[14:42:11.0054] <sfink>
I was probably misinterpreting the original concern. You didn't actually say that, that's just how I heard it.

[14:42:34.0748] <sfink>
You said "they think it is risky to allow something like [cleanupSome] on the main thread"

[14:42:49.0038] <sfink>
I haven't yet figured out what's risky about it

[14:43:21.0580] <yulia>
yes, so this is coming from the apple team, their position is that allowing synchronous observation of GCs via finalizations is a Bad Thing to do on the main thread

[14:43:53.0955] <sfink>
ah!

[14:44:25.0250] <sfink>
that's a fair point, the spec went to some effort to reduce the observability by postponing things to the end of the turn (sorry for the dated terminology)

[14:44:41.0075] <sfink>
and now cleanupSome can tell you whether a GC happened yet or not

[14:44:49.0953] <yulia>
exactly

[14:45:16.0717] <sfink>
ugh, I'm inclined to agree, though I still think the wasm use case is very important

[14:45:18.0359] <yulia>
they also see this as a larger web compatibility risk (larger than the rest of the proposal which is considered a web compat risk)

[14:45:34.0257] <yulia>
right, i will need to clarify if this messes with the wasm story...

[14:47:35.0781] <sfink>
I'd like to say that cleanupSome needs more work and we should accept the rest of the API, but drop cleanupSome until we do more work to figure it out. But I'm worried that it would make all of this useless to wasm. (I don't know if that is true for sure.)

[14:48:48.0130] <yulia>
ok, thats good feedback to have

[14:56:29.0335] <sfink>
I keep trying to come up with ways  of fixing it. But either I only solve half the problem and make it less useful besides, or I require modes or privilege levels or similar.

[14:57:35.0815] <sfink>
to some extent, it feels like it comes down to the question of whether wasm can really interoperate with JS if it's always running purely "within" JS, and thus can't make use of things that can happen at the end of or between turns.

[14:57:37.0125] <yulia>
(here is the write up: https://github.com/tc39/proposal-weakrefs/issues/197)

[14:58:57.0722] <yulia>
hmm question: how will not being able to do cleanupSome on the main thread affect wasm potentially interacting with the dom? i know that some people have wanted this but dont know if it is in the pipeline...

[15:02:15.0994] <sfink>
my naive view: interacting with the dom creates garbage, which requires cleanup, which for wasm means FinalizationRegistry, which for long-running wasm (especially in a non-Web host) requires cleanupSome or similar because you never end the current synchronous execution, or at least don't do it for too long.

[15:02:42.0567] <yulia>
right, and this would effectively move all wasm work to workers

[15:03:03.0281] <sfink>
shu's 2(ii) is what I meant by "modes or privilege levels or similar"

[15:03:36.0388] <sfink>
yes

[15:03:52.0395] <sfink>
or at least, all wasm work that wants to play with the dom

[15:04:02.0463] <sfink>
(or with nontrivial JS)

[15:05:15.0161] <sfink>
I feel kinda dumb for not noticing this issue with cleanupSome. I've been ignoring that API since I never liked it, but couldn't put my finger on why.

[15:06:20.0358] <Waldo>
djvj: Done.

[15:06:41.0595] <yulia>
ok so the wasm story bugs me, i will try to find out more if this breaks anything that we are working on

[15:21:21.0893] <iain>
Waldo: ping

[15:21:31.0289] <Waldo>
iain: pong

[15:21:57.0277] <iain>
ReportCompileErrorLatin1 takes a va_list* argument: https://searchfox.org/mozilla-central/source/js/src/vm/ErrorReporting.cpp#128

[15:22:36.0048] <iain>
If I want to call it from a non-var-args function, is there any standard way of ginning up a fake va_list*?

[15:24:17.0544] <iain>
 * If I want to call it from a non-varargs function, is there any standard way of ginning up a fake va_list*?

[15:24:32.0852] <Waldo>
iain: No.

[15:24:50.0898] <Waldo>
iain: We need to not use ellipsis functions at all in SpiderMonkey, really.

[15:25:32.0850] <Waldo>
iain: It is on my list of things to do, to change error reporting to pass around some sort of pointer-length class to encapsulate a set of parameters.

[15:25:55.0853] <Waldo>
iain: It is extremely unclear when I will ever get to it.

[15:27:36.0655] <iain>
In the interim, the work around is to ... make my function varargs, even though it doesn't need any extra arguments?

[15:27:42.0210] <iain>
 * Waldo: In the interim, the work around is to ... make my function varargs, even though it doesn't need any extra arguments?

[15:28:01.0870] <Waldo>
iain: Something like that, I guess.

[15:29:12.0531] <Waldo>
iain: Being unable to cons up a `va_list` is possibly the most fundamental of its problems.  Other problems with it, are that _technically_ you're supposed to `va_copy` a `va_list` if you want to copy it, can't just copy-construct or copy-assign it, and if you aren't copying it around, passing by pointer to it is the only real safe option but is just terrible.

[15:30:53.0445] <iain>
Okay, thanks

[15:31:14.0759] <iain>
I will go forth to write terrible code, safe in the knowledge that it's the language's fault, not mine

[15:35:49.0201] <Waldo>
There is a great deal of ruin in C and C++.

[15:41:17.0356] <tcampbell>
sfink: If I ask how to pre-barrier a GCCellPtr, you are gonna telling I'm doing something terribly wrong, aren't you?

[15:51:34.0272] <tcampbell>
okay, I have a worse idea... 

[15:54:13.0790] <tcampbell>
`gc::ClearEdgesTracer`.. you certainly were not meant for my purposes

[15:54:29.0553] <Waldo>
/me wonders how anyone is using streams yet, seeing as they appear to have approximately no documentation...


2020-04-02
[17:51:16.0718] <sfink>
tcampbell: not necessarily, or at least I once implemented that for weakmap stuff. But jonco pointed out some simplifications, and at the end of fixing things up I didn't need it anymore.

[00:32:51.0564] <loganfsmyth>
Is there any expected interaction between a return-false w/o pending exception termination and XPCOM? For instance https://searchfox.org/mozilla-central/rev/7fba7adfcd695343236de0c12e8d384c9b7cd237/js/xpconnect/src/XPCWrappedNative.cpp#1175 Is there an `nsresult` value that represents termination, or a way to propagate termination outward, or is it expected that any called function should create a pending exception in the case where there is an error but no pending exception? Or is this case just not expected to ever really happen to begin with?

[00:37:27.0503] <loganfsmyth>
I was recently debugging an issue where code was unexpectedly terminated, but the termination was swallowed making it harder to track down. The code assumes that all `return false;` errors will have set a pending exception, and so when there isn't a pending exception, the error condition is swallowed. I don't expect to actually terminate like this in non-buggy code, but it made me curious if there was a way to at least more nicely surface a termination instead of swallowing it.

[00:39:12.0884] <Ms2ger [~half-time dedication]>
loganfsmyth: XPCOM is not required to set a pending exception

[00:39:33.0717] <Ms2ger [~half-time dedication]>
In fact, the code that you linked to handles setting it:

[00:39:41.0031] <Ms2ger [~half-time dedication]>
```

  if (NS_FAILED(mInvokeResult)) {
    ThrowBadResult(mInvokeResult, mCallContext);

[00:39:52.0173] <Ms2ger [~half-time dedication]>
 * ```c++
  if (NS_FAILED(mInvokeResult)) {
    ThrowBadResult(mInvokeResult, mCallContext);
```

[00:40:25.0252] <loganfsmyth>
Sorry I didn't quite know how much information to include

[00:40:56.0310] <loganfsmyth>
this is a case there the code in `Invoke` itself then calls back into JS. If that JS code is terminated, what should `Invoke` do?

[00:41:17.0139] <loganfsmyth>
should it set a pending exception? Should it return a specific `nsresult`?

[00:41:34.0493] <Ms2ger [~half-time dedication]>
Oh, hmm

[00:42:13.0342] <loganfsmyth>
or is the answer that termination is never expected in this context

[00:42:39.0989] <Ms2ger [~half-time dedication]>
So you've got approximately `CallMethodHelper::Invoke() → some xpcom method → JS::Call` where `JS::Call` returns false without a pending exception?

[00:43:22.0748] <loganfsmyth>
yeah

[00:43:48.0770] <Ms2ger [~half-time dedication]>
That's not quite as obvious :)

[00:44:14.0746] <Ms2ger [~half-time dedication]>
Potentially `NS_ERROR_UNCATCHABLE_EXCEPTION`

[00:45:27.0951] <Ms2ger [~half-time dedication]>
Yeah, that should work

[00:45:47.0859] <loganfsmyth>
as I said, the termination was accidental and unexpected so this is not a path real code is expected to hit, it just happened to make debugging a separate issue more complicated

[00:46:11.0259] <loganfsmyth>
trying to decide if I should at least throw together a patch to make the error more obvious in the future

[00:46:12.0925] <Ms2ger [~half-time dedication]>
That would go into the code I quoted before, and then get handled in https://searchfox.org/mozilla-central/source/dom/bindings/Exceptions.cpp#109 will handle it

[00:47:07.0255] <Ms2ger [~half-time dedication]>
Whether we're expecting all xpcom that calls into js to take that into account... I don't know

[00:47:35.0845] <Ms2ger [~half-time dedication]>
I would have asked bz, not sure who'd know now... mccr8, maybe?

[00:48:39.0144] <loganfsmyth>
Okie doke. Yeah the issue is here: https://searchfox.org/mozilla-central/rev/7fba7adfcd695343236de0c12e8d384c9b7cd237/js/xpconnect/loader/mozJSSubScriptLoader.cpp#490 Due to a Debugger bug we were in some cases actually terminating the script loaded by `loadSubScript` but then since that uniformly returns `NS_OK` it depends heavily on there being a pending exception, otherwise the termination is swallowed

[00:49:44.0320] <loganfsmyth>
so the script I was trying to load was just silently never actually loading

[00:50:29.0096] <Ms2ger [~half-time dedication]>
bholley has blame, but not sure how recently he's been around in that code, either

[00:51:52.0701] <loganfsmyth>
okie doke. I'm heading out soon but when I find time to come back to this I'll see what I can do

[00:52:08.0005] <Ms2ger [~half-time dedication]>
👍️

[00:52:22.0132] <Ms2ger [~half-time dedication]>
(Do you often end up hitting such obscure issues? :))

[00:52:50.0506] <loganfsmyth>
I hope not hahah

[00:53:23.0900] <loganfsmyth>
only when the debugger is debugging itself on accident

[02:35:14.0707] <jandem>
who debugs the debugger?

[02:44:59.0781] <jandem>
 * who debugs the debuggers?

[03:47:04.0566] <yulia>
is there a way to get information on what the event loop is doing?

[05:07:22.0605] <littledan>
yulia: sfink  fwiw, I believe Apple's concerns are something like, not that it would block on the main thread, but rather that it's an API that is only useful in the context of never returning to the event loop, which is a story they are not sold on yet. So maybe there's broader things about how Wasm would be used, that would be good to discuss with them.

[05:08:04.0739] <littledan>
(I think we're all on the same page about the interoperability concern, that this exposes GC timing in a tighter way, but, well, that's just part of the tradeoff.)

[05:19:48.0869] <littledan>
lth: You've written a detailed explanation of the motivation of cleanupSome. Tomorrow, in TC39, we expect to hear from Apple about why they'd like cleanupSome to be split into a separate Stage 2 proposal. I'm wondering, should we publish your explanation to the committee for their consideration?

[05:22:00.0833] <littledan>
I don't see anything about splitting cleanupSome into a separate Stage 2 proposal that would inherently mean that w couldn't come back and do the exact same thing later (or prohibited only in the main thread), but I also don't really see how we'd meet the requirements Apple set out in https://github.com/tc39/proposal-weakrefs/issues/197#issuecomment-607577781 . I'm wondering how this impacts the acceptability of splitting out cleanupSome from the rest of the WeakRefs proposal.

[05:38:41.0630] <lth>
littledan: yulia is handling this on our behalf

[05:39:59.0796] <lth>
littledan: on a completely different topic, do you have an opinion about https://bugzilla.mozilla.org/show_bug.cgi?id=1626363?

[05:40:14.0071] <lth>
it seems like a rendering issue on a wasm spec that you've created

[05:47:12.0779] <littledan>
lth: so, I copy-pasted those weird characters from the Wasm core spec, for consistency

[05:47:33.0526] <lth>
littledan: so maybe i should ask binji?

[05:47:33.0745] <littledan>
We could use something else, so find-replace is easier

[05:47:49.0025] <littledan>
well, maybe Ms2ger [~half-time dedication] would have an opinion?

[05:48:06.0336] <littledan>
he's the current Wasm JS API editor

[05:48:13.0715] <lth>
ah good point

[05:48:38.0858] <littledan>
I guess users might expect something stronger than NFKC, like removing accent marks, in the find function (I imagine Firefox already does something like this?)

[05:48:39.0191] <Ms2ger [~half-time dedication]>
lth: I want to kill those with fire

[05:48:46.0070] <nox>
/me is always infuriated when Firefox cares about accents and whatnot when looking for something in a page.

[05:49:05.0787] <Ms2ger [~half-time dedication]>
lth: but find-in-page should perhaps still find them

[05:49:18.0948] <littledan>
also it send shivers up my spine to think that someone wants to use NFKC/NFKD normalization, so I second "killing it with fire"

[05:49:41.0344] <nox>
Ah TIL that was fixed recently.

[05:50:00.0865] <littledan>
nox: Any idea what sort of normalization that does?

[05:50:37.0807] <nox>
No clue.

[05:50:50.0013] <nox>
littledan: https://bugzilla.mozilla.org/show_bug.cgi?id=202251 This is where this was fixed

[05:51:01.0214] <Ms2ger [~half-time dedication]>
I also would love it if the core wasm spec would use actual ascii codepoints when it can, but that's certainly a fight for another day

[05:51:20.0781] <lth>
"opened 17 years ago"

[05:52:24.0476] <nox>
https://hg.mozilla.org/integration/autoland/rev/828a10a79e71#l3.35 Looks custom?

[05:53:01.0791] <nox>
It just calls unorm2_getDecomposition on each char AFAICT.

[05:53:05.0940] <littledan>
Ms2ger [~half-time dedication]: Wanna write up a PR for this?

[05:53:21.0877] <Ms2ger [~half-time dedication]>
littledan: for the jsapi spec? Yeah, will do at some point

[05:53:42.0403] <nox>
littledan: UNORM2_DECOMPOSE Map, and reorder canonically. 
Same as standard NFD when using an "nfc" instance. Same as standard 
NFKD when using an "nfkc" instance. For details about standard Unicode 
normalization forms see http://www.unicode.org/unicode/reports/tr15/ 

[05:54:37.0981] <nox>
Ah and the instance is returned by unorm2_getNFDInstance, so standard NFD

[05:55:28.0480] <Ms2ger [~half-time dedication]>
littledan: it's been on my todo list since July 2018, it can wait a bit more :)

[07:21:21.0936] <jorendorff>
nbp: sdetar: My internet access is pretty sketchy this morning. I'll be at the triage meeting unless it goes out entirely though.

[07:36:14.0358] <sdetar>
jorendorff: No problem, see you in a little bit.

[07:54:58.0553] <sfink>
> <@dehrenberg:igalia.com> yulia: sfink  fwiw, I believe Apple's concerns are something like, not that it would block on the main thread, but rather that it's an API that is only useful in the context of never returning to the event loop, which is a story they are not sold on yet. So maybe there's broader things about how Wasm would be used, that would be good to discuss with them.

right, sorry, I made up the whole "block the main thread" thing based on misunderstanding the concern initially, purely because "main thread" was mentioned. I eventually worked my way past that, and ended up in a somewhat similar place as the Apple folks.

[07:56:21.0247] <sfink>
I'm now wondering whether anything similar comes up in the context of Promises, where iirc stuff also happens at the end of the task loop (or whatever it's called). How are Promises used in long-running Workers?

[07:59:49.0483] <littledan>
right, so when you're programming in the way where you need cleanupSome, these things just don't fit together. I think that's their point

[08:01:36.0954] <jorendorff>
littledan: shu: I wonder if the two of you have a moment to chat about compartments

[08:02:05.0102] <littledan>
I'm free in an hour

[08:02:08.0034] <jorendorff>
(the new stage-1 proposal)

[08:02:49.0944] <littledan>
yeah, I'm definitely interested in chatting abou tthat

[08:02:57.0828] <littledan>
also tomorrow would be free any time

[08:04:26.0665] <jorendorff>
I have a meeting now and a meeting in an hour :-\

[08:04:38.0601] <jorendorff>
and it looks like a meeting the hour after that

[08:04:39.0739] <jorendorff>
tcampbell: are we having the stencil meeting today?

[08:06:47.0102] <jorendorff>
littledan: What time zone are you in? I'd be happy to fit this in today if possible, but tomorrow is fine too

[08:09:47.0038] <Ms2ger [~half-time dedication]>
jorendorff: not him, but he's in CEST (UTC+2)

[08:10:02.0525] <jorendorff>
Thank you!

[10:03:03.0576] <jorendorff>
tcampbell: will be 5 minutes late

[10:09:22.0665] <tcampbell>
https://searchfox.org/mozilla-central/source/js/src/frontend/ParseContext.cpp#498

[10:13:47.0049] <tcampbell>
```
diff --git a/js/src/frontend/Parser.cpp b/js/src/frontend/Parser.cpp
index 88fa5fe0a4ef..b43b78fa8a80 100644
--- a/js/src/frontend/Parser.cpp
+++ b/js/src/frontend/Parser.cpp
@@ -1740,33 +1740,29 @@ bool LazyScriptCreationData::create(JSContext* cx,
                                     FunctionBox* funbox,
                                     HandleScriptSourceObject sourceObject) {
   MOZ_ASSERT(function);
+
+  using ImmutableFlags = ImmutableScriptFlagsEnum;
+  ImmutableScriptFlags immutableFlags = funbox->immutableFlags();
+
+  // Compute the  flags that frontend doesn't directly compute.
+  immutableFlags.setFlag(ImmutableFlags::ForceStrict, forceStrict);
+  immutableFlags.setFlag(ImmutableFlags::Strict, strict);
+  immutableFlags.setFlag(ImmutableFlags::HasMappedArgsObj,
+                         funbox->hasMappedArgsObj());
+
   BaseScript* lazy = BaseScript::CreateLazy(
       cx, compilationInfo, function, sourceObject, closedOverBindings,
-      innerFunctionIndexes, funbox->extent, funbox->immutableFlags());
+      innerFunctionIndexes, funbox->extent, immutableFlags);
   if (!lazy) {
     return false;
   }
 
-  // Flags that need to be copied into the JSScript when we do the full
-  // parse.
-  if (forceStrict) {
-    lazy->setForceStrict();
-  }
-  if (strict) {
-    lazy->setStrict();
-  }
-
-  // Flags which are computed at this point.
-  if (funbox->hasMappedArgsObj()) {
-    lazy->setHasMappedArgsObj();
-  }
-
-  function->initLazyScript(lazy);
-
   if (fieldInitializers) {
     lazy->setFieldInitializers(*fieldInitializers);
   }
 
+  function->initLazyScript(lazy);
+
   return true;
 }
 ```

[10:31:40.0080] <djvj>
anyone else having problems with cloning mozilla-central, and hg getting stuck at downloading "Files" at around 4050/568426 ?

[10:32:25.0165] <djvj>
I've tried a bunch of stuff - using ssh:// instead of https://, turning off ssh key authentication and just getting the repository with no authentication

[10:33:31.0237] <mgaudet>
I clone... effectively never. But his might help you: https://firefox-source-docs.mozilla.org/contributing/vcs/mercurial_bundles.html?highlight=bundle 

[10:36:45.0954] <djvj>
it turns out that the right fix for that problem is actually just to comment about it on this channel, because it started right up after that

[10:41:50.0813] <Benjamin Bouvier>
`hg clone --stream` is your friend, too

[10:42:04.0697] <Benjamin Bouvier>
clones never finish on all of my machines, without this flag

[10:55:42.0880] <djvj>
Benjamin Bouvier: thanks!  I'll try to remember that

[12:24:50.0149] <RyanVM>
iain: not gonna lie, that irregexp change sounds a bit scary to land in a soft freeze :)

[12:25:51.0324] <evilpie>
RyanVM: disabled  by default no worries

[12:26:20.0926] <RyanVM>
oh, I misunderstood then, I thought the latest patches were flipping the switch

[12:27:39.0062] <tcampbell>
caroline: Are you alright we me pushing the JSScript::Create patches? They pass tests locally for me

[12:27:53.0864] <RyanVM>
IIUC, we're enabling syntax parsing with irregexp now but are still using the older fork for everything after that?

[12:29:50.0555] <caroline>
tcampbell: theyre currently running on try

[12:30:07.0929] <caroline>
but only new patch is the reordering

[12:30:13.0133] <caroline>
they should be fine

[12:31:24.0568] <tcampbell>
☃︎ cool

[12:36:02.0517] <tcampbell>
mgaudet: So Bug 1607854 is ready to go, right? It isn't the WIP thing you meantioned earlier?

[12:36:04.0258] <botzilla>
https://bugzil.la/1607854 — ASSIGNED (mgaudet) — Defer allocation of JSScript to just before JSScript::fullyInitFromEmitter

[12:37:00.0841] <mgaudet>
tcampbell: state is: It needs review feedback, and I expect to make changes based on that, but I want to go ahead with this, so please review it 

[12:37:27.0228] <mgaudet>
tcampbell: which is perhaps cutting hairs, but slightly different than "ready to go"

[12:40:27.0845] <tcampbell>
mgaudet: sounds good

[12:42:13.0159] <iain>
RyanVM: Sorry, my commit message is confusing. None of this code is part of the build unless you compile with ENABLE_NEW_REGEXP

[12:42:30.0441] <RyanVM>
oh, that's perfect

[12:42:33.0331] <RyanVM>
thanks!

[13:39:43.0918] <iain>
tcampbell: around?

[13:39:55.0405] <tcampbell>
ye

[13:39:56.0196] <tcampbell>
p

[13:40:19.0798] <iain>
I want to rant about some regexp optimizations, and then see if you validate my desire to burn them to the ground

[13:40:35.0132] <tcampbell>
haha

[13:40:40.0442] <iain>
Do you know about lazily updating RegExpStatics?

[13:40:51.0997] <tcampbell>
I do not

[13:41:44.0976] <iain>
So there's a bunch of non-standard properties of the RegExp object like $1 and $_, which were borrowed from perl

[13:42:00.0678] <tcampbell>
😑

[13:42:10.0218] <iain>
Which refer to the last regexp match that has been done

[13:42:23.0866] <Waldo>
I know about RegExpStatics!

[13:42:36.0168] <Waldo>
They are trash.

[13:43:02.0947] <iain>
To be clear, this isn't, like, `re = /abc/; re.test("abc123"); re["$1"]`, it's RegExp["$1"]

[13:43:25.0221] <tcampbell>
but whyyy

[13:43:32.0830] <iain>
Problem one: we have to update these after each match

[13:45:38.0381] <iain>
Problem two: somebody noticed that if you have `/.*abc.*/.test("some long string")`, then you can just strip the leading and trailing `.*`

[13:46:33.0758] <iain>
But only in the case of `test` (which just returns a boolean)

[13:46:47.0297] <iain>
If you need matches, then we can't strip the regexp, because of the difference between greedy and non-greedy repetition

[13:47:25.0105] <iain>
But that's okay, we'll only do it if this is for a `test`

[13:47:33.0062] <tcampbell>
is `/(.*)*X/.test("some long string")` still a perf disaster?

[13:47:34.0492] <iain>
Except! We have RegExpStatics!

[13:48:24.0139] <iain>
(I think the issue is that we already wrap regexps in .*'s before executing them, because by default they aren't anchored to the ends of the string)

[13:48:50.0963] <iain>
Even for a test, we might need the value of RegExp["$1"]

[13:48:57.0414] <iain>
But most of the time you don't

[13:49:15.0541] <tcampbell>
I don't like where this story is going..

[13:49:29.0522] <iain>
So what we do is we set a flag in RegExpStatics: https://searchfox.org/mozilla-central/source/js/src/vm/RegExpStatics.h#42

[13:49:39.0753] <iain>
And then we store the input and source

[13:49:51.0798] <iain>
And if anybody queries the RegExpStatics, we re-run the entire regexp

[13:49:56.0903] <Waldo>
If I could go back in time and change JS from the get-go, making () non-capturing is definitely fairly high on the list of changes to make.  Probably not as high as removing `with`, but probably the highest RegExp-related item on the list.

[13:50:55.0832] <iain>
Extra fun: to make sure we don't mix up these two runs, we compile completely separate pieces of jitcode

[13:51:47.0987] <iain>
Which is why each RegExpShared has room for 4 compilations: MatchOnly vs Normal, and Latin1 vs TwoByte

[13:52:01.0052] <iain>
All to get rid of the extra `.*`

[13:52:08.0932] <tcampbell>
oh boy

[13:53:27.0331] <iain>
I would like to stop doing this

[13:53:45.0329] <iain>
I want to get rid of MatchOnly and lazily updated RegExpStatics

[13:54:29.0653] <iain>
V8 does not appear to strip leading or trailing `.*` (or if they do, it's inside the engine somewhere and we would get the benefit automatically)

[13:54:49.0867] <tcampbell>
that sounds reasonable

[13:55:03.0120] <iain>
Somehow, Chrome remains usable

[13:57:03.0135] <iain>
Okay, rant completed

[13:57:05.0587] <iain>
I feel better now

[13:57:10.0981] <tcampbell>
ha

[13:57:27.0839] <iain>
I have spent all afternoon pulling on strings and horrifying myself at the nonsense I find at the other end

[13:58:42.0144] <evilpie>
they don't have a match only mode?

[13:58:56.0742] <iain>
Nope!

[14:00:18.0346] <iain>
The engine returns matches as indices into the string

[14:00:31.0450] <iain>
Which is information you basically need to track anyway for backreferences

[14:01:37.0107] <iain>
So the only things we get out of our match only mode are a)  lazy update nonsense, and b) avoiding having to copy a handful of integers

[14:02:36.0117] <iain>
Until today, I had assumed that our motivation was just b)

[14:03:07.0864] <evilpie>
can't we also move regexp instructions outside a loop

[14:04:52.0778] <iain>
Hmmm

[14:04:57.0507] <iain>
You might know more than me about that one

[14:05:02.0097] <iain>
Go on?

[14:06:00.0424] <evilpie>
nvm I think we might still be able to do that actually

[14:06:09.0388] <iain>
Okay, cool

[14:06:24.0670] <iain>
That is what I was leaning towards

[14:06:48.0488] <iain>
Because executing a regexp in the engine is a pure function of the inputs

[14:07:06.0544] <iain>
And it's up to us to modify any state using those inputs

[14:07:43.0828] <iain>
So I *think* it shouldn't matter whether the engine itself has a match only mode, because we still know the difference between RegExpTester and RegExpMatcher

[14:08:10.0063] <iain>
 * And it's up to us to modify any state using the output

[14:09:25.0047] <iain>
But please point out if there are any flaws in my logic

[14:11:07.0676] <Waldo>
Executing a regexp is pure, up to changes to statics.  It is probably possible to split regexp operations into a changes-to-statics part that can't be hoisted, and a pure part that can be.

[14:11:35.0744] <Waldo>
Tho I guess hoisting only happens if you have constant inputs, so maybe it's not necessary.

[14:34:19.0015] <iain>
Uggggggggggh

[14:35:32.0387] <iain>
The other place we take advantage of lazily updating regexp statics is in Ion

[14:35:32.0990] <iain>
Where we *always* make it lazy, even if it's a match or a search

[15:12:52.0024] <tcampbell>
Neat. I think I can relazify generators and async functions

[16:15:48.0181] <sfink>
iain: does stripping the `.*` speed anything up? In theory, `/.*abc.*/` can be converted into a DFA that does one transition per input byte/char/unit/grapheme/cluster/meal, and so should not be any faster or slower than `/abc/` -- even with greediness factored in. (Well, it can terminate earlier, which could be a big difference on a long input string.) And in practice, I thought irregexp was supposed to be rather good at noticing things like that.


2020-04-03
[07:05:50.0171] <iain>
sfink: irregexp is a backtracking engine, not a DFA engine, because you can't do backreferences and such with DFAs

[07:08:43.0914] <iain>
In theory you can imagine a regexp engine that used DFAs for actual regular expressions, and had backtracking for all the other gunk

[07:08:55.0035] <iain>
But if there's a clever way to fit those two ideas together that doesn't boil down to maintaining two separate engines, I am not aware of it

[07:09:27.0311] <iain>
And if you're only going to have one approach, it has to be able to handle backreferences

[07:30:05.0461] <Benjamin Bouvier>
what's the way to read CLI args in jsshell, again?

[07:30:55.0259] <Benjamin Bouvier>
`scriptArgs` it is

[07:31:08.0375] <Benjamin Bouvier>
i swear i search for 10 minutes before asking here 😇

[07:31:13.0722] <Benjamin Bouvier>
 * i swear i searched for 10 minutes before asking here 😇

[08:23:08.0111] <jandem>
confession: fixed WarpBuilder jit-test failures, adding a Treeherder job, bug 1627174

[08:23:10.0576] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[08:23:11.0779] <botzilla>
https://bugzil.la/1627174 — ASSIGNED (jandem) — WarpBuilder: Add a Treeherder job for WarpBuilder jit-tests

[08:28:36.0443] <jandem>
PSA: I'm renaming the --disable-ion configure flag to --disable-jit, for those of you using it

[08:58:58.0127] <sfink>
iain: I guess I don't know anything about irregexp, other than being NFA based like any realistic regexp engine has to be (for backrefs & such). But I do know it is possible to identify subportions of a regexp and use a DFA for that part, in part because I've implemented such an engine. (Or the start of one.) And my memory is that Re2 (I think it was called? also out of Google) took that much further than I ever did.

[08:59:51.0325] <sfink>
I mean, a DFA is pretty much a subset of an NFA, just one with singular transitions, so at least the part about integrating them isn't hard.

[09:00:02.0283] <sfink>
obviously, maintaining the correct semantics is not so straightforward

[09:00:17.0072] <sfink>
(and honestly, I don't remember what I did about greediness.)

[09:00:38.0877] <sfink>
probably punted; I didn't go all that far with it

[09:03:15.0518] <sfink>
oh, hm, I just looked up re2. It just doesn't bother to support features that require backtracking. So never mind about it being an example of integrating.

[09:03:18.0228] <nbp>
iain: remind me to look at the regex compiler once jsparagus is done … that might be a very good reason to move the parser generator from Python to Rust.

[09:04:00.0988] <nbp>
The reason being that the current parser generator is actually capable of handling context-dependent grammar.

[09:05:24.0222] <iain>
sfink: There's probably an isomorphism between irregexp and NFAs, but that's not how it describes itself internally: https://searchfox.org/mozilla-central/source/js/src/new-regexp/regexp-compiler.cc#23-170

[09:05:57.0511] <iain>
Well, I guess maybe that's a little strong

[09:06:04.0302] <iain>
They don't use the *word* NFA

[09:07:32.0066] <iain>
But I guess the "node network" is effectively an NFA

[09:07:42.0644] <iain>
nbp: I'm not sure I understand

[09:08:58.0629] <iain>
(Even normal regexp syntax is already not a regular language)

[09:09:59.0220] <iain>
The issue isn't whether you need context-dependent grammar to *parse* regular expressions

[09:10:05.0202] <Ms2ger [~half-time dedication]>
iain: but they're *regular* expressions!

[09:10:07.0124] <Ms2ger [~half-time dedication]>
/me ducks

[09:10:31.0043] <iain>
Gah, Matrix has been flaking out on me pretty badly

[09:10:31.0991] <iain>
The order of some of those messages is off

[09:10:32.0559] <iain>
The question is how you execute regexps

[09:10:56.0696] <nbp>
Regexp language is not context-free? What it describe is not, jsparagus parser is capable of handling context-dependent Grammars, and remove epsilon using variable lookahead tokens.

[09:12:21.0421] <iain>
Parsing is easy

[09:12:21.0944] <iain>
Executing is hard

[09:12:22.0549] <iain>
There are lovely efficient ways to execute "real" regular expressions, in the formal sense of regular expression

[09:12:22.0907] <iain>
But they don't work with (for example) backreferences

[09:12:26.0794] <iain>
JS regexps are not, formally speaking, regular expressions

[09:13:58.0237] <nbp>
Which is why I want to revisit this question later on, because if we could use the same mechanism as a way to generate a lexer, and as way to generate our parser, and as a way to compile JS Regexp at runtime, that would be quite some interesting sharing of code.

[09:15:32.0141] <nbp>
I do not disagree on the fact that some specialized algorithm exist for optimizing regexp. What I wonder is whether these could be added to jsparagus.

[09:16:46.0059] <sfink>
iain: ooh, that's a nice writeup in the irregexp source comments. Yeah, I would say the network nodes are pretty much nodes in an NFA, and backtracking is just the implementation of a search through that NFA. And if you were to convert portions of it to a DFA, that would be covered by the vague "Several optimizations are performed on the node network."

[09:18:00.0514] <evilpie>
jonco: hey! I want to add a new class with GC pointers to spidermonkey

[09:18:20.0502] <iain>
The issue is that technically, because JS regexps capture the entire match, the regexp we are trying to optimize is `/.*(.*foo)/`

[09:18:44.0460] <evilpie>
see https://phabricator.services.mozilla.com/D69282 (search for ExceptionAndStack)

[09:18:54.0454] <iain>
And I'm not sure how you handle optimizing across capture boundaries in this hypothetical optimizer

[09:18:56.0439] <sfink>
My engine used pretty much the same setup, except I didn't have any native code generation, nor most of what they're calling "Execution state virtualization". Which sounds really cool; it definitely addresses the remaining large areas of performance issues that I remember having.

[09:19:06.0742] <evilpie>
currently I am using PermanentRooted, but I am wondering if I should instead implement a real rootable type?

[09:20:11.0921] <sfink>
evilpie: yes, the only thing you'll need is to implement trace() and you'll become a real rootable type. Well, and I think you have to specialize the TraceKind to be Traceable.

[09:20:29.0577] <evilpie>
sfink: what type do I use for my members?

[09:20:52.0264] <sfink>
this is within the JS engine, or outside where we have cycle collection?

[09:21:17.0194] <sfink>
if inside, HeapPtr<T>. If outside, Heap<T>.

[09:21:20.0903] <iain>
nbp: Unless I completely misunderstand jsparagus, I think regexp execution is probably out of scope

[09:21:33.0541] <evilpie>
sfink: this is supposed to become part of the jsapi

[09:21:57.0625] <nbp>
iain: Yes, which is why I am saying "after"

[09:22:11.0262] <sfink>
oops, sorry , it's RootKind

[09:22:14.0892] <sfink>
let me dig up an example

[09:23:45.0540] <sfink>
https://searchfox.org/mozilla-central/source/js/public/TraceKind.h#174-178 is an example of setting the RootKind (for JS::Realm, in this case)

[09:25:34.0016] <evilpie>
sfink: thanks

[09:26:12.0078] <sfink>
https://searchfox.org/mozilla-central/source/js/src/vm/RegExpObject.cpp#175 is an example implementation of trace()

[09:29:16.0459] <sfink>
gah, it's hard to find clean examples without weird special cases

[09:31:13.0968] <sfink>
evilpie: actually, RegExpStatics isn't bad. It has a bunch of HeapPtr members and a trace() method.

[09:31:50.0354] <evilpie>
sfink: yeah looks easy enough. I can base my implementation on that

[09:31:59.0035] <sfink>
and I'm trying to remember whether you need to do the MapTypeToRootKind if you're inside the engine

[09:33:24.0087] <sfink>
I think you do if you're not a GC type.

[09:34:07.0599] <sfink>
we couldn't default it because it is needed in places that only have forward decls for things that are not Traceable, so you'd get a different answer depending on whether you could see the full type declaration or not.

[09:54:07.0853] <jonco>
evilpie: hey, just saw your ping

[09:54:35.0077] <evilpie>
jonco: sfink already helped me out

[09:54:40.0225] <jonco>
great

[11:01:21.0176] <evilpie>
jonco: sfink actually I would like to use it on the stack like this https://paste.mozilla.org/kwMNgoSL

[12:54:52.0213] <evilpie>
actually maybe just using Rooted<> inside my class would be ok? I think making the class a stack-only class is totally fine

[13:13:55.0077] <sfink>
yeah, for stack-only, that's definitely the easiest

[13:47:55.0768] <mgaudet>
https://searchfox.org/mozilla-central/source/js/src/frontend/BytecodeEmitter.cpp#8840

[13:49:54.0301] <evilpie>
sfink: can you take a look: https://phabricator.services.mozilla.com/D69636 ? Exception.h/cpp

[14:51:46.0850] <sfink>
evilpie: commented

[14:53:11.0542] <evilpie>
sfink|afk: thank! I think some of these problems are sadly already pre-existing :(

[15:32:27.0447] <sfink>
evilpie: yeah, the previous code seemed to be doing something different every time

[15:33:27.0860] <evilpie>
I introduced StealPendingException stack because 90% of users want that behavior

[15:38:26.0529] <sfink>
yeah, I know I've reviewed at least one patch where the user wanted that behavior but forgot to clear the exception

[15:40:45.0191] <evilpie>
sfink: btw the real master plan here is actually for js::ErrorReport::init. We want callers to pass ExceptionStack instead of just of the exception and this makes it easier to change code

[15:41:29.0675] <sfink>
yes, that does seem nicer

[15:45:15.0797] <evilpie>
oh you reviewed bug 996060. so you are actually the perfect person for this

[15:45:18.0665] <botzilla>
https://bugzil.la/996060 — RESOLVED (bhackett1024) — Save a stack for thrown values that are not error objects


2020-04-04
[17:31:50.0169] <Waldo>
So this piping stuff is pretty frequently wanting to register `NewHandler` functions to react to stuff -- where such functions are essentially a C++ function pointer and a single `PipeToState*` object value.  Is there any reason we can't have/introduce some sort of new way of recording a reaction, that records just those two values, rather than requiring creation of a full closure object and its associated GC pressure?  Doesn't _seem_ like it to me, at least conceptually.

[17:32:41.0121] <Waldo>
A similar sort of consideration probably applies to how we implement `ReadableStream.prototype.tee`.  And I wouldn't be surprised if there are other potential consumers I wouldn't know about.

[12:10:27.0079] <aholm>
I'm using FF Developer Edition, and when I try to use the URL API, I get this error 
```
let aa = new URL("/", m);
TypeError: URL is not a constructor
```
despite MDN showing FF supporting the URL API

[12:18:13.0900] <aholm>
 * I'm using FF Developer Edition, and when I try to use the URL API, I get this error
```
let aa = new URL("/", m);
TypeError: URL is not a constructor
```
(this was in the devtools console)
despite MDN showing FF supporting the URL API

[12:19:07.0684] <ptomato>
if you have an object with a custom JSClassOps, the idiom I've been using normally to figure out whether one of the ClassOps is being called on the prototype or an instance, is to not set private data on the prototype object, and check whether JS_GetPrivate returns null. what's the recommended idiom if you don't need to store private data at all, though?

[12:19:44.0321] <ptomato>
give the class a reserved slot and store `true` in it if it's the prototype, for example?

[12:40:31.0240] <evilpie>
you could maybe just create a plain object as the prototype?

[12:41:01.0592] <evilpie>
internally we use this approach: https://searchfox.org/mozilla-central/source/js/src/builtin/MapObject.cpp#1146-1166

[12:41:38.0718] <evilpie>
we have a different class for the proto, because for annoying reasons (Xrays) we have to share protokeys with instances and proto

[12:52:28.0368] <jandem>
yeah the spec has been moving away from having the prototype be an instance

[12:55:29.0436] <jandem>
* yeah the spec has been moving away from the prototype being an instance 

[13:27:40.0616] <ptomato>
evilpie: thanks, will study that!

[13:29:59.0680] <ptomato>
I have not seen ClassSpec before

[16:37:51.0854] <Waldo>
`JS_InitClass` is not really an idiom well-designed for the modern world.  We probably would design something new that is a better fit, but all the JS stuff needs to be custom for spec reasons and efficiency, and DOM stuff is also highly specialized and not amenable to an initclass-like approach that works better.

[16:38:38.0356] <Waldo>
We keep `JS_InitClass` around mostly to not break embedders as it's harmless to us if we never use it, but that's about the only reason it still exists.


2020-04-05
[18:10:41.0993] <ptomato>
so ClassSpec can take the place of JS_InitClass entirely?

[19:17:14.0090] <Waldo>
`ClassSpec` is embedded in `JSClass` which is used by `JS_InitClass`, so I don't know that "take the place of" is quite a phrase that either does or doesn't apply here. 

[19:41:05.0504] <ptomato>
what I mean is, do you no longer have to call JS_InitClass to create a class?

[19:42:10.0445] <ptomato>
like, what would you do differently in this example here? https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr68/examples/resolve.cpp#L214-L224


2020-04-06
[08:01:12.0669] <denispal>
jonco: ping

[08:01:27.0285] <jonco>
denispal: hey

[08:01:59.0191] <denispal>
jonco: hey, I'm trying to figure out a way to preserve the element when using the shell when the ELEMENT_SLOT is removed from the SSO

[08:02:28.0619] <denispal>
jonco: I thought maybe adding an element property to the moduleinfo object that's saved in the private value here https://searchfox.org/mozilla-central/source/js/src/shell/js.cpp#862-872

[08:02:58.0389] <denispal>
but it seems after compartment wrapping, I am failing a test case because the assertEq fails (I guess due to mismatch addresses?)

[08:04:02.0230] <jonco>
denispal: that sounds like good approach

[08:04:09.0191] <jonco>
which test is failing?

[08:05:04.0306] <denispal>
$ dist/bin/js /c/src/mozilla-central/js/src/jit-test/tests/debug/Source-element-03.js
c:/src/mozilla-central/js/src/jit-test/tests/debug/Source-element-03.js:17:11 Error: Assertion failed: got ({}), expected ({})

[08:06:22.0580] <denispal>
works fine if I just save the element directly into the private value but of course other module loader tests fail then

[08:08:12.0254] <jonco>
interesting

[08:09:41.0306] <jonco>
it could well be something to do with CCWs

[08:09:58.0011] <jonco>
do you know it's the right object you're getting back (even if it doesn't compare equal)?

[08:10:47.0367] <denispal>
the address is certainly different than the one I initially save into the private value

[08:10:55.0349] <denispal>
perhaps I'm wrapping it wrong?

[08:11:30.0715] <jonco>
yes, that's a possibility

[08:11:49.0859] <jonco>
I don't recall exactly what is supposed to happen here

[08:11:53.0476] <jonco>
can you share your patch?

[08:12:06.0565] <denispal>
sure, one second

[08:25:07.0196] <denispal>
jonco:  https://paste.mozilla.org/pMNEo3B9

[08:25:26.0695] <denispal>
I put the JS_WrapObject in GetElementCallback

[08:29:28.0307] <jonco>
denispal: I think you need to wrap the thing you're returning, not the info object

[08:31:51.0454] <tcampbell>
oops.. wondered by slack was so slow.. turns out I accidently disabled all JITs and have been running C++-Interpreter-only for a few days..

[08:31:59.0021] <tcampbell>
 * oops.. wondered why slack was so slow.. turns out I accidently disabled all JITs and have been running C++-Interpreter-only for a few days..

[08:32:14.0905] <denispal>
jonco: I think I hit another error in JS_GetProperty if I didn't wrap the info object about a compartment mismatch

[08:32:30.0579] <jonco>
ok well maybe you need both

[08:33:56.0023] <jonco>
hmm that seems like it should have worked though

[08:34:38.0588] <denispal>
yeah I just wrapped both and I hit the earlier assert

[08:34:58.0787] <denispal>
is it possible the assertEq is too strict?  it seems the value is preserved still

[08:37:33.0110] <jonco>
no I think the assert is fine

[08:38:25.0794] <jonco>
can you post the error?

[08:39:05.0597] <denispal>
jonco: c:/src/mozilla-central/js/src/jit-test/tests/debug/Source-element-03.js:17:11 Error: Assertion failed: got ({}), expected ({})

[08:39:17.0918] <jonco>
(I had a look and in general I think you want to make shell ParseModule function create the info object)

[08:39:55.0269] <jonco>
hmm

[08:42:09.0311] <jonco>
denispal: can you use dumpObject() to print both objects?

[08:45:52.0840] <jonco>
wait, I might have got the wrong end of the stick about modules... is this for classic scripts too?

[08:48:09.0964] <denispal>
jonco: yes, it should be

[08:50:06.0846] <jonco>
ok, so the idea is for the shell to have one of these info objects for all scripts, not just modules

[08:50:16.0811] <jonco>
that seems fine

[08:50:51.0497] <denispal>
yeah, I guess it just may not have the path property for classic scripts

[08:52:20.0754] <denispal>
jonco: https://paste.mozilla.org/rHkjubkN

[08:56:56.0398] <jonco>
thanks

[08:57:50.0426] <jonco>
I'm not sure what those objects are... they both seem to reference the same debugger object though

[09:00:25.0890] <jonco>
oh I think these are debugger objects (their name is just 'Object')

[09:00:40.0181] <jonco>
they have the same owner but different private values

[09:03:03.0097] <jonco>
so they do refer to different object for some reason

[09:05:37.0237] <denispal>
I can probably dig into wrap() a bit deeper to see why the object is changing

[09:09:43.0159] <rockon999>
Does SpiderMonkey have an equivalent to v8's Synthetic Modules? (https://github.com/v8/v8/blob/master/src/objects/synthetic-module.h) - allowing for embedder defined module exports/execution

[09:26:46.0150] <jonco>
denispal: good luck;

[09:26:51.0623] <jonco>
 * denispal: good luck

[11:11:09.0744] <Waldo>
> <@ptomato:gnome.org> what I mean is, do you no longer have to call JS_InitClass to create a class?

You've never had to call `JS_InitClass` to create objects of a given class.  `JS_InitClass` just makes it mildly more convenient to define a constructor, a prototype object, and populate each with functions and constant properties.

[11:15:32.0455] <ptomato>
oh, ok! I never realized that

[11:20:02.0136] <ptomato>
I will take a look at refactoring this stuff in GNOME soon, hopefully

[11:26:36.0024] <smaug>
mccr8: what happens if NS_IMPL_CYCLE_COLLECTION_MULTI_ZONE_JSHOLDER_CLASS isn't used correctly?

[11:27:05.0044] <smaug>
(happened to notice that recently added macro)

[11:28:26.0929] <mccr8>
smaug: use after frees, I think...

[11:28:32.0706] <mccr8>
Maybe we should use diagnostic asserts.

[11:30:23.0220] <mccr8>
smaug: if a wrapper cached C++ object has a wrapper in zone A, and a reference to some object in zone B, and we're GCing zone B but not zone A, and it isn't marked as multizone, then we'll end up collecting the object in zone B

[11:56:17.0379] <Waldo>
anba: Have you looked into whether an update to ICU 67 will take yet?  They're at the RC stage, we should probably start doing that now.

[11:57:59.0933] <RyanVM>
wow, fast turnaround from 66

[11:59:25.0426] <Waldo>
66 was basically a point-release to pick up support for the latest Unicode release.  It didn't do much other than that.

[12:00:07.0318] <Waldo>
I haven't paid quite close enough attention to the ICU process to say just what caused them to do this -- I don't remember them doing it for new Unicode releases in the past.

[15:12:09.0374] <Waldo>
Is it really necessary for us to use `JS_FASTCALL` any more?  It's barely used, and it isn't immediately obvious to me that the places that use it are exactly the places that might demand some hypothetically "faster" custom ABI.

[16:23:59.0690] <Waldo>
jonco | away: FYI, looking at the cell-header patches, note that `typename std::remove_reference<T>::type` and such are C++11, but we can use the newer (either C++14 or C++17, I forget which) `std::remove_reference_t<T>` that has identical semantics and doesn't require remembering `::type` nor adding `typename`.  Probably best to use the `_t` suffix generally (and especially for `std::enable_if`, because forgetting the `::type` there is probably an actual bug and not merely aesthetic).

[16:24:09.0684] <Waldo>
sfink: ^ you too.

[16:27:43.0040] <Waldo>
Also instead of `std::is_base_of<T>::value`, you can do `std::is_base_of_v<T>` and similar for all the trait predicates.

[16:43:28.0142] <sfink>
whoa, I'd heard of a couple of _t things, but hadn't realized they were more generally available now. And I hadn't seen (or noticed) the _v things.

[16:44:12.0227] <sfink>
I can't say they seem simpler, but less error-prone and less verbose are worth it


2020-04-07
[17:44:58.0587] <Waldo>
I think if C++11 had had template aliases and template variables, they never would have added the non-`_t`/`_v` varieties.  But C++11 only enabled the more-verbose phrasing, so the most compatible way is the fugliest/most error-prone way.

[17:45:35.0547] <Waldo>
And of course type traits techniques arose totally organically and were not designed into the language, hence to some degree why template aliases and variables came late.

[20:27:10.0229] <Waldo>
sfink: I assume there is some evident reason why all these classes can't inherit from a class that you can statically cast through to get to a `uintptr_t header_`, right?  It seems extremely silly to demand standard-layout, to reinterpret addresses, when this is something that really ought be readily doable with a simple base class.

[01:53:03.0435] <Benjamin Bouvier>
wow, ACM digital library is freely accessible for some time https://dl.acm.org/

[02:14:18.0738] <jandem>
> <@waldo:mozilla.org> Is it really necessary for us to use `JS_FASTCALL` any more?  It's barely used, and it isn't immediately obvious to me that the places that use it are exactly the places that might demand some hypothetically "faster" custom ABI.

Waldo: +1 for removing it. It's only defined on 32-bit x86 anyway

[02:38:57.0897] <jonco>
Waldo: I did it that way at first but it was thought to be more confusing for GC things to have one of their data members stored in the base class and accessed only via special accessors vs defining all data members in one place

[02:46:09.0679] <Waldo>
jonco: "was thought" by whom?

[02:46:14.0048] <Waldo>
/me eyes jonco beadily

[02:46:27.0545] <Waldo>
(shut up Ms2ger [~half-time dedication] 🙂)

[02:46:47.0412] <Waldo>
Inheritance to access/encapsulate stuff is really perfectly normal...

[02:51:18.0595] <jonco>
Waldo: by the people I asked for feedback on the patches, tcampbell and sfink.  It was discussed in a GC meeting but there are some comments from: https://bugzilla.mozilla.org/show_bug.cgi?id=1625212#c5

[02:57:10.0330] <Waldo>
Hmm.

[02:58:37.0194] <Waldo>
Last I checked, we weren't doing this just yet, but ultimately we need to get to a place where `T* Allocate(JSContext* cx)` or some other function can placement-`new` its `T` into place.  That may end up working better with a base-class approach, that can be plugged into the constructor fairly normally...

[03:00:49.0877] <Waldo>
BTW, jonco, spurred on by a long-ignored needinfo on bug 949220, I have started working on trying to disentangle singleton status from `NewObjectKind` somehow.  Mostly right now I'm just trying to encode `newObjectKind` into the function signature at each caller's allocation site, for now, to at least minimize the number of places that ever have to list a particular `NewObjectKind`, whether a constant or a computed variable.

[03:00:51.0245] <botzilla>
https://bugzil.la/949220 — REOPENED (Waldo) — Object creation should be an atomic operation, such that if it succeeds, and reserved slots are immediately written to, finalizers can depend upon those writes having happened

[03:03:45.0478] <jonco>
Waldo: agreed, ideally Allocate would take constructor arguments to pass on to placement new

[03:05:46.0675] <Ms2ger [~half-time dedication]>
Waldo: 3AM, huh

[03:10:15.0036] <Waldo>
Yeah.  Late day yesterday, I'll make it up with a shorter day today.  :-)

[07:55:22.0385] <iain>
Do we throw away Ion code on any (non-nursery) GC, or only on compacting GCs?

[07:56:20.0802] <jandem>
definitely not on every GC, there are some heuristics. Compacting GCs will cancel in-progress compilations

[07:56:56.0439] <iain>
Oh, this is the part I was missing: https://searchfox.org/mozilla-central/source/js/src/gc/Zone.cpp#391-393

[08:01:34.0156] <iain>
I might be missing something similar, but it looks like we cancel off-thread compilations even for non-compacting GC? `beginMarkPhase` calls `discardJITCodeForGC` unconditionally, which calls `CancelOffThreadIonCompile` unconditionally

[08:06:54.0690] <jandem>
 iain: true.. it might be worth changing that. Maybe after warp we can be a bit more confident

[08:13:55.0051] <iain>
jandem: does that mean the tracing code in WarpSnapshot is unreachable?

[08:14:02.0043] <iain>
(currently)

[08:15:49.0720] <jandem>
iain: if there's an incremental gc, there can be compilations starting between gc slices. These will be marked as part of root marking (by each slice)

[08:16:26.0739] <iain>
Ah! Okay, good to know

[08:16:33.0988] <iain>
That makes sense in retrospect

[08:18:09.0105] <jandem>
iain: I wonder if we could do better there by marking the whole snapshot as marked/traced, so we don't have to go through the whole (immutable) snapshot on every slice. I can file a follow-up bug to investigate that

[08:23:59.0190] <jandem>
oh nursery GCs also trace the helper thread state afaict. Another follow-up

[09:20:56.0446] <sfink>
iain: it is rare, but a nursery GC can also call discardJitCode() for a zone that is switching to pretenuring strings or bigints.

[11:56:51.0614] <aholm>
Benjamin Bouvier: any suggestions for books to take a look at while the ACM digital library is freely accessible? I have access to the ACM digital library through work, but we don't have access to books in our subscription.

[14:20:02.0100] <tcampbell>
confession: Remove `BytecodeEmitter::lazyScript` field to reduce BCE accesses to VM. (Bug 1627371)

[14:20:04.0936] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:20:06.0190] <botzilla>
https://bugzil.la/1627371 — NEW (tcampbell) — Eliminate BytecodeEmitter::lazyScript field

[16:43:14.0724] <loganfsmyth>
jorendorff: Do you have any thoughts on https://phabricator.services.mozilla.com/D68503? Is there anyone else you think would be better to give feedback?


2020-04-08
[00:32:56.0401] <Benjamin Bouvier>
aholm: good question! i don't really know; i sometimes run into papers on the ACM that i can't access, so it's nice to not have this restriction anymore...

[06:13:20.0210] <tcampbell>
Is "lazy-inner" a reasonable term to describe lazy scripts within lazy scripts? We must distinguish because (for example) these scripts do not have an enclosing scope yet (since the scope has not been allocated in our parent yet).

[06:15:10.0160] <tcampbell>
So the taxonomy for BaseScripts would be "incomplete", "non-lazy", "lazy", "lazy-inner". (Where incomplete is the trash generated by a failed parse that GC hasn't swept yet)

[06:16:04.0998] <tcampbell>
And for parses, the taxonomy I'm thinking makes sense is "initial" / "delazify".

[06:29:27.0358] <jandem>
non-lazy, lazy, lazier, laziest

[06:33:48.0830] <Benjamin Bouvier>
lazierer

[06:34:38.0122] <iain>
Another possibility is "incomplete", "non-lazy", "lazy-with-non-lazy-parent", "full-lazy", if you can come up with a nicer name for the third one

[06:40:04.0871] <jandem>
or maybe "lazy-nested" instead of "lazy-inner"

[06:41:52.0411] <tcampbell>
"lazy-nested" could work

[06:52:50.0129] <emilio>
Does `JS::NewUCRegExpObject` somehow cache compiled regexes internally?

[06:53:11.0317] <tcampbell>
iain: ^

[06:53:26.0094] <emilio>
/me realizes we can end up calling `nsContentUtils::IsPatternMatching` quite a lot from DOM code with the same patterns over and over

[06:53:45.0279] <emilio>
And we should probably not do that if we're re-parsing and re-compiling the regex every time

[06:54:05.0760] <emilio>
I guess these are mostly small patterns anyway, but...

[06:59:31.0382] <iain>
emilio: We cache regexps per-zone by source pattern: https://searchfox.org/mozilla-central/search?q=symbol:_ZN2js10RegExpZone3getEP9JSContextN2JS6HandleIP6JSAtomEENS3_11RegExpFlagsE&redirect=false

[07:00:57.0840] <iain>
So it should just be a hash-table lookup

[07:01:35.0052] <jandem>
we still allocate the RegExpObject wrapper I think?

[07:15:24.0134] <emilio>
iain: jandem: thanks! Well yeah that's not very concerning then.

[07:20:28.0656] <nbp>
tcampbell: should we rename LazyScript to IncompleteScript / ShadowScript ? As the Lazy part is the parser not doing work.

[07:21:02.0411] <tcampbell>
The `LazyScript` type is all gone right now

[07:21:05.0140] <nbp>
As the script is not Lazily executed, just Lazily generated

[07:21:11.0601] <tcampbell>
these terms are in comments and conversations

[07:25:47.0171] <nbp>
tcampbell: How far from all needed for SmooshMonkey? And XDR incremental encoder removal?

[07:30:02.0361] <nbp>
yes, thanks

[07:33:22.0533] <nbp>
jandem: Can you detail how WrapBuilder encode JSOP if it does not use the MIR?

[07:41:44.0568] <emilio>
iain: hmm, it seems like the C++ regex goes through https://searchfox.org/mozilla-central/rev/a707541ff423ade0d81cef6488e6ecfa09273886/js/src/vm/RegExpObject.cpp#252-268 though?

[07:43:10.0176] <emilio>
timothygu: (thinks for pointing that out!)

[07:43:20.0047] <emilio>
iain: so I don't know how it would get cached :-)

[07:43:59.0894] <emilio>
iain: (from https://searchfox.org/mozilla-central/rev/a707541ff423ade0d81cef6488e6ecfa09273886/js/src/vm/RegExpObject.cpp#1539)

[07:46:43.0772] <mgaudet>
EPM = ?? 

[07:47:22.0021] <iain>
emilio: CheckPatternSyntax is just doing a quick parse to see if we need to throw a syntax error

[07:47:45.0099] <iain>
Creating the regexp object just saves a reference to the source

[07:48:13.0267] <emilio>
iain: would still be nice to avoid doing that over and over I guess, but if the compiled regex is cached that's probably ok enough

[07:48:41.0955] <iain>
When you actually try to do something with the regexp, we call getShared, which will look up or create a new RegExpShared, which owns the compiled code

[07:49:06.0211] <nbp>
> <@mgaudet:mozilla.org> EPM = ??

Enginerring Program Manager (guess)

[07:50:38.0593] <nbp>
> <@mgaudet:mozilla.org> EPM = ??

 * Enginerring Program Manager

[07:50:47.0227] <jonco>
sfink: is the hazard analysis build a debug or opt build?

[07:51:13.0170] <mgaudet>
Thanks nbp!

[07:54:30.0993] <sfink>
Debug

[08:02:20.0666] <yulia>
tcampbell: who else should join?

[08:06:24.0573] <tcampbell>
yulia: jason, anne

[08:13:16.0968] <jonco>
sfink: oh ok, explains why that was showing up.  I had assumed opt.

[08:13:59.0526] <sfink>
yeah, I second-guess the decision sometimes, but debug builds get to see a lot more code.

[08:14:25.0759] <sfink>
we could consider running two builds

[08:56:24.0247] <sfink>
https://bugzilla.mozilla.org/attachment.cgi?id=9138289

[09:00:33.0678] <jcristau>
jorendorff: is https://www.intel.com/content/www/us/en/products/docs/processors/pentium/silver-celeron-spec-update.html what you're looking for re that cpu bug/crash?

[09:01:17.0370] <jorendorff>
Yes!!

[09:01:36.0333] <jorendorff>
jcristau: Is there a way of finding these that I missed? Or just the right search terms...?

[09:02:26.0584] <Waldo>
jandem: What sort of changes to singleton-y stuff are you expecting?  I had started doing some local patching to try to encode `NewObjectKind` into function _name_, with the aim of consolidating the absurd sprawl of create-an-object functions we have at present.  (And then after that the precise set of core functions we want would be clear, and we could refactor just those functions to allocate singleton'd-from-the-start `ObjectGroup`s.)  Would that be likely to be super-bitrotted by future changes?

[09:04:23.0932] <jandem>
Waldo : I'm hoping we can remove the singleton distinction completely when we get rid of object groups, but it will take time and if you have patches to clean up what we have.. 

[09:04:26.0657] <tcampbell>
> <@jcristau:mozilla.org> jorendorff: is https://www.intel.com/content/www/us/en/products/docs/processors/pentium/silver-celeron-spec-update.html what you're looking for re that cpu bug/crash?

Ah, #035 looks suspect

[09:05:30.0285] <jorendorff>
that's the one

[09:06:00.0182] <jcristau>
jorendorff: i can't even find how i got there anymore...

[09:06:20.0859] <jorendorff>
:ok:

[09:18:26.0501] <Waldo>
jandem: Okay.  There is a great deal of ruin in the current situation -- including multiple function/template function overloads that are either unused or could use other verbs more widely used.

[09:20:52.0242] <jandem>
agreed, it would be nice to fix that 

[09:27:18.0262] <Waldo>
`GetInitialHeap` and the way it takes in a `NewObjectKind` and produces a result is just batty.

[09:58:27.0632] <Eric Rahm>
Ryan Hunt: for https://phabricator.services.mozilla.com/D68650 what were you hoping to get from Nathan's review? Build signoff?

[10:00:37.0483] <Ryan Hunt>
Eric Rahm: Benjamin Bouvier had a concern that the patch would break build caching, and wanted Nathan's opinion on it.

[10:00:42.0789] <Ryan Hunt>
see: https://phabricator.services.mozilla.com/D68650#inline-412029

[10:01:09.0277] <Eric Rahm>
Ryan Hunt: okay, I think glandium can pick that up. I'll redirect

[10:01:19.0769] <Ryan Hunt>
Eric Rahm: awesome, thanks!

[10:35:05.0750] <Waldo>
jonco: r=me, sorry for the delay

[12:09:16.0420] <bwidawsk>
tcampbell: So, finally got a chance to sit down and look at enabling IBT... The issues with upstream is rust usage is so pervasive, that without support in rustc for CET, I am pretty much having to disable it all over. This is of course aside from the js engine itself.

[12:10:41.0156] <bwidawsk>
also, sorry I haven't created a bugzilla for this. I thought I saw a howto add a feature bugzilla, but I am unable to find it again.

[12:15:19.0370] <tcampbell>
bwidawsk: see https://bugzilla.mozilla.org/show_bug.cgi?id=1626955 and https://bugzilla.mozilla.org/show_bug.cgi?id=cet

[12:16:29.0784] <tcampbell>
bwidawsk: do you know if rustc is tracking CET support?

[12:19:58.0842] <bwidawsk>
tcampbell: I was trying to track down the local rustacean Josh Triplett, but he's been on vacation for the last while

[12:21:47.0429] <tcampbell>
I think someone mentioned that CET requires clang 10+. I wonder what rust is tracking

[12:21:52.0800] <bwidawsk>
tcampbell: you can link this - it supposedly works against esr68, but it's very hacky: https://github.com/hjl-tools/gecko-dev/tree/hjl/cet/esr68

[12:22:50.0502] <tcampbell>
oh great, that's helpful

[12:23:51.0809] <bwidawsk>
I was trying to clean up the build bits first when I realized that I have to disable anything linking against rust

[12:26:30.0632] <bwidawsk>
seems like bindgen is the place to tackle

[12:26:39.0175] <bwidawsk>
but I'm new to all this

[12:28:16.0555] <tcampbell>
I'm not sure it is worth trying to get spidermonkey to work if rustc doesn't support CET yet, unfortunately.

[12:28:33.0249] <bwidawsk>
yes, this has been my position

[12:28:45.0780] <bwidawsk>
the team driving this (not mine, I'm just the help) wants it to work in FC32

[12:29:03.0516] <bwidawsk>
but I don't know if they're naive, or willfully ignorant of how upstreams work

[12:31:19.0316] <tcampbell>
We've been engaging with other parts of Intel, but that Rust isn't supported seems like a major blocker.

[12:31:43.0968] <bwidawsk>
well, I just emailed Josh

[12:31:48.0597] <tcampbell>
bwidawsk: do you know if the FC32 target is just for libmozjs, or all of firefox

[12:31:49.0877] <tcampbell>
thanks

[12:31:54.0606] <bwidawsk>
let's see what happens

[12:32:17.0419] <bwidawsk>
the task I was given was "spidermonkey"

[12:32:35.0419] <bwidawsk>
which would imply the latter, I suppose, but I think the assumption was the former would just work with gcc and ld.bfd

[12:32:35.0735] <tcampbell>
ha. fun =\

[12:32:48.0941] <bwidawsk>
and perhaps it was sufficient at some point

[12:33:11.0402] <tcampbell>
there is a quickly growing amount of rust in just spidermonkey

[12:34:31.0265] <tcampbell>
the JIT question is two parts. 1) the IBT stuff (and a similar story for CFI / CFG). 2) SHSTK jit support which is very non-trivial and not worth starting until a clearer story for non-jit firefox is resolved

[12:34:51.0934] <bwidawsk>
well I can't recall what actually was broken outside of spidermonkey, but it was more than 0

[12:35:39.0266] <tcampbell>
spidermonkey is sometimes distributed as libmozjs packages in distros and used for things like Gnome

[12:35:58.0670] <bwidawsk>
/me nods

[12:36:42.0834] <tcampbell>
but the general Firefox question is not really an easy fix with the current levels of compiler support for CET

[12:37:04.0424] <iain>
FYI: the latest stable version of rustc is 1.42, and it looks like it is using LLVM 9.0

[12:37:13.0608] <iain>
(rustc --version --verbose)

[12:37:38.0176] <bwidawsk>
iain: I am on nightly and that's LLVM9 also

[12:37:56.0536] <bwidawsk>
well 2 nights ago anyway

[12:39:16.0642] <tcampbell>
(Things are moving in the right direction, but I think there is a lot of progress to be made on toolchains first)

[12:39:26.0982] <tcampbell>
bwidawsk: well, thanks for the additional info :)

[13:02:11.0729] <bwidawsk>
tcampbell: are you clear - is the only requirement for this to work in rust (minus flags) is to get rust on LLVM10 (or whatever version supports CET)?

[13:02:37.0925] <bwidawsk>
I think the reason IBT is being pushed so hard is because it allows Intel to undo retpoline

[13:02:54.0211] <bwidawsk>
or wait

[13:02:58.0104] <bwidawsk>
that's a shadow stack

[13:03:00.0562] <bwidawsk>
hmm :/

[13:03:12.0606] <tcampbell>
I'm not familiar with how the rust-clang implementation works.

[13:04:31.0664] <tcampbell>
My understanding of shadow-stack is that most code doesn't need to be recompiled unless it is using setjmp/longjmp or other weird exception handling

[13:05:03.0207] <tcampbell>
I've never used the CET hardware or compilers so I don't have a sense of what reality is like for it

[13:10:48.0828] <bwidawsk>
tcampbell: well given that fc32 is supposed to ship at the end of the month, it seems unlikely there'd be a released version of mozjs that they'd take in anyway

[13:11:06.0915] <bwidawsk>
they currently have mozjs68 afaict

[13:12:36.0676] <tcampbell>
bwidawsk: do you know if fc32 intends to ship the patched binaries for all users?

[13:12:46.0799] <tcampbell>
(with the no-ops)

[13:13:10.0229] <bwidawsk>
no clue, I was just looking at the latest package list. In theory there is a path to get an actual answer

[13:13:17.0483] <bwidawsk>
if it's helpful for me to do so

[13:13:59.0527] <tcampbell>
no need, this is just my curiousity about what the expected transition plan is when the hw isn't even available

[13:14:59.0451] <bwidawsk>
well the ideal would have been to have enabled this upstream a long time ago

[13:15:04.0401] <bwidawsk>
:-)

[13:54:57.0416] <mgaudet>
tcampbell: So bit of an issue I've discovered. I am in the following situation: For dynamically created functions we create our bytecode emitter and script with column set to zero (default value of `CompileOptions`). However, from the parser perspective, when we parse one of these dyanmically created functions, we prefix the body with the string `function anonymous`. What this means is that the parser says the column number is 18. So, a patch I have to derive the column number for BCE from the parser extent is broken; This long preamble essentially ends at the question: What's your gut feeling about who needs to get told "nah, the column's not what you think it is". I have a sneaking suspicion that I've wandered into a beartrap called Function.toString... to which I reserve the right to back away slowly from :P 

(An aside, so we've got that great [comment on SourceExtent](https://searchfox.org/mozilla-central/source/js/src/vm/JSScript.h#1594-1617) to describe the toStringStart/SourceStart. What the comment doesn't quite describe is column numbers -- it's not clear where the column should point. Seems to be first `(`, but we should put that in the comment if true).

[13:57:10.0933] <tcampbell>
uhh.. Waldo any thoughts on what column numbers mean within `new Function(..)`

[13:57:44.0862] <tcampbell>
I presume this ins't spec'd because errors aren't?

[13:59:44.0340] <Waldo>
tcampbell: Column numbers aren't specified anywhere, and our `new Error().columnNumber` is an extension (as is `lineNumber`).  If memory serves, the column numbers for `new Function(...)` are based on code point offset within the function body's text, nothing fancy.

[14:01:46.0156] <mgaudet>
Waldo: which text (if you know off hand) the constructed text with the `function anonymous` prefix, or the string passed to `new Function`

[14:08:39.0131] <Waldo>
mgaudet: From appearances, the full function text including `function anonymous` prefix details.  But note that prefix ends with a newline, so I think _column numbers_ are as if from the start of the provided function body text (and line number would be offset consistent with that prefix).

[14:09:14.0808] <mgaudet>
oh interesting catch!

[14:11:12.0059] <mgaudet>
Waldo: So the parser seems to consider `\n` as not starting a new column; I remember you showing off some cool column management semantics of various newline types (I remember clearly being baffled by a screenshot of Gedit doing something amazing); is there something we could use instead of `\n` that would allow the parser to deduce column zero perhaps? 

[14:13:20.0554] <Waldo>
mgaudet: That sounds very wrong, `\n` most definitely starts a new line.  Are you certain the expression you're maybe trying to use to find a zero column number there, isn't incidentally rooted at some nonzero column?  (Note also that I think we might _store_ column numbers as zero-based, but we only display them to the user as 1-based.

[14:13:21.0637] <mgaudet>
oh, but that'd bugger up the line number. 

[14:14:52.0159] <mgaudet>
also, no that was me goofing; 

[14:15:31.0497] <mgaudet>
So the constructed string is `function anonymous(a,b,c,...rest\n) {\nreturn rest.toString();\n}`; the funbox thinks this function starts at offset 18, the first paren before the args

[14:16:03.0765] <mgaudet>
but the bytecode emitter, and subsequently the JScript has column = 0 

[14:16:50.0605] <mgaudet>
(newline is obviously not at issue here)

[14:20:46.0670] <Waldo>
mgaudet: Oh, on further looking, I think this may derive from `.setFileAndLine(filename, 1)` in `CreateDynamicFunction`.  It isn't obvious to me why that wouldn't be stored as initial line/column in the token stream somewhere, then funbox would be populated with info that would be biased consistent with that initial line/column.

[14:22:33.0747] <mgaudet>
hmm. I have one more thing I want to try, then I am going to run and take the child out for a walk while the sun is... well, it's not shining as much as it was an hour ago, but it's above the horizon.

[14:26:50.0699] <Waldo>
In Canada???

[14:26:52.0663] <Waldo>
/me runs

[14:27:46.0037] <tcampbell>
/me wonders if the run-once-lambda optimization has been broken for a while..

[14:28:21.0669] <tcampbell>
there is a big mess between explicit and inferred function names..

[14:28:23.0342] <Waldo>
Seems like there should be an inverse Betteridge's Law for this.

[14:30:40.0250] <iain>
If you have to ask, it's been quietly broken for a while?

[14:33:02.0124] <iain>
The problem with that law is that it would rule out the common case where something *should* have been broken for a while, but has been rescued by an equal and opposite bug

[14:34:08.0613] <Waldo>
No, then you've just doubled up.  😁

[14:34:25.0798] <Waldo>
/me mutters

[14:34:34.0341] <Waldo>
Why have I not eaten any lunch yet...

[14:42:41.0356] <Waldo>
mgaudet: Another way of figuring out the answer to this, that may be more reliable than my rough gesticulations, would be to just run this under `rr` and put some data watchpoints and work backward to the ultimate point of origin.

[14:43:15.0013] <Waldo>
I'm mostly confident in my gesticulations, but `rr` is going to be wrong less than I will.

[14:58:19.0551] <tcampbell>
Looks like it was only broken for a month and I was the reviewer.. oops

[15:13:59.0142] <evilpie>
sfink: lol mccr8 wants me to use pointers instead of references, at least for the DOM part 

[15:15:31.0265] <sfink>
Heh. I won't argue. I had misgivings after I saw the updated version.

[15:15:31.0830] <mccr8>
sfink: is it really SpiderMonkey style to pass references?!?

[15:15:53.0544] <mccr8>
It looked pretty wrong to me. :P

[15:17:32.0044] <sfink>
so the previous version was actually placement-new'ing into the passed pointer, and I wanted it to update an existing object (it was messing up Rooted lifetimes). I probably just overreached in the correction.

[15:18:14.0010] <sfink>
I wish C++ had a notation for guaranteed non-null pointer, other than by creating your own custom wrapper thing

[15:18:37.0608] <sfink>
or rather, a reference is a good notation for that; c++ needs a notation for out params

[15:18:48.0368] <mccr8>
Yeah, we mostly rely on convention...

[15:23:26.0775] <evilpie>
I think `.init()` or `->init` doesn't make a big difference. I just have to update all the callsites again

[15:26:17.0821] <mccr8>
Sorry for the trouble. I think it is a lot easier to understand how information is flowing like that.

[15:26:23.0330] <mccr8>
with a pointer arg

[15:26:56.0707] <evilpie>
Sure, I think this is more common style

[15:27:08.0645] <sfink>
sorry for the trouble

[16:12:03.0558] <mgaudet>
confession: Spent a bunch of time debugging a problem that doesn't actually seem to be a problem when I -carefully reconstruct my patch stack- yet I still don't know what wrong in the original patch. ¯\_(ツ)_/¯ 

[16:12:06.0258] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[16:31:11.0842] <sfink>
confession: wrote benchmarking code showing in some conditions, we can drop 198% of frames. Other scenario drops 71% of frames, which sounds about right until you consider that -106 frames were dropped. Math is hard. Maybe one scenario donated frames to the other?

[16:56:16.0635] <tcampbell>
confession: untangling the TreatAsRunOnce logic again.. nearly there


2020-04-09
[01:00:59.0829] <padenot>
hi, when spidermonkey talks about PC, what does it mean? PCProfiler, for example, that kind of thing

[01:02:08.0083] <jandem>
I can't find PCProfiler in searchfox? In general "pc" in the engine is the current bytecode instruction (from program counter)

[01:04:20.0492] <padenot>
ah yes `PCCountProfiling`, sorry

[01:04:48.0981] <padenot>
this makes sense anyways, it did look like it was a bytecode instructions, but I blanked on what PC would mean

[01:05:36.0473] <jandem>
oh right, yeah that's a mechanism to get counts associated with bytecode instructions. I don't think we have actual consumers (unlike the code coverage mechanism) so it may not be super reliable

[01:05:38.0978] <padenot>
it seem to deoptimize everything right? 

[01:06:37.0040] <jandem>
I think it works with Ion so it shouldn't deoptimize that much.. For Ion it may report basic block counts instead though

[01:06:47.0798] <padenot>
We (karl and I implementing audioworklet stuff) were a bit curious about what it was an whether we need to do anything with it in the Worklet side of things, because it's an interface we don't implement, but it looks like we don't need it

[01:07:00.0592] <padenot>
thanks!

[01:08:05.0522] <jandem>
that makes sense and good to hear (the pc count mechanism is sort of an internal/deprecated thing)

[01:08:46.0674] <padenot>
(regular profiling with the gecko profiler works well however, that matters)

[01:18:55.0251] <jandem>
woo, transpiling CacheIR to MIR works in WarpBuilder for simple GetName Baseline stubs

[01:39:47.0882] <wingo>
nice!

[02:48:14.0411] <Benjamin Bouvier>
is anyone else seeing "ImportError: No module named mozversioncontrol" when trying to run configure?

[02:49:39.0484] <Benjamin Bouvier>
(on central tip)

[02:49:48.0190] <jandem>
I did get a configure error earlier that I fixed with a mach clobber, not sure if it was the same thing

[02:50:53.0644] <Benjamin Bouvier>
jandem: you're using the mach line to build spidermonkey?

[02:50:57.0770] <Benjamin Bouvier>
or configure && make?

[02:51:04.0425] <jandem>
mach

[02:52:36.0556] <Benjamin Bouvier>
something broke the `autoconf2.13 && configure && make -sj` work flow recently

[02:55:02.0085] <jandem>
Benjamin Bouvier: running configure like that WFM too. Maybe try `mach bootstrap` ?

[02:55:19.0305] <Benjamin Bouvier>
yeah i re ran mach bootstrap and it didn't help

[02:55:32.0242] <Benjamin Bouvier>
Bug 1627163 is the culprit according to hg bisect

[02:55:33.0898] <botzilla>
https://bugzil.la/1627163 — RESOLVED (glandium) — Switch python configure to python 3

[02:58:55.0341] <wingo>
lots of python environment workflow changes recently

[02:59:14.0250] <wingo>
like having to run jstests in a virtualenv, etc

[03:00:06.0884] <jandem>
I've found the mach-based workflow to be a bit more resilient to these changes (https://firefox-source-docs.mozilla.org/js/build.html)

[03:02:55.0901] <Benjamin Bouvier>
weird, a combination of mach clobber and starting mach build made it eventually work

[03:03:03.0482] <Benjamin Bouvier>
although this broke the compiler database backend

[03:03:08.0093] <Ms2ger [~half-time dedication]>
Running python without a virtualenv is a mess in general; fortunately mach already handles that

[06:29:14.0530] <evilpie>
jandem: cool these cacheir instructions map quite well to MIR

[06:30:47.0420] <jandem>
evilpie: yeah. It was also nice to see that after global vars worked, global lexicals also just worked (uses a subset)

[06:31:34.0454] <tcampbell>
jonco: OOC, is there a reason you preferred `const uintptr_t& header() const` over `uintptr_t header() const`?

[06:34:13.0954] <jonco>
tcampbell: ...no, there was no good reason to do that now you mention it

[06:34:58.0474] <evilpie>
jandem: considering that most CacheIR instructions are relatively simple we hopefully don't make too many mistakes with subtle differences 

[06:36:12.0185] <jandem>
evilpie: agreed. Longer-term I hope we can work towards a 1:1 mapping as much as possible

[06:36:43.0778] <evilpie>
oh and it seems like scalarreplacement would actually still work in the happy case

[06:38:02.0181] <jandem>
yes

[06:44:05.0327] <evilpie>
very nice

[06:47:43.0948] <jandem>
evilpie: it's also nice that for a global lexical we just emit MConstant, MSlots, MLoadSlot without any guards, due to [this](https://searchfox.org/mozilla-central/rev/4e228dc5f594340d35da7453829ad9f3c3cb8b58/js/src/jit/CacheIR.cpp#2492-2493) 

[06:48:11.0375] <tcampbell>
Benjamin Bouvier: wasm question.. If I have multiple modules, it is up to the host (eg javascript) to fetch resources and manually connect up the import/export tables, right?

[06:48:27.0404] <tcampbell>
we don't stuff URIs in the wasm side itself??

[06:48:29.0312] <tcampbell>
 * we don't stuff URIs in the wasm side itself?

[06:48:48.0108] <Benjamin Bouvier>
tcampbell: yes, the host has to do this

[06:49:04.0734] <Benjamin Bouvier>
this glue might be generated automatically by emscripten/wasi

[06:51:54.0065] <tcampbell>
yulia: is there a proposal around wasm / es module unification? All the `Abstract Module Record` and `Cyclic Module Record` stuff is part of ECMAScript, but I thought there was another doc around how WASM maps onto that?

[06:59:20.0596] <yulia>
i remember some thing about this vaguely.. I think Lin Clark might know more

[06:59:24.0712] <yulia>
I can look into it as well

[07:10:46.0059] <wingo>
https://github.com/WebAssembly/esm-integration.  last i heard it was blocked on top-level await, so that modules could be imported asynchronously as wasm compiles async

[07:12:29.0069] <wingo>
dunno the state of the formal spec text; here's a rendering of the js api tho https://webassembly.github.io/esm-integration/js-api/index.html

[07:12:45.0524] <tcampbell>
thanks!

[07:20:23.0154] <Ms2ger [~half-time dedication]>
Yep, wingo is correct about it being blocked on TLA

[07:21:00.0608] <Ms2ger [~half-time dedication]>
Spec text at https://webassembly.github.io/esm-integration/js-api/index.html#esm-integration is done, as far as I'm aware

[08:07:20.0607] <Benjamin Bouvier>
Does `--no-baseline` still entirely the baseline? I see a call to DoTypeMonitorFallback with this flag...

[08:07:33.0519] <Benjamin Bouvier>
or is it the baselined interpreter that may call it?

[08:08:11.0632] <tcampbell>
Baseline interpreter may still be doing that

[08:08:23.0266] <tcampbell>
`--no-bliterp` I think

[08:09:34.0968] <Benjamin Bouvier>
Thanks

[08:17:09.0762] <jorendorff>
iain: caroline: How did you find bug 1584820?

[08:17:11.0999] <botzilla>
https://bugzil.la/1584820 — RESOLVED (iain) — Crash in [@ JSRope::flatten]

[08:18:00.0897] <iain>
jorendorff: In the sense of figuring out what the bug was based on the crash?

[08:18:11.0677] <jorendorff>
yes!

[08:18:47.0342] <iain>
IIRC we looked at the code and went "oh god we completely forgot to root that bit, didn't we?"

[08:19:35.0206] <jorendorff>
iain: So, you were able to find it because it was a clear recent regression?

[08:19:56.0101] <Benjamin Bouvier>
Is Blinterp using the native ABI or the JIT ABI?

[08:20:26.0982] <iain>
jorendorff: Yeah

[08:20:58.0443] <iain>
We knew what the regressing changeset was

[08:21:17.0807] <iain>
The baseline interpreter uses the JIT ABI, I believe

[08:21:40.0989] <iain>
 * Benjamin Bouvier: The baseline interpreter uses the JIT ABI, I believe

[08:21:50.0947] <iain>
jorendorff: why?

[08:22:31.0062] <jorendorff>
iain: It is a rare case of a GC heap bug being filed based on crash reports, and actually fixed

[08:22:39.0546] <jorendorff>
Also, https://bugzilla.mozilla.org/show_bug.cgi?id=1584820

[08:22:48.0359] <jorendorff>
oops

[08:22:53.0219] <jorendorff>
 * Also, ...

[08:23:07.0264] <jorendorff>
 * Also, https://bugzilla.mozilla.org/show_bug.cgi?id=1627724

[08:24:00.0532] <jorendorff>
There. New bug. But stuff like this seems rarely actionable.

[08:25:16.0233] <iain>
Yeah

[08:25:36.0393] <jorendorff>
It's unfortunately a good bet that the crash is far from the bug. :-\

[08:26:25.0888] <jonco>
iain: I'm wondering why the hazard analysis didn't catch that bug 

[08:26:26.0164] <iain>
In our case the crash signature was pretty closely associated with the bug

[08:27:06.0852] <iain>
jonco: That's a good question

[08:30:08.0352] <jonco>
I'm not even sure I can see how the fix works...

[08:30:24.0982] <jonco>
it was an untraced GCVector in a class on the stack right?

[08:32:31.0147] <jonco>
sfink: unrelated, could I get a review of the other patch in bug 1627954 please?

[08:32:32.0414] <botzilla>
https://bugzil.la/1627954 — NEW (jonco) — Record time taken by parallel GC tasks in the same place even if they were run on the main thread

[08:34:46.0575] <iain>
jonco: Ah, the answer is that the fix didn't work, we backed everything out, and then we landed it again properly

[08:35:32.0905] <iain>
The fixed code is in bug 1587638

[08:35:34.0503] <botzilla>
https://bugzil.la/1587638 — RESOLVED (iain) — Deduplicate XDR atoms

[08:35:37.0727] <jonco>
ah, that would explain things

[08:38:40.0387] <jorendorff>
I wish crash-stats would let me aggregate on crashing instruction address

[08:39:12.0644] <jorendorff>
and I kind of wish it could show me a few instructions of disassembly around that address

[09:13:24.0573] <bwidawsk>
iain, tcampbell: FYI not until LLVM11 is CET properly supported. Patches exist for both LLVM10 and LLVM9, but it's unclear if those will get merged

[09:40:19.0963] <sfink>
jorendorff: yes, I have long wanted a disassembly window. I have to be pretty committed to looking at a specific crash before I'll go through the whole minidump rigmarole to get to disassembly, and it's usually what I need to have any hope of getting anywhere with a GC bug, at least.

[09:40:32.0080] <sfink>
ted was working on something that got partway there, I remembr

[09:40:39.0952] <sfink>
 * ted was working on something that got partway there, I remember

[09:41:28.0137] <sfink>
jonco: r=mex2

[09:41:40.0152] <sfink>
 * jonco: r=me×2

[09:41:51.0270] <jonco>
sfink: cheers!

[13:40:32.0735] <sfink>
Ugh. `class` declarations at the toplevel are treated like `let`. Meaning if I reload the file (in a debugger, fwiw), they'll error out with a redeclaration SyntaxError. :sad:

[13:42:21.0973] <evilpie>
sfink: var x = class { }

[13:42:40.0459] <sfink>
Heh. Maybe I'll do that, thanks.

[13:43:29.0196] <evilpie>
it feels like autoland <-> m-c have gotten extremely sparse

[13:44:50.0045] <sfink>
confession: updated hazard analysis to gcc 9. Because I could, and didn't stop to consider whether I should.

[13:44:52.0270] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:11:22.0189] <iain>
Does anybody know how often we get interrupts?

[14:21:16.0158] <iain>
The old regexp engine would fall back to interpreting regexps if we were interrupted, because the interpreter could handle interrupts without restarting. The new interpreter can't continue after handling interrupts without scary heroics (the words "manually relocate unhandlified references" appear in a V8 comment), so instead I want to just retry the regexp from the start

[14:22:01.0862] <iain>
Which should be fine so long as we don't get interrupts so consistently that we can't finish executing a slow-but-not-unreasonably-slow regexp before the next interrupt hits

[14:22:11.0948] <iain>
For some value of "slow-but-not-unreasonably-slow"

[14:46:03.0003] <tcampbell>
iain: I think "interrupts" is the slow-script dialog

[14:47:25.0923] <iain>
Yeah, that's what the original bug adding interrupt handling to the old engine talked about

[14:50:23.0583] <iain>
(bug 1077514, for the record)

[14:50:25.0248] <botzilla>
https://bugzil.la/1077514 — RESOLVED (bhackett1024) — Unresponsive script doing String.match - possible regression cause by irregexp

[14:57:41.0903] <iain>
We appear to use the same mechanism for attaching ion compilations, but in that case we set a different flag bit so the regexp can just ignore it

[15:00:05.0333] <iain>
Oh, we have InterruptTest just like oomTest

[15:00:35.0490] <iain>
It does not appear to be used in any actual tests, though

[15:02:43.0536] <iain>
... and it asserts when you run it. Okay, scratch that plan.

[15:06:05.0273] <evilpie>
iain: we have a "timeout" function in the shell that will trigger an interrupt function

[15:07:53.0234] <iain>
Yeah, I'd seen that, thanks

[15:08:05.0578] <iain>
I tested a while ago that the new engine can handle an interrupt

[15:08:17.0576] <iain>
I'm just a little unclear on whether we have to worry about getting a lot of interrupts in short succession

[15:08:23.0930] <iain>
And the answer appears to be no

[15:10:20.0069] <iain>
I briefly scared myself when I saw RecvPaintWhileInterruptingJS

[15:10:48.0986] <iain>
Which I thought might imply that we were getting interrupted by the graphics engine once per frame, or something

[15:11:39.0878] <iain>
But that's a method on HangMonitorChild

[15:18:19.0662] <evilpie>
I think code can run for quite a while before we trigger an interrupt


2020-04-10
[19:22:01.0523] <Waldo>
sfink: So whenever the hazard analysis upgrade to gcc 9 sticks, does that functionally bump our minimum gcc buid requirement?

[19:24:14.0729] <sfink>
No. The hazard analysis was already above the minimum, which I think is based on what distributions have. There are other builds on gcc 7 still. 

[19:26:31.0235] <Waldo>
Hm, which builds?

[19:28:00.0814] <Waldo>
I'm looking at if/switch containing declarations right now, but there's other C++17 stuff that I'm probably going to wonder about soon enough.  Our ["Using"](https://developer.mozilla.org/en-US/docs/Mozilla/Using_CXX_in_Mozilla_code) page has pretty much no C++17 stuff added to it yet, even stuff like fold expressions that the tree is actively using now.

[19:31:56.0934] <Waldo>
Also, for anyone here who likes Stockholm, don't remember where I saw it, but I ran across https://www.surveymonkey.com/r/isocpp-2020 recently and it would probably benefit from people here filling it out.  (I mentioned my desire for some sort of "block expression" syntax, to allow declaring/initializing all at once in code that in my current patching looks like this:

```lang=c++
    bool done;
    {
      Rooted<Value> doneVal(cx);
      if (!GetProperty(cx, result, result, cx->names().done, &doneVal)) {
        return false;
      }
      done = doneVal.toBoolean();
    }

```

but which would be much better if I could have that control-flow within an immediately-assigned expression, to avoid declaring an uninitialized variable.)

[19:39:01.0240] <Waldo>
jandem: I have local patching that removes the `NurseryAllocatedProxy` enum initializer from existence.  It has the cost of roughly duplicating (but with simplifications) `ProxyObject::New` and `ProxyObject::create` for singleton and non-singleton cases, but that seems well worth it to me.

[19:39:31.0621] <Waldo>
Tho, note that local patching sits atop a throne of a couple dozen cleanup patches.

[21:46:53.0653] <loganfsmyth>
Hey all, I'm trying to figure out if there's a fast-ish way to do something for the debugger and curious for thoughts around JSScript handling. When getting the possible breakpoint positions for a source, we ideally want an easy way to get all the JSScripts that overlap a given range. Similarly when a user adds a breakpoint, we want to be able to be able to quickly find the JSScript to add the breakpoint to. Approaches that come to mind:

1. Iterate all scripts and look for ones in range, requiring all scripts to be de-lazified
2. Give JSScript an explicit end position so we only delazify things in the range
3. Iterate and build the set of "top-level" scripts, only delazifying and checking children when the parent intersects the range
4. Give JSScript a flag so that it knows it is a "top-level" script, set when its parent is finalized
5. Maybe there is some existing way to know what a script has no parent?


[21:54:16.0583] <loganfsmyth>
 * Hey all, I'm trying to figure out if there's a fast-ish way to do something for the debugger and curious for thoughts around JSScript handling. When getting the possible breakpoint positions for a source, we ideally want an easy way to get all the JSScripts that overlap a given range. Similarly when a user adds a breakpoint, we want to be able to be able to quickly find the JSScript to add the breakpoint to. Approaches that come to mind:
1. Iterate all scripts and look for ones in range, requiring all scripts to be de-lazified
2. Give JSScript an explicit end position so we only delazify things in the range
3. Iterate and build the set of "top-level" scripts, only delazifying and checking children when the parent intersects the range
4. Give JSScript a flag so that it knows it is a "top-level" script, set when its parent is finalized
5. Maybe there is some existing way to know that a script has no parent?

[22:21:55.0159] <joshuagahan>
hello, I decided to work on https://bugzilla.mozilla.org/show_bug.cgi?id=1382370 and have been rooting around in dxr for about an hour trying to find where the spread and apply operators are defined. I know I'm failing to search for the right thing here, but does anyone have any idea where these might be defined?

[22:33:35.0410] <Waldo>
joshuagahan: `SpreadCallOperation` is a relatively useful search term here.  Tho you may quickly end up in JITs and type inference code if you're looking at performance issues in this...

[22:34:50.0458] <Waldo>
I will also say, 22:33 ZST is unlikely to be the most fruitful time to ask questions and get answers, other than from kooks like me with sometimes-kooky working schedules.  😉

[22:35:55.0231] <Waldo>
If possible, you'd be better off asking questions, say, twelve to six hours before this time of day.

[22:38:16.0627] <joshuagahan>
yeah, I know. But I kinda had the itch. I'll search with that operator and see what I can come up with. I probably got a week of learning how the internals work to even think about approaching this bug and wanted to track it down the code so I can start working on it, but thank you.

[22:41:07.0850] <Waldo>
So at a very very basic level, the rough place everything starts is with the spread `JSOp`s, which I think these days are named something `SpreadCall` or `SpreadNew` or similar.  They'll show up in the bytecode, the JITs will compile those into something mildly more optimal if baseline-compiling, then notably more optimal if Ion-compiling, with type inference inserting guards and the like in the Ion case.

[22:43:15.0055] <Waldo>
Function applying is going to center around an op called `JSOp::Apply` or something like that -- I'm not sure the name now, it used to be `JSOP_APPLY` but things have been renamed a bunch and I haven't needed to see the new state of the world.  Note that `JSOp::Apply` or whatever has to function somewhat similarly to `JSOp::Call`, because if the property-value being called _isn't_ `js::fun_apply` the native function that is the original `Function.prototype.apply`, it needs to act exactly like a normal property call of some other function.

[22:44:24.0328] <joshuagahan>
thank you so much. I'll take this as a starting point

[23:05:53.0606] <jandem>
Waldo: sounds nice, assuming the duplication isn't too bad

[23:09:15.0864] <jandem>
iain: sounds reasonable but the timeout logic in the browser is [a bit more complicated than in the shell](https://searchfox.org/mozilla-central/rev/9120151ddb35f2d4c37bfe613a54a4f10a9a3dc5/js/xpconnect/src/XPCJSContext.cpp#495-533). Still looks like it's on the order of seconds though

[23:13:31.0135] <jandem>
 * iain: that's reasonable I think but the timeout logic in the browser is [a bit more complicated than in the shell](https://searchfox.org/mozilla-central/rev/9120151ddb35f2d4c37bfe613a54a4f10a9a3dc5/js/xpconnect/src/XPCJSContext.cpp#495-533). Still looks like it's on the order of seconds though. interruptBits_ has been nice to distinguish different interrupt kinds.

[23:23:42.0535] <jandem>
iain: the old code used AutoStableStringChars for the interpreter, so we can interrupt/GC without having to worry about the chars moving

[23:32:07.0138] <Waldo>
jandem: Overall patch stack is +119 overall, which seems tolerable for making a whole lot of users imply a `NewObjectKind` by function name and not by kind, for the most part.

[23:32:20.0152] <Waldo>
Gonna go for a walk, hopefully can post the patch stack when I'm back.

[01:04:17.0670] <Waldo>
/me mutters

[01:04:52.0263] <Waldo>
It _appears_ I might have broken some `WindowProxy` stuff in refactoring, _maybe_, but not obvious yet.

[01:23:15.0534] <Waldo>
Aaaaaaughghgh I stupidly forgot a null-check on this operation...

[01:31:39.0236] <evilpie>
https://www.reddit.com/r/programming/comments/fy3eaz/firefox_75_now_supports_native_lazy_loading_of/fmya8vd/ :(

[01:37:14.0199] <evilpie>
jandem: I would like to explore implementing something for the cacheir transpiler, are you actively working on getprop?

[01:40:39.0771] <Waldo>
jandem: Okay, I think I've debugged and fixed the set of failures in my patch-stack.  Bomb run starts now.

[01:43:11.0227] <Waldo>
jandem: Note particularly, in the allocate-a-singleton-proxy path, at one point I undo the benefit of `NewProxyCache` as applied to computing the group/shape for a singleton proxy.  I am not _certain_ this is perf-safe -- my assumption is not very many singleton proxies are ever allocated, and having to do group/shape lookups afresh into hash tables every time is not a big deal.  It wouldn't be hard to further augment `NewProxyCache` with a separate run of entries to handle singletons, tho, if necessary -- just seemed not worth spending time on unless you know it's needed, or perf results indicate it's needed.

[01:43:41.0204] <Waldo>
Also this is thirty patches, so give it some time.  :coy:

[01:43:57.0948] <Waldo>
 * Also this is thirty patches, so give it some time.  ;-)

[01:44:49.0507] <Waldo>
I can at least assure you that very few are doing anything tricky, mostly just using new verbs that imply a specific `NewObjectKind`.

[03:21:17.0059] <jandem>
evilpie: no I don't have any patches on top of the one I posted, I'll try to land it the coming days. After the long weekend I want to see if we can use a python script to generate most of the CacheIR writer + a base class for the compilers/transpiler + a logger

[03:22:26.0693] <jandem>
Waldo: sounds good, I agree singleton proxies don't need the caching

[03:22:28.0168] <evilpie>
oh okay, sounds neat. I will just wait

[03:22:34.0812] <Waldo>
Woo!

[03:24:26.0734] <jandem>
evilpie: ok if you do write a patch we could land it before we make other changes

[03:24:28.0333] <Waldo>
Those patches were getting out of control, when you add 30+ lines to my `hg wip` it was starting to invoke a pager rather than fit in a single terminal window.  😱

[04:58:14.0787] <wingo>
if you treat 8 zero bytes as a Value, is it valid?  (question is about a marked stack slot, if all bytes 0 is going to be OK as an argument to TraceRoot with js::Value*)

[04:59:19.0617] <evilpie>
wingo: yeah. that is just a double 0.0

[05:00:45.0828] <evilpie>
I think we usually try to initialize though

[05:06:14.0552] <wingo>
probably not a bad idea, i can initialize it before setting the "plz mark this value" flag

[06:17:34.0871] <iain>
jandem: Oh, yeah, AutoStableStringChars might be a good answer

[07:56:23.0920] <sfink>
evilpie: thanks, the `var MyClass = class { ... };` syntax worked great, though it looks pretty weird when it's `var SubClass = class extends MyClass { ... };`

[07:59:22.0411] <evilpie>
You can do class SubClass if you want

[08:00:38.0438] <sfink>
oh, heh

[10:55:10.0901] <nala>
hello I need help downloading mozphab. I'm following the instructions in this article https://moz-conduit.readthedocs.io/en/latest/mozphab-windows.html and I'm stuck on step 5. I don't see a php.ini in the repository. The closes things to it is php.ini.production

[10:57:23.0631] <iain>
nala: It says `Copy php.ini-development to php.ini in that same directory`, so you aren't supposed to see `php.ini` yet. You are supposed to make a copy of `php.ini-development` named `php.ini`.

[11:10:51.0447] <nala>
I made a copy of the file but when I want to change the name to php.ini i get an alert that the file might become unusable. I'm not really clear what exactly is needed here. 

[11:11:18.0805] <nala>
do i need to make a folder called php.ini?

[11:12:02.0549] <nala>
I'm sorry I'm not getting this

[11:13:09.0207] <nala>
I'm not familiar with php so I'm not sure how it all works 

[11:14:47.0549] <nala>
the highlighted gray is the copy I  made .. is that correct?

[11:26:22.0654] <nala>
thats the error I get when I attempt to change the name of the copy file

[11:27:56.0362] <evilpie>
just click yes

[11:32:14.0069] <nala>
cool 

[16:32:21.0841] <Waldo>
Anyone around to rubberstamp a patch for bug 1629192?

[16:32:23.0403] <botzilla>
https://bugzil.la/1629192 — ASSIGNED (Waldo) — Add some uses of selection statements with initializers to the tree


2020-04-11
[17:01:18.0953] <sfink>
I am now. 

[17:08:46.0386] <Waldo>
sfink: It's a super-complicated patch, take your time if you have to.

[17:09:26.0733] <Waldo>
Frankly I'm surprised our "Using" page doesn't yet mention it, and no one that I know of has yet clamored to use it.

[17:09:50.0182] <Waldo>
But hey, https://treeherder.mozilla.org/#/jobs?repo=try&revision=1046cf6acddb8788e29e6711b2a455d604e43b67&group_state=expanded sez we're good to go now, so that's nice.

[17:12:36.0664] <sfink>
I may need to disconnect my VPN if I ever want the patch to load

[17:23:26.0762] <sfink>
o=me

[17:23:31.0647] <sfink>
(opined)

[17:25:32.0563] <sfink>
and re-opined, since I missed the point

[17:26:09.0946] <Waldo>
I think we're working on the wrong GC: https://twitter.com/J_Dot_J/status/1248627759410221056?s=19

[17:26:36.0931] <Waldo>
(Law Twitter, tech Twitter namespace collision.)

[17:27:37.0855] <sfink>
Our GC is all about finding things to kill. Maybe not so different?

[00:28:04.0897] <joshuagahan>
So in a day I went from spidermonkey is a blackbox and I have no questions to I have a thousand of them. But I think a good place to start is what is the difference between bytecode and opcode?

[00:31:10.0111] <jandem>
You can think of a script's bytecode as a sequence of opcodes + their operands/immediates

[00:31:24.0115] <jandem>
opcodes are defined in vm/Opcodes.h

[00:32:59.0273] <joshuagahan>
ok. Sorry I know these are basic questions. But we take the script and feed it through an AST which gives us our bytecodes and does type inference?

[00:33:50.0933] <jandem>
yeah the parser creates an AST, then the bytecode emitter generates bytecode from that, and then we execute the bytecode 

[00:34:21.0946] <jandem>
type inference happens as part of executing the bytecode 

[00:35:35.0662] <joshuagahan>
ok, but before this we feed it into the MIR pipline. Which converts these bytecodes into a "MIR and CFG from bytecode" 

[00:35:37.0117] <joshuagahan>
?

[00:37:14.0013] <jandem>
if a script becomes very hot while it runs in the interpreter or baseline jit, we can Ion compile it. That's where MIR comes in. Many scripts never become warm enough for that

[00:37:23.0099] <joshuagahan>
if the bytecode is executed directly (before the MIR) at which point do we decide if we need to feed it through the MIR->JIT pipeline. 

[00:38:07.0425] <jandem>
So MIR is only used by Ion, the most optimizing JIT. The interpreter and baseline interpreter/jit work with the bytecode for the most part 

[00:38:57.0988] <joshuagahan>
so my understanding of this is the code is executed, if we notice a segment of the code is 'hot' then it is a candidate for JIT in which case we look to compile that code on the assumption that if its hot now it will remain hot

[00:40:10.0277] <jandem>
yes exactly. That's based on counters at loop headers and function prologues 

[00:41:48.0044] <joshuagahan>
ok. so the normal flow would be src -> AST -> bytecode. the bytecode is usually as far as we go forward. During runtime if the loop header and function prologues identify a segment of code we will send that part of the bytecode through Ion's MIR->JIT to further optimize it

[00:42:00.0831] <joshuagahan>
but in general most code will never see the MIR

[00:42:34.0314] <jandem>
correct 

[00:43:09.0873] <joshuagahan>
up through the generation of the bytecode is controlled by the vm?

[00:43:58.0347] <joshuagahan>
well generation and execution. would the vm also be responsible for watching how 'hot' a segment of the code is?

[00:45:50.0097] <jandem>
the interpreter and baseline jit are responsible for incrementing these counters and "tiering up" if it exceeds some threshold 

[00:47:03.0655] <joshuagahan>
Ok thank you. I still got more questions, but that is enough to get me digging around in the code and documentation for another night. Thanks.

[00:48:27.0509] <jandem>
good luck. I have to leave for a while but usually there are folks lurking here that are happy to answer questions

[00:50:07.0708] <joshuagahan>
I appreciate it. I'm wanting to do a lot to help fix bugs with spidermonkey but outside of a classroom I've very little real experience working with asm, opcodes, compilers and the like. So this will be quite a trip. Thanks 

[00:51:52.0342] <Waldo>
We all were there at some point.  :-)

[00:53:50.0749] <jandem>
definitely (I miss some of slack's reactions here..) 

[01:08:48.0847] <Waldo>
Also -- let's be honest -- every one of us is undoubtedly there on _some_ area of SpiderMonkey or another.  The project is too big for any person to really fully comprehend every subsystem within it.

[07:28:24.0154] <tcampbell>
joshuagahan: Here is the list of curated doc-comments https://searchfox.org/mozilla-central/search?q=%5BSMDOC%5D&case=false&regexp=false&path=js%2F

[07:32:07.0111] <evilpie>
https://medium.com/programming-servo/programming-servo-my-own-private-runtime-8a5ba74c63c8

[08:47:27.0216] <Waldo>
evilpie: "Internally, JsEngine uses the mozjs API call JS_Init, which comes with a pretty nice doc comment:"  I feel very seen.  #winning

[09:47:00.0257] <evilpie>
Nice

[09:47:39.0416] <evilpie>
We should move js::ErrorReport to a public header

[10:53:48.0377] <ptomato>
evilpie: js::PrintError would be nice too 😃 https://bugzilla.mozilla.org/show_bug.cgi?id=1506323

[10:54:06.0147] <ptomato>
if I rebased that patch would you be interested in it?

[10:54:23.0213] <evilpie>
sure sounds nice

[11:05:18.0213] <evilpie>
ptomato: PrintError should probably take a js::ErrorReport& parameter

[12:11:58.0811] <ptomato>
evilpie: I can take a look at moving js::ErrorReport to a public header then as well?

[12:12:53.0581] <evilpie>
ptomato: Great. I would have probably done it otherwise. 


2020-04-12
[08:03:39.0184] <evilpie>
I implement CacheIR to MIR support for a very simple getprop

[08:19:31.0361] <jandem>
\o/

[08:20:01.0469] <evilpie>
 * I implemented CacheIR to MIR support for a very simple getprop

[08:25:33.0665] <evilpie>
jandem: the current design basically forces you to implement every possible opcode, we should probably check during snapshotting

[08:30:52.0421] <jandem>
evilpie yes that would be nice. Once we have the script to generate cacheir boilerplate we could add an opt-in/out flag per op 

[08:37:58.0684] <jandem>
evilpie : I think after that I want to do the unary/binary/compare ops we need for shell benchmarks, and maybe calls, especially important for native calls 

[08:55:59.0901] <evilpie>
jandem: yeah totally agree

[08:56:07.0058] <evilpie>
setprop/getprop first right?

[08:56:55.0157] <jandem>
supporting at least the basic slot/elements/typed-array ops would be nice 


2020-04-13
[00:58:48.0917] <wingo>
anyone got a contact for someone that would be responsible for https://s3.amazonaws.com/mozilla-games/ZenGarden/EpicZenGarden.html ?

[00:59:02.0179] <wingo>
was disabled at some point last year and i wanted to ask about licensing, etc

[06:46:49.0819] <tcampbell>
jorendorff: I'm strongly considering adding a proper scope type for classes and moving metadata off the constructor to the scope. Thoughts?

[06:47:20.0985] <tcampbell>
that would mean the `toString()` would use the scope and we'd eliminate the extra fields from all functions

[06:47:31.0618] <tcampbell>
and the fieldinitializers stuff would be a lot simpler

[06:47:37.0613] <jorendorff>
The class can be evaluated multiple times, so I think metadata needs to be on the EnvironmentObject

[06:47:48.0859] <jorendorff>
I think it's already there for some stuff like public fields

[06:48:05.0056] <jorendorff>
so, yes, that works

[06:48:06.0415] <tcampbell>
number of fields and source extent should not change though

[06:48:16.0805] <jorendorff>
makes sense

[06:48:36.0127] <jorendorff>
Wait, source extent isn't used by function.tostring anyway?

[06:48:37.0613] <tcampbell>
the lazy script stuff right now is still too complicated, and this should help

[06:48:56.0484] <tcampbell>
we have two different ranges in each source extent

[06:49:01.0932] <tcampbell>
one for parser and one for tostring

[06:49:12.0410] <tcampbell>
so everyone pays the cost for classes

[06:49:35.0802] <jorendorff>
but i thought the one for parser was needed for all functions that can be relazified

[06:49:42.0498] <jorendorff>
and the one for tostring is needed for all functions

[06:50:11.0485] <tcampbell>
all functions allocate space for both ranges

[06:50:31.0284] <tcampbell>
and for non-class-constructors, the toStringEnd and sourceEnd are the same

[06:50:58.0410] <tcampbell>
https://searchfox.org/mozilla-central/source/js/src/vm/JSScript.h#1594-1637

[06:52:44.0583] <jorendorff>
tcampbell: Maybe the solution is just to point the parser at the toString range.

[06:52:50.0569] <jorendorff>
I mean how hard can it be

[06:53:33.0997] <tcampbell>
it would be nice for default constructors

[06:55:55.0287] <tcampbell>
jorendorff: One thing I've been noticing is there are a number of piece of metadata that are updated on lazy scripts while their parents compile. I'm making them all behave similar to `enclosingScope` and using `FunctionBox::finish()` as the sync point

[06:56:41.0107] <tcampbell>
stuff that the initial parse cannot compute, and we require the BCE for. For lazy inside lazy, we just have indeterminate values.

[06:57:02.0600] <tcampbell>
when the lazy parent finally gets bytecode, we do a patch up of the inner lazy script and now it is well defined

[06:57:22.0522] <jorendorff>
tcampbell: yikes. it would be great just to have this commented somewhere

[06:57:34.0193] <tcampbell>
currently: enclosingScope, fieldInitializers, treatAsRunOnce

[06:58:17.0115] <jorendorff>
is it worth thinking now about whether these *could* possibly be computed eagerly for nested functions?

[06:58:22.0550] <tcampbell>
previously there would just deep parts of the BCE that would mutate *other* functions

[06:58:28.0445] <jorendorff>
because, I mean, all of them in theory...

[06:58:57.0960] <tcampbell>
it is a good question. My first step is to identify and expose the existing wild behaviour

[06:59:40.0220] <tcampbell>
some things like `treatAsRunOnce` probably just go away if we follow through on removing type-inference

[07:00:52.0316] <tcampbell>
the reason I was leaning towards this scope thing is that right now our scope type is a bit more flexible to stuff stuff than a function. Could also use a FunctionExtended slot for class metadata to get it out-of-line

[07:06:47.0213] <tcampbell>
okay. I think I will hold off on the scope change for now. You raise a good point about maybe just making this computed better in the parser is the better solution.

[07:07:34.0387] <tcampbell>
(my direct goal is to remove mutation from *inside* the BCE, but my approach of bundling that up and doing at the end of BCE meets that requirement

[07:07:37.0043] <tcampbell>
 * (my direct goal is to remove mutation from _inside_ the BCE, but my approach of bundling that up and doing at the end of BCE meets that requirement)

[08:27:33.0806] <jdm>
when is the getElements proxy operation invoked?

[08:32:12.0042] <tcampbell>
jdm: I believe we use as an alternative to `getProperty(0); getProperty(1);... getProperty(N)`.

[08:32:41.0056] <tcampbell>
an example is when doing a spread call: `foo(...yourObj)`

[08:33:08.0617] <jdm>
ok, thanks

[08:33:27.0170] <tcampbell>
https://searchfox.org/mozilla-central/rev/b7f3977978922d44c7d92ae01c0d4cc2baca7bc2/js/src/builtin/Array.cpp#461-471

[08:33:30.0397] <tcampbell>
that is the fallback

[08:33:48.0351] <tcampbell>
 * that is the fallback, which is just a simple for-loop

[08:37:57.0063] <jdm>
what's the difference between js::GetObjectProto and JS_GetPrototype?

[08:47:56.0017] <tcampbell>
Difference looks pretty minimal. Probably is legacy before proxies where simplified to have a prototype field

[08:48:45.0681] <tcampbell>
it almost seems like JS_GetPrototype is a fraction faster for simple proxies with static protochains (which is most..)

[08:50:12.0953] <tcampbell>
https://bugzilla.mozilla.org/show_bug.cgi?id=909623#c4

[08:55:51.0176] <evilpie>
seems like it used to be in the header

[08:56:05.0614] <evilpie>
so now it's probably useless

[09:11:55.0345] <jandem>
heh js::GetObjectProto still [uses shadow::Object](https://searchfox.org/mozilla-central/rev/2cd2d511c0d94a34fb7fa3b746f54170ee759e35/js/src/jsfriendapi.cpp#480) even though there's no reason now that it's in the cpp file

[09:22:56.0530] <jandem>
 * heh js::GetObjectProto still [uses shadow::Object](https://searchfox.org/mozilla-central/rev/2cd2d511c0d94a34fb7fa3b746f54170ee759e35/js/src/jsfriendapi.cpp#480) even though there's no need now that it's in the cpp file

[11:00:30.0398] <nala>
Hello I need help submitting a patch on phabricator. The guides I have found only tell you what to keep in mind when doing this but there is no command lines on what you need to do in the terminal to get it on phabricator. Can anybody help me with the steps to take in the terminal to put the patch on phabricator please?

[11:01:00.0716] <nala>
I'm using mercurial 

[11:01:51.0908] <nala>
I originally did hg add, then hg commit, then hg submit but nothing came up on phabricator 

[11:02:36.0558] <nala>
in the mozilla-central folder locally

[11:02:59.0229] <nala>
https://moz-conduit.readthedocs.io/en/latest/phabricator-user.html

[11:03:18.0423] <cfallin>
nala: `moz-phab submit` should do the right thing. If it doesn't figure out the "base" commit automatically, you can do `moz-phab submit -u HASH` where `HASH` is the last commit in `hg log` that isn't your change.

[11:12:29.0826] <nala>
It looks like there is an error and the filename or extension is too long? how do I fix this

[11:13:58.0424] <iain>
Don't use `-u HASH`

[11:14:12.0645] <iain>
Type `hg log` to find the last commit that isn't your change

[11:15:02.0278] <iain>
And then type `-u <some sequence of hex characters>`, replacing `<some sequence of hex characters>` with the hash that you got from `hg log`

[11:15:44.0501] <iain>
Also, you can add a reviewer with `--reviewer <phabricator name of reviewer>`

[11:16:12.0078] <iain>
Which in this case looks like it should be `--reviewer lth`

[11:18:07.0832] <iain>
nala: ^

[11:21:23.0597] <nala>
is the changeset the hash characters?

[11:21:47.0095] <evilpie>
yes

[11:24:15.0597] <iain>
nala: I don't see your changeset in that log

[11:24:21.0665] <iain>
Can you post the output of `hg wip`?

[11:24:35.0260] <nala>
q

[11:24:43.0171] <nala>
yes

[11:25:59.0255] <nala>
qqqq

[11:27:58.0142] <nala>
I'm not sure what that mean to be honest

[11:28:35.0325] <iain>
This is the state of your local tree

[11:28:52.0254] <iain>
You wrote a patch (the line with a red title starting with 517179)

[11:29:19.0161] <iain>
It is based off of an old version of mozilla-central (517178)

[11:29:48.0183] <iain>
You have also pulled a newer version of central

[11:30:54.0864] <iain>
Which is tagged with `central` (to show that this is the latest patch in mozilla-central in your current copy of the repository) and `tip` (which roughly says that it's the patch you touched most recently)

[11:31:29.0031] <iain>
Blue commit numbers / hashes mean that the patch is public

[11:31:51.0748] <iain>
Green means that it's private to you

[11:32:27.0053] <iain>
The patch that you currently have checked out has a red title

[11:33:37.0407] <iain>
`517179:8c551bf157f1` contains two numbers to identify the patch

[11:34:08.0646] <iain>
The first one goes up by 1 with every new patch 

[11:34:29.0414] <iain>
And is only accurate within your local copy

[11:34:39.0585] <iain>
The second one is a hash of the patch itself

[11:34:52.0025] <iain>
And is shared globally

[11:35:17.0316] <iain>
So my copy of "Update expectation for double-policies.https.html on win" would probably have a different sequence number, but the same hash

[11:35:44.0798] <iain>
Anyways!

[11:36:19.0265] <iain>
Try this: `moz-phab submit --reviewer lth 8c551bf157f1`

[11:39:48.0007] <iain>
Looks like there's something wrong with your patch

[11:39:57.0421] <nala>
what does the red title mean?

[11:39:57.0592] <iain>
What do you get with `hg pdiff`

[11:40:32.0782] <iain>
The red title is the patch that you currently have checked out

[11:44:04.0073] <iain>
It looks like your changeset is trying to add a file named bug152448.patch to the tree, not actually make changes

[11:45:43.0302] <iain>
Can you post `hg pdiff --stat`?

[11:46:01.0219] <iain>
That will show a summary of all the files you are modifying

[11:46:55.0853] <iain>
What you want to is is probably something like: 

[11:46:56.0876] <iain>
1. Make sure you have a copy of bug152448.patch somewhere outside the tree

[11:47:05.0290] <iain>
2. `hg up central`

[11:47:27.0317] <iain>
3. hg import <path/to/wherever/you/put/bug152448.patch>

[11:47:38.0592] <iain>
 * 3. `hg import <path/to/wherever/you/put/bug152448.patch>`

[11:47:56.0381] <iain>
 * What you want to do is probably something like: 

[11:54:07.0884] <nala>
thats the results for hg pdiff --stat

[11:55:00.0039] <iain>
Oh, yeah, that's an issue

[11:55:28.0768] <iain>
You're trying to check in all the files that get created when you build locally

[11:55:37.0252] <iain>
Everything under `build-debug`

[11:56:49.0029] <nala>
oh no how do i stop that from happening? I didn't mean to do that

[11:57:22.0141] <nala>
I'm currently doing the steps you wrote above

[11:58:22.0919] <iain>
Mercurial is set up to ignore anything in `js/src/` that begins with `obj-` or ends with `-obj`

[11:58:53.0677] <iain>
So if you name your build directory `obj-debug` instead of `build-debug`, you won't have this problem

[11:59:13.0581] <iain>
(The list of things mercurial ignores is in .hgignore in the root directory)

[12:01:43.0282] <nala>
okay i changed it

[12:03:54.0746] <nala>
is that good?

[12:04:12.0167] <iain>
No, that is still way too much stuff

[12:04:21.0080] <iain>
But that's probably fine

[12:04:35.0723] <iain>
The easiest way through this is just to make a new commit

[12:08:14.0479] <iain>
Did you try `hg up central` / `hg import <your patch>`?

[12:08:59.0804] <nala>
the first command is taking awhile to process at the moment 

[12:09:20.0408] <nala>
I did want to start all over again but I'm not sure how far back I need to go

[12:10:26.0623] <nala>
got an error 

[12:11:16.0296] <iain>
`hg up --clean central` should work 

[12:11:51.0492] <iain>
The goal is to get you a fresh, unmodified copy of mozilla-central

[12:11:58.0922] <iain>
And then you can re-apply your patch on top of that

[12:19:37.0411] <nala>
the hg import is not picking up on the patch file

[12:20:52.0174] <nala>
the patch is located in the mozilla-central root 

[12:21:30.0534] <nala>
I tried add the patch name and then tried without it but its not able to access the file 

[12:22:27.0607] <nala>
so I did ...  hg import C:\mozilla-source\mozilla-central

[12:22:48.0974] <nala>
and .. hg import C:\mozilla-source\mozilla-central\bug1524481.patch

[12:25:21.0942] <iain>
Hmm

[12:25:40.0416] <iain>
Try moving it outside of mozilla-central?

[12:25:56.0823] <iain>
This seems like a Windows problem

[12:29:02.0754] <nala>
yeah, gotcha

[12:31:15.0380] <nala>
it didn't work.. ill look into this on the windows side ... thanks for your patience and help 

[12:34:10.0196] <tcampbell>
nala: you'll probably need to use `/c/mozilla-source/mozilla-central/bug1524481.path` as the path

[12:34:38.0570] <tcampbell>
(the mozilla-build prompt is a weird linux/windows hybrid based on mingw)

[12:35:41.0970] <tcampbell>
alternatively, use a relative path like ../foo/bar/x.patch

[12:36:05.0475] <nala>
these are the different ways i've attempted 

[12:36:23.0127] <tcampbell>
ugh.. what a mess

[12:36:34.0669] <tcampbell>
what you are attempting makes sense

[12:36:50.0017] <tcampbell>
but the mozilla-build environment can be finicky

[12:37:09.0963] <tcampbell>
I'd say copy the bug.patch file into your current directory

[12:37:52.0047] <tcampbell>
does just `hg import bug.patch` work?

[12:39:31.0941] <nala>
it didn't 

[12:41:23.0447] <tcampbell>
sorry, I'm not really familiar with mercurial on windows

[12:42:21.0365] <nala>
yeah, I've put the patch in different places but it doesn't seem to be able to read it

[12:44:06.0168] <nala>
I've put the patch file in the root directory of mozilla-source and then at the root of mozilla-central but still doesn't want to pick up on it. 

[12:53:34.0671] <iain>
Depending on how mingw handles pipes and standard input, you might be able to use `hg import --` and then just copy-paste your patch followed by ctrl-D

[12:53:47.0849] <iain>
(As in, copy-paste the contents of your patch.

[12:53:54.0583] <iain>
 * (As in, copy-paste the contents of your patch)

[12:54:06.0717] <iain>
Actually scratch that

[12:54:28.0395] <iain>
You might be able to `cat <patch> | hg import --`

[12:54:54.0277] <iain>
But if `cat <patch>` works then `hg import <patch>` should too

[13:05:06.0686] <nala>
I think its working now ... after putting hg import bug.patch I got a pop up window to put in some commit message

[13:10:27.0187] <iain>
Perfect!

[13:10:27.0606] <iain>
That's what you want

[13:16:03.0345] <iain>
tcampbell: Are you reviewing the interpreter patch yet? I realized I forgot to include something

[13:16:26.0065] <iain>
I can either update the patch or throw it in a new one

[13:16:50.0081] <tcampbell>
iain: I only did a first pass

[13:17:10.0052] <iain>
Okay

[13:17:10.0373] <tcampbell>
there is also a mis-matched arg name with paircount

[13:17:24.0252] <tcampbell>
`useRegExpMatch`

[13:18:22.0445] <iain>
Oh, yeah, good catch

[13:19:06.0860] <iain>
Also I forgot to include the change that makes sure that the return codes from irregexp match up with the return codes we expect

[13:19:07.0194] <iain>
Which is probably important

[13:21:43.0227] <tcampbell>
probably

[13:49:10.0916] <iain>
EnterJIT calls a function pointer. Why doesn't the hazard analysis complain?

[13:50:23.0258] <iain>
(Asking because the old regexp engine uses AutoSuppressGCAnalysis just before calling into native code, and I'm trying to figure out if the new version still needs it)

[13:50:50.0836] <iain>
Oh, I guess everything is rooted across the call

[13:57:02.0381] <nala>
where do i add the bug ID?

[13:57:39.0827] <nala>
sorry i meant where should i put it

[13:57:43.0631] <evilpie>
nala: your commit message should be like "Bug 123 - blabla r?lth"

[13:57:45.0121] <botzilla>
https://bugzil.la/123 — VERIFIED (ramiro) — Form menus not wide enough

[13:57:47.0333] <nala>
the bug ID is 152448

[13:58:29.0477] <evilpie>
hg commit --amend -m "Bug 152448 - Added underscore to ScratchDoubleReg and ScratchFloat32Reg r?lth"

[13:58:30.0356] <nala>
oh i was suppose to put it in the pop up window?

[13:58:30.0831] <botzilla>
https://bugzil.la/152448 — VERIFIED (bugzilla) — wrong download extensions

[13:58:50.0839] <evilpie>
seems like that is the wrong bug number

[13:59:02.0126] <iain>
It's 1524481

[13:59:23.0440] <nala>
it wouldn't work with the 1 at the end 

[14:00:53.0877] <iain>
There might be something weird about filenames in Windows for importing the patch

[14:01:15.0654] <iain>
But you should be able to put the right bug number in your commit message

[14:02:24.0507] <iain>
Add "Bug 1524881:" to the beginning of the first line

[14:02:24.0971] <nala>
i think it worked

[14:02:29.0929] <botzilla>
https://bugzil.la/1524881

[14:03:17.0908] <iain>
 * Add "Bug 1524481:" to the beginning of the first line

[14:03:19.0627] <botzilla>
https://bugzil.la/1524481 — NEW (nobody) — Hide names 'ScratchDoubleReg' and 'ScratchFloat32Reg' in tier-1 back-ends

[14:03:19.0698] <nala>
nevermind it didnt

[14:04:41.0944] <iain>
Make sure to use the right bug number

[14:05:10.0739] <evilpie>
yeah the bug number is wrong

[14:05:32.0172] <evilpie>
seems like the changset id changed now

[14:05:34.0223] <iain>
Oh!

[14:05:44.0165] <iain>
Also, you changed the commit, so now the hash is different

[14:05:53.0392] <iain>
Use `hg wip` to find the correct up-to-date hash

[14:06:15.0372] <iain>
tl;dr: what evilpie said

[14:06:50.0921] <evilpie>
Does just `moz-phab submit` not work?

[14:07:59.0771] <iain>
Yeah, it probably should

[14:10:39.0810] <nala>
yeah, im sorry the number was wrong 

[14:12:12.0221] <evilpie>
nala:  yes it worked, congratulations

[14:12:53.0103] <nala>
thanks for helping btw

[14:13:02.0205] <nala>
i really appreciate it

[14:14:50.0019] <nala>
 * thanks for helping

[14:44:46.0357] <tcampbell>
confession: Supporting FieldInitializers in stencil. (Bug 1628828)

[14:44:49.0556] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:44:50.0887] <botzilla>
https://bugzil.la/1628828 — NEW (tcampbell) — Consider handling BaseScript FieldInitializers the same way as enclosing script

[15:52:16.0764] <sfink>
for anyone who is trying out a `mach`-based workflow, here's an only slightly overcomplicated `mc` shell alias for setting MOZCONFIG to `$(hg root)/mozconfig.$1`: https://hg.sr.ht/~sfink/sfink-tools/browse/default/conf/shrc

[15:59:47.0519] <darktrojan>
I'm not sure if this is the best place to ask, but I have an assertion failure that somebody here might be interested in: https://treeherder.mozilla.org/logviewer.html#/jobs?job_id=297401650&repo=comm-central&lineNumber=20256

[16:00:53.0786] <darktrojan>
absolutely no idea why this is happening for us but not firefox

[16:01:28.0211] <sfink>
mccr8: ^ that's `Assertion failure: !mNext (Must be unlinked), at /builds/worker/checkouts/gecko/js/xpconnect/src/xpcprivate.h:266` during a shutdown GC, within `FinalizeDeferredThings`. Who would look at that?

[16:06:49.0067] <mccr8>
darktrojan: I'd ask @zbraniecki. I see internationalization stuff in the stack, and that's been changing a lot recently.

[16:06:54.0262] <mccr8>
He might recognize it.

[16:07:45.0786] <mccr8>
darktrojan: I'm not sure what the i10n channel might be.

[16:09:28.0959] <darktrojan>
well he's here so hopefully when he's next online he'll notice you mentioned him

[16:09:46.0814] <mccr8>
DOM's probably a more relevant channel than SpiderMonkey.

[16:12:13.0917] <darktrojan>
so this assertion is complaining about something naughty that happened further up the stack, not near the assertion itself?

[16:13:06.0025] <darktrojan>
(I'm well outside my areas here)

[16:13:13.0066] <darktrojan>
 * (I'm well outside my usual areas here)

[16:14:44.0821] <mccr8>
darktrojan: I'm not sure. I've spend a lot of time looking at XPCWrappedJS over the years, but I've never seen that assertion failing before. I'd have to investigate what it means.

[16:16:46.0815] <sfink>
something about Localization trying to remove observers at the wrong time, or before expected things have happened, or after unexpected things have happened. Or something.

[16:16:50.0298] <zbraniecki>
darktrojan: seems to be happening here https://searchfox.org/mozilla-central/source/intl/l10n/Localization.cpp#110-115

[16:17:09.0314] <zbraniecki>
but I have no idea why would it cause any assertion failures

[16:20:09.0641] <mccr8>
I think the issue is that the Internationalization stuff normally would go away earlier

[16:20:34.0714] <mccr8>
But somehow it is going away very late in shutdown, when we're destroying XPConnect, so we're hitting the SuspectAfterShutdown() code path.

[16:21:43.0565] <mccr8>
SuspectAfterShutdown() might not deal with XPCWJS properly

[16:25:09.0234] <darktrojan>
I'm going to see if I can narrow down what part of the tests are causing it, I have some suspects but they don't make a lot of sense yet

[16:59:19.0767] <darktrojan>
okay, it looks like modern L10n code doesn't like something in our ancient test suite

[16:59:46.0907] <darktrojan>
not really a surprise 😐️


2020-04-14
[17:01:55.0316] <darktrojan>
why I've only got problems with a small number of tests is beyond me though

[17:47:52.0136] <zbraniecki>
what's the ancient test suite?

[17:48:17.0435] <Waldo>
I assume that's a characterization of jstests' contents being grody sometimes.

[17:50:50.0847] <darktrojan>
what once was mozmill and is now a bastardized combination of it and mochitest

[17:51:27.0366] <darktrojan>
I'm trying to get rid of it but I'm so swamped with other stuff it hasn't happened yet

[18:58:50.0473] <loganfsmyth>
Are `ContextOptions` flags expected to change over the course of execution or be constant? As in, if a flag affects the availability of some particular data, should I check for a flag when data is accessed, or is it safe to skip populating data entirely if the flag is off?

[19:01:19.0433] <Waldo>
loganfsmyth: Depends on the flag, I think.  Our realm-options have explicit support for immutable components burned into the global and never changed, and some mutable components that may change, but I don't think we have anything like that for context-options.

[19:03:21.0223] <loganfsmyth>
alright sounds good

[19:14:12.0617] <sfink>
Waldo: darktrojan was referring to a comm-central testsuite, specifically `Linux x64 debug Mochitests test-linux64/debug-mochitest-thunderbird-1 M(bct1)`

[19:14:44.0313] <Waldo>
Oh, hypothetically interesting.  😉

[22:37:26.0188] <jandem>
good morning

[22:37:52.0211] <Waldo>
good evening

[22:39:40.0074] <Waldo>
Back on the clock after a long weekend?

[22:42:54.0714] <jandem>
yep. Had some nice weather too but mostly just stayed inside of course

[22:43:20.0170] <jandem>
today is gray and cloudy

[22:44:16.0341] <Waldo>
I got out for some walking, watched some episodes of Man in the High Castle -- finally got through a rewatch of the first two seasons (been years since I watched, probably needed to to not forget nuances), one episode into S3.

[22:44:51.0538] <Waldo>
I feel like I've been cooped up working too nonstop lately -- I think there's a good chance I'll cut and play hooky for a day, maybe go on a long bike ride or something, not sure.

[22:46:10.0395] <jandem>
I've noticed your late hours :)

[22:46:23.0106] <Waldo>
Yeah, my schedule is whacked right now.

[22:46:31.0310] <jandem>
I managed to do nothing work related the past days except for some chat messages

[22:47:18.0951] <Waldo>
County has stay-in-place orders, but maybe surprisingly https://www.strava.com/activities/3147286695 does not actually leave the county, so I expect to do that route again soonish.

[22:48:46.0192] <jandem>
that's some serious climbing?

[22:49:35.0995] <Waldo>
Just a touch.  :-)  It looks bad, but mostly it's looooooooong, not steep.  Keep moving for two hours, and I reach the top, nothing more than that.

[22:50:25.0115] <Waldo>
In summertime you might have to worry about running out of water on the way up, but otherwise just make sure you have enough fuel and it's simple enough.

[22:51:12.0392] <jandem>
ah nice

[23:05:25.0606] <jandem>
Waldo: hm I should probably add fold expressions to that list of c++ features too... anba and I added some uses recently and it's pretty nice compared to the alternatives

[23:05:56.0601] <Waldo>
Yeah, I saw those.  I'm obviously out of the C++ loop these days, I'm not sure I knew of the existence of them.

[23:06:23.0731] <Waldo>
Did know about the if/switch thing, obviously, but lots of the C++17 gamut is not immediately recognizable.

[23:06:39.0897] <jandem>
me neither until I got the review request. Had to read the docs and play with it a bit to get how it works

[23:09:47.0973] <Waldo>
I am deeply dissatisfied with how the object-creation code is structured.  😒

[23:10:17.0175] <Waldo>
The one core `NewObject` called by all three of them, but that has an if-else series testing for very specific classes appearing.

[23:11:09.0572] <Waldo>
The three slightly-more-specific functions (referred to above, out of order) for the cases where you have a specified proto to use, a class proto (or a given proto) to use, or a particular group to use.

[23:11:18.0679] <Waldo>
And then a bazillion wrappers around those.

[23:11:51.0225] <Waldo>
Feels like there should/could be a path in for each of the `NewObject` special cases, for one.

[23:12:28.0438] <jandem>
oh yeah. I think at one point we moved proxies out of there and it was much simpler to give them their own path

[23:12:40.0865] <jandem>
probably similar for some others

[23:13:02.0832] <Waldo>
Cacheability analysis shouldn't be built into each of those three functions, either -- big conditions with a bunch of is-this-cacheable dead code based on callers that always want a singleton or tenured.

[23:15:12.0042] <jandem>
I expect a lot of this to get simpler when we remove groups

[01:19:01.0715] <jonco | away>
jandem: is there a tracking bug for that?

[01:19:55.0143] <jandem>
jonco: not yet. There's the WarpBuilder meta bug but this probably won't happen there

[01:20:32.0041] <jonco>
jandem: ok, it's going to require we change the way nursery pre-tenuring works

[01:20:44.0066] <jonco>
since that relys in groups at the moment

[01:21:10.0283] <jandem>
yeah good point, I ran into that when adding the --no-ti flag

[01:25:46.0733] <jandem>
jonco: I filed bug 1629778

[01:25:48.0231] <botzilla>
https://bugzil.la/1629778 — NEW (nobody) — WarpBuilder: figure out what to do for object pre-tenuring

[01:26:39.0424] <jonco>
jandem: thanks

[01:27:37.0148] <Waldo>
/me mutters at phabricator

[01:28:01.0334] <Waldo>
Gonna do a re-up of that stack, then land.  Don't much trust it if I don't re-up against latest tree first...

[01:28:22.0011] <wingo>
phabricator shrugs off muttering attack

[01:28:27.0561] <Waldo>
I have a few more improvements done atop those, but nothing with the payoff yet of removing a `NewObjectKind` initializer yet.

[01:29:49.0816] <jandem>
confession: reviewed bug 949220's 30 patches

[01:29:52.0571] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[01:29:53.0623] <botzilla>
https://bugzil.la/949220 — REOPENED (Waldo) — Object creation should be an atomic operation, such that if it succeeds, and reserved slots are immediately written to, finalizers can depend upon those writes having happened

[03:13:07.0046] <yulia>
confession: reviewed rfc for "ECMAScript Media Types Updates"

[05:10:48.0385] <Benjamin Bouvier>
confession: added a few new features to botzilla and histoire (show updates by channel, use a basic router to avoid reloading the page during navigation, etc.)

[05:26:41.0203] <tcampbell>
jandem: what is the summary of Bug 949220 changes?

[05:27:01.0411] <tcampbell>
any new insights or just further untangling?

[05:30:15.0721] <jandem>
a lot of tidying up like reducing the number of ways/functions to allocate an object. Also reorganizes proxy allocation (separate the singleton case, remove NewObjectKind::NurseryAllocatedProxy)

[05:32:32.0605] <tcampbell>
nice

[05:34:06.0203] <tcampbell>
that code was definitely all a mess. It used to also be full of terrible type-confusion and initalizing words with the wrong type and then fixing them later...

[05:44:02.0628] <jandem>
longer-term merging groups/shapes should simplify things quite a bit too

[05:56:11.0415] <tcampbell>
arai: do you remember what this is for? https://searchfox.org/mozilla-central/rev/2cd2d511c0d94a34fb7fa3b746f54170ee759e35/js/src/frontend/BytecodeEmitter.cpp#5511-5515

[06:00:17.0790] <tcampbell>
It seems we normally use `BCE::emitFunctionScript` for delazification instead of the `BCE::emitFunction` wrapper. I'm not clear why BinAST has a special case here

[06:04:42.0711] <tcampbell>
hmm.. actually, I can figure this out myself by putting a `MOZ_CRASH` and walking backwards in RR

[06:08:39.0888] <tcampbell>
oh.. these are forced-eager functions within lazy functions

[06:27:49.0875] <arai>
oops, sorry I overlooked the ping

[06:28:49.0474] <arai>
(looks like, keep opening 2 riot.im instances on MBP and iPad isn't good for checking unread message

[06:43:54.0744] <jonco>
anba++ for jumping in and updating FinalizationRegistry

[06:51:38.0056] <arai>
tcampbell: I don't remember the details tho, iirc, it was because of something related to lazy/eager being encoded in the file itself, instead of parser decides which one it is

[07:09:03.0035] <tcampbell>
yeah, that matches what I'm reading

[08:21:08.0415] <tcampbell>
oh jeez.. I've misspelled "lambda" so much that vscode is trying to correct me with incorrect spellings

[08:21:57.0227] <mgaudet>
Surely you mean labmda! 

[08:22:29.0000] <tcampbell>
lambdba and lamdba also snuck in..

[08:22:29.0684] <Ms2ger [~half-time dedication]>
lambada?

[08:23:02.0793] <tcampbell>
"Remove BytecodeEmitter::runOnceLamdbda helper" uh oh

[08:23:26.0711] <tcampbell>
🦙

[08:23:57.0706] <Ms2ger [~half-time dedication]>
I think you should just embrace it now

[08:24:11.0396] <Ms2ger [~half-time dedication]>
Do a search&replace on mozilla-central

[08:24:39.0559] <tcampbell>
A RunOnceLlama just seems wasteful

[08:27:52.0787] <iain>
You only llama once, Mr. Bond

[08:28:30.0564] <Ms2ger [~half-time dedication]>
https://www.youtube.com/watch?v=oWHUuNkk_ew

[08:29:21.0586] <mgaudet>
lamdba is cruel; I'm not dyslexic and even I had to look close to see what was wrong with ti

[08:29:52.0997] <mgaudet>
 * lamdba is cruel; I'm not dyslexic and even I had to look close to see what was wrong with it

[08:30:38.0643] <sfink>
a lamdba is a llama doing business as a lamb

[08:34:31.0260] <nbp>
I never noticed that Llama took 2 L at the beginning of the word in English.

[08:38:52.0603] <@sstangl:mozilla.org>
It's a straight import from the Spanish

[08:44:08.0175] <nbp>
sstangl: Welcome! didn't noticed you were around ;)

[08:44:50.0846] <sstangl>
Hey! I forgot about the merge off IRC :)

[08:45:53.0650] <Ms2ger [~half-time dedication]>
sstangl: must've been awfully quiet over there :)

[08:49:39.0466] <sstangl>
New job is all Rust/wasm stuff so the channels are on Matrix now, figured I'd background here too. Don't mind me!

[08:55:45.0620] <Benjamin Bouvier>
sstangl: 👋

[09:03:20.0198] <iain>
sstangl: Good to have you around!

[09:52:00.0108] <RyanVM>
has anybody heard from anba lately?

[10:02:05.0039] <yulia>
RyanVM: he just made a lot of patches today

[10:02:18.0185] <RyanVM>
OK, I'll try emailing him directly. Thanks!

[10:45:40.0808] <evilpie>
oh is that coverage running on release builds or something like that? Seems like String_matchAll is never called

[10:52:57.0434] <sfink>
good question. The GC code coverage is quite good, I looked at it yesterday.

[10:54:28.0593] <sfink>
I can't remember if it runs on the shell jobs at all

[10:54:54.0503] <sfink>
though test262 should be enough for matchAll, I assume?

[10:56:21.0835] <evilpie>
yes

[10:59:37.0580] <sfink>
ye gods, looking that up brought back one of the bigger sins I have committed: https://searchfox.org/mozilla-central/source/taskcluster/ci/test/compiled.yml#72-87

[12:07:24.0986] <Waldo>
tcampbell: Fair warning, the code's still a mess, I'm not done there yet.  :-)

[12:08:38.0566] <tcampbell>
it is amazing how many layers of mess we managed to accumulate around it

[12:10:05.0400] <Waldo>
It's what happens when you don't have people ruthlessly keeping cleanliness when the barnacles start showing up.

[12:10:10.0973] <RyanVM>
Waldo: BTW, regarding your clang-format question, it sounds like there may be a mismatch at the moment between upgrading to a newer clang release and the resulting reformatting from said release actually being landed

[12:10:22.0915] <RyanVM>
can't say for sure that's what you hit, but it at least sounds plausible

[12:10:53.0412] <Waldo>
RyanVM: I just run the tool and scream curses to the sky.

[12:12:26.0571] <RyanVM>
probably best to let the automated reformatting do the work

[12:19:29.0289] <djvj>
sstangl: sweet! nice to see you lurking! sounds like fun stuff you're on.

[12:20:33.0220] <Waldo>
RyanVM: You mean me not run it locally, or me run it locally?  I run it locally generally before pushing, but if I can just write things in whatever style and land them and assume something will clean up the style later...

[12:20:54.0409] <Waldo>
The less I have to think about our impossible style, the better.

[12:21:18.0191] <Waldo>
I might as well be writing Perl, for all my ability to write code that style-checks the first time through.

[12:22:17.0238] <RyanVM>
Waldo: I think there's a bigger reformatting that needs to land still, but bootstrap is already sending out the newer clang version

[12:22:36.0888] <RyanVM>
https://bugzilla.mozilla.org/show_bug.cgi?id=1619165

[12:22:39.0120] <iain>
Does a perl style-checker just remove all the newlines?

[12:22:49.0729] <RyanVM>
but https://bugzilla.mozilla.org/show_bug.cgi?id=1625884 is already landed


2020-04-15
[17:52:31.0467] <Waldo>
/me ponders bug 1624266

[17:53:04.0496] <Waldo>
We can have constructors that are always defined (of course).  We can also have constructors that are statically not defined.

[17:56:04.0806] <Waldo>
Now we need a constructor where the decision is dynamic.  Which I guess means another `ClassSpec` hook...maybe.  Accepting...which arguments, that are internal to SpiderMonkey?  The normal pref is probably reified into a very sensible `RealmOptions` that it makes sense to have.  The other one maybe shouldn't have a `RealmOption`?  Not clear.

[17:56:52.0409] <Waldo>
Or maybe just both prefs need to feed into the enabling/disabling of the option.

[17:58:15.0432] <Waldo>
But I guess if you do that, the handful of functions that presently assert "this stuff isn't enabled" will have to change.

[18:05:33.0152] <Waldo>
Oh, huh -- we apparently _already have_ realm options for the available-but-not-exposed case.  https://searchfox.org/mozilla-central/source/js/public/RealmOptions.h#137  Bleh.  Ish.

[18:25:39.0438] <Waldo>
Kinda feels like these options should be combined into a tristate.

[03:55:17.0608] <loganfsmyth>
Hey all, I'm trying to figure out if there's a fast-ish way to do something for the debugger and curious for thoughts around JSScript handling. When getting the possible breakpoint positions for a source, we ideally want an easy way to get all the JSScripts that overlap a given range. Similarly when a user adds a breakpoint, we want to be able to be able to quickly find the JSScript to add the breakpoint to. Approaches that come to mind:

1. Iterate all scripts and look for ones in range, requiring all scripts to be de-lazified
2. Give JSScript an explicit end position so we only delazify things in the range
3. Iterate and build the set of "top-level" scripts by removing things scripts that are children of other scripts, only delazifying and checking children when the parent intersects the range
4. Give JSScript a flag so that it knows it is a "top-level" script, set when its parent is finalized
5. Maybe there is some existing way to know that a script has no parent?



[03:56:40.0449] <loganfsmyth>
 * Hey all, I'm trying to figure out if there's a fast-ish way to do something for the debugger and curious for thoughts around JSScript handling. When getting the possible breakpoint positions for a source, we ideally want an easy way to get all the JSScripts that overlap a given range. Similarly when a user adds a breakpoint, we want to be able to be able to quickly find the JSScript to add the breakpoint to. Approaches that come to mind:
1. Iterate all scripts and look for ones in range, requiring all scripts to be de-lazified
2. Give JSScript an explicit end position so we only delazify things in the range
3. Build a set of "top-level" scripts and only delazify/drill down into the ones with a correct range
  a. Iterate and build the set of "top-level" scripts by removing things scripts that are children of other scripts
  b. Give JSScript a flag so that it knows it is a "top-level" script, set when its parent is finalized
4. Maybe there is some existing way to know that a script has no parent or is "top-level"?

[04:13:17.0983] <jandem>
for this it would be nice to have a function/script tree rooted under the script source, something we've discussed doing. Then if ordered on start position, you could get this information pretty efficiently 

[04:13:33.0516] <jandem>
/me back later

[05:11:42.0629] <loganfsmyth>
ah certainly an option, I had assumed that keeping a strong reference to the script root was explicitly unwanted so that fully unused parts could be GCed

[05:58:32.0057] <jandem>
good point, that'd need some thought

[05:58:36.0200] <jandem>
arai: ping?

[05:58:59.0386] <arai>
pong

[06:01:32.0246] <jandem>
arai: hey, the Destructuring try note and exception handler behavior is pretty annoying for the JITs. I'm wondering about rewriting that to be more similar to say for-of loops. Do you have any thoughts on that?

[06:02:23.0983] <jandem>
I think a potential issue is generating a lot of bytecode with a naive implementation

[06:04:58.0524] <Benjamin Bouvier>
Is there a convenient place where to put some internal procedures that might be interesting to Spidermonkey/Cranelift hackers? (like using perf support, explanation of ionflags and misc other things)

[06:05:19.0618] <Benjamin Bouvier>
We used the wiki for this at some point, but i don't know if it's still the best place (and it gets outdated quickly)

[06:05:57.0090] <arai>
/me reads destructuring impl

[06:09:39.0532] <evilpie>
Benjamin Bouvier: https://firefox-source-docs.mozilla.org/js/index.html

[06:10:39.0314] <Benjamin Bouvier>
evilpie: is this generated from a source that's in gecko?

[06:11:01.0245] <Ms2ger [~half-time dedication]>
Depends on your definition of "gecko" :)

[06:11:16.0540] <Benjamin Bouvier>
yes it is! https://searchfox.org/mozilla-central/source/js/src/doc/Debugger/Debugger.Script.md#231

[06:14:35.0337] <mgaudet>
Benjamin Bouvier: It was a pretty nice experience working with it; just use `mach doc` to get a local webserver with your new stuff included

[06:15:18.0192] <mgaudet>
One annoying caveat tho is that the file-watch code will seemingly only rebuild the modified subtree, which breaks inter-tree references. 

[06:17:06.0704] <mgaudet>
`./mach lint -l rst` will also verify your reStructuredText, which is a more opinionated markup than I am used to, but you are also free to use Markdown

[06:21:13.0640] <Benjamin Bouvier>
sweet, thanks for the tips

[06:22:03.0285] <Ms2ger [~half-time dedication]>
> <@mgaudet:mozilla.org> One annoying caveat tho is that the file-watch code will seemingly only rebuild the modified subtree, which breaks inter-tree references.

Is there a bug for that?

[06:23:06.0237] <mgaudet>
Hrm. I don't think I opened one

[06:23:08.0843] <mgaudet>
Should have

[06:23:10.0972] <mgaudet>
but didnt.

[06:23:17.0013] <mgaudet>
I'll try to today. 

[06:36:15.0652] <arai>
jandem: do you mean replacing destructuring trynote with regular try-catch like for-of does?

[06:38:06.0259] <jandem>
arai: yeah, that would be nice if possible... I think I can fix my bug without changing this so it's not urgent

[06:38:21.0135] <arai>
now that we have TryEmitter, it's easy for frontend side to rewrite with try-catch.  and if it also simplifies the VM side, that would make sense

[06:42:36.0631] <arai>
(while reading the bytecode, again I hoped we had `JSOp::IsNotUndefinedOrNull`... :P

[06:43:40.0079] <jandem>
haha, yes that would help emitPushNotUndefinedOrNull

[06:44:21.0831] <jandem>
arai: thanks! maybe smoosh should implement this with try-catch :)

[06:46:08.0932] <arai>
I'd like to modify C++ frontend as well, to keep the resulting bytecode identical between them,  if that happens before completing the transition to smoosh

[06:50:20.0755] <jandem>
makes sense

[06:53:54.0529] <tcampbell>
loganfsmyth: https://bugzilla.mozilla.org/show_bug.cgi?id=1623763

[06:54:30.0986] <tcampbell>
I've been thinking going the direction of your option 3

[06:55:10.0221] <tcampbell>
most scripts can check if they are a top-level by checking !function. The standalone function case is more of a mess

[06:57:50.0616] <loganfsmyth>
tcampbell: Yeah the issue in our case is mostly where the !function script has been GCed, so you have no way to know which of the other scripts would have been its children

[06:58:10.0628] <tcampbell>
oh right.. bah

[06:58:45.0333] <tcampbell>
can we use the `sourceEnd` to help us?

[06:59:06.0834] <tcampbell>
translate the line/column hit-test into a code-point-index hit-test?

[07:00:43.0053] <tcampbell>
in general I want any of the script iterators  to be unified on lazy/non-lazy

[07:02:23.0477] <tcampbell>
loganfsmyth: I've got three hours of meetings coming up, but I wonder if we should sit down and chat about this stuff tomorrow

[07:02:28.0332] <loganfsmyth>
I guess we could if we wanted to get the source text first and then process it into an offset, but it does seem like a lot of work that the API shouldn't have to care about

[07:03:03.0945] <lth>
Waldo: can you mute?

[07:04:02.0112] <loganfsmyth>
tcampbell:  if we can find a time where I'm awake, I'm in JST right now. FYI here is what we do now: https://searchfox.org/mozilla-central/rev/72e3388f74458d369af4f6cdbaeaacb719523b8c/devtools/server/actors/source.js#400-412 but turns out the first `if` body a bad optimization anyway so we're gonna just have the `else` logic there soon

[08:09:39.0292] <Benjamin Bouvier>
when JS JIT code calls into native code, it has to go through a VMCall, right?

[08:11:01.0840] <evilpie>
I don't think so, `callWithABI` doesn't use it

[08:11:56.0074] <Benjamin Bouvier>
ah right, that's the mechanism

[08:12:03.0828] <Benjamin Bouvier>
/me feels like he rediscovers the C++ code base 😅

[08:15:23.0556] <tcampbell>
`callVM` supports GC, while `callWithABI` skips a lot of normalization and does not support possible GC

[08:19:05.0037] <Waldo>
lth: Whoops, I guess I did without noticing the ping.

[08:21:31.0067] <Waldo>
`callWithABI` is basically "call a function pointer".  `callVM` assumes a `JSContext*` first argument, plus other stuff specific to GC-causing things.

[08:21:48.0870] <Waldo>
Also `callVM` internally uses `callWithABI` last time I looked.

[08:23:34.0364] <tcampbell>
> <@waldo:mozilla.org> Also `callVM` internally uses `callWithABI` last time I looked.

Not these days. The `callWithABI` does some extra checks that a GC did not happen.

[08:24:48.0337] <tcampbell>
https://searchfox.org/mozilla-central/rev/72e3388f74458d369af4f6cdbaeaacb719523b8c/js/src/jit/MacroAssembler.cpp#2786-2822
https://searchfox.org/mozilla-central/rev/72e3388f74458d369af4f6cdbaeaacb719523b8c/js/src/vm/JSContext.h#1218-1247

[08:46:36.0901] <@allstarschh|afk>
jonco: ping

[09:21:28.0625] <iain>
Does matrix have an equivalent for "mrgiggles: what is 0x2f?" yet?

[09:24:10.0452] <Waldo>
sfink: What is 0x2f?

[09:24:14.0599] <Waldo>
(let's find out!)

[09:24:43.0061] <iain>
It is JS_FRESH_NURSERY_PATTERN, apparently

[09:24:46.0092] <iain>
https://searchfox.org/mozilla-central/source/js/src/gdb/mozilla/JSString.py#50

[09:25:15.0393] <sfink>
tcampbell: jonco: @allstarschh|afk : https://research.google/pubs/pub43823/

[09:27:41.0762] <evilpie>
> <@iain:mozilla.org> Does matrix have an equivalent for "mrgiggles: what is 0x2f?" yet?

Benjamin Bouvier: should be easy to add right?

[09:28:19.0458] <Benjamin Bouvier>
evilpie: yes! might need an SQL migration to remember the answers, but totally doable

[09:32:39.0490] <Benjamin Bouvier>
feel free to send PRs 😎

[09:50:22.0208] <tcampbell>
This Memento Mori thing is actually very cool. Much cleaner than our ObjectGroup tracking for pretunuring

[09:51:35.0049] <sfink>
mrgiggles used a messy combination of (1) periodically parsing C++ headers from the latest checkout, (2) persistent in-memory data structures pickled to disk, (3) a postgres DB, and (4) hardcoded values in the code. I think the magic was still (4), but it might have been (1).

[09:51:56.0074] <sfink>
 * mrgiggles used a messy combination of (1) periodically parsing C++ headers from the latest checkout, (2) persistent in-memory data structures pickled to disk, (3) a postgres DB, and (4) hardcoded values in the code. I think the magic number values was still (4), but it might have been (1).

[09:52:06.0659] <sfink>
 * mrgiggles used a messy combination of (1) periodically parsing C++ headers from the latest checkout, (2) persistent in-memory data structures pickled to disk, (3) a postgres DB, and (4) hardcoded values in the code. I think the magic number values were still (4), but it might have been (1).

[09:52:37.0132] <sfink>
(I don't mean it used a combination of all of those; they were for various different features.)

[10:55:48.0755] <Waldo>
Anyone want to review patches for bug 1630346?  They're pretty straightforward, but they bitrot pretty fast because I'm doing Mercurial file-copies of files that can change pretty quickly (invalidating the removal of large numbers of existing lines in the new file).

[10:55:50.0215] <botzilla>
https://bugzil.la/1630346 — ASSIGNED (Waldo) — Move PlainObject-centric stuff into vm/PlainObject*.*

[11:24:28.0992] <Waldo>
jandem: I actually have you penciled into the commit messages right now, but I figure I should try to spread the burden around.  :-)

[11:24:59.0253] <Waldo>
Was doing them atop the `NewObjectKind` patching, out of necessity, but they're moderately orthogonal.

[11:25:05.0522] <jandem>
kidding aside, happy to look at it tomorrow morning 

[11:26:07.0294] <Waldo>
Surely someone will volunteer as tribute before then!

[11:26:13.0262] <Waldo>
(we can hope)

[11:29:30.0369] <iain>
sfink: ping

[11:29:42.0200] <sfink>
wazzup?

[11:29:52.0580] <iain>
Question about annotations.js for hazard builds

[11:30:33.0839] <iain>
I have a list of ICU functions that use function pointers internally that we want to whitelist

[11:30:51.0047] <sfink>
ooh, right, you're touching the ICU morass

[11:31:02.0969] <iain>
For regexps, yeah

[11:31:30.0191] <iain>
Between the last time I scrubbed the hazard build clean, and the current tree, somebody went and updated ICU from 65 to 66

[11:32:02.0185] <iain>
And for whatever reason ICU puts the version number in all of its function signatures

[11:32:13.0661] <sfink>
what sorts of GC pointers are held unrooted during icu calls?

[11:32:52.0309] <iain>
The input string to a regexp

[11:33:18.0059] <sfink>
oh, and you're probably playing nice and having a no gc token on the stack or someting

[11:33:21.0257] <iain>
Yes

[11:33:33.0828] <iain>
That is precisely what I am doing

[11:33:37.0065] <sfink>
I'm totally fine if you want to add /^icu_/ to ignoreGCFunction() or whatever

[11:35:47.0153] <iain>
It's a little tricky, because there's also stuff like "uprv_malloc_(65|66)" that doesn't have an ICU namespace

[11:36:00.0436] <sfink>
ugh

[11:36:11.0823] <iain>
But I think I can probably make something work?

[11:36:40.0346] <sfink>
yeah, I think you can be pretty liberal about whitelisting all of that stuff

[11:36:47.0759] <sfink>
how painful it will be is a separate question

[11:37:08.0956] <sfink>
it would be nice if I recorded what source path a symbol was defined in or something, but I don't

[11:37:17.0321] <iain>
Okay, cool

[11:37:23.0757] <iain>
Expect a review in the next week or so

[11:37:48.0612] <sfink>
yep! fwiw, it's now not horrible to run hazard analyses locally

[11:38:14.0206] <sfink>
or at least, n=1 people other than me have managed to do so, with the new `mach hazards` commands

[11:38:21.0957] <sfink>
but right now I need to go help with lunch


2020-04-16
[08:08:59.0176] <arai>
mgaudet: jsapi-tests needs to be executed with CWD=m-c/js/src

[08:09:12.0844] <arai>
do you know which directory `mach jsapi-tests` uses?

[08:09:16.0634] <arai>
(I haven't used it

[08:10:03.0767] <arai>
(context is bug 1628784

[08:10:05.0428] <botzilla>
https://bugzil.la/1628784 — NEW (nobody) — ./mach jsapi-tests crashes in testBinASTReaderContextECMAScript2

[08:10:22.0658] <arai>
sorry, didn't notice it's from 1 week ago :P

[08:10:28.0898] <Ms2ger [~half-time dedication]>
https://searchfox.org/mozilla-central/source/testing/mach_commands.py#540

[08:10:29.0943] <mgaudet>
heh; the wrong one I have to assume. I was using the top level dir to issue the command; 

[08:10:56.0734] <mgaudet>
I have to imagine it uses whatever mach's cwd is, and we'd have to teach it about the special cwd requirement if we wanted that to work properly

[08:11:38.0864] <Ms2ger [~half-time dedication]>
One could easily pass a `cwd` argument to `subprocess.call()`

[08:11:48.0095] <arai>
Ms2ger [~half-time dedication]: thanks!  I'll fix it

[08:12:09.0065] <Ms2ger [~half-time dedication]>
`self.topsrcdir` is available

[08:12:13.0861] <Ms2ger [~half-time dedication]>
Thanks arai!

[08:14:52.0150] <mgaudet>
\o/

[08:14:54.0260] <mgaudet>
thanks :) 


[08:29:16.0038] <tcampbell>
jorendorff: how is your understanding of parameter expression environments?

[08:29:53.0524] <jorendorff>
tcampbell: In the implementation, pretty bad actually. Spec, I know where to dig

[08:30:11.0447] <jorendorff>
Also: I think the spec changed quite recently

[08:30:12.0171] <tcampbell>
I'm trying to understand if/where Step 20 of https://tc39.es/ecma262/#sec-functiondeclarationinstantiation exists in our code

[08:30:28.0384] <tcampbell>
that might be part of my confusion

[08:30:38.0095] <tcampbell>
 * oh, spec change might  be part of my confusion

[08:31:07.0397] <tcampbell>
even in the spec I'm not very clear why that step exists

[08:32:43.0704] <tcampbell>
oh I see

[08:34:32.0598] <tcampbell>
normal calls get `NewFunctionEnvironment`, while parameter expression calls get `NewFunctionEnvironment`, `NewDeclarativeEnvironment`, `NewDeclarativeEnvironment`

[08:35:13.0695] <tcampbell>
In our engine we _seem_ to flatten the first `NewDeclarativeEnvironment` (from Step 20) into the `NewFunctionEnvironment`

[08:35:37.0096] <jorendorff>
ah

[08:35:38.0447] <jorendorff>
/me looks

[08:35:42.0648] <arai>
iiuc, we create yet another var scope for body (extraVarScopeBindings), if we take step 20

[08:36:17.0893] <tcampbell>
I believe our `extraVarScopeBindings` is step 28

[08:36:23.0209] <arai>
oh

[08:36:46.0223] <tcampbell>
but this is where I get confused

[08:37:40.0858] <arai>
my understanding was that, the not-extra one is used for parameter in that case

[08:39:05.0874] <tcampbell>
in the spec I see:
https://tc39.es/ecma262/#sec-prepareforordinarycall  Step 8
https://tc39.es/ecma262/#sec-functiondeclarationinstantiation  Step 20
https://tc39.es/ecma262/#sec-functiondeclarationinstantiation  Step 28
https://tc39.es/ecma262/#sec-functiondeclarationinstantiation  Step 30 (optional)

[08:40:31.0496] <tcampbell>
In jsshell I see: `function lexical [0x1ade3ca7a520] -> function body var [0x1ade3ca7a500] -> function [0x1ade3ca7a4e0]` for `function F(x = eval("var z;")){ let c; }`

[08:47:26.0191] <smaug>
jimb: https://searchfox.org/mozilla-central/source/js/src/debugger/Debugger.h#756

[08:47:38.0115] <smaug>
where do we add and remove entries from that map?

[08:47:42.0510] <smaug>
to/form

[08:47:48.0152] <smaug>
 * to/from

[08:48:34.0362] <tcampbell>
smaug: https://searchfox.org/mozilla-central/rev/97cb0a90bd053de87cd1ab7646d5565809166bb1/js/src/debugger/Debugger.cpp#6143

[08:49:43.0245] <smaug>
aha, that didn't sound like something which adds or removes anything :)

[08:50:07.0838] <tcampbell>
yeah, I've gotten confused there too

[08:51:25.0130] <smaug>
I'm still trying to get my head around https://bugzilla.mozilla.org/show_bug.cgi?id=1501608#c9

[08:52:21.0411] <smaug>
wondering if it is possible that we access Debugger.scripts after CC has run, but we haven't somehow cleared entries from the map

[08:53:39.0950] <jorendorff>
yulia: Did the change to scoping in function arguments land?

[08:54:06.0329] <tcampbell>
smaug: hmm.. I'm at actually clear from reading this when the sweeping happens

[08:55:09.0277] <tcampbell>
the edges are certainly cross-compartment

[08:59:36.0742] <smaug>
how do scripts get access to Debugger.scripts?

[09:00:11.0960] <tcampbell>
the debugger compartment exposes D.Scripts as objects

[09:00:16.0162] <tcampbell>
for the debugger to use

[09:01:03.0698] <tcampbell>
(err.. maybe I misunderstood question)

[09:02:00.0711] <smaug>
tcampbell: I mean concretely where that is exposed to JS

[09:02:05.0816] <smaug>
from C++ to JS

[09:05:49.0188] <tcampbell>
smaug: https://searchfox.org/mozilla-central/rev/567b68b8ff4b6d607ba34a6f1926873d21a7b4d7/js/src/debugger/Object.cpp#2450-2480

[09:06:21.0680] <tcampbell>
that is one method on the debugger when we want to turn a normal CCW into a DebuggerObject

[09:07:29.0859] <tcampbell>
most cases in the debugger go throw a callback hook like "onNewScript"

[09:07:52.0266] <tcampbell>
that runs in debugger compartment and is handed the DebuggerObject/DebuggerScript wrapping the real object

[09:26:12.0995] <yulia>
jorendorff: can you remind me which one?

[09:26:38.0708] <jorendorff>
I'd have to ask ljharb

[09:26:58.0427] <yulia>
ah within tc39

[09:27:07.0652] <jorendorff>
Yes

[09:27:12.0965] <jorendorff>
sorry, spec change

[09:28:00.0465] <jorendorff>
I remember there were slides for it

[09:28:20.0001] <yulia>
it wasn't in the last meeting right? unless you mean brand checks

[09:30:10.0880] <yulia>
or maybe this? https://github.com/codehag/TC39-news/blob/master/meetings/tc39-12-2019.md#eliminate-extra-environment-for-eval-in-parameter-initializers-redux

[09:30:49.0181] <yulia>
 * maybe this? https://github.com/codehag/TC39-news/blob/master/meetings/tc39-12-2019.md#eliminate-extra-environment-for-eval-in-parameter-initializers-redux

[09:32:02.0702] <yulia>
if it was for this last meeting, i will have the digest up in just a few min

[09:37:12.0411] <arai>
tcampbell: 
```
var z = "outer";
function F(x=eval("var z = 'eval';"), c=function() { return z;}) {
  var z = "inner";
  console.log(c());
}
F();
```

[09:38:37.0161] <arai>
so, to my understanding, the environment there is to store var in eval in different place than var in body.  and in the above case, we use function env's var for eval, and extra var for body

[09:39:05.0854] <arai>
(the above code behaves differently for strict vs non-strict

[09:39:47.0456] <arai>
so, iiuc, environment created in step 20 is folded into function env

[09:40:11.0800] <tcampbell>
I wonder why the spec needs step 20

[09:40:28.0426] <tcampbell>
in the normal function case we just use the function env for eeverything

[09:43:52.0814] <tcampbell>
https://docs.google.com/presentation/d/13QR4YDAVQX9xm1MoDlQp0nRXjrrKvSGm3I-QHqOgpyE/edit#slide=id.g75abf7c838_0_160

[09:43:55.0983] <tcampbell>
slide 13

[09:44:11.0685] <tcampbell>
I think that makes sense then. The eval do not see the parameters

[09:47:03.0291] <arai>
ah...

[09:47:23.0802] <arai>
now I feel, we don't implement step 20 properly

[09:48:16.0441] <arai>
I guess, the affected case is `function F(x=eval("var z;"), z) {} F();`

[09:49:11.0765] <arai>
or even `function F(x=eval("var z=10;"), z=20) { console.log(z); } F();`

[09:50:44.0004] <yulia>
was it not covered in https://bugzilla.mozilla.org/show_bug.cgi?id=1608808?

[09:51:09.0236] <arai>
Firefox and Edge throw redeclaration.  chrome and safari don't

[09:51:23.0446] <arai>
err, maybe I should test with nightlies for all

[09:52:17.0895] <arai>
Chrome canary throws redeclaration

[09:52:47.0262] <yulia>
 * it wasn't in the last meeting right?

[09:59:26.0620] <arai>
is throwing redeclaration expected behavior?

[10:01:11.0237] <littledan>
/me considers trying to understand what's going on here, reconsiders, and runs away screaming

[10:02:55.0665] <yulia>
since z in eval, and z in the param are both treated within the param env, then... yes i guess? we can check with syg 

[10:03:40.0491] <syg>
o no

[10:03:49.0245] <yulia>
:|

[10:04:03.0787] <syg>
that was general exasperation at having to page this back in

[10:04:04.0867] <syg>
let's see

[10:04:31.0031] <syg>
what is the snippet and the output in question?

[10:04:44.0922] <yulia>
`unction F(x=eval("var z=10;"), z=20) { console.log(z); } F();`

[10:04:50.0343] <yulia>
 * `function F(x=eval("var z=10;"), z=20) { console.log(z); } F();`

[10:05:30.0799] <yulia>
ff and chrome canary output is `SyntaxError: redeclaration of let z`

[10:06:00.0166] <syg>
let me work that through...

[10:09:52.0283] <syg>
i think the redecl error is right?

[10:10:39.0185] <yulia>
... its.. intentional right?

[10:11:48.0208] <arai>
what does "outside" in step 20.a mean then?  "NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared."

[10:11:58.0104] <syg>
yeah, the new simpler scope nesting is, from outer to inner, function (direct eval vars) -> params -> function body -> function body lets/consts

[10:12:10.0189] <arai>
(or maybe I'm looking obsolete spec?

[10:12:25.0998] <syg>
"outside" meaning "outer to", in the diagram params are nested under the function env

[10:13:09.0315] <syg>
PrepareForOrdinaryCall creates a new function env via NewFunctionEnvironment, if we have parameter expression, step 20 of FDI creates a new environment and sets that as the lexical environment when making the parameter bindings

[10:13:28.0290] <syg>
but the *VariableEnvironment* remains the function env

[10:13:42.0180] <syg>
so when direct evals happen, vars get introduced in the function env

[10:14:13.0113] <arai>
and lexical for parameter conflicts with var in function env?

[10:14:19.0966] <syg>
in this case, by the time the direct eval happens, there's a binding for the parameter name in the param env already

[10:14:27.0020] <syg>
and the redecl error happens

[10:15:09.0798] <arai>
oh, I was thinking opposite direction for conflict

[10:15:55.0338] <syg>
this is the redecl check in EDI 5.d.ii

[10:17:44.0827] <syg>
> <@arai:mozilla.org> and lexical for parameter conflicts with var in function env?

yes exactly

[10:18:02.0747] <syg>
but the timing is reversed, as you said, it's the var that conflicts with the lexical that exists already

[10:18:44.0345] <syg>
as for the intention

[10:18:55.0138] <syg>
the intention was to remove code we all had to write that was terrible and have things "just work"

[10:19:19.0625] <arai>
okay, back to the original question.  what is the newly created env in FDI 20 for?

[10:19:32.0631] <syg>
that's the env for parameters

[10:19:50.0661] <syg>
otherwise parameters would end up going into the function environment

[10:20:07.0155] <syg>
anba honestly would know better, he drafted the fix

[10:20:54.0779] <arai>
function environment also has lexical environment, right?

[10:22:08.0318] <arai>
err, not correct I guess

[10:23:09.0548] <arai>
I was mixing up env and context :P

[10:24:06.0568] <syg>
PrepareForOrdinaryCall makes a new env that's *both* the var and the lexical env

[10:24:15.0749] <syg>
so FDI 20 makes a new env and only sets it as the lexical env

[10:25:20.0780] <arai>
okay, so, in the spec, function env is single environment.  and in SpiderMonkey, function scope has both var and lexical

[10:25:55.0441] <arai>
and FDI 20 corresponds to lexical part ?

[10:26:02.0211] <syg>
yep

[10:26:31.0712] <syg>
SM can check for redecls within one environment since it remembers the binding kind (lexical or var)

[10:26:39.0382] <syg>
the spec just kinda has bindings, so we had to make two

[10:28:11.0395] <arai>
makes sense, thank you :)

[10:29:39.0518] <syg>
you bet

[10:30:57.0017] <syg>
now let's hope we never have to think about param scopes again

[10:31:16.0782] <arai>
:)

[10:32:48.0564] <syg>
is this for the new rust frontend?

[10:34:24.0779] <arai>
not yet.  started from tcampbell 's question

[10:35:02.0528] <arai>
but I'll start implementing it shortly in rust frontend.  so it was good to know that now

[10:36:44.0067] <syg>
cool

[13:19:09.0008] <tcampbell>
Ohhh.. this all makes much more sense

[13:26:27.0553] <Waldo>
You sure you're in the right place to say that?

[14:15:58.0733] <tcampbell>
I used the "more" qualifier

[14:35:37.0944] <Waldo>
Dunning-Kruger ;-)

[14:49:59.0894] <tcampbell>
I'll just write it into this comment and surely anba will swoop in and correct me


2020-04-17
[22:40:06.0687] <jandem>
Waldo: you around to rubberstamp a trivial one-line linker error fix?

[22:40:18.0181] <Waldo>
jandem: You rang

[22:41:26.0686] <jandem>
Waldo: https://phabricator.services.mozilla.com/D71267

[22:41:51.0720] <Waldo>
https://www.youtube.com/watch?v=sPMKlEwrIs8 for the cultural reference

[22:42:26.0587] <Waldo>
Done.

[22:43:19.0584] <Waldo>
/me mutters, wonders if we could make `JS::Object` stick nowadays

[22:46:31.0550] <Waldo>
Here goes nothing, hopefully no one touches `vm/JSObject*` before my patch autolands...

[23:56:41.0925] <Waldo>
It's kinda disturbing how I've found so many dead functions, functions that take arguments they don't need, etc. in all this.

[00:00:23.0951] <wingo>
waldo are you subtracting value from firefox

[00:00:50.0225] <Waldo>
wingo: Don't worry, I'm embiggening elsewhere.

[00:03:13.0194] <wingo>
ah well, carry on then

[00:08:58.0055] <Waldo>
Of course there's always the possibility I'm embiggening with negative value...

[00:23:20.0282] <Benjamin Bouvier>
Waldo: https://www.smbc-comics.com/comic/punctuation

[00:30:32.0334] <Waldo>
Benjamin Bouvier: ^

[00:31:14.0583] <Benjamin Bouvier>
I *knew* you'd like it he said laughing in his beard,,

[01:32:31.0496] <Waldo>
Benjamin Bouvier: Re "Oops, sorry!", to quote Office Space, probably, "Why should I apologize, C++ is the language that sucks!"  😁

[01:42:56.0678] <jandem>
/me looking forward to minifiers and obfuscators abuse the `||=`, `&&=`, `??=` operators

[01:43:13.0226] <jandem>
/me  * looking forward to minifiers and obfuscators abusing the `||=`, `&&=`, `??=` operators

[01:44:24.0382] <Waldo>
they're perfectly cromulent operators Brent

[01:48:38.0574] <jandem>
(nothing against them btw, just looks like the kind of thing they could potentially use to minify better)

[01:49:26.0852] <Waldo>
Eh, consistency, why not, I always thought.

[01:54:06.0560] <padenot>
Waldo: we're very much shipping audioworklet in 76, I answered in the bug

[01:54:18.0131] <Waldo>
o rly

[01:54:31.0939] <padenot>
Waldo: if you link me to a bit of code I'll provide a patch, if that helps

[01:54:59.0843] <Waldo>
padenot: I landed code such that all you need to do is assign a boolean differently, see the second patch that just autolanded in bug 1624266.

[01:55:01.0650] <botzilla>
https://bugzil.la/1624266 — ASSIGNED (Waldo) — Conditionally hide the SharedArrayBuffer constructor

[01:55:40.0365] <Waldo>
padenot: That said I am a bit disturbed at every worklet having to create its own global object differently, this feels unnecessarily divergence-prone.  😐️

[01:55:50.0596] <Waldo>
(not that that's on you, of course)

[01:56:59.0200] <padenot>
Waldo: ok I'll read this and write a patch, I need to be up-to-date on SharedArrayBuffer implementation status in gecko anyways

[01:58:20.0274] <padenot>
Waldo: worklets are just a script loading mechanism really, what they do after this is domain specific, and audio is always a special snowflake in computers anyways

[01:58:49.0396] <Waldo>
There's not much to be updated on.  Basically, having `SharedArrayBuffer` exposed/defined even in non-cross-origin-isolated pages ended up breaking stuff that wants to use that property for feature-tests.  So in non-cross-origin-isolated pages, all the `SharedArrayBuffer` functionality is instantiated as normal, but the `SharedArrayBuffer` global property itself is not defined -- you can access it using some weird wasm incantation if you want it still, tho.

[01:59:33.0516] <Waldo>
And I just added an option at realm creation time (read: the time when the global object is created) that controls whether the global `SharedArrayBuffer` property is added or not.

[01:59:35.0549] <padenot>
ok yes, this helps, I need to run to the post office, but will update this later

[02:00:01.0718] <padenot>
thanks!

[02:01:25.0226] <Waldo>
padenot: Do note that if audio worklets are shipping, they probably do not want to diverge from how normal pages work.  So no rush on things _now_, but if bug 1624266 ends up being fixed in the next couple days as people seem to want, you'd need to jump into same next couple days.

[02:01:26.0848] <botzilla>
https://bugzil.la/1624266 — ASSIGNED (Waldo) — Conditionally hide the SharedArrayBuffer constructor

[02:04:56.0768] <padenot>
I can jump on anything quickly if it's a week day, no worries

[02:29:06.0757] <wingo>
what is the minimum supported gcc version for compiling firefox?

[02:30:44.0802] <Waldo>
wingo: https://developer.mozilla.org/en-US/docs/Mozilla/Using_CXX_in_Mozilla_code says 7.1.

[02:30:52.0705] <wingo>
tx

[03:54:36.0946] <jonco>
@allstarschh|afk: ping

[09:18:05.0926] <iain>
confession: Just sent out one final stack of regexp patches for review, which get the new engine to the point where it is green on try

[09:18:09.0655] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[09:42:05.0011] <tcampbell>
iain: `s.setValue(JS::StringValue(object.value().toString()));` wut?

[09:45:07.0054] <iain>
tcampbell: It's a long-winded way of asserting that there's actually a string inside that value

[09:45:23.0839] <iain>
I remember having some sort of good reason for writing it that way originally, but maybe it doesn't matter anymore

[09:46:09.0494] <tcampbell>
probably just a normal assert is more reasonable?

[09:47:44.0145] <iain>
Yeah, that seems reasonable

[09:48:03.0301] <mconca>
@mhoye dropped this in Slack, but wanted to make sure people saw it here, too

[09:48:04.0579] <mconca>
https://wingolog.org/archives/2020/04/14/understanding-webassembly-code-generation-throughput

[09:48:35.0178] <mconca>
 "Here we should conclude directly that SpiderMonkey generates code around twice as fast as V8 does, in both tiers. SpiderMonkey can generate machine code faster even than JavaScriptCore can generate bytecode, and optimized machine code faster than JSC can make baseline machine code. It's a very impressive result!"

[09:59:40.0955] <tcampbell>
iain: why does `Object` need to be a friend of `Value`?

[10:05:31.0319] <iain>
So that we can access the raw bits

[10:06:14.0736] <iain>
`asRawBits` and the uint64_t constructor

[10:06:58.0103] <Benjamin Bouvier>
(To give some context to this quote about wasm performance: it comments both the performance of Ionmonkey as a code generator, and the wasm baseline compiler which is its own thing based on the MacroAssembler abstraction)

[10:07:00.0067] <iain>
 * tcampbell: So that we can access the raw bits

[10:13:21.0664] <tcampbell>
iain: `asRawBits()` and `fromRawBits()` are public?

[10:13:58.0588] <iain>
Well don't I feel dumb

[10:14:54.0697] <iain>
The constructor isn't public, so I assumed we hadn't exposed the other direction either

[10:15:26.0882] <iain>
 * tcampbell: Well don't I feel dumb

[10:20:48.0126] <iain>
Ah, I think I see how I confused myself: https://searchfox.org/mozilla-central/source/js/public/Value.h#379,396,404

[10:21:01.0979] <tcampbell>
ha

[10:21:38.0324] <iain>
I will get rid of the second `public:`

[10:22:04.0242] <evilpie>
Is there some way to initialize `JS::Handle<mozilla::Maybe<Value>>` with Nothing() without having a Rooted?

[10:22:13.0521] <evilpie>
I don't have a JSContext

[10:24:27.0731] <tcampbell>
evilpie: https://searchfox.org/mozilla-central/source/js/src/vm/Id.cpp

[10:25:09.0545] <evilpie>
mhm I see 

[10:25:29.0786] <evilpie>
Maybe<Value> x(Nothing()); Value::fromMarkedLocation(&x)

[10:25:36.0296] <evilpie>
thanks

[12:16:40.0894] <evilpie>
https://webkit.org/blog/10298/inline-caching-delete/

[13:26:23.0837] <djvj>
is it possible to download past ASAN nightly browser builds from somewhere?

[13:36:26.0963] <mgaudet>
 (I think you'd want to ping @decoder about that) 

[13:43:14.0321] <mccr8>
The ASan builds we generate in automation should be available... somewhere.

[14:32:30.0453] <Waldo>
Bah, stab.

[16:08:07.0022] <aholm>
Is mrgiggles still around, and if so does he still tell puns?

[16:08:35.0279] <sfink>
mrgiggles is in an infinite retry loop of trying to log into a nonexistent irc server

[16:09:06.0578] <aholm>
Poor mrgiggles :( 

[16:09:11.0334] <aholm>
I'll write some puns out for a homie

[16:21:04.0859] <sfink>
I should at least give him a hangout room on freenode or something, so I can ask him stuff. At least until I get around to porting stuff over to botzilla, which probably won't be soon.

[16:48:42.0757] <tcampbell>
our matrix instance can now relay to freenode too. eg `/join #freenode_#tc39:matrix.org`


2020-04-18
[17:13:33.0443] <Waldo>
On the other hand, it can't relay to +R channels.  :-(

[17:48:15.0486] <Waldo>
/me glares daggers at https://treeherder.mozilla.org/#/jobs?repo=try&revision=a4ccaaab54afc1a03c2abe10e0d2f4959831e0d5 (good) and https://treeherder.mozilla.org/#/jobs?repo=try&revision=c5afd8d012603e78330cb10284e2fb4d75425e47 (bad)

[17:52:34.0135] <Waldo>
Inline one function into another and suddenly the compiler loses its mind</meme>

[17:53:10.0052] <Waldo>
And it doesn't reproduce locally for no obvious reason.  😒


2020-04-20
[18:06:23.0026] <loganfsmyth>
Have there ever been any discussions about removing SpiderMonkey's "guessed name" logic for anonymous functions, e.g. `fn/<` as the name of an anonymous declared inside of a function called `fn`, now that ES6 has defined more cases where functions get inferred names?

[23:27:26.0884] <littledan>
loganfsmyth: FWIW V8 decided to keep some of its own, different logic for that, with the understanding that this was important for developer experience; there was a bunch of discussion that led to this decision. I think there are important cases where ES6 doesn't end up guessing a name.

[23:50:05.0627] <loganfsmyth>
> <@dehrenberg:igalia.com> loganfsmyth: FWIW V8 decided to keep some of its own, different logic for that, with the understanding that this was important for developer experience; there was a bunch of discussion that led to this decision. I think there are important cases where ES6 doesn't end up guessing a name.

oh yeah? I'd be curious to know what cases V8 shows in stack traces that aren't covered by ES6 inferred names. I'm mostly coming at this from the devtools side, but it seems like it would be confusing if devtools showed a trace with naming that diverged from what the string trace shows

[23:50:44.0756] <loganfsmyth>
but I also haven't really put a _ton_ of time into it, I just saw that it seemed like V8 leaves things anonymous much more often, at least when looking at stack trace strings

[23:55:20.0890] <littledan>
oh, maybe this changed later, I am not sure

[23:55:41.0844] <littledan>
sorry I don't remember the cases offhand

[05:05:07.0265] <tcampbell>
the spidermonkey heuristics are unfortunately not even self-consistent. There are differences depending on if function was initially syntax parsed or not

[05:06:59.0403] <tcampbell>
I probably need to do something about the name resolver this week for the Stencil project too, so I'm open to changing the mechnism

[06:03:27.0543] <evilpie>
jonco cool, thanks!

[06:05:06.0258] <loganfsmyth>
tcampbell: For what it's worth, in the devtools UI we literally chop off everything starting at the `/<` right now, which is what prompted these questions. honestly it seems like the URL + line/column is probably enough now that many more functions have inferred names due to ES6's changes?

[06:05:42.0125] <tcampbell>
good to know

[06:06:16.0918] <loganfsmyth>
chopping off starting at `/<` is just confusing because you get 2 functions with what looks like the same name, so ideally I think it would be nicer for devtools to just treat things as anonymous

[06:06:19.0720] <loganfsmyth>
https://bugzilla.mozilla.org/show_bug.cgi?id=1616196 for context

[06:08:23.0777] <tcampbell>
oh interesting

[06:08:44.0230] <tcampbell>
dropping guessed names entirely would be great

[06:08:59.0866] <jonco>
evilpie: no problem!

[06:09:49.0297] <tcampbell>
they also mess with code-coverage. which I think would benefit from it's own synthesize name along the lines of `anonymous-123:1` with lineno/column

[09:37:58.0311] <mgaudet>
I'm very confused about Debugger.script.sourceLength when it comes to dynamically allocated functions. 

[09:38:14.0420] <mgaudet>
We have tests that ensure... *a* behaviour, but I don't understand it.

[09:39:18.0221] <mgaudet>
for `new Function('x', 'x*x')` we get a sourceLength of 32 somehow

[09:40:04.0702] <mgaudet>
Here's the script I'm using to play with this (based on `Script-source-Start-04.js`

[09:40:07.0593] <mgaudet>
 * Here's the script I'm using to play with this (based on `Script-source-Start-04.js`)

[09:40:21.0419] <mgaudet>
```

[09:40:25.0538] <mgaudet>
 * ```
let g = newGlobal({newCompartment: true});
let dbg = new Debugger(g);

var count = 0;
function test(string, range) {
  dbg.onNewScript =
      function(script) {
    ++count;

    print(
        '\'' + script.source.text + '\' <' + string.length + '> (' +
        script.sourceStart + ', ' + script.sourceLength + ')' +
        ((count % 2 == 0) ? '  eval' : '  top'));
  }

      g.eval(string);
}

test('eval(\'2 * 3\')', [0, 5]);
test('new Function(\'2 * 3\')', [0, 31]);
test('new Function(\'x\', \'x * x\')', [0, 32]);
assertEq(count, 6);

```

[09:40:59.0284] <mgaudet>
which produces the following output 
```
'eval('2 * 3')' <13> (0, 13)  top
'2 * 3' <13> (0, 5)  eval
'new Function('2 * 3')' <21> (0, 21)  top
'2 * 3' <21> (0, 31)  eval
'new Function('x', 'x * x')' <26> (0, 26)  top
'x * x' <26> (0, 32)  eval
```

(Where the numbers in parens are the sourceStart,sourceLength pair) 

[09:42:36.0980] <mgaudet>
The `eval` case makes perfect sense to me; top level script has the range I expect; contents also have the same range. The top level ranges make sense for `new Function` too, which is perfectly fine (it's just another eval range in this script). 

[09:42:48.0361] <mgaudet>
 * The `eval` case makes perfect sense to me; top level script has the range I expect; contents also have the sensible range. The top level ranges make sense for `new Function` too, which is perfectly fine (it's just another eval range in this script).

[09:43:17.0153] <mgaudet>
 * I'm very confused about `Debugger.script.sourceLength` when it comes to dynamically allocated functions. 

[09:47:30.0726] <iain>
If I enter `new Function('x', 'x * x') in the shell, I get something like `(function anonymous(x) {x * x})` (with some weird newlines in the middle)

[09:48:16.0631] <iain>
Which is ~32 characters long, if you fudge the newlines a bit

[09:48:59.0578] <iain>
 * If I enter `new Function('x', 'x * x')` in the shell, I get something like `(function anonymous(x) {x * x})` (with some weird newlines in the middle)

[09:49:28.0052] <iain>
And `new Function('2 * 3')` gets `(function anonymous() {2 * 3})`

[09:49:33.0576] <iain>
Which is exactly 1 character shorter

[09:49:46.0663] <iain>
mgaudet: ^

[09:52:43.0754] <mgaudet>
O.o 

[09:52:49.0488] <mgaudet>
but 

[09:52:49.0942] <mgaudet>
urk 

[09:53:22.0517] <mgaudet>
script.source.text != the text that the source lengths apply to

[09:53:34.0138] <mgaudet>
instead they apply to the `toString` text? 

[09:53:39.0313] <mgaudet>
not confusing -at all- 

[09:54:57.0318] <mgaudet>
(good catch iain tho) 

[09:56:11.0102] <mgaudet>
I think this just means the documentation for Debugger.script.sourceLength is wrong. Will open a bug.\

[09:56:16.0593] <mgaudet>
 * I think this just means the documentation for Debugger.script.sourceLength is wrong. Will open a bug.

[10:17:18.0853] <mgaudet>
https://bugzilla.mozilla.org/show_bug.cgi?id=1631510

[14:24:06.0694] <kvark>
hi! how do you folks feel about multiple `ArrayBuffer` instances pointing to the intersecting ranges of memory in some backing store?

[14:24:12.0426] <kvark>
is that even possible with our JS engine?

[14:25:16.0547] <Waldo>
The data underlying an ArrayBuffer can be one of various sorts, including a user-provided form that _could_ allow intersection, if it were coded up right.

[14:26:15.0660] <Waldo>
I don't think I _necessarily_ would strongly oppose something like this, but I think you're going to have to have a fairly good reason to expose something that worked this way, that can _only_ work this way.

[14:26:58.0666] <Waldo>
Bug 1529298 made our ArrayBuffer backing-store story actually coherent, so it's not dramatically difficult any more to add new sorts of backing stores.

[14:27:00.0347] <botzilla>
https://bugzil.la/1529298 — RESOLVED (Waldo) — Make ArrayBuffer's handling of kinds and data-ownership sane and simple and understandable

[14:27:04.0210] <kvark>
for the context, we are discussing https://github.com/gpuweb/gpuweb/pull/708 which requires that

[14:27:32.0089] <tcampbell>
I guess the question is if IonMonkey considers the memory space as aliasing

[14:27:48.0238] <sfink>
it's almost like you want different /views/ on an ArrayBuffer. Any chance you could use an ArrayBufferView -- like a typed array or DataView?

[14:27:50.0446] <kvark>
in our case, the backing store is something our WebGPU implementation provides (i.e. a part of shmem)

[14:28:00.0835] <sfink>
( :-) )

[14:28:32.0618] <Waldo>
If memory serves, IonMonkey considers the elements of typed array data to all be aliasing each other, so I don't think IonMonkey would be affected by this.

[14:29:40.0056] <tcampbell>
yeah, looks like we don't do anything clever in Ion

[14:29:56.0655] <kvark>
> <@sfink:mozilla.org> it's almost like you want different /views/ on an ArrayBuffer. Any chance you could use an ArrayBufferView -- like a typed array or DataView?

if we return any of the actual *view*, the user is technically able to get access to the full `ArrayBuffer` that backs it, but we don't want them to access anything outside of some bounds

[14:30:24.0819] <Waldo>
Hrm, `AliasSet` doesn't actually contain an item clearly for the data of a typed array.  🧐  Not sure offhand which alias type is used for this...

[14:30:57.0782] <Waldo>
Maybe that's `UnboxedElement`?  Not sure.

[14:31:41.0478] <Waldo>
Yeah, looks like it.  https://searchfox.org/mozilla-central/search?q=symbol:E_%3CT_js%3A%3Ajit%3A%3AAliasSet%3A%3AFlag%3E_UnboxedElement&redirect=false

[14:31:50.0851] <sfink>
oh, this is for access restrictions? Bleh, it does feel a little like adding a 3rd layer with mostly the same relationship between the bottom 2 layers as between the top 2.

[14:31:51.0040] <Waldo>
I'm not sure I'm a fan of the name, but eh.

[14:32:42.0636] <evilpie>
I think we try to support typedobjects with that as well

[14:32:54.0715] <sfink>
but I guess to avoid that messiness, you'd need to have a way to lock a typed array to its viewed region or something, and that feels even worse

[14:33:25.0647] <evilpie>
ah no atomics?

[14:34:15.0315] <kvark>
> <@sfink:mozilla.org> oh, this is for access restrictions? Bleh, it does feel a little like adding a 3rd layer with mostly the same relationship between the bottom 2 layers as between the top 2.

roughly speaking, we have a full range of [0.. X] of data, non-visible to the user. They say they want to change [a..b] of it, we give them an ArrayBuffer for this part only, once done we can flush this data to the GPU. If they could access the whole [0..X], we'd have to flush everything unnecessarily.

[14:35:25.0157] <kvark>
Waldo: so what's the conclusion to this? All is good and supported? We need to investigate, i.e. I'll file an issue. Or no, please don't do that?

[14:37:25.0165] <Waldo>
kvark: My conclusion is that the _idea_ of an `ArrayBuffer` that wraps a memory range, part of which may be wrapped by a separate `ArrayBuffer`, is conceptually not a problem for our implementation.  Whether _your particular use_ is best and properly satisfied by actually doing this, is a distinct question.

[14:37:54.0750] <sfink>
what should happen when you try to structured clone one of these beasties? I think right now we might copy externally backed ABOs, but I need to check.

[14:38:17.0459] <sfink>
ah, no, they error out

[14:38:25.0946] <Waldo>
Or in other words, I want a whole lot more precise detail about what it is you're trying to do, what your solution is, and let's consider the set of possible approaches to satisfying it to say that what you want is the right way to do it.  _Technically_ this is not an impossibility at all, but that doesn't say we should do it!

[14:38:28.0705] <sfink>
so as long as you're using external memory, structured clone is ok

[14:38:52.0894] <kvark>
Waldo: would an issue be appropriate? Or is it easier to discuss here in more detail?

[14:39:03.0865] <sfink>
I believe kvark is trying to decide whether and how hard to push back

[14:39:48.0444] <Waldo>
kvark: Probably a writeup in a bug would be best, to lay it out most concisely and clearly, but I could chat here too.

[14:43:23.0571] <kvark>
I'll try here, and if we are lost, the parts will be handy to copy out to a bug.
So imagine the user wants to update some GPU buffer, which is a chunk of memory they can't access directly. Imagine that we as the implementation have the contents of that data in a shmem. We want to give them a way to modify it, but we also want to only send the data to the GPU that they *have* modified.
So the API in question is about providing them with an `ArrayBuffer` on demand that sees a sub-range of that whole shmem. The proposal says that the user can request intersecting sub-ranges. It doesn't matter from the user or the API perspective, but I wonder if it matters from yours. Once the user is done messing with these `ArrayBuffer` objects, we figure out all the sub-ranges that were requested and flush them to the GPU.

[14:45:22.0467] <kvark>
If we require the sub-ranges to be non-intersecting, we'd need to add some constraints on the alignment, and also force the code on the content side to keep track of which sub-ranges have been requested, so that we error on a collision. All in all, this is a bit more work, but possible.

[14:54:21.0155] <kvark>
filed bug 1631616
please let me know if anything needs to be clarified

[14:54:24.0536] <botzilla>
https://bugzil.la/1631616 — NEW (nobody) — Exposing multiple ArrayBuffer objects that intersect in their view of an external backing store

[15:16:29.0828] <Waldo>
kvark, sfink: Commented.  I think the spec proposal is probably fine from the JS point of view.  But, if you're going to allow these ranges to be unaligned, we do have a small touch of work to do, unless I'm misreading/misremembering our current code.  (Do please double-check me on my comment, sfink!)

[16:09:18.0182] <cfallin>
It's been a little bit since I've built a SpiderMonkey shell and I'm hitting a Python error during configure, namely `No module named mozversioncontrol`. Tried re-`mach bootstrap`'ing. Did something change recently or do I just have demons in my setup?

[16:09:35.0224] <cfallin>
(transcript paste here: https://paste.mozilla.org/KGqWcYxp)

[16:10:01.0327] <Waldo>
cfallin: Do you need to rerun `autoconf213`?

[16:10:35.0315] <cfallin>
... and Waldo saves the day. Thanks much!

[16:16:31.0455] <iain>
confession: Hooked up the new regexp engine to libFuzzer. Good news: haven't found any non-trivial bugs yet. Bad news: that includes the known bug that I reinserted for testing purposes.

[16:16:33.0641] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[16:47:13.0471] <Waldo>
/me sighs

[16:47:40.0717] <Waldo>
Frontend name collection types are a mazy of twisty templates, and it's difficult to see how and where triviality matters in them.


2020-04-21
[23:55:39.0832] <padenot>
Hi all! When I'm trying to diagnose something on the web that errors out in Firefox but not in other browsers, and all I see in the console is `self-hosted:1543`, what is a good strategy to understand what it is ?

[23:56:21.0720] <Waldo>
padenot: If you hit that in a browser build, `$OBJDIR/js/src/selfhosted.js` or some similarly-named file is where you want to look.

[23:56:45.0898] <padenot>
ah brilliant. I'm on a regular nightly at minute, but will check in a local build, thanks

[23:57:33.0951] <padenot>
I think this particular page is loading a WASM module that is in the form of a regular JS array litteral, inline in the source code, in the audioworklet processor file

[23:57:48.0888] <Waldo>
There's also a symbol that contains the contents of that file in builds, but the odds of it being exported are...pretty low, so you'll need something debuggy almost no matter what.

[23:57:49.0925] <padenot>
not amazing

[23:58:18.0626] <jandem>
you don't get an error message?

[23:58:57.0432] <padenot>
I do, but it's not the first I see this, so I wanted more general info: `"uncaught exception: out of memory"`

[23:59:42.0123] <padenot>
this file is itself 31MB, which is nothing in the grand scheme of things, but quite big for a source-code file

[23:59:46.0702] <Waldo>
Also that symbol is compressed code, so you'd have to do Arcana to convert it to actual decompressed source.  :-)

[00:00:32.0407] <padenot>
yeah best to just use my local build heh

[00:09:33.0091] <jandem>
padenot: I suspect you get OOMs due to this: https://searchfox.org/mozilla-central/source/dom/worklet/WorkletThread.cpp#24

[00:09:46.0690] <padenot>
wow 32MB

[00:09:55.0935] <jandem>
normal workers do the same, but they override with the pref we have for that

[00:12:06.0599] <padenot>
considering we're very likely to be storing decoded PCM (around 22MB per minute of audio) data in memory on this scope, this won't get us far

[00:12:33.0708] <padenot>
 * considering we're very likely to be storing decoded PCM (around 22MB per minute of stereo audio) data in memory on this scope, this won't get us far

[00:12:38.0065] <Waldo>
32MB ought to be enough for anyone...

[00:15:08.0647] <jandem>
it would be good to unify prefs and stuff with workers maybe. For example I made the most important JIT prefs per-process, but I wonder if worklets respect the asm.js/Wasm prefs?

[00:16:07.0168] <padenot>
this is all a bit separated unfortunately, even the module loader, which is annoying because it means we don't support static imports there

[00:16:23.0491] <padenot>
what would be an example of a pref that I could check ?

[00:17:00.0787] <jandem>
for example the context options set here: https://searchfox.org/mozilla-central/rev/d2cec90777d573585f8477d5170892e5dcdfb0ab/dom/workers/RuntimeService.cpp#276

[00:17:22.0279] <jandem>
(IMO most of these should be process-wide like the JIT prefs, to make this all more robust, but we're not there yet..)

[00:18:01.0151] <Waldo>
padenot: On the off chance this has to do with SABs on worklets, do note the SAB constructor bug did patch this...

[00:18:19.0510] <Waldo>
(or is in the process of patching)

[00:18:48.0780] <padenot>
Waldo: this is regular arraybuffers as far as I can see, but I'm following the developments on the bug from the other day and doing the audioworklet bit is on my list

[00:19:32.0726] <Waldo>
padenot: Just making sure you're not duplicating effort, I do not have any personal interest in this.  😉

[00:20:18.0355] <Waldo>
Although I am biting my tongue on complaining in that bug about how the computation of cross-origin-isolated is being duplicated, rather than cleanly moved earlier in the relevant function...

[00:20:39.0529] <Waldo>
/me mutters "not my code, not my code, not my code..."

[00:28:36.0751] <padenot>
jandemWaldo : this value doesn't include ArrayBuffers memory, right ?

[00:30:19.0218] <jandem>
I don't think so

[00:30:26.0582] <padenot>
easy to test empirically

[00:31:01.0253] <padenot>
I must be hitting the issue because this page is using array literals to load the WASM, that's something I'll report upstream

[00:48:38.0573] <Waldo>
Do they have any better option, exactly?  How are they supposed to smuggle in binary data other than in array literals?  Loading and sending to the worklet seems unduly wasteful, given we probably don't have efficient transfer mechanisms across workers quite yet...

[00:53:44.0337] <padenot>
postMessage with detach

[00:54:10.0557] <padenot>
from a worker or main thread

[00:54:27.0594] <padenot>
with a wasm module in binary

[00:56:59.0568] <Waldo>
That'll do a zero-copy transfer for us, but do other browsers guarantee they won't put worklets in separate processes?

[00:57:10.0125] <padenot>
bettter than having a setup where every byte is a literal that is 1, 2 or 3 digits, then a comma, then a space

[00:57:11.0862] <Waldo>
And who knows, might not be zero-copy for us in the long run.

[00:58:03.0378] <padenot>
you can do zero copy in between processes

[00:58:05.0478] <Waldo>
Maybe this is a problem JS the language should address.

[00:59:02.0070] <Waldo>
If it's allocated as a SAB from the get-go, but SAB is not exactly all the way there and reliable just yet (plus that requires cross-site isolation now...).

[00:59:29.0918] <Waldo>
Or at least I wouldn't *think* plain ABs could be transferred cross-process zero-copy, the way we allocate them now...

[01:00:29.0516] <padenot>
I'm talking in general, I don't know much about what spidermonkey does, but that's improving hopefully

[01:01:16.0756] <padenot>
ok now, if I double the worklet size on this particular page, the loading never finishes and gecko spends about 100% of the time on worklet thread in the GC

[01:01:51.0457] <padenot>
if I quadruple, it loads, but then error out because the page implies `AudioWorklet` -> `Chrome` -> `WebMIDI is available`, and we don't have it and boom

[01:03:34.0097] <Waldo>
/me pat-pats riot-web's emoji search

[01:03:47.0769] <Waldo>
/me glares daggers at all the emoji selectors that _don't_ offer a search feature

[01:04:34.0637] <Waldo>
/me glares especial daggers at the emoji selectors that intentionally bowdlerize 🔫 because of their own probably-political prejudices

[01:04:44.0152] <padenot>
now, I patched that by downloading the files locally, and now it's relying on a Chrome bug (https://bugs.chromium.org/p/chromium/issues/detail?id=1060579)

[01:04:50.0874] <Waldo>
(bowdlerize, or even flat-out omit)

[01:05:22.0232] <Waldo>
Wow, and now I need that actual-gun emoji to ease my pain.

[01:06:35.0019] <wingo>
rabaldrize

[01:08:04.0172] <Waldo>
wingo: I guess that meets the baseline for what counts as humor in this channel.

[01:08:24.0785] <wingo>
/me bows

[01:09:59.0769] <Waldo>
/me is dissatisfied that "person bowing" is depicted face-on where the bowing, flattened to 2D in the space of an icon, is really not understandable unless you were already expecting it

[01:10:14.0145] <Waldo>
Should be viewed from the side for sure.

[01:14:10.0414] <padenot>
Ok if I patch this I get a sine wave at 440Hz. This is the least efficient way I've had a sine wave at 440Hz generated in my whole career, and trust me, I've synthesized my fair share of them

[01:14:58.0003] <Waldo>
Obviously just calling `Math.sin` a bunch would be inefficient.

[01:15:22.0420] <Waldo>
/me is super-weak on signal processing and audio, but c'mon, yeah, this should be amenable to generation

[01:16:53.0602] <padenot>
it is, we only need it in [0,2Pi], so there are a bunch of approximations people do. but in general `Math.sin` in a for loop works well for sure, compared to downloading 32MB of JS and allocating 128MB of memory on a real-time thread

[01:17:30.0598] <Waldo>
Need more actual-gun now!

[01:17:54.0619] <Waldo>
I cannot shoot myself in the head with a squirt gun and accurately convey my feelings right now.

[01:18:12.0594] <padenot>
I'm planning to write a long issue upstream on this project

[01:18:30.0547] <Waldo>
You have my sword.  And axe.  And gun.

[01:18:46.0353] <jonco>
jandem: re bug 1628211, I think WarpSnapshot only gets traced once per incremental GC, or at least it seems that way right now

[01:18:47.0624] <botzilla>
https://bugzil.la/1628211 — NEW (nobody) — WarpBuilder: potential GC optimizations

[01:18:49.0122] <padenot>
I know some of those people in real-life from audio programming conference, it should help

[01:18:54.0780] <padenot>
 * I know some of those people in real-life from audio programming conferences, it should help

[01:24:07.0268] <jandem>
jonco: oh right that makes sense, I'll update the comment. Thanks!

[01:24:32.0106] <Waldo>
Yeah, I don't expect this is bad faith or that they wouldn't change, just...whyyyyyyyyyy

[01:28:30.0121] <Ms2ger [~half-time dedication]>
'lo Waldo 

[01:28:53.0292] <Waldo>
Ms2ger [~half-time dedication]: Shut up.  🤐 😂

[01:29:26.0971] <Waldo>
You have no idea how terrible my working hours have gotten now that it's WFH all the time basically never leaving the house except for random walks.

[01:35:08.0307] <Ms2ger [~half-time dedication]>
Well, given that I see way too much of you, I'm getting somewhat of an idea :)

[02:26:05.0257] <padenot>
jandem: I'm now wondering, what's the purpose of having a limit ?

[02:29:19.0304] <jandem>
padenot: there are probably cases where it makes sense to limit how much memory user code can use, although we do default `javascript.options.mem.max` to -1 and that applies to most contexts

[02:30:42.0015] <nbp>
padenot: `Math.sin` results are cached. IIRC

[02:32:17.0814] <jandem>
nbp: bug 1469044 removed the math cache

[02:32:19.0243] <botzilla>
https://bugzil.la/1469044 — RESOLVED (mgaudet) — Reconsider the MathCache

[02:32:39.0725] <nbp>
ok, then nvm.

[03:21:45.0837] <padenot>
nbp: last time I benchmarked this, sin (in C++, default libm with gecko compilation options) was faster than having an interpolated table.

[03:22:27.0390] <padenot>
now js might add a bit of an overhead, but still

[03:23:54.0797] <nbp>
We actually have an optimization in IonMonkey which is for the case where you call both `Math.sin` and `Math.cos`, but I do not think that this is your case.

[03:24:09.0481] <nbp>
and it might be only on a few platform :/

[03:24:53.0708] <nbp>
or … it got removed as well …

[03:26:12.0213] <nbp>
 * We actually <del>have</del> had an optimization in IonMonkey which is for the case where you call both `Math.sin` and `Math.cos`, but I do not think that this is your case.

[03:27:21.0069] <padenot>
audio people call both rather frequently, with a preference for `sin`

[03:37:41.0738] <padenot>
jandem: thanks. I'll bump this one much higher, we can't risk compat issues like this 

[03:38:55.0156] <jandem>
padenot: I'd strongly recommend using the same pref infrastructure as workers though, or it will bite us at some point

[03:39:16.0805] <padenot>
I'm investigating this, since you mentioned it

[03:39:18.0187] <jandem>
(things like features accidentally shipping)

[03:39:29.0204] <padenot>
(I'm not familiar yet with it)

[03:39:39.0819] <jandem>
great!

[06:23:03.0891] <iain>
nbp: The sincos optimization was removed in bug 1561732

[06:23:05.0769] <botzilla>
https://bugzil.la/1561732 — RESOLVED (iain) — Remove sincos optimization

[06:23:23.0717] <iain>
Among other reasons, because it was only enabled on OSX

[07:32:53.0310] <Ms2ger [~half-time dedication]>
Waldo: https://twitter.com/TMSTSTFD/status/1248906105608196097/photo/1

[07:50:29.0843] <Benjamin Bouvier>
Ms2ger [~half-time dedication]: the only plausible explanation is that Waldo has a Time-Turner

[07:51:54.0064] <Ms2ger [~half-time dedication]>
I love that that is your "plausible" explanation

[08:51:16.0862] <iain>
Somebody who knows more about test262 than I do: what are the various levels of directory-specific trickery going on when running tests?

[08:52:32.0550] <iain>
I'm getting a failure in built-ins/RegExp/prototype/dotAll/cross-realm.js

[08:52:42.0937] <iain>
But not in the nigh-identical built-ins/RegExp/prototype/unicode/cross-realm.js

[08:53:34.0427] <iain>
Which would indicate that I had messed up adding dotAll, except that copying the dotAll testcase into the unicode directory makes it pass, and copying the unicode testcase into the dotAll directory makes it fail 

[08:53:52.0338] <iain>
Neither of these directories has anything in shell.js or browser.js

[08:55:33.0785] <Ms2ger [~half-time dedication]>
iain: maybe related: https://searchfox.org/mozilla-central/source/js/src/tests/jstests.list#377

[08:56:07.0409] <iain>
Ms2ger [~half-time dedication]: Aha! Thank you!

[08:56:13.0450] <iain>
That's it

[08:59:07.0313] <Ms2ger [~half-time dedication]>
\o/

[09:07:12.0842] <evilpie>
Waldo: Maybe your patch should rather extend SkipUneval?

[09:09:39.0261] <tcampbell>
/me wonders if we should rename `CallObject` to `CallEnvironment`

[09:10:04.0041] <tcampbell>
It seems like a historical artifact before lexicals and arrows made everything much messier

[09:47:37.0098] <jandem>
`CallEnvironmentObject` sounds good

[09:48:26.0640] <jandem>
not sure what's a better name that also covers the strict eval case 

[10:01:11.0967] <padenot>
jandem: soo all this runtime service thing look heavily coupled to workers, were you talking about the prefs only ?

[10:03:35.0398] <jandem>
padenot: yeah I'm just concerned about not sharing the prefs code

[10:04:41.0093] <padenot>
https://searchfox.org/mozilla-central/rev/d2cec90777d573585f8477d5170892e5dcdfb0ab/dom/workers/RuntimeService.cpp#181-541, give or take ?

[10:04:53.0335] <padenot>
not sure if there is code that is outside this range

[10:07:50.0099] <jandem>
I think so. Looking at that file there's also the interrupt callback to terminate long running code, do worklets do anything like that? 

[10:08:29.0290] <padenot>
it's a _lot_ more involved but we're doing something yes

[10:08:52.0945] <padenot>
(interrupting real-time threads requires a real-time thread otherwise it can't really be reliable)

[10:09:39.0335] <padenot>
jandem: thanks a lot. I might uplift something simple for this memory issue because we're a bit late in the release cycle, but will do things properly to land in current trunk

[10:10:22.0054] <padenot>
and I'll come back with more questions of course, thanks for everything :-)

[10:10:42.0053] <jandem>
no problem :) 

[11:30:58.0605] <iain>
confession: The regexp engine is now passing all the 262 tests for dotAll, lookbehind, and unicode property escapes

[11:31:00.0794] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[11:32:24.0595] <iain>
Does anybody know which perf tests are particularly regexp-sensitive?

[11:32:24.0942] <iain>
I am getting perilously close to being able to turn on the new engine in Nightly

[11:39:44.0118] <evilpie>
I guess octane has some regexp test?

[11:46:08.0038] <jandem>
yeah octane-regexp, sunspider regexp-dna, speedometer has some too

[11:59:54.0546] <tcampbell>
`function F([]) { }` is considered a positional argument? bleh

[12:01:04.0218] <tcampbell>
I guess it is a destructuring with no names? I was just suprised to see `nullptr` as a binding name

[12:56:00.0387] <Waldo>
evilpie: You mean, have some functionality named something like `ShouldSkipName` that would subsume `eval`-skipping and `SharedArrayBuffer` skipping both?  That sounds sensible at first, then I remember `SharedArrayBuffer` is an instance of the one name almost always defined for a given `JSProtoKey` and other places require per-key-ful handling, and I vacillate back in the direction of the current patch.

[12:59:33.0949] <evilpie>
ah I guess you need the code in  GlobalObject::resolveConstructor anyway

[12:59:48.0376] <Waldo>
Yeah.  ☹︎

[13:00:34.0741] <evilpie>
SkipUneval is also in JS_IdToProtoKey 

[13:00:43.0643] <evilpie>
that is only really important for Xrays though

[13:00:53.0325] <evilpie>
why is this so terrible :/

[13:01:47.0547] <evilpie>
I guess in this case this a function of the behavior we are trying to implementing being terrible as well

[13:03:08.0132] <Waldo>
I am really beginning to feel that compulsion again to make global objects get allocated with `Object` and `Function` details already initialized.  Wonder if Gecko is such now that that's more feasible than it was the last time I looked at it...

[13:03:41.0586] <Waldo>
Probably not -- globals being singletons, so the private has to be initialized early on, yadda yadda maybe...

[13:17:27.0909] <Waldo>
jandem: Is https://hg.mozilla.org/mozilla-central/rev/12667d6bc2083c860f26921c3deb9598fcae7b7e the patch you were alluding to earlier where proxy allocation got forked out of the one centralized object allocation path?

[13:21:38.0077] <jandem>
yep

[13:21:52.0282] <Waldo>
Cool, thanks.

[13:22:15.0250] <Waldo>
evilpie: Commented on the `cx->realm()`/`global->realm()` distinction and why I made everything consult `global->realm()`.

[13:22:59.0694] <Waldo>
evilpie: It seems rather unfortunate that eumeration doesn't enter the target realm, but if I suppose it isn't actually necessary generally, maybe it's not _that_ horrific...

[13:23:34.0539] <Waldo>
jandem: I am somewhat pondering maybe doing the same thing for `Function`, as a possible next step to disentangling everything.

[13:24:28.0465] <Waldo>
That, at least, is a change that could be made fairly cleanly/simply, without the morass that trying to touch, say, typed arrays would presently require.  I think.

[13:26:11.0006] <jandem>
Might make sense.. there's already JSFunction::create so would just need to call that directly with the right arguments

[13:28:29.0332] <evilpie>
Waldo: ok makes sense

[13:28:48.0343] <Waldo>
"sense", but yeah.  😒

[13:28:59.0573] <jandem>
same for typed objects I guess. Then NewObject and friends are always called for native objects so we can simplify a bit 

[13:29:38.0450] <Waldo>
I don't think I'm likely to get to this immediately soon, I still have streaming to do.  But I can at least start dreaming.

[13:33:24.0900] <jandem>
time for me to start dreaming too

[14:05:31.0417] <iain>
Can AtomizeChars GC?

[14:05:52.0251] <Waldo>
I'm pretty sure the answer is yes.

[14:06:31.0002] <iain>
That's what I assumed

[14:06:43.0769] <iain>
But then I don't understand why the hazard build isn't already yelling at me

[14:07:16.0681] <Waldo>
Maybe it haz.

[14:07:18.0099] <Waldo>
/me runs

[14:28:20.0994] <sfink>
AtomizeChars cannot GC

[14:28:27.0998] <sfink>
answering "why?" is harder

[14:28:46.0214] <sfink>
at some point, I think it was because it was always within AutoKeepAtoms, which suppressed GC?

[14:31:10.0673] <sfink>
hm, or maybe it's because when it does its allocation, it explicitly prohibits GC (AllowGC = NoGC)

[14:31:21.0242] <sfink>
 * hm, or maybe it's because when it does its allocation, it explicitly prohibits GC <AllowGC = NoGC>

[14:31:53.0282] <iain>
sfink: The context is that the irregexp parser wants to atomize some strings for named captures

[14:32:22.0239] <iain>
And for Reasons we are in a no-gc region

[14:32:28.0886] <iain>
Although they might not be very good reasons

[14:33:08.0999] <iain>
I'm about to jump through some hoops to implement the array that will store these atomized strings

[14:33:38.0940] <iain>
And it seems like a good idea to double-check that atomizing the strings won't mess up the hazard analysis by itself

[14:34:13.0075] <iain>
As I type this out, I begin to wonder whether it would be better to fix the Reasons that this has to be no-gc

[14:35:06.0303] <Waldo>
<img src=jack-nicholson-nodding.gif>

[14:36:19.0535] <Waldo>
evilpie: Whoops, missed the `JS_IdToProtoKey` prod earlier, responded.

[14:43:50.0730] <sfink>
iain: I should really know this better, but it certainly appears to me that atomization cannot GC. It can run out of memory and throw, but it can't GC.

[14:51:25.0092] <iain>
sfink: Cool. I am currently attempting to rewrite the silly decisions in V8 that made any of this necessary

[14:51:36.0862] <iain>
Let's see how far hubris can take me

[14:56:11.0345] <Waldo>
You're here just like the rest of us...

[14:56:29.0500] <Waldo>
NARRATOR: They were not, in fact, the ones they were waiting for.

[15:24:32.0588] <tcampbell>
https://searchfox.org/mozilla-central/rev/3446310d6cc5c85cde16a82eccf560e9b71a3d44/js/src/vm/Scope.h#44-45

[15:24:44.0582] <tcampbell>
I'm gonna regret this aren't I

[15:25:29.0821] <iain>
Isn't the answer always yes, independent of the contents of the link?

[15:25:35.0607] <iain>
If you have to ask, you know the answer

[16:30:57.0999] <sfink>
whoa, I didn't realize `mremap` could create multiple virtual mappings of the same physical pages. I thought the only way to do that was via silly file descriptor based contortions.

[16:31:26.0299] <sfink>
on Linux, at least, we really *could* do those nasty bit-tagging tricks!


2020-04-22
[17:02:12.0341] <sfink>
syg: do you happen to know if there is any way to sleep in the d8 shell? As in, main thread does nothing and uses no CPU, any helper threads continue unimpeded?

[17:02:45.0832] <sfink>
otherwise, I guess I could use node instead of d8. I assume it has something or other.

[17:06:45.0753] <sfink>
it looks like it has SAB and Atomics. Maybe I could hack something up.

[17:08:35.0333] <sfink>
ooh, that was easy

[17:14:45.0884] <tcampbell>
I think Win10 also allows you to do equally funny virtual memory aliasing these days to make fun ring buffers

[19:42:06.0267] <sfink>
confession: basic gc perf µbenchmark harness up and running against spidermonkey and v8 shells.

[19:42:08.0291] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[00:31:21.0521] <asumu>
jandem: hi, if you have a second I was wondering if I could ask your opinion about a MacroAssembler addition in a patch I wrote. There's a question that came up in review of whether to bother to support big-endianess in this function, or to simplify it (maybe a MOZ_ASSERT for little-endian here? Or ignore?): https://phabricator.services.mozilla.com/D65233#inline-407136

[00:38:59.0857] <jandem>
asumu: it's probably ok to assume little-endian, I agree with lth  that big endian support would be a big project and given modern architectures are little endian it's probably YAGNI

[00:40:44.0105] <asumu>
jandem: ok, thanks! I'll remove the big-endian code here then.

[00:42:02.0583] <jandem>
sounds good

[00:44:24.0992] <jandem>
asumu: (could always add an assert or comment)

[00:45:12.0514] <Ms2ger [~half-time dedication]>
Pretty sure everything will crash and burn on BE

[00:45:42.0096] <asumu>
jandem: yeah, I was going to just assert `MOZ_LITTLE_ENDIAN()` in the 32-bit case.

[00:46:39.0349] <jandem>
oh right, it would have to be a JIT backend for a *32-bit* BE platform, that's even less likely to happen

[00:51:15.0987] <Ms2ger [~half-time dedication]>
Can it be a static assert?

[01:27:29.0267] <jandem>
probably not because most of the JIT backend is still compiled on no-jit platforms, it's just not executed

[06:40:27.0921] <jandem>
confession: now auto-generating reader/writer/spewer boilerplate code for all CacheIR ops

[07:36:22.0430] <padenot>
jandem: so I was pointed to https://bugzilla.mozilla.org/show_bug.cgi?id=1333412, so there is quite a few things to do. I'm thinking of refactoring the bits you mentioned to abstract the environment type (worker/worklet), so that we would only update things in one location, but I have a feeling we'll want to tweak gc heuristics/jit heuristics for audioworklet, so I don't know yet

[07:49:18.0726] <jandem>
padenot: (was in a meeting). Sounds great. For the heuristics we want to tweak for worklets, maybe we could share code with workers but then override the worklet specific things after that?

[07:50:49.0838] <padenot>
that sounds great, I haven't really looked into this part. For now, I've uploaded a one liner for review, hoping to get it into beta, that simply sets the memory limit to (uint32_t)-1 for the worklet, like the workers

[08:47:24.0868] <sfink>
jonco: having some trouble with zoom

[08:53:28.0536] <sfink>
bug 1631616

[08:53:29.0985] <botzilla>
https://bugzil.la/1631616 — NEW (nobody) — Exposing multiple ArrayBuffer objects that intersect in their view of an external backing store

[09:01:23.0798] <mstange>
I used a generator that yielded [key, value] pairs and passed it into `new Map(generator)`, and it was very slow, spending 61% of its time in js::jit::FreshenLexicalEnv and js::jit::PushLexicalEnv. Is it worth making a testcase out of this, or are generators just known to be slow? https://perfht.ml/3eFW4A1

[09:01:55.0885] <evilpie>
Yes

[09:03:27.0844] <mstange>
so no testcase needed?

[09:18:38.0162] <evilpie>
mstange: I doesn't hurt, but I think the problem is generally know. Like bug 1412202

[09:18:40.0399] <botzilla>
https://bugzil.la/1412202 — NEW (nobody) — Optimize lexical variables in generator.

[09:21:01.0942] <mstange>
evilpie: ah, I see, that sounds like exactly my case (let / const in a loop). ok, if it's exercised by ARES-6, I'm not going to make a testcase

[09:21:03.0305] <mstange>
thanks!

[09:33:24.0499] <sfink>
https://paste.mozilla.org/QraA7LHZ

[09:42:39.0220] <jonco>
bug 1632139

[09:42:40.0663] <botzilla>
https://bugzil.la/1632139 — NEW (jonco) — Recalculate heap thresholds only once at the end of GC

[10:53:42.0727] <Waldo>
Who around here knows stuff about the jsreftest harness in the browser these days?

[10:55:24.0829] <sfink>
I'd be kind of interested to know the answer to that question too. I fear there may not be an answer.

[10:55:48.0839] <mccr8>
I would have guessed that it was one of you two.

[10:56:43.0577] <sfink>
it would make sense for it to be me, but I actually know next to nothing, and have been very surprised the few times I've had to go digging in that code

[10:59:00.0248] <Waldo>
Bug 1624266 wants to make `SharedArrayBuffer` the global constructor only be present in cross-origin-isolated loads.  The jsreftest harness in the browser does not go to any special effort to run tests in cross-origin-isolated fashion.  It _should_ be possible to just switch all tests to be run in that fashion, but I don't know the harness well enough to know where I'd poke to make that change.  Tho I probably don't want to just make that change, rather have such tests opt in to such isolation somehow.  Or something.

[10:59:03.0351] <botzilla>
https://bugzil.la/1624266 — ASSIGNED (tt) — Conditionally hide the SharedArrayBuffer constructor

[11:00:42.0322] <Waldo>
If the tests are going through the `server-locations.txt` infrastructure, I would be inclined to load such tests from a distinct origin and make the server itself add the COOP/COEP headers to force isolation only if that origin is in use.  But I don't even know what origin tests are loaded from, right now.

[16:24:05.0339] <tcampbell>
Is `function::` some past horror I don't want to know about? https://searchfox.org/mozilla-central/diff/aa04799a171f2a4c709161b2ae5be962aa9a56a9/js/src/frontend/BytecodeEmitter.h#239

[16:27:58.0767] <tcampbell>
the testcases don't have anything weird. I'm still not sure what that line means though

[16:32:47.0221] <Waldo>
tcampbell: Back in the days of E4X, XML objects could have namespaced accesses performed on them like `xml.ns::tag` and `xml.@ns::attr`.  For reasons I don't remember, there was a special `function` namespace you could use to do...something.

[16:33:11.0669] <Waldo>
tcampbell: This is all eldritch and irrelevant now.

[16:33:28.0872] <tcampbell>
I regret asking more than I could have imagined

[16:46:12.0611] <mccr8>
I'm trying and failing to come up with an appropriate giraffe-related pun.

[16:48:59.0524] <Waldo>
Let someone else take the risk of making one, don't stretch your neck out.

[16:50:54.0811] <Waldo>
evilpie: FYI, I poked at the defined-SAB patch again in case you missed it.

[16:52:10.0423] <mccr8>
I guess it was egotistical of me to think I could come up with a better pun.


2020-04-23
[20:26:09.0191] <Waldo>
I mean, when it comes to giraffes, no one's going to know better than someone named Geoffrey (sp?).

[22:13:27.0114] <jandem>
/me starts the day with Waldo puns in multiple channels :)

[23:34:06.0439] <jandem>
confession: implementing more cacheir ops in the transpiler so we can evaluate warp perf on sunspider-style benchmarks

[23:34:12.0086] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[00:17:31.0019] <Waldo>
jandem: In other words, it's a day that ends in "-day" in English.

[00:17:51.0809] <Waldo>
/me tries to wrap up one last quick thing

[00:19:48.0005] <Waldo>
tcampbell: On more thinking (I got sniped, it was wrong, I know), I think `xml.function::foo` was our syntax _as an extension_ to allow you to extract the value of a function-valued property, even if there was a `foo` element child that would kinda-sorta shadow it.  So yeah, we implemented the E4X extension, then we extended the extension unique to our implementation because of course.

[00:27:42.0866] <jandem>
(for those not familiar, Egotistical Giraffe was an NSA thing to attack Tor users, it used a type confusion in our e4x implementation)

[00:29:43.0922] <Waldo>
(at least as far as we can tell, it's possible it was in something else)

[00:31:07.0576] <jandem>
the leaked slides explicitly mentioned e4x though

[00:31:27.0892] <padenot>
Waldo: if you have a few seconds/minutes, could you confirm karlt's theory on this sec bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1626382#c6 ?

[00:31:48.0048] <Waldo>
Hrm, they did?  I don't remember that having been the case, only mentioning an exploit and it having been said to disappear in the same release where E4X disappeared.

[00:32:51.0668] <jandem>
slide 15 here: https://www.eff.org/document/2013-10-04-guard-egotistical-giraffe

[00:37:30.0060] <Waldo>
padenot: Ah, nice, someone did the hard work for me, that I wasn't able to eyeball yesterday.  🙂

[00:38:02.0437] <padenot>
Waldo: thanks for confirming, I'll write the patch now!

[00:39:14.0425] <Waldo>
jandem: Hum, my memory is going bad.  Probably cosmic rays.

[00:39:37.0754] <Waldo>
Could have sworn jo rendorff wrote a blog post about this pointing out E4X removal saved our bacon, but only based on circumstantial evidence.

[00:40:18.0483] <Waldo>
Or maybe it was nj n

[00:42:02.0705] <jandem>
I remember there was another source hinting they were confident they'd find another bug

[00:42:21.0853] <jandem>
I guess e4x was convenient because it didn't change much and most fuzzers didn't know about the crazy syntax

[00:42:36.0645] <Waldo>
Final comment on https://bugzilla.mozilla.org/show_bug.cgi?id=788293 says that, yeah.  Given what the beast is, I'm pretty sure they're right for basically any browser engine out there...

[00:43:03.0501] <arai>
loganfsmyth: about bug 1628853 , how is the flag used?  will there be an option added to devtools?

[00:43:04.0828] <botzilla>
https://bugzil.la/1628853 — ASSIGNED (loganfsmyth) — Expose an option to disable //#sourceURL= pragma handling

[00:45:50.0051] <loganfsmyth>
no I'd expect it to be an option that is used via `about:config`. It was a request from https://github.com/mozilla/OpenWPM/issues/597

[00:46:18.0323] <loganfsmyth>
 * arai: no I'd expect it to be an option that is used via `about:config`. It was a request from https://github.com/mozilla/OpenWPM/issues/597

[00:48:16.0321] <arai>
loganfsmyth: okay, so there won't be any further patch that depends on it, right?

[00:48:44.0200] <arai>
I mean, the consumer of the flag

[00:49:18.0105] <loganfsmyth>
that's correct

[00:49:59.0117] <arai>
I see.  I'll review it tonight

[01:00:44.0616] <loganfsmyth>
Thanks, it's not a rush

[01:53:29.0684] <Waldo>
/me mutters about being hungry but 1) having not much in the way of food on hand for the moment and 2) it being time to sleep anyway once this patch is made just a _touch_ more done

[01:57:47.0235] <nbp>
https://chromium-review.googlesource.com/c/chromium/src/+/1752927/

[01:59:25.0122] <Waldo>
Neat!  I suspect ours could be approximately transcribed to Rust without terribly much difficulty as safe code...except for the handling of optimistically assuming objects have regularized structure/shaping.

[05:15:56.0677] <tcampbell>
loganfsmyth: We are now avoiding reading cx->options() from _within_ the parser, so can you pass your new option via `TransitiveCompileOptions`, similar to https://searchfox.org/mozilla-central/rev/41c3ea3ee8eab9ce7b82932257cb80b703cbba67/js/src/jsapi.cpp#3561

[05:16:12.0639] <tcampbell>
(should only be a few lines_

[05:16:14.0795] <tcampbell>
 * (should only be a few lines)

[05:16:32.0440] <tcampbell>
 * (should only be a few lines: https://searchfox.org/mozilla-central/search?q=symbol:F_%3CT_JS%3A%3ATransitiveCompileOptions%3E_forceStrictMode_&redirect=false)

[05:18:45.0642] <loganfsmyth>
tcampbell: Sounds good, thanks!

[05:19:17.0353] <tcampbell>
(thanks for doing the patch :)

[06:29:13.0572] <evilpie>
Looks like removing the Object.prototype.toString fallback might be in our reach

[07:41:34.0823] <Ms2ger [~half-time dedication]>
So, uh, is https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Build_Documentation still supposed to mention `mozmake`?

[07:47:51.0676] <tcampbell>
I think for windows we still need `mozmake`

[07:48:47.0848] <tcampbell>
also, we are trying to migrate to these docs instead: https://firefox-source-docs.mozilla.org/js/build.html

[07:49:21.0892] <tcampbell>
and get people using similar workflow to firefox

[07:49:55.0437] <Ms2ger [~half-time dedication]>
Yeah, I was looking for those

[07:50:02.0521] <Ms2ger [~half-time dedication]>
But https://mozilla-spidermonkey.github.io/docs/ links to the ancient ones

[07:51:24.0392] <tcampbell>
oops.. will update that after lunch

[07:51:32.0315] <Ms2ger [~half-time dedication]>
❤︎

[07:52:18.0545] <jandem>
we should also suggest the new docs on the old page probably 

[07:52:47.0784] <tcampbell>
oh right.. github lets me edit on their website. will fix now

[07:55:19.0809] <tcampbell>
jandem: https://github.com/mozilla-spidermonkey/mozilla-spidermonkey.github.io/pull/8

[08:00:03.0712] <tcampbell>
thanks. seems to be deployed

[08:17:23.0491] <ptomato>
should the embedder build docs be merged into that? https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr68/docs/Building%20SpiderMonkey.md

[08:27:51.0361] <mgaudet>
My opinion: I think it would be great to have embedding info in-tree 

[08:30:36.0501] <tcampbell>
the issue with embedding docs is they typically follow esr-68

[08:31:25.0083] <tcampbell>
so the example repo was a low-friction way to update guidelines as we learn new things without needing an ESR-uplift each time

[08:32:57.0070] <mgaudet>
That's fair; and I do like that we have these docs that follow our esr releases 

[08:35:05.0932] <evilpie>
I added a infobox on MDN. But the documentation there is a bit more exhaustive

[08:36:08.0287] <mgaudet>
evilpie: Thanks! 

[08:36:23.0567] <mgaudet>
The new build docs were definitely a stab at trying to get a comfortable baseline with mach build documented

[08:36:43.0599] <mgaudet>
I was hoping we could figure out eventually what to migrate off that page, and what's obsolete and can be abandoned. 

[08:37:05.0934] <mgaudet>
(ie, building ye-old-spidersmonkey) 

[08:38:09.0973] <tcampbell>
confession: Rewriting all the script flag comments! (Bug 1632273)

[08:38:11.0658] <jandem>
evilpie: lol, had a mid-air collision on a similar change. I updated https://wiki.mozilla.org/JavaScript:New_to_SpiderMonkey#Build_the_js_shell but there's still a lot of outdated info

[08:38:14.0930] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[08:38:16.0157] <botzilla>
https://bugzil.la/1632273 — NEW (tcampbell) — Update ImmutableScriptFlags flag comments

[08:50:54.0554] <jorendorff>
jandem: Do you think anyone would be interested in looking at bug 1631270?

[08:50:56.0034] <botzilla>
https://bugzil.la/1631270 — NEW (nobody) — IE test Drive: Web Workers Fountain demo is slow

[08:51:11.0280] <jorendorff>
jandem: It seems actionable and might indicate a missing IC case

[08:58:13.0053] <jandem>
hm SetElem, comments in the JS file mention sparce (sic) arrays

[09:00:17.0611] <mgaudet>
what's the return value of `super()`? Is it the same as `this`? I'm trying to understand [this](https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.cpp#7029-7040) example; like, if that `[super()]` just defined a property, and you had an instance of `Inner`,

[09:00:56.0016] <mgaudet>
 * what's the return value of `super()`? Is it the same as `this`? I'm trying to understand [this](https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.cpp#7029-7040) example; like, if that `[super()]` just defined a property, and you had an instance of `Inner`, how would you access that property

[09:01:42.0655] <mgaudet>
oh, wait, just got my example working

[09:01:47.0061] <mgaudet>
it -is- this! 

[09:01:50.0589] <mgaudet>
 * it -is- `this`!  

[09:02:58.0538] <mgaudet>
(https://paste.mozilla.org/uTG3SHoi) 

[09:07:41.0755] <tcampbell>
mgaudet: yeah it is just `this`. There is some TDZ shenanigans though and things will throw if you use `this` before super

[09:08:10.0552] <tcampbell>
the act of calling super makes `this` live

[09:08:26.0867] <mgaudet>
Alrighty then :) 

[09:08:39.0486] <tcampbell>
calling super twice is a runtime error. returning without calling it? runtime error.

[09:10:40.0449] <evilpie>
so JS is actually more explicit than C++ ^^

[09:11:06.0645] <jorendorff>
well ... true

[09:21:33.0118] <tcampbell>
mgaudet: ```//
class A {}

class B extends A {
    constructor() {
        eval("() => super()")();
        this.a = 2;
    }
}
```

[09:21:40.0447] <tcampbell>
 * mgaudet: 
```//
class A {}

class B extends A {
constructor() {
eval("() => super()")();
this.a = 2;
}
}
```
```

[09:21:49.0838] <tcampbell>
 * mgaudet:
```//
class A {}

class B extends A {
constructor() {
eval("() => super()")();
this.a = 2;
}
}
```

[09:22:05.0000] <tcampbell>
 * mgaudet:
```//
class A {}

class B extends A {
  constructor() {
    eval("() => super()")();
    this.a = 2;
  }
}
```

[09:22:15.0137] <mgaudet>
:S 

[09:23:02.0008] <tcampbell>
arrows and eval both inherit the i'm-allowed-to-super behaviour

[09:23:11.0027] <jandem>
this was quite a pain to implement, it's why we needed `.this`

[09:25:57.0946] <mgaudet>
oh -- I didn't even spot the double nesting of eval + arrow there

[09:26:05.0832] <mgaudet>
it's even -worse- than I saw the first time

[10:05:34.0492] <sfink>
ok, I need someone to tell me I'm stupid

[10:05:42.0392] <sfink>
or rather, someone to tell me *how* I'm being stupid

[10:05:59.0987] <sfink>
I have a patch stack. About 40 patches total, all to a fairly small set of files.

[10:06:23.0016] <sfink>
I used the wrong indentation level in pretty much all of them

[10:06:29.0200] <sfink>
I want to fix the whole stack

[10:07:01.0995] <sfink>
just updating to the first, doing the automatic reformatting, amending, and updating to the next is going to be merge hell

[10:07:58.0983] <sfink>
so the overengineer that I am, I wrote a script to update to each one in the stack, reformat, and then rebase it on top of its now-reformatted parent (using the merge tool :local)

[10:08:30.0198] <sfink>
the idea is that I want the exact contents of the tree at every point in the stack, except reformatted, and I want the parent links the same as they are in the unformatted ones

[10:08:56.0962] <sfink>
conceptually it seems easy and makes sense, but I'm on about the 12th iteration of fixing up my script

[10:09:07.0988] <sfink>
there *must* be a vastly simpler approach that I'm missing

[10:09:09.0921] <sfink>
halp?

[10:10:04.0197] <sfink>
(this is JS code, and I'm reformatting with something similar to `mach lint -l eslint --warnings --fix`)

[10:10:37.0289] <sfink>
these attempts are not fast

[10:12:06.0998] <arai>
update to the first revision, reformat and commit it as a separate changeset, create a reverting changeset, rebase the second revision, repeat.  and then fold revert+change+reformat for each

[10:12:49.0506] <arai>
that's what I did last time for similar situation

[10:13:11.0783] <sfink>
ooh, that makes a lot of sense

[10:13:27.0744] <sfink>
thank you! If this attempt fails, I'll give that a try

[10:14:19.0091] <sfink>
I think when I was searching the web for a solution, someone did say something like that, but I couldn't understand it. Your description is much shorter and much, much more clear.

[10:14:58.0913] <arai>
:)

[11:38:24.0535] <tcampbell>
yeah, I just did a similar thing manually for a smaller stack. Rebase editting each patch, reformat->amend->continue. When the merge fail happens, I'd just `checkout -p <original_next_patch>` to update current directory to original patch 2. Then reformat->amend->continue.

[12:19:04.0677] <Waldo>
> <@tcampbell:mozilla.org> calling super twice is a runtime error. returning without calling it? runtime error.

Note that you can if memory serves call `super()` _later_ (for example, doing so from an arrow function that you've assigned to a global variable during the construction operation) and some degree of sense and madness will ensue.

[12:25:21.0411] <Waldo>
It's not obvious to me why JS didn't just require the first statement in a constructor body to be a super-call or something as syntactic special form allowed only there, would have avoided all this nonsense.

[12:29:55.0011] <pygy>
Allowing `super()` in arrow functions seems superfluous... Why was it spec'ed that way?

[12:30:56.0608] <Ricky>
Hi spidermonkey experts! I'm working on the Python 3 build system migration and I'm seeing some unexpected errors in the spidermonkey tests. Does anyone happen to know what [these errors](https://treeherder.mozilla.org/#/jobs?repo=try&revision=b6868ef5489e49aba2e42a3f99d3c1c4631b0a7e&selectedJob=299050770) would be indicative of? They're all of the form "X is not defined", and I can't reproduce the errors by running `mach test` locally.

[12:35:30.0319] <sfink>
Ricky: the first batch (eg getterThrowsForAll) is a wpt failure. Currently, the wpt tests can't run under Python 3. I believe someone from Igalia is working on that?

[12:35:43.0504] <sfink>
 * Ricky: the first batch (eg getterThrowsForAll) are wpt failures. Currently, the wpt tests can't run under Python 3. I believe someone from Igalia is working on that?

[12:36:33.0334] <sfink>
oh. I think they're all wpt.

[12:37:01.0441] <sfink>
`mach test` won't reproduce because it falls back to running those tests under Python 2.

[12:37:22.0206] <sfink>
(I fixed all non-wpt tests to run under Python 3 already)

[12:37:42.0019] <sfink>
Ms2ger [~half-time dedication]: ^

[12:38:54.0808] <sfink>
er, unless you're the person who's fixing wpt, that is :-)

[12:40:36.0922] <Ricky>
Interesting, let me see if that helps me reproduce at all. (I wonder why that would cause the errors to manifest like so and not as a more transparent Python 3 issue...)

I may or may not be the person who's responsible for fixing this, depending I guess on how hard it is to push through. 

What's Igalia by the way? Sorry, I'm a lowly build person who knows nothing about js :) 

[12:41:37.0349] <Waldo>
> <@pygy:mozilla.org> Allowing `super()` in arrow functions seems superfluous... Why was it spec'ed that way?

I believe the rationale for allowing it there -- and in direct `eval` -- was a concern about syntactic forms having identical meaning appearing on their own, and when embedded in stuff.  There's a name for this principle, but for the life of me I can't remember it right now.  Maybe someone else does?

[12:41:40.0204] <sfink>
https://github.com/web-platform-tests/wpt/pull/23143 seems to show a Ziran Sun <zsun@igalia.com> doing some fixes, perhaps just on the external wpt side?

[12:42:00.0351] <sfink>
igalia is a contracting company that does a lot of web platform work for multiple browsers

[12:42:28.0767] <Waldo>
...what he said, basically.  They do stuff for companies that want features in browsers, or directly for browsers, etc.  Or on JS engines.

[12:43:50.0047] <sfink>
I couldn't say why errors show up in that form. It seems like it's not importing required JS support files? Anyway, I looked at it briefly when I was porting the rest, and got confused enough to punt it off as Somebody Else's Problem.

[12:44:35.0415] <sfink>
you probably want to get in touch with them to avoid duplicating work. Ms2ger [~half-time dedication]hangs out here and would know, or you could try that zsun email address.

[12:46:31.0389] <sfink>
at the time I looked at it, the errors were much more straightforwardly due to py3 differences in processing manifest files and things. Perhaps it's not copying over needed files or something? Though then you'd expect an import failure.

[12:46:38.0184] <pygy>
> <@waldo:mozilla.org> I believe the rationale for allowing it there -- and in direct `eval` -- was a concern about syntactic forms having identical meaning appearing on their own, and when embedded in stuff.  There's a name for this principle, but for the life of me I can't remember it right now.  Maybe someone else does?

Thanks Waldo 

[12:48:03.0614] <Ricky>
> <@sfink:mozilla.org> at the time I looked at it, the errors were much more straightforwardly due to py3 differences in processing manifest files and things. Perhaps it's not copying over needed files or something? Though then you'd expect an import failure.

A lot of that stuff has been updated as a direct result of the other work I've been doing, so with any luck it'll be on the straightforward side. Thanks for the tips anyway.

[12:48:35.0059] <sfink>
Waldo: I think that's the Principle of Least Astonishment After Having Consumed More Than 1 Liter of Alcohol But Less Than Two

[12:52:59.0951] <iain>
I think it might be Tennent's Correspondence Principle: https://gafter.blogspot.com/2006/08/tennents-correspondence-principle-and.html

[13:10:26.0948] <Waldo>
Yeah, that's what I was thinking of.

[13:28:28.0243] <iain>
Data structure design question: I'm implementing named captures. The RegExpShared now has a set of (name, index) pairs mapping the capture names to the appropriate indices. The engine returns this to us as a fixed-length array, where the even elements are names (PropertyName*, effectively) and the odd elements are the corresponding indices.

[13:28:55.0190] <iain>
The easiest/dumbest way of storing this is to just hang the array off the regexpshared

[13:29:43.0941] <iain>
Is there an alternative that's worth the effort?

[13:30:05.0938] <Waldo>
What would be the advantage of some alternative representation?

[13:30:16.0453] <iain>
Saving memory?

[13:30:32.0300] <Waldo>
You mean in not atomizing the names, or what?

[13:30:44.0986] <iain>
Sorry, when I say "array" I mean a literal ArrayObject

[13:30:55.0603] <Waldo>
Oh.

[13:31:37.0541] <iain>
It is somewhat negotiable, in that I can choose how to represent V8's FixedArray

[13:31:53.0926] <iain>
V8 just cares about being able to allocate it and set individual indices

[13:32:37.0277] <Waldo>
So `RegExpShared` is fixed size now, and you'd be adding one `Value` or `ArrayObject*` or so to it -- keeping it fixed size, leaving the variable-size thing to a heap allocation, basically.  That seems straightforward enough.

[13:33:18.0290] <Waldo>
I wouldn't bother doing something crazy here til it's demonstrated to matter in practice.  How many regular expressions with gobs of named captures are there likely to be?  Doesn't seem like that many, really...

[13:33:55.0609] <iain>
What's the overhead of an ArrayObject vs, say, a Vector?

[13:34:34.0483] <Waldo>
If you had a vector, wouldn't you have to trace its contents yourself?

[13:34:44.0334] <iain>
Yeah

[13:35:23.0527] <Waldo>
I dunno, can you do a `Heap<GCVector<Value>>` or so?  I don't deal with bespoke GC things to track not through reserved slots already traced, so my -fu here is not very strong.

[13:37:25.0154] <iain>
The more I think about this, the more I lean towards not getting fancy

[13:38:02.0755] <Waldo>
This rubber duck thinks that's a good idea, in surprisingly actually-vocal fashion.

[13:38:27.0229] <iain>
Cool, thanks

[14:08:02.0027] <evilpie>
the autoland <-> m-c merge times are getting so bad :/

[14:08:15.0633] <evilpie>
I think I might have to switch back to using autoland locally

[14:13:31.0571] <tcampbell>
I usually push reviewed patches with my morning coffee, and they merge at the end of my work day

[14:16:22.0100] <evilpie>
I wanted to rebase on top of https://bugzilla.mozilla.org/show_bug.cgi?id=1632127

[14:16:40.0104] <evilpie>
landed on autoland when I woke up

[14:16:48.0235] <evilpie>
I am going to bed soonish and still not merged

[14:21:07.0261] <tcampbell>
oh I definitely rebase on autoland to chain patches. so far it hasn't blown up in my face, but I expect it to

[14:51:45.0553] <evilpie>
I mostly use m-c to prevent random failures getting into my try pushes

[14:55:37.0396] <tcampbell>
I do development on m-c, but when I'm ready to push if I suspect there will be a merge conflict becuase of ongoing work, I'll rebase to autoland and run a quick jittests and go

[14:59:30.0943] <Waldo>
jorendorff: I'm behind in scrollback in the other channel and don't have time to catch up, but the `operator Rooted<T> &()` formatting change is apparently a bug, from comments in some bug I saw somewhere recently.

[14:59:39.0361] <Waldo>
(gonna catch up later, not now)

[15:03:28.0181] <tcampbell>
https://bugzilla.mozilla.org/show_bug.cgi?id=1619165#c5 I gues?

[15:03:30.0037] <tcampbell>
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1619165#c5 I guess?

[15:06:11.0689] <Waldo>
Something like that, maybe.

[16:27:40.0431] <evilpie>
Can somebody look into https://bugzilla.mozilla.org/show_bug.cgi?id=1608101 ? This failure triggers extremly often on my try push

[16:27:46.0510] <evilpie>
sfink: maybe?

[16:30:36.0069] <sfink>
will look in a bit

[16:33:06.0853] <mccr8>
evilpie: What do your failures look like? All of the failures in the last week that I see in that bug are misstarred.

[16:33:28.0111] <mccr8>
The "Unknown pointerType: [object String] "touch"" stuff is just some test harness junk that gets printed out all of the time.

[16:34:23.0458] <evilpie>
https://treeherder.mozilla.org/#/jobs?repo=try&resultStatus=testfailed%2Cbusted%2Cexception&classifiedState=unclassified&revision=036f31dac1998c3973b91fd3211540af419ae63d&selectedJob=299055754

[16:34:39.0095] <evilpie>
I think you probably correct

[16:34:57.0008] <mccr8>
evilpie: yeah ignore all of the InvalidArgumentException: Unknown pointerType: [object String] "touch" lines.

[16:35:13.0252] <evilpie>
can't we like fix that?

[16:35:14.0467] <mccr8>
Looks like the actual failure is TEST-UNEXPECTED-FAIL | /html/browsers/the-window-object/window-prototype-chain.html | Window.prototype - assert_class_string: expected "[object WindowPrototype]" but got "[object Window]"

[16:35:29.0498] <mccr8>
evilpie: yeah it seems like we should!

[16:36:22.0776] <mccr8>
I think it happens in WPT tests that use touch events, but we don't support them properly in the harness or something.

[16:36:27.0553] <evilpie>
yeah that failure should go away when https://github.com/web-platform-tests/wpt/pull/23140 merges

[16:37:12.0913] <mccr8>
evilpie: woah, really? Ok I guess I won't file a bug about it.

[16:37:49.0170] <evilpie>
ah sorry ☹︎ I was referring to the window-prototype-chain.html failure

[16:38:08.0214] <mccr8>
Hah! Ok. I'm glad I asked for clarification.


2020-04-24
[17:23:50.0070] <Waldo>
Bah.  Whatever happened to eating lunch?

[18:47:28.0611] <Waldo>
Huh, that's interesting.  Apparently if you've opened up a bug you can see and write and submit a comment, if that comment midairs with a group-change that means you ought not be able to see the bug, you can submit the comment/change anyway and "regain" access to the bug still.  RyanVM 

[18:48:31.0623] <Waldo>
Doesn't seem like a bug, does seem maybe quirky and possibly 🤨

[21:23:16.0984] <ptomato>
evilpie: I've been looking in to moving JS::PrintError and js::ErrorReport to public headers

[21:23:44.0915] <ptomato>
evilpie: technically, js::ErrorReport already is available to embedders, because it's in jsfriendapi.h

[21:24:02.0715] <ptomato>
but we also have JSErrorReport

[21:24:18.0500] <ptomato>
do you know why there is a difference between these?

[01:06:45.0571] <Ms2ger [~half-time dedication]>
Ricky: so it seems you've broken `// META: script=../resources/test-utils.js` support in `any.js` wpt tests in jstests

[01:08:38.0770] <Ms2ger [~half-time dedication]>
Ricky: those are handled here: https://searchfox.org/mozilla-central/rev/41c3ea3ee8eab9ce7b82932257cb80b703cbba67/js/src/tests/jstests.py#428 in `scripts = [resolve(test_path, s) for s in test.scripts]`

[01:09:22.0623] <Ms2ger [~half-time dedication]>
Ricky: let me know if you need help from there

[01:19:37.0748] <evilpie>
ptomato: from my understanding jsfriendapi was only ever meant to be used by Gecko

[01:19:49.0048] <evilpie>
and js:: is strictly a private namespace

[01:20:01.0263] <evilpie>
anyway JSErrorReport vs ErrorReport is a good question

[01:20:36.0981] <evilpie>
ErrorReport allows us to convert  (pending) exception values to JSErrorReport

[01:20:42.0510] <evilpie>
I am open to renaming

[01:21:10.0157] <evilpie>
(it has to be a stack class for rooting/lifetime reasons)

[01:21:18.0732] <evilpie>
thanks for working on this

[02:09:10.0470] <wingo>
how do i make a central-as-beta try build?

[02:09:27.0366] <wingo>
(good morning also!)

[02:11:01.0268] <wingo>
`mach try release` ?

[02:17:47.0824] <Benjamin Bouvier>
so i think removing the "a" suffix in browser/config/version.txt

[02:18:05.0325] <Benjamin Bouvier>
or steal a commit from a sheriff doing so in a try-run, as in https://hg.mozilla.org/try/rev/da2bf0626e1eb2955b772e051cd00475201a0c78

[02:21:22.0972] <wingo>
it says it was pushed via mach try release so i will give that a go

[02:24:02.0719] <wingo>
sweet

[05:03:20.0126] <pygy>
Hello folks, I'm in the process of writing a view lib (I know, yet another one), and in the process, I'm doing quite a bit of (micro)benchmarks to gauge the state of the various JS engines and optimize my code accordingly. Yesterday I reported a within FF discrepancy between `__proto__` and  `getPrototypeOf()`.
Today I find a basic scenario (iterating over polymorphic POJOs) where FF is about 3.2 times slower than Chrome and 4.2 times slower than Safari. Are you interested in this kind of reports, should these be submitted at Bugzilla, or will I waste your time? [Benchmark here](https://flems.io/#0=)

[05:04:07.0260] <pygy>
 * Hello folks, I'm in the process of writing a view lib (I know, yet another one), and in the process, I'm doing quite a bit of (micro)benchmarks to gauge the state of the various JS engines and optimize my code accordingly. Yesterday I reported a within FF discrepancy between `__proto__` and  `getPrototypeOf()` which ended up being forwarded as a Bugzilla ticket.
Today I find a basic scenario (iterating over polymorphic POJOs) where FF is about 3.2 times slower than Chrome and 4.2 times slower than Safari. Are you interested in this kind of reports, should these be submitted at Bugzilla, or will I waste your time? [Benchmark here](https://flems.io/#0=)

[05:05:49.0968] <jandem>
pygy: please file a bug. Attaching a stand-alone test that reproduces the problem would be ideal

[05:07:51.0996] <pygy>
@jandem by standalone, do you mean a gist/bl.ocks.org (i.e. more standalone than the "bunchmark" I posted)?

[05:08:10.0234] <pygy>
 * @jandem by standalone, do you mean a gist/bl.ocks.org (with just the problem code, i.e. more standalone than the "bunchmark" I posted)?

[05:09:32.0146] <jandem>
pygy: sometimes external benchmarks are no longer available a while later. Posting a single html file (or a zip file) as attachment avoids that problem

[05:10:50.0308] <pygy>
And having it attached is more convenient to you than inlining the code in the issue?

[05:11:12.0510] <pygy>
(just pasting is obviously more convenient to me :-)

[05:11:32.0307] <jandem>
that works too, assuming it's not a ton of lines

[05:11:44.0626] <pygy>
Gotcha :+1:

[05:11:54.0050] <pygy>
 * Gotcha 👍️

[05:16:39.0657] <pygy>
I'll have to double-check though, it could be a Math.random() thing as well.

[05:19:21.0360] <jandem>
thanks for looking into this

[05:58:38.0029] <tcampbell>
Re: friendapi. I've wondered if we should fold it with JSAPI since that doesn't in practice meet a high bar of compatibility or stability

[06:00:01.0297] <tcampbell>
* Re: friendapi. I've wondered if we should fold it with JSAPI since that doesn't in practice meet a higher bar of compatibility or stability

[06:00:57.0369] <tcampbell>
We seem to be splitting them up into more targeted headers anyways

[06:02:31.0544] <evilpie>
I would prefer moving them into smaller headers of just folding into the already massive jsapi.h


[08:39:22.0080] <ptomato>
tcampbell: evilpie: indeed, in embedder code it's often required to nonetheless use things in the `js::` namespace

[08:39:40.0345] <ptomato>
like if you want to create a `JS::GCHashMap<>` the alloc policies and default hashers are in `js::`

[08:41:48.0969] <ptomato>
evilpie: re. ErrorReport, if `js::ErrorReport` is stack-only then it sounds like it should still be kept separate from `JSErrorReport`, but maybe renamed to something like `JS::ExceptionInfo`?

[08:55:50.0421] <jonco>
ptomato: hmm, the defaults for those should be moved to JS at least

[08:57:08.0220] <evilpie>
I was thinking something like JS::CreatErrorReport

[09:29:44.0674] <yulia>
Do people want to do a TC39 review from last month's meeting?

[09:35:47.0237] <iain>
What would be on the agenda?

[09:36:02.0567] <iain>
I would probably be in for it

[09:37:04.0998] <yulia>
it would be a review of what happened at last meeting

[09:37:13.0905] <yulia>
basically, my text update

[09:37:20.0106] <yulia>
but with discussion

[09:37:32.0372] <yulia>
the next meeting is june 2nd, so our next discussion of tc39 will be in about a month

[09:38:16.0432] <yulia>
we could also use this meeting to more generally discuss proposals

[09:38:32.0431] <yulia>
also, there is now an incubator call that i am attending, where champions raise specific issues

[09:38:48.0746] <yulia>
don't know if people want to join / want to hear about what happens

[09:44:59.0375] <iain>
I like hearing about TC39 things

[09:45:32.0517] <yulia>
ok, i will set something up for next week then

[09:46:03.0186] <mgaudet>
I'd be interested potentially as well :) 

[09:46:11.0719] <yulia>
ok, grat

[09:46:15.0190] <yulia>
 * ok, great

[09:55:48.0852] <mgaudet>
/me literally can't remember how to git

[10:02:19.0040] <mgaudet>
confession: Playing dress-up as a TC39 editor https://github.com/tc39/ecma262/pull/1968 (little minds etc) 

[10:02:23.0973] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[10:29:09.0133] <Benjamin Bouvier>
confession: cranelift arm64 backend for wasm passing all the spidermonkey wasm tests

[11:15:28.0767] <iain>
Anybody around to rubber-duck for me briefly?

[11:15:43.0851] <iain>
I am implementing named captures, and I want to make sure I'm not doing something dumb before I write a lot of code.

[11:17:12.0377] <iain>
Brief summary: if you put a named capture into a regexp, then the resulting match object also has a "groups" property, which in turn contains a property for each of your named captures

[11:18:02.0610] <iain>
So `/(?<x>.)(?<y>.)/.test("ab")` would produce { x: "a", y: "b" }

[11:18:03.0267] <Ricky>
> <@ms2ger:igalia.com> Ricky: those are handled here: https://searchfox.org/mozilla-central/rev/41c3ea3ee8eab9ce7b82932257cb80b703cbba67/js/src/tests/jstests.py#428 in `scripts = [resolve(test_path, s) for s in test.scripts]`

Thanks, this is great, I was able to fix the problem thanks to this info.

[11:19:11.0831] <iain>
The engine gives us an array of name/index pairs, which we can store on the regexpshared

[11:20:17.0200] <iain>
And to create the actual `groups` object, it looks like I should create a template object at parse time with the right shape and group, and stash it away?

[11:23:46.0066] <iain>
It seems to me like this should work, and is mostly idiomatic based on poking around at other code

[11:29:23.0260] <Waldo>
That sounds sensible, yes.

[11:29:44.0881] <iain>
Cool, thanks

[11:54:47.0409] <jdm>
> <@bnjbvr:mozilla.org> confession: cranelift arm64 backend for wasm passing all the spidermonkey wasm tests

where's the best place to follow this work? how will servo know when there's a version of spidermonkey that will give us wasm on arm64?

[11:59:49.0740] <cfallin>
jdm:  we're over on the bytecode alliance zulip (bytecodealliance.zulipchat.com) in #cranelift-new-backend

[12:00:38.0293] <cfallin>
the big merge happened last week (github.com/bytecodealliance/wasmtime/pulls/1494) and we're just finishing up some correctness issues now; Ben plans to merge the SM part of this sometime next week I think if nothing goes wrong

[12:02:10.0682] <cfallin>
the tracking bug for the SM integration is: https://bugzilla.mozilla.org/show_bug.cgi?id=1618595

[12:02:35.0341] <jdm>
thanks!

[12:03:16.0417] <cfallin>
 * the big merge happened last week (github.com/bytecodealliance/wasmtime/pull/1494) and we're just finishing up some correctness issues now; Ben plans to merge the SM part of this sometime next week I think if nothing goes wrong

[12:07:57.0684] <cfallin>
(also, jdm : for maximum clarity, SM today supports wasm on arm64, but it's only the baseline compiler (so non-optimizing))

[12:09:00.0168] <jdm>
I think the various checks I looked at just disabled wasm support if ion didn't support it?

[12:09:10.0791] <jdm>
but that's in a revision of spidermonkey from early january; I don't know if that's changed.

[12:14:18.0408] <cfallin>
took a bit to find the original bug but I think this is it for baseline/arm64: https://bugzilla.mozilla.org/show_bug.cgi?id=1407535 (so at least two years old)

[14:41:24.0408] <iain>
confession: The named captures prototype has successfully captured its first names

[14:41:26.0849] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:53:01.0011] <evilpie>
iain: so normal stuff works now?

[14:54:51.0490] <iain>
evilpie: Yep

[14:54:59.0047] <iain>
The try build is green

[14:55:08.0030] <iain>
The try build with the 262 tests for lookbehind / dotAll / unicode escape sequences is green

[14:55:08.0954] <iain>
The perf numbers look good

[14:55:16.0608] <evilpie>
whoa awesome

[14:55:40.0555] <iain>
I am currently fuzzing the code

[14:55:57.0803] <iain>
Although it's 5M+ iterations in and still hasn't found the bug that I deliberately introduced

[14:56:03.0398] <iain>
So maybe I need a different fuzzer

[14:56:09.0134] <evilpie>
oh

[14:56:18.0023] <evilpie>
Enable on Nightly ;)

[14:56:33.0610] <iain>
Distributed fuzzing!


2020-04-25
[17:12:51.0043] <Waldo>
confession: Added a test262 test for an Intl spec change and proposed an Intl spec change to forbid duplicate variants in the `tlang` in a Unicode transform extension (just as duplicate variants are already forbidden in language tags overall).

[17:22:58.0002] <Waldo>
(wonder why no "Seen!" response yet)

[17:36:44.0651] <iain>
Within a certain window of the last "Seen!", botzilla just adds the :eyes: to avoid spamming the channel

[17:37:03.0421] <iain>
 * Within a certain window of the last "Seen!", botzilla just adds the 👀 to avoid spamming the channel

[17:42:04.0097] <Waldo>
14:41 to 17:12 is unusually longer than what I remember the "certain window" being, which was on the order of minutes when it was on IRC.

[01:55:10.0505] <jandem>
if I'm reading [the source code](https://github.com/bnjbvr/botzilla/blob/2d168c4bb079386892ab930986895b6548b4f045/src/modules/confession.ts#L34-L35) correctly, the window is 10 minutes but also 20 messages in between

[01:58:24.0294] <jandem>
although the code may not match the comment, maybe it's an hour instead of 10 minutes, Benjamin Bouvier ?

[10:05:57.0063] <Caspy7>
so, now that WebGPU is becoming a thing, is it time to start looking into how it can be abused and mitigate that abuse? :)

[10:45:46.0357] <jandem>
that's a question for the gfx folks :) 

[11:25:25.0424] <Caspy7>
gotcha

[11:37:11.0954] <arai>
evilpie: I'll review your remaining patches tomorrow 

[11:37:25.0358] <evilpie>
sure. no hurry

[12:02:03.0085] <jandem>
evilpie ++. That cleanup has been on my list for ages 

[12:02:53.0763] <evilpie>
I wish I had a nice programmatic renaming tool. I think google has something based on clang

[12:03:23.0693] <jandem>
yeah that would be nice for this 

[15:19:53.0874] <evilpie>
Wow the whole API around atoms and interning is quite bad

[15:31:39.0006] <evilpie>
I don't understand this: https://searchfox.org/mozilla-central/source/js/public/Id.h#84-91

[15:31:55.0182] <evilpie>
what's wrong with atomized non-interned/pinned strings?

[15:35:00.0621] <evilpie>
ah maybe that is some scheme to allow people to have unrooted jsids?


2020-04-26
[01:04:26.0813] <Waldo>
evilpie That or the API is inherently infallible, looks like. 


2020-04-27
[00:23:59.0221] <jonco>
evilpie: yes, the browser has unrooted/untraced jsids

[00:24:42.0132] <jonco>
evilpie: I think this is used for well known names (search for GetAtomCache)

[00:49:01.0884] <Benjamin Bouvier>
Waldo: jandem yeah, once per hour or at most once every 20 messages, to avoid spamming the channel

[01:18:29.0891] <Waldo>
I guess there's less reason to spam when the message is utterly generic and is not tailored to the individual user...

[01:19:42.0148] <Waldo>
FWIW people, I am contemplating working Monday but taking Tuesday off for a bike ride.  The odds of some drastic need for specifically me arising Tuesday seem low, but if it happens, you'll know where I am if I decide to play hooky.

[01:25:55.0282] <Benjamin Bouvier>
Waldo: no lock down where you are?

[01:26:04.0473] <Benjamin Bouvier>
Waldo: also, isn't it quite late where you are 🤔

[01:26:28.0721] <Waldo>
Benjamin Bouvier: We can go outside to exercise, etc.  I think we're supposed to stay inside the county, which is easy because the county extends a fair ways.

[01:26:44.0218] <Waldo>
Benjamin Bouvier: On the contrary, it is quite early.  😉

[01:27:05.0380] <Waldo>
(heading to sleep any second now, tho)

[01:27:57.0427] <Benjamin Bouvier>
ah, nice

[01:28:19.0384] <Waldo>
You're supposed to stay the usual six feet away from others and all when you do, of course.

[01:28:59.0579] <Waldo>
I did around 25mi over the last two days getting groceries, but that was hardly recreational much.  🙂

[01:31:03.0167] <Ms2ger [~half-time dedication]>
👁︎

[01:31:09.0655] <Waldo>
Three of the four grocery runs I did (to the same two different stores each day), did not exceed my panniers/backpack/full bag in left hand carrying capacity.  The fourth...well, I had to walk home.  🙂

[01:43:35.0249] <jandem>
/me is off today too. King's Day, the quarantine version...

[01:47:42.0480] <Ms2ger [~half-time dedication]>
Ricky: good to hear; can you cc me on the bug?

[04:04:33.0642] <arai>
Yoric: review ping for bug 1628784

[04:04:35.0230] <botzilla>
https://bugzil.la/1628784 — ASSIGNED (arai) — ./mach jsapi-tests crashes in testBinASTReaderContextECMAScript2

[04:05:12.0093] <arai>
(I've changed the approach, so asking review again

[04:32:28.0645] <Yoric>
arai: I'm reviewing it right now.

[04:32:41.0077] <Yoric>
Sorry for the delay, I hadn't noticed that you had updated the patch!

[04:32:45.0909] <arai>
thank you :)

[05:32:16.0611] <tcampbell>
jonco: I'm curious what direction you decided to go for the poisoning? Leave the inline-elements unpoisoned, or use indirect forwarding?

[05:33:07.0685] <annevk>
/me wonders who is doing weak references and can help review https://github.com/whatwg/html/pull/4571 (in particular the bits where bz left comments)

[05:33:48.0039] <tcampbell>
jonco sfink did the weakref work

[05:34:08.0943] <annevk>
In part I guess they are DOM questions, but I'm not sure we still have someone that has all the pieces internalized...

[05:36:44.0043] <tcampbell>
ohh.. merge is next week, not today.. oops

[05:45:35.0892] <jonco>
tcampbell: I've given up on the poisoning at this point

[05:46:02.0871] <jonco>
tcampbell: I don't want to switch everything to indirect forwarding, although that might not be such a bad approach

[05:46:35.0577] <tcampbell>
Ah. I got into a rabbit-hole of trying to cleanup Ion bailouts/tracing and ended up trying to fix the mips simulator..

[05:48:00.0378] <tcampbell>
I did not like that we use `HeapSlot*` as the elements pointer everywhere when that is completely incorrect for TypedArrays

[05:49:37.0193] <jonco>
ah right, that is not ideal

[07:18:19.0704] <sfink>
tcampbell: really jonco and @allstarschh|afk did the implementation work, jonco did the implementation design, sfink just did reviews and argued in the spec repo

[07:18:26.0086] <sfink>
but I'll look

[07:21:47.0810] <Ms2ger [~half-time dedication]>
sfink: sorry

[07:30:05.0976] <jonco>
annevk: I can look too ^ but I don't understand the nuances of the incumbent global thing bz was talking about

[07:43:25.0520] <sfink>
bleh. As Ms2ger [~half-time dedication] says in https://github.com/whatwg/html/pull/4571/commits/51d511c3498de42d9c922f4c1dd92816f8654bf7 , the spec notion of incumbent (whatever that is) is incorrect in this context, so I guess it's not going to be that straightforward a thing. From an implementation standpoint, domenic's "The incumbent should be stored as part of the FinalizationGroup constructor." sounds promising.

[07:43:36.0038] <sfink>
I guess I'll need to figure out what an incumbent is

[07:43:56.0480] <Ms2ger [~half-time dedication]>
sfink: a nasty accident of history: https://html.spec.whatwg.org/multipage/webappapis.html#incumbent

[07:44:33.0360] <Ms2ger [~half-time dedication]>
I'm somewhat more interested in the questions about running in not "fully active" documents, personally

[07:48:06.0914] <sfink>
yeah, though that seems more like a fully HTML/browser question that my small JavaScript-centered brain doesn't have the concepts to manipulate.

[07:49:38.0604] <sfink>
"This is perhaps the only justifiable use of the incumbent concept on the web platform; in all other cases the consequences of using it are simply confusing and we hope to one day switch them to use current or relevant as appropriate."

[08:17:46.0126] <littledan>
sfink: From previous discussions around this topic, my expectation is that some other engines might not implement bz's preferred semantics here, if it ends up being too much work.

[08:20:22.0075] <littledan>
syg: ^

[08:43:41.0298] <Ms2ger [~half-time dedication]>
Ricky: thanks!

[08:47:26.0934] <Ricky>
Ms2ger [~half-time dedication]: np

[08:58:11.0483] <sfink>
littledan: you're referring to the semantics around iframe removal and not fully active stuff, right?

[09:00:09.0027] <littledan>
sfink: I meant, tracking which is the proper incumbent realm, which is a place that Gecko and Blink disagree with respect to Promises

[09:00:20.0625] <sfink>
oh! ok

[09:00:33.0953] <sfink>
I didn't read through the Promise variant of this issue

[09:00:36.0430] <littledan>
I'm not up to speed on inframe removal semantics

[09:02:48.0996] <littledan>
so, I think Domenic's proposed semantics for the incumbent realm here are analogous to what bz had been proposing for Promise semantics (and what SpiderMonkey has long implemented), but I didn't see evidence on the WeakRefs thread that Domenic's semantics had multi-implementer support

[09:03:06.0263] <littledan>
so, omitting formalizing this one way or another in the patch was deliberate, given that lack of support

[09:05:23.0806] <littledan>
anyway, you know, feel free to implement that in Firefox if you want

[11:04:23.0741] <evilpie>
We use `jsid` so often, I almost feel like giving up on `PropertyKey`

[11:34:39.0713] <Waldo>
Doesn't seem necessary to _force_ things there. Make an alias, switch users over incrementally over time. 

[14:10:37.0690] <mgaudet>
confession: Resuscitated some of the private fields code that had already been written; an extremely basic test case appears to work as if the code were using public fields... which is totally progress! 

[14:10:39.0915] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:11:57.0654] <djvj>
I should start using this confession bot more regularly.

[14:15:21.0165] <djvj>
confession: Went back to rejig earlier parser-atoms patches to move parser atoms table from TokenStreamCharsBase to TokenStreamAnyChars, then realized that it needs to be accessed from both places.  Then started looking at actual contentful uses of atoms from code in both inheritance hierarchies to see which made more sense.

[14:19:38.0515] <iain>
Is a UniquePtr stored as a regular pointer?

[14:20:05.0809] <iain>
That is to say, can we dereference it from jitcode by doing the obvious thing?

[14:20:13.0978] <Waldo>
It contains a T* field, in the ordinary course of events, yes.

[14:20:37.0138] <Waldo>
JIT code can make whatever assumptions it wants, it's sort of well off into la-la-land C++ object model-wise.

[14:22:08.0079] <Waldo>
Tho of course it's better to use things like `T::offsetOfField` and such in classes we define ourselves, to reduce such dependency.

[14:25:44.0571] <iain>
Wait, you lost me on that last bit

[14:26:03.0473] <iain>
I have a RegExpShared

[14:26:25.0052] <iain>
(Or rather, my masm code has a register containing the address of a RegExpShared)

[14:26:45.0371] <iain>
I have just added a UniquePtr<T> to RegExpShared

[14:26:58.0513] <iain>
I would like to load the address of T into a register

[14:28:16.0333] <iain>
I can and will implement RegExpShared::offsetOfTheUniquePtr()

[14:29:05.0369] <iain>
But that seems unrelated to the question of how to dereference the unique pointer

[14:29:31.0558] <Waldo>
The last bit is how we have `BigInt::offsetOfLength()` so we can load a length at a fixed offset in the class, without assuming it's at offset `0` or `sizeof(uintptr_t)` or whatever, to access a known `uint32_t length` or something.  You can apply that to get a `UniquePtr*` in this case, but you can't apply it to get the `T*` most likely stored inside it.

[14:29:47.0792] <Waldo>
Which I think means we're on the same page, just different words?

[14:29:48.0924] <iain>
Right, okay

[14:30:17.0878] <Waldo>
Fundamentally, JIT code poking at the insides of a `UniquePtr` is an ill fit.

[14:30:46.0957] <iain>
Maybe I just use a raw pointer

[14:31:06.0929] <Waldo>
That said -- you could `static_assert(sizeof(UniquePtr<T>) == sizeof(T*));` and _arguably_ by pigeonhole principle assume it contains a `T*` as its sole field.

[14:32:15.0954] <Waldo>
Well, maybe not -- you could imagine every `UniquePtr<T>` containing not a `T*, but a `T*` with its bytes stored bytesexually.  This is, of course, a bit unrealistic.

[14:34:12.0138] <Waldo>
We really try to have `UniquePtr` parrot the `std::unique_ptr` interface.  But given we seem unlikely to switch, because we want `MOZ_ASSERT` and other consistencies with how the rest of the code works, arguably we could discard compatibility and just add an `offsetOfPointer` static member function.

[14:35:01.0879] <iain>
Eh, there's no real reason for this to be a unique pointer other than signalling ownership

[14:54:31.0094] <Waldo>
I would probably just do a raw pointer, then.  You could wrap it in some small custom-use container class to assist with signaling ownership, if it's actually helpful.

[16:32:47.0930] <Waldo>
sfink: Last few comments on https://phabricator.services.mozilla.com/D72476 are relevant to things you probably would prefer not to be interested in.

[16:33:22.0814] <Waldo>
sfink: Pretty sure you will at some point be volunteered as tribute-reviewer.

[16:34:22.0908] <sfink>
I will wait in fearful ignorance until that time, as I cannot yet access the contents of that revision.

[16:34:31.0522] <Waldo>
o rly

[16:34:36.0266] <Waldo>
I will fix, muahahahaha

[16:35:05.0751] <sfink>
ignorance is bliss, but only so long as it lasts

[16:35:07.0928] <Waldo>
sfink: I maed u a prsent

[16:36:36.0219] <Waldo>
Tho, hm, now that I think about this, maybe there isn't quite actually a problem here?  Will comment there.

[16:43:40.0620] <Waldo>
sfink: Okay, added one more comment.  Double-check me on it?

[16:47:56.0552] <sfink>
I will definitely say that the safety properties here are far too cryptic. I'm still looking through stuff, trying to find the safeguards that I thought were here.


2020-04-28
[00:21:49.0040] <jonco>
iain: RegExpShared is a GC thing, so please don't use a UniquePtr for it

[00:21:56.0645] <jonco>
*wonders what happens if you try to delete a GC thing *

[00:22:07.0464] <jonco>
 * *wonders what happens if you try to delete a GC thing*

[00:31:44.0062] <jonco>
assertion failures, looks like

[02:07:16.0644] <evilpie>
I think he was adding a UniquePtr field to RegExpShared

[03:36:31.0316] <jonco>
evilpie: oh that makes more sense

[03:37:32.0362] <jonco>
well, it's destructor won't get called (because we don't for GC things) so it might also be problematic

[06:16:53.0166] <iain>
jonco: Yeah, it was going to be a field, and yeah, even the field was a bad idea

[06:17:22.0971] <iain>
Using a raw pointer now and everything is much nicer

[06:18:04.0875] <jonco>
iain: great

[08:26:56.0925] <djvj>
Waldo: ping

[08:27:32.0931] <djvj>
Waldo: https://searchfox.org/mozilla-central/source/js/src/frontend/TokenStream.h#51

[08:28:01.0953] <djvj>
^-- exactly how "wasteful" is this, and is the waste being talked about strictly in terms of code-size and compiled-code duplication?

[08:28:48.0712] <djvj>
Because I think I need to unify these two different "tails" of the inheritance hierarchy to implement my parser atoms stuff

[08:30:43.0610] <djvj>
Basically: make TokenStreamCharsShared inherit from TokenStreamAnyChars, instead of having no base classes.

[08:32:00.0120] <djvj>
AFAICT, this shouldn't cause problems, because TokenStreamCharsShared is not insantiated directly.  There are classes way down the inheritance chain that are instantiated.

[08:32:50.0033] <djvj>
And those classes implicitly inherit from TokenStreamAnyChars via multiple-inheritance anyway, so the storage for the fields in TokenStreamAnyChars ends up getting used anyway in those places.

[08:36:34.0806] <djvj>
Waldo: alternatively, I can make changes to this assumption: https://searchfox.org/mozilla-central/source/js/src/frontend/TokenStream.h#65

[08:37:24.0066] <djvj>
I.e. unify TokenStreamCharsShared with TokenStreamAnyChars.  I think maybe that's actually the same idea as I proposed above.

[08:39:21.0169] <djvj>
The rub I'm trying to deal with is this: both of these conjoined inheritance hierarchies deal with atoms, their creation, and their contents.  Moving to a parser-internal, indexed atom model requires that they both need access to the atoms table.

[08:39:47.0056] <djvj>
The TokenStreamAnyChars branch needs access to the atoms table because it inspects atom internals in various places.

[08:40:06.0335] <djvj>
The TokenStreamCharsShared branch needs access to the atoms table because it creates them.

[08:42:24.0784] <djvj>
Alternatively, I can _maybe_ avoid the whole issue by yet again rewriting my approach to the parser atoms - and instead of going with an indexed scheme, go with a heap-allocated parser-atom object-for-each-atom model, which would allow me to use actual pointers instead of indexed things.  Then, I could keep the current inheritance hierarchy as-is, because the TokenStreamAnyChars branch could inspect ParserAtom*s directly (instead of needing the table to get at the contents).. and the table itself could be kept on the TokenStreamCharsShared branch.

[08:57:17.0889] <djvj>
Waldo: I'd like to schedule a meeting to discuss the options here.  In the meantime, I'm probably going to look at fixing up the parser atoms representation as that requires the least change to existing Tokenizer machinery.

[09:34:26.0666] <evilpie>
jonco: thanks for doing another review. Do you agree with my comment about Maybe<AutoRealm> or am I missing someting?

[09:38:43.0498] <zombie>
can someone please help me grok why we're throwing this error in a specific situation: https://searchfox.org/mozilla-central/source/js/src/builtin/Promise.cpp#1528

[09:39:00.0255] <zombie>
if i'm in chrome JS, and have a promise P from content JS, chaining it with `P.then(v => ...)` seems fine, but if i return a `Promise.reject(X)` from that, and then chain from there, i get the linked error

[09:39:58.0521] <zombie>
and comments in that method seem confusing, since all my uses after that from chrome JS, able to ready both the original promise P from content, and any later resolution/rejection values

[09:40:12.0201] <zombie>
 * and comments in that method seem confusing, since all my uses after that are in chrome JS, able to ready both the original promise P from content, and any later resolution/rejection values

[09:41:35.0712] <zombie>
 * and comments in that method seem confusing, since all my uses after that are in chrome JS, able to read both the original promise P (from content), and any later resolution/rejection values

[09:51:15.0152] <jonco>
evilpie: oh right, yes that does make sense now you explain it

[09:51:40.0210] <jonco>
I get worried about the order of destructions when I see Maybe<> around RAII classes...

[09:54:09.0104] <jonco>
 * I get worried about the order of destruction when I see Maybe<> around RAII classes...

[09:54:41.0539] <Waldo>
djvj: Reading scrollback now, for some reason phone wasn't showing it when I checked earlier.

[09:58:58.0601] <Waldo>
> <@djvj:mozilla.org> ^-- exactly how "wasteful" is this, and is the waste being talked about strictly in terms of code-size and compiled-code duplication?

TSAC itself is pretty small, so it's not too much duplication -- of code size/compiled-code duplication, with resulting size and icache effects.

[09:59:49.0012] <Waldo>
> <@djvj:mozilla.org> Basically: make TokenStreamCharsShared inherit from TokenStreamAnyChars, instead of having no base classes.

The inheritance hierarchy is very just-so.  The _comments_ may attempt to rationalize the current setup, but they're at least as explanatory, add guideposts, as rationalizing.  If it needs to change, it should change, pretty much.

[10:04:12.0495] <djvj>
Waldo: Ok, I'll change the hierarchy and see how it goes.  Rewriting the parser atoms internals again was not something I was looking forward to.

[10:04:37.0312] <Waldo>
To summarize hazily, while listening to something else: everything is very bespoke, if it needs to bespeak in different fashion it should.

[10:10:13.0770] <djvj>
I like this answer.  It's a lot better than the "everything needs to be carefully arranged this way for <strange requirement>", which I feared.

[10:10:16.0001] <Waldo>
And I suppose particularly, if you're changing the representation of atoms in tokenizing/parsing so that it's something like pointer/hash/length into the original source units, that necessarily means encoding-awareness to understand what that pointer's contents are, which means it needs to move into something `<Unit>`-parametrized.

[10:10:27.0757] <Waldo>
🙂

[10:11:06.0300] <Waldo>
I mean, really: did you _actually_ think all those comments indicated an artfully aesthetically pleasing crafting of the setup?  😂

[10:11:36.0448] <Waldo>
"no comments" => code is terrible; "some comments" => code is probably decent; "way too many comments" => you need to go home and rethink your life

[10:11:38.0538] <djvj>
No, the parser atoms representation is multiplexed within the parser atom itself.  It doesn't (can't) carry out into outer types.

[10:12:14.0465] <djvj>
The parser internal representation variations are simply analogues of the whole JSAtom Lastin1 vs. TwoByte dichotomies

[10:13:57.0797] <djvj>
Waldo: BaselineJIT was like 30% comments and it was one of the cleanest designs I have had the pleasure of contributing to.  ASCII art diagrams and everything.

[10:14:19.0640] <djvj>
But I suppose when the comments are explaining/justifying C++ multiple inheritance hierarchies, it's a different matter

[10:14:46.0786] <Waldo>
djvj: I wouldn't say 30% is obviously not "some comments".  I think I had a roughly similar percentage in httpd.js, last time I checked.

[10:15:48.0289] <Waldo>
Big huge long block comments are where you need to be leery.  Admittedly this one was an overview comment -- standards are different there -- but yeah, one to describe a big ol' inheritance graph is skeezy.

[10:16:41.0445] <Waldo>
I remember first realizing this when I saw something like a forty-line comment in `DefineFunctions`, as used to implement some sort of JSAPI function, and it was basically all to deal with one small weirdness in the interface of the JSAPI thing.

[10:17:56.0418] <djvj>
Yeah I love the "here's why this innocuous looking code is in fact really scary, but don't worry I'm going to take a few paragraphs to once again reassure you that the really scary thing is not going to hurt you" comments

[10:18:21.0655] <djvj>
right above a single line of _very_ innocent looking code

[11:50:43.0717] <padenot>
I find doing computations with NaNs (in my case, a finite number multiplied by a NaN) slows down JS a _lot_, is that correct ?

[11:51:38.0222] <padenot>
a workload that is well under the real-time budget in an audioworklet without NaN overshoots it by 50% or 100% when NaNs are introduced

[11:52:28.0945] <evilpie>
I think CPUs are actually slower at doing computations involving NaNs

[11:52:46.0611] <padenot>
yeah that's another problem

[11:53:01.0475] <evilpie>
unless you are falling of the int32 path into double territory. that's of course bad too

[11:53:22.0713] <padenot>
I'm getting numbers for the nominal case where the bug is fixed and there is no NaN

[11:53:53.0654] <Waldo>
In JS at least, NaNs in normal values are going to often require extra work to canonicalize their bit patterns.  Plus they'll mean computations _have_ to be floating-point, when integer math might have otherwise been possible.  Inside CPUs, I am not _aware_ that NaNs slow stuff down (denormals are the thing that really slows stuff, usually), but I may just not know enough.

[11:53:54.0938] <padenot>
denormals we deal with in audio using FTZ/DAZ flags, but js is js, we can't do this

[11:54:17.0875] <Waldo>
Web Assembly may reduce or eliminate some of that NaN slowdown for canonicalizing...or it may not and I'm just wrong about that.

[11:57:30.0284] <evilpie>
jonco: I assume you have some experience with leaks in the browser?

[11:57:37.0098] <padenot>
this is float32 audio computations, everything is in [-1, 1], so I expect js doesn't do any integer trickery

[11:57:40.0327] <djvj>
Man.  So GeneralParser embeds a TokenStream, but also inherits from ParserBase, which embeds a TokenStreamAnyChars

[11:57:44.0581] <padenot>
it's a 35x slowdown, give or take

[11:57:44.0922] <evilpie>
browser/components/contextualidentity/test/browser/browser_serviceworkers.js sadly seems to reproducible leak 6 windows now

[11:57:58.0548] <djvj>
I can't even..

[11:58:42.0387] <djvj>
This is fine.

[12:00:33.0991] <iain>
padenot: We have some code in Ion that is float32 specific, but I don't know off the top of my head if it is only for wasm

[12:01:10.0407] <iain>
I suspect it probably is

[12:01:33.0102] <iain>
35x slowdown sounds like you are falling off a JIT happy path

[12:03:43.0771] <padenot>
yeah

[12:04:17.0799] <padenot>
if that's sensible to you, it's fine (this is a bug, code without the bug is of course fine and the jit makes it very fast)

[12:05:00.0595] <padenot>
it turns out that feeding a stream of NaN into an OS audio stack produces lots of interesting things

[12:06:41.0955] <iain>
I'm vaguely curious about where you're falling off the happy path

[12:06:45.0157] <padenot>
(we're now flushing them to zero in software, but I still had glitches, but it turned out that the js code was 35 times slower, and that was over the real-time budget)

[12:07:01.0051] <padenot>
it's a small file and a one line diff if you want

[12:07:19.0433] <iain>
Point me at it and I will take a quick look

[12:07:21.0304] <djvj>
Waldo: ok, I understand why I can't have TokenStreamCharsShared inherit from TokenStreamCharsBase now

[12:08:01.0753] <djvj>
Waldo: the regular parser infrastructure actually splits those two inheritance lineages up, and uses AnyCharsAccess (template parameter) to provide access to the correct AnyChars

[12:08:27.0440] <djvj>
I meant to say "why I can't have TokenStreamCharsShared inherit from TokenStreamAnyShars"

[12:09:00.0170] <Waldo>
It is absolutely a bit byzantine.  I don't remember the exact details of the setup, but I could page it in if I had to at any point.

[12:09:19.0658] <padenot>
iain: https://paste.mozilla.org/RaFh4FVB#L22,23

[12:09:46.0999] <Waldo>
padenot: Numbers in the [-1, 1] range overlap the denormals a fair bit, I would expect regrettably.

[12:09:47.0826] <padenot>
iain: I highlighted the two lines that need to change to fix the bug. `gain` is otherwise a `Float32Array` of 128 elements

[12:09:58.0215] <Waldo>
Maybe it's unavoidable, tho.

[12:10:30.0564] <djvj>
Waldo: it's fine.. I'm starting to get it.  The logic and state for TokenStream is _actually_ split into two pieces.  ParserBase embeds one part (the TokenStreamAnyChars), which tracks some state, but not the actual charstream itself

[12:11:13.0424] <djvj>
Waldo: And GeneralParser embeds the TokenStreamChars lineage, which is the other half of the state, which contains the actual charstream

[12:11:48.0624] <Waldo>
djvj: Back when I was looking at all this, I wanted to/thought we could basically inline the token stream bits into the separate parser classes and kill a bunch of complexity.  But someone, can't remember who, was adamant that being able to use just token streams on their own was useful, so that inlining ought not be done.

[12:12:23.0154] <djvj>
We need to find that someone

[12:12:33.0613] <Waldo>
And in any event that inlining was totally afield of what I was _actually_ trying to do, so I wasn't touching it at that point.

[12:12:34.0811] <djvj>
but honestly even if we wanted to do that I don't know if it can be in-scope for the parser-atoms work

[12:12:37.0903] <padenot>
Waldo: it's a very big problem in audio, and for audio in js. wait until I tell you that audio is based on lots of reccursive filter in the form of `y[i] = y[i-1] * coeff + input - x[i-1]` 

[12:12:41.0867] <padenot>
with coeff < 1.0

[12:13:21.0842] <padenot>
that converges to 0 when input is zero, which means that whenever you have silence in your processing, things slow down to a stop

[12:13:46.0498] <padenot>
 * Waldo: it's a very big problem in audio, and for audio in js. wait until I tell you that audio is based on lots of reccursive filter in the form of `y[i] = y[i-1] * coeff + x[i] - x[i-1]`

[12:13:56.0449] <Waldo>
padenot: I'm surprised you can't upscale the math to the integral range of IEEE-754.  But I guess if you do that you also want to make sure to truncate fractional parts at the same time, and there may not be IEEE-754 ops (or microarchitectural ops) for that.

[12:14:31.0811] <padenot>
we can but don't want to, because we like to still be able to compute way out of the [-1.0, 1.0] range to avoid clipping

[12:14:43.0160] <Waldo>
djvj: Yeah, it's certainly not a pressing thing -- tho simplifying these hierarchies is arguably a debt well worth paying down sooner and not later.

[12:15:01.0777] <Waldo>
djvj: Tho maybe the new frontend means it's moot, if we wait.

[12:15:11.0255] <padenot>
what is important is that _at the end_ you give the soundcard something in [-1.0, 1.0], so that the output doesn't distort

[12:15:55.0976] <djvj>
Waldo: I have no real objection to that - more that I don't know if it works with timeline scoping for ParserAtoms work (as in: it almost certainly doesn't).  We have given ourselves about 2 months to wrap up that _and_ the stencil finalization work.

[12:17:19.0466] <djvj>
I hope the new frontend makes this moot.  This is all eminently mootworthy.

[12:18:30.0015] <djvj>
Ok, I think I'm heading back to "parser atoms ids should be pointers to heap-allocated parser-atom-thingies"

[14:20:27.0315] <mgaudet>
What's the best way to dump the scopes for a piece of code? 

[14:27:37.0832] <Waldo>
"scopes"?

[14:28:14.0428] <Waldo>
`dumpScopeChain` does exist even today, but I have zero idea if that's the meaning of scope you wanted to invoke or the context you wanted to invoke within.

[14:30:47.0819] <mgaudet>
whoops. Closed riot window by accident :) 

`dumpScopeChain` looks pretty good 

[14:30:53.0755] <mgaudet>
Thanks for the pointer!

[15:03:04.0585] <tcampbell>
caroline+++! The last of the BCE script flags are gone! Lazy BaseScripts now have the same flags as non-lazy ones

[15:06:05.0953] <caroline>
tcampbell:  woop woooooop! 🥳

[15:10:15.0637] <mgaudet>
confession: Spent the day reading André's already in-progress stack for implementing private fields. (@anba++) Tomorrow will probably continue down that road, and re-teach myself all sorts of things about how this engine works that I've forgotten or need to learn. 

[15:10:17.0971] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2020-04-29
[17:28:35.0009] <ptomato>
`./mach try fuzzy` is failing to push to try on my new development setup; any tips on how I could isolate whether the problem is my ssh key not being setup correctly, or something in the configuration of git-cinnabar?

[17:48:26.0366] <tcampbell>
ptomato: try to ssh to `hg.mozilla.org`

[17:49:07.0504] <tcampbell>
username should be a full email address

[17:50:03.0335] <ptomato>
hmm, username is indeed a full email address but it seems that indeed my key must not be setup correctly

[17:50:04.0331] <ptomato>
thanks

[17:51:09.0043] <tcampbell>
(I usually have a `.ssh/config` with `Host hg.mozilla.org` and `User` and `IdentityFile` set)

[17:53:02.0954] <ptomato>
same here, I copied it from my old, working setup :-/

[00:23:32.0359] <jonco>
evilpie: I have experience of looking for them, less of finding them

[00:23:36.0500] <jonco>
evilpie: what's up?

[00:24:17.0308] <evilpie>
A handful of test is leaking windows now. See the bug

[00:55:19.0262] <jonco>
evilpie: that's a pain

[00:55:42.0638] <jonco>
evilpie: can you reproduce the leak with CC logging enabled?

[00:56:28.0753] <evilpie>
I have literally never done this before, what should I read?

[00:57:49.0973] <jonco>
"From the command line" section of https://developer.mozilla.org/en-US/docs/Mozilla/Performance/GC_and_CC_logs#Generating_logs 

[00:58:39.0796] <jonco>
I looked at the patch and nothing stood out, but I don't know anything about the lifetime of these script error objects

[01:38:01.0740] <evilpie>
jonco: well there is this comment: https://phabricator.services.mozilla.com/D64437#C2467478NL327

[01:47:40.0992] <evilpie>
jonco: here is what I did: https://paste.mozilla.org/3rCe0Ciw

[01:47:57.0919] <evilpie>
all the other cc-edges files didn't show anything

[02:02:31.0017] <jonco>
evilpie: that comment is suggestive

[02:03:21.0085] <lth>
do we have a standard for testing for 64-bitness?

[02:03:30.0837] <lth>
i tend to do #ifdef JS_64BIT

[02:03:40.0355] <lth>
but i see others use #if JS_BITS_PER_WORD == 32

[02:05:45.0133] <Benjamin Bouvier>
and then there's also #ifdef JS_PUNBOX64 and JS_NUNBOX32

[02:05:55.0018] <Benjamin Bouvier>
these should probably be unified, as they seem to do the same thing

[02:05:56.0348] <Benjamin Bouvier>
https://searchfox.org/mozilla-central/source/js/moz.configure#58-61

[02:08:35.0333] <jonco>
evilpie: not sure what the output of find_roots tells you TBH

[02:09:25.0991] <jonco>
I usually search the logs using a text editor

[02:09:58.0619] <jonco>
you probably want to find the final log from shutdown and see what has references to the script error object

[02:10:12.0744] <jonco>
(and where these references come from)

[02:10:29.0483] <jonco>
it probably is the console holding onto them given the comment

[02:11:41.0925] <evilpie>
weirdly enough the log files for 5171 don't seem to contain any reference to scripterror

[02:13:55.0615] <jonco>
hmm

[02:25:59.0348] <jonco>
so nsScriptErrorWithStack is cycle collected, and implements nsIConsoleMessage, but nsConsoleService has a list of these and is not cycle collected

[02:26:28.0136] <jonco>
that sounds like a problem

[02:27:20.0621] <jonco>
smaug: should nsConsoleService be cycle collected in that case? ^

[02:27:49.0163] <smaug>
it should clear messages, no?

[02:28:14.0225] <smaug>
and it is threadsafe and what not

[02:29:19.0525] <jonco>
I don't know :)

[02:29:30.0323] <jonco>
when does that happen?

[02:31:29.0275] <smaug>
looking

[02:31:39.0011] <smaug>
but anyhow, it is a service, so kept alive until shutdown

[02:34:14.0259] <jonco>
ok, well it shouldn't be able to leak things after that them

[02:34:21.0289] <jonco>
 * ok, well it shouldn't be able to leak things after that then

[02:34:54.0585] <smaug>
looks like there are methods like https://searchfox.org/mozilla-central/source/xpcom/base/nsConsoleService.cpp#90,119

[02:35:00.0732] <smaug>
and then stuff like https://searchfox.org/mozilla-central/source/xpcom/base/nsConsoleService.cpp#378,392,400-401

[02:36:06.0463] <smaug>
gLoggingBuffered seems to be always true

[02:36:55.0647] <jonco>
ah ClearMessagesForWindowID looks interesting

[02:37:29.0466] <jonco>
evilpie: if the stack and exception come from two different windows, maybe we don't end up clearing the message?

[02:37:53.0304] <evilpie>
but we look at the windowid in the scripterror right?

[02:39:26.0489] <jonco>
is it possible for the stack and exception to have different window ids?  just an idea

[02:40:27.0846] <evilpie>
Probably? I honestly didn't fully understand the story around globals for stacks

[02:42:17.0039] <jonco>
nor do I

[03:54:39.0737] <smaug>
I wonder if nsGlobalWindowInner should own the consolemessages, and then they could be CCed

[03:54:49.0773] <smaug>
and the service had just weak pointer to them

[04:10:58.0264] <evilpie>
smaug: do we know if this is the actual problem? We have a reproducible test case. I just don't have the experience to actually find the actual reason for the leak

[04:11:22.0861] <smaug>
I don't know if  there is an actual problem

[04:11:27.0693] <smaug>
I don't have the context here 

[04:11:37.0178] <smaug>
but sounds like you have some testcase which is leaking

[04:11:51.0312] <smaug>
is it a shutdown leak or runtime leak?

[04:21:40.0365] <evilpie>
smaug: ok context this is about https://bugzilla.mozilla.org/show_bug.cgi?id=1595046 adding an exception value that can be an arbitrary content JS object to nsScriptErrorWithStack

[04:21:54.0194] <evilpie>
I get a shutdown leak when running browser/components/contextualidentity/test/browser/browser_serviceworkers.js

[04:22:53.0359] <evilpie>
 0:23.98 ERROR TEST-UNEXPECTED-FAIL | browser/components/contextualidentity/test/browser/browser_serviceworkers.js | leaked 6 window(s) until shutdown [url = https://example.com/browser/browser/components/contextualidentity/test/browser/serviceworker.html]
 0:23.98 INFO TEST-INFO | browser/components/contextualidentity/test/browser/browser_serviceworkers.js | windows(s) leaked: [pid = 21358] [serial = 8], [pid = 21358] [serial = 13], [pid = 21358] [serial = 10], [pid = 21358] [serial = 7], [pid = 21358] [serial = 11], [pid = 21358] [serial = 5]


[04:23:09.0211] <smaug>
is the leak a shutdown leak or runtime leak?

[04:23:20.0358] <smaug>
shutdown leak is something which shows up when you close the browser

[04:24:01.0729] <smaug>
leaked windows can be runtime leaks, staying alive after the relevant page has been unloaded, but getting released during process shutdown

[04:24:32.0457] <smaug>
emilio could change the title of https://crisal.io/words/2019/11/13/shutdown-leak-hunting.html :p

[04:25:10.0138] <emilio>
smaug: sure, suggested title?

[04:25:27.0023] <smaug>
runtime leak hunting ?

[04:26:18.0146] <emilio>
Well yeah, I guess it's a leak-until-shutdown, not a shutdown-leak

[04:26:20.0573] <emilio>
That wfm

[04:27:48.0240] <smaug>
or would some other naming be less confusing?

[04:28:19.0677] <smaug>
(btw, that blog was great )

[04:28:34.0419] <smaug>
 * (btw, that blog  post was great )

[04:30:21.0623] <emilio>
thanks! I wrote it mostly so I don't have to re-learn it in the future, plus if it helps others, that's also great :)

[04:31:03.0194] <evilpie>
I don't really have rr setup

[04:31:40.0659] <evilpie>
I am still confused why scripterror doesn't seem to show up in the logs at all

[04:31:52.0054] <smaug>
XPCOM_MEM_LEAK_LOG env variable tells whether you have shutdown leaks

[04:32:05.0762] <smaug>
(on debug builds at least)

[04:34:04.0856] <evilpie>
well I have this https://paste.mozilla.org/rmKBin0M

[04:49:10.0902] <emilio>
evilpie: what does the previous gc log say for `0x33deb4340060`?

[04:49:22.0372] <emilio>
evilpie: (that may be the JS wrapper for the window)

[04:50:37.0329] <emilio>
/me has to go eat, bbl

[04:53:46.0203] <evilpie>
I accidentally deleted the logs already, but I have a similar case in the new logs: https://paste.mozilla.org/QurSVEwU

[05:00:09.0469] <smaug>
as emilio mentioned, gc logs may reveal something

[05:46:05.0591] <evilpie>
oh GC log

[05:51:28.0598] <evilpie>
smaug: emilio like this https://paste.mozilla.org/weryOY2X ?

[05:51:43.0885] <evilpie>
I can also zip up these logs and you can have a look yourself

[06:47:35.0527] <smaug>
jimb: still about https://bugzilla.mozilla.org/show_bug.cgi?id=1501608#c12

[06:47:39.0409] <smaug>
or again

[06:50:59.0502] <smaug>
Hmm, perhaps I want different question. Is it possible that that DebuggerFrame isn't traced black from CC point of view

[06:51:15.0693] <smaug>
even if it should be

[06:52:05.0867] <smaug>
or perhaps jonco knows

[07:02:08.0028] <jonco>
smaug: do you mean, are we missing an ExposeToActiveJS call for DebuggerFrame somewhere?

[07:02:25.0778] <smaug>
thinking...

[07:02:28.0513] <smaug>
(a meeting now)

[07:02:34.0004] <jonco>
it's possible but I don't think that patch adds any more places where that would be needed

[07:02:54.0551] <smaug>
but in general would just like to understand the memory management model of the debugger stuff

[07:04:06.0989] <smaug>
since the bug seems to be that something in debugger side doesn't mark stuff black

[07:04:28.0660] <jimb>
smaug: I talk about that at length in my Mozilla Hacks blog post, read that first.

[07:06:14.0778] <jimb>
There's supposed to be as little magic as possible now. But, ask loganfsmyth , he's the owner of Debugger now, much more reasonable fellow than I ever was

[07:06:25.0810] <smaug>
ha

[07:06:38.0087] <smaug>
but ok, thanks, I'll ask, and read code through 

[07:59:31.0514] <mccr8>
evilpie: that debugger stuff is a little leak prone. The basic problem is that you have "chrome C++" that holds onto content, so nuking doesn't work.

[08:00:18.0087] <mccr8>
Some of the console objects have to be threadsafe so they can't be CCed, which is potentially a problem. I think clearing the console is supposed to deal with that.

[08:00:28.0937] <mccr8>
I fixed some console ish leak recently. I should look up what the fix for that was.

[08:01:19.0137] <evilpie>
mccr8: are you interested in the log files?

[08:02:54.0544] <mccr8>
evilpie: I don't really have time to look at log files. What is leaking? Some specific tests or a bunch of things?

[08:04:24.0228] <evilpie>
don't think it's any specific test: https://treeherder.mozilla.org/#/jobs?repo=try&resultStatus=testfailed%2Cbusted%2Cexception&classifiedState=unclassified&revision=631b833fa05fadec279178143c384fe279ba96fa 

[08:05:18.0065] <evilpie>
I can reproduce browser/components/contextualidentity/test/browser/browser_serviceworkers.js locally

[08:05:49.0032] <mccr8>
Hmm I think bug 1607569 is the console leak I was looking at recently.

[08:05:50.0385] <botzilla>
https://bugzil.la/1607569 — ASSIGNED (nchevobbe) — Perma Tier 2 Fission devtools/client/webconsole leakcheck | tab 30848 bytes leaked (AtomTablesReporter, BackstagePass, ChannelCountReporter, CondVar, DMDReporter, ...)

[08:06:33.0673] <mccr8>
evilpie: it is a bit strange, because your patch shouldn't be adding any new global edges that the existing stack field doesn't already keep alive.

[08:06:55.0859] <mccr8>
and we don't do any fancy cleanup for those other JS fields.

[08:08:40.0071] <evilpie>
I think the AsyncErrorReporter case is new

[08:10:08.0708] <evilpie>
before that only had the stack for worklets? now we have that reference to the exception object for promise rejections

[08:10:25.0924] <evilpie>
I am going to test if removing that fixes the leak

[08:11:29.0198] <mccr8>
evilpie: Hmm yeah could be. It is a runnable so it has a finite lifetime, but you don't have a perma leak. Maybe a runnable gets queued up, then we close the page and the runnable doesn't go away fast enough?

[08:12:13.0377] <evilpie>
Well that sounds interesting, Especially considering promise rejections might only be dispatch at the end of  a micro task

[08:13:09.0551] <mccr8>
I would have figured that we spin the event loop etc enough to clean it up, but maybe not? You could try logging the dtor for that runnable and see where it happens.

[08:13:44.0403] <mccr8>
evilpie: Promises have had a long history of taking a while to clean up, so that seems like a possible issue.

[08:14:43.0129] <tcampbell>
jonco: is this dead code? https://searchfox.org/mozilla-central/source/js/src/jit/IonCode.h#627-631

[08:15:31.0613] <tcampbell>
You seem to have recently touched a similar looking signature in https://bugzilla.mozilla.org/show_bug.cgi?id=1615082 but I don't understand where the callers are

[08:15:33.0316] <jonco>
tcampbell: yeah, looks dead

[08:16:07.0326] <jonco>
I didn't realise we ever had VMFunctions as weak map keys... seems strange

[08:17:46.0629] <tcampbell>
oh wow.. that is from 2011 when there was an IonCompartment

[08:17:59.0715] <tcampbell>
now the VMFunction trampolines all hang off the runtime itself

[08:19:38.0093] <jonco>
that predates me then :)

[08:24:47.0869] <sfink>
we had WeakMaps back then?

[08:32:18.0379] <mccr8>
The Andreas prototype landing of WeakMap may have happened then. :)

[08:33:26.0592] <mccr8>
Yeah, April 2011. https://bugzilla.mozilla.org/show_bug.cgi?id=547941#c96

[08:34:06.0206] <mccr8>
One of the first things I did at Mozilla was making weak maps work with the CC.

[08:35:28.0496] <Ms2ger [~half-time dedication]>
Old man :)

[08:35:30.0641] <evilpie>
mccr8: The testcase that leaks locally doesn't leak when removing the exception value from AsyncErrorReporter

[08:36:21.0050] <mccr8>
evilpie: ok. So, the runnable must be not going away fast enough. I'm not sure what a good fix for that is.

[08:36:36.0401] <mccr8>
hard to make a weak reference to a random JS value.

[08:37:00.0223] <mccr8>
The window could keep track of all of the error reporters and clear them when it gets closed, maybe.

[08:37:32.0654] <mccr8>
Or the runnable could listen for window close events and clear out the reference...

[08:38:52.0043] <evilpie>
so like this: https://searchfox.org/mozilla-central/source/xpcom/base/nsConsoleService.cpp#522-529

[08:40:45.0865] <mccr8>
evilpie: yes. Pretty ugly but I'm not sure of a better way to deal with it.

[08:40:58.0759] <evilpie>
thanks. I will try implementing this

[08:41:48.0088] <mccr8>
If you know it is some kind of nsISupportsWeakRef thing then you could make it a weak reference and add null checks but I don't know exactly how general you are trying to be.

[08:44:35.0067] <evilpie>
mccr8: it can be literally any object thrown in JS code

[08:47:06.0085] <jonco>
sfink: ping

[08:49:35.0230] <evilpie>
mccr8: is the observer service even thread safe?

[08:50:48.0179] <mccr8>
evilpie: looks like no. But at least for the purposes of passing tests, you only care about main thread uses, because only the main thread has windows.

[08:51:17.0179] <mccr8>
I dunno if keeping a worker alive for a little bit longer is bad or not.

[08:51:54.0687] <evilpie>
in the future we want to also support rejected promises in worker threads, but that can wait a bit longer

[08:52:14.0796] <evilpie>
before this release that didn't even log into the console at all

[08:53:31.0515] <mccr8>
evilpie: Well, you'd need a different mechanism for workers anyways. "inner-window-destroyed" is only going to happen for main thread runnables.

[08:53:47.0545] <mccr8>
so just do some kind of main thread check 

[08:54:26.0256] <evilpie>
yeah no problem

[09:07:05.0067] <RyanVM>
Waldo: ping

[09:08:05.0628] <evilpie>
mccr8: do I need to call RemoveObserver or does that happen automatically?

[09:08:34.0381] <RyanVM>
anba: or ping to you ^ :)

[09:10:15.0546] <mccr8>
evilpie: Hmm. I'm not sure. It probably either needs to be a weak observer or you need to remove it. I don't remember what the default is. Just removing it is probably easier if it doesn't already support weak refs.

[09:40:41.0558] <tcampbell>
https://github.com/mozilla/rr/issues/2205

[09:53:57.0654] <evilpie>
mccr8: nice. it seems work

[09:54:31.0928] <mccr8>
Great

[09:56:02.0095] <evilpie>
 * mccr8: nice. it seems to work

[10:22:02.0811] <Waldo>
RyanVM: pong

[10:22:09.0059] <iain>
When we do a nursery collection, everything still alive is tenured, right? Objects don't stick around in the nursery for multiple collections?

[10:22:53.0126] <sfink>
correct

[10:23:59.0601] <sfink>
jonco tried implementing semi-spaces ones. It didn't do any better in testing, so he stuck to the current simpler approach.

[10:24:10.0034] <sfink>
 * jonco tried implementing semi-spaces once. It didn't do any better in testing, so he stuck to the current simpler approach.

[10:29:19.0417] <iain>
The fxr people are asking me about whether there are better ways to avoid tenuring per-frame garbage

[10:29:57.0333] <iain>
sfink: Are you on slack? You might have better answers than I do

[10:32:39.0162] <mccr8>
Are they doing a minor collection in every frame?

[10:34:36.0176] <RyanVM>
Waldo: hey, just trying to fully understand the impact of bug 1633331 on affected users

[10:34:39.0700] <botzilla>
https://bugzil.la/1633331 — RESOLVED (anba) — Update to tzdata2020a

[10:34:47.0517] <RyanVM>
Waldo: what's going to break during that 1 week period?

[10:34:52.0751] <iain>
It looks like they're letting gc happen naturally and getting a minor gc every 7 frames or so

[10:40:31.0757] <mccr8>
I had the vague impression that request animation frame was supposed to help for this sort of thing.

[10:40:42.0274] <mccr8>
The GC at least used to be aware of it.

[10:40:50.0380] <iain>
They are using request animation frame

[10:41:21.0609] <sfink>
I'm back now. What slack channel?

[10:41:32.0625] <iain>
fxr-eng

[10:41:34.0876] <Waldo>
RyanVM: Imagine that at the beginning of February Congress decided that the DST change that happened on March 8, was instead going to happen on March 1.  That's the situation in Morocco starting May 24 for a week.

[10:41:41.0215] <sfink>
and why would anyone discuss something like this on slack? </grumpy>

[10:44:26.0438] <Waldo>
This is when we need to put that Internet shaming-mob culture to good use.

[10:45:29.0165] <iain>
The fxr stuff might involve more NDAs for fancy unreleased devices

[10:46:26.0404] <Waldo>
"better ways to avoid tenuring per-frame garbage" doesn't have anything to do with unreleased devices, tho.

[10:55:41.0471] <smaug>
When a string is compiled to a function, we create some JSScript for the relevant function, right?

[10:55:53.0506] <smaug>
/me is asking silly questions while browsing through the code

[10:57:25.0533] <smaug>
I guess https://searchfox.org/mozilla-central/source/js/src/frontend/BytecodeCompiler.cpp#713

[11:01:23.0364] <tcampbell>
Waldo: I'm getting visibility errors from `JSAtom` when I stop unified builds. I see that some fwd  decls are `JS_PUBLIC_API` but the actual type is not marked `JS_PUBLIC_API`... do the fwd decls in `js/public` actually need the annotation?

[11:02:17.0466] <tcampbell>
(the public api only uses incomplete types)

[11:06:33.0738] <Waldo>
tcampbell: The API macros' necessity is not a strong suit of mine.  I _think_ we need it on the class when there's some member function that must be used as if `JS_PUBLIC_API`.  I'm not sure whether any such member functions are so used.  I would _guess_ the annotation could be removed from everything, but it is entirely possible all that work would be a mistake if attempted.  Some embedder is going to have a more knowledgeable answer to the question than I am, sadly.  ☹︎

[11:07:33.0827] <Waldo>
FWIW I think I have roughly concluded that other than on handle/rooted/heap template classes defined wholly inline, it is mistake to have to annotate any class as public API right now.

[11:07:46.0755] <tcampbell>
https://docs.microsoft.com/en-us/cpp/cpp/using-dllimport-and-dllexport-in-cpp-classes?view=vs-2019#_pluslang_using_dllimport_and_dllexport_in_c2b2bdllexportclasses

[11:07:52.0227] <sfink>
I think the last time around, we added it to everything because it was causing some compiler to discard necessary stuff.

[11:07:58.0697] <Waldo>
My confidence in that assessment, however, is maybe about 60% or something.

[11:08:21.0198] <sfink>
ptomato: ^

[11:08:57.0348] <RyanVM>
Waldo: yeah, I get that part. What I don't fully understand is what the real-world implications of that will be for those users. If it's wrong for that week, what affect will that have on their usage?

[11:09:58.0343] <RyanVM>
(I'm trying to decide if this needs to be an RC respin driver or not)

[11:10:01.0195] <tcampbell>
at least for the windows variant, it looks like it makes all members exports (if they are not defined inline in .h)

[11:10:15.0716] <Waldo>
RyanVM: Speaking from my deep well of experience with Moroccan (and maybe Western Saharan?  I don't know how any of the region's politics map onto time zone identifiers), uh...yeah, I haven't the slightest idea at all.

[11:10:33.0954] <RyanVM>
will it cause issues in the browser for things like cert expiration?

[11:11:39.0277] <Waldo>
RyanVM: Someone who does cert stuff is more likely to know if DST changes affect certs, I think.  My _guess_ is date/time formatting would be wrong for dates within that week, but I really don't know that it's limited to just that, in any way at all.

[11:12:52.0563] <RyanVM>
ok, thanks

[11:13:14.0953] <Waldo>
Time zones suck.  That's all that really can be said with confidence.

[11:13:31.0573] <tcampbell>
ah, will reread https://bugzilla.mozilla.org/show_bug.cgi?id=1426865

[11:13:47.0638] <RyanVM>
Waldo: RC respins are cheaper than dot releases, so I guess better safe than sorry :\

[11:14:28.0479] <ptomato>
sfink: IIRC, the annotation had to be added to everything consistently because some compilers will have different behaviour depending on whether the first declaration they see is annotated or not

[11:15:04.0635] <Waldo>
Yeah, the question is whether it's needed on _any_ of them, here.  Agreed for sure that if one needs it, they all do.

[11:15:49.0279] <sfink>
I think there was also something about the vtable? ctor+dtor? getting discarded by the linker if not marked public?

[11:16:30.0674] <Waldo>
RyanVM: That would have been my inclination, yeah.  Updating tzdata is pretty mechanical without human judgment that could be fallible to ordinary levels coming into play, so as far as late changes go, that's one I'd take more than most.

[11:17:07.0177] <RyanVM>
thanks

[11:22:31.0599] <sfink>
smaug: discussion of GC timing & scheduling for FXR on slack in #fxr-eng. I don't know if do slack discussions or not.

[11:22:57.0359] <smaug>
rarely :)

[11:24:00.0518] <sfink>
ok, I did the "invite" thing which appears to secretly mean "force add" 

[11:40:33.0814] <Waldo>
sfink: Oh right, the GC template thingies want to have the stuff passed into them be `JS_PUBLIC_API`.  Stab.  Maybe I will return at some point to not doing those by templates again, with corresponding manual instantiation required...

[11:45:55.0790] <tcampbell>
my fix for now will just be to add a few more JS_PUBLIC_API 

[12:11:42.0863] <iain>
confession: Just put up a patch stack for review with "Turn new regexp engine on by default in Nightly" sitting on top. The obslog for that patch goes back to October.

[12:11:45.0149] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[12:24:56.0835] <tcampbell>
iain: is the intent to do after merge?

[12:25:34.0185] <tcampbell>
probably should do an intent to ship email if new features are enabled at same time

[12:26:16.0499] <iain>
tcampbell: Yeah, holding off until after merge

[12:27:23.0427] <iain>
Good point on intent to ship

[12:27:31.0258] <iain>
I will go look into how that all works

[12:29:07.0580] <tcampbell>
https://wiki.mozilla.org/ExposureGuidelines

[13:34:58.0074] <tcampbell>
iain: yeah, that extra patch is because git does not have `copy` and cinnabar only can infer it from exact file changes

[13:36:42.0979] <iain>
Yeah, makes sense

[14:49:08.0181] <evilpie>
mccr8: seems like my patch making the test green was a fluke. I can still reproduce the test failure as long as mException in AsyncErrorReporter is set

[14:51:28.0630] <mccr8>
evilpie: can I see your patch?

[14:53:03.0380] <evilpie>
https://paste.mozilla.org/CWWZ7nmk

[15:05:38.0153] <evilpie>
mccr8: ^

[15:05:50.0646] <evilpie>
actually that looks kinda weird

[15:07:05.0031] <evilpie>
https://phabricator.services.mozilla.com/D73150

[15:09:35.0616] <mccr8>
evilpie: probably not relevant to your issue, but you need to remove the strong reference from the observer service before the dtor, or you'll just leak the runnable until obserer service shutdown

[15:11:00.0737] <mccr8>
probably want to remove it in Run() and also if the observer thing fires

[15:12:27.0168] <mccr8>
evilpie: should unlink set hasexception to false?

[15:12:48.0615] <mccr8>
I'd consider bundling those two things into some kind of ClearException() method.

[15:13:00.0194] <evilpie>
yeah sounds like  a good idea

[15:13:08.0678] <evilpie>
but only mException is relevant for the leaks

[15:15:13.0378] <mccr8>
evilpie: can you have an exception but no window? Maybe assert that you aren't on the main thread if you have no window in that case?

[15:15:30.0689] <mccr8>
oh you already know you are on the main thread. But still, that check is concerning.

[15:18:37.0364] <evilpie>
yes I don't think we need it

[15:21:22.0315] <evilpie>
this is kinda weird: https://paste.mozilla.org/oBQdnUkg

[15:21:40.0909] <evilpie>
ARRG this paste is terrible

[15:21:46.0258] <mccr8>
evilpie: You could see if not doing the mException.init(aCx, *aException); only in the windowID case helps

[15:22:04.0462] <evilpie>
we always have a windowID

[15:22:34.0596] <evilpie>
who want's non-monospace fonts

[15:23:40.0496] <evilpie>
seems like we are creating AsyncErrorReporter for windows that are already destroyed?

[15:25:03.0666] <mccr8>
Weird. That would certainly explain why your patch didn't fix that leak...

[15:25:52.0295] <sfink>
`mach pastebin --highlighter=console` works, though I agree the default is wrong

[15:29:45.0365] <mccr8>
evilpie: Maybe get a stack of when you are creating a reporter for a destroyed window?

[15:30:01.0028] <mccr8>
This is sort of a DOM question, but I wouldn't think we'd be doing much at that point.

[15:30:25.0242] <evilpie>
how can I check if a window is destroyed?

[15:31:27.0524] <evilpie>
maybe I can check IsDying

[15:36:19.0890] <evilpie>
oh wow that worked

[15:37:05.0957] <evilpie>
I think I could fix my original patch with those ~one line check as well:  https://paste.mozilla.org/yD0LRR2c


[15:37:31.0465] <evilpie>
not sure if we really need the inner-window-destroyed stuff

[15:38:13.0717] <mccr8>
Yeah, you might as well check.

[15:38:30.0956] <mccr8>
It just depends on how long those runnables last.

[15:39:50.0841] <evilpie>
You are right, but it usually seems like we "Run" them pretty quickly. So maybe it would be enough to null out mException so it's not kept alive that way?

[15:40:21.0027] <evilpie>
the actually destruction seems to take a long while

[15:47:44.0004] <mccr8>
I didn't think about that. Yeah, I'd clear it out in Run if you can.

[15:54:56.0310] <evilpie>
Ok. I am going to push this to try now. I guess we will see tomorrow. Bye

[16:30:56.0157] <mccr8>
Good luck

[16:32:18.0515] <Waldo>
we're all counting on you


2020-04-30
[01:57:40.0110] <nbp>
iain: Great work, I hope Bug 1634135 will go smoothly ;)

[01:57:41.0568] <botzilla>
https://bugzil.la/1634135 — NEW (iain) — Enable new regexp engine in Nightly

[05:41:11.0826] <decoder>
iain: is it expected that I cant build with this enabled yet?

[05:45:45.0387] <evilpie>
decoder: I think you might need at least the first patch in bug 1634135 

[05:47:14.0833] <decoder>
evilpie: ah thanks i will wait for that bug to land then :)

[05:58:18.0203] <jandem>
evilpie: thanks for not giving up on that pass-exception-value bug, I'm pretty excited about the console improvements

[06:50:40.0494] <iain>
decoder: evilpie is correct

[06:53:17.0929] <iain>
I think it should build with just the first and last patches of the stack

[06:53:57.0606] <iain>
Although there's at least one correctness fix left in the stack

[07:27:10.0141] <tcampbell>
Any objects to adding a `--disable-unified-js-src` flag to enable non-unified builds?

[07:27:35.0009] <decoder>
tcampbell: I fully support having that!

[07:27:58.0235] <tcampbell>
Would remove the hack from autospider and instead directly use `FILES_PER_UNIFIED_FILE = 1` which is supported by build system these days

[07:28:12.0502] <Ms2ger [~half-time dedication]>
Maybe drop the `-src`; other flags tend to just use `-js`

[07:28:35.0780] <Ms2ger [~half-time dedication]>
🚲️🏛︎

[07:28:40.0169] <tcampbell>
I just worried that "unified-js" might be misinterpreted

[07:30:13.0415] <decoder>
I wonder if with `FILES_PER_UNIFIED_FILE=1` you can do `UNIFIED_SOURCES["file.cpp"].flags += ... ` like we do with `SOURCES` already for fuzzing.

[07:30:26.0228] <decoder>
to instrument only selected files with additional compiler flags

[07:31:26.0344] <tcampbell>
you mean so we could leave those files in the normal UNIFIED_SOURCES list?

[07:49:14.0728] <sfink>
tcampbell: uh, there's some history here that you might want to be aware of. See bug 1442647. Or if you want to hop on zoom, I can give you an opinionated summary.

[07:49:15.0824] <botzilla>
https://bugzil.la/1442647 — ASSIGNED (jorendorff) — Support non-unified builds via configure

[07:50:43.0044] <sfink>
and for the record, FILES_PER_UNIFIED_FILE=1 has worked all along as far as I know. Or at least, it worked at the time I implemented the horrible thing in autospider.py.

[07:51:52.0737] <sfink>
I can't remember exactly why I couldn't use it -- it was something like it was only reporting error messages in the unified.cpp files and omitting the actual source file names? Or maybe it reported both, but my editor's warning scanner latched onto the wrong one? I forget. I don't think it's a problem any longer.

[07:53:50.0527] <tcampbell>
sure. would take a summary

[07:55:01.0798] <sfink>
hm. Though that's going to require I figure out what's up with my zoom.

[08:21:45.0551] <mgaudet>
confession: Today I learned that if a base class constructor returns an object, that's the value returned by `new C`, not a newly created object. Yet, if a derived class constructor does the same, the same is not true. (Haven't -quite- pieced together all the spec text yet); this is the root of how fields can get stamped into random objects. 

[08:21:49.0472] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[08:25:36.0275] <jorendorff>
"Any attempt to continue execution after a noncontinuable exception causes the `EXCEPTION_NONCONTINUABLE_EXCEPTION` exception."

[08:26:37.0835] <Ms2ger [~half-time dedication]>
wat

[09:20:42.0153] <tcampbell>
sfink: so with a handful of extra files, I can seem to use `mach build` from pkg tarballs. We could also ship a default mozconfig for embedding that does things like disables jemalloc by default, and other footguns

[09:21:31.0813] <tcampbell>
The one wrinkle is that `mach` tries to slurp in a lot of commands by default, but they are all in one place: https://searchfox.org/mozilla-central/source/build/mach_bootstrap.py#38-84

[09:23:24.0559] <tcampbell>
I think the install rule would need to be tweaked to be useful, but there does seem like a reasonable pathway for pkg builds to use mach workflow

[10:23:16.0095] <ptomato>
I'm in favour of that for embedders building spidermonkey for their own development purposes, but downstream distro builds are not going to be happy if they have to use mach

[10:44:56.0841] <sfink>
tcampbell: nice! May as well throw those files in. But we don't need to modify `mach_bootstrap.py`, we just need to figure out how to fall into the "sparse or nonexistent repo checkout" case, and it'll ignore missing command files.

[10:45:44.0185] <sfink>
ptomato: that's what we've been assuming for a while, but why? Especially now that configure is now mostly running a Python script already, rather than actual configure shell goop. mach is just a different python script.

[10:46:36.0897] <sfink>
it seems like every project uses a different build system these days, so don't the distros have to deal with this sort of thing already?

[10:47:46.0955] <ptomato>
specifically, mach downloading a bunch of stuff, is going to be a dealbreaker for distros, because it makes their builds non-reproducible

[10:48:08.0376] <sfink>
oh, yeah, we definitely don't want to impose `mach bootstrap` on them

[10:48:17.0461] <sfink>
but if the build tools are available, that's unnecessary

[10:48:33.0261] <ptomato>
oh, ok

[10:48:38.0486] <sfink>
`mach bootstrap` is for forcing our versions of compilers and things, and distros very much want to force theirs

[12:02:31.0372] <tcampbell>
sfink: so I was playing with the llvm find-all-symbols tool.. about 120 of our headers are in almost every single spidermonkey translation-unit

[12:03:38.0618] <tcampbell>
everything includes everything!

[12:12:29.0581] <sfink>
we have that many headers?

[12:12:32.0437] <sfink>
/me counts

[12:12:41.0706] <sfink>
oh yes, we have that many headers

[12:12:54.0245] <sfink>
897 by this count

[12:13:35.0035] <tcampbell>
250 headers are using in more than 2/3rd of translation units

[12:13:42.0904] <tcampbell>
 * 250 headers are used in more than 2/3rd of translation units

[12:13:58.0814] <sfink>
you should ask jonco what he ran into with iwyu. He's the last I remember fighting with it to get something useful.

[12:14:36.0529] <tcampbell>
I attempted it, but ran into libc linker issues that I didn't want to think about

[12:14:46.0612] <tcampbell>
GLIBC_XX version nonsense

[12:16:12.0740] <sfink>
bug 634839 is one of several past attempts

[12:16:20.0107] <botzilla>
https://bugzil.la/634839 — RESOLVED (njn) — Try "include-what-you-use" on SpiderMonkey

[12:41:16.0892] <Waldo>
> <@mgaudet:mozilla.org> confession: Today I learned that if a base class constructor returns an object, that's the value returned by `new C`, not a newly created object. Yet, if a derived class constructor does the same, the same is not true. (Haven't -quite- pieced together all the spec text yet); this is the root of how fields can get stamped into random objects.

That...doesn't sound right to me?  Or look right, at least gauging by our implementation?

```lang=js
[jwalden@find-waldo-now after]$ js/src/dbg/js/src/js
js> var obj = {}
js> class X { constructor() { return obj; } };
js> new X() === obj
true
js> class D extends X {}
js> new D() === obj
true
js> class E extends X { constructor() { super(); return obj2; } };
js> var obj2 = {};
js> new E() === obj2
true
```

[12:41:51.0901] <mgaudet>
Hrm. 

[12:42:05.0253] <Waldo>
Fields can get stamped into random objects because base class constructors can return any old object they want.

[12:42:31.0690] <mgaudet>
So, lemme boil my case down a bit to show what I was seeing (I got distracted and never did find the spec text that describes this -- lack of vocabulary means finding it is hard) 

[12:45:30.0672] <mgaudet>
Waldo: Haha -- nevermind; was a bug in my test case;

[12:45:58.0660] <mgaudet>
```
class K {
  constructor() {
    this.x = 10;
  }
};
class J extends K {
  constructor(o) {
    super();
    return o;
  }
}

var jobj = {};
var jalloc = new J(jobj); // forgot to pass jobj here -- which I expected to be an error, but of course, it's not
print(jalloc === jobj);
print(jalloc.x);
````

[12:48:34.0779] <mgaudet>
The test case that prompted me to do this investigation was one @anba sent (which clarified so much) showing how fields get added to arbitrary objects (spoiler warning for jorendorff , as I know you'd been planning to look at this): 

```
class C extends class {
  constructor(o) { return o; }
} {
  #a = 1;
  static get(o) { return o.#a; }
};
var obj = {};
new C(obj);
print(C.get(obj)); // Prints "1"
```

[12:48:50.0416] <jorendorff>
I had actually completely forgotten about it

[12:49:00.0348] <mgaudet>
:D 

[12:49:38.0487] <mgaudet>
Well, there's the example of how it happens: And I learned about the magic of constructor return values

[12:53:43.0882] <evilpie>
Arg rustglue :/

[12:54:10.0138] <evilpie>
can't we just build that jsglue.cpp by default

[14:15:46.0325] <mgaudet>
confession: Feeling brave apparently: running apt-get upgrade without having any semblance of a snapshot of the working state of my system. 

[14:15:48.0818] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:27:56.0588] <evilpie>
Anyone else seen this when trying to run jstests.py? `ImportError: No module named mozversioncontrol`

[14:29:03.0989] <iain>
evilpie: Try rerunning autoconf

[14:38:42.0827] <evilpie>
iain: didn't help

[14:40:48.0730] <evilpie>
unrelated question: do you use IONFLAGS=dump-mir-expr?

[14:45:25.0101] <iain>
evilpie: Weird, I had a similar problem and rerunning autoconf worked

[14:45:37.0229] <iain>
Maybe I also deleted my object directory and started from scratch

[14:45:48.0352] <iain>
I don't think I've ever used dump-mir-expr

[14:46:14.0666] <evilpie>
I even re-ran `mach bootstrap`

[14:46:45.0579] <sfink>
if anything, I would guess that it's wpt that wants that in the first place. Does it happen if you pass `non262` on the command line?

[14:46:55.0736] <sfink>
or `test262`

[14:47:10.0928] <sfink>
(if you give it anything on the command line, it'll skip wpt)

[14:48:13.0523] <sfink>
alternatively, you can use `mach jstests`. That'll run in the virtualenv that would have mozversioncontrol.

[14:48:20.0232] <evilpie>
yes seems related to wpt: https://paste.mozilla.org/4Vivf6V0/raw

[14:48:37.0449] <evilpie>
works with `non262` as dir

[15:16:12.0432] <Waldo>
sfink: Hrm, so I'm thinking -- instead of literally just `JS::CopyArrayBuffer(cx, ab)`, maybe it's worth having `JS::CopyArrayBuffer(cx, ab, offset, count)`, or perhaps in addition to the "just copy it" version.

[15:16:43.0657] <Waldo>
sfink: For now I'll probably just do the former, but I'm guessing someone's going to want the latter at some point as well.

[15:26:22.0839] <jorendorff>
"you are gonna need it"

[15:34:51.0212] <Waldo>
sfink: Also I think I am pretty concerned about doing what you suggest with a `create` templated helper function -- because if I do it that way, an `AutoSetNewObjectMetadata` is going to be destructed _before_ the new ArrayBuffer's contents are initialized.  And while that _could_ be safe, if the _embedding-provided_ object metadata hook doesn't inspect the contents of the ArrayBuffer, I think this is an assumption I would really prefer not to rely on.

[15:42:58.0166] <soniasingla>
Hi jorendorff ping ! I need some help in setting up Spidermonkey. I am following: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Build_Documentation#Test

[15:43:18.0775] <soniasingla>
And i have done upto "Developer (debug) build"

[15:43:31.0995] <soniasingla>
I am confused where to follow next :/ 

[15:45:17.0766] <jdm>
soniasingla: you should have a build_DBG.OBJ directory in your repository now, I believe?

[15:45:36.0192] <jdm>
possibly you've already `cd`ed into it

[15:46:10.0989] <jdm>
there should be a `dist/bin/js` inside of it, according to those docs

[15:46:22.0046] <jdm>
and that's a JS interpreter that you can play with

[15:47:55.0894] <soniasingla>
hey jdm thanks for the response, just want to make sure `js` is file, right?

[15:48:36.0515] <soniasingla>
and if there are any further steps, i need to follow?

[15:48:49.0134] <iain>
`js` is the name of the JS shell executable, and it lives in `dist/bin`

[15:48:49.0926] <soniasingla>
The documentation is very confusing :/

[15:51:54.0558] <iain>
confession: Spent all day staring at a 33% performance regression in a regexp microbenchmark, narrowing it down to an 11-instruction hot loop with no meaningful differences between the old and new engines, only to discover that the "regression" went away if I added 4 bytes of nop padding to the regexp prologue

[15:51:58.0064] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[15:52:18.0544] <iain>
Computers are great

[15:52:22.0360] <evilpie>
 soniasingla have you looked at https://firefox-source-docs.mozilla.org/js/build.html at all? It's a more modern way of building / running

[15:53:10.0468] <evilpie>
iain: haha I guess JIT code alignment can be important

[15:54:18.0148] <soniasingla>
> <@evilpie:mozilla.org> soniasingla have you looked at https://firefox-source-docs.mozilla.org/js/build.html at all? It's a more modern way of building / running

thanks, i have added some files using the previous documentation, will they effect?

[15:55:12.0955] <evilpie>
no. This will create a new obj directory at the root of your repository

[15:55:54.0441] <soniasingla>
oh perfect ! Thanks evilpie (nice username :))

[16:47:14.0533] <sfink>
> <@waldo:mozilla.org> sfink: Also I think I am pretty concerned about doing what you suggest with a `create` templated helper function -- because if I do it that way, an `AutoSetNewObjectMetadata` is going to be destructed _before_ the new ArrayBuffer's contents are initialized.  And while that _could_ be safe, if the _embedding-provided_ object metadata hook doesn't inspect the contents of the ArrayBuffer, I think this is an assumption I would really prefer not to rely on.

oh, huh. I didn't notice that. Let me first look to convince myself that there's not a simple workaround. But not quite yet; I have some backing-out to do ASAP.

[16:47:54.0470] <Waldo>
Also `AutoSetNewObjectMetadata` is just terrible on its own and surely something better than that can serve the function, but 😒

