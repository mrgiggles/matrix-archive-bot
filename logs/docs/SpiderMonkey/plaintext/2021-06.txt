2021-06-01
[02:53:00.0338] <dbezhetskov>
it may sound stupid, but how to add a new target like js shell for SM? I want to write my own special shell and I want to compile it via `mach` like this - `ac_add_options --enable-application=my_super_shell`, I looked at `shell/moz.build` file but there is no any `create_binary(name = "js")` or something like this

[03:00:20.0466] <arai>
`GeckoProgram` sounds related

[03:02:25.0291] <dbezhetskov>
> <@arai:mozilla.org> `GeckoProgram` sounds related

aha, thanks a lot, I was missed that, also, if I specify a new GeckProgram("MySuperBinary") how to call `mach` to build it?

[03:02:35.0313] <dbezhetskov>
> <@arai:mozilla.org> `GeckoProgram` sounds related

 * aha, thanks a lot! I missed that, also, if I specify a new GeckProgram("MySuperBinary") how to call `mach` to build it?

[03:02:50.0981] <dbezhetskov>
 * aha, thanks a lot! I missed that, also, if I specify a new `GeckProgram("MySuperBinary")` then how to call `mach` to build it?

[03:02:56.0920] <dbezhetskov>
 * aha, thanks a lot! I missed that, also, if I specify a new `GeckProgram("MySuperBinary")` then how to call `mach` to build it? maybe you know

[03:17:34.0964] <arai>
for `--enable-application`, I suppose it's the directory that contains `app.mozbuild` file, according to this line  https://searchfox.org/mozilla-central/rev/e9eb869e90a8d717678c3f38bf75843e345729ab/moz.build#176

[03:18:01.0822] <pavelpaklov>
hello everyone. how can i view this [changeset](https://hg.mozilla.org/mozilla-central/rev/9f55d547e196a6945636405c2b33afc87dd501ee) in searchfox?

[03:19:27.0631] <arai>
pavelpaklov: what do you mean by "view"?  what content are you looking for?

[03:19:44.0529] <arai>
(or, what formatting

[03:20:52.0197] <pavelpaklov>
> <@arai:mozilla.org> pavelpaklov: what do you mean by "view"?  what content are you looking for?

like [this](https://searchfox.org/mozilla-central/rev/b68d3ea4c46ff4f9e85cdb0b9936d1802e3c7bd8/js/src/shell/js.cpp#3362-3363) - it has a revision in query.

'view' means to look a source code of this specific revision

[03:22:01.0160] <arai>
replace the hash in the URL with yours, and replace the remaining path in the URL with what you want

[03:22:24.0369] <pavelpaklov>
> <@arai:mozilla.org> replace the hash in the URL with yours, and replace the remaining path in the URL with what you want

i tried this, but it prints - Bad revision

[03:26:58.0056] <arai>
oh, I didn't know that the hash in the URL isn't mercurial's one :P

[03:27:43.0190] <pavelpaklov>
> <@arai:mozilla.org> oh, I didn't know that the hash in the URL isn't mercurial's one :P

hm, how to find mercurial's hash ? :)

[03:28:04.0764] <arai>
the mercurial's hash is what you've posted above

[03:28:12.0748] <arai>
and looks like the corresponding URL is https://searchfox.org/mozilla-central/rev/39a0983bcc6bbed2e212d8e37ad3f2da091dabc1/toolkit/content/aboutNetworking.js#21

[03:28:23.0310] <arai>
not sure what kind of mapping is done there tho

[03:30:51.0922] <arai>
maybe it's gecko-dev's hash?

[03:31:21.0686] <arai>
https://github.com/mozilla/gecko-dev/commit/39a0983bcc6bbed2e212d8e37ad3f2da091dabc1

[03:33:17.0045] <pavelpaklov>
> <@arai:mozilla.org> maybe it's gecko-dev's hash?

looks like it is

[03:33:52.0353] <pavelpaklov>
[searchfox](https://searchfox.org/mozilla-central/rev/2e7bcc8dfa4fce5c8f3d8b224abde0627e1dee0e/js/src/jit/AliasAnalysis.cpp)

[gecko-dev](https://github.com/mozilla/gecko-dev/commit/2e7bcc8dfa4fce5c8f3d8b224abde0627e1dee0e)

[03:38:32.0345] <arai>
dbezhetskov: then, if you want to add a new binary in addition to existing configuration/output, I think you can add new directory with `moz.build` file there, with `GeckoProgram` in it, and include the `moz.build` from parent directory's `moz.build`

[04:13:19.0720] <er.das.surajeet>
How do I commit only the new one ?

[04:14:13.0037] <arai>
er.das.surajeet: you can specify start revision in the command line parameter

[04:14:50.0616] <arai>
I thought "." also works there

[04:17:00.0255] <arai>
also, you'd better working on each bug in separate history, from clean mozilla-central tip, instead of piling them up, so that moz-phab automatically submit necessary changes

[04:19:39.0681] <er.das.surajeet>
Okay

[07:35:58.0206] <anba>
Can someone take over reviewing <https://phabricator.services.mozilla.com/D101398>? It's the last patch before we can land <https://bugzilla.mozilla.org/show_bug.cgi?id=1686052>, which unblocks shipping `Intl.DateTimeFormat.prototype.formatRange`, and it will fix this user reported bug (<https://bugzilla.mozilla.org/show_bug.cgi?id=1697729>), and it will make it possible to implement this spec change <https://github.com/tc39/ecma402/pull/501>. 

[07:40:03.0886] <tcampbell>
anba: yeah, I can take them

[07:41:03.0738] <anba>
Great! Thank you! :-D

[07:41:34.0532] <tcampbell>
thanks for your detailed notes on these sorts of changes. Makes it much easier

[07:44:49.0729] <anba>
Np. Hopefully one day we can just call into ICU4X and no longer have to maintain this code ourselves. :-)

[08:08:19.0219] <mgaudet>
Greatly enjoying the colour generator caroline, especially that you dump the parameters in the link, so we can share [favourites](https://spidermonkey.dev/?primary=124&secondary=140&lightness=69) 

[08:09:30.0838] <caroline>
Thanks üòÅ That was yulias idea, which was exactly why she wanted to do it! 

[08:25:10.0153] <yulia>
[hacker mode](https://spidermonkey.dev/?primary=130&secondary=342&lightness=62)

[08:26:02.0054] <yulia>
[what my first geocities website looked like](https://spidermonkey.dev/?primary=296&secondary=316&lightness=41)

[08:26:20.0912] <yulia>
but like, with more gifs

[08:31:30.0476] <evilpie>
I don't hate it

[08:32:54.0515] <yulia>
oh this one is good https://spidermonkey.dev/?primary=326&secondary=244&lightness=51

[08:33:12.0955] <yulia>
would be nice if we could automatically generate the image from the colour schemme

[08:33:23.0677] <yulia>
for example, by using an svg with classes ü§î

[08:34:18.0251] <evilpie>
Why is the footer blue?

[08:38:58.0662] <yulia>
art?

[08:39:10.0118] <yulia>
jk, its what got spit out 

[08:49:57.0705] <jandem>
I really like the color combinations it comes up with, most of them are pretty good and usable

[09:05:04.0494] <yulia>
maybe we can save a couple under aliases -- then i we want to switch it will be easy

[09:05:17.0158] <yulia>
[batman](https://spidermonkey.dev/?primary=51&secondary=86&lightness=55)

[09:14:27.0008] <jandem>
we could change the website's theme on special days, [december holidays](https://spidermonkey.dev/?primary=68&secondary=331&lightness=90) 

[09:17:40.0086] <yulia>
omg we are doing a Halloween version then

[09:19:35.0253] <yulia>
 * omg we are doing a [Halloween](https://spidermonkey.dev/contribute/?primary=30&secondary=220&lightness=60) version then

[09:19:39.0614] <tcampbell>
or seed it by the current week number

[09:19:53.0182] <yulia>
The nice thing is you can edit the colours just by changing the url

[09:21:14.0492] <yulia>
darn, the light theme looks boring now

[09:29:29.0234] <DerekNonGeneric>
did not realize there was a light theme until i checked it on my phone

[09:44:08.0175] <DerekNonGeneric>
invert the dark mode: yellow background purple text

[09:44:51.0313] <DerekNonGeneric>
* maybe invert the dark mode: yellow background purple text

[10:27:10.0519] <mgaudet>
confession: Private method invocation inside a Debug.eval.frame is coming along nicely; I'm fairly happy with the patch now, pending review comments :)  

[10:27:12.0777] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2021-06-02
[04:07:38.0926] <er.das.surajeet>
element.js:element.find(273):24: (ERROR/3) Unexpected indentation. 
What does '273' and '24' refer to ?
And (ERROR/3) ?

[04:09:34.0704] <arai>
can you provide more context?  what did you do before getting that?

[04:09:57.0893] <er.das.surajeet>
I ran mach doc

[04:10:12.0207] <er.das.surajeet>
I am trying to fix these warnings

[04:10:32.0940] <er.das.surajeet>
Most of the warnings are of this format.

[04:11:17.0292] <er.das.surajeet>
I checked the file element.js as the error mentioned above, but cannot find the indentation error at line 273

[04:12:04.0074] <Standard8>
My guess would be it is line 24

[04:14:07.0282] <er.das.surajeet>
Have a look at line 24

[04:14:26.0784] <arai>
or perhaps, the line 24 of the documentation above line 273 ?

[04:14:55.0368] <er.das.surajeet>
Pardon ?

[04:15:40.0550] <arai>
I suppose, a part of the command is somehow handling documentation comment

[04:16:12.0225] <arai>
then, if you haven't modified the file, line 273 is the property definition, and there's documentation comment above that line

[04:16:18.0974] <arai>
https://searchfox.org/mozilla-central/rev/74f3c420ee54001059e1850bef3be876749ff873/remote/marionette/element.js#224-272

[04:16:27.0311] <arai>
so, 24-th line of the comment block

[04:16:45.0187] <arai>
btw, do you get any other output before/after that, related to the error?

[04:16:55.0804] <arai>
or is that the only output?

[04:17:22.0927] <er.das.surajeet>
No there are several warnings and couple of errors

[04:17:36.0036] <arai>
or, some output that tells what's going on, and how it hits the error

[04:17:44.0410] <arai>
can you pastebin the entire output?

[04:17:50.0405] <arai>
to https://paste.mozilla.org/

[04:18:10.0858] <er.das.surajeet>
Shall I prove the entire output ?

[04:18:57.0154] <arai>
it might give us some hint

[04:19:09.0521] <er.das.surajeet>
Sure

[04:21:48.0136] <er.das.surajeet>
http://paste.mozilla.org/ifykPi1C

[04:25:00.0794] <arai>
so, looking at other warnings, it looks like there's some offset

[04:25:03.0710] <arai>
for the line number

[04:25:53.0165] <arai>
I suppose, it performs some kind of pre-process on the comment block and feeds it into the command that reports the error/warni

[04:26:09.0792] <arai>
> element.js:element.scrollIntoView(1254):9: WARNING: Undefined substitution referenced: "el".

[04:26:42.0460] <arai>
`|el|` is at the 1st line, but it says 9  https://searchfox.org/mozilla-central/rev/74f3c420ee54001059e1850bef3be876749ff873/remote/marionette/element.js#1249

[04:27:19.0253] <arai>
> element.js:element.find(273):12: WARNING: Undefined substitution referenced: "timeout".

[04:28:00.0305] <arai>
`|timeout|` is at the 4th line, but it says 12  https://searchfox.org/mozilla-central/rev/74f3c420ee54001059e1850bef3be876749ff873/remote/marionette/element.js#228

[04:28:32.0019] <arai>
so, the offset is 8.  and if it says 24, it means 16th line of the comment block

[04:29:24.0556] <arai>
so I guess this line  https://searchfox.org/mozilla-central/rev/74f3c420ee54001059e1850bef3be876749ff873/remote/marionette/element.js#240

[04:29:44.0860] <arai>
 * I suppose, it performs some kind of pre-process on the comment block and feeds it into the command that reports the error/warning

[04:30:20.0741] <arai>
and if it says 29, it's https://searchfox.org/mozilla-central/rev/74f3c420ee54001059e1850bef3be876749ff873/remote/marionette/element.js#245

[04:30:51.0118] <arai>
both lines have the same situation regarding indentation

[04:31:08.0948] <arai>
not sure what the expected indentation is tho... :P

[04:32:52.0327] <arai>
maybe it's better looking into the underlying system that processes the comment, to see what the expected syntax is

[04:33:23.0192] <arai>
if you're working on existing bug, try asking people who filed or mentors it

[04:33:24.0546] <er.das.surajeet>
What do you suggesting ?

[04:33:35.0088] <er.das.surajeet>
Alright

[04:33:47.0505] <er.das.surajeet>
 * What do you suggest ?

[04:38:11.0294] <er.das.surajeet>
> <@arai:mozilla.org> `|el|` is at the 1st line, but it says 9  https://searchfox.org/mozilla-central/rev/74f3c420ee54001059e1850bef3be876749ff873/remote/marionette/element.js#1249

I didn't get this

[04:38:28.0906] <er.das.surajeet>
which 1st line ?

[04:38:45.0551] <arai>
1st line of the comment block

[04:39:05.0678] <er.das.surajeet>
Yeah okay

[07:38:39.0704] <er.das.surajeet>
driver.js:GeckoDriver(94):393: (WARNING/2) Definition list ends without a blank line; unexpected unindent.

[07:39:08.0187] <er.das.surajeet>
How to interpret these '94' and '393' ?

[07:52:09.0502] <arai>
which bug are you working on?  I guess there's more appropriate room for that question where people there knows more about it

[07:53:34.0149] <er.das.surajeet>
Bug 1536103

[07:53:35.0598] <botzilla>
https://bugzil.la/1536103 ‚Äî ASSIGNED (championshuttler) ‚Äî Fix sphinx warnings in `mach doc` and make them fail the build

[07:55:10.0750] <arai>
so, it's in "Firefox Build System" product, that suggests people in #build:mozilla.org knows

[07:55:55.0242] <mgaudet>
Q on `--differential-testing`: Do we have any build configurations that actually test it, or is it purely fuzzing? (fixing fuzz bug, and wondering if it's worth adding a new test case when 'fuzzbug' is just run existing test with `--differential-testing`. 

[08:18:08.0974] <sfink>
jonco jandem sdetar anyone want to meet earlier? 

[08:18:52.0564] <sdetar>
I am free now

[08:19:42.0086] <jandem>
dinner here :/ 

[08:20:03.0596] <sfink>
ok, np

[08:20:42.0686] <jandem>
sfink: (go ahead though, I was expecting to skip anyway after you sent the status email)

[08:21:22.0292] <sfink>
I'm ok skipping too, the one thing worth discussing is decidedly non-urgent

[08:27:21.0424] <nbp>
sfink: I have not yet looked at the code, is the scheduling meant to handle tons of tiny tasks? Or should we prefer batching them ahead?

[08:27:48.0505] <nbp>
sfink: I am asking in the context "off-thread eager de-lazification".

[08:28:28.0189] <sfink>
nbp: I'm the wrong person. tcampbell, maybe?

[08:29:15.0553] <nbp>
sfink: hum ‚Ä¶ who would know about scheduling then?

[08:29:26.0724] <sfink>
(the scheduling I'm looking at is for GC slices, although I need to look at the microtask queue at some point)

[08:29:49.0376] <tcampbell>
nbp: I think batching is needed

[08:29:59.0179] <tcampbell>
delazifications are so small

[08:30:06.0762] <nbp>
/me put the "micro-task queue" keyword in memory

[08:30:38.0212] <nbp>
tcampbell: well depends on the scheduler, I presume.

[08:31:06.0037] <nbp>
if we have a scheduler design to deal with tons of micro-tasks, or a scheduler designed to work with long-lasting tasks.

[08:31:21.0177] <tcampbell>
https://searchfox.org/mozilla-central/source/xpcom/threads/TaskController.cpp#331

[08:31:23.0753] <sfink>
the microtask queue touches on stuff for which the ordering is somewhat user-visible, so it might still be at a higher level?

[08:31:26.0772] <nbp>
Not that this change much in terms of scheduler implementation, but more in terms of convention of usage

[08:31:43.0604] <tcampbell>
there is a lock in the middle, so I'd categorize it as more long-lasting

[08:32:56.0786] <tcampbell>
so "decode an image", "refresh driver", are examples now

[08:34:03.0991] <tcampbell>
I think there is a task interruption system in the code, so the task could accumulate decodes until done or notified by main thread

[08:34:24.0212] <nbp>
ok, are these tasks interruptible, like we have for Ion compilations?

[08:34:53.0729] <nbp>
I see `TaskController::MaybeInterruptTask`, but I am not yet convinced

[08:35:10.0338] <tcampbell>
this is the point I look at sfink who did an experiment with interrupting GCs on this system

[08:36:42.0426] <sfink>
that'll give you a callback when a low-priority task is running and something happens (user input or whatever)

[08:37:00.0026] <sfink>
I think it might just be for the idle scheduler, but let me look

[08:38:06.0498] <sfink>
er, wait, is the same mechanism I used?

[08:38:24.0868] <tcampbell>
¬Ø\_(„ÉÑ)_/¬Ø

[08:39:42.0656] <sfink>
I need to get back to that one

[08:41:10.0952] <sfink>
https://searchfox.org/mozilla-central/source/xpcom/threads/TaskController.h#128-134 is what I'm using

[08:41:31.0236] <sfink>
oh, that's called from `MaybeInterruptTask`

[08:43:11.0361] <sfink>
so it *sounds* like it would work, though bridging the Gecko mechanisms into the SM world is always fun

[08:43:52.0266] <sfink>
we have our helper threads that jonco is switching over to run on the xpcom thread pool, but I'm not sure where those intersect with the TaskController stuff

[08:45:59.0751] <sfink>
but from the sound of it, I agree with tcampbell that you'd probably want to run through a series of delazifications and stop when needed. I don't know enough about delazification to know how they should be scheduled. I'm kind of interested -- maybe we can get on a call at some point?

[08:46:04.0025] <sfink>
right now, I have to leave to get stabbed

[08:46:06.0908] <sfink>
(2nd vaccination)

[10:47:10.0433] <mgaudet>
Does [this mean](https://bytecodealliance.org/articles/making-javascript-run-fast-on-webassembly) we're going to get pre-baked IC stubs? (The idea of having pre-baked stubs to support a fast-JITless mode is very interesting) 

[10:53:25.0783] <nbp>
mgaudet: Unfortunately this model is hard for some critical concepts that are used by optimizing JITs. Doing bailouts without continuation implies always going back to an interpreter mode, OSR is problematic as well. Invalidation of code becomes costly as you lose the ability of patching the stack which forces to have a return check.

[10:56:01.0383] <nbp>
From what I understand our IC could be made data-free, and we could pre-bake the most common use cases.

[10:57:52.0725] <nbp>
by data-free I mean splitting the code-section from the data-section, and the code-section would simply reference the data section for any data it needs.

[10:58:21.0781] <jandem>
mgaudet: last we heard they compiled a set of CacheIR stubs to C, they can then call into that from the interpreter

[10:58:49.0383] <mgaudet>
jandem: Neat! I definitely feel like there's fruit on said tree

[10:59:24.0955] <mgaudet>
think they'll try and upstream? 

[11:01:39.0981] <jandem>
probably. They've started upstreaming the WASI port, dbezhetskov from Igalia is making good progress

[11:07:01.0515] <nbp>
They should change the macro assembler to output WASM code :P

[11:12:59.0033] <iain>
Huh

[11:13:05.0165] <iain>
I spent a moment seriously considering that

[11:13:53.0802] <iain>
And whether it would be possible to add Ion support by generating wasm and compiling twice

[11:14:12.0160] <iain>
Then I thought about bailouts and my eye started twitching

[11:15:40.0851] <jandem>
cfallin: ^

[11:35:58.0955] <tcampbell>
Intl CLDR makes my head spin. yikes

[11:42:52.0605] <nbp>
bailout/OSR is possible but without continuations you will be doomed with stack overflows

[11:46:01.0621] <cfallin>
mgaudet: indeed I had a prototype working with pre-baked IC stubs; specifically it was a (completely hacky) Python compiler from CacheIR bytes to C++, generating a big switch-over-cacheIR-ID-number

[11:46:17.0756] <cfallin>
unfortunately it was not much faster than the interpreter, so that part isn't in what we upstreamed

[11:46:31.0613] <cfallin>
but when we get to our (eventual) plans for AOT baseline compilation, this will be part of it

[11:47:48.0295] <cfallin>
iain: as for masm generating Wasm -- yes, we have thoughts on this too :-) there are approximately 10e9 things on my plate now but when/if we have more bandwidth for this project, that's probably the way the medium-term port will go

[11:48:25.0607] <tcampbell>
I've been finding it interesting that some of our independent work for things like simplifying NewObject ICs (to reduce mprotect), and replacing self-hosted with stencil (for memory savings) happen to make a lot of sense for this use case.

[11:48:44.0120] <tcampbell>
turns out making things faster, smaller, and cleaner is just good all around :)

[11:48:46.0028] <cfallin>
long-term we actually want a 1:1 mapping from JS-level functions, exceptions, etc, but that depends on a number of Wasm features (exception handling at least, funcrefs, probably something specific for IC stubs)

[11:50:46.0816] <nbp>
cfallin: I think what you want is the ability to add resume-points in the generated baseline code.

[11:51:05.0947] <nbp>
This is something that we do not have, but which would be really useful for WASM generated code.

[11:52:04.0243] <nbp>
as WASM needs to ensure safety, having locations within the code where you can state what should be alive and map that such that one piece of code can jump from one function body to another.

[11:55:16.0166] <cfallin>
maybe! though the implications of doing things AOT are sort of interesting -- e.g. OSR is not really important (I think?) if we just (i) baseline compile everything, and (ii) have some sort of Wasm-level feature for ICs, and IC inlining (a la Warp). In a sense, giving the (Wasm-level) abstract machine a primitive for ICs means that the optimizations can be factored away from the JS-engine-specific complexity

[11:55:29.0180] <cfallin>
but those are just my own thoughts and surely we'll flesh this out more when we start to actually try to build something

[11:56:50.0718] <jandem>
cfallin: as Ted mentioned, iain changed our NewObject iC stubs to not generate different CacheIR for each allocation site. Do you remember running into that or was NewObject not part of the prototype?

[11:57:17.0175] <jandem>
 * cfallin: as Ted mentioned, iain changed our NewObject IC stubs to not generate different CacheIR for each allocation site. Do you remember running into that or was NewObject not part of the prototype?

[11:57:20.0559] <nbp>
cfallin: depends if you mean AOT in the sense of WASM in SpiderMonkey or in the sense of GCC (like Ruby did, IIRC)

[11:57:21.0974] <cfallin>
iirc, I didn't implement the right CacheIR opcodes for that to ever be fastpath'd, so it wasn't an issue :-)

[11:58:08.0847] <cfallin>
nbp: AOT in the sense that the JS-to-Wasm step is AOT, without any type info, then all the runtime opts (if any) happen in the Wasm engine

[11:58:12.0852] <iain>
In the old world it could never be fastpathed, because every NewObject IC was a special snowflake with unshareable code

[11:58:36.0394] <iain>
In the new world it would be much more reasonable to fast-path it

[11:58:49.0557] <cfallin>
iain: indeed

[12:01:23.0381] <cfallin>
anyway, a meta-comment -- if/when we start the AOT baseline js-to-wasm efforts I'll be sure to ping y'all as it is clear there are many good thoughts here :-) I've had some interesting talks on this with Luke and also the Igalia folks (hi wingo) already. Should be interesting if it happens!

[12:17:17.0892] <iain>
jseward++ for making `IONFLAGS=codegen` output less miserable (bug 1713768)

[12:17:19.0962] <botzilla>
https://bugzil.la/1713768 ‚Äî NEW (jseward) ‚Äî Make Ion's `IONFLAGS=codegen` debug output easier to read

[16:34:41.0914] <tcampbell>
confession: After learning about a dozen languages I did not know existed, I've finish the ICU upgrade review

[16:34:44.0114] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2021-06-03
[20:11:39.0298] <petegleeson>
Hey all some really exciting stuff mentioned on https://bytecodealliance.org/articles/making-javascript-run-fast-on-webassembly. I've been investigating similar ideas with the QuickJS engine compiled to WASM/WASI. Is there anyway I can try out the WASM/WASI version of SpiderMonkey? Otherwise what's the best place to follow along with the progress? Love your work and thanks a lot!

[21:35:51.0426] <jandem>
petegleeson: we're very close with the initial WASI port and setting up a CI job for it (bug 1701197)

[21:35:53.0481] <botzilla>
https://bugzil.la/1701197 ‚Äî UNCONFIRMED (nobody) ‚Äî [meta] wasi port

[21:36:59.0511] <jandem>
once that's done it would be great to have a WASM demo of this on our website

[21:37:43.0599] <jandem>
this is the initial port, there's a lot of perf work we can do on top of it then (mentioned in the blog post you linked to)

[21:39:47.0531] <jandem>
 * this is the initial port, there's a lot of additional perf work we can do on top of it then (mentioned in the blog post you linked to)

[21:40:07.0041] <jandem>
 * petegleeson: we're very close with landing the initial WASI port and setting up a CI job for it (bug 1701197)

[21:40:26.0124] <jandem>
 * once that's done it would be great to have a WASM demo of this on our website, it's on our list

[00:01:10.0751] <er.das.surajeet>
How to generate output log file while running ./mach ?

[00:09:45.0661] <arai>
usually, running command with `--help` parameter shows help message

[00:10:11.0852] <arai>
also, #introduction:mozilla.org room would be better place for that kind of question

[05:35:40.0604] <nbp>
tcampbell: sfink: "delayed parsing" instead of "lazy parsing"; "on-demand parsing" instead of "delazification"; <no-op for garbage collection?> instead "relazification" ?

[05:38:29.0444] <nbp>
yulia: did you know that there is a wikipedia page for (Lazy Loading)[https://en.wikipedia.org/wiki/Lazy_loading]

[05:38:38.0908] <nbp>
 * yulia: did you know that there is a wikipedia page for [Lazy Loading](https://en.wikipedia.org/wiki/Lazy_loading)

[05:38:45.0929] <nbp>
 * yulia: did you know that there is a wikipedia page for [Lazy Loading](https://en.wikipedia.org/wiki/Lazy_loading)?

[05:39:29.0454] <yulia>
oh neat, i hadn't seen it

[05:57:32.0623] <mbrodesser>
What does the return value of `ResolvePromise` (https://searchfox.org/mozilla-central/rev/85a74c965bd4bcab091b5767c13c44f84671d9ce/js/public/Promise.h#402) mean? When following the code, it seems it could mean quite different things

[06:04:38.0648] <Ms2ger>
The usual - false is failure, true is success

[06:06:18.0028] <mbrodesser>
Ms2ger:  why would it return `true` in case of https://searchfox.org/mozilla-central/rev/85a74c965bd4bcab091b5767c13c44f84671d9ce/js/src/builtin/Promise.cpp#5623?

[06:08:52.0329] <Ms2ger>
I think that's the case where there's no resolve function, or it's been called already

[06:09:09.0188] <Ms2ger>
It's not a failure, just nothing left to do

[06:10:04.0378] <arai>
https://searchfox.org/mozilla-central/rev/85a74c965bd4bcab091b5767c13c44f84671d9ce/js/src/builtin/Promise.cpp#2173-2177

[06:10:09.0023] <arai>
https://searchfox.org/mozilla-central/rev/85a74c965bd4bcab091b5767c13c44f84671d9ce/js/src/vm/PromiseObject.h#38-42

[06:11:20.0976] <mbrodesser>
> <@ms2ger:igalia.com> I think that's the case where there's no resolve function, or it's been called already

Shouldn't that be unreachable because of https://searchfox.org/mozilla-central/rev/85a74c965bd4bcab091b5767c13c44f84671d9ce/js/src/builtin/Promise.cpp#5614?

[06:12:19.0758] <arai>
oh

[06:12:23.0801] <Ms2ger>
How about if you do `then(undefined, ...)`? Then the promise might still be pending but there's no function

[06:14:10.0026] <arai>
the slot holds internal function, not the callbacks passed to `then`

[06:15:50.0728] <arai>
/me looks into other possibilities

[06:16:23.0143] <mbrodesser>
> <@ms2ger:igalia.com> How about if you do `then(undefined, ...)`? Then the promise might still be pending but there's no function

Not sure if `then(undefined, ...)` is defined

[06:16:28.0930] <mbrodesser>
/me is not too familiar with JS

[06:16:47.0405] <mbrodesser>
Or rather, if it's supposed to be called like that

[06:17:12.0213] <arai>
at least, returning `nullptr` from `GetResolveFunctionFromPromise` isn't supposed to be failure mode

[06:19:09.0708] <mbrodesser>
Is it, conversely, considered to be success?

[06:19:59.0069] <arai>
the resolve function for the promise is nullable

[06:20:13.0921] <arai>
so, yes, it should be successful case

[06:24:03.0145] <mbrodesser>
I see. Thanks! (I might add some documentation to `ResolveOrRejectPromise` https://searchfox.org/mozilla-central/rev/85a74c965bd4bcab091b5767c13c44f84671d9ce/js/src/jsapi.cpp#3857,3862)

[06:26:46.0164] <arai>
I wonder if some of the code is obsolete.  I cannot find the case that can hit early returns here  https://searchfox.org/mozilla-central/rev/85a74c965bd4bcab091b5767c13c44f84671d9ce/js/src/builtin/Promise.cpp#2186-2196

[06:27:29.0611] <arai>
we might be able to replace those branches with `MOZ_ASSERT`

[06:30:50.0027] <evilpie>
https://coverage.moz.tools/#revision=latest&path=js%2Fsrc%2Fbuiltin%2FPromise.cpp&view=file&line=2175

[06:31:16.0735] <evilpie>
also not hit on code coverage, but obviously this is not a proof

[06:32:44.0125] <arai>
oh, the last early return is hit

[06:37:54.0113] <mbrodesser>
> <@arai:mozilla.org> we might be able to replace those branches with `MOZ_ASSERT`

Yeah, that'd be nice

[12:14:07.0150] <mgaudet>
üò¨ 

If I've got a test case that behaves differently between Firefox, Safari and Chrome (all different!), involving WindowProxy (and private fields).... is there like an authority I can ask? 

[12:25:45.0084] <mccr8>
mgaudet: maybe peterv or annevk?

[16:04:34.0296] <glandium>
has someone looked into allocating larger buffers for the jit? While looking at how an instruction ended up generated in pernosco, I'm going through a lot of reallocs...

[16:15:20.0038] <iain>
glandium: Have you seen [jitsrc](https://searchfox.org/mozilla-central/source/js/src/gdb/mozilla/jitsrc.py)? It's a gdb extension I wrote to step backwards from an instruction to the code that generated the instruction, automating away the process of skipping past memcpys

[16:15:28.0344] <iain>
Not sure how/if it works in pernosco

[16:16:07.0557] <iain>
 * glandium: Have you seen [jitsrc](https://searchfox.org/mozilla-central/source/js/src/gdb/mozilla/jitsrc.py)? It's a <del><de</del>l>gdb</del> rr extension I wrote to step backwards from an instruction to the code that generated the instruction, automating away the process of skipping past memcpys

[16:16:24.0904] <iain>
 * glandium: Have you seen [jitsrc](https://searchfox.org/mozilla-central/source/js/src/gdb/mozilla/jitsrc.py)? It's a <del>gdb</del> rr extension I wrote to step backwards from an instruction to the code that generated the instruction, automating away the process of skipping past memcpys

[16:17:21.0769] <glandium>
I guess maybe it could be sourced in the pernosco gdb window, maybe? But that's not really what I was asking for.

[16:18:05.0703] <glandium>
rephrasing: has someone looked into the performance cost of those reallocs?

[16:32:39.0340] <iain>
Oh, right, I see

[16:36:55.0442] <iain>
I don't think anybody has, but it would be pretty easy to experiment with it

[16:41:33.0296] <iain>
I think the default size is set [here](https://searchfox.org/mozilla-central/source/js/src/jit/x86-shared/AssemblerBuffer-x86-shared.h#213) for x86? Looks like it's been 256 since the introduction of the macroassembler 11 years ago](https://searchfox.org/mozilla-central/rev/af8bb7fb2927f1b36a4a284d7bc2ec945f1557ea/js/src/assembler/assembler/AssemblerBuffer.h#60)

[16:41:42.0478] <iain>
 * I think the default size is set [here](https://searchfox.org/mozilla-central/source/js/src/jit/x86-shared/AssemblerBuffer-x86-shared.h#213) for x86? Looks like it's been 256 since the introduction of the macroassembler [11 years ago](https://searchfox.org/mozilla-central/rev/af8bb7fb2927f1b36a4a284d7bc2ec945f1557ea/js/src/assembler/assembler/AssemblerBuffer.h#60)

[16:44:59.0786] <tcampbell>
that is probably worth looking into

[16:46:05.0715] <iain>
We only ever have a single macroassembler live at at time, right? So there shouldn't be any problem increasing that to, say, 4K?

[16:46:12.0219] <iain>
 * We only ever have a single macroassembler live at a time, right? So there shouldn't be any problem increasing that to, say, 4K?

[16:54:16.0454] <glandium>
or probably even 16k

[16:54:44.0835] <glandium>
(that was the size of the buffer I was seeing btw)


2021-06-04
[17:00:04.0008] <tcampbell>
iain: how do link-pending off-thread ion tasks happen?

[17:00:22.0641] <iain>
I believe we always link on main-thread

[17:00:46.0547] <tcampbell>
this buffer realloc would be the non-exec vector

[17:05:26.0500] <iain>
Yeah, we reallocate the masm internal buffer repeatedly, then the linker computes the required size and [allocates the required numbers of bytes in one go](https://searchfox.org/mozilla-central/source/js/src/jit/Linker.cpp#24-47)

[17:05:47.0862] <iain>
 * Yeah, we reallocate the masm internal buffer repeatedly, then the linker computes the required size and [allocates the required numbers of bytes of executable memory in one go](https://searchfox.org/mozilla-central/source/js/src/jit/Linker.cpp#24-47)

[17:07:40.0642] <tcampbell>
the 256 still should probably be revisited. or possibly hoist the template parameter further out so that we have have better defaults for idfferent things

[17:07:41.0540] <iain>
Oh, but I guess that's a good point: we can have multiple Ion offthread compiles going, each of which has its own masm

[17:08:13.0756] <tcampbell>
those off-thread Ion have terrifying memory usage on the LifoAlloc, so I think 16k is totally reasonable

[17:09:48.0385] <glandium>
sent 16k to try

[17:10:03.0946] <glandium>
 * sent 16k to try with perf jobs on linux

[17:19:29.0812] <iain>
IIUC, on arm/arm64 (and MIPS, if we cared at all about MIPS) we are already using a different AssemblyBuffer implementation that uses a segmented vector instead, so we don't have to worry about reallocs there

[17:20:13.0603] <iain>
So just fixing x86/x64 should be enough

[17:22:24.0854] <glandium>
will file a bug depending on the results of aforementioned try push

[17:26:32.0508] <iain>
Great, thanks!

[21:39:16.0534] <annevk>
mgaudet: definitely interested in hearing about private fields + WindowProxy (they came up in https://github.com/tc39/ecma262/pull/688 as well, but it doesn't seem like that discussion was had again when private fields became more finalized...); might also wanna poke at Location I suppose as it's also somewhat magical

[01:09:06.0597] <dbezhetskov>
Hi, does anybody know the name of the flag for debugging arm64 with emulator? I remember that there is something like "ASM_SIMULATOR" or something like that but I can't find

[01:22:10.0066] <dbezhetskov>
> <@dbezhetskov:igalia.com> Hi, does anybody know the name of the flag for debugging arm64 with emulator? I remember that there is something like "ASM_SIMULATOR" or something like that but I can't find

finally find it - `ARM_SIM_DEBUGGER=1`

[01:22:37.0414] <dbezhetskov>
> <@dbezhetskov:igalia.com> Hi, does anybody know the name of the flag for debugging arm64 with emulator? I remember that there is something like "ASM_SIMULATOR" or something like that but I can't find

 * I've finally found it - `ARM_SIM_DEBUGGER=1`

[04:25:29.0975] <glandium>
iain tcampbell https://treeherder.mozilla.org/perfherder/compare?originalProject=try&originalRevision=89ab0e7ece63582e54099ab27bded02e72f6e701&newProject=try&newRevision=d7cb45cb333c36792be1fa2c805bce12f5a37618&framework=1 doesn't seem very conclusive.

[04:35:11.0950] <peterv>
jonco: I'm hitting https://searchfox.org/mozilla-central/source/xpcom/base/CycleCollectedJSRuntime.cpp#1292 with a patch of mine, I'm storing the result of deserializing structured clone data into a Value member of a CC'ed class

[04:36:41.0491] <peterv>
jonco: as far as I can tell it's because the structured clone data contains an empty string, and I end up getting the runtime's emptyString

[04:36:52.0889] <peterv>
jonco: but that is in a different zone?

[04:54:17.0321] <jonco>
peterv: interesting, so in this case the deserialized data is just an empty string?

[04:54:30.0406] <peterv>
jonco: looks lik eit

[04:55:01.0885] <jonco>
The empty string is an atom so it will be in a different zone, which I hadn't really considered

[04:55:05.0102] <peterv>
jonco: I could use NS_IMPL_CYCLE_COLLECTION_MULTI_ZONE_JSHOLDER_CLASS, but does that mean we need to use that whenever we store a string value?

[04:55:27.0003] <peterv>
jonco: or should we exempt atoms from the checks for now?

[04:56:40.0209] <jonco>
We don't want to have to use that everywhere we could store a string value

[04:57:46.0299] <jonco>
We need to make sure we mark these values if we are collecting the atoms zone, and then we can exempt atoms from the check

[04:57:50.0837] <jonco>
I'll file a bug

[04:57:57.0878] <peterv>
ok, thanks

[04:58:13.0753] <jonco>
If you need to get this working you can JS_WrapValue the value and that should fix it in the mean time

[04:58:37.0023] <peterv>
ok, and we can undo that in whichever patch lands first

[04:58:40.0049] <peterv>
thanks!

[05:38:48.0291] <peterv>
jonco: actually, I don't think JS_WrapValue is going to work, that just marks the atom but its zone will still be different. I'm going to use NS_IMPL_CYCLE_COLLECTION_MULTI_ZONE_JSHOLDER_CLASS for now

[05:40:40.0420] <jonco>
peterv: ah right, it thinks it doesn't need to do anything because it's an atom

[05:40:48.0556] <peterv>
right

[05:40:48.0731] <jonco>
cool

[07:32:48.0633] <mgaudet>
> <@annevk:mozilla.org> mgaudet: definitely interested in hearing about private fields + WindowProxy (they came up in https://github.com/tc39/ecma262/pull/688 as well, but it doesn't seem like that discussion was had again when private fields became more finalized...); might also wanna poke at Location I suppose as it's also somewhat magical

Thanks annevk; I'll ni? you on the bug with all my writing on this. (I also have a year old ni? to peterv, which is what reminded me to follow up on this :P) 

[07:33:44.0483] <mgaudet>
bug https://bugzilla.mozilla.org/show_bug.cgi?id=1652868 for reference 

[07:41:22.0664] <peterv>
mgaudet: oh, I vaguely remember we had some discussion about this, but I forgot about that needinfo

[07:41:27.0935] <peterv>
mgaudet: sorry

[07:41:59.0564] <mgaudet>
Well, it wasn't urgent enough in my mind to poke you again

[07:42:26.0311] <mgaudet>
I do still struggle with this though: We're well outside my wheelhouse on understanding the properties of the web platform

[07:43:09.0773] <mgaudet>
peterv: if you've got a minute to weigh in, I'd still love any input -- or heck, some guidance on test cases; navigation + iframes + identity and the properties therin seem subtle as heck 

[07:44:06.0095] <peterv>
mgaudet: at least it looks like we fail safely for now üôÇ

[07:44:28.0512] <mgaudet>
Yeah, that was a nice thing to verify... at least for that test case

[07:48:48.0751] <wingo>
glandium: gentle ping here https://phabricator.services.mozilla.com/D116574

[08:01:21.0661] <peterv>
mgaudet: so are private field names a Symbol in the spec too?

[08:01:41.0751] <mgaudet>
peterv: no. 

[08:01:53.0609] <peterv>
hmm, ok

[08:02:12.0318] <mgaudet>
peterv: I wrote a (long sorry) blog post here about how we mapped spec to implementation and why: https://www.mgaudet.ca/technical/2021/5/4/implementing-private-fields-for-javascript 

[08:03:09.0898] <mgaudet>
(it also walks over the specs most relevant details) 

[08:14:08.0819] <annevk>
mgaudet: thanks, I'm back June 14 and will take a look then

[08:14:28.0611] <mgaudet>
annevk: Awesome. I appreciate it hugely

[10:48:54.0756] <dminor>
tcampbell: Would you have time to have a look at https://phabricator.services.mozilla.com/D115783? Anba has done a couple of passes already and we're hoping it is close to being ready to land.

[10:49:28.0616] <tcampbell>
dminor: sure, can do

[14:43:31.0328] <mgaudet>
confession: I may have made a mistake trying to start a release upgrade for my build machine so close to EOD on a friday... 

[14:43:33.0514] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:50:05.0951] <sfink>
congrats on having your weekend plans figured out already!

[14:53:28.0566] <mgaudet>
Oh, if this goes horribly wrong, I'm definitely fixing it monday


2021-06-05
[13:37:55.0096] <er.das.surajeet>
What is the error here ?

[16:02:28.0223] <tcampbell>
you'll need to pull the latest version of mozilla-central (or unified) and rebase your patch onto it. By bad luck, someone renamed on of those files a few days ago and Phabricator is having trouble tracking that. Your git or mercurial will probably be able to figure it out. Bug 1693993 is what caused the problem.

[16:02:30.0216] <botzilla>
https://bugzil.la/1693993 ‚Äî RESOLVED (whimboo) ‚Äî Move Marionette server code from /testing/marionette to /remote


2021-06-07
[03:55:12.0616] <yulia>
I'm wondering, should we mark such pieces of documentation as "SMDOC"  ? https://searchfox.org/mozilla-central/source/js/src/frontend/AsyncEmitter.h#19-78

[04:13:15.0809] <arai>
I was thinking SMDOC is for something like concept (not sure if it's correct word), but looks like it's used in many cases

[04:14:40.0709] <arai>
if we add SMDOC around that (not specifically that file), we'd better explaining the basic idea of the emitter helper at first I guess?

[04:23:38.0757] <arai>
I'll try writing SMDOC for bytecode emission

[04:23:54.0589] <arai>
including BytecodeEmitter, BytecodeSection, emitter helpers

[04:28:23.0684] <yulia>
That would be great --- if we don't use smdoc for these maybe we can use another key

[04:28:35.0842] <yulia>
its a really efficient way of surfacing what we have documentation on

[04:37:49.0244] <tcampbell>
I'd rather we have too many SMDOCs than too few

[04:38:10.0243] <tcampbell>
we can also curate and prune in the future, but it doesn't seem like a problem

[04:39:39.0975] <arai>
I agree that adding key for each would be nice

[09:13:33.0072] <dminor>
iain: From my experiments vendoring in ICU4x, I think we'll need to get review and approval for the ICU4x license. I was wondering if that was something you had started looking into?

[09:34:51.0244] <iain>
dminor: I have not looked into it yet. Have you seen the Licensing Runbook?

[09:40:31.0480] <dminor>
iain: No, I haven't. I'm not sure at all about how to get started with this, but I thought it might make sense to try get things moving now, there are 2 or 3 projects on the go right now involving ICU4x, so it would be nice to get this resolved before someone is ready to land code.

[09:40:49.0342] <dminor>
I'm happy to look into it, if you have any suggestions on where to get started, please let me know.

[09:42:08.0539] <iain>
dminor: The mana page is here: https://mana.mozilla.org/wiki/pages/viewpage.action?pageId=130927170

[09:42:20.0676] <iain>
Look under "Incorporating open-source-licensed third-party code into existing products or projects"

[09:44:46.0779] <dminor>
Thanks!


2021-06-08
[17:53:15.0312] <ptomato>
who would be a good reviewer for https://bugzilla.mozilla.org/show_bug.cgi?id=1706866 ?

[22:58:59.0375] <jandem>
ptomato: I can review

[23:01:11.0517] <ptomato>
cool! thanks. (although I asked that before I realized I lost my commit access and can no longer push to try until my ticket is processed. hopefully I'll get that access restored tomorrow, I'll tag you for review when I do)

[23:02:08.0205] <jandem>
sounds good, exciting to see BigInt being used in the wild like this

[23:47:05.0280] <Ms2ger>
Why is that even on mana

[07:18:59.0420] <yulia>
Can i get another pair of eyes to make sure I disabled hasOwn tests properly? https://phabricator.services.mozilla.com/D115483

[07:19:05.0562] <yulia>
maybe evilpie if you are around?

[07:19:16.0553] <yulia>
I was hoping test262 would land first, but alas

[08:06:10.0908] <evilpie>

yulia I believe we usually use annotation in the file like https://searchfox.org/mozilla-central/source/js/src/tests/non262/Intl/Collator/caseFirst.js#1

[08:23:21.0204] <yulia>
cool

[08:52:23.0298] <mgaudet>
Private field blog post is now on Hacks, too :P https://hacks.mozilla.org/2021/06/implementing-private-fields-for-javascript/ 

[08:54:05.0611] <yulia>
Should we retweet it from sm twitter? its been a while... and it is a good blog post

[08:54:47.0392] <mgaudet>
I don't see why not :P retweets are cheap

[08:54:52.0009] <mgaudet>
it was tweeted from mozhacks 

[08:55:06.0235] <jandem>
yes makes sense

[08:58:53.0147] <yulia>
done!

[09:31:58.0771] <ptomato>
jandem: my access is restored, all is well, I tagged you for review on bug 1706866 üòÉ

[09:32:01.0743] <botzilla>
https://bugzil.la/1706866 ‚Äî ASSIGNED (ptomato) ‚Äî Add more embedder API for BigInt

[10:54:53.0215] <jkratzer>
Does anyone know why I would be getting import errors when using the standalone xpcshell binary as opposed to `firefox -xpcshell` when running the following command:
```
Cu.import("resource://gre/modules/Timer.jsm"); 
JavaScript error: typein, line 1: NS_ERROR_FILE_NOT_FOUND: Component returned failure code: 0x80520012 (NS_ERROR_FILE_NOT_FOUND) [nsIXPCComponents_Utils.import]

[11:00:10.0156] <arai>
jkratzer: how do you run it?

[11:01:21.0152] <jkratzer>
I unpacked the target.common.tests.tar.gz in the firefox parent dir, symlink `bin/xpcshell` to the parent dir, and run via LD_LIBRARY_PATH=/path/to/build ./xpcshell

[11:01:24.0769] <jkratzer>
 * I unpacked the target.common.tests.tar.gz in the firefox parent dir, symlink `bin/xpcshell` to the parent dir, and run via `LD_LIBRARY_PATH=/path/to/build ./xpcshell`

[11:03:49.0850] <arai>
sounds like "gre" resource directory isn't configured correctly?

[11:06:34.0690] <arai>
maybe you can use `-g` command line parameter of `xpcshell`

[11:06:59.0757] <jkratzer>
arai: do you know what it should point to?  I tried ./modules, ./browser, and ./test - all of which had the same effect

[11:08:42.0726] <arai>
which OS are you on?

[11:08:44.0034] <jkratzer>
ah, nvm - it just needs to be set to the build dir

[11:08:53.0523] <jkratzer>
```
üê≥  65a0165ab289 firefox Œª ./bin/xpcshell -g ./
js> const { clearInterval, clearTimeout, setInterval, setTimeout } = Cu.import(
  "resource://gre/modules/Timer.jsm"
)


[11:08:56.0432] <jkratzer>
thanks for your help

[11:09:10.0541] <arai>
:)

[14:28:13.0605] <sfink>
mgaudet: FYI - I was looking at polishing up https://phabricator.services.mozilla.com/D92352 for landing, as a way to ease into figuring out this Streams goop. My current thinking, which could be ridiculously wrong, is that it makes sense to explicitly store the [incumbent global](https://searchfox.org/mozilla-central/rev/c0f286b1f541c675bbe052b21bdefa80d150ec35/dom/script/ScriptSettings.h#45-83) in `PipeToAbortAlgorithm`. I don't think `mState` will work, either wrapped or unwrapped; it seems like it could be a CCW to an arbitrary compartment.

[14:28:45.0564] <sfink>
I'm going shopping now, but I'll fix one last thing in this patch and then post it when I get back, and hopefully smaug or arai will tell me I'm being an idiot.

[14:29:13.0291] <mgaudet>
I'll take a closer look at that tomorrow to follow along

[14:29:56.0893] <sfink>
ooh, a live Waldo!

[14:30:08.0105] <Waldo>
sfink: I've been too busy lately to get back.  I should talk to you about those, yeah.

[14:30:19.0091] <Waldo>
I owe too many people too many things lately.  :-(

[14:30:38.0334] <sfink>
that would be awesome. I've been avoiding digging into it, but finally decided to bite the bullet today.

[14:33:01.0365] <Waldo>
I've been staring off and on at a review that I just saw tcampbell took off my hands already anyway.  :-|

[14:33:43.0182] <Waldo>
I feel sort of obligated to finish it up anyway, putting any such comments in a totally separate bug.  And by that point maybe I should just fix them 'cause I'm the one complaining.

[14:35:04.0218] <Waldo>
Oh hm, incumbent global was a thing I was deliberately knowingly punting in that patch...

[14:35:25.0648] <sfink>
ok. I really need to head off for this shopping trip. But https://paste.mozilla.org/oP3UFvTM is my changes to https://phabricator.services.mozilla.com/D92352 which sadly includes a small bit of `mach clang-format` change too.

[14:36:30.0600] <sfink>
I was planning on adding a comment to the `Trace(JSTracer*)` method as well to explain why it's there, but hadn't gotten to it

[14:36:44.0691] <Waldo>
Nit, but "RunAbortAlgorithm" I think shows up in debugger UI, so that probably should be something like "pipeTo abort operation" or whatever.

[14:37:29.0529] <sfink>
the incumbent global stuff only came up because it looked like there could be script running under there, so `AutoJSAPI` seemed wrong and I wanted `AutoEnterScript`, which led me straight to incumbent globals

[14:37:40.0787] <sfink>
ah yeah, I didn't know what to call it so wimped out

[14:37:59.0826] <Waldo>
Yeah, I didn't pay attention to incumbents at all, just wanted something I could vaguely prop up enough to run.

[14:38:36.0444] <sfink>
I'm very fuzzy on what the current state is. It seems like you had a lot done, for an unclear definition of "done".

[14:38:55.0120] <Waldo>
I can be around here til 18:30 today, if you want to budget time to shop.

[14:39:14.0122] <Waldo>
I...think, I might have been about at the point where...hmm.  I don't remember clearly at this point.

[14:39:50.0248] <Waldo>
/me stabs Fedoras window manager for making workspace shifting be horizontal rather than vertical, messing with all his muscle memory and mental model

[14:39:59.0222] <sfink>
ok, I'll ping you when I get back in 1h30 or so

[14:40:12.0972] <sfink>
lies. I'm using Fedora, and I have 3x2

[14:40:31.0415] <sfink>
Fedora 33, anyway

[14:40:33.0788] <Waldo>
I updated to 34 recently, and I haven't found a setting for workspace layout yet.

[14:40:38.0339] <sfink>
oh, wait

[14:40:45.0771] <sfink>
I should probably specify that I'm using xfce4

[14:40:51.0466] <Waldo>
And 32->34 changed from vertical scrolling to horizontal.

[14:40:55.0932] <sfink>
never mind

[14:41:03.0409] <Waldo>
Uh, yeah, xfce4 is not really GNOME.  :-P

[14:52:56.0225] <glandium>
are there known (open) bugs about the JIT itself doing stack overflows?

[14:53:12.0990] <glandium>
as in, generating code that stack-overflows

[15:59:18.0431] <mccr8>
IIRC entry points into the JS engine are supposed to check that there's enough stack space left so I'd assume it is a bug if some place is failing to check properly.

[16:09:07.0746] <sfink>
that's my understanding too

[16:15:22.0784] <sfink>
Waldo: ping

[16:16:15.0168] <sfink>
though come to think of it, if you're going to be around, it'd be nice to find a time when mgaudet can get on a joint call

[16:17:24.0175] <sfink>
also, whoa. This Streams stuff is an enormous amount of work. >12k lines in js/src/builtin/streams/ alone.

[16:18:57.0599] <Waldo>
The streams spec itself is a gonzo number of pages of text, so...

[16:19:33.0725] <sfink>
yeah, I carefully read through some, then less carefully read through more, then started skimming, then started just watching all the pretty words fly up the screen

[16:20:00.0292] <Waldo>
That's pretty much the right approach to take.  Also why a lot of it is far better off as stepwise implementation than anything else.

[16:20:26.0887] <Waldo>
Tho it still sits poorly with me that we have actual honest-to-God promise objects for tracking some of this stuff still.

[16:20:29.0572] <sfink>
(then marveled at the giant index down at the bottom)

[16:28:49.0015] <sfink>
Waldo: not that I'll necessarily understand the answer, but which part of the Streams spec is landed, which parts do you have in progress, and what parts haven't been started at all? Or if that's a complicated answer, I can wait until we talk.

[16:29:52.0698] <Waldo>
sfink: Generally I only touched the pieces directly implicated in `pipeTo`.  The rest of it was preexisting, and I generally didn't alter it.  (The occasional observed bugfix aside.)

[16:30:38.0110] <Waldo>
sfink: Many, perhaps most, of the abstract operations are actually implemented in the various files.  The aops are in files in section order -- but, section numbering that was only there from an old version of the spec that still had section numbers.  üò¨

[16:31:15.0364] <Waldo>
sfink: I think I had comments for spec ops that weren't implemented yet, or maybe I just had them skipped without mention of skipping.  Can't remember.

[16:31:41.0821] <sfink>
I see a "Not implemented." comment for pipeThrough.

[16:32:48.0855] <Waldo>
This is what I see in my (not fully updated) tree:

```
[jwalden@find-waldo-now src]$ ack -i 'not implemented' builtin/streams/
builtin/streams/ReadableStreamOperations.cpp
122:// Not implemented.
181:// Not implemented.

builtin/streams/ReadableStreamInternals.cpp
449:// Not implemented.

builtin/streams/ReadableStream.cpp
277:// Not implemented.
376:// Not implemented.
527:// Not implemented.

builtin/streams/StreamAPI.cpp
386:    // (Omitted. BYOB readers are not implemented.)
```

[16:34:23.0031] <Waldo>
For the most part, the entire streams spec felt too large to really coherently grasp as a whole, and so I mostly tried to understand/implement stuff in demand-based fashion.

[16:37:25.0685] <sfink>
yeah, sounds fair

[16:46:56.0994] <sfink>
so if I have `template<T> class World { ...}; template <> void World::destroy() { ... }; template World<people_t>;`, I expected the `void World<people_t>::destroy()` symbol to be emitted into that compilation unit, but it doesn't seem to be.

[16:47:36.0774] <sfink>
 * so if I have `template<T> class World { ...}; template <> void World<people_t>::destroy() { ... }; template World<people_t>;`, I expected the `void World<people_t>::destroy()` symbol to be emitted into that compilation unit, but it doesn't seem to be.

[16:48:40.0626] <sfink>
no, wait, I still have that wrong. Edit coming.

[16:49:00.0333] <sfink>
 * so if I have `template<typename T> class World { ...}; template <typename T> void World::destroy() { ... }; template World<people_t>;`, I expected the `void World<people_t>::destroy()` symbol to be emitted into that compilation unit, but it doesn't seem to be.

[16:49:03.0982] <Waldo>
Note that `inline` has to be both on declaration _and_ definition for template functions, if you want actual inlining behavior.

[16:49:27.0835] <sfink>
I perhaps should want inlining, but at the moment I don't.

[16:49:43.0097] <sfink>
or rather, I was trying to get it working without inlining first, then figure out what would be possible to inline.

[16:49:59.0688] <sfink>
the class declaration is in my header file. The definition and instantiation are in my .cpp file.

[16:50:30.0393] <sfink>
 * the class declaration is in my header file, with the method only declared. The definition and instantiation are in my .cpp file.

[16:50:52.0162] <sfink>
this is for typed arrays, btw, so I have a finite set of specializations.

[16:50:53.0746] <Waldo>
IMO it is basically a mistake to expose template functions in headers, that are implemented in impl files.

[16:51:29.0864] <Waldo>
Have the template functions be declared and defined in the header, and have them call `detail` implementation functions that are defined in impl files.  Maybe overloaded implementation functions.

[16:53:35.0622] <sfink>
hm, I guess that would work.

[16:57:42.0925] <sfink>
there's already a `detail`-like class (`TypedArrayObjectTemplate<NativeType>`) that I should maybe integrate with. Though I don't really want to have a separate declaration for its interface and implementation, so maybe it's not useful for the `detail` thing.

[16:58:30.0964] <Waldo>
I think as long as the functions are all declared/defined `inline`, the compiler/linker can common them all up in the final binary.

[16:58:53.0298] <Waldo>
Granted you then have gonzo large header files, but better than the alternative.


2021-06-09
[17:06:35.0037] <sfink>
Hm, I'm not sure how to implement `JSObject::maybeUnwrapIf` as a non-templatized `detail` function, overloaded or not.

[17:09:20.0547] <Waldo>
What's wrong with it now?  What are you trying to do?  Doesn't look like that function should be changed from what it is now, at least in my tree (declared inline in the template class, defined out of line, as `inline`, in the same header).

[17:12:13.0750] <sfink>
`JSObject::maybeUnwrapIf` is just fine as it is. I have a `class JS::TypedArray<T> { TypedArray<T> unwrap(JSObject*); }` that I'm trying to implement.

[17:12:32.0146] <sfink>
previously, it was implemented in a .cpp file, so could happily use `maybeUnwrapIf`.

[17:13:10.0824] <Waldo>
And that `JS::TypedArray<T>::unwrap` is supposed to be a public API function?

[17:13:18.0035] <sfink>
yes

[17:13:37.0465] <sfink>
I suppose I could macro-generate `js::detail::MaybeUnwrapIfInt8Array(JSObject*)` etc.

[17:14:00.0710] <sfink>
oh wait, no, then I couldn't call them from the templatized definition, duh.

[17:14:49.0036] <sfink>
Hm.... `js::detail::MaybeUnwrapIf(JSObject*, MyArrayType*)` overloads?

[17:15:02.0414] <sfink>
(where I pass in a casted `nullptr` as the 2nd param)

[17:16:04.0229] <Waldo>
You can have a `namespace detail { template<typename T> class Unwrapper; template<> class Unwrapper<uint8_t> { ... }; ... }` and so on, to handle the various element types.

[17:16:46.0168] <Waldo>
Then call `JS::TypedArray<T>* detail::Unwrapper<T>::unwrapIf(JSObject*)` or so.

[17:17:44.0472] <sfink>
how do I implement `Unwrapper::unwrapIf` in the header, when it needs to know things like the full definition of `TypedArrayObject` that isn't public?

[17:20:34.0345] <Waldo>
Define inline standalone functions that don't need the full definition?  The various class pointers are public JSAPI, if in detail.

[17:21:56.0399] <sfink>
`is<TypedArrayObject>` needs to get the `JSClass*` from it, not just to know the class pointer.

[17:22:11.0741] <sfink>
(I feel like I'm missing something obvious you're trying to convey here.)

[17:22:31.0207] <Waldo>
There are shadow functions to get the `JSClass*` of an object, I'm pretty sure.

[17:23:00.0046] <Waldo>
Or did I not move them from `jsfriendapi.h` yet

[17:23:01.0221] <sfink>
oh, true. So reimplement using public stuff.

[17:23:10.0965] <sfink>
I guess I can see if that's possible.

[17:23:23.0469] <Waldo>
`#include "js/Object.h"           // JS::GetClass`

[17:25:05.0678] <sfink>
ooh boy, it [compares against a set of classes](https://searchfox.org/mozilla-central/rev/c0f286b1f541c675bbe052b21bdefa80d150ec35/js/src/vm/TypedArrayObject.h#194-195)

[17:25:34.0326] <sfink>
I guess I can expose an API just for typed arrays

[17:25:43.0737] <sfink>
there probably already is one

[17:26:45.0359] <sfink>
yep, `JS_IsTypedArrayObject`

[17:26:55.0063] <sfink>
oh wait, but I don't want that; I only want a single class at a time

[17:26:57.0297] <sfink>
never mind

[17:28:00.0420] <sfink>
oh yuck, the existing code first tests against all the different typed array classes, then tests against the one you actually want

[17:28:04.0064] <Waldo>
`JS::GetClass(obj) == js::detail::Int8ArrayClassPtr` and so on

[17:28:08.0647] <sfink>
right

[17:30:06.0160] <sfink>
oh man, I have commented-out code that's much, much closer to the right thing than the stuff I've been trying to get work

[17:33:45.0513] <sfink>
 * oh man, I have commented-out code that's much, much closer to the right thing than the stuff I've been trying to get to work

[22:34:29.0790] <sudipto64>
hi everyone,

I have build spiderMonkey(esr78) in windows by following the steps mentioned in official documentation. For more info regarding build process see this link, https://firefox-source-docs.mozilla.org/setup/windows_build.html#building-firefox-on-windows
When I'm trying to build my testapp.cpp using spiderMonkey in visual studio 2019,it's giving compilation error from GCPolicyAPI.h(line:70) whenever I'm adding jsapi.h in my program.

Error: error C2338: Pointer type not allowed for StructGCPolicy

If I remove "jsapi.h" the program compiles and runs fine.

// testapp.cpp:

#include <jsapi.h>
#include <js/Initialization.h>
int main(void) {
	if (!JS_Init()) return 1;
	JS_ShutDown();
	return 0;
}

[Note: preprocessor used: STATIC_JS_API in project properties]

Can anyone please help me on this, what's wrong I'm doing here?

[22:36:42.0703] <arai>
sudipto64: can you pastebin the entire error message to https://paste.mozilla.org/ ?  I think it has some more context about the error 

[22:37:27.0146] <sudipto64>
okay ..

[22:37:27.0253] <arai>
err, maybe it's bug 1679736

[22:37:28.0848] <botzilla>
https://bugzil.la/1679736 ‚Äî RESOLVED (sfink) ‚Äî Visual Studio 2017 fails to compile SM headers because of StructGCPolicy static assert

[22:40:00.0455] <arai>
if that's the case, you'll need to use version 85 or newer

[22:40:23.0449] <arai>
current mozilla-release, mozilla-beta, or mozilla-central, instead of esr

[22:40:30.0716] <sudipto64>
i have tried with 90 ..but its same ..

[22:41:02.0318] <sudipto64>
 * i have tried with 90 ..but i'm getting same error..

[22:43:39.0017] <arai>
okay, then I'll wait for the error message

[22:44:24.0154] <sudipto64>
you want the visual studio error message or anything else ..?

[22:44:41.0142] <arai>
the error you got for the above code

[22:45:08.0322] <arai>
is "Error: error C2338: Pointer type not allowed for StructGCPolicy" the entire output, or is there some more?

[22:45:45.0786] <arai>
I expect there's some more context about how and where `StructGCPolicy` is instantiated

[22:46:40.0898] <sudipto64>
GCPolicyAPI.h(70,23): error C2338: Pointer type not allowed for StructGCPolicy

[22:46:48.0639] <sudipto64>
this error i got ..

[22:47:05.0592] <arai>
only one line?

[22:48:23.0176] <sudipto64>
GCPolicyAPI.h(89): message : see reference to class template instantiation 'JS::StructGCPolicy<T>' being compiled

RootingAPI.h(896)message : see reference to class template instantiation 'JS::GCPolicy<T>' being compiled

[22:48:36.0383] <sudipto64>
along with these message

[22:49:29.0835] <arai>
which version or revision are you on?

[22:49:44.0971] <arai>
I'll check what the RootingAPI.h line 896 is

[22:50:31.0772] <sudipto64>
esr78 i'm using ..

[22:51:57.0461] <arai>
hmm, I guess, the above context isn't complete.  it's still inside `RootedTraceable` template

[22:52:48.0438] <sudipto64>
what solution u suggest regarding this ..?

[22:53:37.0107] <arai>
figure out how to get complete error message and context from visual studio compilation error, maybe?

[22:54:05.0568] <arai>
also, given above bug, it would be better using 90 or 91 instead, before starting investigating issue

[22:55:08.0059] <sudipto64>
actually first i got this error in 90 ..so i rollback to es78 to check this ..

[22:56:12.0719] <arai>
can you try with 90 again, and look into error message to see how and where the template is instantiated?

[22:59:09.0386] <sudipto64>
error message is identical with 90 ..

[22:59:59.0257] <arai>
which part?

[23:00:34.0380] <arai>
including line numbers in the above "see references to ..." messages

[23:01:00.0382] <sudipto64>
yes ...same as above..

[23:01:51.0009] <arai>
btw, how do you retrieve "90" ?  did you clone and update to certain bookmark?

[23:02:10.0382] <arai>
 * btw, how do you retrieve "90" ?  did you clone mercurial repository and update to certain bookmark?

[23:03:14.0976] <arai>
if it's mozilla-beta (current 90), the line number should be different from mozilla-esr78

[23:03:44.0866] <sudipto64>
i have followed the build process as described in build documentation..this way i get 90 ..  

[23:04:11.0084] <sudipto64>
then i have hg update esr78 to get esr78 ..

[23:04:26.0442] <sudipto64>
 * then i did.. hg update esr78 to get esr78 ..

[23:04:49.0378] <arai>
okay, then how did you go back to 90 now?

[23:05:19.0391] <sudipto64>
i have one backup of 90 ..

[23:05:31.0251] <sudipto64>
which i used ..

[23:05:37.0365] <arai>
what do you mean by backup ?

[23:06:13.0348] <sudipto64>
before doing hg update esr78 ..i have backup old folder ..

[23:06:32.0348] <arai>
which directory?

[23:07:02.0820] <sudipto64>
mozilla-unified

[23:07:26.0385] <arai>
okay, then, can you run `hg parent` there and pastebin the output?

[23:07:56.0965] <sudipto64>
okay ..let me do this ..

[23:15:10.0180] <arai>
once you posted the output to https://paste.mozilla.org/ , please post the URL for the paste here

[23:15:41.0165] <sudipto64>
ok fine..

[23:17:55.0651] <sudipto64>
it seems i told u wrong about error message for 90 ..i was using esr78 ..let me verify this with 90 also..

[02:20:11.0790] <sudipto64>
> <@arai:mozilla.org> okay, then, can you run `hg parent` there and pastebin the output?

please find the output from this link https://paste.mozilla.org/uD1Xznfm

[02:24:34.0798] <sudipto64>
and this link https://paste.mozilla.org/Lbr1XFnd contains error log which i got at time of build my program with 90 ..

[02:29:10.0339] <sudipto64>
> <@arai:mozilla.org> okay, then, can you run `hg parent` there and pastebin the output?

 * arai: hi ..please find the output from this link https://paste.mozilla.org/uD1Xznfm

[02:50:41.0141] <arai>
will check once I get home

[03:15:14.0077] <sudipto64>
ok fine..

[03:26:07.0685] <nbp>
jonco: Shoud https://discourse.mozilla.org/t/compilation-error-with-jsapi-h-in-vs19-with-esr78/81380/2 be fixed in SpiderMonkey?

[03:52:11.0437] <jonco>
nbp: I'm not sure what's going on here. Our docs say that MSVC cannot be used to build the mozilla codebase since 67.  Should we still support it for building SpiderMonkey?

[03:58:21.0531] <jonco>
(I don't understand what's going on with MSVC and why it's trying to instantiate GCPolicy<void*> either.  This should be a compile error and it seems a bit dubious to work round it like this.)

[04:06:28.0154] <jandem>
afaik they're not building SM with MSVC, but embedding it in an application that does, so just our public headers 

[04:43:13.0276] <arai>
looks like, clang instantiate `RootedTraceable<JS::detail::RootListEntry*>` without `RootedTraceable<JS::detail::RootListEntry*>::trace`, but MSVC instantiate both?   https://searchfox.org/mozilla-central/rev/79d73b4aff88dd4a0f06dd3789e1148c49b0de60/js/public/RootingAPI.h#885-901

[04:54:49.0277] <arai>
err, maybe it's more complicate

[05:27:47.0545] <arai>
looks like... static_assert in unused method etc can be skipped if the condition contains template parameter, but there's some difference between clang and MSVC ?

[05:28:14.0120] <arai>
 * looks like... static_assert in unused method (and template instantiation inside it?) etc can be skipped if the condition contains template parameter, but there's some difference between clang and MSVC ?

[05:34:15.0010] <arai>
how do we expect this assertion not hit for JS::details::`RootListEntry*` in the first place?  https://searchfox.org/mozilla-central/rev/79d73b4aff88dd4a0f06dd3789e1148c49b0de60/js/public/GCPolicyAPI.h#70-71

[05:34:53.0757] <arai>
 * how do we expect this assertion not hit for `JS::details::RootListEntry*` in the first place?  https://searchfox.org/mozilla-central/rev/79d73b4aff88dd4a0f06dd3789e1148c49b0de60/js/public/GCPolicyAPI.h#70-71

[05:35:04.0690] <arai>
jonco: ^

[05:50:19.0391] <jonco>
arai: I think the compiler doesn't instantiate Rooted<RootListEntry*> until it's used, and we only create pointers too it.  However the rules around template instantiation are complicated and I don't understand this fully.

[05:54:17.0848] <arai>
I see. thanks :)  I'll try investigating it some more

[06:00:56.0092] <jonco>
arai: I've filed bug 1715538 for this.

[06:00:57.0903] <botzilla>
https://bugzil.la/1715538 ‚Äî NEW (nobody) ‚Äî Error compiling rooting headers with MSVC

[06:01:08.0007] <arai>
thank you!

[06:06:20.0663] <sudipto64>
fyi..with esr78 workaround given in this link: https://gitlab.gnome.org/GNOME/gjs/-/commit/60ae77b1d49e344a8b8e2b2a3c184e7d7f72676f 
working fine.. but with 90 its not working..

[06:15:03.0305] <arai>
for 90, you need to define the workaround specialization for `JS::detail::RootListEntry*` instead of `void*`

[06:41:38.0484] <sudipto64>
thank you!! ..it's worked 

[06:47:11.0372] <tcampbell>
arai: if you have access to the discourse, can you reply there too?

[06:51:59.0867] <arai>
replied

[06:55:29.0972] <tcampbell>
ty

[07:59:32.0901] <arai>
hmm, indeed, it looks like compiler bug or some such.  I'm trying to create a minimal testcase, and the error happens in very specific case (removing parameter, or removing inheritance, etc stops the error)

[08:00:25.0844] <arai>
current testcase https://paste.mozilla.org/bdyp9LPn

[08:01:01.0390] <arai>
there would be some more space to minimize

[08:01:51.0063] <arai>
removing `VirtualTraceable` inheritance stops.  removing ‚ÄúJSContext*` parameter from `Rooted` stops

[08:02:00.0439] <arai>
 * removing `VirtualTraceable` inheritance stops.  removing `JSContext*` parameter from`Rooted` stops

[08:28:09.0841] <arai>
posted minimal testcase on bug 1715538

[08:28:11.0655] <botzilla>
https://bugzil.la/1715538 ‚Äî NEW (nobody) ‚Äî Error compiling rooting headers with MSVC

[08:38:36.0839] <arai>
so, unless it's some kind of UB (not sure), adding the specialization would be the simplest workaround

[08:49:14.0995] <jonco>
sfink: ping

[09:32:10.0085] <sfink>
jonco: I looked at bug 1714532. Patch is in your queue.

[09:32:12.0015] <botzilla>
https://bugzil.la/1714532 ‚Äî ASSIGNED (sfink) ‚Äî Assertion failure: isIncremental, at gc/GC.cpp:6976 with OOM

[09:33:09.0041] <jonco>
sfink: that was quick, thanks!

[09:51:42.0915] <jonco>
sfink: hazard builds are broken on my autoland push - any idea what this means? https://treeherder.mozilla.org/logviewer?job_id=342283352&repo=autoland&lineNumber=12381

[09:52:52.0131] <sfink>
ugh, it's a crash in the plugin.

[09:53:06.0124] <sfink>
https://treeherder.mozilla.org/logviewer?job_id=342283352&repo=autoland&lineNumber=12019

[09:53:54.0862] <jonco>
hmm, 'internal compiler error' doesn't look good 

[09:54:17.0880] <sfink>
something about that destructor is making sixgill unhappy

[09:54:40.0721] <sfink>
I can grab your patches from try, I guess

[09:54:53.0523] <sfink>
er, autoland

[09:56:09.0844] <sfink>
oh right, it's on autoland, which means I already have them. Cool.

[09:57:00.0422] <sfink>
this is the sort of thing it would be good to have that fancy new build machine for...

[09:57:25.0025] <jonco>
hah yeah

[09:58:28.0399] <sfink>
hopefully I can just try to compile that one file

[10:10:45.0660] <sfink>
jonco: it looks like it'll take me some time to get to the compile where this happens. But it's in progress. Hopefully I'll have something by tomorrow.

[10:14:40.0743] <sfink>
though I did just manage to reproduce locally

[10:15:03.0192] <sfink>
now to get it with a non-stripped xgill.so

[10:23:07.0975] <jonco>
sfink: ok thanks!  


2021-06-10
[03:27:03.0859] <smaug>
pbone: have any telemetry numbers changed since the gc scheduling tweaks landed?

[06:08:24.0629] <er.das.surajeet>
Why does reviewers get blocked while submitting a patch ?

[06:08:32.0918] <er.das.surajeet>
https://phabricator.services.mozilla.com/D117419

[06:20:40.0160] <arai>
er.das.surajeet: in phabricator, if there are multiple (non-blocking) reviewers, the patch can be landed when one of them approved the patch.  then, if there is "blocking reviewer", the patch must be approved by the "blocking reviewer" before landing, even if other person approved

[06:23:06.0303] <nbp>
> <@sfink:mozilla.org> but from the sound of it, I agree with tcampbell that you'd probably want to run through a series of delazifications and stop when needed. I don't know enough about delazification to know how they should be scheduled. I'm kind of interested -- maybe we can get on a call at some point?

My goal is first to make it possible to schedule delazification with a given policy, and then second challenge everybody to suggest the best scheduling policy at finding which function to delazify first.

[06:24:08.0460] <nbp>
So we would all play the game of: Who is the best delazifier :P

[07:24:09.0043] <jandem>
a simple demo of the WASI port being upstreamed by Fastly and Igalia, you can type code on the left side and SpiderMonkey compiled to Wasm interprets it: https://jandem.github.io/sm-wasi/index.html

[07:51:04.0031] <nbp>
I was starting to play with `getEnv` and `os.file.listDir`, but then realized that this is the WASM sandbox of the browser and not executed remotely on any server.

[07:52:40.0262] <nbp>
 * I was starting to play with `getEnv` and `os.file.listDir`, but then realized that this is the WASM sandbox <del>of the browser</del> _implemented in JS_ and not executed remotely on any server.

[07:57:23.0603] <nbp>
However, the completion which suggest MS* symbols :/

[07:59:28.0220] <tcampbell>
I'm impressed with how responsive it is to live execute as you type

[07:59:42.0780] <jandem>
hah yeah it uses the editor from VSCode, maybe we can just turn off completion

[08:00:03.0986] <tcampbell>
I was about to ask how the magic editor works

[08:00:10.0083] <tcampbell>
this is very cool

[08:00:23.0045] <jandem>
it triggers a run every 500 ms I think, unless nothing changed. It could probably be less. Initially it was every keystroke which made typing noticeably slower

[08:00:32.0706] <tcampbell>
ah

[08:00:47.0878] <tcampbell>
and reset the VM each time?

[08:01:06.0285] <tcampbell>
clearly need to get the self-hosted.xdr working :)

[08:03:09.0488] <jandem>
yeah it recreates most things except for the wasm module. Hm maybe we could use the wizer thing to create a snapshot after shell startup

[08:03:46.0984] <nbp>
technically we could make the self-hosted.xdr work with it.

[08:04:17.0200] <nbp>
I do not see any limitation to it, as long as we can set the command line arguments.

[08:04:56.0788] <nbp>
So each re-evaluation could benefit from not having to parse the self-hosted code again :D

[08:05:32.0502] <jandem>
that's a good idea, I think we could just write the xdr file to the in memory file system and pass it as argument 

[08:05:52.0658] <tcampbell>
the self-hosted stencil also helps speedup startup a fair bit when it lands. avoids the gc on startup and some execution

[08:06:33.0801] <nbp>
16 ms on actual hardware, probably more with wasm overhead

[08:10:14.0221] <nbp>
oh ‚Ä¶ webrender has some really hard time display the last characters of a single line source file. We can see rounding error visually in the horizontal positioning of letters.

[08:10:16.0106] <jandem>
it's easy to get stuck in an iloop, not sure how to avoid that, maybe using workers could mitigate a bit

[08:10:38.0368] <tcampbell>
jandem: what about the watchdog?

[08:10:40.0272] <nbp>
The shell has a timeout mechanism

[08:10:41.0923] <tcampbell>
I guess we have no threads..

[08:10:49.0448] <jandem>
yeah wasi disables that I think

[08:13:00.0580] <jandem>
if we clean this up and optimize startup, it could be nice for the website to demo new features

[08:13:30.0461] <nbp>
Only if we were able to streamline the compilation process.

[08:15:03.0568] <jandem>
ideally it would pull the latest wasm file from the CI build they're adding

[08:16:19.0993] <nbp>
https://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate

[08:17:51.0336] <jandem>
moving into a worker would be nice for responsiveness too, we can trigger runs more frequently then

[09:19:03.0369] <Redfire>
I don't think anyone has sent this here yet so: https://youtu.be/pa_ir5VPkz4
Starts in 40 minutes

[09:21:01.0063] <mgaudet>
Oh neat. Thanks :) 

[09:49:55.0659] <yulia>
_dying in a corner_

[09:50:28.0988] <yulia>
10 minutes. oh god

[09:50:44.0790] <iain>
You'll be great!

[09:59:54.0309] <Redfire>
it's about to start very soon

[10:04:39.0503] <nbp>
(final countdown music?)

[10:08:20.0942] <mgaudet>
And we're live :) 

[10:36:00.0962] <nbp>
/me wonders who Excel in JavaScript?

[10:39:02.0139] <yulia>
gahhh nervousness is real

[10:43:06.0897] <nbp>
Formalize the Date format!

[11:39:01.0828] <Redfire>
Post-show now, hope you're feeling fine üôÉ

[11:42:07.0702] <yulia>
blergegeggg

[11:42:16.0908] <yulia>
I have no idea what i said

[11:46:33.0979] <tcampbell>
yulia: I thought your clarification about realms was good

[11:47:13.0259] <yulia>
i hope i got it right, i wasn't sure if remote *execution* is possible, i don't think it is but i couldn't say for sure

[11:47:38.0557] <tcampbell>
I don't think being a little cautious is wrong

[11:48:39.0508] <tcampbell>
your point about avoiding telling yourself you are getting "some security" stands

[11:49:17.0381] <yulia>
yeah, that was the most important thing -- we have been trying to clarify that for quite some time and it really makes the realms proposal a little risky

[11:50:25.0165] <tcampbell>
the normal risk is stealing API keys which is roughly equiv to code execution in many cases

[11:51:41.0891] <yulia>
yep


2021-06-11
[17:02:37.0077] <pbone>
> <@smaug:mozilla.org> pbone: have any telemetry numbers changed since the gc scheduling tweaks landed?

No, I checked maybe a week ago and didn't notice any change.  The new telemetry I added looks good too.  I think both these things make sense because those patches are for preventing rare cases of badness. because they're rare they probably won't affect telemetry like TOTAL_MEMORY or GC times much.

[17:07:42.0846] <pbone>
In an e-mail with mccr8, jonco and sfink, mccr8 asked about this change https://telemetry.mozilla.org/new-pipeline/evo.html#!aggregates=Median!Mean!5th%2520percentile!25th%2520percentile!75th%2520percentile!95th%2520percentile&cumulative=0&end_date=2021-04-19&include_spill=0&keys=!__none__!__none__&max_channel_version=nightly%252F90&measure=GC_MAX_PAUSE_MS_2&min_channel_version=nightly%252F89&processType=content&product=Firefox&sanitize=1&sort_keys=submissions&start_date=2021-03-21&trim=1&use_submission_date=0 which jonco said it was bug 1711610. So if that's why you're asking it's probably unrelated.

[17:07:44.0157] <botzilla>
https://bugzil.la/1711610 ‚Äî RESOLVED (toshi) ‚Äî Should not trigger the tab unloader when the page file usage is low

[22:17:49.0690] <sudipto64>
hi everyone ..is there 32 bit version of spidermonkey available for windows ?

[22:18:16.0337] <arai>
do you mean JS shell binary?

[22:18:56.0058] <sudipto64>
i mean spidermonkey dll & lib ..

[22:20:01.0098] <arai>
I don't think there's pre-compiled dll or library

[22:20:37.0296] <arai>
you'll need to build it

[22:21:01.0067] <sudipto64>
can i build one as 32 bit ..?

[22:21:29.0982] <arai>
at least JS shell is built for windows 32bit on automation

[22:23:23.0942] <sudipto64>
> <@arai:mozilla.org> you'll need to build it

can you please help on this ..i have followed the build process same as official documentation. Which generates 64 bit..

[22:23:50.0654] <arai>
you need to specify the target architecture, in mozconfig file

[22:24:49.0479] <arai>
`ac_add_options --target=i686-pc-mingw32`

[22:25:09.0779] <arai>
that will tell the build system to build 32bit binary

[22:25:36.0889] <arai>
also, you'd better creating separate mozconfig file, with different MOZ_OBJDIR path, so that those 2 won't be mixed

[22:27:00.0021] <sudipto64>
can i configure this MOZ_OBJDIR path ?

[22:28:00.0698] <arai>
yes, you can specify any directory

[22:29:13.0212] <sudipto64>
in which config ..i need to specify this ?

[22:29:31.0190] <arai>
have you created mozconfig file?

[22:29:56.0961] <arai>
https://firefox-source-docs.mozilla.org/js/build.html

[22:30:23.0191] <arai>
to follow the document, configuration file would be stored in `~/mozconfigs/`

[22:30:33.0099] <sudipto64>
yes ..i follwed this steps ..

[22:30:58.0114] <sudipto64>
it's created mozconfig file..

[22:31:07.0895] <arai>
then, you can create a new file there, with almost same content, but adding the above `ac_add_options --target=i686-pc-mingw32` line, and with different MOZ_OBJDIR path

[22:31:35.0902] <arai>
and specify the file in `MOZCONFIG` environment variable when building

[22:34:34.0020] <sudipto64>
ok i created one copy of MOZCONFIG ..and added that config ..

[22:35:06.0249] <sudipto64>
but i didn't found this MOZ_OBJDIR in this MOZCONFIG ..

[22:35:30.0547] <arai>
do you mean your file doesn't contain the line?

[22:36:14.0904] <arai>
what's the content?

[22:39:25.0192] <sudipto64>
content of mozconfig https://paste.mozilla.org/RGD4a3hV

[22:40:46.0316] <arai>
try following the document

[22:40:50.0691] <arai>
there are more content

[22:45:09.0022] <sudipto64>
which document ? 

[22:45:26.0451] <arai>
https://firefox-source-docs.mozilla.org/js/build.html

[22:46:45.0655] <sudipto64>
thanks a lot ..

[03:34:08.0910] <nbp>
I have a naming question ‚Ä¶ when you are dealing with caches, we frequently name "cache hit" when an entry exists, "cache miss" when an entry does not exists, but do we have any equivalent hit/miss for the registration of the cache entries?  Such as adding an entry in a cache which would be hit later, or adding an entry in the cache but it would never be used later?

[03:34:38.0066] <nbp>
What would be a good name for a registered-hit and a registered-miss ?

[06:55:10.0047] <tcampbell>
this is a form of speculation, right? speculation-hit speculation-miss?

[06:55:16.0377] <tcampbell>
 * nbp: this is a form of speculation, right? speculation-hit speculation-miss?

[06:57:49.0534] <tcampbell>
I guess "misprediction" is what we talk about for branch-predictors

[06:58:49.0860] <tcampbell>
predictor hit / miss

[08:02:19.0740] <sfink>
adding a useless vs useful entry, maybe?

[08:02:34.0413] <sfink>
cache hits/misses are a little easier because they're from the perspective of a probe, so they're simple booleans

[08:02:46.0061] <sfink>
a registration could be completely useless, or have a varying number of future hits, and the timing matters a little too (as in, if you're registering something that will be used but only after a long time, then it's possible that using that space for a different entry might have been better)

[08:18:34.0707] <nbp>
Thanks!

[08:53:36.0775] <sfink>
jonco: how did you avoid the hazard crash in bug 1713335? I'm still looking at that one.

[08:53:38.0426] <botzilla>
https://bugzil.la/1713335 ‚Äî RESOLVED (jonco) ‚Äî Dispatch helper tasks to an external thread pool if one is supplied

[08:53:46.0256] <sfink>
it's similar to a problem I fixed a little while ago

[08:58:39.0703] <jonco>
sfink: I'm a bit confused. I ran into two hazard issues.  The first time that bug got backed out it was because I was calling the dispatch task callback and the analysis didn't know that it can't GC.  I solved that in the usual way by suppressing the analysis when calling the callback.

[08:59:37.0859] <jonco>
The other issue I ran into was when the entire analysis crashed (I think that's the one you're talking about). Retriggers showed it starting before my push so I wasn't affected, but I don't know how the sheriffs handled it.

[09:00:03.0331] <sfink>
ah, ok. Yes, that's the one I was talking about.

[09:01:10.0030] <sfink>
(and it's related to HTTP network code, nothing to do with what you're changing as far as I can tell)

[09:03:25.0941] <jonco>
ok cool


2021-06-12
[03:56:44.0094] <sudipto64>
hi ..everyone ..can anyone help me about this error : https://paste.mozilla.org/SCXBTcGN

[04:08:56.0848] <sudipto64>
i'm using esr78 ..

[04:13:02.0478] <sudipto64>
 * i'm using esr78 ..code snippet : https://paste.mozilla.org/vQtkv3nf 

[04:35:11.0583] <arai>
sudipto64: just for testing, does it build if you replace `&JS::DefaultGlobalClassOps` with `nullptr` ?

[04:35:24.0291] <arai>
to check if the issue is only about that symbol

[04:43:01.0187] <sudipto64>
with nullptr in place of &JS::DefaultGlobalClassOps ..build is successful.. 

[04:43:46.0978] <sudipto64>
so it seems issue is about this &JS::DefaultGlobalClassOps symbol ..

[05:00:29.0480] <arai>
how do you link against SpiderMonkey ?

[05:03:58.0472] <sudipto64>
using ..link against a library

[05:04:30.0396] <arai>
so, you've created .lib file?

[05:04:52.0818] <sudipto64>
yes ..

[05:05:34.0906] <arai>
can you check what symbols the file exports, and see if the `JS::DefaultGlobalClassOps` is exported there?

[05:22:20.0358] <sudipto64>
i didn't get how to see export symbols list ..

[05:25:39.0203] <arai>
sudipto64: does this help?  https://stackoverflow.com/questions/305287/how-to-see-the-contents-of-windows-library-lib

[05:27:05.0369] <sudipto64>
one thing ..i'm using STATIC_JS_API .in preprocessor ..

[05:27:45.0120] <arai>
what do you mean?

[05:28:18.0205] <arai>
do you mean the macro is defined when you build your application?

[05:28:22.0173] <arai>
if so, you need to remove it

[05:28:38.0104] <arai>
https://searchfox.org/mozilla-central/rev/4c06787a227b9f46ae22b70611f1213891d72e03/js/src/jsapi.h#536

[05:28:42.0487] <sudipto64>
yes i have defined this ..

[05:28:47.0072] <arai>
https://searchfox.org/mozilla-central/rev/4c06787a227b9f46ae22b70611f1213891d72e03/js/src/jstypes.h#40-55

[05:29:11.0498] <arai>
`JS_PUBLIC_DATA` macro used for the symbol is defined to different thing based on the macro

[05:29:27.0775] <arai>
and when you build an application that links to SpiderMonkey library, you shouldn't define anything that affects it

[05:29:37.0237] <sudipto64>
i got some compile error related with dllimport ..so i have added this static_js_api ..

[05:39:05.0362] <arai>
err, maybe I'm misunderstanding

[05:39:14.0401] <sudipto64>
can you please tell me js_static_api is used for which purpose. And if I build .lib using spidermonkey then this marco is not needed right ?  

[05:39:48.0275] <arai>
what have you created,  .lib file alone, or .dll file also?

[05:40:37.0973] <arai>
(I don't remember correctly about static link vs dynamic link situations for windows tho...

[05:40:55.0130] <arai>
I thought, `.lib` file is used for both

[05:41:20.0441] <sudipto64>
I've created one lib with some function of spidermonkey ....using that lib from another application(exe)..

[05:42:19.0791] <arai>
hmm, in that case I guess having STATIC_JS_API is fine

[05:42:56.0720] <arai>
can you try look into the lib file, following the above stackoverflow link?

[05:43:08.0980] <arai>
I guess, you an see a list of defined symbols

[05:43:14.0087] <arai>
 * I guess, you can see a list of defined symbols

[05:43:19.0487] <sudipto64>
ya ..let me check 

[05:43:44.0998] <arai>
I wonder if the mangled name differs

[05:59:10.0755] <sudipto64>
yes ..JS::DefaultGlobalClassOps is there in the list of symbols ..

[06:05:44.0752] <arai>
what's the exact name there?

[06:06:53.0920] <arai>
is it shown exactly as `JS::DefaultGlobalClassOps` ?

[06:07:52.0657] <arai>
if so, I think there's some option or something to show names without demangling (see https://en.wikipedia.org/wiki/Name_mangling for more details)

[06:08:07.0188] <arai>
also, does the tool show the detail of the symbols?   like, whether it's exported or not, etc

[06:24:33.0028] <sudipto64>
this i got from my .lib.. https://paste.mozilla.org/UWij9PiG 

[06:25:19.0780] <arai>
Can you compare that line with the line for other symbol that you use?

[06:25:24.0193] <arai>
to see what the difference is

[06:26:04.0661] <arai>
I wonder what the "UNDEF" part means

[06:29:23.0970] <sudipto64>
I've compared with JS_NewContext..that also have 

[06:29:41.0558] <sudipto64>
 * I've compared with JS_NewContext..that also have UNDEF & external

[06:39:09.0670] <arai>
no other differences?

[06:39:31.0402] <arai>
can you compare the mangled name between the link error ?  (the above pastebin already expired

[06:41:49.0652] <sudipto64>
which pastebin you are talking about ?

[06:47:56.0863] <sudipto64>
i've compared the mangled name between exports symbols list of my .lib & mozjs-78.lib ..both are same

[06:48:14.0347] <sudipto64>
 * i've compared the mangled name between export symbols list of my .lib & mozjs-78.lib ..both are same

[06:53:01.0115] <arai>
I mean, the message about the link error.  I thought it mentioned the name of the symbol that's not found, both original name and mangled name

[06:54:33.0033] <sudipto64>
mangled name : DefaultGlobalClassOps@JS@@3UJSClassOps@@B

[06:59:47.0007] <sudipto64>
one thing i tried just now ..modified the declaration of JS::DefaultGlobalClassOps with __declspec(dllimport) in jsapi.h ..it's worked ....

[07:01:36.0970] <arai>
hmm, I wonder why the behavior differs between other symbols...

[07:03:21.0566] <sudipto64>
yeah ..it's bit interesting.. 

[07:27:21.0924] <sudipto64>
now my question is shall I remove STATIC_JS_API macro ..?

[07:33:26.0937] <tcampbell>
The DefaultGlobalClassOps uses JS_PUBLIC_DATA instead of JS_PUBLIC_API elsewhere. It is possible some workaround someone for JS_PUBLIC_API isn't being applied to JS_PUBLIC_DATA. The JS_PUBLIC_DATA will add the dllimport stuff if the build options are set correctly. (I'm not sure what "correctly" means in this case though..)

[07:35:19.0263] <tcampbell>
(Make sure you are using the header files in the output directory where you built spidermonkey instead of the original source. Various configuration headers are generated and there is a difference between the dllexport and dllimport versions)

[07:37:06.0403] <tcampbell>
(I generally make sure I `mach build install` or `make install` to generate the correct outputs for linking elsewhere)

[07:38:31.0598] <sudipto64>
I'm using headers from the output directory ..where I built spidermonkey..

[07:39:11.0384] <tcampbell>
from the `obj-foo/dist/..` directory? or from `obj-foo/js/..`

[07:39:19.0934] <tcampbell>
(I think the first one is what you want

[07:39:25.0015] <tcampbell>
 * (I think the first one is what you want for this dll case)

[07:40:49.0841] <sudipto64>
from dist\include ..I using

[07:44:56.0120] <tcampbell>
If you are trying to link to a dll, you probably want to remove the STATIC_JS_API. What error did you get before?

[07:45:43.0626] <sudipto64>
let me share those error ..

[07:46:06.0223] <tcampbell>
/me tries a local windows dll build..

[07:52:50.0163] <sudipto64>
if I remove STATIC_JS_API then I'm getting these errors: https://paste.mozilla.org/cxtLAtwa

[07:57:04.0644] <tcampbell>
that suggests that some JS_PUBLIC_API annotation is missing. This might be an issue in the esr78 that was fixed later (I'm testing 91 locally..). It also might be due to the compiler you are using (I am using the mozbuild environment to build the DLL and then normal visual studio for my test application)

[08:00:17.0086] <tcampbell>
oh most of those are warnings..

[08:04:07.0680] <tcampbell>
You could try removing the JS_FRIEND_API from these two places https://searchfox.org/mozilla-esr78/source/js/public/AllocPolicy.h#112,178

[08:04:19.0675] <tcampbell>
(which are what your error messages point to)

[08:07:09.0841] <tcampbell>
(the simplest though is probably to build the spidermonkey.dll outside of visualstudio)

[08:09:36.0968] <sudipto64>
> (the simplest though is probably to build the spidermonkey.dll outside of visualstudio)

yeah ..it seems..

[08:11:05.0848] <sudipto64>
> You could try removing the JS_FRIEND_API from these two places https://searchfox.org/mozilla-esr78/source/js/public/AllocPolicy.h#112,178

i removed this ..from those places ..now its built ..with rest warnings 

[08:21:12.0790] <tcampbell>
ah, I get the same error message...

[08:26:58.0060] <tcampbell>
oh.. this is just wrong :)

[08:31:00.0412] <tcampbell>
Filed Bug 1716147. We should be able to get this fixed for the next ESR.

[08:31:01.0744] <botzilla>
https://bugzil.la/1716147 ‚Äî NEW (tcampbell) ‚Äî TempAllocPolicy has inconsistent JS_PUBLIC_API definitions

[08:32:41.0874] <sudipto64>
so..with esr78 it needed to remove from allocpolicy.h ..

[08:33:31.0297] <tcampbell>
I _think_ the fix is to make it `class JS_PUBLIC_API TempAllocPolicy : ...` and remove the annotations from onOUtOfMemory..

[08:34:09.0955] <tcampbell>
/me tries

[08:39:24.0207] <sudipto64>
okay ..thanks ..

[08:40:27.0149] <sudipto64>
one more thing ..you have any idea about that warning ?

[08:41:10.0062] <tcampbell>
not at the moment. I _think_ if there is a problem down the road, the build will just break.

[08:41:51.0739] <tcampbell>
but if it hasn't been fixed previously, then it is likely you'd need to do something unusual with the API to hit that edge case

[08:42:08.0889] <tcampbell>
so, I _think_ we can ignore for now. I don't see it in my demo

[08:42:18.0600] <tcampbell>
 * so, I _think_ we can ignore for now. I don't see it in my demo (using 91)

[08:44:12.0010] <sudipto64>
ok fine ..

[08:45:27.0245] <sudipto64>
might be i'll face more difficulties ..I'm migrating 1.6 to esr78 :)

[08:45:47.0026] <tcampbell>
good luck :)

[08:45:51.0810] <tcampbell>
what sort of application is this?

[08:47:53.0044] <sudipto64>
Enterprise workflow application...used for ocr, barcode, image processing, http, zip/unzip..

[08:48:01.0980] <tcampbell>
ah, interesting

[08:48:48.0108] <sudipto64>
thanks ..

[08:49:59.0233] <tcampbell>
well, feel free to keep asking question. Part of the reason for the state of embeding is we have no idea what people are using it for and what is actually useful. Things are getting better though.

[08:50:42.0022] <tcampbell>
Discourse is also a place to ask questions if you prefer forum-style over chat-style https://discourse.mozilla.org/c/spidermonkey/551

[08:50:59.0282] <tcampbell>
I guess you are alrady there :)

[08:52:55.0632] <sudipto64>
yes i'm there also I have posted one issue few days back ..there build issue with esr78 

[08:53:07.0567] <sudipto64>
 * yes i'm there ..also I have posted one issue few days back ..there build issue with esr78 

[08:53:52.0240] <tcampbell>
yeah, I just hit that in my demo... :|

[08:54:30.0776] <sudipto64>
oh!!! üòÄ

[09:05:03.0826] <tcampbell>
with the two changes, my simple demo works. I also tried 32-bit windows that you asked about last week and it is fine.

[09:05:51.0242] <tcampbell>
 * with the two changes, my simple demo works. I also tried 32-bit windows that you asked about last week and it is fine. (actually, the third change is `--disable-jemaloc`)

[09:05:55.0366] <tcampbell>
 * with the two changes, my simple demo works. I also tried 32-bit windows that you asked about last week and it is fine. (actually, the third change is `--disable-jemalloc`)

[09:08:29.0549] <sudipto64>
okay fine ..is there any documentation regarding different options for MOZCONFIG ..

[09:09:29.0041] <sudipto64>
what spidermonkey dll I've built that size is 20mb ..is it normal ?

[09:09:58.0934] <tcampbell>
https://searchfox.org/mozilla-esr78/source/js/moz.configure is probably the best. The options change overtime and not all configurations are tested

[09:12:30.0110] <tcampbell>
20mb dll is what I get as well. If you scroll back to May 28, 2021 in this channel, you can see some recent discussion of binary size.

[09:13:42.0987] <tcampbell>
TL;DR: JS is a huge and complex language. Multiple parsers, JITs, and debuggers quickly add up. High-performance engines like SpiderMonkey and V8 are all quite large.

[09:14:26.0557] <tcampbell>
 * TL;DR: JS is a huge and complex language. Multiple parsers, JITs, Internationalization and debuggers quickly add up. High-performance engines like SpiderMonkey and V8 are all quite large.

[09:19:39.0395] <tcampbell>
(Things can be cut down to make it much smaller, but that is expert mode)

[09:20:01.0032] <tcampbell>
/me off to find sunshine

[09:36:17.0592] <sudipto64>
okay ..thank you ...


2021-06-13
[20:52:22.0190] <DerekNonGeneric>
there was talk about playing Factorio on the day you all invited me to this room 

[20:54:50.0776] <DerekNonGeneric>
was too broke to buy it when you all had mentioned it, but been meaning to check it out. Would anyone happen to know if it is worth the money? I have heard that it can be very addictive

[20:56:01.0682] <DerekNonGeneric>
 * there was talk about playing Factorio when you all invited me to this room 

[21:07:58.0216] <iain>
The website has a free demo: https://www.factorio.com/download

[21:10:49.0215] <DerekNonGeneric>
wow, going to check it out then. üòõ Thanks!

[10:33:41.0271] <Redfire>
So, I was a bit bored, so I ran `tokei` on SM 87(I believe, its the one I have cloned rn)

[13:02:17.0955] <tcampbell>
Almost all that JS is the test cases. There is about 20k of JS that is part of the engine though. 500k code-lines for the C++/H files sounds about right for SpiderMonkey though.

[13:48:12.0295] <tcampbell>
The ECMAScript spec itself is 43k lines

[15:57:53.0531] <tcampbell>
I am pretty tempted to do a global replacement of JS_FRIEND_API with JS_PUBLIC_API.. The distinction these days is pretty silly.

[15:59:00.0456] <ewlsh>
üíî

[15:59:17.0092] <ewlsh>
(üòÇ)

[16:00:37.0490] <tcampbell>
(based on the previous meanings, all APIs should be "friend" anyways since compat with js-1.x has sailed long ago)

[16:02:34.0246] <ewlsh>
Generally js:: was an amalgam of experimental, new language features, or deeper engine access. Though with 91 a lot has been realigned into experimental headers and JS:: headers.

[16:02:51.0054] <ewlsh>
So ü§∑‚Äç‚ôÇÔ∏è

[16:03:08.0335] <ewlsh>
Though it's fun to be your friend üëã

[16:03:10.0580] <tcampbell>
yeah, I think the experimental headers is a bit more direct than "JS_" vs "JS::" vs "js::"

[16:03:21.0391] <tcampbell>
all embedders are friend

[16:03:58.0469] <tcampbell>
the whole "JS_" is from the before-times when the API was in C

[16:04:32.0293] <ewlsh>
I always assumed the embedders that only used JS* were acquantences ü§∑‚Äç‚ôÇÔ∏è

[16:04:39.0293] <tcampbell>
lol

[16:05:22.0104] <ewlsh>
It'll be nice once JS_ is largely gone, remembering what prefix common ops are under can be a tad annoying.

[16:05:45.0839] <tcampbell>
I never have any idea and just check searchfox every time

[16:07:54.0624] <ewlsh>
VSCode intellisense is pretty good so I generally just start typing the ops name and let it figure out prefixing. But if I don't remember the op name then it gets interesting. Being able to just search JS:: would def be nice.

[16:08:47.0116] <tcampbell>
ewlsh: question.. why is gjs ever compiled with msvc üò≤ https://gitlab.gnome.org/GNOME/gjs/-/merge_requests/576

[16:09:11.0116] <ewlsh>
The GNOME stack supports Windows üëÄ

[16:09:21.0610] <tcampbell>
wait, what?

[16:09:30.0646] <tcampbell>
I missed a memo over the years..

[16:10:08.0221] <ewlsh>
I mean support got a bit iffy in the 2010s but GTK4 has put more emphasis on decent Windows support

[16:10:25.0221] <ewlsh>
Inkscape, GIMP, and others run on Windows and are GTK/GNOME based

[16:10:49.0714] <tcampbell>
ohhh that makes sense

[16:11:33.0366] <ewlsh>
GJS is used less on other platforms than GNOME's Python bindings, but some GIMP plugins are written in JS, for example, and so is our ebook reader among other things.

[16:11:59.0465] <tcampbell>
cool


2021-06-14
[02:10:21.0457] <l11d>
I'm trying to understand the difference between JS_FN and JS_INLINABLE_FN. only JS_INLINABLE_FN can be called from ion code, i.e. a js function calling a JS_FN cannot be ion optimized, correct? why would a function be JS_FN instead of JS_INLINABLE_FN?

[02:23:27.0458] <jandem>
l11d: all functions can be called from Ion code, but the ones marked JS_INLINABLE_FN have special JIT optimizations (see [this list](https://searchfox.org/mozilla-central/source/js/src/jit/InlinableNatives.h)), for example `Math.abs` can be just a few machine instructions without a call. Doing this requires extra code and is a lot of work for more complicated builtins

[02:34:26.0078] <nbp>
That's why we should not regress OCtane raytrace benchmark!

[02:34:30.0135] <nbp>
 * That's why we should not regress Octane raytrace benchmark!

[02:38:46.0281] <l11d>
> <@jandem:mozilla.org> l11d: all functions can be called from Ion code, but the ones marked JS_INLINABLE_FN have special JIT optimizations (see [this list](https://searchfox.org/mozilla-central/source/js/src/jit/InlinableNatives.h)), for example `Math.abs` can be just a few machine instructions without a call. Doing this requires extra code and is a lot of work for more complicated builtins

thank you. seems like I just didn't call the js function often enough but I got it to work

[02:39:21.0179] <nbp>
https://searchfox.org/mozilla-central/source/js/public/experimental/JitInfo.h#139  The JS engine and the DOM can register some function calls and provide properties about them, such as AliasAnalysis info. This is useful for the optimizing JIT to fold similar operation, even if these calls are in-between

[02:41:14.0116] <l11d>
so I could write a custom function (in cpp) that doesn't invalidate aliasanalysis?

[02:42:18.0274] <nbp>
no invalidate, but refine anlias analysis.

[02:43:17.0855] <nbp>
For example: `x = obj.a; foo(); x += obj.a;` will avoid loading a twice if `foo` alias set is `None`.

[02:43:30.0725] <nbp>
 * For example: `x = obj.a; foo(); x += obj.a;` will avoid loading `obj.a` twice if `foo` alias set is `None`.

[02:44:11.0986] <nbp>
The alias set determines what can be mutated by the function.

[02:45:32.0765] <nbp>
 * (edit: Yes, but ‚Ä¶) not invalidate, but refine anlias analysis.

[02:48:39.0795] <l11d>
sounds like something I'd like use, I'll give it a try üôÇ

[05:42:56.0563] <miles>
Hello. I'm hoping that someone might be able to help me with a RegExp issue I'm having in my embedding.
I'm using ESR 78 and a user has reported getting a "too much recursion" error.
I've managed to reproduce it with a very simple script.
const str = "Check this sentence for non-whitespace characters";
const patt = /\S/g;
var result = str.match(patt);    // this is the line that provokes the error/exception "too much recursion"
I've tested this in the current version of Firefox and in the js shell I made when compiling 78 and it works without any problems.
I'm clearly missing something obvious or doing something stupid in my embedding.
Does anybody have any idea what I could be doing wrong?

[06:03:47.0668] <nbp>
miles: the current version of Firefox embeddeds v8 regexp engine.

[06:04:04.0974] <jandem>
miles: just to make sure, you're calling JS_SetNativeStackQuota?

[06:04:47.0557] <miles>
Aha! I'm definitely *not* calling JS_SetNativeStackQuota. Do I need to do that when I start up the engine then?

[06:04:52.0051] <nbp>
 * miles: the current version of Firefox embeds [the latest] v8 regexp engine.

[06:05:47.0862] <nbp>
miles: this is how it is done in Firefox: https://searchfox.org/mozilla-central/source/js/xpconnect/src/XPCJSContext.cpp#1206-1339

[06:06:19.0518] <jandem>
yeah on each thread you execute JS on. Just to test if it helps, you could try calling it with a value of 128 KB or so

[06:07:50.0841] <nbp>
miles: if I am correct, this test case might even work in SpiderMonkey shell: https://searchfox.org/mozilla-central/source/js/xpconnect/tests/chrome/test_bug732665_meta.js

[06:08:58.0195] <miles>
Many thanks. I'll try that very shortly...
I've been using https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/tree/next/examples for examples.
I can't see a call to JS_SetNativeStackQuota in the examples.

[06:09:21.0843] <miles>
Are there any other function calls that I need to ensure I do?

[06:21:00.0834] <jandem>
I filed bug 1716324 to use a reasonable default here for when the embedder forgets to set the stack quota (or doesn't really care)

[06:21:02.0565] <miles>
> yeah on each thread you execute JS on. Just to test if it helps, you could try calling it with a value of 128 KB or so

OK. I've tested that and it does the trick. Fantastic üòÄ
Is 128kB a sensible value to use or should I be using something else? If so, how do I determine it?
I'm also slightly concerned that there might be other functions that I should be calling at startup as well as this.
Is there anywhere that I can see what I should be calling?
Apologies for all the questions. It's great that you've manged to fix my problem straight away...

[06:21:02.0747] <botzilla>
https://bugzil.la/1716324 ‚Äî ASSIGNED (jandem) ‚Äî Call JS_SetNativeStackQuota when creating the JSContext

[06:22:21.0425] <Redfire>
So, erm, I still haven't figured out how to turn a rust String into a JSString üôÅ

[06:22:41.0250] <jandem>
miles: [this](https://searchfox.org/mozilla-central/rev/bea2345ce636dc329ac7133fc0a13c9171777e40/js/src/shell/js.cpp#301-305) is what we use for the JS shell

[06:23:26.0016] <jandem>
(I'll probably use those values for the default stack quota)

[06:26:21.0443] <miles>
> (I'll probably use those values for the default stack quota)

OK. I'll use those then.
Many thanks for the help

[07:21:54.0133] <l11d>
> <@nbp:mozilla.org> That's why we should not regress Octane raytrace benchmark!

is there a recent regression on octane somehow related to aliasanlaysis?

[07:35:27.0363] <yulia>
Redfire: did you take a look at how servo is doing it?

[07:36:07.0041] <yulia>
this might be a good starting point: https://github.com/servo/servo/search?q=JS_NewStringCopyN

[07:43:45.0389] <Redfire>
I didn't see any instances last time if I remember correctly

[07:44:00.0300] <Redfire>
but I'll try again

[07:46:43.0561] <yulia>
something along the lines of this? https://github.com/servo/servo/blob/56d12d8a869467d292eec2b11d90669bf61c0b07/components/script/script_module.rs#L1465-L1469

[07:46:51.0975] <yulia>
I think that is the same as_str as in rust

[08:13:11.0761] <nbp>
l11d: This was related to the fact that SpiderMonkey is embedded in Gimp.

[10:49:14.0108] <Redfire>
well.... that's a weird error
```
Assertion failure: (attributes() & ~(JSPROP_ENUMERATE | JSPROP_IGNORE_ENUMERATE | JSPROP_PERMANENT | JSPROP_IGNORE_PERMANENT | JSPROP_READONLY | JSPROP_IGNORE_READONLY | JSPROP_IGNORE_VALUE | JSPROP_GETTER | JSPROP_SETTER | JSPROP_RESOLVING)) == 0, at C:/Users/[REDACTED]/Software/spiderfire/target/debug/build/mozjs_sys-9268feb1144a9721/out/build/dist/include\js/PropertyDescriptor.h:214
```

[11:01:10.0849] <Redfire>
https://searchfox.org/mozilla-release/source/js/public/PropertyDescriptor.h#214-218 that's this one

[11:01:44.0906] <Redfire>
and I have no idea how I'm tripping it, flags are all `(JSPROP_ENUMERATE | JSPROP_READONLY | JSPROP_PERMANENT) as u16`

[11:03:13.0682] <tcampbell>
Is this on esr-78? I'm a little worried this is some 64-bit mismatch garbage =\

[11:03:48.0026] <Redfire>
I believe this is SM 88

[11:04:07.0226] <Redfire>
(SM 89 isn't merged into rust-mozjs yet)

[11:04:07.0535] <tcampbell>
eg We've had a few issues where the .dll/.do is built with JS_64BIT which gives one memory layout, while that flag is missing from public API consumer so the fields are in wrong spot

[11:04:57.0639] <tcampbell>
oh.. I fixed some of these in SM 90 :| https://bugzilla.mozilla.org/show_bug.cgi?id=1708330

[11:05:43.0840] <tcampbell>
https://phabricator.services.mozilla.com/D113742 might be needed

[11:06:24.0467] <tcampbell>
(the JS_64BIT in js-config.h.in) You can also try just forcing JS_64BIT to be defined in your build setup

[11:07:02.0899] <tcampbell>
(This may be way off base, but I recall a few people hitting bizarre failures in things like JSString recently-ish)

[11:08:17.0592] <Redfire>
I guess I should make an issue to `rust-mozjs` then?

[11:11:04.0662] <Redfire>
or is `JS_64BIT` an environment variable?

[11:24:13.0158] <tcampbell>
It is a cpp MACRO. At this is in rust-mozjs? hmm

[11:26:14.0050] <tcampbell>
 * It is a cpp MACRO. And this is in rust-mozjs? hmm

[11:29:13.0118] <tcampbell>
So the failure is when rust-mozjs compiles itself on windows?

[11:32:58.0357] <Redfire>
actually, issue might be not including the "empty function" in the FunctionSpec thing, as in this one
```rs
         JSFunctionSpecWithHelp {
		name: ptr::null_mut(),
		call: None,
		nargs: 0,
		flags: 0,
		jitInfo: ptr::null_mut(),
		usage: ptr::null_mut(),
		help: ptr::null_mut(),
	},
```

[11:33:12.0561] <Redfire>
 * actually, issue might be me not including the "empty function" in the FunctionSpec thing, as in this one
```rs
         JSFunctionSpecWithHelp {
		name: ptr::null_mut(),
		call: None,
		nargs: 0,
		flags: 0,
		jitInfo: ptr::null_mut(),
		usage: ptr::null_mut(),
		help: ptr::null_mut(),
	},
```

[11:33:28.0232] <tcampbell>
oh, the end-of-list sentinel? yeah that would be a problem 

[11:33:33.0462] <Redfire>
appears to be working now

[11:33:41.0063] <tcampbell>
üëçÔ∏è

[11:33:51.0942] <Redfire>
granted, my macro for functions is still utterly broken

[11:34:19.0673] <Redfire>
I was trying to do some stuff for a syntax like this
```rs
#[macro_rules_attribute(js_fn!)]
fn log(cx: IonContext, #[varargs] values: Vec<Value>) -> IonResult<()> {
	println!("logging_test");
	print_indent(false);
	print_args(cx, values, false);
	println!();

	Ok(())
}
```

[11:34:44.0160] <Redfire>
`Value` is the equivalent of `JSVal`

[11:38:05.0259] <Redfire>
And.... it's very complicated to debug because I decided to have recursive macros üôÉ

[12:17:06.0407] <iain>
What is our current policy wrt `--without-intl-api`? I have a number of mozconfigs that use it to build slightly faster, but we don't test it in CI, and we've landed a couple of jit-tests lately that use Intl unguarded. Do we care about keeping it going?

[12:21:04.0337] <tcampbell>
It is unsupported. I think we use for the WASI experiment though, so if you want to fix simple things I can stamp the patch

[12:21:30.0180] <tcampbell>
I'm hoping that after ICU4X it will be easier to build with no data sources but still have the APIs around.

[12:21:56.0288] <tcampbell>
 * I'm hoping that after ICU4X it will be easier to build with no data sources but still have the APIs around. In which case we'd always have the API.

[12:23:31.0244] <tcampbell>
(we were hoping that WASI would be tier-2 to _build_ so, might make sense to fix tests that are just a metadata update)

[12:34:35.0743] <iain>
Okay, sounds good. Patch submitted.


2021-06-15
[23:38:33.0304] <Ms2ger>
I'm guessing these unguarded tests would fail anyway without data sources

[23:39:04.0573] <Redfire>
I've finally gotten it working! (not for varargs yet, but individual args)
```rs
#[macro_rules_attribute(js_fn!)]
fn log(val: String) -> IonResult<()> {
    println!("{}", val);

    Ok(())
}
```
You can do `console.log("Logging works!!!")` and it prints out the string

[04:01:41.0155] <Redfire>
Does anyone know what `ToStringSlow` returns if you give it undefined? Does it return null? or an empty string maybe? I'm not sure

[04:03:07.0018] <Ms2ger>
[Source](https://searchfox.org/mozilla-central/source/js/src/vm/StringType.cpp#2257) says `"undefined"`

[06:39:47.0347] <badeball>
Hi, are there any plans or ongoing work to implement & ship the proposed Temporal API? https://github.com/tc39/proposal-temporal/

[06:40:33.0719] <badeball>
(I'm guessing that this stuff will likely be behind a flag until it's part of the standard, but I like to live on the edge)

[06:45:12.0505] <Ms2ger>
anba is working on it

[07:55:53.0092] <badeball>
That's awesome, I'm glad to hear! Looking forward to adopting it early.

[08:46:44.0231] <smaug>
denispal: remind me how to cancel offthread compilation in ScriptLoader.

[08:47:45.0403] <denispal>
smaug:  https://searchfox.org/mozilla-central/source/js/src/vm/OffThreadScriptCompilation.cpp#105  this you mean?

[08:48:33.0393] <smaug>
I think yes, thanks.

[08:48:50.0317] <smaug>
denispal: looks like there is intermittent shutdown leak since https://searchfox.org/mozilla-central/source/dom/script/ScriptLoader.cpp#2521 may fail

[08:49:44.0542] <denispal>
ah ok, I can take a look if you send me the bug

[08:50:51.0033] <smaug>
denispal: I think it is basically https://bugzilla.mozilla.org/show_bug.cgi?id=1698227 

[08:50:54.0263] <smaug>
https://treeherder.mozilla.org/logviewer?job_id=342548104&repo=mozilla-central&lineNumber=10257 is an example

[08:51:30.0454] <smaug>
[task 2021-06-11T22:09:21.423Z] 22:09:21     INFO - GECKO(3644) | [Child 6012, JS Helper] WARNING: 'NS_FAILED(rv)', file /builds/worker/checkouts/gecko/xpcom/threads/nsThreadUtils.cpp:266
[task 2021-06-11T22:09:21.424Z] 22:09:21     INFO - GECKO(3644) | [Child 6012, JS Helper] ###!!! ASSERTION: Failed NS_DispatchToMainThread() in shutdown; leaking: 'false', file /builds/worker/checkouts/gecko/xpcom/threads/nsThreadUtils.cpp:268
[task 2021-06-11T22:09:21.432Z] 22:09:21     INFO -  Initializing stack-fixing for the first stack frame, this may take a while...
[task 2021-06-11T22:09:36.847Z] 22:09:36     INFO - GECKO(3644) | #01: NS_DebugBreak [xpcom/base/nsDebugImpl.cpp:431]
[task 2021-06-11T22:09:36.848Z] 22:09:36     INFO - GECKO(3644) | #02: NS_DispatchToMainThread(already_AddRefed<nsIRunnable>&&, unsigned int) [xpcom/threads/nsThreadUtils.cpp:267]
[task 2021-06-11T22:09:36.849Z] 22:09:36     INFO - GECKO(3644) | #03: mozilla::SchedulerGroup::InternalUnlabeledDispatch(mozilla::TaskCategory, already_AddRefed<mozilla::SchedulerGroup::Runnable>&&) [xpcom/threads/SchedulerGroup.cpp:91]
[task 2021-06-11T22:09:36.851Z] 22:09:36     INFO - GECKO(3644) | #04: mozilla::SchedulerGroup::LabeledDispatch(mozilla::TaskCategory, already_AddRefed<nsIRunnable>&&, mozilla::PerformanceCounter*) [xpcom/threads/SchedulerGroup.cpp:76]
[task 2021-06-11T22:09:36.852Z] 22:09:36     INFO - GECKO(3644) | #05: mozilla::dom::OffThreadScriptLoaderCallback(JS::OffThreadToken*, void*) [dom/script/ScriptLoader.cpp:2521]

[08:51:37.0301] <smaug>
oops, sorry about that

[08:53:07.0254] <smaug>
denispal: perhaps we could cancel all the off thread parsing when ShutdownPhase changes from being NotInShutdown 

[08:58:49.0534] <denispal>
I can look into that

[08:59:22.0633] <denispal>
I remember trying to call CancelOffThreadParses from ShutdownXPCOM before, but I ran into problems.  Although I can't remember what those were

[08:59:33.0718] <smaug>
ah

[09:00:20.0982] <smaug>
The failure seems to start happening more often with bfcache in parent, but I think that is just by accident, since more documents will stay alive longer in the child process

[09:01:06.0175] <smaug>
(we're trying  to get bfcache enabled asap)

[09:02:01.0140] <denispal>
ok np, I'll take a look into it this week

[09:02:37.0736] <denispal>
maybe we can calloffthreadparses somewhere to ensure they are all canceled

[09:02:52.0430] <denispal>
 * maybe we can call canceloffthreadparses somewhere to ensure they are all canceled

[13:23:50.0075] <tcampbell>
sfink: so that RootedUntypedBase patch is breaking on 32-bit windows clang (even unoptimized).. any idea why windows ABI might affect this?

[13:24:20.0856] <tcampbell>
I think there are some weird rules around base-class alignment and packing, but am not quite sure

[13:27:53.0978] <tcampbell>
/me should probably figure out how to get time-travel debugger to work here..

[14:27:31.0109] <tcampbell>
something funny with RootedTraceable. I think I did something very wrong in my patch..

[14:41:36.0994] <mgaudet>
confession: I continue to be comically inept at Git 

[14:41:40.0086] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:44:18.0112] <tcampbell>
Ah `ConcreteTraceable` probably should not exist anymore either...


2021-06-16
[00:42:38.0998] <Redfire>
Can anyone explain why this limitation exists?
> It is currently not possible to initialize SpiderMonkey multiple times (that is, calling JS_Init/JSAPI methods/JS_ShutDown in that order, then doing so again). This restriction may eventually be lifted.

[01:01:05.0961] <Ms2ger>
C++

[01:02:06.0699] <Ms2ger>
That "may eventually be lifted" seems very implausible

[01:35:46.0506] <arai>
I thought, there was something related to ICU's initialization

[01:36:59.0763] <Ms2ger>
Pretty sure that restriction predates ICU, but it seems plausible that ICU has similar issues

[01:39:41.0715] <nbp>
> * <@tcampbell:mozilla.org> should probably figure out how to get time-travel debugger to work here..

First, invent a time machine ‚Ä¶ (that's where I am stuck so far)

[01:49:27.0730] <Ms2ger>
Let me know before you succeed

[01:54:00.0477] <nbp>
I will send you a message yesterday if I succeed ;)

[02:09:05.0162] <Ms2ger>
Hmm, I don't think you will have did

[05:46:32.0572] <sudipto64>
hi ..I'm getting some exception at time of using JS::PrintError ..as per call stack exception triggered in function 'PrintSingleError' at fflush(file) ..can someone help me on this ..I'm using esr78

[05:54:28.0014] <arai>
sudipto64: can you provide more details?

[05:54:35.0120] <arai>
what's the exception?

[05:57:54.0953] <sudipto64>
https://paste.mozilla.org/SbyVNx5X

[05:58:08.0839] <sudipto64>
this is the exception ..

[05:59:36.0987] <arai>
are you running the application under debugger?  if so, can you check the backtrace?

[06:01:46.0683] <sudipto64>
yes I'm running in debugger..  

[06:02:14.0241] <sudipto64>
in backtrace what i need to check ?

[06:02:43.0855] <arai>
sorry, I mean, can you pastebin the backtrace?

[06:02:53.0549] <sudipto64>
ya sure..

[06:07:34.0412] <sudipto64>
this have backtrace https://paste.mozilla.org/LeKKphFB

[06:10:09.0058] <arai>
how do you call `JS::PrintError` ?

[06:12:55.0953] <sudipto64>
you mean to say what are the parameter i'm passing to this function ?

[06:13:02.0119] <arai>
yes

[06:13:57.0383] <sudipto64>
JS::PrintError(cx, fp, report, false) ...this i'm using here fp is file pointer and report is JS::ErrorReportBuilder report

[06:14:25.0416] <arai>
what's the value of `fp` ?  how do you generate it?

[06:15:34.0546] <sudipto64>
I'm using fopen ..and file opened with write mode..

[06:16:16.0842] <arai>
just to make sure, is the value correct?

[06:16:23.0072] <arai>
what's the pointer value?

[06:17:51.0573] <sudipto64>
fp = 0x02d83c40 {_Placeholder=0x00000000 } ...this pointer value seems fine

[06:19:34.0396] <arai>
what happens if you call `fputs("hello", fp); fflush(fp);` just before `JS::PrintError` ?  does the exception happen on the `fflush` call?

[06:21:22.0978] <sudipto64>
let me check..

[06:24:26.0710] <sudipto64>
fputs("hello", fp); fflush(fp); this part working fine ..

[06:28:12.0559] <arai>
does your application have stdout ?  if so, what happens if you pass stdout to `JS::PrintError` ?

[06:29:40.0052] <sudipto64>
I've tried with stderr ..that having issue..let me check with stdout

[06:29:59.0471] <arai>
stderr also works.  what happens with stderr ?

[06:30:11.0088] <arai>
also, what's printed to stderr then?

[06:33:45.0787] <sudipto64>
print has been done ..but after print ..there is some issue with freeing one pointer ..

[06:35:43.0115] <arai>
wait, how did you confirmed it's inside `fflush`?

[06:36:09.0930] <arai>
I wonder if it's not `fflush` but some destructor call

[06:36:35.0069] <sudipto64>
in debugger i seen the breakpoint in this line ..

[06:37:32.0237] <arai>
can you check the disassemble, to see where the instruction pointer points in `PrintSingleError` function ?

[06:39:06.0529] <arai>
given `fflush` is the last line of the function, I guess that line can also be pointed when executing destructors for stack-allocated things

[06:43:54.0580] <sudipto64>
ok..now i have checked from disassembly... 

[06:44:09.0917] <sudipto64>
function name is : PrintErrorImpl 

[06:44:39.0877] <arai>
ah, indeed, `PrintSingleError` is inlined

[06:45:06.0414] <arai>
what's the instructions around the current code in the function?

[06:46:28.0267] <sudipto64>
https://paste.mozilla.org/giQPwvn1  this is line where showing breakpoint : 7847E60A  add         esp,4  

[06:46:49.0026] <sudipto64>
this link contains instructions 

[06:48:10.0365] <arai>
what do you mean by breakpoint btw?

[06:48:31.0957] <arai>
have you set a breakpoint manually, or just the place that hits exception?

[06:49:20.0013] <arai>
if latter, the trouble seems to be inside `fflush` call indeed

[06:50:39.0325] <sudipto64>
> <@arai:mozilla.org> have you set a breakpoint manually, or just the place that hits exception?

this place hits exception ..

[06:50:43.0866] <arai>
can you check the disassembly of `__impl__fflush`, or the next frame shown in the backtrace?

[06:53:07.0811] <sudipto64>
next frame i can see ..

[06:54:04.0178] <sudipto64>
shall I share those frame also ? or those are not needed ?

[06:55:17.0714] <arai>
what I intend is, look into the actual instruction or the path that hits the exception, and see how and where it went wrong

[06:56:08.0156] <arai>
so, if that part can be done on your side, it's not necessary to share everything one by one

[07:24:29.0327] <sudipto64>
i go down into backtrace .. exception hits in 'invoke_watson()' ..

[07:24:50.0683] <arai>
it sounds like the code is already inside exception handling

[07:24:56.0909] <arai>
not the actual issue itself

[07:45:07.0785] <sudipto64>
arai: one thing ..I just noticed ..with release build of my project it working fine ..but with debug build its creating this issue ..

[07:53:44.0307] <sudipto64>
 * arai: one thing ..I just noticed ..with release build of my project it working fine ..but with debug build I'm getting this issue ..

[08:12:32.0517] <arai>
how about setting a breakpoint just before fflush call, and tracing the execution to see what the issue is?

[08:15:01.0901] <nbp>
hum ‚Ä¶ `toString` can return a number, and everything keeps running without any errors ‚Ä¶ :sad:

[08:15:06.0022] <nbp>
 * hum ‚Ä¶ `toString` can return a number, and everything keeps running without any errors ‚Ä¶ ‚òπÔ∏è

[08:39:48.0753] <zbraniecki>
anba I'm going to review the part 3 today. Just want to cross check it against the convoluted spec with fresh eyes.

[08:49:38.0315] <jonco>
sfink: ping

[08:50:40.0959] <sudipto64>
> <@arai:mozilla.org> how about setting a breakpoint just before fflush call, and tracing the execution to see what the issue is?

i tried this ..but breakpoint is not working ...

[08:51:36.0767] <arai>
can you set it to the `call` instruction?

[08:51:55.0219] <arai>
`call dword ptr [__imp__fflush ...` part

[09:07:08.0368] <sudipto64>
I've debugged __imp_fflush from disassembly where after instruction __crt_seh_guarded_call<int>::operator() ..it's triggered that exception ..

[09:11:32.0402] <arai>
I'm not sure what the function is for...

[09:11:37.0750] <arai>
btw, if release build works, how about comparing the execution and values between them?

[09:11:59.0555] <arai>
in case the fflush implementation itself is same between them

[09:30:04.0536] <sudipto64>
okay let me check ..

[09:31:40.0553] <sudipto64>
one thing ..I'm not using --enable-debug in my mozconfig ..can it be a reason for this ?

[10:05:00.0140] <arai>
the flag needs to be consistent between library and application

[10:06:19.0775] <arai>
if you specify --enable-debug, DEBUG macro needs to be defined when including SpiderMonkey headers

[10:06:43.0811] <arai>
and if you don't specify, the macro should be undefined


2021-06-17
[04:00:40.0409] <sudipto64>
arai: I've build spidermonkey with --enable-debug in mozconfig ..with this I'm not facing that issue of fflush

[04:04:06.0935] <arai>
what's the difference between the configuration of "release build" and "debug build" of your application?

[04:05:09.0560] <arai>
if DEBUG macro is affected by the configuration, that could be the reason

[07:46:44.0973] <sudipto64>
DEBUG macro used only for debug build configuration 

[07:53:55.0159] <arai>
that would explain the strange crash, due to different struct definition etc

[08:38:08.0349] <sudipto64>
oh!!..

[08:54:33.0848] <jandem>
mgaudet, iain, decoder : great work!!

[08:54:49.0691] <mgaudet>
thanks :) 

[08:55:13.0450] <decoder>
ty!

[08:56:07.0107] <tcampbell>
indeed, great talks

[09:21:22.0163] <tcampbell>
oh, this cranelift note is out of date now https://searchfox.org/mozilla-central/rev/b172dd415c475e8b2899560e6005b3a953bead2a/js/src/doc/index.rst#190-192

[09:28:14.0631] <annevk>
mgaudet: https://github.com/tc39/proposal-private-declarations/issues/11 and the bug on private fields / WindowProxy should have enough actionable bits now, but let me know if I can help; still around next week and then more time off :-)

[09:33:18.0545] <mgaudet>
Thanks for looking at this annevk (and for doing some of the knock on work that came out of this). To be clear, from your perspective is the next action to explicitly opt WindowProxy out of the private fields (adding a custom error message and throwing from the WindowProxy handler), then working on getting that opt-out specced in a way amenable to TC39? Or do you see the next step as figuring out how to write test cases for this and blessing Safari's behaviour, then following in their footsteps

[09:33:43.0224] <mgaudet>
(Just not entirely clear from the conversations that there's consensus; erights is pretty clear, but everyone else seems a little more ¬Ø\_(„ÉÑ)_/¬Ø ) 

[09:35:03.0334] <mgaudet>
(Also, I haven't read all of https://github.com/tc39/ecma262/pull/688 yet... lots there) 

[09:49:21.0317] <annevk>
mgaudet: the latter

[09:49:31.0081] <annevk>
mgaudet: Safari + more tests for Fission-like scenarios

[09:50:05.0647] <mgaudet>
OK :) Now to figure out how to write tests for browser things in test262. 

[09:50:22.0585] <annevk>
(unless that turns out to be prohibitive, in that case I guess we have the option to push in TC39 for changes as per that issue)

[09:51:05.0855] <annevk>
(I wonder if test262 can test cross-origin/site stuff, might have to do some of this in wpt)

[09:52:25.0729] <mgaudet>
Yeah, I'm not entirely sure of the state of test262'

[09:52:33.0045] <mgaudet>
 * Yeah, I'm not entirely sure of the state of test262's ability to test host (browser) things

[09:52:43.0904] <mgaudet>
but I'll figure this out :) 

[13:54:20.0837] <mgaudet>
confession: Working on clarifying private field semantics for exotic browser objects, and learning WPT 

[13:54:22.0888] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:05:42.0935] <tcampbell>
confession: Stripping down the self-hosting global to prepare for removing it. (Bug 1716901)

[14:05:45.0437] <botzilla>
https://bugzil.la/1716901 ‚Äî NEW (tcampbell) ‚Äî Minimize bindings on the self-hosted global

[14:05:58.0788] <tcampbell>
/me is always reminded by mgaudet's updates to do this..

[14:07:18.0159] <mgaudet>
Heh. I find it fairly useful to be able to look back at what I've been working on in the past. So I'm a big fan, even just for myself. I do also hope others find it useful too 

[14:54:08.0664] <tcampbell>
do we format our self-hosted js at all?

[14:54:45.0193] <tcampbell>
It looks like it is excluded from Prettier because the #ifdef's we use in are very much not legal JS

[15:52:47.0721] <sfink>
I definitely use mgaudet's confessions as reminders too.

[15:54:16.0806] <sfink>
confession: Struggling to write a simplified version of an evil fuzzbug test, since in doing so I've already discovered that my initial fix to the fuzzbug was probably a fluke.

[16:03:29.0874] <sfink>
confession: took a daytime break to work with my kid to try to figure out how to match a web extension's color scheme to the running theme. So far, looks to be surprisingly painful.


2021-06-18
[00:56:43.0958] <leveryd>
i have a javascript syntax question: in firefox, can i call function without backquote and parentheses, such as "func()" or "func``"?

[00:58:14.0943] <arai>
something like `func.call()` ?

[00:59:33.0994] <arai>
or, if the function is the body of setter/getter, it can be called without specific syntax

[01:01:08.0782] <leveryd>
> <@arai:mozilla.org> something like `func.call()` ?

this  include "("  symbol

[01:05:09.0028] <arai>
is your target include implicit call?  like, setting the function to `toString` property of the object

[01:05:51.0892] <wingo>
```
js> var wrap = f=>({valueOf: f})
js> var x = wrap(() => console.log('hey'))
js> x + 0
hey
NaN
```

[01:06:46.0752] <wingo>
anything that causes valueOf, toString, etc can end up being a function call

[01:26:53.0102] <leveryd>
emm, i setup a ctf demo server on "http://106.13.236.30/1.php?a=11", the goal is call "hello" function.
php src code is below

[01:27:05.0150] <leveryd>
<body>
<script>
function hello(){
  console.log("flag");
}

<?php
  $a = $_GET["a"];
  $a = str_replace("=", "",$a);
  $a = str_replace("(", "",$a);
  $a = str_replace(")", "",$a);
  $a = str_replace("`", "",$a);
  $a = str_replace("\\", "",$a);
  $a = str_replace("<", "&lt;",$a);

  echo "var a='$a'";
?>
</script>
</body>

[01:27:16.0520] <leveryd>
<body>
<script>
function hello(){
  console.log("flag");
}

<?php
  $a = $_GET["a"];
  $a = str_replace("=", "",$a);
  $a = str_replace("(", "",$a);
  $a = str_replace(")", "",$a);
  $a = str_replace("`", "",$a);
  $a = str_replace("\\", "",$a);
  $a = str_replace("<", "&lt;",$a);

  echo "var a='$a'";
?>
</script>
</body>

[01:28:38.0743] <leveryd>
<?php
  $a = $_GET["a"];
  $a = str_replace("=", "",$a);
  $a = str_replace("(", "",$a);
  $a = str_replace(")", "",$a);
  $a = str_replace("`", "",$a);
  $a = str_replace("\\", "",$a);
  $a = str_replace("<", "&lt;",$a);

  echo "var a='$a'";
?>

[01:29:07.0487] <arai>
those messages seem to be empty?

[01:30:11.0970] <leveryd>
https://gist.github.com/leveryd/40fcaed60727b6163b034145e332640f

[01:34:33.0015] <evilpie>
`+{valueOf: hello}`

[01:36:00.0175] <leveryd>
> <@evilpie:mozilla.org> `+{valueOf: hello}`

wow,nice

[01:37:44.0115] <arai>
`new hello`

[01:37:54.0199] <wingo>
good one

[01:40:32.0435] <evilpie>
ah nice

[07:55:38.0732] <ptomato>
would it be possible to have the js shell `-c` (compile-only flag) not resolve modules?

[07:56:42.0619] <ptomato>
we use it for syntax checking but in GJS we have some built-in modules, so we can't tell the js shell to resolve them via `--module-load-path`

[08:13:59.0524] <nbp>
ptomato: We have some shell function to parse/compile scripts, maybe you could write a JS shell which load the file provided as argument?

[08:14:28.0340] <nbp>
 * ptomato: We have some shell function to parse/compile scripts, maybe you could write a JS <del>shell</del> script which load the file provided as argument?


2021-06-20
[03:17:38.0949] <edorian_dark>
Are there any plans regarding Cranelift?
In the Cranelift Readme there is still mentioned, that Firefox will use Cranelift for Webassembly and  Javascript.
If this is not planed any more, then I would remove it from the Readme.

[03:17:59.0048] <edorian_dark>
Speaking of this: https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/spidermonkey.md#phase-1-webassembly


2021-06-21
[03:47:41.0376] <nbp>
jonco: Stupid question, have you tried using an even higher number of threads than cores?

[05:29:19.0245] <jonco>
I have not tried that

[05:30:14.0087] <jonco>
I'm trying to make the minimal set of changes to make things work

[05:30:30.0853] <jonco>
I can try that pretty easily though

[05:30:36.0911] <jonco>
nbp ^

[05:31:05.0984] <nbp>
if by chance this can lead any improvements ;)

[05:32:45.0313] <jonco>
the current aim is to *reduce* the number of threads, but yes

[05:33:12.0714] <wingo>
...or is it ü§î

[05:36:57.0874] <Ms2ger>
Who needs threads anyways

[05:37:12.0548] <tcampbell>
I am a little suspicious of our mozilla::Atomics and other cache-related behaviours. When I capped firefox from 28 threads down to 4 using CPU masks, I got like 5% faster on speedometer :|

[05:40:58.0654] <nbp>
Ms2ger: Anybody who practices knitting.

[05:41:37.0558] <Ms2ger>
Hmm, do you call that "threads" as well? Threads are thinner in my mind

[05:41:47.0146] <Ms2ger>
Not sure what else to call them either

[05:43:34.0413] <nbp>
/me wonders what does it means for a thread to cross its own path ‚Ä¶

[05:44:21.0814] <nbp>
/me ‚Ä¶ now thinks of the 1 electron universe theory.

[05:50:39.0923] <tcampbell>
Have shell builds started re-configuring every time you build for anyone else?

[05:55:18.0075] <nbp>
tcampbell: which CPU are you using, the atomic would still have to communicate the invalidation, but using less core would lead to less wait induced on fetching data from other cores.

[05:55:51.0578] <nbp>
tcampbell: maybe the problem is the ownership of the memory and we should use more write-back to flush the cache line to memory?

[05:56:02.0719] <nbp>
 * tcampbell: maybe the problem is the ownership of the memory and we should use more write-back to flush the cache lines to memory?

[05:56:24.0517] <tcampbell>
Intel(R) Core(TM) i9-9940X CPU. I don't think there is any NUMA or anything weird

[05:58:25.0522] <tcampbell>
Our default atomic usage is seq-cst which I think is not ideal for this many cores, but I'm not super clear anymore what the coherency protocols look like

[06:01:32.0392] <nbp>
maybe perf command can help you see the differences.

[06:03:52.0083] <tcampbell>
I wasn't able to see anything with sample profilers. Might be worth check cachegrind or something

[06:06:35.0878] <nbp>
I was thinking of perf, to see the actual CPU counters.

[06:07:11.0143] <nbp>
does cachegrind even consider the number of threads when it computes its results?

[06:08:13.0747] <tcampbell>
not sure

[06:15:06.0325] <Standard8>
> <@tcampbell:mozilla.org> Have shell builds started re-configuring every time you build for anyone else?

You probably need to update central, there was bug 1717248 landed to fix configure issues.

[06:15:08.0073] <botzilla>
https://bugzil.la/1717248 ‚Äî RESOLVED (emilio) ‚Äî Spurious reconfigures in all platforms due to packages.txt

[06:18:43.0317] <tcampbell>
ah, thanks

[06:20:48.0039] <tcampbell>
 * ah, thanks. that fixed it

[13:31:20.0416] <mgaudet>
confession: Wandered into JS_TransplantObject. Uh oh.

[13:31:22.0232] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:57:26.0909] <mgaudet>
confession: Seeking assistance with window proxy lifetime questions. It'll be fun to try to formulate questions around stuff I have such a weak understanding of üòï


2021-06-22
[03:28:50.0127] <glandium>
> <@tcampbell:mozilla.org> I am a little suspicious of our mozilla::Atomics and other cache-related behaviours. When I capped firefox from 28 threads down to 4 using CPU masks, I got like 5% faster on speedometer :|

did you also disable turbo boost?

[05:58:27.0624] <ANdi>
Hello does anyone know how the tests from js/src/tests are packed when a build is using: MOZ_AUTOMATION_PACKAGE_TESTS: "1"

[05:59:01.0243] <ANdi>
I'm having some issues with this [build](https://firefox-ci-tc.services.mozilla.com/tasks/DS5Uw1TmQWmGMtowLm8TnQ/runs/0/logs/public/logs/live.log#L65524) on which I'm running tests

[07:27:56.0432] <tcampbell|ooo>
That sounds like a sfink question

[09:14:42.0112] <patak>
Hey :wave

[09:15:27.0034] <patak>
 * Hey üëã, just saw that in https://spidermonkey.dev/blog/2021/06/15/tc39.html, the first link to "TC39 has moved to Matrix as its communication platform of choice. Read more here." is broken

[09:15:43.0365] <yulia>
patak: thanks! we already have it fixed!

[09:15:47.0195] <yulia>
should be up in a few seconds

[09:16:00.0331] <patak>
Ha, that was fast, working now

[09:16:04.0205] <patak>
Thanks!

[09:16:13.0391] <yulia>
I am checking the rest of the links, I did this without wifi (my bad)

[09:17:14.0345] <patak>
No problem, great post!

[14:29:53.0957] <sfink>
mgaudet: sdetar : I'm going to lightly clean up the notes I took during the Waldo drain bump meeting, then I'll mail them out.

[14:32:04.0371] <sdetar>
  Thanks that would be great

[14:38:28.0156] <sfink>
ok, sent

[14:44:50.0119] <mgaudet>
confession: being heartily confused by the dark arts of the web platform. 

[16:22:37.0350] <evilpie>
sfink is this about streams? I would like to read it too

[16:23:33.0648] <sfink>
great! sent

[16:26:25.0732] <sfink>
evilpie: oh, and that brings up the question -- you backed out some of the patches, for reasons that in the bug looked like it was because of the memory leak, but perhaps not? I was a little unclear there.

[16:27:23.0029] <evilpie>
There were crash on nightly. It might be a sec bug still? Will have to look tomorrow

[16:27:34.0767] <sfink>
also, if you want to poke at the code, I have a bundle file from Waldo that's updated to mostly current nightly that I could give you.

[16:27:40.0372] <sfink>
ah, ok

[16:27:55.0228] <sfink>
I think it's still a sec bug, yes

[16:28:12.0604] <evilpie>
Could probably unhide

[16:28:37.0469] <evilpie>
I am mostly busy at the moment

[16:28:47.0093] <sfink>
it's a little unclear why the previous (ok, now current) state wasn't incorrect in some cases, so I'd rather keep it hidden for now

[16:29:00.0491] <sfink>
ok, np

[16:30:55.0428] <sfink>
I really would like a straightforward way to go from a crash-stats frame to the surrounding assembly code. The source link is good, but with potential inlining I'm never sure what it's telling me exactly.

[16:31:07.0637] <sfink>
I suppose I should just get more comfortable with the minidump workflow.


2021-06-23
[03:01:07.0267] <smaug>
What does https://searchfox.org/mozilla-central/source/js/public/CompileOptions.h#410 do?

[03:02:13.0256] <smaug>
oh, I see, I guess we don't do full parse normally, but just a faster check

[03:17:15.0808] <arai>
yes, we perform only syntax check for inner function in most case.  those functions are compiled again when it's called at first time.  we use the forceFullParse option for some chrome-priv code and self-hosted JS, for cache efficiency etc

[08:45:29.0171] <jonco>
sfink: jandem if you're watching the internal meeting we can delay the GC meeting until after that

[08:46:17.0441] <sfink>
I am, but it looks like it'll go on for another 45min. I'm ok doing the GC meeting now and watching the rest of this meeting recorded. (Or not; we'll see.)

[08:47:02.0586] <jandem>
I was thinking about skipping this week

[08:47:21.0557] <jonco>
sfink: ok let's do that

[08:47:59.0035] <jonco>
jandem: sure

[09:38:40.0039] <jonco>
decoder: Should I be able to start a tsan build of the browser without it dying immediately with data race warnings?  I'm wondering if there are some special options I need to pass.

[09:39:08.0806] <decoder>
you should be able to, but depending on your linux distro, there might be missing suppressions for certain external OS libs

[09:39:16.0868] <decoder>
what are you seeing?

[09:41:20.0625] <jonco>
decoder: seems to be graphics drivers, but I've seen one in XPCOM too

[09:41:46.0941] <decoder>
graphics driver could be a missing called_from_lib suppression

[09:41:51.0982] <decoder>
can you send me both?

[09:44:51.0392] <jonco>
sure

[09:45:17.0717] <ptomato>
embedding spidermonkey in java, is this a thing? https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/issues/39

[09:45:49.0435] <jonco>
decoder: I'm assuming it's something I'm doing wrong because this works in CI as far as I know

[09:47:30.0366] <decoder>
will take a look in a sec

[09:48:14.0166] <mccr8>
jonco: probably just different graphics drivers. Like decoder said, the ignore lists are a big issue when you run on a slightly different system. It looks like you are missing __driDriverGetExtensions_zink

[09:48:20.0619] <nbp>
ptomato: not that I know of, I guess this might be old rhino users, who are looking for an update.

[09:48:37.0022] <mccr8>
I'm not sure what the best way is to extend the builtin ignore lists

[09:48:55.0720] <decoder>
jonco: the first race is likely missing a suppression for swrast_dri.so. ill make you some instructions on how to confirm this easily (no rebuild required)

[09:49:06.0632] <decoder>
the second one I dont know. it could be a result of disabling e10s

[09:49:52.0230] <mccr8>
Offhand, running with webrender but without e10s seems a little sketchy. Doesn't it require the GPU process?

[09:50:02.0018] <mccr8>
(the stack looks like webrender at least)

[09:50:46.0212] <jonco>
I was just poking around to see if it made a difference

[09:51:09.0351] <jonco>
how do I add to the ignore lists?

[09:51:18.0886] <ptomato>
nbp: I don't think it's possible with current spidermonkey, is that correct?

[09:52:27.0254] <nbp>
ptomato: the diffuclt part is to handle the marking properly, and Rust found a way by making vectors which are registered against the GC. So I guess this would be doable, but probably not easy.

[09:54:17.0263] <decoder>
jonco: will let you know in a sec (still in meeting)

[09:54:31.0194] <jonco>
decoder: cool, no rush

[09:55:00.0420] <mccr8>
Hmm maybe we don't run TSan with WebRender by default? I don't see WebRender in the name of the TSan job, but maybe we _only_ run it with WR.

[09:56:45.0290] <decoder>
jonco: can you try creating a file "ignore.txt" with this content:

[09:56:49.0437] <decoder>
```
called_from_lib:radeonsi_dri.so
called_from_lib:swrast_dri.so
```

[09:57:10.0879] <decoder>
and then launch with TSAN_OPTIONS="suppressions=/full/path/to/ignore.txt" ?

[09:57:16.0308] <decoder>
it should be merged with the builtin list

[09:57:30.0900] <jonco>
mccr8: is webrender default now?  I didn't change anything related to that. 

[09:58:12.0003] <mccr8>
For Mochitest etc job, WebRender jobs have something in the name that indicates it, but TSan is new enough that they might just default to it.

[09:59:50.0164] <jonco>
decoder: I get thousands of '==483813==FATAL: ThreadSanitizer: failed to intercept abort'

[10:00:12.0549] <mgaudet>
> <@nbp:mozilla.org> ptomato: the diffuclt part is to handle the marking properly, and Rust found a way by making vectors which are registered against the GC. So I guess this would be doable, but probably not easy.

Curious why a custom header + [swig](http://swig.org/) and a JNI library wouldn't work; ugly perhaps, but I don't see much in the way of conceptual barrier

[10:00:13.0648] <jonco>
decoder: oh nm, typo

[10:01:04.0136] <nbp>
mgaudet: the problem for Rust was to handle Rooted types, thus marking the stack.

[10:01:33.0905] <jonco>
decoder: 'ThreadSanitizer: failed to parse suppressions'

[10:02:06.0571] <mgaudet>
but if you have a JavaJSObject that's exposed to Java, which holds onto a PersistentRooted lets say... everything just works. It's not the fastest thing, but I don't see a barrier to it workin

[10:02:08.0408] <mgaudet>
 * but if you have a JavaJSObject that's exposed to Java, which holds onto a PersistentRooted lets say... everything just works. It's not the fastest thing, but I don't see a barrier to it working

[10:03:51.0662] <mgaudet>
(I am making an assumption here, because it's been a hecking long time since I've programmed with JNI, that you can register a finalizer for a JNI represented object to cleanup the root) 

[10:06:13.0342] <nbp>
mgaudet: That's how Rust works.

[10:06:40.0913] <mgaudet>
Oh man. Finalizers in JNI are just as bad as regular Java finalizers; Eeep. Whilst still possible to do something sensible, it'd be gross 

[10:08:23.0843] <jonco>
mgaudet: if you allow JS objects to have references back to the Java heap you can get cycles that won't be cleaned up

[10:08:49.0157] <nbp>
But by doing so, you have to admit that you have to wrap every function call to the JS engine to work with the persistent rooted vector.

[10:10:16.0137] <mgaudet>
> <@jonco:mozilla.org> mgaudet: if you allow JS objects to have references back to the Java heap you can get cycles that won't be cleaned up

That's true: I hadn't thought about that being a possibility; I'd been thinking you'd be just manipulating SM from the outside (eval-in-context etc) 

[10:10:39.0343] <mgaudet>
I replied in the GH issue: Hard, lots of engineering, probably better served by GraalJS or Nashorn

[10:15:14.0934] <jonco>
decoder: Ah, that was more user error.  Now I get: library '/usr/lib/x86_64-linux-gnu/dri/swrast_dri.so' that was matched against called_from_lib suppression 'swrast_dri.so' is unloaded

[10:15:52.0339] <jonco>
I'll try adding just that function to the ignore file

[10:18:18.0592] <decoder>
thats really annoying :(

[10:18:41.0337] <decoder>
tsan doesnt support suppressing dsos when they are unloaded

[10:19:00.0699] <decoder>
yea, you might be able to use race:swrast_dri.so instead

[10:21:17.0416] <ptomato>
> <@mgaudet:mozilla.org> I replied in the GH issue: Hard, lots of engineering, probably better served by GraalJS or Nashorn

thanks!

[10:21:23.0595] <ptomato>
I noticed rhino is still alive: https://github.com/mozilla/rhino

[10:22:46.0656] <jonco>
decoder: I'm making progress - race:__driDriverGetExtensions_zink seems to work

[10:22:46.0936] <mgaudet>
> <@pchimento:igalia.com> I noticed rhino is still alive: https://github.com/mozilla/rhino

woah. Who maintains it?

[10:23:22.0160] <jonco>
decoder: now I get as far as a browser window that says 'Gah. Your tab just crashed' :)

[10:23:56.0775] <decoder>
with new races? or still variations of the ones we saw earlier?

[10:24:30.0496] <jonco>
decoder: yes, mozilla::ThreadEventQueue::SetObserver

[10:24:53.0771] <decoder>
can you show me the full race report?

[10:31:58.0096] <jonco>
decoder: thanks, it seems to be working with that race suppressed

[10:32:54.0356] <decoder>
hm.. weird

[10:32:58.0246] <decoder>
I wonder if we have that on file

[10:34:17.0472] <jonco>
decoder: yeah it's surprising that wouldn't show up elsewhere... how many 'cores' do the test VMs have?

[10:34:41.0219] <decoder>
kriswright: could you check if we have the xpcom data race on file that jonco posted above?

[10:34:44.0551] <decoder>
thx

[10:34:45.0833] <jonco>
I think TSAN only reports races that actually happen right?

[10:35:18.0180] <decoder>
> <@jonco:mozilla.org> I think TSAN only reports races that actually happen right?

if by "actually happen" you mean that you need multiple cores, then the answer is no

[10:35:29.0634] <kriswright>
Oh fun `ThreadEventQueue` again. This looks like one of the scheduler races, one moment and I‚Äôll see if this is in my bug list

[10:35:34.0346] <decoder>
TSan reports any memory accesses from multiple threads that lack the necessary syncronization inbetween

[10:35:48.0767] <decoder>
they dont actually need to access at the same time or even from different cores

[10:35:58.0644] <jonco>
ah right, yes

[10:40:06.0486] <kriswright>
This could be related to https://bugzilla.mozilla.org/show_bug.cgi?id=1716999

[10:40:49.0237] <kriswright>
I‚Äôm no expert in the TaskController code though, may be worth roping :bas in for an explanation

[10:41:41.0821] <decoder>
yea, please do :)

[10:42:04.0925] <decoder>
if we cant resolve it quickly, also please add a suppression for it, as it seems to block startup sometimes

[10:42:25.0931] <jonco>
kriswright: yeah, that looks like the same race but happening during shutdown

[10:43:18.0658] <kriswright>
That‚Äôs the fun of new threading mechanisms, means new data races :P

[10:57:05.0752] <kriswright>
Alright, I added some comments based on my observations and tacked the new stack trace onto the bug, NI'd bas to see if I'm on track there. Maybe the observer-managing code just needs to hold a lock.

[10:57:25.0903] <kriswright>
(If that's the case, I'll put it on my list of things to do this week :P)

[11:14:27.0868] <decoder>
thanks kriswright :)

[13:36:43.0494] <Eric Rahm>
Hi folks, long time no see :) I'm interested in running some perf tests against SpiderMonkey, are there any docs around what the team already runs for things like AWFY?

[13:41:21.0591] <mgaudet>
so, these days AFAIK are we fast yet is mostly a front end to perfherder; so the jobs are all queued up on taskcluster, and gathered by perfherder

[13:41:54.0129] <mgaudet>
aside from digging through taskcluster configs, is there something more specific you're trying to accomplish?

[13:43:14.0923] <tcampbell>
For pure jsshell, I think octane is still the simplest smoke-test we use. People will then write microbenchmarks for their work, and then we go to the browser and run things like Speedometer

[13:44:26.0004] <Eric Rahm>
mgaudet: sure, so I'm testing what sort of performance impact `FJCVTZS` has on arm64. My test setup is to build JS with that instruction enabled on an M1, run some perf tests, look at scores and verify that yes, in fact, I can run perf tests okay. Then I'd try building with the instruction disabled, rinse repeat.

[13:45:33.0407] <Eric Rahm>
tcampbell: yeah I might end up just doing a full build, I was hoping to isolate just the engine for a lower-noise comparison. Do you have any idea what the most basic "run octane with jsshell" command would be?

[13:46:37.0277] <tcampbell>
`~/projects/gecko.dev/js/src/octane$ ../../../obj-chk-spidermonkey/dist/bin/js run.js`

[13:47:11.0004] <Eric Rahm>
\o/ lemme give that a shot, thanks a ton!

[13:47:13.0899] <tcampbell>
(you seem to need to be in that octane directory to run)

[13:47:25.0189] <Eric Rahm>
oh good pointer

[13:47:54.0068] <tcampbell>
yeah, octane should be where the impact is most noticable

[13:48:05.0954] <tcampbell>
(weird double math stuff)

[13:49:21.0847] <tcampbell>
Eric Rahm: we also do our spidermonkey shell builds with mach these days https://firefox-source-docs.mozilla.org/js/build.html

[13:49:29.0435] <Eric Rahm>
I'm probably going to write up something about this (there's not much out there other than an offhand comment in JSC bug), so if y'all have thoughts on an interesting benchmark I'd love to hear it

[13:49:58.0489] <Eric Rahm>
tcampbell: oh yeah I got that far! Also filed https://bugzilla.mozilla.org/show_bug.cgi?id=1717905

[13:49:59.0035] <tcampbell>
cool

[13:50:23.0497] <tcampbell>
ha

[13:50:48.0545] <Eric Rahm>
Desktop bootstrap + js mozbuild worked fine

[13:51:10.0746] <mgaudet>
I think my comment would mostly be: Results on Octane will not be reflective of normal web performance ;) 

[13:51:37.0223] <Eric Rahm>
Don't actually know how to interpret this, but it works. Thanks so much ted!
```
‚ûú  octane ../../../obj-opt-aarch64-apple-darwin20.5.0/dist/bin/js run.js
Richards: 13415
DeltaBlue: 16133
Crypto: 23058
RayTrace: 38293
EarleyBoyer: 39631
RegExp: 11717
Splay: 22617
SplayLatency: 30436
NavierStokes: 21284
PdfJS: 36764
Mandreel: 23285
MandreelLatency: 56650
Gameboy: 101309
CodeLoad: 51888
Box2D: 56220
zlib: 95093
Typescript: 54281
----
Score (version 9): 33761
```

[13:51:55.0706] <mgaudet>
IIRC octane is scores, so higher-is-better

[13:52:00.0586] <tcampbell>
I think they are "runs per second"

[13:52:10.0759] <tcampbell>
 * I think they are "runs per second" *waves hands*

[13:52:35.0805] <tcampbell>
with the final score probably being a geomean?

[13:53:11.0037] <Eric Rahm>
That's usually what perfherder did...

[13:53:47.0009] <Eric Rahm>
https://searchfox.org/mozilla-central/source/testing/jsshell/benchmark.py#322

[13:54:14.0323] <Eric Rahm>
heck yeah, two versions octane in tree :P

[13:55:09.0876] <tcampbell>
geomean * 100 it looks like https://searchfox.org/mozilla-central/source/js/src/octane/base.js#168-169

[13:56:13.0488] <mgaudet>
(I'll definitely be curious to see the results here tho) 

[13:57:07.0728] <Eric Rahm>
Sweet, I'll report back!

[13:57:44.0937] <tcampbell>
(unrelated) Our friends at Igalia added a tier-3 CI job for building spidermonkey to WASI/WASM. https://treeherder.mozilla.org/jobs?repo=mozilla-central&tier=3&searchStr=wasi  No tests yet, but does check that the build works which is pretty cool. üôÇ

[13:58:06.0038] <Eric Rahm>
mgaudet: If you have thoughts on good "real world" tests (in browser is fine) for JS perf I'd be interested in running those too. I guess Speedometer 2 or something?

[14:00:16.0474] <mgaudet>
Speedometer is likely the best candidate we have right now that's comparatively easy to run. 

[14:41:26.0248] <TheQwertiest>
hey everyone!
a small question: is it possible to somehow store data in JSScript, execute said script (e.g. inside another script), and retrieve that data when called from the method that is defined in said script?

e.g.

Script1 (has data_1)
```

function retrieve_data() {
  // return data stored in script
}


```

Script2 (has data_2)
```
IncludeScript('Script1');

console.log(retrieve_data()); // should return data_1
```

scripts are executed via `CloneAndExecuteScript`

[14:41:59.0396] <TheQwertiest>
 * hey everyone!
a small question: is it possible to somehow store data in JSScript, execute said script (e.g. inside another script), and retrieve that data when called from the method that is defined in said script?

in other words:

Script1 (has data_1)
```
function retrieve_data() {
  // return data stored in script
}
```

Script2 (has data_2)
```
IncludeScript('Script1');

console.log(retrieve_data()); // should return data_1
```

scripts are executed via `CloneAndExecuteScript`

[14:42:45.0122] <TheQwertiest>
 * hey everyone!
a small question: is it possible to somehow store data in JSScript, execute said script (e.g. inside another script), and retrieve that data when called from the method that is defined in said script?

in other words:

Script1 (has data_1)
```
function retrieve_data() {
  // ??? magically extract data stored in this script and return it
}
```

Script2 (has data_2)
```
IncludeScript('Script1');

console.log(retrieve_data()); // should return data_1
```

scripts are executed via `CloneAndExecuteScript`

[14:44:29.0365] <TheQwertiest>
Or maybe more correct questions would be:
- Does JSScript continue existing after CloneAndExecuteScript execution?
- Is it possible to retrieve corresponding JSScript from inside the script?

[14:44:46.0322] <TheQwertiest>
 * Or maybe more correct questions would be:
- Does JSScript continue to exist after CloneAndExecuteScript execution?
- Is it possible to retrieve corresponding JSScript from inside the script?

[14:45:19.0628] <TheQwertiest>
 * Or maybe more correct questions would be:
- Does JSScript continue to exist after CloneAndExecuteScript execution?
- If it does, is it possible to retrieve corresponding JSScript from inside the script?
- If it does not, are there any alternate ways to achieve the scenario described above?

[14:45:26.0860] <TheQwertiest>
 * Or maybe more correct questions would be:
- Does JSScript continue to exist after CloneAndExecuteScript execution?
- If it does, is it possible to retrieve corresponding JSScript from inside the script?
- If it does not, are there any alternative ways to achieve the scenario described above?

[14:56:16.0021] <kriswright>
jonco: I added `mozilla::ThreadEventQueue::SetObserver` to the TSan suppressions, so you can try building with rev D118640 to silence the warning until a fix for bug 1716999 is introduced. I looked closer at it and it feels like the process of fixing the observer code is going to be nontrivial, so we may just want a suppression for now. Is it actively causing frequent crashes/hangs or mostly tsan failures?

[14:56:17.0859] <botzilla>
https://bugzil.la/1716999 ‚Äî ASSIGNED (KrisWright) ‚Äî Intermittent SUMMARY: ThreadSanitizer: data race /builds/worker/checkouts/gecko/xpcom/threads/TaskController.cpp:939:7 in EnsureMainThreadTasksScheduled


2021-06-24
[00:19:48.0174] <jonco>
kriswright: Thanks for looking into this. I'll try with the patch. It's not actively crashing.

[03:47:28.0613] <jonco>
decoder: I'll file bugs for any other races I come across, unless you want to do that yourself

[03:47:47.0489] <decoder>
thanks, much appreciated

[03:48:31.0721] <decoder>
there is a toplevel meta bug with alias `tsan`

[03:48:37.0285] <decoder>
would be nice if you could make your bugs block that

[03:51:19.0400] <jonco>
sure üëçÔ∏è

[04:04:20.0982] <l11d>
I've been adding my own MIR/LIR instruction which is essentially codegened to increment a counter. This instruction is NOT set as effectful (even though it obviously is). If a bailout occurs after the counter might be incremented twice (as the previous resume point is before the increment). This is undesired so I wanted to decrement the counter in the bailout path. For some reason the js::jit::LIRGenerator::visitMyInstruction is never reached even though the WarpCacheIRTranspiler::emitMyInstruction is. The instruction should not be DCE'ed as setGuard() if is called, correct? Are there other reasons why the instruction is not emitted?

[06:02:02.0836] <nbp>
Eric Rahm: If this can help, I found this one from WebKit: https://bugs.webkit.org/show_bug.cgi?id=184023#c24

[06:05:31.0494] <nbp>
Otherwise, you could try a micro benchmark such as `for (var i = 0; i < arr.length; i++) arr[i] = arr[i] | 0;`, where arr is an Array of random doubles.

[08:45:45.0940] <ashwiniwankhede>
Hello everyone!!
Its almost a month I started my outreachy internship. Here is the blog documenting the project I am working on. Have a read and let me know how it is. 
https://ashwiniwankhede.wordpress.com/2021/06/22/project-and-struggles/

[08:53:45.0442] <sfink>
https://mrale.ph/blog/2018/02/03/maybe-you-dont-need-rust-to-speed-up-your-js.html is a fun read (I'm still only halfway through)

[08:54:16.0749] <sfink>
I'm confused why the JS shell used didn't have `performance.now()`, though

[08:55:23.0565] <sfink>
I guess I should see what `jsvu` gives

[08:55:57.0044] <sfink>
oh, hm, this post must be 3 years old

[08:56:20.0974] <sfink>
yes, it is

[08:56:28.0711] <sfink>
maybe if I had read the URL...

[09:03:50.0203] <sfink>
...and the first comment is from me. I have no memory of reading this. Brainrot.

[09:13:28.0094] <mgaudet>
Ouch

[09:13:45.0295] <nbp>
sfink: Are you deterministic?

[09:14:28.0048] <sfink>
yes

[09:14:30.0406] <sfink>
 * no

[09:14:32.0889] <sfink>
 * yes

[09:14:34.0981] <sfink>
 * no

[09:14:41.0068] <sfink>
 * some of me is

[10:07:30.0416] <mgaudet>
jonco: Regarding Bug 1678774; thanks for the diagnosis, I tend to agree. Were you able to reproduce locally?

[10:07:31.0978] <botzilla>
https://bugzil.la/1678774 ‚Äî NEW (nobody) ‚Äî Intermittent PROCESS-CRASH | Main app process exited normally | application crashed [@ mozilla::LinkedList<js::ParseTask>::~LinkedList()]

[10:10:33.0849] <jonco>
mgaudet: no I wasn't able to reproduce this

[10:11:16.0466] <mgaudet>
Kk. It's a hairy fix, and I was hoping to verify somehow; may need to defer to reviewer eyes

[10:14:04.0508] <jonco>
happy to be one of those (pairs of) eyes

[12:54:48.0090] <mgaudet>
confession: Writing a speculative fix to a ScriptLoader bug; attempting to validate with try

[12:54:50.0527] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[12:56:13.0237] <TheQwertiest>
> <@theqwertiest:mozilla.org> Or maybe more correct questions would be:
> - Does JSScript continue to exist after CloneAndExecuteScript execution?
> - If it does, is it possible to retrieve corresponding JSScript from inside the script?
> - If it does not, are there any alternative ways to achieve the scenario described above?

any help would be really appreciated m(ÔºøÔºø)m

[13:05:49.0869] <mgaudet>
So silly question: Could you not just store something on the global object? 

[13:06:39.0069] <mgaudet>
ie, use `globalThis`

[13:14:43.0879] <TheQwertiest>
> <@mgaudet:mozilla.org> ie, use `globalThis`

nope, since this all happens in the same global object

[13:15:19.0848] <mgaudet>
I guess the ultimate question is one of why is `JSScript` the unit you want to associate data with

[13:17:12.0830] <TheQwertiest>
full scenario: my app has a method that allows users to other scripts (i.e. a glorified `eval`), this scripts have some metadata (e.g. path or version) that I want to be able to associate with that script and then retrieve it while inside that script.

[13:17:21.0426] <TheQwertiest>
 * full scenario: my app has a method that allows users to load other scripts (i.e. a glorified `eval`), this scripts have some metadata (e.g. path or version) that I want to be able to associate with that script and then retrieve it while inside that script.

[13:17:45.0826] <TheQwertiest>
 * full scenario: my app has a method that allows users to load other scripts (i.e. a glorified `eval`), thess scripts might have some metadata (e.g. path or version) that I want to be able to associate with it and then retrieve it while being inside saidscript.

[13:17:49.0446] <TheQwertiest>
 * full scenario: my app has a method that allows users to load other scripts (i.e. a glorified `eval`), thess scripts might have some metadata (e.g. path or version) that I want to be able to associate with it and then retrieve it while being inside said script.

[13:18:04.0013] <TheQwertiest>
 * full scenario: my app has a method that allows users to load other scripts (i.e. a glorified `eval`), these scripts might have some metadata (e.g. path,version or w/e) that I want to be able to associate with it and then retrieve it while being inside said script.

[13:20:08.0589] <TheQwertiest>
storing the data is not a problem, but I'm struggling with finding the current script from JS

[13:20:39.0991] <mgaudet>
Yeah, that's certainly not the normal flow

[13:20:42.0483] <TheQwertiest>
 * full scenario: my app has a method that allows users to load other scripts (i.e. a glorified `eval`), these scripts might have some metadata (e.g. path,version or w/e) that I want to be able to associate with the loaded script and then retrieve it while being inside said script.

[13:21:11.0613] <TheQwertiest>
I guess so, still I want to implement it somehow =)

[13:21:23.0844] <TheQwertiest>
 * I guess so, still I want to implement it somehow =) (if at all possible)

[13:22:19.0556] <mgaudet>
I don't think it would be without some plumbing, potentially gross 

[13:22:40.0759] <mgaudet>
We definitely don't expose the notion of JSScript to script; which means doing the retrieval is not possible without writing your own helper

[13:23:22.0756] <mgaudet>
Closest you could potentially get is something like Function.caller; but it doesn't always work IIRC

[13:23:28.0911] <TheQwertiest>
I've managed to hack around it when this glorified eval is called from the global namespace, but it doesn't work when it's invoked inside other method

[13:24:31.0619] <TheQwertiest>
 * I've managed to hack around it when this glorified eval is called from the global namespace, but it doesn't work when it's invoked inside other method or when called via promise

[13:24:35.0389] <TheQwertiest>
 * I've managed to hack around it when this glorified eval is called from the global namespace, but it doesn't work when it's invoked inside other method or when called via Promise

[13:25:59.0696] <TheQwertiest>
mgaudet: is there any object that's associated with the script and is accessible? i.e. not necessarily a JSScript object

[13:26:12.0295] <TheQwertiest>
 * mgaudet: is there any object that's associated with the script and is accessible from the script? i.e. not necessarily a JSScript object

[13:30:30.0445] <mgaudet>
Skimming `BaseScript`, the base class for `JSScript, I see that a script is associated with a functionOrGlobal; but while they're accessible to script in principle I believe, it's not like they're a nice property stored on the function or something. 

The implementation intentionally tries not to reveal itself in the language

[13:32:21.0586] <TheQwertiest>
> The implementation intentionally tries not to reveal itself in the language

well, I'd rather not patch SM itself xD

[13:34:40.0121] <mgaudet>
So, I guess what you could do is this: Write a helper that calls into `JSContext::currentScript()`, and use that as a key into a map? 

[13:35:01.0445] <mgaudet>
(with the caveat that you'd need a GC aware hashmap probably) 

[13:35:35.0791] <mgaudet>
Although, I do see now it's not exposed publicly

[13:35:38.0507] <mgaudet>
:S 

[13:36:01.0837] <TheQwertiest>
yup =)

[13:36:08.0527] <TheQwertiest>
it's just

[13:36:42.0541] <TheQwertiest>
there is CompileOptions that can contain filepath

[13:37:00.0630] <TheQwertiest>
and this filepath is reported when there's an error in said JS script

[13:37:28.0842] <TheQwertiest>
so the script kinda knows which one it is, but just does not expose it =(

[13:39:13.0529] <TheQwertiest>
ugh, I just thought of a veeeery ugly hack: throw a JS exception in helper, catch it, retrieve script filepath and suppress it

[13:39:37.0532] <TheQwertiest>
but I'd rather not throw random exceptions around

[13:39:45.0056] <TheQwertiest>
 * but I'd rather not throw random exceptions around :D

[13:39:55.0952] <mgaudet>
sort of... except in normal JS, filename and script don't really have a 1:1 relation

[13:40:07.0066] <mgaudet>
though you can definitely take advantage of that for your problem

[13:40:52.0560] <TheQwertiest>
> <@mgaudet:mozilla.org> sort of... except in normal JS, filename and script don't really have a 1:1 relation

I do set it myself, so I can probably work around that, but performance-wise this will be really horrible most likely

[13:41:11.0373] <TheQwertiest>
and it might probably screw some JS optimizations as well?

[13:41:18.0616] <mgaudet>
only if you have to do it lots :P 

[13:41:33.0628] <mgaudet>
but even then, if you can cache results, it might be fine. 

[13:42:18.0507] <TheQwertiest>
can't really cache results, since I need location to actually retrieve the data

[13:42:42.0566] <TheQwertiest>
though I don't think that users will load a lot of scripts all the time

[13:42:48.0955] <TheQwertiest>
I really hope not at the very least

[13:44:35.0023] <TheQwertiest>
mgaudet: any chance for currentScript to be exposed? e.g. in the 9x esr? =)

[13:45:15.0161] <mgaudet>
oh! Actually 

[13:45:26.0070] <mgaudet>
I just realized; you almost certainly can do what you want with the debugger API

[13:45:46.0669] <mgaudet>
https://firefox-source-docs.mozilla.org/js/Debugger/ 

[13:45:46.0995] <TheQwertiest>
the are that I've yet to tackle

[13:45:52.0218] <TheQwertiest>
 * the area that I've yet to tackle

[13:46:10.0851] <mgaudet>
I'd take a peek -- it's a pretty rich interface that could well save you a lot of headache here

[13:46:27.0101] <TheQwertiest>
oh, SM has a new docs page?

[13:46:31.0358] <TheQwertiest>
looks pretty neat

[13:46:34.0466] <TheQwertiest>
 * looks pretty neat =)

[13:47:00.0524] <mgaudet>
I'd have to think a bit more about exposing currentScript to embedders; haven't clearlly thought through impacts 

[13:47:42.0459] <TheQwertiest>
any tips about using debugger api? i.e. performance caveats or smth

[13:48:47.0176] <TheQwertiest>
or is it pretty tame and I should not worry about it in my case?

[13:49:46.0076] <TheQwertiest>
```
sourceHandler(ASuffusionOfYellow)

This method is never called. If it is ever called, a contradiction has been proven, and the debugger is free to assume that everything is true.
```

[13:49:49.0510] <TheQwertiest>
xDDDDDD

[13:52:01.0584] <TheQwertiest>
> <@theqwertiest:mozilla.org> any tips about using debugger api? i.e. performance caveats or smth

e.g. is it alright to keep debugger attached to global object?

[13:52:47.0382] <mgaudet>
Definitely there can be a performance impact. 

[13:53:35.0338] <mgaudet>
In some places we have to change how things are implemented to keep the debugger happy; but, I'd try it first and see if it's a deal breaker 

[13:53:50.0884] <mgaudet>
unfortunately performance impact is application sensitive

[13:54:06.0715] <TheQwertiest>
hm, is there a performance impact on
- keeping unnattached debugger alive
- attaching\detaching debugger without keeping it attached for long?


[13:54:38.0686] <mgaudet>
On the former, I'll bet relatively little impact; on the latter, not confident 

[13:54:44.0869] <TheQwertiest>
 * hm, is there a performance impact on
- keeping unnattached debugger alive
- attaching\detaching debugger without keeping it attached for long? e.g. get some info without running JS and then detach

[13:55:31.0867] <TheQwertiest>
oh well, guess I'll have to find out myself...
thanks for the help!


2021-06-25
[02:50:09.0237] <nbp>
confession: Working on eager delazification: Making sure CompilationInput does not expose `BaseScript* lazy` field publicly, such that we can later use a Stencil in-place of the BaseScript pointer.

[02:50:11.0352] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[05:13:56.0706] <nbp>
I am confused, we have a BaseScript structure, but given the name I would expect to see some inheritance pattern where this class is used as a base.

[05:23:42.0155] <Ms2ger>
Like `class JSScript : public js::BaseScript`?

[05:25:56.0044] <Ms2ger>
/me doesn't recall if there's another derived class, though

[05:26:41.0007] <tcampbell|ooo-ish>
Previously there was LazyScript. Now we have BaseScript with all the data fields, and then for legacy reasons use JSScript when we mean that the basescript has bytecode

[05:40:16.0051] <jonco>
mgaudet: sorry about bug 1678774, it was probably nothing to do with your change at all

[05:40:17.0888] <botzilla>
https://bugzil.la/1678774 ‚Äî NEW (nobody) ‚Äî Intermittent PROCESS-CRASH | Main app process exited normally | application crashed [@ mozilla::LinkedList<js::ParseTask>::~LinkedList()]

[06:14:03.0590] <mgaudet>
jonco: I still think your identification of the patch is at least reasonable; I'm trying to see if the pernosco folks can try to get a trace of that failure; given the frequency I'm hopeful, though apparently these suites don't tend to get along with the pernosco reproducer. 

[06:23:23.0083] <nbp>
Somehow looking for BaseScript on searchfox did not yield the JSScript case :/ or I miss-read.

[06:39:18.0652] <mgaudet>
I've run into that before; you expect to search for `public BaseScript` to find its inheritors, but JSScript has the namespace annotation on its 'heritage expression'; `class JSScript : public js::BaseScript` 

[06:39:32.0435] <mgaudet>
causing you to totally miss it when trying to find it 

[06:48:50.0008] <Ms2ger>
searchfox should do semantic analysis to find inheritance relations

[06:49:49.0703] <nbp>
it does.

[06:50:07.0475] <nbp>
at least it does find them, sometimes.

[06:55:28.0807] <Ms2ger>
I thought so too

[13:57:11.0023] <mgaudet>
confession: Confusing myself following WarpBuilder; time to disappear for a vacation methinks :) 


2021-06-29
[20:58:37.0567] <leveryd>
hello, i have a question about javascript syntax: can we call a function with argument when does not use some character like '('„ÄÅ'`'  ?  i setup a ctf demo server on "http://106.13.236.30/1.php".

[20:59:00.0420] <leveryd>
<body>
<script>
function hello(a, b, c){
  if(a=="a" && b=="b" && c=="c"){
    console.log("flag");
  }
}

<?php
  $a = $_GET["a"];
  $a = str_replace("=", "",$a);
  $a = str_replace("(", "",$a);
  $a = str_replace(")", "",$a);
  $a = str_replace("`", "",$a);
  $a = str_replace("\\", "",$a);
  $a = str_replace("<", "&lt;",$a);

  echo "var a='$a'";
?>
</script>
</body>

[21:20:54.0123] <leveryd>
 * hello, i have a question about javascript syntax: can we call a function with argument when does not use some character like '('„ÄÅ'`'  ?  i setup a ctf demo server on "http://106.13.236.30/1.php?a=11".

[01:10:59.0155] <leveryd>
how to lookup "javascript code snippet"'s bytecode? use what tool or command?

[01:11:49.0056] <arai>
you can use SpiderMonkey JS shell's `dis` command

[01:11:58.0691] <arai>
it shows disassembly, including bytecode, source notes, etc

[01:12:31.0923] <arai>
passing a function to `dis` command shows the function's bytecode

[01:12:44.0871] <arai>
calling `dis` without any parameter shows the current script's bytecode

[01:13:00.0500] <leveryd>
ok, i will try it

[01:14:42.0990] <arai>
`dis` function works only on debug build, so you need to build the JS shell with --enable-debug

[01:14:49.0800] <arai>
it's no-op on non-debug build

[01:15:46.0625] <leveryd>
thanks for your remind

[02:33:44.0903] <leveryd>
i use "clion" ide to read spidermonkey source code, but i can not "jump to function declare" in ide.  should i change to another ide such as "source insight"? i have tried to configure "vim" following https://firefox-source-docs.mozilla.org/contributing/editor.html?highlight=vim,but fail on my osx system.

[02:34:48.0593] <leveryd>
 * i use "clion" ide to read spidermonkey source code, but i can not "jump to function declare" in ide.  should i change to another ide such as "source insight"? i have tried to configure "vim" following https://firefox-source-docs.mozilla.org/contributing/editor.html?highlight=vim ,but fail on my osx system.


2021-06-30
[08:49:00.0795] <Redfire>
Question, on `JSFunctionSpec`, what does `selfHostedName` do? 

[08:57:02.0050] <Redfire>
seems that my code breaks if that is set to anything other than a null ptr

[09:00:24.0493] <Ms2ger>
Doctor, it hurts when I do that - then don't do it ;)

[09:01:38.0166] <iain>
We implement some builtins as self-hosted JS code. (See, for example, [Array.js](https://searchfox.org/mozilla-central/source/js/src/builtin/Array.js)) They get a bunch of special handling.

[09:03:16.0727] <iain>
It looks like there are a couple of places where we infer "this function is self-hosted" based on the presence of `selfHostedName`

[09:14:01.0824] <Redfire>
oh hmm, interesting

[09:15:11.0616] <Redfire>
I don't need it either way, but it may be useful later on

