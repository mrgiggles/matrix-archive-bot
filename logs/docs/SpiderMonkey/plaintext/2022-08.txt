2022-08-01
[19:02:10.0744] <Redfire>
Update: I've got the source map working for error reports (exception + stack) and exceptions
I just don't know how I would intercept the Error constructor for its `error.stack`

[19:04:17.0305] <Redfire>
  https://paste.gg/p/redfire/99b80a48885f4aefa7f31a8e36b6b820

[06:24:17.0785] <nbp>
jandem: Thanks for the feedback about ParserAtom and JSAtom.

[06:25:07.0323] <nbp>
This is a hidden property which was just hard to convince my-self about by reading the code.

[11:07:18.0450] <gkw>
sfink: two new bugs for you :)

[11:07:33.0060] <Mohamed Atef>
The terminal exits when i run`./mach jit-test`

[11:07:44.0415] <Mohamed Atef>
* The terminal exits when i run `./mach jit-test`

[11:07:57.0334] <arai>
which OS and terminal are you using?

[11:08:05.0586] <Mohamed Atef>
It exits at 80%

[11:08:09.0906] <Mohamed Atef>
Ubuntu

[11:08:17.0407] <Mohamed Atef>
Bash shell

[11:09:23.0747] <arai>
perhaps OOM killer?

[11:10:03.0875] <sfink>
gkw: cool! they're filed?

[11:10:22.0775] <gkw>
sfink: yes, you're needinfo'ed, they're fresh off the oven, please check

[11:10:58.0953] <Mohamed Atef>
> <@arai:mozilla.org> perhaps OOM killer?

I have 8GB Ram
Is there any omline platform
The tests works fine for the 80%

[11:12:14.0992] <arai>
Mohamed Atef: okay, if it runs until 80%, it sounds fine.  There's try server for automation.  please submit your patch to phabricator, I'll push it to try

[11:12:43.0954] <arai>
then, 8GB sounds sufficient, as long as there's no other application that takes much

[11:13:00.0555] <Mohamed Atef>
Okay, thanks. 

[11:13:20.0533] <arai>
there might be some info in syslog or something, around the issue

[11:14:00.0296] <arai>
(I've never heard of that case so far tho...

[11:24:48.0184] <arai>
Mohamed Atef: added comments.  can you please address them?  after that, I'll push it to try

[12:02:33.0873] <devscripter>
hello

[12:03:07.0791] <devscripter>
i want to embed spidermonkey into my c++ app, much like Lua or Python.

[12:03:57.0889] <devscripter>
But do I really have to download the entire mozilla source? It's like toooo large, I just want the JavaScript portion so I can have scripting in my c++ program

[12:05:28.0771] <ptomato>
devscripter: you can use the tarballs that GNOME packages: https://download.gnome.org/teams/releng/tarballs-needing-help/mozjs/

[12:05:33.0920] <ptomato>
they are not updated regularly

[12:06:03.0958] <ptomato>
another option is to search for "pkg" jobs on treeherder: https://treeherder.mozilla.org/jobs?repo=mozilla-esr102&searchStr=pkg

[12:06:16.0727] <ptomato>
however, it's difficult to know from the UI what is an official release and what is just an interim build

[12:06:26.0931] <ptomato>
and the download links are not valid indefinitely

[12:07:18.0912] <sfink>
for an esr, there's probably not a whole lot of difference between interim builds and a release. So especially when you're just developing, it's probably fine.

[12:08:55.0214] <sfink>
note that the SM(pkg) tarballs are also a lot bigger than they need to be, because they include a ton of test files

[12:09:03.0502] <sfink>
I kinda want to split them out

[12:38:56.0053] <devscripter>
lol what are tarballs?

[12:39:03.0451] <devscripter>
sorry never heard bout em

[12:39:16.0427] <devscripter>
oh nvm

[12:40:14.0750] <devscripter>
also I wanted to ask can I build spidermonkey statically without needing ANY dependencies along with my executable?

[12:42:28.0990] <ptomato>
yes, the build process outputs a `libjs_static.ajs` which is a static library, but (1) it's huge and (2) I doubt many embedders use it so it's probably not very well tested

[12:43:22.0474] <devscripter>
oh ok, i also recall there was something like nspr? what was that exactly

[12:59:32.0256] <ptomato>
that's no longer a dependency

[13:13:31.0490] <TheQwertiest>
> <@arai:mozilla.org> what do you mean by "cache" ?

by caching I mean saving the `atomization` result for the property name when it's accessed and reusing it on all subsequent calls (similar to how it's done here - https://searchfox.org/mozilla-central/source/__GENERATED__/dom/bindings/EventListenerBinding.cpp#52)

ps: sorry for the delayed response, ISP left me without internet for the whole day...

[13:16:12.0791] <Mohamed Atef>
> <@arai:mozilla.org> Mohamed Atef: added comments.  can you please address them?  after that, I'll push it to try

Okay,  I am compiling, and I will resubmit. 

[13:19:13.0446] <arai>
TheQwertiest: If you hold the cache with `Rooted` or `PersistentRooted`, then you can hold any kind of GC things there.  if you don't use rooting, then I think you need some kind of flag to make it non-movable.  pin would be that, but I'm not confident

[13:20:59.0822] <Mohamed Atef>
By the way for the unreachable retrval in normal functions, Is there some flag that let us know if the function has a body and a return value so we stop if it returns



[13:21:22.0344] <Mohamed Atef>
While parsing can we check that 

[13:22:11.0866] <arai>
Yes, we can track the control flow to see if there's always `return` at the end of all paths

[13:23:30.0980] <arai>
so far I think there isn't any flag that represents it

[13:24:27.0016] <TheQwertiest>
unrelated question: while internet was out, I was trying to implement modules support:
- what is `modulePrivate` in module resolution hook? (second argument)  https://searchfox.org/mozilla-central/source/js/public/Modules.h#60
- what is `top level await` and how the embedding should handle it?
- should embedding care for rval of `JS::ModuleEvaluate` for non-dynamic modules?

[13:26:02.0385] <Mohamed Atef>
For this case
dis((a, b) => {const x = 5; return x + a+b;} ) 

[13:26:40.0249] <Mohamed Atef>
It produces unreachable 
DebugLeaveLexicalEnv 

[13:26:51.0317] <TheQwertiest>
> <@theqwertiest:mozilla.org> unrelated question: while internet was out, I was trying to implement modules support:
> - what is `modulePrivate` in module resolution hook? (second argument)  https://searchfox.org/mozilla-central/source/js/public/Modules.h#60
> - what is `top level await` and how the embedding should handle it?
> - should embedding care for rval of `JS::ModuleEvaluate` for non-dynamic modules?

PS: a funny thing I've noticed that module resolution is done via inlined JavaScript code xD

[13:28:16.0257] <arai>
TheQwertiest: module private is the value set by `JS::SetModulePrivate`.  so, it's user-provided thing

[13:29:18.0738] <TheQwertiest>
> <@arai:mozilla.org> TheQwertiest: module private is the value set by `JS::SetModulePrivate`.  so, it's user-provided thing

uhm, but how could it be provided as argument for the hook if the module is not resolved yet?

[13:33:20.0024] <TheQwertiest>
> <@arai:mozilla.org> TheQwertiest: module private is the value set by `JS::SetModulePrivate`.  so, it's user-provided thing

 * uhm, but how could it be provided as argument for the hook if the module has not been resolved yet?

[13:34:44.0567] <arai>
my understanding is that it's for dynamic import etc.  but maybe I'm wrong

[13:34:50.0264] <arai>
jonco: ^

[13:35:58.0615] <arai>
Mohamed Atef: yes, if there's explicit `return`, all instructions after that, until the next `JumpTarget` become unreachable

[13:37:52.0745] <Mohamed Atef>
Is this intentional as it may be affect the other parts? 

[13:38:15.0293] <Mohamed Atef>
I modified the patch

[13:38:39.0426] <Mohamed Atef>
* I resubmitted the patch

[13:39:21.0365] <arai>
somewhat intentional, to balance the stack depth etc. but of course, we can optimize some unnecessary instructions

[13:44:39.0075] <Mohamed Atef>
Can we build the control Flow graph from the AST, or it will be un useful and hard as we don't know the whole code from the start? 

[13:45:14.0019] <arai>
building the full control flow graph might be overkill

[13:47:16.0466] <arai>
if there are non-negligible amount of unreachable code emitted on many websites, then looking into it would make sense

[13:50:53.0127] <Mohamed Atef>
Makes sense thanks. 

[13:51:28.0556] <Mohamed Atef>
By the way I am thinking to study for a master degree soon. 

[13:51:57.0078] <Mohamed Atef>
Are there any hot areas or some research ideas?

[13:54:09.0015] <Mohamed Atef>
can anyone explain this:

The analysis task source-test-clang-format failed, but we could not detect any issue.
Please check this task manually.

[13:54:56.0878] <arai>
there's some internal error on the server that runs tests

[13:55:02.0950] <arai>
you can ignore it

[13:58:00.0414] <arai>
the same test is executed on the try run I've posted

[13:58:44.0917] <Mohamed Atef>
I saw it, thanks. Sorry for asking many questions, and making mistakes. 

[13:59:25.0984] <arai>
no problem. feel free to ask questions any time :)

[14:00:02.0220] <devscripter>
ok I downloaded tarball how do I build spidermonkey statically now?

[14:01:38.0270] <arai>
oh, that's document for downloading the source

[14:01:44.0909] <arai>
this is for building https://firefox-source-docs.mozilla.org/js/build.html

[14:01:45.0736] <devscripter>
yea

[14:02:41.0666] <devscripter>
do we need to download more tools then? like mozmake and stuff cuz m on windows

[14:03:30.0329] <devscripter>
and "mach"

[14:03:31.0631] <arai>
on merucial/git checkout, `./mach bootstrap` and `./mach build` will download necessary tools.  but I'm not sure if it works on source tarball

[14:03:47.0378] <devscripter>
building spidermonkey is hard

[14:03:51.0037] <arai>
`mach` is a script file stored on the top-level of source

[14:03:59.0252] <devscripter>
i wished they used cmake

[14:05:51.0280] <Mohamed Atef>
I needed rustc, and m4 on linux. The build stops automatically if the environment Is no prepared. The  error message explains what Is missed.


[14:07:09.0395] <devscripter>
can i get like a really simple step-by-step instruction on where to go after downloading the tarball, cuz the documentation on the site is very confusing for me :

[14:07:35.0772] <devscripter>
i have unzipped the tarball mozjs 91.5.0

[14:08:11.0473] <devscripter>
and also m on WINDOWS 11

[14:08:44.0411] <ptomato>
devscripter: this may help: https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr91/docs/Building%20SpiderMonkey.md

[14:08:52.0381] <ptomato>
although it doesn't contain specific instructions for Windows

[14:08:57.0316] <ptomato>
you will need WSL, most likely

[14:09:29.0993] <ptomato>
and a way to install the dependencies mentioned in that doc in your WSL environment

[14:09:40.0067] <ptomato>
I'm not familiar with WSL so I can't be any more specific than that

[14:10:01.0206] <devscripter>
wot's wsl

[14:10:24.0756] <ptomato>
Windows Subsystem for Linux

[14:12:50.0176] <Mohamed Atef>
arai:  what should I do now I am on fire? 😂

[14:15:11.0932] <arai>
Mohamed Atef: have you checked the callers of the functions that had assertions for `JSOp::RetRval`, and also `InterpreterRegs::setToEndOfScript` ?  if not, it would be nice to check how the last instruction or program counter is used there

[14:15:43.0416] <arai>
the test on try will finish within 20 min

[14:16:30.0434] <arai>
that will tell us if there's any missing case tho

[14:19:25.0189] <Mohamed Atef>
> <@arai:mozilla.org> Mohamed Atef: have you checked the callers of the functions that had assertions for `JSOp::RetRval`, and also `InterpreterRegs::setToEndOfScript` ?  if not, it would be nice to check how the last instruction or program counter is used there

There are only two assersions for JSOp::RetRval
For setToEndOfscript I checked it out it doesn't use it.
The tesr will show if I am missing something.


[14:21:45.0966] <arai>
yeah, have you checked the caller and enclosing code for the assertion?  wasn't there any code that relies/assumes the last opcode?  if there wasn't, then that's fine

[14:33:12.0105] <Mohamed Atef>
> <@arai:mozilla.org> Mohamed Atef: have you checked the callers of the functions that had assertions for `JSOp::RetRval`, and also `InterpreterRegs::setToEndOfScript` ?  if not, it would be nice to check how the last instruction or program counter is used there

 * There are only two assertions for JSOp::RetRval
For setToEndOfscript I checked it out it doesn't use it.
The test will show if I am missing something.

[14:37:45.0497] <Mohamed Atef>
I did.

[14:38:16.0968] <Mohamed Atef>
what should I do next

[14:38:45.0335] <Mohamed Atef>
In case if this is finished correctly.

[14:39:33.0859] <Mohamed Atef>
I am completely free. The military service here is a must and I am waiting, I have two months free.

[14:40:46.0664] <Mohamed Atef>
and If I join the army I will spend one year. so my off days will be 15 days a month , 7 days.

[14:40:55.0799] <Mohamed Atef>
it depends.

[14:41:21.0154] <Mohamed Atef>
so I wish I can help In this time.

[14:41:44.0857] <arai>
if you find the frontend (parser, bytecode emitter) part interesting, then one option is to look into bug 1321932

[14:41:46.0336] <botzilla>
https://bugzil.la/1321932 — NEW (nobody) — Statically set computed property method's function name if computed property name is string or number

[14:42:15.0264] <arai>
if you'd like to try other parts, that's also good thing

[14:44:26.0157] <arai>
also, after fixing some bugs, you can consider getting [commit access](https://www.mozilla.org/en-US/about/governance/policies/commit/access-policy/), that way you can use the try server

[14:45:40.0838] <Mohamed Atef>
> <@arai:mozilla.org> if you find the frontend (parser, bytecode emitter) part interesting, then one option is to look into bug 1321932

I didn't say no interesting, I mean I am completely free 24/7. I liked the two bugs that I worked on. 
I will fix some bugs, but I mean If you guys work on some features that I can help with.
Here's a sample from my previous work.
https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=7d2bea06364d260ed5308403577ac0e18e5a6ea4

[14:51:07.0663] <arai>
the patch looks great :)

[14:52:23.0168] <devscripter>
lol I just need some .lib files and header files so I can embed spidermonkey :(

[14:52:39.0727] <Mohamed Atef>
> <@mohamed_atef:matrix.org> I didn't say no interesting, I mean I am completely free 24/7. I liked the two bugs that I worked on. 
> I will fix some bugs, but I mean If you guys work on some features that I can help with.
> Here's a sample from my previous work.
> https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=7d2bea06364d260ed5308403577ac0e18e5a6ea4

If you mean this, it's part of gcc 13 now 

[14:52:55.0015] <Mohamed Atef>
It will be added there

[15:32:13.0362] <devscripter>
it's so hard to build this thing :(

[15:32:41.0962] <devscripter>
is there a way to build spidermonkey using cmake

[15:41:42.0536] <devscripter>
> <@pchimento:igalia.com> devscripter: this may help: https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr91/docs/Building%20SpiderMonkey.md

Ya but this is not for windows, i am on windows, and there barely any sources for how to do it step-by-step

[15:42:42.0663] <devscripter>
like how to do it with Visual Studio

[15:47:56.0921] <Mohamed Atef>
the test finished and it passed

[15:58:46.0736] <ptomato>
devscripter: what you're asking for, a step by step instruction _for your setup specifically_, doesn't exist

[15:59:55.0113] <ptomato>
I just remembered that GNOME has some extra docs on specifics for building on Windows https://gitlab.gnome.org/GNOME/gjs/-/blob/master/README.MSVC.md

[16:00:05.0055] <ptomato>
hopefully that will get you on the right path

[16:00:49.0788] <ptomato>
although I think the instructions I gave earlier should work on WSL and we should correct them if that's not the case

[16:01:34.0912] <devscripter>
thanks m gonna try out

[16:05:19.0718] <devscripter>
are there any prebuilt binaries for spidermonkey for windows?

[16:11:13.0255] <arai>
Mohamed Atef: some test fails. https://treeherder.mozilla.org/jobs?repo=try&revision=71ad74157ecfe4338c14ea0f03ec55b29722e770&selectedTaskRun=KNihHkXlQHyDHMFiOR3Y3w.1  so looks like the last opcode before `JSOp::RetRval` being `JSOp::Return` isn't always true

[16:16:32.0723] <arai>
Mohamed Atef: the failing test is async function.  so, we should check if the arrow function is not async

[16:19:59.0738] <arai>
posted comment

[16:38:35.0049] <devscripter>
m willing to pay 50$ to anyone who can build spidermonkey statically for windows (visual studio c++) and send the binaries and headers to me 😭😭😢

[16:43:56.0581] <Mohamed Atef>
so we should emit RetRval always if it's async function

[16:44:45.0163] <arai>
yes, for now

[16:45:29.0372] <arai>
in async function, the `RetRval` is always unreachable, but removing it will require some more change, and it's better doing in separate bug

[16:46:38.0051] <arai>
the assertion is reading the last byte.  the SpiderMonkey's bytecode is variable-length, and the last byte can be part of operand, instead of opcode

[16:47:17.0007] <arai>
`RetRval` and `Return` are both single byte, without operand. so the assertion keeps working


2022-08-02
[01:31:40.0317] <jonco>
> <@theqwertiest:mozilla.org> uhm, but how could it be provided as argument for the hook if the module has not been resolved yet?

It's the private value for the importing module

[02:01:52.0144] <arai>
when is the hook called and when is the value supposed to be set?  is the parameter supposed to be provided for the first hook call?  or only for subsequent calls?

[03:47:55.0064] <jonco>
arai: it's for the importer not the imported module - e.g. if module A imports module B then the hook is called with A's private and the specifier for B

[03:48:42.0615] <jonco>
this isn't very clear

[03:49:31.0001] <arai>
okay, makes sense. can you add comments to public types/functions?

[03:49:43.0127] <jonco>
yeah sure

[06:40:09.0924] <l11d>
if I execute the following statement once `Object(... new Float32Array(X));`: can/should this trigger the jitter depending on the value of X?

[06:47:15.0862] <mgaudet>
l11d: yes: 

```
M1MacBook:unified mgaudet$ IONFLAGS=scripts,bl-scripts ./mach run 
 0:00.31 /Users/mgaudet/unified/obj-debug-shell-aarch64-apple-darwin21.4.0/dist/bin/js
found tag: scripts
found tag: bl-scripts
js>  function f(X) { Object(... new Float32Array(X)) } 
js> f(10000)                                            
[BaselineScripts] Baseline compiling script typein:1:11 (3af9f5768060)
[BaselineScripts] Created BaselineScript 1090a9f00 (raw 1b88122ca900) for typein:1:11
[BaselineScripts] Baseline compiling script self-hosted:419:26 (3af9f5768330)
[BaselineScripts] Created BaselineScript 1093b2c00 (raw 1b88122cb400) for self-hosted:419:26
[IonScripts] Warp Compiling script typein:1:11 (3af9f5768060) (warmup-counter=1650,)
js> 
``` 

[06:48:53.0829] <l11d>
this is interesting, thanks. so I guess having just the execution count for each line isn't really an indicator whether jitting took places

[06:49:51.0588] <mgaudet>
Yeah; some source lines expand to quite a bit of bytecode (`dis(f)` above is 139 bytecodes long) 

[06:50:44.0490] <mgaudet>
and as you might expect from the semantics of the spread, some syntax has internal loops, which are sufficient to trigger JIT compilation.

[06:50:57.0501] <mgaudet>
 * and as you might expect from the semantics of  spread, some syntax has internal loops, which are sufficient to trigger JIT compilation.

[06:51:02.0106] <mgaudet>
 * and as you might expect from the semantics of spread, some syntax has internal loops, which are sufficient to trigger JIT compilation.

[06:52:25.0687] <l11d>
makes sense, thanks

[07:20:27.0892] <devscripter>
guys m running ../configure on Windows on spidermonkey start-shell.bat and I get this error:

[07:20:29.0393] <devscripter>
DEBUG: gmake: Looking for gmake
ERROR: Cannot find gmake

[07:20:37.0204] <devscripter>
how do I fix this gmake error

[07:28:07.0644] <devscripter>
Here's a bit more:

[07:28:08.0405] <devscripter>
checking for gmake... not found
DEBUG: gmake: Looking for mingw32-make
DEBUG: gmake: Looking for mozmake
DEBUG: gmake: Looking for make
DEBUG: gmake: Looking for gmake
ERROR: Cannot find gmake

[07:41:24.0978] <arai>
mozmake is supposed to be downloaded by either `./mach bootstrap` or `./mach build` (I don't remember which it was)

[07:42:01.0306] <arai>
if it works, iirc, it downloads into `~/.mozbuild/mozmake`

[07:58:03.0324] <devscripter>
how do you download mach?

[07:59:04.0479] <Ms2ger 💉💉>
It's in the mozilla-central repository

[08:12:06.0782] <devscripter>
it's not in the gnome packages one?

[08:12:19.0444] <devscripter>
cuz i downloaded mozjs-91.5.0 from gnome

[08:12:34.0536] <devscripter>
actually nvm

[08:50:59.0578] <devscripter>
what does "./" mean in ./mach?

[08:51:33.0893] <arai>
`.` is current directory, and `/` is directory separator

[08:51:46.0485] <arai>
so, it means `mach` file in current directory

[08:52:16.0715] <devscripter>
oh so why can't we just type mach

[08:52:26.0573] <devscripter>
./ looks like we're going back a directory

[08:52:46.0188] <l11d>
the parent directory is ..

[08:53:35.0010] <arai>
inside mozilla-build terminal, current directory is not in `PATH`, and if you type `mach`, it doesn't look for the file in current directory

[08:53:36.0679] <l11d>
you probably cannot do just `mach` because it not in your $PATH

[08:54:03.0917] <arai>
(this is different than windows command prompt where files in current directory can be executed without specifying the directory

[08:54:04.0047] <devscripter>
oh I see

[08:54:19.0307] <devscripter>
what does ./mach bootstrap install?

[08:54:28.0009] <devscripter>
does it install rust?

[08:54:56.0057] <arai>
clang, rust, cbindgen, and several other tools

[08:55:22.0216] <devscripter>
oh k is it possible to avoid installing clang since I already have it?

[08:55:37.0881] <devscripter>
it comes with Visual Studio

[08:55:51.0146] <arai>
I'm not sure if you can partially download tools

[08:56:00.0498] <devscripter>
right

[08:56:39.0474] <devscripter>
ok is it possible to call ../configure right after installing all the stuff thru bootstrap or do we have to set some environment variables?

[08:57:16.0211] <arai>
some tool might require explicit PATH

[08:57:36.0015] <devscripter>
ok

[08:57:46.0938] <arai>
I don't know the exact set of the tools.  try running configure and see if any error happens

[08:57:56.0732] <devscripter>
what about mozmake? would i have to set path for it?

[08:58:36.0826] <devscripter>
does bootstrap also download "gmake"?

[09:03:37.0997] <arai>
hmm, if you follow [the document](https://firefox-source-docs.mozilla.org/setup/windows_build.html), it will either setup everything automatically, or tell you when you need to do something manually.  but given you're already doing unusual thing, you'll need to figure out some details by your own

[09:04:11.0246] <devscripter>
how m i doing something unusual, just trying to build spidermonkey on windows :/

[09:12:10.0389] <l11d>
building on windows in not unusual whatsoever. its just that you want to build it while deviating from the intended/supported manner

[09:12:27.0701] <ptomato>
devscripter: it's already quite unusual to build spidermonkey for embedding on any operating system, compared to building spidermonkey for firefox, so that's why

[09:13:57.0198] <devscripter>
but mozilla has pages dedicated to embedding Spidermonkey in C++ apps, it's just that I want to do it on Windows, and there aren't much details

[09:14:29.0293] <devscripter>
> <@l11d:mozilla.org> building on windows in not unusual whatsoever. its just that you want to build it while deviating from the intended/supported manner

what do you mean deviating

[09:42:45.0426] <devscripter>
And what is the intended/supported manner?

[09:50:05.0164] <ptomato>
building it for firefox

[09:55:31.0631] <arai>
in term of setting up environment, cloning the mozilla-unified repository is supported way. `./mach bootstrap` expects mercurial or git checkout

[09:56:10.0000] <arai>
and iiuc, using source tarball is not supported by bootstrap

[10:02:52.0632] <davidj361>
what is the difference between SpiderMonkey and V8 regarding V8's isolates? Is SpiderMonkey basically doing and achieving the same thing as V8's isolates?

[10:04:16.0016] <arai>
it sounds like JSContext corresponds to it?

[10:04:52.0545] <davidj361>
V8 has isolates and contexts, you can multithread isolates but you cannot with contexts unless you lock and unlock the isolate

[10:05:12.0393] <davidj361>
so if i want 100 parallel JavaScripts running I would need 100 isolates

[10:05:52.0960] <davidj361>
"An isolate is a VM instance with its own heap."

[10:07:58.0710] <arai>
`JSContext` or `JSRuntime` would correspond to it

[10:08:40.0043] <davidj361>
I was thinking of `JSRuntime`

[10:09:08.0820] <devscripter>
davidj361: do you use spidermonkey?

[10:09:29.0543] <davidj361>
I'm using both V8 and SpiderMonkey and comparing the engines

[10:09:40.0884] <davidj361>
both very in a very rudimentary manner

[10:09:45.0122] <davidj361>
 * both in a very rudimentary manner

[10:12:05.0702] <davidj361>
i read the boilerplate code of both and some basic documentation but it's still confusing comparing the 2

[10:12:11.0461] <davidj361>
 * i've read the boilerplate code of both and some basic documentation but it's still confusing comparing the 2

[10:13:21.0477] <arai>
you can have `JSRuntime` per each thread, to run JS code concurrently.  iiuc DOM Worker is implemented in this way

[10:14:57.0147] <davidj361>
also is it just me or is there not so much a hierarchy of classes in an OOP manner for SpiderMonkey API?

[10:15:21.0057] <davidj361>
Usually it's more public functions via `JS::`?

[10:15:40.0236] <davidj361>
 * Usually it's all within a `JS::` namespace?

[10:16:07.0329] <devscripter>
> <@davidj361:matrix.org> I'm using both V8 and SpiderMonkey and comparing the engines

are you on Windows?

[10:16:15.0614] <davidj361>
linux atm

[10:16:20.0570] <davidj361>
 * ubuntu atm

[10:16:34.0027] <arai>
yeah, most classes are opaque, and operation on them is done by public functions

[10:16:37.0488] <devscripter>
> <@davidj361:matrix.org> ubuntu atm

but did you manage to build spidermonkey on Windows?

[10:16:55.0056] <davidj361>
no i haven't built it on Windows

[10:16:59.0690] <sfink>
JSAPI started out as a C API. It has been gradually going in a more C++ direction, but it's still more a set of functions than OOP.

[10:17:07.0846] <devscripter>
> <@davidj361:matrix.org> no i haven't built it on Windows

dang it

[10:17:22.0858] <davidj361>
are you trying to build developer libraries or?

[10:17:26.0924] <davidj361>
 * are you trying to build developer libraries or the standalone engine?

[10:18:10.0712] <devscripter>
I am trying to embed Spidermonkey in my C++ application on Windows thru Visual Studio davidj361 

[10:18:42.0783] <devscripter>
cant do it, real pain in the ass

[10:18:48.0222] <davidj361>
I would say follow this https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr91/docs/Building%20SpiderMonkey.md

[10:19:08.0273] <devscripter>
 * cant do it, real pain

[10:19:19.0926] <davidj361>
which is linux cli lol

[10:19:34.0182] <devscripter>
> <@davidj361:matrix.org> which is linux cli lol

yeah that's the problem

[10:19:35.0516] <davidj361>
but i think you can achieve the same via `mach`

[10:19:57.0099] <devscripter>
dude you have no idea how much I tried, m literally crying right now

[10:20:14.0367] <devscripter>
I never thought I would hate linux in my life as much as I do now

[10:20:25.0685] <davidj361>
Various ways I've tried (all on clean checkout):
0. (same for all ways) Exec start-shell.bat from windows cmd

1. Build by mach (based on https://firefox-source-docs.mozilla.org/setup/windows\_build.html):

- `export MOZBUILD_STATE_PATH=SOME_PATH`
- `./mach bootstrap`: choose SM, opt out of telemetry and commiting
- `./mach build`
- fails with `FileNotFoundError: [WinError 2]` (full log will be attached in the next msg)

2. Build from js/src (based on https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr91/docs/Building%20SpiderMonkey.md):

- `cd js/src`
- `cp ./configure.in ./configure`
- `chmod +x ./configure`
- `mkdir _build`
- `cd _build`
- `../configure --enable-nspr-build --disable-jemalloc --disable-js-shell --disable-tests --target=i686-pc-mingw32 --host=i686-pc-mingw32`
- fails during `checking for host system type` (full log in the next msg)

[10:20:26.0282] <devscripter>
no offense

[10:21:00.0525] <davidj361>
a forward from another message from a user I didn't want to ping

[10:21:20.0205] <devscripter>
will I get the .lib and .h files this way?

[10:21:33.0637] <davidj361>
dunno

[10:23:26.0608] <devscripter>
lol then what will I get

[10:23:48.0722] <devscripter>
also I am using the gnome package

[10:32:51.0025] <davidj361>
i mean it's a start where you could build stuff, but I haven't done it in Windows so I can't confirm you'll get .lib files. You'll definitely get .h files though.

[10:36:36.0984] <devscripter>
> <@davidj361:matrix.org> i mean it's a start where you could build stuff, but I haven't done it in Windows so I can't confirm you'll get .lib files. You'll definitely get .h files though.

did you get .a files in linux tho?

[10:46:13.0901] <davidj361>
> <@devscripter:mozilla.org> did you get .a files in linux tho?

all the developer libraries .so files I believe and the whole shebang

[10:46:20.0275] <davidj361>
> <@devscripter:mozilla.org> did you get .a files in linux tho?

 * all the developer libraries, i.e. .so files I believe, and the whole shebang

[10:48:58.0213] <davidj361>
 * all the developer libraries, i.e. .a and .so files I think, and the whole shebang

[12:38:19.0476] <TheQwertiest>
> <@jonco:mozilla.org> It's the private value for the importing module

nice! this also solves the problem of resolving relative paths for modules! (I was struggling with it just yesterday)

[12:40:05.0183] <TheQwertiest>
> <@theqwertiest:mozilla.org> nice! this also solves the problem of resolving relative paths for modules! (I was struggling with it just yesterday)

jonco: could you help me with another module related question, plz? How is embedding supposed to handle top level await? (or should it all)

[12:42:04.0649] <TheQwertiest>
> <@theqwertiest:mozilla.org> nice! this also solves the problem of resolving relative paths for modules! (I was struggling with it just yesterday)

 * jonco: could you help me with another module related question, plz? How is embedding supposed to handle top level await? (or should it at all)

[12:45:19.0880] <Bryan Thrall [:bthrall]>
Looking at https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.cpp#477,490
is there a significant difference between the JSContext from the `SharedContext` versus the `GeneralParser`'s member `cx_` (it gets from [ParserSharedBase](https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.h#246)?

[12:48:00.0679] <mgaudet>
Bryan Thrall [:bthrall]: I kind of would hope not? Maybe assert they're equal, run the tests, and see if anything pops. But it seems very likely to me that they're always identitica

[12:48:03.0500] <mgaudet>
 * Bryan Thrall [:bthrall]: I kind of would hope not? Maybe assert they're equal, run the tests, and see if anything pops. But it seems very likely to me that they're always identitical

[13:36:00.0881] <ptomato>
> <@theqwertiest:mozilla.org> jonco: could you help me with another module related question, plz? How is embedding supposed to handle top level await? (or should it at all)

TheQwertiest: dunno if this helps but here's our commit that enables toplevel await: https://gitlab.gnome.org/GNOME/gjs/-/commit/f39ceac2c5dee2e59924bda229bc256ff24a0418

[13:36:08.0779] <ptomato>
not everything in that diff is relevant

[13:38:04.0380] <ptomato>
you basically have to deal with the out parameter of JS::ModuleEvaluate which is a Promise, and keep your embedding alive until that Promise resolves

[13:38:51.0107] <ptomato>
and switch from JS::FinishDynamicModuleImport_NoTLA to JS::FinishDynamicModuleImport (called with a Promise object instead of a status)

[13:43:17.0585] <TheQwertiest>
thanks! I'll take a look


2022-08-03
[01:31:46.0964] <evilpie>
yulia: somehow I can't answer your DM

[01:33:52.0610] <yulia>
oh weird

[10:22:06.0596] <mgaudet>
Wishlist item for the WASI demo: I wish `dis` was exposed. 


2022-08-04
[18:15:23.0713] <Redfire>
Anyone know what happened to bug 1722802

[18:15:28.0756] <botzilla>
https://bugzil.la/1722802 — UNCONFIRMED (nobody) — Add JSAPI functions to create JS modules w/ custom exports

[23:05:00.0692] <jandem>
> <@mgaudet:mozilla.org> Wishlist item for the WASI demo: I wish `dis` was exposed.

agreed. Let me see how much `--enable-jitspew` affects build size...

[23:13:25.0875] <arai>
it might make sense to enable `dis` on regular opt build shell, given the bytecode is different between opt vs debug

[23:16:29.0809] <jandem>
that's true.

[23:16:34.0439] <jandem>
 * that's true

[23:17:10.0826] <jandem>
I just checked and `JS_JITSPEW` also enables some other interesting things like `dumpStencil` and `dumpObject`

[23:20:20.0509] <arai>
regarding `dump*`, I was thinking about adding `dump()` method to all native classes, to make debugging easier

[23:20:28.0535] <arai>
e.g. bug 1782166

[23:20:29.0918] <botzilla>
https://bugzil.la/1782166 — RESOLVED (arai) — Add debug-only JSScript::dump method that dumps equivalent of `dis()` and some more

[23:21:14.0326] <jandem>
that sounds great

[23:26:31.0377] <jandem>
hm maybe we should expose `js::DumpValue` as testing function too. Could be nice for learning about SM

[00:07:41.0181] <jandem>
arai: one issue is that some functions use stdout and others stderr. Because the demo page uses red for stderr this is very visible for `dumpStencil`/`dumpObject` for example. `dis()` uses stdout

[00:08:24.0957] <arai>
which is preferred?

[00:08:45.0669] <arai>
for dis/dump functions

[00:09:52.0856] <jandem>
I'm not sure.. I think stdout works better for the wasi demo? it would be nice to use the same one everywhere

[00:10:44.0729] <arai>
for dump-related functions, I used stderr to skip buffering.  but we can use stdout and flush at the end of dump function if necessary

[00:14:43.0097] <arai>
also, most dump functions receive `GenericPrinter`, and it can be redirected to different place depending on consumer

[00:14:50.0950] <jandem>
yeah. It's not a big deal though. When I have time I also need to figure out a way to interleave stdout/stderr with wasi, right now it's two separate "files"

[00:14:55.0288] <arai>
 * also, most dump functions receive `GenericPrinter` or subclass, and it can be redirected to different place depending on consumer

[00:26:04.0896] <jandem>
(if we were really serious about it we could have a custom embedding that would interact better with the browser environment, so `dis()` would generate JSON that we then format with HTML/CSS :p)

[00:30:40.0958] <arai>
Using JSON in general makes sense :)  dump functions around stencil use JSON and it works well.  for `dis()`, it needs current format or similar for shell.  we could parse JSON and format on the shell side tho

[00:50:37.0177] <jandem>
makes sense

[01:08:06.0624] <jandem>
arai: I see `dis()` already has some JSON for script info, nice :)

[01:08:46.0288] <arai>
yes, I reused some code from stencil dump functions

[01:12:40.0410] <Redfire>
> <@redfire75369:mozilla.org> Update: I've got the source map working for error reports (exception + stack) and exceptions
> I just don't know how I would intercept the Error constructor for its `error.stack`

I've just found `JS_SetErrorInterceptorCallback`, now I just need to figure out how I can use that in rust...
Probably need to make a PR to rust-mozjs

[01:13:22.0915] <evilpie>
That should not be used at all probably 

[01:13:36.0647] <jandem>
it's nightly-only code I think

[01:15:00.0042] <Redfire>
Why shouldn't it be used? Performance reasons or something?

[01:18:55.0111] <evilpie>
I wonder if the error inception is used at all at the moment, maybe we can remove it

[01:22:14.0880] <Redfire>
https://searchfox.org/mozilla-central/source/xpcom/base/CycleCollectedJSRuntime.cpp#1965 Seems used here, whatever xpcom is?

[01:29:13.0081] <evilpie>
Yes. I think this was added for some kind of telemetry on Nightly to detect new JavaScript errors. I am however not sure if we still have or use that telemetry based on this code

[01:46:04.0629] <jonco>
> <@theqwertiest:mozilla.org> jonco: could you help me with another module related question, plz? How is embedding supposed to handle top level await? (or should it at all)

It should be sufficient to support promises and implement the normal module hooks defined in js/public/Modules.h. JS::ModuleEvaluate now returns a promise.

[02:51:57.0473] <Redfire>
So is there no easy way I can change `Error.stack`, `Error.lineNumber` and `Error.columnNumber` so that any user who uses them can get the values after mapping?

[03:05:05.0328] <arai>
afaik, there's no way to modify them.  you can apply the mapping after catching errors

[03:05:43.0284] <arai>
source mapping is outside of JS engine, except for recognizing the URL in comment

[10:11:57.0230] <Mohamed Atef>
> <@botzilla:mozilla.org> https://bugzil.la/1321932 — NEW (nobody) — Statically set computed property method's function name if computed property name is string or number

arai: I left comments there

[14:15:03.0245] <tcampbell>
Anba is bringing our self-hosted JS builtins inline with eslint which is awesome. Bug 1782491 / Bug 1782273. After those land, when you push changes to try there should be automatic eslint tasks running to help out. Locally you can run `mach lint -l eslint js/src/builtin` if you need.

[14:15:06.0088] <botzilla>
https://bugzil.la/1782491 — ASSIGNED (anba) — Enable "no-undef" ESLint rule for self-hosted code

[14:15:06.0900] <botzilla>
https://bugzil.la/1782273 — ASSIGNED (anba) — Enable prettier for self-hosted code

[14:29:28.0073] <arai>
Mohamed Atef: Thanks!  Do the searchfox links you've used in the comments have correct line number?

[14:29:55.0806] <Mohamed Atef>
Yes

[14:32:34.0540] <arai>
(all they have the same line number and I wondered they're supposed to be different)

[14:33:11.0011] <Mohamed Atef>
What 😮

[14:33:21.0220] <Mohamed Atef>
I will check them now 

[14:33:53.0540] <arai>
in searchfox, you can click the line number to change the selected line, that gets reflected to URL

[14:35:01.0917] <Mohamed Atef>
Yes, it's like github. 

[14:35:09.0604] <Mohamed Atef>
I will update them now 

[14:35:15.0114] <arai>
thanks!

[14:42:12.0681] <Mohamed Atef>
Done. 

[14:42:30.0086] <arai>
Looks good :)  I'll look into it and post comment

[15:01:29.0799] <arai>
posted


2022-08-05
[02:35:22.0967] <liam_g>
In an embedding project, I want to evaluate a string of code and extract all of the values defined in that string. For example (in pseudo-code):

std::string code ("var x = 6; var y = /"hello/" ");
JSObject result = JS::SpecialEvaluate(code);
JS::Value x_r = JS_GetProperty(result, "x");          // x_r == 6
JS::Value y_r = JS_GetProperty(result, "y");          // y_r == "hello"

The normal JS::Evaluate() functions won't do this, because x and y are variables, not return values. Is there some other ways of extracting the values though?

[02:36:58.0887] <arai>
are they all `var` ?  if so, they become global object's property, and you can enumerate global object's properties to get them.  you might need to filter out built-ins tho

[02:37:26.0449] <arai>
oh, if you know the list of variables, then you can just get them from global

[03:40:52.0968] <liam_g>
OK, this makes sense. I'm wondering though if it's possible to have the vars write to somewhere else, i.e. by providing a new / temporary global object?

[03:42:38.0832] <liam_g>
The reason is that I'm going to be calling this a lot as the program is running, and the global object is then going to fill up with values (many of which are obsolete).

[03:44:50.0310] <liam_g>
I guess I can use JSAutoRealm to specify a new global object?

[04:02:38.0592] <arai>
liam_g: this test case uses non-syntactic scope to put global variables on plain object [testJSEvaluateScript.cpp](https://searchfox.org/mozilla-central/rev/eadd77632f1a6385dd52938abbdef4805053a05b/js/src/jsapi-tests/testJSEvaluateScript.cpp#12-36)

[04:02:59.0051] <arai>
you can pass a vector of objects to `JS::Evaluate`, to use it as environment

[04:03:11.0780] <arai>
it works like `with` statement

[07:21:47.0832] <liam_g>
This is brilliant. Exactly what I want.

[07:22:47.0309] <liam_g>
Can anyone explain the logic behind the scopeChain being a vector of objects rather than just being a single object?

[07:23:02.0868] <arai>
it works like nested `with` statement

[07:23:24.0689] <arai>
the last one is the innermost

[07:26:09.0409] <arai>
if the code has expression `x`, it looks up `x` property in the chain, and uses innermost property's value

[07:29:32.0493] <liam_g>
And then the outermost value is treated like a global, i.e. any miscellaneous vars are placed there, as in your testJSEvaluateScript. Right?

[07:31:39.0010] <arai>
oh, "like `with` statement" might be misleading

[07:32:01.0467] <liam_g>
And also, just to be sure, this is independent of the Prototype chain, right? So if I give Evaluate a scopeChain with {a, b}, and b has prototype of c, then it will search b then c then a. Right?

[07:32:25.0303] <liam_g>
This is the behavior that I'm seeing, but I just want to check that I'm not missing something.

[07:34:22.0205] <arai>
iiuc, global is still used

[07:34:59.0356] <arai>
but if you put `var` inside the code, it works differently

[07:35:31.0122] <arai>
so, "creating variable" behaves differently

[07:35:48.0972] <arai>
"reading variable" works like `with`

[07:36:13.0944] <arai>
let me experiment

[07:57:06.0207] <arai>
err, maybe I misunderstood the order of the envChain

[08:03:20.0815] <arai>
 * <del>the last one is the innermost</del>

[08:03:44.0607] <arai>
liam_g: the first one in the vector is the innermost

[08:03:50.0629] <arai>
[EnvironmentObject.cpp](https://searchfox.org/mozilla-central/rev/eadd77632f1a6385dd52938abbdef4805053a05b/js/src/vm/EnvironmentObject.cpp#3290-3301)

[08:09:13.0247] <arai>
https://paste.mozilla.org/mnfyLGtp

[08:48:13.0743] <edorian_dark>
There is an proposal for introducing an Baseline compiler to Wasmtime (https://github.com/bytecodealliance/rfcs/pull/28)
Since cranelift was considerd as a possible backend for SpiderMonkey, it might make keep an eye on it.

[08:48:40.0763] <edorian_dark>
 * There is an proposal for introducing an Baseline compiler to Wasmtime (https://github.com/bytecodealliance/rfcs/pull/28)
Since cranelift was considerd as a possible backend for SpiderMonkey, it might make sense to keep an eye on it.

[09:42:03.0241] <Mohamed Atef>
arai: I posted a comment there, I know it's too much, sorry

[09:43:12.0247] <arai>
don't worry, and don't hesitate to ask questions :)

[09:43:15.0984] <arai>
I'll answer there shortly

[14:38:11.0307] <Mohamed Atef>
posted a comment there, thanks.


2022-08-06
[20:16:03.0803] <Mohamed Atef>
when I try to submit a new patch the phabricator had an older one and prevents me from submitting the new one.
```Phabricator Error: Validation errors:
  - You can not request review of this revision because it has already been closed. You can only request review of open revisions.```

[20:16:59.0153] <arai>
Mohamed Atef: by default, `moz-phab` submits all changesets between mozilla-central and your tip

[20:17:59.0476] <Mohamed Atef>
arai: the patch works fine
but this assertion fails when I run the tests: https://searchfox.org/mozilla-central/rev/d28f7751c47d75699c6ab1afd4852ad84ebb7399/js/src/frontend/ParseNode.h#826

[20:18:01.0580] <arai>
in general, it's better updating to mozilla-central before starting working on new bug

[20:18:31.0419] <arai>
if you've already created new changeset, then you can rebase it onto central

[20:18:42.0430] <arai>
https://www.mercurial-scm.org/wiki/RebaseExtension

[20:19:25.0139] <arai>
Mohamed Atef: what's the backtrace for the assertion failure?

[20:20:39.0560] <Mohamed Atef>
Assertion failure: NodeType::test(*this), at /home/mohamed/Desktop/mozilla-unified/js/src/frontend/ParseNode.h:826
#01: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1ef20cf]
#02: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1ef59c5]
#03: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1ed9fbb]
#04: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1edfe8a]
#05: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1ee3e74]
#06: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1ee3ad2]
#07: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1ed99e0]
#08: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1eeb5ef]
#09: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1ed9d71]
#10: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1edd251]
#11: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1f07674]
#12: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1ef8089]
#13: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1ecdc4b]
#14: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x18ba890]
#15: JS::CompileUtf8File(JSContext*, JS::ReadOnlyCompileOptions const&, _IO_FILE*)[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x18bb8a4]
#16: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1687c29]
#17: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1687562]
#18: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1649eae]
#19: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1643fd4]
#20: ???[/lib/x86_64-linux-gnu/libc.so.6 +0x29d90]
#21: __libc_start_main[/lib/x86_64-linux-gnu/libc.so.6 +0x29e40]
#22: ???[/home/mohamed/Desktop/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js +0x1638989]
#23: ??? (???:???)
Exit code: -11
FAIL - 1659595.js

[20:21:48.0864] <arai>
Can you run it in debugger?

[20:21:56.0603] <arai>
oh

[20:21:59.0338] <arai>
which test fails?

[20:22:08.0970] <arai>
the test has command-line option to run it under debugger

[20:22:40.0204] <Mohamed Atef>
Is there any docs about debugging spidermonkey?

[20:23:46.0104] <arai>
I'm not sure if there's any up-to-date one

[20:25:04.0572] <Mohamed Atef>
should I check this assertion in the computed names too

[20:25:06.0250] <Mohamed Atef>
https://searchfox.org/mozilla-central/rev/4a15041348e08fb0d6f5726015c32861e663fbfe/js/src/frontend/BytecodeEmitter.cpp#8874

[20:26:14.0030] <arai>
if you're running `./mach jstests` or `./mach jit-test`, you can pass `--debugger DEBUGGER_NAME` parameter to run test in debugger

[20:32:20.0794] <arai>
about the `accessorType` assertion, I think it must be moved to `if (propVal->isDirectRHSAnonFunction()) {`'s block

[20:33:03.0381] <arai>
err, maybe I'm wrong

[20:39:35.0691] <arai>
 * <del>about the `accessorType` assertion, I think it must be moved to `if (propVal->isDirectRHSAnonFunction()) {`'s block</del>

[20:49:38.0128] <Mohamed Atef>
it fails.

[20:50:09.0353] <Mohamed Atef>
should I upload the patch,so you can comment there?

[20:50:44.0161] <arai>
yeah, please upload it

[20:55:22.0538] <arai>
so, the assertion about `accessorType` is the following. it's inside `propVal->isDirectRHSAnonFunction()` condition, it means the value is anonymous function at that point.  if the property key is either number or string, and the property is one of method definition or getter or setter, the function already has name.

[20:56:05.0088] <arai>
e.g. `({ foo() {} })`

[20:56:25.0503] <arai>
then, if it's still anonymous function, it means the property is `foo: function() {}` style

[20:56:38.0950] <arai>
and it's not getter or setter

[20:57:30.0430] <arai>
Then, for `ComputedName` and `BigIntExpr` cases, we don't set the function's name at compile-time, and even if it's method or getter/setter, the function is still anonymous

[20:58:46.0178] <arai>
Then, whether to assert `accessorType` there depends on what the patch does for method/getter/setter cases

[09:55:02.0720] <Mohamed Atef>
https://phabricator.services.mozilla.com/D153889

[09:55:28.0241] <Mohamed Atef>
it fails in this test: dis(() => ({ [10]: function() {} }));

[09:55:45.0124] <Mohamed Atef>
I couldn't find the reason

[09:56:00.0442] <arai>
let me look into it

[09:56:17.0019] <arai>
have you got assertion failure?

[09:58:29.0410] <arai>
Mohamed Atef: so, it fails here https://searchfox.org/mozilla-central/rev/675d6b7b04c4a802493d29632ee45f6e036a5702/js/src/frontend/ParseNode.h#826
```cpp
MOZ_ASSERT(NodeType::test(*this));
```

[09:59:51.0830] <arai>
in this line https://searchfox.org/mozilla-central/rev/675d6b7b04c4a802493d29632ee45f6e036a5702/js/src/frontend/BytecodeEmitter.cpp#9209
```cpp
double numValue = key->as<NumericLiteral>().value();
```

[10:01:58.0146] <arai>
it's inside `BytecodeEmitter::emitPropertyListObjLiteral` function, that's for emitting statically known object literal

[10:04:34.0430] <arai>
https://searchfox.org/mozilla-central/rev/675d6b7b04c4a802493d29632ee45f6e036a5702/js/src/frontend/BytecodeEmitter.cpp#10043-10044,10049,10067
```cpp
isPropertyListObjLiteralCompatible(objNode, &useObjLiteralValues,
                                   &useObjLiteral);
...
if (useObjLiteral) {
...
  if (!emitPropertyListObjLiteral(objNode, op, useObjLiteralValues)) {
```

[10:05:03.0579] <arai>
 * it's inside `BytecodeEmitter::emitPropertyListObjLiteral` function, that's for emitting object literal where the set of properties is statically known

[10:05:47.0971] <arai>
then, the patch modifies `isPropertyListObjLiteralCompatible`

[10:06:30.0572] <arai>
and it now returns `useObjLiteral=true` for computed property

[10:09:58.0062] <arai>
object literal is emitted in 3 ways, for optimization purpose.  The most unoptimized case is `JSOp::NewInit` (create empty object) +`JSOp::InitElem` (define property) for each.

[10:11:50.0208] <arai>
if the set of properties is statically known, it uses `JSOp::NewObject` instead of `JSOp::NewInit`.  This way the newly created object already has ["shape"](https://searchfox.org/mozilla-central/source/js/src/vm/Shape.h#44) for the known properties, and access is optimized

[10:13:09.0424] <TheQwertiest>
> <@jonco:mozilla.org> It should be sufficient to support promises and implement the normal module hooks defined in js/public/Modules.h. JS::ModuleEvaluate now returns a promise.

sorry, did not notice your reply. Does this apply to esr91 as well?

[10:14:25.0678] <arai>
then, if the object literal is singleton, that means, if the code is executed only once (e.g. it's at top-level script, outside of loop), and there's only one instance, it uses `JSOp::Object`, that pushes object with known property keys and values, and `JSOp::InitElem` is not used

[10:15:50.0737] <arai>
`dis(() => ({ [x]: 10 }))` shows `NewInit` case, and `dis(() => ({ x: 10 }))` shows `NewObject` case

[10:16:10.0653] <arai>
and `({x: 10}); dis();` shows `Object` case

[10:16:30.0100] <arai>
(`dis()` without parameter shows bytecode for currently executed script

[10:17:22.0259] <arai>
then, before the patch, computed property case uses `NewInit`.  and after the patch, given `isPropertyListObjLiteralCompatible` returns `useObjLiteral=true`, it tries to use `NewObject`

[10:18:14.0747] <arai>
and `NewObject` and `Object` is handled in `BytecodeEmitter::emitPropertyListObjLiteral` method, and the method also needs to support computed property case

[10:18:33.0530] <arai>
Currently, the method assumes the property is either string or number

[10:18:42.0708] <arai>
https://searchfox.org/mozilla-central/rev/675d6b7b04c4a802493d29632ee45f6e036a5702/js/src/frontend/BytecodeEmitter.cpp#9164-9165,9185,9189,9208-9209
```cpp
bool BytecodeEmitter::emitPropertyListObjLiteral(ListNode* obj, JSOp op,
                                                 bool useObjLiteralValues) {
...
  for (ParseNode* propdef : obj->contents()) {
...
    if (key->is<NameNode>()) {
...
    } else {
      double numValue = key->as<NumericLiteral>().value();
```

[10:18:56.0618] <arai>
so, the loop handles only `NameNode` and `NumericLiteral`

[10:19:04.0311] <arai>
and you need to add `ComputedName` branch

[10:27:24.0622] <arai>
hm, I guess, the patch is touching 2 separate things.  supporting computed property for anonymous function name, and supporting computed property for object literal optimization

[10:28:04.0974] <arai>
it might be better splitting the patch into 2, for each, unless those 2 depends each other

[10:29:16.0328] <arai>
Mohamed Atef: does it pass if you revert the change to `IsDestructuringRestExclusionSetObjLiteralCompatible`, `BytecodeEmitter::emitDestructuringObjRestExclusionSet`, and `BytecodeEmitter::isPropertyListObjLiteralCompatible` ?

[10:29:55.0088] <Mohamed Atef>
I will check now.

[10:30:42.0830] <arai>
if it works, then it's better focusing to function name part in the first patch. and then work on the object literal part in followup bug

[10:43:51.0570] <Mohamed Atef>
it works, Iuploaded It 

[10:43:58.0705] <Mohamed Atef>
https://phabricator.services.mozilla.com/D153889

[10:44:16.0439] <Mohamed Atef>
I left a comment // Should we assert here for accessorType == AccessorType::None

[10:44:36.0322] <arai>
okay, I'll review it.  meanwhile, can you try adding some testcases?

[10:44:48.0313] <arai>
to verify that function name is properly set

[10:47:29.0274] <Mohamed Atef>
you mean regression tests, or test it locally?

[10:48:48.0122] <arai>
test file, in js/src/tests/non262/Function

[10:51:15.0282] <arai>
here's example https://searchfox.org/mozilla-central/source/js/src/tests/non262/Function/configurable-length-builtins.js

[10:52:06.0144] <arai>
https://firefox-source-docs.mozilla.org/js/test.html

[11:54:30.0389] <arai>
Mohamed Atef: posted comment. Good find about `accessorType` assertion.  it's actually important there

[12:10:43.0112] <arai>
(and we should've had detailed comment for each step, when which case is supposed to be handled...)


2022-08-07
[08:16:32.0807] <Mohamed Atef>
Thanks for the comment.

[08:17:18.0864] <Mohamed Atef>
It was very informative, appreciate your efforts.

[09:35:37.0080] <arai>
Thanks :)  posted comment there.  the code change loosk good. please add testcases

[09:40:14.0216] <arai>
 * Thanks :)  posted comment there.  the code change looks good. please add testcases

[13:25:12.0534] <Mohamed Atef>
```
```

[13:25:21.0098] <Mohamed Atef>
 * ```
var obj = {
  ["func"]: function() {},
  ["genFunc"]: function*() {},
  ["asyncFunc"]: async function(x) {
    const y = 4;
    return x + y;
  },
  ["asyncGenFunc"]: async function*(x) {
    yield x * x;
  },
  get ["getter"]() {},
};
```

[13:25:42.0366] <Mohamed Atef>
sorry, I am new to java script.

[13:25:57.0890] <Mohamed Atef>
```
assertEq(obj.func.name, "func");
assertEq(obj.genFunc.name, "genFunc");
assertEq(obj.asyncFunc.name, "asyncFunc");
assertEq(obj.asynGencFunc.name, "asyncGenFunc");
```

[13:26:14.0189] <Mohamed Atef>
here's a sample test, is that okay?

[13:48:36.0272] <arai>
Yeah, looks good :)  in the same way, please add arrow function, async arrow function, named function, method, setter, etc

[13:48:57.0259] <arai>
actually, the content of the function can be empty

[13:49:08.0979] <arai>
that part is not target of the testcase

[13:49:56.0096] <Mohamed Atef>
Okay

[14:07:04.0981] <Mohamed Atef>
> <@arai:mozilla.org> Yeah, looks good :)  in the same way, please add arrow function, async arrow function, named function, method, setter, etc

Why should we test arrow functions?
I thought there name will be undefined?

[14:09:34.0696] <arai>
arrow function gets name if inferred

[14:09:41.0649] <arai>
try running `({ foo: () => {} }).foo.name`

[14:10:09.0929] <arai>
also, if there's some case that function name doesn't get inferred, we should also test that it indeed doesn't get inferred name

[14:11:20.0757] <arai>
for example, if the property value is named function, the name shouldn't be overwritten by inferred name

[15:15:58.0502] <Mohamed Atef>
```
class dummy {
  ["func"]() {};
  *["genFunc"]() {yield 1;};
  async ["asyncFunc"] () {};
  async *["asyncGenFunc"]() {};
  nonAnonymous() {};
  get ["getter"]() {};
  set ["setter"](x) {};
};
cl = new dummy();
let x = Object.getOwnPropertyDescriptor(cl, "getter");
console.log(x)
```

[15:16:18.0132] <Mohamed Atef>
the output is undefined, is this right?

[15:18:02.0200] <arai>
`cl` is an instance of `dummy` class, and `getter` is defined on `dummy` class's prototype object, and `Object.getOwnPropertyDescriptor` returns only own property's descriptor

[15:18:10.0717] <arai>
so, it's `undefined`

[15:18:52.0244] <arai>
you need to perform `Object.getOwnPropertyDescriptor` on `dummy.prototype`

[15:59:02.0272] <arai>
Mohamed Atef: have you created the test files? if so, please run `hg add PATH_TO_FILES` before `hg commit --amend`

[15:59:06.0586] <arai>
you can see the status by `hg status`

[15:59:23.0452] <arai>
if it shows files with `?` prefix, it means those files exists but not tracked by mercurial

[16:01:23.0272] <Mohamed Atef>
done.

[16:01:26.0224] <Mohamed Atef>
Thanks.

[16:03:39.0160] <Mohamed Atef>
I will add function-name-computed-02.js now 

[16:03:47.0333] <Mohamed Atef>
but should I add more tests?

[16:08:03.0144] <arai>
yeah, 01 adds tests for string literal case. and numeric literal case is not covered

[16:08:17.0261] <arai>
so, that needs another test

[16:08:28.0754] <Mohamed Atef>
okay

[16:08:57.0811] <arai>
also, guessed atom needs its own testcase 

[16:09:16.0775] <arai>
both for string and numeric

[16:09:39.0758] <Mohamed Atef>
what do you mean by guessed atom?

[16:10:45.0686] <arai>
the latter half of https://phabricator.services.mozilla.com/D153889#5045568 this comment

[16:28:57.0044] <arai>
(sorry I explained too many things at once

[16:33:14.0085] <Mohamed Atef>
nope, In fact, I am very happy, I learned a lot.

[16:33:38.0232] <Mohamed Atef>
Thank you very much.

[16:57:12.0530] <Mohamed Atef>
does `displayName` work for async, and generator functions?


2022-08-08
[17:01:38.0844] <Mohamed Atef>
should I use `isAsyncFunction` instead?

[17:04:23.0631] <arai>
`displayName` works for all functions

[17:04:31.0350] <arai>
async and generators

[17:05:13.0811] <Mohamed Atef>
assertEq(displayName(obj.genFunc()), "genFunc/<");

[17:05:26.0681] <Mohamed Atef>
Error: Must have one function argument. Usage: displayName(fn)

[17:05:37.0668] <arai>
oh

[17:06:13.0933] <arai>
if you call generator function, the returned value is generator object, not the value returned by `return` statement inside it

[17:06:26.0753] <arai>
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator

[17:07:09.0214] <Mohamed Atef>
assertEq(displayName(obj.asyncFunc()), "asyncFunc/<");

[17:07:17.0860] <arai>
if there's no `yield` expression, the value returned by `return` is available via `obj.genFunc().next().value`

[17:07:18.0695] <Mohamed Atef>
the same here, too

[17:07:40.0084] <arai>
if you all async function, the returned value is Promise object, that resolves to the value returned by `return`

[17:07:45.0591] <arai>
 * if you call async function, the returned value is Promise object, that resolves to the value returned by `return`

[17:07:54.0368] <arai>
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function

[17:08:15.0621] <arai>
then, inside JS shell, you need special trick to receive the Promise's resolved value

[17:10:52.0343] <arai>
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise

[17:10:57.0087] <arai>
```
async function f() {
  return 10;
}

var p = f(); // p is Promise

// `then` method creates promise reaction, that's not called immediately.
p.then(v => {
  // this prints 10, but not immediately.
  console.log(v);
});

// This performs all promise reactions, and the above `console.log` is called.
drainJobQueue();
```


[17:11:46.0286] <arai>
then,  now I think handling all of them might be overkill for testing the guessed atom case. 

[17:11:56.0014] <arai>
feel free to skip generator and async

[17:12:20.0097] <arai>
and let's focus to other cases, such as getter, property with named function, etc

[17:16:33.0360] <Mohamed Atef>
what is the return type of getters?

[17:22:28.0602] <arai>
getter is called when the property is accessed, and returns the value that the getter function returns

[17:22:29.0587] <arai>
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get

[17:23:58.0527] <arai>
setter's return value is ignored, and it needs yet another special handling to pass the value from it, but I think you can skip it as well, given the test for getter should cover

[17:25:53.0845] <Mohamed Atef>
displayName(obj.getter)

[17:26:14.0363] <Mohamed Atef>
should the returned value be ""

[17:26:24.0265] <Mohamed Atef>
or "getter/<"

[17:26:24.0686] <arai>
what does getter return?

[17:26:49.0766] <Mohamed Atef>
just a dummy function

[17:26:56.0364] <Mohamed Atef>
return function() {};

[17:27:24.0205] <arai>
I see

[17:27:50.0755] <arai>
actually the "guessed atom" is not part of the spec, and the behavior is completely implementation dependent

[17:28:10.0024] <arai>
then, for non-computed-property case, it returns `"get getter/<"`

[17:28:14.0418] <arai>
`displayName(({ get getter() { return function () {}; } }).getter)`

[17:28:59.0714] <arai>
and with unpatched code, computed property case returns `""`, because `NameFunctions` cannot guess the name

[17:29:11.0978] <arai>
so, either is fine

[17:29:39.0324] <arai>
just verify that it works as expected

[17:30:38.0260] <arai>
in the patch's case, the accessor case is explicitly excluded, and the behavior shouldn't change

[17:30:49.0345] <arai>
and returning `""` is "expected"

[17:30:57.0819] <Mohamed Atef>
Okay, Thanks

[17:32:04.0794] <arai>
an example unexpected case is that it returns `"getter/<"`

[17:32:34.0397] <arai>
that's wrong, and it can happen if `NameFunctions` behaves unexpectedly

[17:33:38.0654] <arai>
 * that's wrong, and it can happen if `NameFunctions` doesn't exclude accessors

[17:47:48.0513] <Mohamed Atef>
sorry, for the rush of questions

[17:48:00.0691] <Mohamed Atef>
but how can I pass that: [1] () { return function() {}; };

[17:49:50.0420] <arai>
what's the problem?

[17:50:18.0421] <Mohamed Atef>
displayName(f[1])

[17:50:35.0669] <Mohamed Atef>
```
let foo = class {
  [1] () { return function() {}; };
  get [44]() {return function() {}; };
};

f = new foo();
```

[17:51:16.0697] <arai>
it should be `displayName(f[1]())`

[17:52:10.0827] <arai>
and it needs to be either `"1/<"` or `""`

[18:03:12.0844] <Mohamed Atef>
I will update the patch again

[18:03:21.0297] <Mohamed Atef>
I didn't see the comments

[18:03:40.0515] <arai>
okay, I'll wait for it

[18:43:49.0271] <Mohamed Atef>
[5] = ()=>{};

[18:43:58.0684] <Mohamed Atef>
dummy.prototype[5] is undefined

[18:44:16.0096] <Mohamed Atef>
it works fine with instantiation

[20:44:28.0050] <ptomato>
can you store something with a trace() method like JS::GCHashMap in an object's reserved slot directly, with PrivateGCThingValue?

[23:07:45.0794] <jandem>
ptomato: no, for `PrivateGCThingValue` it has to be a GC-allocated thing

[00:53:46.0365] <arai>
Mohamed Atef: if you put it inside class body, it's [class field](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields), and it's property of instance, not prototype

[01:29:01.0716] <jonco>
> <@theqwertiest:mozilla.org> sorry, did not notice your reply. Does this apply to esr91 as well?

TLA was enabled in 89, so you should be fine with esr91.

[03:54:12.0106] <Mohamed Atef>
What is CTOR? stands for in the stack representation?

[03:54:22.0636] <Mohamed Atef>
 * What is `CTOR?` stands for in the stack representation?

[03:54:29.0846] <arai>
constructor

[03:54:35.0058] <arai>
DTOR for destructor

[03:54:53.0749] <arai>
(DTOR is not in stack representation tho)

[03:55:45.0736] <Mohamed Atef>
The patch is accepted now, how can I remove it from phabricator stack

[03:55:55.0508] <arai>
while emitting class declaration, constructor is pushed on the stack, in between properties

[03:56:07.0106] <arai>
what do you mean by remove from phabricator stack?

[03:56:16.0073] <arai>
exclude it from the next submit?

[03:56:24.0191] <Mohamed Atef>
yes

[03:57:03.0136] <arai>
if so, update to `central` revision (or `central@default` if `central` is overwritten)

[03:57:13.0722] <Mohamed Atef>
when I try to submit a new patch the phabricator prevents me, as the patch is closed, and there's no changes to submit 

[03:57:54.0928] <arai>
`hg update central`

[03:58:04.0317] <Mohamed Atef>
okay, Thanks.

[03:58:12.0790] <arai>
after that, try checking `hg parent`.  if it shows not-your-own one, your tree is clean

[03:58:24.0557] <Mohamed Atef>
can I work on another thing?

[03:58:36.0004] <Mohamed Atef>
I mean another bug

[03:58:36.0555] <arai>
and the subsequent `moz-phab` submits only the newly created one

[03:58:49.0405] <arai>
yeah, feel free to take other bugs

[04:00:09.0865] <arai>
in bugzilla's bug page, there's "Component" field under "Categories", and hovering over it shows a popup, and there's "﻿See Open Bugs in This Component" link

[04:00:15.0921] <arai>
there you can see all open bugs in the component

[04:00:40.0422] <arai>
and as long as the bug doesn't have assignee (assigned to `nobody@mozilla.org`), you can take it

[04:02:15.0468] <arai>
also, you can file a new bug if you find any issue with codebase and work on it

[06:17:22.0027] <Mohamed Atef>
I am sure that I modified this.
https://hg.mozilla.org/try/rev/53627b1881207ef3a925846d33850317edaa6d62#l1.53

[06:18:11.0255] <arai>
yeah, the try run is for previous diff

[06:18:23.0314] <arai>
I've pushed it because the remaining was only comments

[06:18:44.0875] <Mohamed Atef>
Oh, I thought that I missed that.

[06:18:53.0759] <arai>
and the try run finishes successfully. I'll land the latest patch

[06:20:00.0616] <Mohamed Atef>
great, I will search for a suitable bug.

[06:20:28.0829] <Mohamed Atef>
but are all reporters active ?

[06:20:43.0696] <Mohamed Atef>
most of the bugs are long time ago

[06:21:03.0742] <arai>
yeah.  as long as the bug is open, the bug report is supposed to be valid

[06:21:28.0870] <arai>
but there can be some bug that gets fixed by other patch, or some case that the target code no longer exists

[06:21:42.0714] <arai>
so, when working on old bugs, the first step is to verify the bug is still valid on the latest code

[06:23:04.0284] <Mohamed Atef>
The reviewer is the bug reporter, right?

[06:23:19.0162] <arai>
no.  the reviewer and reporter are unrelated

[06:23:30.0416] <arai>
anyone can report bugs

[06:23:56.0353] <arai>
and the reviewer should be the module owner or peer https://wiki.mozilla.org/Modules/All

[06:24:40.0361] <arai>
https://wiki.mozilla.org/Modules/All#JavaScript

[06:24:45.0723] <arai>
for SpiderMonkey

[06:34:37.0747] <arai>
easy way to find reviewer is to look into the history of the file.  each commit message has `r=reviewer` part.  so, ask people who frequently reviews the file

[06:36:21.0865] <Mohamed Atef>
any further details about, this?
https://bugzilla.mozilla.org/show_bug.cgi?id=1620446

[06:38:19.0951] <nbp>
Someone just closed https://bugzilla.mozilla.org/show_bug.cgi?id=288473 as a duplicate of one of my bugs. That lower the minimal bug number I have fixed 🎉

[06:38:41.0237] <nbp>
 * jandem just closed https://bugzilla.mozilla.org/show\_bug.cgi?id=288473 as a duplicate of one of my bugs. That lower the minimal bug number I have fixed 🎉

[06:42:08.0837] <arai>
Mohamed Atef: the bug is for experimental project called SmooshMonkey to replace the frontend (parser, bytecode emitter) with rust-based implementation.  currently the feature is not enabled, and the project is on hold

[06:43:01.0788] <arai>
the related code is https://searchfox.org/mozilla-central/source/js/src/frontend/Frontend2.cpp#569-570

[06:43:32.0002] <arai>
`smoosh_run` returns raw pointer, and the caller needs to free the result manually. and `AutoFreeSmooshResult` class handles that

[06:44:11.0907] <arai>
the bug is to replace it with [UniquePtr](https://searchfox.org/mozilla-central/rev/5644fae86d5122519a0e34ee03117c88c6ed9b47/mfbt/UniquePtr.h), so that no extra class is necessary

[07:25:47.0336] <Mohamed Atef>
The patch is backed-out:
https://treeherder.mozilla.org/logviewer?job_id=386663783&repo=autoland&lineNumber=4343

[07:32:24.0012] <arai>
Mohamed Atef: oh,sorry, `displayName` is defined only in SpiderMonkey shell, and the test is executed both in SpiderMonkey shell and in browser

[07:33:13.0445] <Mohamed Atef>
then how to fix that?

[07:33:55.0651] <arai>
either skip it on browser, or move it to jit-test

[07:34:05.0198] <arai>
let me look for example. given me a sec

[07:38:07.0856] <arai>
Mohamed Atef: can you move the file under js/src/jit-test/tests/function , and rename to `function-displayName-computed.js`, and remove the last 2 lines for `reportCompare` ?

[07:38:34.0676] <arai>
after moving it, you can run it by `./mach jit-test function/function-displayName-computed.js`

[07:38:44.0987] <Mohamed Atef>
okay

[07:38:45.0790] <arai>
so that the file is executed only in SpiderMonkey shell

[07:40:31.0807] <arai>
01 and 02 are fine.  they're using standard things and part of standard

[07:47:28.0717] <Mohamed Atef>
how to submit to an existing phabricator patch?

[07:49:03.0857] <Mohamed Atef>
after `hg update central` the files were deleted, I downloaded the diff and applied it `hg import`

[07:52:04.0843] <arai>
`hg heads` will show the previous patch in your repository

[07:52:08.0546] <arai>
 * `hg heads` will show the previous changeset in your repository

[07:52:44.0598] <arai>
`hg update REV_HERE` to it, and modify files, and `hg commit --amend` and then `moz-phab submit`

[08:12:06.0025] <Mohamed Atef>
```
Unable to submit commits:

1 uncommitted change is present
Commit changes, or use `hg shelve` to store uncommitted changes,
restoring with `hg unshelve` after submission
```

[08:12:18.0666] <arai>
what does `hg status` say?

[08:12:42.0046] <Mohamed Atef>
```
! function-name-computed-03.js
```

[08:13:05.0179] <arai>
oh, `hg remove PATH_TO_THE_FILE`

[08:13:10.0274] <arai>
and then `hg commit --amend`

[08:13:16.0045] <arai>
to let mercurial know the removal

[08:14:08.0233] <arai>
the leading `!` means, the file is supposed to be there, but it doesn't exist

[08:14:34.0906] <arai>
that's because mercurial doesn't know what happened to the file

[08:15:14.0403] <Mohamed Atef>
> <@arai:mozilla.org> oh, `hg remove PATH_TO_THE_FILE`

This removed the whole files in the path

[08:15:20.0305] <Mohamed Atef>
should I add them again?

[08:15:37.0607] <arai>
what command have you performed?

[08:18:05.0685] <Mohamed Atef>
Oh, I think I removed the whole tests.

[08:18:32.0594] <Mohamed Atef>
Path/to/Function

[08:18:57.0884] <arai>
`hg revert` or similar command could be used

[08:19:15.0283] <arai>
try looking into the document shown by `--help`

[08:23:32.0056] <arai>
other option is to run `hg update -C` to discard all changes

[08:34:58.0268] <Mohamed Atef>
finally, done.

[08:35:27.0175] <arai>
I'll push it again to try, with more jobs enabled, and after that, I'll land it again

[08:35:56.0267] <Mohamed Atef>
Okay, Thanks.
I know I am bothering you too much.

[08:36:16.0395] <arai>
no problem :)

[08:36:56.0062] <arai>
also, if you're interested, try looking into getting [commit access](https://www.mozilla.org/en-US/about/governance/policies/commit/access-policy/) for try server

[08:37:02.0511] <arai>
so that you can run tests by yourself

[08:37:29.0668] <Mohamed Atef>
That's great.

[08:45:25.0450] <Standard8>
Anyone know where `setTimeout` might be defined as a global for xpcshell-tests?

I've found where I think various functions are defined, e.g. `atob`, `print` etc: https://searchfox.org/mozilla-central/rev/5644fae86d5122519a0e34ee03117c88c6ed9b47/js/xpconnect/src/XPCShellImpl.cpp#657

but I can't see about `setTimeout`.

[08:46:44.0400] <arai>
I guess it comes from Timer.jsm ?

[08:47:54.0726] <arai>
so, somewhere in head.js or something it's imported?

[08:49:04.0595] <Standard8>
Hmm, could be, but I can't find it anywhere obvious at the moment.

[08:49:07.0641] <arai>
at least setTimeout doesn't exist in xpcshell builtin itself

[08:49:16.0680] <arai>
which testcase are you looking into?

[08:50:11.0896] <arai>
here's example case that it's explicitly imported https://searchfox.org/mozilla-central/rev/5644fae86d5122519a0e34ee03117c88c6ed9b47/dom/push/test/xpcshell/head.js#25,30,32,59
```js
var {
...
  setTimeout,
...
} = ChromeUtils.import("resource://gre/modules/Timer.jsm");
...
  setTimeout(() => (done = true), 1000);
```

[08:51:13.0450] <Standard8>
I'm looking at netwerk/test/unit/test_http_408_retry.js

[08:52:39.0541] <arai>
that looks strange. at least other test explicitly imports https://searchfox.org/mozilla-central/source/netwerk/test/unit/test_http3_0rtt.js#5

[08:52:43.0856] <arai>
so, either of them are wrong

[08:52:45.0736] <Standard8>
yeah

[08:52:52.0564] <Standard8>
/me wonders if that actually gets touched

[08:53:00.0332] <Mohamed Atef>
arai: I need Level 2, right?

[08:53:09.0102] <arai>
Mohamed Atef: Level 1

[08:53:25.0373] <arai>
First step is level 1, that's sufficient for try server

[08:53:39.0469] <arai>
and level 2 is not much used

[08:53:58.0496] <Mohamed Atef>
https://bugzilla.mozilla.org/show_bug.cgi?id=1783680

[08:54:58.0606] <arai>
Mohamed Atef: can you add comment that which email address you want to use for username?

[08:55:12.0857] <arai>
the step 2 in https://www.mozilla.org/en-US/about/governance/policies/commit/

[08:55:45.0997] <Mohamed Atef>
It's in the bug title already.

[08:55:46.0967] <Mohamed Atef>
oka

[08:55:54.0966] <Mohamed Atef>
 * ok

[08:55:55.0487] <arai>
oh

[08:56:16.0689] <arai>
okay, I'll post comment

[08:58:31.0444] <arai>
(just to be clear, I mentioned my email there just because my bugzilla email is different)

[09:31:19.0368] <Mohamed Atef>
https://treeherder.mozilla.org/push-health/push?repo=mozilla-central&revision=713ea960c3520bf2974d1980d5ceb8fd6acf95c6

[09:31:32.0497] <Mohamed Atef>
does this mean that the tests failed?

[09:33:04.0366] <arai>
I've never used that page. people in #treeherder:mozilla.org  would know better

[09:33:57.0704] <Mohamed Atef>
Okay, I think I should wait

[09:34:49.0124] <arai>
the try run for your latest patch is 86% right now. it will finish in 1-2 hours

[09:41:06.0821] <Standard8>
I shall have to look at the setTimeout issue in more detail, definitely weird, could be something to do with the request set-up.

[09:41:41.0672] <Standard8>
btw, `registerAppManifest` seems unused: https://searchfox.org/mozilla-central/search?q=registerAppManifest&redirect=false

[09:45:02.0319] <arai>
other possibility is the function is stringified and then eval-ed in different context

[09:45:18.0585] <Standard8>
good point

[09:46:08.0682] <arai>
it would depend on how `nsIHttpRequestHandler` is handled https://searchfox.org/mozilla-central/rev/5644fae86d5122519a0e34ee03117c88c6ed9b47/netwerk/test/httpserver/nsIHttpServer.idl#116
```
void registerPathHandler(in string path, in nsIHttpRequestHandler handler);
```

[09:59:42.0485] <arai>
Standard8: https://searchfox.org/mozilla-central/rev/5644fae86d5122519a0e34ee03117c88c6ed9b47/netwerk/test/unit/head_servers.js#98-100
```js
async registerPathHandler(path, handler) {
  return this.execute(
    `global.path_handlers["${path}"] = ${handler.toString()}`
```

[09:59:55.0373] <arai>
it's stringified here

[10:00:06.0613] <arai>
so, the environment is completely different

[10:03:04.0379] <arai>
`new Error().stack` inside the handler shows the enclosing code is https://searchfox.org/mozilla-central/rev/5644fae86d5122519a0e34ee03117c88c6ed9b47/testing/xpcshell/moz-http2/moz-http2-child.js#21
```js
evalResult = eval(code);
```

[10:04:40.0507] <Mohamed Atef>
can I work on this?
https://bugzilla.mozilla.org/show_bug.cgi?id=1626251

[10:04:49.0098] <arai>
so... looks like, it's in node.js

[10:04:55.0122] <arai>
https://searchfox.org/mozilla-central/rev/5644fae86d5122519a0e34ee03117c88c6ed9b47/testing/xpcshell/runxpcshelltests.py#1342-1343,1369
```py
        process = Popen(
            [nodeBin, serverJs],
...
startServer("moz-http2", os.path.join(myDir, "moz-http2", "moz-http2.js"))
```

[10:05:53.0534] <arai>
Mohamed Atef: yes

[10:07:50.0614] <Standard8>
arai: oh, you're talking about the setTimeout?

[10:08:11.0318] <arai>
yes

[10:08:57.0216] <arai>
apparently the code is transferred to server running in separate node.js process

[10:09:22.0858] <Standard8>
ah yeah, I was wondering if that might be the case.

[12:52:36.0457] <Mohamed Atef>

Consolidate implementations of IterableToArray


[12:52:47.0638] <Mohamed Atef>
What does Consolidate mean?

[12:54:22.0613] <iain>
Combine several implementations into a smaller number, ideally one

[12:55:01.0780] <iain>
In the sense of the first definition [here](https://www.merriam-webster.com/dictionary/consolidate)

[15:26:04.0844] <Mohamed Atef>
Can I write that I am a contributor to spider monkey on LinkedIn? 🤔

[15:43:59.0686] <sfink>
definitely, yes

[15:44:42.0326] <Mohamed Atef>
Is there a page on linked in? 

[15:45:05.0458] <Mohamed Atef>
Or the project is under mozilla projects? 

[16:09:55.0232] <sfink>
nothing that I know of. I looked at someone else's page. They linked to the mozilla page. https://www.linkedin.com/company/mozilla-corporation/

[16:40:42.0729] <TheQwertiest>
> <@jonco:mozilla.org> TLA was enabled in 89, so you should be fine with esr91.

Thanks! 


2022-08-09
[02:21:04.0493] <Mohamed Atef>
https://bugzilla.mozilla.org/show_bug.cgi?id=1783795

[02:25:13.0888] <arai>
oh

[02:25:32.0604] <arai>
looks like the guessed name behavior depends on full parse vs syntax parse

[02:26:33.0721] <arai>
for performance reason, we skip generating AST for inner function when parsing top-level script, and re-parse it when the function is called

[02:26:57.0574] <arai>
"parsing with AST" is called full-parse, and "parsing without generating AST" is called syntax-parse

[02:27:31.0428] <arai>
the behavior can be configured by compile option, whether to use syntax-parse or not

[02:28:04.0482] <arai>
thee job failed there is for testing code-coverage

[02:28:20.0748] <arai>
and that disables syntax-parse

[02:28:29.0564] <arai>
and apparently that affects how the guessed name is generated

[02:29:08.0652] <arai>
simple solution is to skip the test for code-coverage configuration

[02:30:08.0362] <arai>
https://searchfox.org/mozilla-central/rev/c0bed29d643393af6ebe77aa31455f283f169202/js/src/jit-test/tests/basic/allow-relazify.js#1
```js
// |jit-test| skip-if: isLcovEnabled()
```

[02:30:34.0631] <arai>
the first line is parsed by test harness, and skips in code coverage configuration

[02:30:47.0836] <arai>
Mohamed Atef: can you add that line to `function-displayName-computed.js` ?

[02:36:47.0387] <Mohamed Atef>
Okay, I will. 

[09:55:00.0751] <smaug>
hmm, how do Promises work in shadow realms?

[09:55:41.0780] <mgaudet>
> <@smaug:mozilla.org> hmm, how do Promises work in shadow realms?

Should be largely the same way they work in eval

[09:55:43.0694] <smaug>
can one return a promise from evaluate?

[09:56:06.0636] <mgaudet>
smaug: I don't think so; but you can probably return the resolve/reject functions

[09:56:21.0348] <smaug>
ok

[09:57:23.0316] <smaug>
If a promise is resolved inside evaluate, the resolve callback will be called when evaluate has returned, right?

[09:57:30.0154] <smaug>
(since microtask checkpoint happens later)

[09:58:59.0053] <smaug>
(I was just wondering how streams work in shadow realms, since streams are so promise-heavy)

[10:00:51.0324] <mgaudet>
That sounds correct -- I am pretty sure the WPT tests work inside a shadow-realm; though, it's not clear how that is structured. 

[10:01:17.0311] <mgaudet>
Unfortunately, it's not run on our tree right now because of https://github.com/web-platform-tests/wpt/issues/34221 

[13:02:06.0749] <tcampbell>
Hmm.. we really don't have many remaining uses of the 'call' hook, and surprisingly one of them is the `document.all`-like object in the shell

[13:06:10.0133] <tcampbell>
We do very little with them, so I'm not sure that somehow removing would really remove any complexity at all

[13:23:14.0635] <iain>
tcampbell: The ClassOps hook? There are about 350 generated DOM classes that have a call/construct hook (almost always the same hook, but there are three exceptions)

[13:23:55.0385] <tcampbell>
ah, that makes more sense. my search was bad

[13:34:10.0677] <Mohamed Atef>
Can anybody suggest a bug or a task😅

[13:46:12.0948] <arai>
Mohamed Atef: how about bug 1746713?

[13:46:14.0467] <botzilla>
https://bugzil.la/1746713 — NEW (nobody) — Use ReportAllocationOverflow for length overflow in js/src/vm/BigIntType.cpp

[13:56:21.0749] <Mohamed Atef>
great. I will start

[13:58:27.0040] <arai>
also, if you're interested into implementing new language feature, try looking into bug 1729511 and depending bugs

[13:58:28.0527] <botzilla>
https://bugzil.la/1729511 — NEW (nobody) — [meta] JavaScript Language

[14:18:39.0575] <Mohamed Atef>
> <@arai:mozilla.org> Mohamed Atef: how about bug 1746713?

correct me if I am wrong, this bug, just call function instead of another function. 
no other modifications?

[14:19:28.0018] <arai>
basically, yes

[14:19:42.0603] <arai>
I haven't checked all cases

[14:20:08.0735] <arai>
there might be some case that needs more modifications 

[14:20:10.0737] <Mohamed Atef>
So, It should be replaced in the whole code

[14:20:27.0291] <Mohamed Atef>
and then remove it.

[14:20:31.0549] <arai>
not whole code

[14:20:43.0176] <Mohamed Atef>
Okay,

[14:20:52.0965] <Mohamed Atef>
I replaced it 

[14:20:55.0792] <Mohamed Atef>
and built

[14:20:59.0121] <arai>
those 2 functions are for different purpose

[14:21:00.0721] <Mohamed Atef>
and no problems

[14:21:40.0616] <arai>
and some consumers around BigInt seems to use wrong one

[14:22:45.0082] <arai>
so, you need to check each consumer to see what error it should use

[14:24:16.0521] <arai>
ReportOutOfMemory is for the case the code tries to allocate memory and fails

[14:25:31.0274] <arai>
ReportAllocationOverflow is for the case the allocation size is beyond certain limit. and thrown before actually try to allocate

[14:43:29.0923] <krosylight>
Given that nothing outside SpiderMonkey uses JS::HandleValue etc. after https://bugzilla.mozilla.org/show_bug.cgi?id=1773366, can those typedefs be moved to some SM private header?

[14:43:57.0331] <krosylight>
 * Given that nothing outside SpiderMonkey uses JS::HandleValue etc. after https://bugzilla.mozilla.org/show_bug.cgi?id=1769290, can those typedefs be moved to some SM private header?

[14:50:46.0519] <mgaudet>
krosylight: I would expect we have lots of usage in non-Gecko embeddings

[14:51:54.0434] <mgaudet>
We may want to plan to move it to a 'compat' header of some sort tho...

[14:52:32.0555] <sfink>
yeah, it seems like it ought to be in a 'compat' or 'legacy' header

[15:08:15.0712] <krosylight>
Okay cool, filed https://bugzilla.mozilla.org/show_bug.cgi?id=1783955

[15:19:20.0757] <krosylight>
Hey people, another question! In https://phabricator.services.mozilla.com/D153782#inline-848574 I need a way to create a Uint8Array from an existing C++ array, what's the best way to do that?

[15:21:02.0639] <krosylight>
 * Hey people, another question! In https://phabricator.services.mozilla.com/D153782#inline-848573 I need a way to create a Uint8Array from an existing C++ array, what's the best way to do that?

[15:24:22.0268] <krosylight>
Also, is there a way to extract pointer and length from BufferSource? `ExtractSpanFromBufferSource()` in that same patch above does that but it seems needlessly complex.

[16:06:04.0756] <sfink>
krosylight: yes, if you implement both of smaug's suggestions: heap-allocate the output, then you can pass over ownership with `JS::NewArrayBufferWithContents` (which takes in a malloc pointer and will free it when finalized, so it had really better be a malloc pointer and not a stack-allocated buffer. And you really don't want that here for other reasons.)

[16:06:36.0352] <sfink>
 * krosylight: yes, if you implement both of smaug's suggestions: heap-allocate the output, then you can pass over ownership with `JS::NewArrayBufferWithContents` (which takes in a malloc pointer and will free it when finalized, so it had really better be a malloc pointer and not a stack-allocated buffer. And you really don't want a potentially large stack allocation here for other reasons.)

[16:13:22.0458] <sfink>
as for getting pointer and length from BufferSource, I agree with your comment that it really ought to be generated by the bindings layer. And that the right way to do it will be changing, hopefully soon but not something you should wait for. I'll CC you on a bug.

[16:54:48.0234] <krosylight>
> <@sfink:mozilla.org> as for getting pointer and length from BufferSource, I agree with your comment that it really ought to be generated by the bindings layer. And that the right way to do it will be changing, hopefully soon but not something you should wait for. I'll CC you on a bug.

Thank you for the answers! I'll try NewArrayBufferWithContents and keep the BufferSource function for now.

[16:54:57.0796] <krosylight>
(Got the CC, thanks)


2022-08-10
[07:21:09.0593] <Bryan Thrall [:bthrall]>
Is it possible to have multiple threads using SpiderMonkey? I understand I need to have a `JSContext` for each thread, and I know about SpiderMonkey's internal helper threads (but that's not what I'm asking about).

Is using multiple threads like that useful to anyone?
(asking out of curiosity)

[07:36:13.0667] <iain>
Bryan Thrall [:bthrall]: You can create [worker threads](https://developer.mozilla.org/en-US/docs/Web/API/Worker) that each get their own context

[07:37:41.0716] <iain>
They have to communicate via message passing

[07:38:32.0085] <iain>
There was also an attempt years ago called PJS to make SM support multithreaded JS, but AFAIK it's mostly been ripped out

[07:39:10.0512] <iain>
My understanding is that some of the wrapper types in JS::Context (`js::ContextData`) are a remnant of that

[07:39:14.0338] <iain>
But it was all before my time

[07:41:43.0691] <iain>
([Example bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1325050))

[07:43:09.0744] <Bryan Thrall [:bthrall]>
Thanks, iain !

[08:19:38.0180] <jandem>
in the JS shell you can use `evalInWorker(code)`

[08:22:39.0616] <jandem>
(the bug mentioned above was for Quantom DOM, the idea was to have multiple threads running JS in parallel for separate websites instead of everything on the main thread.. It was complicated and Fission mostly made it not relevant anymore)

[08:24:21.0459] <jandem>
 * (the bug mentioned above was for Quantom DOM, the idea was to have multiple threads running JS in parallel for separate websites / tabs instead of everything on the main thread.. It was complicated and Fission mostly made it not relevant anymore)

[08:26:53.0025] <jandem>
 * (the bug mentioned above was for Quantom DOM, the idea was to have multiple threads running JS in parallel for separate websites / tabs instead of everything on the main thread.. It was complicated and e10s-multi and Fission mostly made it not relevant anymore)

[08:47:51.0658] <jonco>
sfink: ping

[09:58:41.0734] <krosylight>
Hey people, is it safe to `new T[]` and pass it to `JS::NewArrayBufferWithContents`? It seems some callers use `JS_malloc` or `js_pod_arena_malloc`, but what's the differences there?

[10:00:36.0710] <jandem>
* (the bug mentioned above was for Quantum DOM, the idea was to have multiple threads running JS in parallel for separate websites / tabs instead of everything on the main thread.. It was complicated and e10s-multi and Fission mostly made it not relevant anymore)

[10:03:43.0566] <sfink>
hm, that would want to be freed with delete[] but it'll get passed to `free` instead

[10:06:47.0906] <krosylight>
> <@sfink:mozilla.org> hm, that would want to be freed with delete[] but it'll get passed to `free` instead

Ah yes, sure.

[10:08:03.0151] <sfink>
the memory gets freed with https://searchfox.org/mozilla-central/source/js/src/vm/ArrayBufferObject.cpp#947-948

[10:10:50.0996] <sfink>
which [calls js_free](https://searchfox.org/mozilla-central/rev/43ba67391e71c57a14420e554e9d381543292611/js/public/Utility.h#409-414), which has a scary comment about arenas (probably largely for this case!)

[10:11:52.0513] <sfink>
the other option is JS::NewExternalArrayBuffer, which would allow you to provide your own free function that could do the `delete[]`

[10:13:29.0511] <krosylight>
I think I don't need that much, I just want to know what's the right way to allocate memory for NewArrayBufferWithContents and do that

[10:13:56.0212] <sfink>
`JS_malloc` would be safe

[10:14:15.0314] <krosylight>
```
static inline void js_free(void* p) {
  // TODO: This should call |moz_arena_free(js::MallocArena, p)| but we
  // currently can't enforce that all memory freed here was allocated by
  // js_malloc().
  free(p);
}
```

This sounds like the existing things like `js_pod_arena_malloc<char>(js::ArrayBufferContentsArena, blobSize)` is wrong 🤔

[10:15:15.0095] <sfink>
you make a good point

[10:16:40.0982] <krosylight>
Okay thanks, I'll go JS_malloc for my purpose. But it seems some existing things should be reviewed again

[10:19:11.0517] <sfink>
bug 1052582 suggests that those other allocations are correct

[10:19:13.0170] <botzilla>
https://bugzil.la/1052582 — RESOLVED (mhowell) — Store non-inline JS array buffer contents in their own malloc arena

[10:20:39.0140] <sfink>
we probably out to provide `JS::MallocForArrayBuffer` or something. `js_pod_arena_malloc<char>(js::ArrayBufferContentsArena, blobSize)` is a bit ugly.

[10:20:48.0627] <sfink>
 * we probably ought to provide `JS::MallocForArrayBuffer` or something. `js_pod_arena_malloc<char>(js::ArrayBufferContentsArena, blobSize)` is a bit ugly.

[10:24:35.0925] <sfink>
Filed bug 1784116

[10:24:37.0570] <botzilla>
https://bugzil.la/1784116 — NEW (nobody) — Expose JS::MallocForArrayBuffer

[11:17:05.0281] <krosylight>
> <@sfink:mozilla.org> bug 1052582 suggests that those other allocations are correct

Does that mean the comment in JS_free should be revised?

[11:20:09.0847] <krosylight>
> <@sfink:mozilla.org> bug 1052582 suggests that those other allocations are correct

 * Does that mean the comment in js\_free should be revised?

[11:20:11.0353] <botzilla>
https://bugzil.la/1052582 — RESOLVED (mhowell) — Store non-inline JS array buffer contents in their own malloc arena

[11:51:19.0177] <Mohamed Atef>
how long does the commit access level 1 take?

[14:37:23.0077] <arai>
at most 1 week maybe?

[14:51:01.0649] <rickbutton>
hi, I'm looking at this very old bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=709909 and want to look at the revisions mentioned in the comments , but it looks like the revision is no longer available? https://hg.mozilla.org/projects/larch/rev/ca2d2123be37 . I assume that it was lost in some migration at some point. Does anyone know where I could find it?

[15:03:51.0092] <rickbutton>
i see that its actually a part of the "larch" project folder, but not sure what that means in this context

[15:05:01.0176] <mccr8>
rickbutton: incremental GC was probably developed on a different HG repository, then when it was finished all of the work was rolled up into the patches in bug 641025, or something like that.

[15:05:02.0607] <botzilla>
https://bugzil.la/641025 — RESOLVED (billm) — Incremental GC

[15:05:33.0106] <rickbutton>
oh interesting!

[15:06:13.0975] <mccr8>
Are you seeing a crash with the same signature? It is probably unrelated to whatever this was.

[15:07:48.0866] <rickbutton>
yes precisely this stack in our embedding

[15:08:54.0325] <rickbutton>
but if it was rolled into that igc bug then its probably already in my version of spidermonkey (13)

[15:09:39.0205] <mccr8>
Yeah, unfortunately lots of random memory corruption issues can end up showing up as crashes in the GC somewhere.

[15:09:44.0781] <rickbutton>
i actually haven't tested with IGC off yet so TBD

[15:10:19.0462] <rickbutton>
ty for the pointer!

[16:14:10.0878] <Mohamed Atef>
`hg commit --amend`
```
Processing 1 file(s)...
nothing changed
```

[16:14:23.0855] <Mohamed Atef>
has any one faced this before 

[16:14:45.0028] <Mohamed Atef>
I can't modify my previous commit.

[16:25:47.0819] <sfink>
what does `hg diff` show? You're sure that there are pending changes?

[16:26:31.0455] <Mohamed Atef>
It shows the changes that I want to make to the previous patch 

[16:26:55.0834] <Mohamed Atef>
It's just a comment I want to modify it. 

[16:28:01.0368] <sfink>
Huh. I use `hg amend` from the evolve extension, but `hg commit --amend` seems like it ought to work. What if you give the path on the command line? `hg commit --amend path/to/changed/file` (I'm just hoping for a useful error message.)

[16:29:37.0636] <Mohamed Atef>
> <@mohamed_atef:matrix.org> `hg commit --amend`
> ```
> Processing 1 file(s)...
> nothing changed
> ```

The same

[16:29:50.0962] <Mohamed Atef>
It creates a new diff

[16:31:41.0484] <sfink>
does `hg status` show the file as changed?

[16:31:58.0669] <Mohamed Atef>
Yes 

[16:32:51.0476] <Mohamed Atef>
If I modified the file and then `hg commit - - amend`

[16:33:03.0058] <Mohamed Atef>
It ignores the changes 

[16:33:35.0367] <Mohamed Atef>
If `hg commit --amend` and then modify 

[16:33:41.0774] <Mohamed Atef>
it creates a new diff

[16:33:50.0792] <Mohamed Atef>
the status is changed 

[16:34:22.0829] <sfink>
what do you mean by "it creates a new diff"?

[16:34:26.0865] <sfink>
`hg diff` output changes?

[16:34:35.0945] <Mohamed Atef>
Yes 

[16:35:23.0917] <sfink>
huh. I don't know what's going on. You could try `hg debugrebuilddirstate`, though I'm doubtful it will do anything.

[16:36:09.0089] <sfink>
maybe try making an additional change to the same file and see if it will accept it? You can then amend it back.

[16:37:03.0795] <sfink>
or the more involved approach: create a new commit with your changes, then use `hg histedit` to "roll" it into the previous commit.

[16:37:15.0392] <sfink>
I feel like I'm missing something obvious, though.

[16:38:02.0562] <Mohamed Atef>
> <@sfink:mozilla.org> or the more involved approach: create a new commit with your changes, then use `hg histedit` to "roll" it into the previous commit.

I will try this

[16:38:14.0433] <Mohamed Atef>
Thanks.


2022-08-11
[05:02:32.0592] <liam_g>
Is there any function for quick and dirty conversions from JSObject or JSValue to JSON string? I'm asking within the context of debugging an embedded SpiderMonkey C++ project. I often find myself wishing that I could peak inside the Object structure, but I haven't found a convenient way of doing this yet.

[05:09:26.0584] <jandem>
liam_g: in `--enable-debug` or `--enable-jitspew` builds you can do `obj->dump()`

[05:10:02.0502] <jandem>
in the debugger

[05:10:26.0673] <jandem>
there's also a `js::DumpObject(obj)` API

[05:20:14.0571] <liam_g>
Where is the `js::DumpObject()` function defined? I'm not seeing it in js/Debug.h.

[05:20:34.0683] <liam_g>
I think I compiled with --enable debug, but I'm not completely sure.

[05:25:24.0824] <arai>
it's defined in js/public/friend/DumpFunctions.h

[05:25:32.0690] <arai>
https://searchfox.org/mozilla-central/source/js/public/friend/DumpFunctions.h

[05:29:30.0494] <liam_g>
Thanks @arai. If there's no return value or out param, where is the object dumped to?

[05:29:56.0888] <arai>
stderr https://searchfox.org/mozilla-central/rev/f655bdf6b4bf01b42609750ab94fc37635397260/js/src/util/DumpFunctions.cpp#192
```cpp
void js::DumpObject(JSObject* obj) { DumpObject(obj, stderr); }
```

[05:33:54.0029] <liam_g>
Ah, this is so great! Will speed up my workflow a great deal.

[06:44:22.0308] <Mohamed Atef>
more details about bug 1783948, please

[06:44:25.0641] <botzilla>
https://bugzil.la/1783948 — NEW (nobody) — Remove duplicate JS source from JS Bytecode Cache

[06:51:42.0267] <arai>
Mohamed Atef: the background is the following:  without cache, JavaScript files used by web content is downloaded from server and compiled every time.  we have a network cache that stores the files received from web server, so that we can skip downloading.  then, still, we need to compile the possibly same JS file many times.  so, we cache the bytecode in the network cache, so that we can skip both download and compilation

[06:53:22.0616] <arai>
then, when loading from network cache, currently only either the raw JS file or the bytecode cache can be loaded at once.  then, the bytecode cache contains the raw JavaScript source, for multiple purposes (e.g. for `Function.prototype.toString`)

[06:53:51.0145] <arai>
so in the cache we have 2 copies of JS source code

[06:54:05.0543] <arai>
the bug is mostly a meta bug to track the task to remove the duplication

[06:55:21.0456] <arai>
so, currently the bug itself is not immediately actionable. we need to figure out necessary tasks to achieve the removal of the duplication  (rework in network cache, rework in the bytecode cache structure, etc)

[06:55:37.0173] <arai>
and then we'll file bugs under that, and work on each

[06:58:03.0376] <arai>
 * so, currently the bug itself is not immediately actionable (in term of, writing patch). we need to figure out necessary tasks to achieve the removal of the duplication  (rework in network cache, rework in the bytecode cache structure, etc)

[07:02:10.0712] <arai>
this is the area I'm currently working on, and if you're interested into it, I can mentor

[07:06:30.0741] <arai>
if you're interested into that area, try looking into documents around frontend and stencil [Stencil.h](https://searchfox.org/mozilla-central/rev/f655bdf6b4bf01b42609750ab94fc37635397260/js/src/frontend/Stencil.h#74)

[07:07:14.0186] <arai>
the bytecode cache is the string representation of the stencil

[07:08:53.0811] <arai>
it's defined in [StencilXdr.h](https://searchfox.org/mozilla-central/rev/f655bdf6b4bf01b42609750ab94fc37635397260/js/src/frontend/StencilXdr.h)

[07:13:29.0077] <Mohamed Atef>
> <@arai:mozilla.org> this is the area I'm currently working on, and if you're interested into it, I can mentor

That seems interesting.
I am in.

[07:22:00.0832] <arai>
* the bytecode cache is the serialization of the stencil

[08:38:34.0223] <arai>
once you've read through documents around that, [bug 1782571](https://bugzilla.mozilla.org/show_bug.cgi?id=1782571) could be a good start point to work on bugs around cache.  it's a part of effort to decouple the frontend and JSContext, to make the code around compilation more flexible

[08:38:35.0928] <botzilla>
https://bugzil.la/1782571 — NEW (nobody) — Skip profiler pseudo-frames if JSContext is not available

[09:28:57.0849] <Redfire>
I've been working to make native classes easier, and here's my attempt
If anyone has any feedback for the user experience, that'd be nice.
https://github.com/Redfire75369/spiderfire/pull/22

[09:30:01.0838] <Redfire>
 * I've been working to make native classes easier to implement, and here's my attempt
If anyone has any feedback for the user experience, that'd be nice.
https://github.com/Redfire75369/spiderfire/pull/22

[09:35:21.0018] <sfink>
Redfire: I don't know enough Rust or the current setup to give any useful advice, though it looks really clean in your example. One question—what's the \0 for in the "SPIDER\0" string? Is this using an older mozjs that likes to nul-terminate strings or something?

[09:38:07.0568] <Redfire>
It's mozjs 96 or 97 I believe
As far as I can tell, that nul termination is required.
I got 'SPIDERh8` or something when I forgot to add that.

[10:56:41.0804] <jon4t4n>
Do I understand the [HTML spec](https://html.spec.whatwg.org/#module-map) correctly? Before JSON modules, the [module map](https://searchfox.org/mozilla-central/rev/f655bdf6b4bf01b42609750ab94fc37635397260/js/loader/ModuleLoaderBase.h#150-152) was (still is) only keyed by the URL. But now, it should also contain the module type. So that means if I am looking at the right piece of code, we need to change [nsURIHashKey](https://searchfox.org/mozilla-central/rev/f655bdf6b4bf01b42609750ab94fc37635397260/netwerk/base/nsURIHashKey.h#19) to look something like `struct { nsIURI*; ModuleType; }`? According to the spec, the module type should be a string. My question is, do we want to follow the spec to the letter, or could we use an enum instead?

[11:20:12.0345] <jon4t4n>
Or, we don't want to change the nsURIHashKey because it is used in a lot of other places. But instead, add a new key that can be used for the module map.

[12:00:14.0310] <sfink>
@allstarschh| intermittent network: ^

[12:00:20.0445] <sfink>
maybe you've looked at that

[12:14:32.0068] <TheQwertiest>
> <@krosylight:mozilla.org> ```
> static inline void js_free(void* p) {
>   // TODO: This should call |moz_arena_free(js::MallocArena, p)| but we
>   // currently can't enforce that all memory freed here was allocated by
>   // js_malloc().
>   free(p);
> }
> ```
> 
> This sounds like the existing things like `js_pod_arena_malloc<char>(js::ArrayBufferContentsArena, blobSize)` is wrong 🤔

known bug that I had to patch around for forever: https://bugzilla.mozilla.org/show_bug.cgi?id=1243367

[12:15:47.0477] <TheQwertiest>
 * known old bug that I had to patch around for forever: https://bugzilla.mozilla.org/show\_bug.cgi?id=1243367

[12:17:21.0496] <TheQwertiest>
> <@theqwertiest:mozilla.org> known old bug that I had to patch around for forever: https://bugzilla.mozilla.org/show\_bug.cgi?id=1243367

this will crash the embedding when mozjs is used as a shared library (if not patched around)

[12:19:11.0655] <TheQwertiest>
> <@theqwertiest:mozilla.org> known old bug that I had to patch around for forever: https://bugzilla.mozilla.org/show\_bug.cgi?id=1243367

 * this will crash the embedding randomly when mozjs is used as a shared library (if not patched around)

[12:20:57.0377] <TheQwertiest>
oh wait, my bad, it's a different code (just looks very similar) xD

[12:21:47.0736] <TheQwertiest>
 * <del>oh wait, my bad, it's a different code (just looks very similar) xD</del>
actually not ( sorry, it's been a long day)

[12:22:21.0617] <TheQwertiest>
 * <del>oh wait, my bad, it's a different code (just looks very similar) xD</del>
actually not (sorry, it's been a long day >_<)

[12:23:04.0249] <TheQwertiest>
 * <del>oh wait, my bad, it's a different code (just looks very similar) xD</del>
but actually not, the code in question *is* the relevant code (sorry, it's been a long day >\_\<)

[12:31:08.0102] <TheQwertiest>
If anyone is interested the crash in such scenario is caused by different `free` calls: 
- At least on some systems (notably Windows), heap might not be shared between dynamic libraries, thus `malloc`/`free` in main application and mozjs shared library will use different caches.
- The code in question (`js_free`) is inlined in embedding.
- `js_free` is called to free the memory allocated in mozjs library. Which causes `free` to use wrong heap.

[12:31:44.0291] <TheQwertiest>
 * If anyone is interested the crash in such scenario is caused by different `free` calls:

- At least on some systems (notably Windows), heap might not be shared between dynamic libraries, thus `malloc`/`free` in main application and mozjs shared library will use different caches.
- The code in question (`js_free`) is inlined in embedding.
- `js_free` is called to free the memory allocated in mozjs library. Which causes `free` to use wrong heap.

[12:32:20.0331] <TheQwertiest>
 * If anyone is interested the crash in such scenario is caused by different `free` calls:

- At least on some systems (notably Windows), heap might not be shared between dynamic libraries, thus `malloc`/`free` in main application and mozjs shared library will use different caches.
- The code in question (`js_free`) is inlined in embedding.
- `js_free` is called to free the memory allocated in mozjs library (e.g. via mozjs templated classes and methods). Which causes `free` to use wrong heap.

[12:34:28.0208] <TheQwertiest>
It's easy (as much as it's annoying having to do it at all) to fix on embedder side by patching mozjs headers *after* library is build (so that mozjs can keep whatever internal logic it needs) with something like this: https://github.com/TheQwertiest/foo_spider_monkey_panel/blob/master/scripts/patches/mozjs-bug_1243367-wrong_free_call.patch

[12:34:44.0472] <TheQwertiest>
 * It's easy (as much as it's annoying having to do it at all) to fix on embedder side by patching mozjs headers _after_ library is build (so that mozjs library can keep whatever internal logic it needs) with something like this: https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/master/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch

[12:35:11.0135] <TheQwertiest>
 * If anyone is interested the crash in such scenario is caused by different `free` calls:

- At least on some systems (notably Windows), heap might not be shared between dynamic libraries even if allocations is performed via the same methods, thus `malloc`/`free` in main application and mozjs shared library will use different caches.
- The code in question (`js_free`) is inlined in embedding.
- `js_free` is called to free the memory allocated in mozjs library (e.g. via mozjs templated classes and methods). Which causes `free` to use wrong heap.

[12:35:21.0179] <TheQwertiest>
 * If anyone is interested the crash in such scenario is caused by different `free` calls:

- At least on some systems (notably Windows), heap might not be shared between dynamic libraries even if allocations is performed via the same methods, thus `malloc`/`free` in main application and mozjs shared library will use different heaps.
- The code in question (`js_free`) is inlined in embedding.
- `js_free` is called to free the memory allocated in mozjs library (e.g. via mozjs templated classes and methods). Which causes `free` to use wrong heap.

[12:36:00.0917] <TheQwertiest>
 * If anyone is interested the crash in such scenario is caused by different `free` calls:

- At least on some systems (notably Windows), heap might not be shared between dynamic libraries even if allocations is performed via the same methods, thus `malloc`/`free` in main application and mozjs shared library will use different heaps.
- The code in question (`js_free`) is inlined in embedding. 
- `js_free` is called to free the memory allocated in mozjs library (e.g. via mozjs templated classes and methods). Which causes `free` to use wrong heap.

[12:36:16.0607] <mgaudet>
> <@jon4t4n:mozilla.org> Do I understand the [HTML spec](https://html.spec.whatwg.org/#module-map) correctly? Before JSON modules, the [module map](https://searchfox.org/mozilla-central/rev/f655bdf6b4bf01b42609750ab94fc37635397260/js/loader/ModuleLoaderBase.h#150-152) was (still is) only keyed by the URL. But now, it should also contain the module type. So that means if I am looking at the right piece of code, we need to change [nsURIHashKey](https://searchfox.org/mozilla-central/rev/f655bdf6b4bf01b42609750ab94fc37635397260/netwerk/base/nsURIHashKey.h#19) to look something like `struct { nsIURI*; ModuleType; }`? According to the spec, the module type should be a string. My question is, do we want to follow the spec to the letter, or could we use an enum instead?

Hmm. It certainly seems possible, but this is well outside my area of expertise. 

Could you write that up in a bug, and then we can needinfo Jon (as a start)? 

[12:37:54.0607] <TheQwertiest>
 * If anyone is interested the crash in such scenario is caused by different `free` calls:

- At least on some systems (notably Windows), heap might not be shared between dynamic libraries even if allocations is performed via the same methods, thus `malloc`/`free` in main application and mozjs shared library will use different heaps.
- The code in question (`js_free`) is inlined in embedding (e.g. via mozjs templated classes and methods).
- When `js_free` in embedder code is called to free the memory allocated in mozjs library, it causes `free` to use the wrong heap, which causes UB

[12:48:29.0930] <TheQwertiest>
btw, since module html spec was mentioned, what extension should I use for js modules? `.js` or `.mjs`? I was told before that `.js` is the way, but the spec above uses `.mjs`

[12:51:19.0910] <mgaudet>
TheQwertiest: I don't think we here have a strong opinion. MDN has [a discussion here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#aside_%E2%80%94_.mjs_versus_.js) 

[12:53:46.0420] <TheQwertiest>
thanks

[12:53:52.0906] <TheQwertiest>
though seems that it will be `.mjs` after all, since I'm 99% sure V8 (aka Google) will enforce somewhere (as they often like doing)

[12:55:02.0890] <TheQwertiest>
 * though seems that it will be `.mjs` after all, since I'm 99% sure V8 (aka Google) will enforce it somewhere (as they often like doing)


2022-08-12
[18:10:32.0426] <Redfire>
It depends on the runtime, not the engine.
Runtime can decide to tell the engine to parse and evaluate as a script or a module. The extension doesn't really matter.

[02:24:16.0117] <jonco>
> <@jon4t4n:mozilla.org> Do I understand the [HTML spec](https://html.spec.whatwg.org/#module-map) correctly? Before JSON modules, the [module map](https://searchfox.org/mozilla-central/rev/f655bdf6b4bf01b42609750ab94fc37635397260/js/loader/ModuleLoaderBase.h#150-152) was (still is) only keyed by the URL. But now, it should also contain the module type. So that means if I am looking at the right piece of code, we need to change [nsURIHashKey](https://searchfox.org/mozilla-central/rev/f655bdf6b4bf01b42609750ab94fc37635397260/netwerk/base/nsURIHashKey.h#19) to look something like `struct { nsIURI*; ModuleType; }`? According to the spec, the module type should be a string. My question is, do we want to follow the spec to the letter, or could we use an enum instead?

Yes that seems right reading the spec.  No we don't need to follow the spec to the letter, we need to have the same behaviour as if we did.  So using an enum is fine. 

[03:44:38.0274] <Mohamed Atef>
https://bugzilla.mozilla.org/show_bug.cgi?id=1784435

[03:45:03.0262] <Mohamed Atef>
arai:  will look at it 

[03:45:23.0098] <Mohamed Atef>
But I am not at home right now. 

[03:45:51.0594] <arai>
thanks!  looks like there was a calker that expected "out of memory" error, but the patch changed that

[03:46:05.0990] <arai>
don't worry, not urgent.

[03:46:48.0723] <Mohamed Atef>
Should I change the caller or, revert the change

[03:46:55.0890] <arai>
I think the caller needs be modified to handle other error than out of memory

[03:47:34.0579] <arai>
if it requires many change, backing out the patch for bow is also an option

[03:47:43.0950] <arai>
* if it requires many change, backing out the patch for now is also an option

[03:48:21.0794] <Mohamed Atef>
Okay. 

[03:48:27.0070] <Mohamed Atef>
Thanks 

[16:26:52.0245] <Mohamed Atef>
https://searchfox.org/mozilla-central/source/js/src/vm/JSContext.cpp#968

[16:27:08.0654] <Mohamed Atef>
should this throw be here always?

[16:29:02.0696] <Mohamed Atef>
can we add here https://searchfox.org/mozilla-central/source/js/public/Exception.h#61
a status for AllocationOverflow

[16:29:49.0837] <Mohamed Atef>
and then add a function here to check if the exception is thrown https://searchfox.org/mozilla-central/source/js/src/vm/JSContext.h#774

[16:30:16.0949] <Mohamed Atef>
> <@mohamed_atef:matrix.org> https://searchfox.org/mozilla-central/source/js/src/vm/JSContext.cpp#968

then modify this?


2022-08-13
[19:08:44.0052] <arai>
Mohamed Atef: There's [Result](https://searchfox.org/mozilla-central/rev/6ec440e105c2b75d5cae9d34f957a2f85a106d54/mfbt/Result.h#437-475) type that represents either successful value and error.  that's used in some place.  `JSContext::alreadyReportedOOM` returns `OOM` error type, which is for the error case where the expected error is only OOM

[19:09:00.0802] <arai>
so, this is the problem around the type definition for the expected error

[19:09:32.0412] <arai>
previously, the only expected error was OOM, so `OOM` type was used for error case, and the consumer was using `JSContext::alreadyReportedOOM` to report error case

[19:10:00.0881] <arai>
now that other error is thrown, the expected error case is not only OOM, and the type definition needs to be updated

[19:11:34.0345] <arai>
as you can see in the bug commnet 0's backtrace, the caller is [js::StringToBigInt](https://searchfox.org/mozilla-central/rev/6ec440e105c2b75d5cae9d34f957a2f85a106d54/js/src/vm/BigIntType.cpp#3618-3619)

[19:11:45.0631] <arai>
its return type is `JS::Result<BigInt*, JS::OOM> `

[19:12:14.0840] <arai>
it means, if succeeds, it returns `JS::BigInt` pointer.  if fails, it returns `JS::OOM`

[19:12:32.0950] <arai>
the type definition doesn't represent the allocation overflow case

[19:13:00.0041] <arai>
`ParseStringBigIntLiteral` calls the function that your patch modified

[19:13:05.0050] <arai>
https://searchfox.org/mozilla-central/rev/6ec440e105c2b75d5cae9d34f957a2f85a106d54/js/src/vm/BigIntType.cpp#3639-3640
```cpp
if (!res && !parseError) {
  return cx->alreadyReportedOOM();
```

[19:13:17.0391] <arai>
so, these lines after the call doesn't match the behavior

[19:13:37.0170] <arai>
it expects that, if error happens, and if it's not parse error, it's always OOM

[19:14:41.0158] <arai>
so, it needs different error type that represents more generic error

[19:14:52.0069] <arai>
that is here https://searchfox.org/mozilla-central/rev/6ec440e105c2b75d5cae9d34f957a2f85a106d54/js/public/Result.h#183-187
```cpp
/**
 * Type representing a JS error or exception. At the moment this only
 * "represents" an error in a rather abstract way.
 */
struct Error {
```

[19:15:06.0519] <arai>
actually, OOM is its subclass https://searchfox.org/mozilla-central/rev/6ec440e105c2b75d5cae9d34f957a2f85a106d54/js/public/Result.h#202
```cpp
struct OOM : Error {
```

[19:15:28.0873] <arai>
and there's corresponding function in `JSContext` https://searchfox.org/mozilla-central/rev/6ec440e105c2b75d5cae9d34f957a2f85a106d54/js/src/vm/JSContext.cpp#974-975
```cpp
mozilla::GenericErrorResult<JS::Error> JSContext::alreadyReportedError() {
  return mozilla::Err(JS::Error());
```


2022-08-15
[20:02:07.0235] <liam_g>
In an embedding project, I'm using a a proxy to define a custom object, and using the virtual `getOwnPropertyDescriptor()` method to lookup and extract properties. It seems to be working well, but I'm surprised by how many calls `getOwnPropertyDescriptor()` gets. For instance, a single function call like `proxy.myCustomFumction(10)` results in 6 calls to `getOwnPropertyDescriptor()`. Does this seems strange, or is it normal?

[20:09:57.0783] <liam_g>
When I start adding arguments and more complex code, I get a lot more calls. I appreciate that I'm not providing much information here, but I'm just trying to get a quick sense of whether this is normal, or if I might be doing something wrong.

[21:01:28.0498] <arai>
what's the details of the 6 calls?  for same property?  or different properties?

[21:16:52.0936] <liam_g>
I don't have a reliable way of checking this yet, since I haven't figured out how to print or debug JS IDs. But for the simplest test I'm doing, I have only one function name (`myCustomFunction()`) and no other variables. So I would assume that it's for the same property.

[21:17:50.0712] <arai>
is the function called only once in the entire execution?

[21:19:15.0579] <arai>
there's `js::DumpId` function to dump `jsid` (== `JS::PropertyKey`) https://searchfox.org/mozilla-esr91/rev/41204ebb7310bd46bc1a376d5e483b0554b0a169/js/public/friend/DumpFunctions.h#91
```cpp
extern JS_PUBLIC_API void DumpId(JS::PropertyKey id);
```

[21:25:12.0647] <liam_g>
I'm only running `JS_Execute()` once. When I put `js::DumpId()` in my `getOwnPropertyDescriptor()` function, I get the following:

```
jsid 78cbbb471e0 = JSString* (78cbbb471e0) = Latin1Char * (78cbbb471e8) = "playMidi"
jsid 78cbbb3b0d4 = [Latin 1]"Symbol.unscopables"
jsid 78cbbb471e0 = JSString* (78cbbb471e0) = Latin1Char * (78cbbb471e8) = "playMidi"
jsid 78cbbb471e0 = JSString* (78cbbb471e0) = Latin1Char * (78cbbb471e8) = "playMidi"
jsid 78cbbb471e0 = JSString* (78cbbb471e0) = Latin1Char * (78cbbb471e8) = "playMidi"
jsid 78cbbb3b0d4 = [Latin 1]"Symbol.unscopables"
```

[21:25:28.0758] <liam_g>
`playMidi` is the function I'm trying to run.

[21:28:41.0164] <arai>
what's the operations done for the object?

[21:29:00.0851] <liam_g>
I don't understand what you mean

[21:29:05.0827] <arai>
`Symbol.unscopables` is used in multiple cases

[21:29:46.0258] <arai>
is the code only `obj.playMidi()`,  or is there any other code that touches `obj` ?

[21:32:05.0984] <arai>
for example, do you have `with (obj) { ... }` ?  or, do you put the object in the environment chain array when evaluating the code?

[21:35:24.0136] <liam_g>
There is no `with`, but I am using the scope chain argument in `JS_Evaluate`. This pertains to our previous discussion. I'm doing this so that I can call `playMidi()` and have it implicitly call `obj.playMidi()`.

[21:37:06.0488] <liam_g>
I take it that the number of calls to `getOwnPropertyDescriptor()` does look suspicious? I'm also doing a few other weird things that might be at fault. 

[21:38:13.0884] <arai>
if the object is in the env chain, some operations are done for each internal operation for names/bindings

[21:38:51.0551] <arai>
for example, while searching where the binding lives in the chain

[21:40:07.0245] <liam_g>
That makes sense.

[21:41:06.0658] <liam_g>
I guess there is no way of reducing those calls then, if I want to use the env chain (which I absolutely do).

[21:43:59.0919] <liam_g>
I'm also specifying a custom prototype for all of the proxy objects. I was wondering if that was causing extra calls.

[07:54:15.0781] <Bryan Thrall [:bthrall]>
One of my patches modifies a file in __js/src/jsapi-tests/__ and *reviewbot* flagged it as not covered by coverage analysis. Is this a flaw in the automated review, or is there something I need to update to avoid this warning? ([see the warning here](https://phabricator.services.mozilla.com/D154464#C5433780NL1))

[07:56:22.0246] <jandem>
Bryan Thrall [:bthrall]: as long as jsapi-tests all pass you're good

[07:58:14.0430] <jandem>
apparently jsapi-tests are not included in coverage runs, all files have 0% here: https://coverage.moz.tools/#revision=latest&path=js%2Fsrc%2Fjsapi-tests&view=directory

[08:05:29.0195] <Bryan Thrall [:bthrall]>
Sounds like maybe an improvement for *reviewbot* to not warn for coverage of jsapi-test .cpp files

[08:24:44.0060] <Bryan Thrall [:bthrall]>
I created bug 1784896

[08:24:45.0714] <botzilla>
https://bugzil.la/1784896 — NEW (nobody) — [Automated review] reviewbot warns about jsapi-test file without coverage


2022-08-16
[17:55:16.0200] <Tim>
Would anybody here be willing to land https://phabricator.services.mozilla.com/D152685 ? It was approved a while ago, just slipped my mind

[18:00:53.0573] <mccr8>
> <@tjc:igalia.com> Would anybody here be willing to land https://phabricator.services.mozilla.com/D152685 ? It was approved a while ago, just slipped my mind

Looks like RyanVM just clicked the button to land it.

[03:37:25.0787] <nbp>
IS there a mrgiggles equivalent nowadays?

[03:37:35.0675] <nbp>
Are JSAtom moved during GC?

[04:10:23.0731] <Redfire>
What's the recommended way to check if a object is from a native class? There's a lot of similar "instance" functions

[04:12:34.0280] <arai>
in C++ ?

[04:14:18.0741] <Redfire>
In rust but the C++ API, yes

[04:14:35.0174] <Redfire>
* In rust but the C++ JSAPI, yes

[04:15:01.0283] <arai>
`JS_InstanceOf` can check if given `JS::Handle<JSObject*>` has given `JSClass*` as its class

[04:15:47.0206] <arai>
https://searchfox.org/mozilla-central/rev/497076b5edd0f906ae088cdf224e45896162694b/js/src/jsapi.h#335-338
```cpp
extern JS_PUBLIC_API bool JS_InstanceOf(JSContext* cx,
                                        JS::Handle<JSObject*> obj,
                                        const JSClass* clasp,
                                        JS::CallArgs* args);
```

[04:32:17.0043] <arai>
it directly compares the class https://searchfox.org/mozilla-central/rev/497076b5edd0f906ae088cdf224e45896162694b/js/src/jsapi.cpp#1616-1617,1626
```cpp
JS_PUBLIC_API bool JS_InstanceOf(JSContext* cx, HandleObject obj,
                                 const JSClass* clasp, CallArgs* args) {
...
  if (!obj || obj->getClass() != clasp) {
```

[04:34:26.0158] <arai>
other 2 "instance" functions `JS_HasInstance` and `JS::OrdinaryHasInstance` are for checking prototype

[05:49:03.0029] <jakechampion>
Is it possible to use AutoCycleDetector in a project which embeds spidermonkey?
I think it should be possible via JSContext->cycleDetectorVector() (https://searchfox.org/mozilla-central/source/js/src/vm/JSContext.h#665-671) but I get a compilation error:
>error: member access into incomplete type 'JSContext'
>note: forward declaration of 'JSContext'
>/spidermonkey/release/include/js/TypeDecls.h:28:22: struct JS_PUBLIC_API JSContext;
I have a feeling I'm missing an #include or something but not quite sure

[05:49:07.0722] <jakechampion>
 * Is it possible to use AutoCycleDetector in a project which embeds spidermonkey?
I think it should be possible via JSContext->cycleDetectorVector() (https://searchfox.org/mozilla-central/source/js/src/vm/JSContext.h#665-671) but I get a compilation error:

> error: member access into incomplete type 'JSContext'
> note: forward declaration of 'JSContext'
> /spidermonkey/release/include/js/TypeDecls.h:28:22: struct JS\_PUBLIC\_API JSContext;
I have a feeling I'm missing an #include or something but not quite sure

[05:49:13.0888] <jakechampion>
 * Is it possible to use AutoCycleDetector in a project which embeds spidermonkey?
I think it should be possible via JSContext->cycleDetectorVector() (https://searchfox.org/mozilla-central/source/js/src/vm/JSContext.h#665-671) but I get a compilation error:

> error: member access into incomplete type 'JSContext'
> note: forward declaration of 'JSContext'
> /spidermonkey/release/include/js/TypeDecls.h:28:22: struct JS\_PUBLIC\_API JSContext;

I have a feeling I'm missing an #include or something but not quite sure

[05:51:51.0225] <jakechampion>
For context: I'm implementing the Console API and wanted to improve the output for Objects, Sets, Maps, etc and need to detect cycles within those when generating the string to print out

[05:56:47.0564] <jakechampion>
I was originally using [ValueToSource](https://searchfox.org/mozilla-central/source/js/src/vm/ToSource.cpp#124) but that returns `"({})"` for Objects, Sets, Maps, etc - would a patch to improve support in ValueToSource be accepted?

[05:57:07.0695] <arai>
if you're using SpiderMonkey as library, `JSContext` is opaque type and functions that accesses its internal cannot be used/compiled.   if you're compiling SpiderMonkey source code as part of your embedding project, including `js/src/vm/JSContext.h` would solve

[05:58:19.0510] <jakechampion>
I am using it as a library - okay, I'll need to figure out another way to solve this

[05:58:43.0727] <jakechampion>
 * I am using it as a library - okay, I'll need to figure out another way to solve this - thank you arai 

[08:22:22.0532] <tcampbell>
> <@nbp:mozilla.org> Are JSAtom moved during GC?

No, they are not. Used to be implicit, but now AllocKind.h shows the right flags https://searchfox.org/mozilla-central/rev/497076b5edd0f906ae088cdf224e45896162694b/js/src/gc/AllocKind.h#87

[11:55:34.0234] <TheQwertiest>
> <@jakechampion:mozilla.org> For context: I'm implementing the Console API and wanted to improve the output for Objects, Sets, Maps, etc and need to detect cycles within those when generating the string to print out

The way I've done it is just by storing all traversed js objects in an array during logging and then check every new encountered object against it to detect cycles

[11:56:06.0624] <TheQwertiest>
> <@theqwertiest:mozilla.org> The way I've done it is just by storing all traversed js objects in an array during logging and then check every new encountered object against it to detect cycles

This is C++ and code is a bit messy, but it's possible to get a general idea: https://github.com/TheQwertiest/foo_spider_monkey_panel/blob/master/foo_spider_monkey_panel/js_backend/objects/dom/console.cpp

[11:56:22.0870] <TheQwertiest>
> <@theqwertiest:mozilla.org> The way I've done it is just by storing all traversed js objects in an array during logging and then check every new encountered object against it to detect cycles

 * This is C++ and code is a bit messy, but I think it's possible to get a general idea: https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/master/foo\_spider\_monkey\_panel/js\_backend/objects/dom/console.cpp

[11:57:07.0929] <TheQwertiest>
 * This is C++ and code is a bit messy, but I think it's possible to get a general idea: https://github.com/TheQwertiest/foo_spider_monkey_panel/blob/c13e1554a60837ba4a3cb0cc84717f8e1bdcb1f1/foo_spider_monkey_panel/js_backend/objects/dom/console.cpp#L217

[12:00:16.0742] <TheQwertiest>
> <@theqwertiest:mozilla.org> This is C++ and code is a bit messy, but I think it's possible to get a general idea: https://github.com/TheQwertiest/foo_spider_monkey_panel/blob/c13e1554a60837ba4a3cb0cc84717f8e1bdcb1f1/foo_spider_monkey_panel/js_backend/objects/dom/console.cpp#L217

The output looked mostly the same as in FF during testing (including cycle handling)

[13:25:56.0729] <ewang21>
Can ESR91 be build with C++14? Does anyone kown  a version that can be build with C++14?

[13:38:18.0892] <mgaudet>
ewang21: [this document](https://searchfox.org/mozilla-esr91/source/docs/code-quality/coding-style/using_cxx_in_firefox_code.rst) from the esr91 tree suggests that the minimum supported version of C++ has been C++17 since the Firefox 73 era. 

[13:39:28.0550] <mgaudet>
Also based on that document, you should be able to compile with C++14 prior to Firefox 73, and C++14 became mandatory as of Firefox 59.

[13:47:36.0112] <ewang21>
How to decrease the size of js91? I built the ESR91 project by "../configure --disable-jemalloc --with-system-zlib --with-intl-api --enable-optimize". The js91 is about 338.2MB. I am not sure what build options to use.

[14:00:42.0296] <sfink>
ewang21: a lot of it is debuginfo. If you strip it, it should shrink by about a factor of 6.

[14:01:14.0953] <sfink>
a non-debug library should be a bit smaller too (`--disable-debug`)

[14:02:25.0708] <sfink>
you'll want to develop against a debug library, but for production use non-debug (it'll be much faster; the debug version does lots of internal checks)


2022-08-17
[17:36:36.0196] <Mohamed Atef>
> <@arai:mozilla.org> if you're interested into that area, try looking into documents around frontend and stencil [Stencil.h](https://searchfox.org/mozilla-central/rev/f655bdf6b4bf01b42609750ab94fc37635397260/js/src/frontend/Stencil.h#74)

Should I read all SMDOCS in frontend? 

[17:38:01.0527] <Mohamed Atef>
> <@arai:mozilla.org> once you've read through documents around that, [bug 1782571](https://bugzilla.mozilla.org/show_bug.cgi?id=1782571) could be a good start point to work on bugs around cache.  it's a part of effort to decouple the frontend and JSContext, to make the code around compilation more flexible

Can you give more hints? 

[17:46:10.0602] <arai>
not necessarily all, but reading them will help you figuring out how things work

[17:46:33.0737] <arai>
about the bug, I'll post comment shortly 

[18:02:47.0317] <arai>
Mohamed Atef: posted in https://bugzilla.mozilla.org/show_bug.cgi?id=1782571#c2

[18:02:56.0364] <arai>
let me know if there's something unclear

[18:03:40.0754] <Mohamed Atef>
Thanks

[06:16:26.0503] <nbp>
jonco: sfink: Is it safe to have a HashMap which does not trace its keys, but relies on purging the content to avoid stale data?

[06:20:16.0592] <jonco>
nbp: yes, provided it is purged approriately

[06:21:22.0170] <nbp>
would [purgeForCompaction](https://searchfox.org/mozilla-central/source/js/src/gc/Compacting.cpp#121) be appropriate?

[07:14:18.0873] <arai>
anyone frequently using `Dump*` functions in [DumpFunctions.h](https://searchfox.org/mozilla-central/rev/f3616b887b8627d8ad841bb1a11138ed658206c5/js/public/friend/DumpFunctions.h#85-91)?  I'm trying to improve the dump functionality in [bug 1783397](https://bugzilla.mozilla.org/show_bug.cgi?id=1783397).  the new dump functions use JSON to print recursive structure, and wondering if it impacts existing workflow

[07:14:20.0864] <botzilla>
https://bugzil.la/1783397 — ASSIGNED (arai) — Add JS::Value::dump

[07:14:30.0373] <arai>
there's example output and try run in the comments

[07:27:23.0349] <davidj361>
When building esr91, what are the possible minimal sizes of the libraries? Also, are these the .a files? Shouldn't they be .so files?

[07:29:23.0534] <arai>
I'm not sure about the exact size, but building with `--without-intl-api` could reduce the size, if you don't use any Intl API

[07:31:35.0332] <davidj361>
right but after doing a `make` without `make install` there are .a files that are 300 MB - 600 MB, without debug info, i.e. `--disable-debug`

[07:40:48.0969] <arai>
to my understanding, the size is not final size of the binary you get when you link it

[07:41:49.0835] <arai>
JS shell (`js`) is 40MB while `libjs_static.a` is 600MB here

[07:44:28.0134] <davidj361>
so if I want to deploy an embedded JS application to a system with not a lot of storage space then I could staticly link and avoid the large .so file and obtain a small working executable with low file size?

[07:46:19.0711] <arai>
`.so` would also take almost same size (40MB).  for me on macOS, `.dylib` is also 40MB

[07:46:45.0706] <arai>
I haven't tested on linux tho

[07:54:45.0623] <davidj361>
arai: `275M Aug 17 10:49 libmozjs-91.so*`
via `../configure --disable-jemalloc --with-system-zlib --without-intl-api --disable-debug --enable-optimize` esr91

[07:55:03.0046] <davidj361>
i'm not sure how you manage to obtain 40 MB .so files

[07:55:11.0528] <davidj361>
 * i'm not sure how you manage to obtain a 40 MB .so file

[07:55:34.0428] <arai>
I'll test on linux shortly

[07:56:34.0334] <davidj361>
and i assume the `libjs_static.ajs` file that is ~749 MB is mandatory to have too?

[07:57:07.0666] <davidj361>
 * arai: `275M Aug 17 10:49 libmozjs-91.so*` (275 MB)
via `../configure --disable-jemalloc --with-system-zlib --without-intl-api --disable-debug --enable-optimize` esr91

[07:59:04.0766] <arai>
`.a` file is intermediate file like `.o`, not for redistribute

[07:59:12.0906] <arai>
I'm not aware of `.ajs` tho

[07:59:55.0074] <davidj361>
> <@arai:mozilla.org> I'm not aware of `.ajs` tho

from `make install`
`mv -f /usr/local/lib/libjs_static.a /usr/local/lib/libjs_static.ajs`

[08:01:30.0384] <davidj361>
so that's just for static linking spidermonkey to your application i assume so it's not needed for the target platform then

[08:04:28.0138] <arai>
it sounds like there's some unexpected thing happening in Makefile `subst`, unless the extra `js` suffix is really intentional for some reason

[08:04:56.0043] <davidj361>
Yeah so I'm not sure how to get a small .so file as Ubuntu 20.04's esr68's .so file

[08:05:12.0359] <davidj361>
 * Yeah so I'm not sure how to get a small .so file like Ubuntu 20.04's esr68's .so file

[08:05:39.0736] <davidj361>
which comes via apt

[08:05:45.0309] <davidj361>
 * which was obtained via apt

[08:05:46.0381] <evilpie>
I think you need to run `strip *.so`

[08:05:50.0867] <davidj361>
 * which was obtained via apt and not me compiling

[08:10:33.0122] <davidj361>
> <@evilpie:mozilla.org> I think you need to run `strip *.so`

thanks! that did the trick!
I'm surprised this wasn't automated by the make install

[08:10:45.0504] <davidj361>
i assumed this was the case if `--disable-debug` was provided

[08:11:05.0778] <davidj361>
Managed to get 13 MB now

[08:11:13.0623] <davidj361>
 * Managed to make it 13 MB now

[08:29:03.0013] <davidj361>
what does the esr stand for?

[08:29:18.0024] <davidj361>
 * what does the esr stand for? extended stable release?

[08:32:10.0263] <davidj361>
also is it recommended to use esr 91.0? or esr 91.9.1?

[08:35:50.0411] <davidj361>
 * what does the esr stand for? extended stable release?
edit: It's Extended Support Release, nevermind

[08:36:05.0562] <sfink>
extended support release, and 91.9.1 definitely sounds better; the esr releases get seurity fies

[08:36:08.0847] <sfink>
 * extended support release, and 91.9.1 definitely sounds better; the esr releases get seurity fixes

[08:36:21.0500] <evilpie>
I would suggest esr 102 even

[08:36:53.0962] <davidj361>
> <@evilpie:mozilla.org> I would suggest esr 102 even

I didn't notice the esr 102

[08:37:11.0470] <sfink>
`--disable-debug` is unrelated to debuginfo. It causes `#define DEBUG`, which enables lots of internal assertions and some debug functions.

[08:37:36.0946] <sfink>
debuginfo is always the bulk of the size. When I just measured, stripping reduced the size by a factor of 6.

[09:04:37.0954] <mgaudet>
> <@arai:mozilla.org> anyone frequently using `Dump*` functions in [DumpFunctions.h](https://searchfox.org/mozilla-central/rev/f3616b887b8627d8ad841bb1a11138ed658206c5/js/public/friend/DumpFunctions.h#85-91)?  I'm trying to improve the dump functionality in [bug 1783397](https://bugzilla.mozilla.org/show_bug.cgi?id=1783397).  the new dump functions use JSON to print recursive structure, and wondering if it impacts existing workflow

I use them when debugging regularly; those outputs look great. 

[09:06:02.0090] <arai>
mgaudet: thanks!  can I ask review for those patches?

[09:06:46.0191] <mgaudet>
arai: Normally, I'd say yes. But I should be starting parental leave today or tomorrow; so I likely won't be able to do a good job

[09:06:57.0891] <mgaudet>
(or a timely one at least) 

[09:15:31.0018] <arai>
oh, okay, don't worry.  Enjoy a wonderful parental leave :)

[13:00:06.0154] <fabrice>
Are wasm reference types supported in spidermonkey?

[13:07:38.0357] <tcampbell>
Bug 1508553 suggests that they are, but I'm not really sure the precise details

[13:07:39.0927] <botzilla>
https://bugzil.la/1508553 — RESOLVED (nobody) — [meta] Implement WebAssembly reftypes proposal

[13:24:01.0156] <arai>
dminor: does decorators proposal have test262 tests?

[13:25:01.0049] <arai>
the `accessor` handing doesn't match to my reading of the spec proposal

[13:25:03.0973] <dminor>
arai: They're here https://github.com/tc39/test262/tree/main/src/decorator

[13:26:04.0714] <arai>
hm, so there's no `accessor` testcase

[13:26:14.0744] <dminor>
Yes, the test cases are pretty limited at the moment.

[13:27:56.0309] <arai>
okay, posted comments

[13:30:44.0232] <arai>
to my understanding, the `[no LineTerminator here]` rule is to avoid breaking existing code, and let the rule match only when the code has been a SyntaxError in existing syntax

[13:31:32.0244] <arai>
so, "not-matching the new rule" itself shouldn't become syntax error

[13:59:04.0426] <dminor>
That makes sense to me. Thanks for the review!


2022-08-18
[06:55:42.0782] <davidj361>
Why wasn't this code in esr68 boilerplate code? https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr102-migration-guide/examples/boilerplate.cpp#L26-L40

[06:56:00.0719] <davidj361>
Does esr68 embedded code not have working exception handling?

[07:00:37.0822] <tcampbell>
I believe that JS::PrintError was not public in ESR68, so dumping error strings was up to the embedder to decide how to do.

[07:01:35.0235] <tcampbell>
We made it available in ESR78 and added to examples because it seemed useful, but did not update old example repos at the time.

[07:02:41.0338] <tcampbell>
I wouldn't be opposed to enhancing the ESR68 boilerplate to have an example of how one might dump the same errors.

[07:03:35.0637] <tcampbell>
(using branches and putting it seperate on GitHub was intentional so this sort of update to examples was possible, even though the ESR68 code itself is frozen)

[07:07:33.0647] <nbp>
“If the phrase “[no LineTerminator here]” appears in the right-hand side of a production of the syntactic grammar, it indicates that the production is a restricted production: it may not be used if a LineTerminator occurs in the input stream at the indicated position.”

That would exclude multi-line comments which are containing a `LineTerminator`?

[07:15:54.0071] <arai>
https://tc39.es/ecma262/#sec-lexical-and-regexp-grammars

[07:15:59.0831] <arai>
> A MultiLineComment (that is, a comment of the form /*…*/ regardless of whether it spans more than one line) is likewise simply discarded if it contains no line terminator; but if a MultiLineComment contains one or more line terminators, then it is replaced by a single line terminator, which becomes part of the stream of input elements for the syntactic grammar.

[07:16:23.0263] <arai>
multi-line comment with line terminators inside it is line terminator

[08:09:56.0312] <davidj361>
tcampbell thank you for the reply

[08:47:49.0546] <ewang21>
How do we set the compiler of esr68 to g++?

[08:48:04.0936] <ewang21>
 * How do I set the compiler of esr68 to g++?

[08:49:25.0427] <nbp>
You can set the CC / CXX environement variable in the mozconfig file.

[09:30:31.0854] <ewang21>
> <@nbp:mozilla.org> You can set the CC / CXX environement variable in the mozconfig file.

I am not using mach. I am using configure and makefile

[09:32:40.0163] <arai>
you can directly set those environment variables in the shell and that's reflected to build

[09:34:24.0357] <nbp>
or on the command line of the configure script.

[09:34:48.0900] <nbp>
 * or on the command line of the configure script. (not tested in a while)

[13:48:36.0014] <ewang21>
How do I fix "ERROR: The libclang located at None is too old (need at least 4.0)." I used the "--with-libclang-path=/usr/lib/llvm-10/lib/libclang.so". But it doesn't work.

[16:20:11.0443] <TheQwertiest>
just wanted to thank jonco for wonderful docs: https://searchfox.org/mozilla-central/source/js/public/Modules.h

[16:21:25.0678] <TheQwertiest>
 * just wanted to thank jonco for these wonderful docs: https://searchfox.org/mozilla-central/source/js/public/Modules.h

[16:27:12.0696] <TheQwertiest>
on another module related note: is there an easy way to export a native JS object as a module?
i.e. something like this:
```
// my_module.js

// object has myMethod() and myProperty() with setter and getter
let nativeObject = loadNativeObjectFromEmbedding();

exportWithMagic default nativeObject ;

// user.js
import {myMethod, myProperty} from ''my_module"

myMethod();
myProperty = 'new value'
```

[16:27:31.0089] <TheQwertiest>
 * on another module related note: is there an easy way to export a native JS object as a module?
i.e. something like this:

```
// my_module.js

// object has myMethod() and myProperty() with setter and getter
let nativeObject = loadNativeObjectFromEmbedding();

exportWithMagic default nativeObject ;


// user.js

import {myMethod, myProperty} from ''my_module"

myMethod();
myProperty = 'new value'
```

[16:28:10.0327] <TheQwertiest>
 * on another module related note: is there an easy way to export a native JS object as a module?
i.e. something like this:

```
// my_module.js

// object has myMethod() and myProperty() with setter and getter
let nativeObject = loadNativeObjectFromEmbedding();

// ???
exportWithMagic default nativeObject ;


// user.js

import {myMethod, myProperty} from ''my_module"

myMethod();
myProperty = 'new value'
```

[16:28:30.0045] <TheQwertiest>
 * on another module related note: is there an easy way to export a native JS object as a module?
i.e. something like this:

```
// my_module.js

// object has myMethod() and myProperty() with setter and getter
let nativeObject = loadNativeObjectFromEmbedding();

// ???
exportWithMagic default nativeObject ;


// user.js

import {myMethod, myProperty} from 'my_module'

myMethod();
myProperty = 'new value'
```

[16:29:32.0166] <TheQwertiest>
 * on another module related note: is there an easy way to export a native JS object as a module?
i.e. something like this:

```
// my_module.js

// object has myMethod() and myProperty() with setter and getter
let nativeObject = loadNativeObjectFromEmbedding();

// ???
exportWithMagic default nativeObject ;


// user.js

import {myMethod, myProperty} from 'my_module'

myMethod(); // should be equal to nativeObject.myMethod()
myProperty = 'new value' // should call setter on native object
```

[16:31:49.0286] <TheQwertiest>
ps: it doesn't matter for me where the required magic needs to be performed (in js code or in native code)


2022-08-19
[01:33:21.0279] <jonco>
> <@theqwertiest:mozilla.org> just wanted to thank jonco for these wonderful docs: https://searchfox.org/mozilla-central/source/js/public/Modules.h

Thanks, glad they are useful :)

[01:46:53.0647] <jonco>
TheQwertiest: There's no way to do that at present. Something like that could be achieved with synthetic module support. Some support for this is being worked on as part of JSON modules (bug 1670176).  Given this, you could make your module loader create a synthetic module for a given URI.

[01:46:55.0200] <botzilla>
https://bugzil.la/1670176 — NEW (jon4t4n) — Implement the JSON modules proposal

[02:24:29.0631] <nbp>
ewang21: This is what I have locally, because gcc / clang are not installed in default FHS locations:
```
ac_add_options --with-libclang-path=/nix/store/nz1l47i75bqs8kw1lqr6sphws6jxjxrs-clang-11.1.0-lib/lib
ac_add_options --with-clang-path=/nix/store/a5k6x6nmdsrdfgkr5wmp6srwsk1slm1h-clang-wrapper-11.1.0/bin/clang
export BINDGEN_CFLAGS="-cxx-isystem /nix/store/42izybv2fz3ps5pcg3dvcmn85pc9406y-gcc-11.3.0/include/c++/11.3.0 -isystem /nix/store/42izybv2fz3ps5pcg3dvcmn85pc9406y-gcc-11.3.0/include/c++/11.3.0/x86_64-unknown-linux-gnu"
export CC="/nix/store/kia8xygy2r9iblwbjrl163j4bpz84wz7-gcc-wrapper-11.3.0/bin/cc"
export CXX="/nix/store/kia8xygy2r9iblwbjrl163j4bpz84wz7-gcc-wrapper-11.3.0/bin/c++"

```

[06:52:42.0185] <Redfire>
> <@theqwertiest:mozilla.org> on another module related note: is there an easy way to export a native JS object as a module?
> i.e. something like this:
> 
> ```
> // my_module.js
> 
> // object has myMethod() and myProperty() with setter and getter
> let nativeObject = loadNativeObjectFromEmbedding();
> 
> // ???
> exportWithMagic default nativeObject ;
> 
> 
> // user.js
> 
> import {myMethod, myProperty} from 'my_module'
> 
> myMethod(); // should be equal to nativeObject.myMethod()
> myProperty = 'new value' // should call setter on native object
> ```

Bug 1722802 was something for that, but that seems kind of stalled currently

[06:52:44.0284] <botzilla>
https://bugzil.la/1722802 — UNCONFIRMED (nobody) — Add JSAPI functions to create JS modules w/ custom exports

[12:49:39.0276] <TheQwertiest>
jonco Redfire thanks for the replies


[12:51:27.0167] <TheQwertiest>
that's really ... inconvenient though: I'm trying to migrate API in my embedding from assortment of global objects to a proper module system (something like nodejs builtin modules)

[12:52:37.0978] <TheQwertiest>
 * that's really ... inconvenient though: I'm trying to migrate API in my embedding from global-bound objects to a proper module system (something like nodejs builtin modules)

[12:56:43.0368] <TheQwertiest>
 * that's really ... inconvenient though: I'm trying to migrate API in my embedding from global-bound objects to a proper module system (something like nodejs builtin modules), so I'm trying to minimize the amount of copy-paste

[12:56:52.0858] <TheQwertiest>
 * that's really ... inconvenient though: I'm trying to migrate API in my embedding from global-bound objects to a proper module system (something like nodejs builtin modules), so I'm trying to minimize the amount of copy-paste to make it work

[13:46:20.0877] <ewang21>
> <@nbp:mozilla.org> ewang21: This is what I have locally, because gcc / clang are not installed in default FHS locations:
> ```
> ac_add_options --with-libclang-path=/nix/store/nz1l47i75bqs8kw1lqr6sphws6jxjxrs-clang-11.1.0-lib/lib
> ac_add_options --with-clang-path=/nix/store/a5k6x6nmdsrdfgkr5wmp6srwsk1slm1h-clang-wrapper-11.1.0/bin/clang
> export BINDGEN_CFLAGS="-cxx-isystem /nix/store/42izybv2fz3ps5pcg3dvcmn85pc9406y-gcc-11.3.0/include/c++/11.3.0 -isystem /nix/store/42izybv2fz3ps5pcg3dvcmn85pc9406y-gcc-11.3.0/include/c++/11.3.0/x86_64-unknown-linux-gnu"
> export CC="/nix/store/kia8xygy2r9iblwbjrl163j4bpz84wz7-gcc-wrapper-11.3.0/bin/cc"
> export CXX="/nix/store/kia8xygy2r9iblwbjrl163j4bpz84wz7-gcc-wrapper-11.3.0/bin/c++"
> 
> ```

Where can I set these parameters? I am not using mach. I am using configure and makefile

[13:47:26.0995] <arai>
`ac_add_options` is configure parameter

[13:47:40.0781] <arai>
so, pass `--with-*` to `./configure`

[14:06:28.0004] <ewang21>
> <@arai:mozilla.org> so, pass `--with-*` to `./configure`

I used it like this "../configure --disable-jemalloc --enable-posix-nspr-emulation --enable-unaligned-private-values --with-system-zlib --with-intl-api --enable-optimize --with-libclang-path=/usr/lib/llvm-10/lib". It doesn't work.

[14:06:42.0247] <arai>
what happens for "doesn't work" ?

[14:08:17.0388] <ewang21>
> <@arai:mozilla.org> what happens for "doesn't work" ?

It dosen't show ERROR: The libclang located at None is too old (need at least 4.0). But there is a new error "ERROR: Cannot find the target C compiler"

[14:08:57.0289] <arai>
can you pastebin the whole command and output to https://paste.mozilla.org/ ?

[14:16:23.0970] <ewang21>
> <@arai:mozilla.org> can you pastebin the whole command and output to https://paste.mozilla.org/ ?

I pasted

[14:16:42.0678] <arai>
then you'll get the URL for your paste.  please post it here to share it

[14:17:18.0521] <ewang21>
> <@arai:mozilla.org> then you'll get the URL for your paste.  please post it here to share it

https://paste.mozilla.org/2SuQgw4J#L5

[14:17:42.0045] <arai>
can you paste the output as well?

[14:19:34.0442] <ewang21>
> <@arai:mozilla.org> can you paste the output as well?

https://paste.mozilla.org/BSboQzWJ#L5,16

[14:20:04.0307] <arai>
is `/nix/store/kia8xygy2r9iblwbjrl163j4bpz84wz7-gcc-wrapper-11.3.0/bin/cc` correct path of the compiler in your environment ?

[14:21:02.0778] <arai>
it sounds like you've exported CC and CXX environment variables before running the command. and that points non-existent compiler binary

[14:22:07.0819] <ewang21>
> <@arai:mozilla.org> it sounds like you've exported CC and CXX environment variables before running the command. and that points non-existent compiler binary

https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr68/docs/Building%20SpiderMonkey.md I just followed the steps here to build

[14:22:48.0070] <arai>
you've run `export CC=...` commands, right?

[14:23:06.0182] <arai>
they override the compiler's path

[14:24:14.0864] <arai>
and `export` command alters the current shell's environment variables, so it keeps affecting all subsequent commands in the shell

[14:25:21.0122] <ewang21>
> <@arai:mozilla.org> they override the compiler's path

"CC=/usr/bin/gcc CXX=/usr/bin/g++ ../configure --disable-jemalloc --enable-posix-nspr-emulation --enable-unaligned-private-values --with-system-zlib --with-intl-api --enable-optimize" It shows "ERROR: The libclang located at None is too old (need at least 4.0)."

[14:26:16.0823] <arai>
can you pastebin the whole output?

[14:26:58.0045] <arai>
with the whole command

[14:27:45.0122] <ewang21>
> <@arai:mozilla.org> can you pastebin the whole output?

https://paste.mozilla.org/3tn5rO3g#L5,16

[14:28:33.0515] <arai>
this time `--with-libclang-path` is missing

[14:30:31.0256] <ewang21>
> <@arai:mozilla.org> this time `--with-libclang-path` is missing

https://paste.mozilla.org/0XfdDsOt#L5,16

[14:30:41.0241] <ewang21>
> <@ewang21:mozilla.org> https://paste.mozilla.org/0XfdDsOt#L5,16

same result

[14:34:09.0491] <arai>
so, it's failing here https://searchfox.org/mozilla-esr68/rev/4b79eedfe95ef427490a16e7c96f3a0930ab0c32/build/moz.configure/bindgen.configure#280-283
```py
lib = CDLL(libclang.encode('utf-8'))
# We want at least 4.0. The API we test below is enough for that.
# Just accessing it should throw if not found.
fun = lib.clang_EvalResult_getAsLongLong
```

[14:34:34.0880] <arai>
printing the exception there will tell us what's happening

[14:35:49.0928] <arai>
try making the next `except:` line to `except Exception as e:`, and put `raise e` in the next line, and run configure again

[14:47:49.0806] <ewang21>
> <@arai:mozilla.org> try making the next `except:` line to `except Exception as e:`, and put `raise e` in the next line, and run configure again

    except Exception as e:
        raise e
        die(dedent('''\
        The libclang located at {} is too old (need at least 4.0).

        Please make sure to update it or point to a newer libclang using
        --with-libclang-path.
        '''.format(libclang)))
        return False

[14:48:05.0401] <ewang21>
Is it correct?

[14:48:26.0754] <arai>
yes, assuming the indent is correct there

[14:49:46.0735] <ewang21>
> <@arai:mozilla.org> yes, assuming the indent is correct there

https://paste.mozilla.org/6kb1xncC#L5,16

[14:52:29.0694] <arai>
oh, try adding `@imports(_from='__builtin__', _import='Exception')` line before `def min_libclang_version(libclang):` line

[14:53:37.0779] <ewang21>
> <@arai:mozilla.org> oh, try adding `@imports(_from='__builtin__', _import='Exception')` line before `def min_libclang_version(libclang):` line

AttributeError: 'NoneType' object has no attribute 'encode'


[14:54:29.0341] <arai>
so `libclang` parameter somehow is None there

[14:54:33.0498] <ewang21>
> <@ewang21:mozilla.org> AttributeError: 'NoneType' object has no attribute 'encode'

https://paste.mozilla.org/ddxZXy14#L5,16

[14:55:04.0572] <arai>
the value comes from https://searchfox.org/mozilla-esr68/rev/4b79eedfe95ef427490a16e7c96f3a0930ab0c32/build/moz.configure/bindgen.configure#149-150
```py
def bindgen_config_paths(llvm_config, libclang_path, clang_path,
                         library_name_info, host, build_project):
```

[14:56:12.0923] <arai>
I guess it hits this path https://searchfox.org/mozilla-esr68/rev/4b79eedfe95ef427490a16e7c96f3a0930ab0c32/build/moz.configure/bindgen.configure#239-240
```py
if build_project not in bindgen_projects:
    return namespace()
```

[14:56:26.0872] <arai>
this message sounds related https://searchfox.org/mozilla-esr68/rev/4b79eedfe95ef427490a16e7c96f3a0930ab0c32/build/moz.configure/bindgen.configure#243-244
```py
You must provide both of --with-libclang-path and --with-clang-path
or neither of them.'''))
```

[14:56:39.0378] <arai>
so, try passing `--with-clang-path` as well

[14:57:59.0669] <ewang21>
> <@arai:mozilla.org> so, try passing `--with-clang-path` as well

ERROR: Could not find autoconf 2.13


[14:58:47.0225] <arai>
Do you have it?

[14:59:00.0716] <ewang21>
> <@arai:mozilla.org> Do you have it?

https://paste.mozilla.org/p58NEn7w#L5,16

[15:00:04.0786] <arai>
is autoconf 2.13 installed and in path?

[15:01:49.0605] <Mohamed Atef>
https://searchfox.org/mozilla-central/rev/5c04fc7016eb7f52cf835d482f1125c8f139c959/js/src/vm/GeckoProfiler-inl.h#85

[15:02:13.0612] <ewang21>
I don't know. I got the code from here: http://archive.ubuntu.com/ubuntu/pool/main/m/mozjs68/

[15:02:30.0549] <Mohamed Atef>
> <@mohamed_atef:matrix.org> https://searchfox.org/mozilla-central/rev/5c04fc7016eb7f52cf835d482f1125c8f139c959/js/src/vm/GeckoProfiler-inl.h#85

so this should be Maybe<JSContext*> cx
and the caller should be Maybe too

[15:02:42.0335] <arai>
ewang21: you need to install autoconf2.13 https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr68/docs/Building%20SpiderMonkey.md#prerequisites

[15:03:39.0855] <arai>
Mohamed Atef: no, the bug is about making `AutoGeckoProfilerEntry` itself optionally allocated in frontend

[15:04:00.0535] <arai>
not about making `JSContext` parameter optional in `AutoGeckoProfilerEntry`

[15:04:18.0483] <arai>
so, allocate `AutoGeckoProfilerEntry` only when `JSContext` is available

[15:05:00.0886] <ewang21>
> <@arai:mozilla.org> ewang21: you need to install autoconf2.13 https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr68/docs/Building%20SpiderMonkey.md#prerequisites

How can I get it?

[15:05:13.0854] <arai>
what OS are you on?

[15:06:01.0855] <ewang21>
Ubuntu 20.04

[15:06:35.0118] <arai>
`apt install autoconf2.13`

[15:09:50.0014] <ewang21>
> <@arai:mozilla.org> `apt install autoconf2.13`

I can do "make" now. Thank you very much!


2022-08-20
[17:35:16.0724] <Mohamed Atef>
https://bugzilla.mozilla.org/show_bug.cgi?id=1783795#c6

[17:37:28.0342] <Mohamed Atef>
https://phabricator.services.mozilla.com/D155139

[17:41:47.0285] <arai>
thanks! posted comments

[17:51:52.0747] <arai>
Mohamed Atef: about the "Intermittent Failures Robot"'s comment, it's 1-week summary from the automation.  before the patch gets landed, the bug caused failures on mozilla-central's automation, and those failures are marked on treeherder, and they're summarized in the comment.  so once the bug gets fixed, you can ignore the comment

[17:53:12.0916] <arai>
sfink: I'll review the string patches next week, after reading through the ancestor patches

[17:53:43.0972] <arai>
(I assume the changes are based on those ancestors

[17:54:48.0393] <arai>
Mohamed Atef: thank you for quick fix :)  have you tried using try server?  can you push your latest patch to try?

[17:55:51.0194] <Mohamed Atef>
no, I have not.

[17:56:12.0630] <Mohamed Atef>
how does the pushing work?

[17:56:24.0666] <Mohamed Atef>
normal `git push`?

[17:56:53.0729] <arai>
you're using git clone of mozilla-unified, right?

[17:57:06.0411] <Mohamed Atef>
hg bundle, sorry

[17:57:13.0390] <Mohamed Atef>
mozilla-unified

[17:57:58.0728] <arai>
okay

[17:58:55.0278] <arai>
have you configured ssh for `hg.mozilla.org` ?

[17:58:55.0891] <arai>
https://mozilla-version-control-tools.readthedocs.io/en/latest/hgmozilla/auth.html

[17:59:07.0011] <Mohamed Atef>
> <@arai:mozilla.org> have you configured ssh for `hg.mozilla.org` ?

yes

[17:59:32.0791] <arai>
okay, so `ssh hg.mozilla.org` works, right?

[17:59:43.0392] <Mohamed Atef>
yes

[17:59:47.0900] <arai>
great :)

[18:03:13.0013] <arai>
then, now `./mach try ...` commands should work.  passing `--help` shows help

[18:06:27.0518] <arai>
for example `./mach try fuzzy -q 'spidermonkey-sm'` will trigger all spidermonkey shell builds

[18:06:47.0259] <arai>
 * for example `./mach try fuzzy -q 'spidermonkey-sm'` will trigger all spidermonkey shell builds and tests

[18:13:34.0206] <arai>
I usually do equivalent of `./mach try syntax -b d -p sm-plain-linux64,linux64-shell-haz,sm-nonunified-linux64 -u none -t none`

[18:15:25.0855] <arai>
that runs plain debug build of JS shell and runs tests, and also runs non-unified build (normal build is unified, that combines multiple sources into one.  that's faster but sometimes missing `#include` is overlooked), and also rooting hazard analysis

[18:16:12.0685] <Mohamed Atef>
I will try it now 

[18:16:18.0209] <Mohamed Atef>
Thanks a lot 

[18:16:42.0742] <Mohamed Atef>
Can you suggest another bug? 

[18:16:46.0597] <arai>
once successfully pushed, please post the URL of the push to the phabricator revision comment

[18:17:56.0900] <Mohamed Atef>
I am reading the docs

[18:20:48.0255] <arai>
Mohamed Atef: can you file a followup bug and address the comment there?  https://phabricator.services.mozilla.com/D154251#inline-849553

[18:49:28.0332] <Mohamed Atef>
> <@arai:mozilla.org> Mohamed Atef: can you file a followup bug and address the comment there?  https://phabricator.services.mozilla.com/D154251#inline-849553

Bug 1786113

[18:49:29.0959] <botzilla>
https://bugzil.la/1786113 — UNCONFIRMED (nobody) — Use ReportOversizedAllocation in BigInt::calculateMaximumDigitsRequired instead of ReportAllocationOverflow

[18:49:37.0692] <arai>
thanks!

[18:49:39.0553] <Mohamed Atef>
should I fix this?

[18:50:43.0442] <Mohamed Atef>
It's just a small change

[18:50:53.0414] <arai>
yeah, it's nice to fix

[19:00:23.0661] <arai>
Great :)  Can you also push the bigint patch to try?

[19:00:35.0552] <arai>
once it runs successfully, I'll land both patches

[19:01:27.0083] <Mohamed Atef>
> <@arai:mozilla.org> once it runs successfully, I'll land both patches

I did

[19:02:01.0011] <Mohamed Atef>
I will post the link

[19:02:12.0602] <Mohamed Atef>
Please suggest more work
thanks

[19:16:57.0236] <arai>
right now, I don't have appropriate chunk of work around cache bugs.  let's look for different thing

[19:19:40.0383] <arai>
are you interested into reducing memory consumption?  there's [bug 1321498](https://bugzilla.mozilla.org/show_bug.cgi?id=1321498), that's mildly experimental

[19:19:41.0759] <botzilla>
https://bugzil.la/1321498 — NEW (nobody) — Reorder struct/class fields to reduce padding

[19:20:25.0942] <arai>
the bug is about removing unnecessary padding from structs

[19:25:04.0858] <Mohamed Atef>
> <@arai:mozilla.org> are you interested into reducing memory consumption?  there's [bug 1321498](https://bugzilla.mozilla.org/show_bug.cgi?id=1321498), that's mildly experimental

I will work on it.
I am not interested in specific part.
I just want to understand compilers more deeply, and BTW this community is one of the best communities I worked with.

[19:25:19.0613] <Mohamed Atef>
I hope to contribute more.

[19:25:47.0073] <arai>
great :)

[19:27:02.0238] <Mohamed Atef>
Can't Spider Monkey work on LLVM JIT?

[19:27:35.0869] <Mohamed Atef>
and add web assembly back-end?

[19:27:56.0440] <Mohamed Atef>
this a just a thought

[19:30:00.0282] <iain>
Many people have tried using LLVM as a JIT backend. Very few still use it. LLVM is designed to generate code that runs quickly, but it's not optimized to compile quickly, which is important for JITs.

[19:31:08.0382] <Mohamed Atef>
how about MLIR?

[19:31:14.0942] <iain>
The Julia programming language uses LLVM as a JIT, but it is notorious for having extremely slow startup.

[19:31:15.0478] <Mohamed Atef>
I think it solves this 

[19:32:11.0955] <iain>
MLIR is similar to LLVM in terms of design tradeoffs

[19:33:27.0981] <iain>
In general, I'd say that it's easier to write a reusable compiler backend for static compilation than JIT compilation

[19:34:21.0886] <iain>
Cranelift was an attempt at a generic JIT backend

[19:35:58.0771] <iain>
But even there, we've found that Ion generates code of similar (or better) quality, faster

[19:37:04.0025] <iain>
There are significant benefits from being able to design the backend around the semantics of JS, instead of trying to translate from JS into a more generic representation

[19:44:30.0129] <Mohamed Atef>
It's clear now
Thanks

[21:59:46.0591] <Mohamed Atef>
https://bugzilla.mozilla.org/show_bug.cgi?id=1782573

[22:00:00.0882] <Mohamed Atef>
https://bugzilla.mozilla.org/show_bug.cgi?id=1773319

[22:00:13.0486] <Mohamed Atef>
How about those? 

[00:03:39.0169] <arai>
the scope of bug 1782573 is slightly large, so it would be better creating sub-bug for each consumer.  I'll think about it

[00:03:41.0920] <botzilla>
https://bugzil.la/1782573 — NEW (nobody) — Use ErrorContext allocator for off-thread compilation

[00:04:29.0614] <arai>
bug 1773319 depends on other bugs (see "Depends on" field under "References" section), and those bugs needs to be fixed before working on it

[00:04:30.0943] <botzilla>
https://bugzil.la/1773319 — NEW (nobody) — Add public Stencil APIs to compile without JSContext

[00:28:24.0428] <arai>
Mohamed Atef: [bug 1786117](https://bugzilla.mozilla.org/show_bug.cgi?id=1786117) is part of preparation for bug 1782573

[00:28:25.0843] <botzilla>
https://bugzil.la/1786117 — NEW (nobody) — Use ErrorContext-variant of `ReportOutOfMemory` in Stencil XDR

[00:29:46.0374] <arai>
try checking bug 1782569's patches to see how things work there

[00:29:47.0771] <botzilla>
https://bugzil.la/1782569 — ASSIGNED (bthrall) — Add JSContext-free variant of js::ReportOutOfMemory()

[09:26:35.0921] <sfink>
> <@arai:mozilla.org> sfink: I'll review the string patches next week, after reading through the ancestor patches

Perfect, thank you. Though you can also wait until those are reviewed. Sorry, I probably shouldn't have requested review yet, since it is very possible that the ancestors will end up needing to change from tcampbell's review.

[09:27:41.0741] <arai>
okay


2022-08-21
[04:38:13.0481] <liam_g>
Hello, I'm trying to understand and implement Modules in SpiderMonkey, following the example code on github. I'm not quite clear on the difference between `JS::ModuleInstantiate()` and `JS::ModuleEvaluate()`. If the module is going to be imported by Javascript code which is evaluated using `JS::Evaluate()`, do I still need to run `JS::ModuleEvaluate()`?

[04:41:18.0508] <liam_g>
Also, is there a way of clearing modules that have been loaded? I.e. if I load a module, but then I change the Javascript source-code (and maybe even delete that module), is there a way of clearing the modules that are loaded, so that they can be loaded again?

[10:29:46.0910] <arai>
liam_g: `ModuleInstantiate` links modules.  so, handles import/export between multiple modules.  `ModuleEvaluate` evaluates the module scripts

[10:30:06.0061] <arai>
[testStencil.cpp](https://searchfox.org/mozilla-esr102/rev/9339f0d4b2f1d12c243ef029cc315d07ebe8c95f/js/src/jsapi-tests/testStencil.cpp#100) has example how to compile and evaluate module

[10:30:41.0177] <arai>
oh, but it doesn't use multiple modules, so the effect of `ModuleInstantiate` might be unclear there

[10:31:23.0176] <arai>
then, what do you mean by "be imported by Javascript code which is evaluated using `JS::Evaluate()`" ?  do you import the module from non-module script?  if so, how?

[10:38:51.0860] <arai>
then, to my understanding, there's no semantics of "unloading module" in the spec.  so I'm not sure if that works, but you could just return new module from resolve hook

[10:40:37.0934] <arai>
modules already loaded cannot be replaced, but if the same module is loaded again, that can be swapped to different one


2022-08-22
[20:22:42.0286] <liam_g>
What I want to do is to have one or more .js files with something like `export var foo = function() { return 3; }` written in them, and then to pre-load those files into the system. Then in the main JSContext thread I can type `import {foo} from 'wherever.js'; foo();` and have it evaluate (using `JS::Evaluate()`) to 3. This is the standard use of modules, right?

[20:30:26.0165] <liam_g>
I started getting really confused yesterday about how to implement this, because the Modules.cpp example is a bit sparse. My mental model of it (which might be wrong) is as follows: to load the modules I have to run `JS::Compile()' on the file(s) with the exports in them. Then I need to run `JS::ModuleInstantiate()`, followed by `JS::ModuleEvaluate()`. After that, any code evaluated with `JS::Evaluate()` will automatically call the resolve hook that was set via `JS::SetModuleResolveHook()`. Is this right?

[06:08:03.0063] <liam_g>
 * I started getting really confused yesterday about how to implement this, because the Modules.cpp example is a bit sparse. My mental model of it (which might be wrong) is as follows: to load the modules I have to run `JS::Compile()` on the file(s) with the exports in them. Then I need to run `JS::ModuleInstantiate()`, followed by `JS::ModuleEvaluate()`. After that, any code evaluated with `JS::Evaluate()`will automatically call the resolve hook that was set via`JS::SetModuleResolveHook()\`. Is this right?

[11:22:35.0336] <ewang21>
Does anyone know how to uninstall spidermonkey installed via "make install"? There is no "make uninstall" and I did not find the "install_manifest.txt".

[11:30:07.0641] <iain>
I doubt there's an automated approach. You can look at what's done by `make install` [here](https://searchfox.org/mozilla-central/source/js/src/build/Makefile.in#26) and [here](https://searchfox.org/mozilla-central/source/js/src/shell/Makefile.in#14).


2022-08-23
[02:28:01.0624] <nbp>
ewang21: From what I can see with Nix, unless we install headers I guess, there is only:
```
/nix/store/dyiz4qsgp1k4d7h3r47b54m6c5xh7i51-spidermonkey-78.15.0
/nix/store/dyiz4qsgp1k4d7h3r47b54m6c5xh7i51-spidermonkey-78.15.0/lib
/nix/store/dyiz4qsgp1k4d7h3r47b54m6c5xh7i51-spidermonkey-78.15.0/lib/libmozjs-78.so
/nix/store/dyiz4qsgp1k4d7h3r47b54m6c5xh7i51-spidermonkey-78.15.0/bin
/nix/store/dyiz4qsgp1k4d7h3r47b54m6c5xh7i51-spidermonkey-78.15.0/bin/js78
/nix/store/dyiz4qsgp1k4d7h3r47b54m6c5xh7i51-spidermonkey-78.15.0/bin/js
```

[02:41:51.0058] <arai>
for me, here's the list of installed files, on esr91, on macOS
```
bin/js91-config
bin/js91
include/mozjs-91/*
lib/pkgconfig/mozjs-91.pc
lib/libmozjs-91.dylib
lib/libjs_static.ajs
```

[11:37:25.0449] <arai>
do we have usage data for [JSRuntime::onOutOfMemory](https://searchfox.org/mozilla-central/rev/d01591796d5faccf762adb09a311d8ee12f7ca7f/js/src/vm/Runtime.cpp#658) ?  such as, how frequently it's used, and how frequently and in what case it successfully allocate after GC ?

[11:38:32.0366] <arai>
I'm trying to decouple frontend and GC, and wondering if removing the allocate-after-GC path during compilation can affect any case

[11:40:19.0292] <ptomato>
anyone interested in taking a look at the ESR102 migration guide for embedders? https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/pull/60

[11:42:09.0280] <arai>
(the context for the allocate-after-GC is [bug 1786512](https://bugzilla.mozilla.org/show_bug.cgi?id=1786512)

[11:42:11.0058] <botzilla>
https://bugzil.la/1786512 — ASSIGNED (arai) — Factor out JSRuntime::onOutOfMemory into multiple steps

[11:42:42.0955] <arai>
ptomato: I'll look into it

[11:42:49.0996] <ptomato>
thanks!

[11:53:12.0901] <tcampbell>
arai: I believe there was a recent work in Bug 1716727 to how oom recovery worked for allocations beyond just JS.

[11:53:14.0245] <botzilla>
https://bugzil.la/1716727 — RESOLVED (rkraesig) — Delay crashing the main process when running out of memory

[11:53:59.0097] <tcampbell>
In a multi-process environment, it stalls the process that is having an oom and hopes that the OS can get things in better shape, and the telemetry showed that it does make a real impact

[11:54:33.0101] <tcampbell>
/me tries to think about how these different systems might interact..

[11:57:02.0278] <arai>
according to the patch, "stall" here means "sleep" ?

[11:57:28.0344] <tcampbell>
yeah, I think that was the implementation

[11:57:52.0219] <tcampbell>
and I guess it might only be on windows now

[11:58:04.0751] <tcampbell>
that would give a chance for _other_ processes to GC first

[11:58:40.0904] <arai>
makes sense

[12:00:28.0023] <tcampbell>
so your proposed change would regress a theoretical case where the current process has all the garbage and we are using up a lot of memory in a single parse. Since the DOM would typically just crash in a similar case, and we can imagine the JS and HTML document parsing as roughly similar, I think I think your  change is probably reasonable

[12:02:01.0207] <tcampbell>
and since we are thinking about parsing scripts referenced by <script> tags from gecko directly (instead of spidermonkey threads), then I think it isn't surprising that we wouldn't do additional last-ditch-gc that the DOM stuff isn't doing

[12:02:31.0780] <tcampbell>
(unless I'm completely mistaken about what an OOM during HTML parse / DOM construction looks like..)

[12:04:31.0760] <arai>
okay, sounds good :)   I'll look into removing the GC during the frontend allocation

[12:04:48.0784] <arai>
that will reduce the difference between off-thread compilation and main-thread compilation

[12:06:23.0814] <tcampbell>
sfink: does gecko ever request a last-ditch GC?

[12:08:12.0425] <sfink>
you mean where the request comes from Gecko, as opposed to being generated internally by an allocation failure?

[12:08:51.0930] <sfink>
maybe I need to read backscroll

[12:09:55.0237] <tcampbell>
yeah

[12:10:34.0534] <tcampbell>
(eg, when gecko is parsing a HTML)

[12:11:32.0394] <sfink>
I believe last ditch GCs only result from a failure allocating a GC thing, when it tres to mmap a new chunk and gets OOM. I'll  look closuer in 5 minutes, sory.

[12:11:39.0947] <tcampbell>
we want to be able to parse JS without needing a JSContext, and that means detaching from the last-ditch gc

[12:11:55.0804] <tcampbell>
no worries, I have to step out for a bit too

[12:22:05.0401] <sfink>
if you're not creating any GC things, then you won't get any last ditch GCs. It looks like the [one and only path](https://searchfox.org/mozilla-central/rev/d01591796d5faccf762adb09a311d8ee12f7ca7f/js/src/gc/Allocator.cpp#383-399) to the LAST_DITCH reason is when [allocation fails](https://searchfox.org/mozilla-central/rev/d01591796d5faccf762adb09a311d8ee12f7ca7f/js/src/gc/Allocator.cpp#383-399)

[12:26:43.0903] <sfink>
arai: tcampbell: the recent change to stall on OOM was *intended* to keep the parent process alive at the cost of the content processes: when the parent OOMed, it would sleep and then retry, on the theory that a content process would attempt to allocate enough to OOM itself and just immediately die. So we'd trade an entire browser crash for just a tab crashing, very possibly for reasons that were its own fault. And the change *did* help, but it turned out to not be for that reason.

[12:26:51.0805] <arai>
it sounds like "last ditch GC" is not what I'm going to remove.  the code that I want to remove from frontend allocation is https://searchfox.org/mozilla-central/rev/d01591796d5faccf762adb09a311d8ee12f7ca7f/js/src/vm/Runtime.cpp#669-673
```cpp
/*
 * Retry when we are done with the background sweeping and have stopped
 * all the allocations and released the empty GC chunks.
 */
gc.onOutOfMallocMemory();
```

[12:27:57.0731] <sfink>
apparently on Windows, you can get an OOM based on the current size of the swap file. Windows will automatically increase its size, but not synchronously. So sleeping after an OOM gives the OS enough time to grow the swap.

[12:29:20.0894] <arai>
(perhaps the above line does not perform GC?

[12:29:58.0219] <sfink>
yeah, I don't think that will GC.

[12:30:20.0101] <sfink>
it just waits for various things that might be in progress, because they may free up some memory.

[12:30:35.0879] <arai>
oh, sorry, my question was wrong then

[12:31:34.0081] <sfink>
oh, it looks like it also aggressively frees some additional things. But still nothing that could GC.

[12:38:40.0866] <arai>
okay, so, what could get affected if I remove that path from OOM during compilation?

[12:38:52.0104] <arai>
on main thread

[12:39:14.0419] <arai>
off-thread compilation already skips it

[12:55:49.0914] <sfink>
My guess is that it wouldn't change very much. Probably if we're OOMing during compilation, then those attempts to free up memory are only going to postpone when we hit an OOM. But we don't have solid data on that. It's kind of the same with all OOMs. We just don't know.

[12:57:35.0533] <arai>
I see. thanks :)

[13:03:55.0581] <sfink>
what part would be useful to remove? I added 2 comments to the bug.

[13:06:10.0519] <arai>
thanks!  the thing that I want to remove is the interaction with `JSContext` or `GCRuntime`, so that the script compilation becomes completely `JSContext`-free, and can be invoked from any thread

[13:07:12.0973] <arai>
currently, the allocation and error reporting inside frontend is wrapped by [js::ErrorContext](https://searchfox.org/mozilla-central/rev/d01591796d5faccf762adb09a311d8ee12f7ca7f/js/src/vm/ErrorContext.h#38)

[13:07:32.0236] <arai>
that has 2 subclasses for main-thread and off-main-thread, to keep the current behavior

[13:08:22.0756] <davidj361>
How do I call a JavaScript function in embedded C++? I assume I could have some C++ binded function to JavaScript where I pass a JavaScript function as an argument to it then call that passed argument in C++ after checking it's a function?

[13:08:25.0118] <arai>
and what I want to do is to drop main-thread variant and use the off-main-thread compilation's way for all cases, such as, deferring the error reporting until the end of compilation, etc

[13:08:30.0542] <davidj361>
 * How do I properly call a JavaScript function in embedded C++? I assume I could have some C++ binded function to JavaScript where I pass a JavaScript function as an argument to it then call that passed argument in C++ after checking it's a function?

[13:08:48.0570] <davidj361>
 * How do I properly call a JavaScript function in embedded C++ in a dynamic manner? I assume I could have some C++ binded function to JavaScript where I pass a JavaScript function as an argument to it then call that passed argument in C++ after checking it's a function?

[13:09:04.0790] <arai>
so, now I'm trying to reduce the difference between ` MainThreadErrorContext` and `OffThreadErrorContext`

[13:09:22.0287] <arai>
and one of the main difference is the `onOutOfMemory`

[13:09:40.0802] <arai>
if `JSContext` dependency can be removed from there, things becomes very simple

[13:15:30.0298] <arai>
davidj361: there are multiple `JS::Call` functions that takes function, etc

[13:15:47.0148] <arai>
for example, this variant can take the function as `JS::Handle<JS::Value>` https://searchfox.org/mozilla-central/rev/d01591796d5faccf762adb09a311d8ee12f7ca7f/js/public/CallAndConstruct.h#101-103
```cpp
extern JS_PUBLIC_API bool Call(JSContext* cx, Handle<Value> thisv,
                               Handle<Value> fun, const HandleValueArray& args,
                               MutableHandle<Value> rval);
```

[13:16:35.0915] <arai>
so, if you have the function as `JS::Value`, root it and pass it to the function's `fun` parameter

[13:17:04.0592] <arai>
`thisv` is the `this` value in the function.  if you don't need it, you can pass `JS::UndefinedHandleValue`

[13:17:34.0462] <arai>
`args` is an array of arguments.  if there's no arguments, you can pass `JS::HandleValueArray::empty()`

[13:17:55.0697] <arai>
and `rval` is out parameter that receives the return value of the function

[13:18:00.0507] <arai>
here's example https://searchfox.org/mozilla-central/rev/d01591796d5faccf762adb09a311d8ee12f7ca7f/js/src/jsapi-tests/testFunctionNonSyntactic.cpp#60-61
```cpp
CHECK(JS::Call(cx, JS::UndefinedHandleValue, funVal,
               JS::HandleValueArray::empty(), &rval));
```

[13:22:49.0494] <arai>
if you want to pass arguments, you can construct the vector and pass it
```cpp
JS::RootedVector<JS::Value> args(cx);
if (!args.append(arg0)) {
  return false;
}
if (!args.append(arg1)) {
  return false;
}
...
```


[14:12:45.0141] <ewang21>
If I want to build the arm64 version of esr68 on a 64-bit linux system,  is the following command correct to generate the make file?
CC=/usr/bin/clang CXX=/usr/bin/clang++ ../configure --disable-jemalloc --enable-posix-nspr-emulation --enable-unaligned-private-values --with-system-zlib --with-intl-api --enable-optimize --disable-debug-symbols --with-libclang-path=/usr/lib/llvm-10/lib --with-clang-path=/usr/bin/clang --target=aarch64-pc-linux

[14:27:21.0968] <tcampbell>
That looks approximately like what I would expect. I don't remember what sort of non-android arm64 targets were being used back when 68 was current, so I'm not sure if the target-triple needs to be tweaked at all

[14:32:01.0499] <ewang21>
> <@tcampbell:mozilla.org> That looks approximately like what I would expect. I don't remember what sort of non-android arm64 targets were being used back when 68 was current, so I'm not sure if the target-triple needs to be tweaked at all

If there is no option "--target=aarch64-pc-linux", it can generate the make file, but after i add it, there is a ERROR: Failed to find a linker.

[14:32:56.0067] <tcampbell>
are you building on arm64 or cross compiling?

[14:33:12.0671] <tcampbell>
if building on same system, I'd try dropping the '--target'

[14:34:42.0495] <ewang21>
cross compiling. The host system type is x86_64-pc-linux-gnu. So it can generate the make file without "--target=aarch64-pc-linux"

[14:35:53.0889] <tcampbell>
ewang21: are you able to compile a simple C++ file using /usr/bin/clang++ to the right target?

[14:38:02.0544] <ewang21>
> <@tcampbell:mozilla.org> ewang21: are you able to compile a simple C++ file using /usr/bin/clang++ to the right target?

Yes, I built a x64 lib

[14:38:26.0004] <tcampbell>
Can you build an arm64 binary though?

[14:39:03.0988] <ewang21>
Sure, I build an arm64 v8 lib

[14:41:44.0337] <tcampbell>
I'd watch the configure output and see where it is looking for the linker. Maybe you need to set LD=... as well

[14:47:26.0479] <Mohamed Atef>
arai: To pass an `ErrorContext*` parameter here: https://searchfox.org/mozilla-central/source/js/src/frontend/Stencil.cpp#2240

[14:47:45.0497] <Mohamed Atef>
should I use `MainThreadErrorContext ec(cx)`

[14:47:50.0492] <Mohamed Atef>
and pass &ec?

[14:48:31.0550] <arai>
yes, exactly

[14:50:27.0277] <arai>
whether it's `MainThreadErrorContext` or `OffThreadErrorContext` depends on the where the function is called. if a function is called by both main thread and helper threads, the function needs to receive `ErrorContext*` parameter and let the caller decide which one to use.  for `CompilationStencil::serializeStencils`'s case, it's used by main thread, and you can use `MainThreadErrorContext`

[14:51:10.0247] <arai>
then, actually, the distinction is going to be removed shortly, in bug 1786494, but until then, please use one of them depending on each case

[14:51:11.0702] <botzilla>
https://bugzil.la/1786494 — ASSIGNED (arai) — Rewrite MainThreadErrorContext with OffThreadErrorContext + a step to convert to runtime error

[16:31:59.0983] <ewang21>
> <@tcampbell:mozilla.org> I'd watch the configure output and see where it is looking for the linker. Maybe you need to set LD=... as well

../configure --help             You will see        LD                        Deprecated             😅

[16:38:16.0677] <tcampbell>
I tried --target=aarch64-linux-pc on my esr68 directory, and see the same linker error. Looks like it in our weird python build stuff instead of normal configure script.. sigh. https://searchfox.org/mozilla-esr68/source/build/moz.configure/toolchain.configure#2088

[16:39:11.0885] <tcampbell>
ewang21: adding `--enable-gold` seems to get me through

[16:54:17.0057] <tcampbell>
it looks like it uses `clang --target=aarch64-linux-gnu -Wl,--version` which finds system `ld` that for me doesn't have the right support

[16:57:21.0591] <tcampbell>
or also `--enable-linker=lld` works too

[16:59:59.0963] <tcampbell>
although that might hit some cross-compile issues later on.. sigh.. build systems


2022-08-24
[17:02:30.0112] <tcampbell>
though maybe if you have the right sysroot available you'll be better off. I'm missing the cross-compiled crt0.o files

[17:04:22.0902] <ewang21>
> <@tcampbell:mozilla.org> ewang21: adding `--enable-gold` seems to get me through

ERROR: Cannot compile for aarch64-pc-linux-gnu with /home/ewang21/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc


[17:10:47.0731] <tcampbell>
I just had to `rustup target add aarch64-unknown-linux-gnu`

[17:11:06.0996] <tcampbell>
(you need the appropriate cross-compile rust compiler)

[17:12:04.0756] <tcampbell>
/me is off now

[17:59:00.0309] <iain>
I think there might be a bug in the interaction between OffThreadPromiseTask and the internal job queue, but I might also be holding it wrong

[18:01:52.0971] <iain>
The [SMDOC for OffThreadPromiseTask](https://searchfox.org/mozilla-central/source/js/src/vm/OffThreadPromiseRuntimeState.h#29-101) says that it can be used for queuing a task in HTML terms. It gives the example of a promise of the result of network I/O.

[18:04:52.0349] <iain>
InternalJobQueue is the shell's implementation of JobQueue, which represents the microtask queue. In particular, the queue contains reaction jobs for promises. The microtask queue is drained before returning to the event loop.

[18:06:51.0780] <iain>
But in InternalJobQueue::runJobs, we [call](https://searchfox.org/mozilla-central/source/js/src/vm/JSContext.cpp#871) OffThreadPromiseState::internalDrain before draining the queue.

[18:09:11.0238] <iain>
[internalDrain](https://searchfox.org/mozilla-central/source/js/src/vm/OffThreadPromiseRuntimeState.cpp#205-217) blocks until *every* OffThreadPromiseTask that has been initialized (and added to the `live` list) is done

[18:10:48.0516] <iain>
So unless I'm missing something, we can't drain the microtask queue in the shell if there's a live OffThreadPromiseTask

[18:11:10.0990] <iain>
Which is a major problem for my plan to use OffThreadPromiseTask to handle timeouts for waitAsync

[18:12:03.0593] <iain>
Does anybody know this code well enough to have opinions about whether the shell is wrong, or I am?

[18:14:57.0728] <iain>
(Specifically, the problem I run into is that if I use a separate timer thread to resolve an OffThreadPromiseTask when a `waitAsync` times out, then even if there's been a `notify` that resolved the promise returned by `waitAsync`, we won't actually run the reaction job until after the timeout has expired.)

[19:49:02.0332] <Mohamed Atef>
What is the difference between public APIs and the other APIs

[19:49:09.0685] <Mohamed Atef>
 * What is the difference between public APIs and the other APIs?

[00:44:40.0830] <nchevobbe>
Would you know if there's a way to get the same value as `JS_Now()` in JS ?

[01:18:50.0508] <arai>
Mohamed Atef: public API is functions/structs exposed to outside of SpiderMonkey, that is gecko (firefox) or other embedding applications.  others are SpiderMonkey-internal things that's not exposed to anywhere

[01:28:55.0013] <arai>
nchevobbe: in what context or environment?  in JS shell, `dateNow()` returns `JS_Now() / 1000.0`, but it's JS shell only

[01:36:15.0410] <nchevobbe>
I wanted it for the console evaluation, to replace this (uggly) piece of code https://searchfox.org/mozilla-central/rev/d01591796d5faccf762adb09a311d8ee12f7ca7f/devtools/server/actors/webconsole.js#1013-1018

[01:37:38.0181] <nchevobbe>
I came across `JS_Now` which I'm exposing to `ConsoleEvent` in order to be able to have finer-grained timestamp and avoid ordering problem in the console output

[01:38:35.0288] <arai>
so, the requirement includes "comparable with Date.now()" ?

[01:40:38.0087] <nchevobbe>
ideally I'd want to switch everything we consume in the console to a microsecond-precise timeStamp 

[01:43:54.0372] <arai>
I mean, if that's not requirement and just "a value that changes with microsecond order", there could be some other options, like current system time returned by `mozilla::TimeStamp::Now()`

[01:46:26.0965] <arai>
but, looks like, this is not for testing, and I think directly using the `JS_Now()` (`PRMJ_Now()`) might be cleaner?

[01:49:05.0225] <arai>
for testing purpose, for example, `Cu.getJSTestingFunctions().timeSinceCreation()` returns process's up time

[01:49:06.0569] <arai>
https://searchfox.org/mozilla-central/rev/d01591796d5faccf762adb09a311d8ee12f7ca7f/js/src/builtin/TestingFunctions.cpp#7263-7267
```cpp
static bool TimeSinceCreation(JSContext* cx, unsigned argc, Value* vp) {
  CallArgs args = CallArgsFromVp(argc, vp);
  double when =
      (mozilla::TimeStamp::Now() - mozilla::TimeStamp::ProcessCreation())
          .ToMilliseconds();
```

[01:50:18.0362] <nchevobbe>
no indeed, it's not for testing, but to fix an actual bug we have (https://bugzilla.mozilla.org/show_bug.cgi?id=1483662)

[01:52:14.0484] <nchevobbe>
one thing we could do is include a `timeStamp` property , whose value would be `JS_Now()`, to the `Completion` object we return from `DebuggerObject::CallData::executeInGlobalWithBindingsMethod`

[01:53:13.0489] <arai>
okay, then I think directly exposing `JS_Now` or `PRMJ_Now` would be better option,  and afaik there's no existing function.  so it needs to be implemented as chrome-only API on some object

[01:53:19.0504] <nchevobbe>
not sure if it's the right way to do it, but that might benefit other consumer of this API that would need the same accuracy (thinking about WebDriverBidi for example)

[01:53:44.0591] <nchevobbe>
(I was referring to my solution, not yours :) )

[01:56:09.0959] <arai>
oh, just realized that, in chrome-priv code, `performance.now()` returns not-clipped high-precision timer value

[01:56:25.0784] <arai>
(still not compatible with `Date.now()` tho

[02:02:50.0466] <nchevobbe>
yeah, I thought about this, but it wouldn't fit what I want I think.
But you gave me ideas and options, I'll play around :)

[02:04:06.0529] <arai>
Simple option would be to add a new method that returns `PRMJ_Now`, on `Cu` or somewhere

[03:09:22.0119] <nchevobbe>
added a `Cu.dateNow()` that replicates JSShell `dateNow()`, and it seems to work quite well.
arai , can I set you as a reviewer for the patch that adds the method on `Cu` ?

[03:11:21.0728] <arai>
I can review, but I'm not sure about the policy

[03:11:53.0312] <arai>
(I'm not XPConnect peer

[03:12:44.0570] <nchevobbe>
I'll add a peer too then, thanks!

[06:48:17.0073] <ewang21>
> <@tcampbell:mozilla.org> (you need the appropriate cross-compile rust compiler)

I added it. But there is a new ERROR:old-configure failed because of "configure: error: compiler is incompatible with sanitize options"😂

[06:49:00.0838] <tcampbell>
that is where I got too, but it wasn't surprising because I did not have the `crt1.o` files on my system.

[06:49:28.0810] <tcampbell>
I'm not sure how to set the right sysroot or whatever for it

[06:50:24.0087] <tcampbell>
if you have a single foo.cpp file you compile to a binary, are you able to just compile with `clang foo.cpp --target=aarch64-linux-pc` or do you need other library / sysroot options on your machine?

[06:52:20.0421] <tcampbell>
I think the configure script can take a `--sysroot` option which might be needed here

[10:16:42.0031] <ewang21>
> <@tcampbell:mozilla.org> if you have a single foo.cpp file you compile to a binary, are you able to just compile with `clang foo.cpp --target=aarch64-linux-pc` or do you need other library / sysroot options on your machine?

/usr/bin/ld: unrecognised emulation mode: aarch64linux
Supported emulations: elf_x86_64 elf32_x86_64 elf_i386 elf_iamcu i386linux elf_l1om elf_k1om i386pep i386pe

[10:17:28.0883] <tcampbell>
add the `-fuse-ld=lld` to that to get away from the system `ld`

[10:17:54.0122] <tcampbell>
(that is what --enable-linker=lld in spidermonkey translates down to for the clang command)

[10:52:33.0254] <ewang21>
> <@tcampbell:mozilla.org> (that is what --enable-linker=lld in spidermonkey translates down to for the clang command)

configure: error: compiler is incompatible with sanitize options
DEBUG: <truncated - see config.log for full output>
DEBUG: configure:4045: /usr/bin/clang -std=gnu99 --target=aarch64-linux-gnu -o conftest  -O2 -pipe -g -feliminate-unused-debug-types  -Qunused-arguments  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -Wl,-z,relro,-z,now -fuse-ld=lld conftest.c  1>&5
DEBUG: /usr/bin/ld.lld: error: cannot open crt1.o: No such file or directory
DEBUG: /usr/bin/ld.lld: error: cannot open crti.o: No such file or directory
DEBUG: /usr/bin/ld.lld: error: cannot open crtbegin.o: No such file or directory
DEBUG: /usr/bin/ld.lld: error: unable to find library -lgcc
DEBUG: /usr/bin/ld.lld: error: unable to find library -lgcc_s
DEBUG: /usr/bin/ld.lld: error: unable to find library -lc
DEBUG: /usr/bin/ld.lld: error: unable to find library -lgcc
DEBUG: /usr/bin/ld.lld: error: unable to find library -lgcc_s
DEBUG: /usr/bin/ld.lld: error: cannot open crtend.o: No such file or directory
DEBUG: /usr/bin/ld.lld: error: cannot open crtn.o: No such file or directory
DEBUG: clang: error: linker command failed with exit code 1 (use -v to see invocation)
DEBUG: configure: failed program was:
DEBUG: #line 4038 "configure"
DEBUG: #include "confdefs.h"
DEBUG: 
DEBUG: int main() {
DEBUG: 
DEBUG: ; return 0; }
DEBUG: configure: error: compiler is incompatible with sanitize options
ERROR: old-configure failed
😂

[10:56:46.0232] <tcampbell>
do you have a sysroot for the target machine that has the crt1.o files?

[11:12:51.0896] <davidj361>
Still having issues trying to call a JS function in C++ that was passed via JS.
```js
static bool CallJs(JSContext* cx, unsigned argc, JS::Value* vp) {
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);

    JS::RootedFunction arg(cx, args.get(0));
    JS::RootedValue rval(cx);
    JS::Call(cx, nullptr, arg, JS::HandleValueArray::empty(), &rval);
    return true;
}
```

[11:13:48.0610] <davidj361>
 * Still having issues trying to call a JS function in C++ that was passed via JS. Not sure how to convert the given parameter to a function.

```js
static bool CallJs(JSContext* cx, unsigned argc, JS::Value* vp) {
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);

    JS::RootedFunction arg(cx, args.get(0));
    JS::RootedValue rval(cx);
    JS::Call(cx, nullptr, arg, JS::HandleValueArray::empty(), &rval);
    return true;
}
```

[11:16:34.0620] <davidj361>
 * Still having issues trying to call a JS function in C++ that was passed via JS. Not sure how to convert the given parameter to a function. `cannot convert ‘JS::Handle<JS::Value>’ to ‘JS::detail::MaybeWrapped<JSFunction*>’ {aka ‘JSFunction*’} in initialization
`
```js
static bool CallJs(JSContext* cx, unsigned argc, JS::Value* vp) {
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);

    JS::RootedFunction arg(cx, args.get(0));
    JS::RootedValue rval(cx);
    JS::Call(cx, nullptr, arg, JS::HandleValueArray::empty(), &rval);
    return true;
}
```

[11:17:03.0508] <tcampbell>
davidj361: use RootedValue for line 4

[11:17:42.0996] <tcampbell>
the argument is a general value (eg, your caller could pass a string instead of a function), but I believe JS::Call has an override that takes a value and throws the right errors if it is non-sense

[11:19:27.0082] <tcampbell>
might need JS_CallFunctionValue instead of JS::Call. There are a few variants depending on what exactly you have as arguments

[11:20:22.0692] <davidj361>
I noticed it was complaining about being overloaded and having 2 candidates that looked exactly the same

[11:21:08.0357] <davidj361>
ah yes that did the trick, thanks tcampbell

[11:22:08.0429] <tcampbell>
yeah, function calls can be weird because JS is so dynamic

[11:25:43.0058] <tcampbell>
ewang21: for what it's worth, using esr102 things just seem to work since a bunch of the bootstrap code to download sysroot exists

[11:41:11.0596] <tcampbell>
And for esr68 if I use the following (with sysroot in CXX variables), then I get a build to work:
```
CC="/home/tcampbell/.mozbuild/clang/bin/clang --sysroot=/home/tcampbell/.mozbuild/sysroot-aarch64-linux-gnu" \
CXX="/home/tcampbell/.mozbuild/clang/bin/clang++ --sysroot=/home/tcampbell/.mozbuild/sysroot-aarch64-linux-gnu" \
../configure --target=aarch64-linux-gnu --enable-linker=lld
```

[11:43:26.0896] <tcampbell>
In esr102 using `mach build` instead of configure directly, I just had to set my config to
```
ac_add_options --enable-application=js
ac_add_options --target=aarch64
```

[11:44:57.0579] <tcampbell>
 * In esr102 using [mach build](https://firefox-source-docs.mozilla.org/js/build.html) instead of configure directly, I just had to set my config to

```
ac_add_options --enable-application=js
ac_add_options --target=aarch64
```

[12:21:56.0385] <ewang21>
> <@tcampbell:mozilla.org> ewang21: for what it's worth, using esr102 things just seem to work since a bunch of the bootstrap code to download sysroot exists

I can not use esr102 because of the C++17 SDK. I am trying to integrate it into a project which is using C++14

[12:21:58.0384] <ewang21>
> <@tcampbell:mozilla.org> do you have a sysroot for the target machine that has the crt1.o files?

/home/dev/ara/eb/adaptivecore/sdk/custom/qemu-arm64/2.8.0/sysroots/cortexa57-wrs-linux/usr/lib64/crt1.o

[12:27:28.0943] <tcampbell>
using `CC="...../clang --sysroot=/home/dev/ara/eb/adaptivecore/sdk/custom/qemu-arm64/2.8.0/sysroots/cortexa57-wrs-linux"` (and similar for CXX) might be enough here

[12:27:41.0614] <tcampbell>
(The --enable-linker=lld stuff was still needed for me)

[12:44:44.0800] <ewang21>
> <@tcampbell:mozilla.org> using `CC="...../clang --sysroot=/home/dev/ara/eb/adaptivecore/sdk/custom/qemu-arm64/2.8.0/sysroots/cortexa57-wrs-linux"` (and similar for CXX) might be enough here

DEBUG: /usr/bin/ld.lld: error: cannot open crtbegin.o: No such file or directory
DEBUG: /usr/bin/ld.lld: error: unable to find library -lgcc
DEBUG: /usr/bin/ld.lld: error: unable to find library -lgcc
DEBUG: /usr/bin/ld.lld: error: cannot open crtend.o: No such file or directory
I found crtbegin.o and crtend.o in "/home/dev/ara/eb/adaptivecore/sdk/custom/qemu-arm64/2.8.0/sysroots/cortexa57-wrs-linux/usr/lib64/aarch64-wrs-linux/10.2.0/"

[12:46:05.0695] <tcampbell>
do you need a target of `aarch64-wrs-linux`? I'm not very familiar with what the structure of sysroots and target-triples needs to be

[12:47:11.0331] <tcampbell>
my aarch64 use cases are just targetting aarch64-linux-gnu and then running it on android hardware

[12:48:45.0824] <ewang21>
> <@tcampbell:mozilla.org> my aarch64 use cases are just targetting aarch64-linux-gnu and then running it on android hardware

It has the same errors:
DEBUG: /usr/bin/ld.lld: error: cannot open crtbegin.o: No such file or directory
DEBUG: /usr/bin/ld.lld: error: unable to find library -lgcc
DEBUG: /usr/bin/ld.lld: error: unable to find library -lgcc
DEBUG: /usr/bin/ld.lld: error: cannot open crtend.o: No such file or directory
DEBUG: clang: error: linker command failed with exit code 1 (use -v to see invocation)


[12:49:24.0604] <tcampbell>
your toolchain provider might have ideas, I'm not sure how they configured the compiler when it was built

[12:52:10.0987] <davidj361>
how do I convert a class instance passed and instantiated as a `JS::RootedValue` into a `JS::HandleObject` for `JS_CallFunctionName`? Trying to see if I can call a class function by a string.

[12:53:00.0185] <ewang21>
> <@tcampbell:mozilla.org> your toolchain provider might have ideas, I'm not sure how they configured the compiler when it was built

Yes. I have to cross-compile by the toolchain of this container. If I use my own toolchain to build the lib for project integration, there should be compatibility issues.

[12:54:29.0871] <arai>
davidj361: if you have `JS::RootedValue v`, `v.toObject()` is `JSObject&`, and you can create `JS::RootedObject` by `JS::RootedObject obj(cx, &v.toObject());` and `JS::RootedObject` is implicitly convertible to `JS::HandleObject`

[12:54:42.0333] <arai>
so, pass `obj`

[12:55:33.0914] <tcampbell>
note that `.toObject()` will crash if what you passed isn't an object, so in general you'd also check for `isObject` before doing `toObject`

[13:27:31.0408] <chris_j>
Hello.  I am trying to build Spider Monkey Engine but the ./mach build is using C++17, is there a command to switch it to use C++19?

[13:36:46.0011] <chris_j>
 * Hello.  I am trying to build Spider Monkey Engine but the ./mach build is using C++17, is there a command to switch it to use C++20?

[13:59:24.0142] <arai>
bug 1768116 is still open, so I suppose it's not yet compatible with c++20 maybe?

[13:59:25.0886] <botzilla>
https://bugzil.la/1768116 — NEW (nobody) — [meta] Compile as C++20

[14:01:14.0685] <chris_j>
https://firefox-source-docs.mozilla.org/setup/windows_build.html#building-firefox-on-windows

[14:01:17.0179] <chris_j>
im following this

[14:01:32.0791] <chris_j>
```1. System preparation¶
1.1 Install Visual Studio Build Tools¶
Download and install the Build Tools for Visual Studio 2022. If you have a full install of Visual Studio (Community/Professional/Enterprise), that is also supported. Ensure you’ve checked the following items for installation:

In the Workloads tab:
Desktop development with C++.

In the Individual components tab:
MSVC v143 - VS 2022 C++ x64/x86 build tools.

Windows 10 SDK (at least 10.0.19041.0).

C++ ATL for v143 build tools (x86 and x64).```

[14:02:25.0215] <chris_j>
This says I need to use C++20, but its not yet supported?  Im confused

[14:03:16.0428] <arai>
the document doesn't say c++20

[14:04:00.0282] <chris_j>
Ah okay, so then maybe my problem is not related to that.

[14:04:24.0186] <arai>
what's the problem you observed?

[14:04:26.0300] <chris_j>
``` 0:09.59 In file included from C:/mozilla-source/mozilla-unified/mozglue/misc/WindowsMapRemoteView.cpp:12:
 0:09.59 C:/PROGRA~2/WI3CF2~1/10/include/10.0.19041.0/um\winternl.h(156,5): error: unknown type name 'PLDR_SERVICE_TAG_RECORD'```

[14:04:39.0251] <chris_j>
errors inside winternl.h

[14:05:37.0203] <chris_j>
is there a way to change win10 sdk to a newer version?

[14:06:29.0430] <arai>
did you install VisualStudio first time for building Firefox, or have you been using it?

[14:06:48.0729] <chris_j>
Not the first time, i have older versions of visual studio

[14:07:11.0068] <arai>
what version(s) of VisualStudio do you have right now?

[14:07:36.0198] <chris_j>
19 and 22

[14:10:24.0335] <arai>
hm, then it should work.  let me check some.  also, people in #build:mozilla.org room would know better

[14:10:52.0026] <chris_j>
okay no issues, its possible i somehow messed up my winternl, so ill just redownload the sdk

[14:16:53.0595] <arai>
lines around winternl.h:156 is the definition of `PLDR_SERVICE_TAG_RECORD` type alias itself

[14:17:32.0044] <arai>
so, the error itself is very strange

[14:18:01.0349] <chris_j>
yah any error from the sdk is strange, so i must have done something to it by accident.

[14:18:07.0299] <arai>
try checking the file and see what's written there in your file

[14:18:21.0159] <chris_j>
im already reinstalling the sdk :P

[14:21:44.0650] <chris_j>
ha, that was it

[14:21:54.0653] <chris_j>
okay thanks for the help

[14:22:07.0700] <arai>
my pleasure :)


2022-08-25
[07:16:35.0325] <davidj361>
for `static bool BindableFunc(JSContext* cx, unsigned argc, JS::Value* vp) {`
How do you construct an args array? Could I just pass a `JS::RootedVector<JS::Value>`?

[07:17:27.0894] <arai>
do you mean you want to call the function directly from C++ ?

[07:17:44.0067] <arai>
(without going through JS API?

[07:19:02.0106] <davidj361>
yeah, just want to pass a `null, "functionName"` as vp in BindableFunc

[07:19:07.0392] <davidj361>
 * yeah, just want to pass a `null, "functionName"` as vp in BindableFunc from C++

[07:19:16.0638] <arai>
the parameter array there expects some specific layout for input and output, and I think it's better avoid doing that manually unless that's really necessary

[07:19:24.0213] <arai>
so, usually, it's better having 2 functions

[07:19:47.0263] <arai>
one with `(JSContext* cx, unsigned argc, JS::Value* vp)` parameters, for providing to JSAPI

[07:20:16.0847] <davidj361>
i wanted to avoid code duplication for some illustrative examples, but it doesn't matter I suppose

[07:20:19.0684] <arai>
and other receives each actual parameter separately, and call it from `(JSContext* cx, unsigned argc, JS::Value* vp)`-variant and anywhere you want to call directly

[07:20:26.0358] <arai>
yeah, no code duplication

[07:20:33.0194] <arai>
just add a wrapper for JSAPI

[07:20:52.0575] <arai>
let me look for example

[07:22:10.0264] <arai>
here [js::str_charCodeAt_impl](https://searchfox.org/mozilla-central/rev/30ac44262374be08ccd4262ee36f0716152868d3/js/src/builtin/String.cpp#1614-1666)

[07:22:20.0895] <arai>
`str_charCodeAt` is the function that's callable from JSAPI

[07:22:26.0810] <arai>
that follows the caling convension

[07:22:33.0435] <arai>
 * that follows the calling convension

[07:22:41.0339] <arai>
and `str_charCodeAt_impl` is the implementation

[07:23:12.0672] <arai>
(you can ignore the most part of `str_charCodeAt`'s special handling,

[07:24:04.0944] <arai>
anyway, `str_charCodeAt` receives the parameter as `argc+vp`, and convert it to `CallArgs`, and extract each parameter from it, and call `str_charCodeAt_impl`

[07:24:50.0008] <arai>
`str_charCodeAt_impl` receives each parameter separately, with more specialized types, and performs the actual operation, and returns the value as out-parameter

[07:25:54.0635] <arai>
so, if you want to call the function from C++, you can call `str_charCodeAt_impl`, passing each parameter

[07:26:48.0901] <arai>
 * so, if you want to call the function from C++, you can call `str_charCodeAt_impl`, passing each parameter separately

[07:27:26.0476] <davidj361>
i'm confused, I just wanted to construct a `vp` manually to pass `null` and `"myString"`

[07:28:24.0249] <davidj361>
ah it doesn't matter, i'll just code duplicate for now to use the same code logic from the `BindableFunc`

[07:28:36.0690] <arai>
don't try to construct `vp` manually

[07:28:58.0388] <davidj361>
yeah, i'll avoid it. thank you for the help

[07:30:52.0342] <arai>
what you need is to move the actual operation of `BindableFunc` into separate function, and let it receive the actual parameters, and call it from `BindableFunc`, and anywhere you want to call the function directly from C++

[07:31:14.0629] <davidj361>
yeah i see what you're saying, use a helper free function. I wasn't sure what you meant until now

[12:23:33.0239] <pie_>
Hi folks, is it appropriate to ask here about GNOME's gjs that is based on spidermonkey? I don't think my questions are necessarily specific to GJS but to spidermonkey. Though GJS does wrap spidermonkey and that may be relevant.

[12:23:39.0824] <pie_>
I'd like to do something a bit funky;

[12:23:59.0578] <pie_>
I want to attach to gnome-shell with gdb, and then dispatch some javascript code to the js engine.

[12:24:21.0826] <pie_>
 * I want to attach to gnome-shell with gdb, and then dispatch some javascript code to the js engine, and since I'm not familiar with js engine internals, I hope it's not that hard, and I'd like some help with this.

[12:24:56.0070] <pie_>
The normal way to call gjs is described here: http://helgo.net/simon/introspection-tutorial/stepthree.xhtml

[12:25:14.0770] <pie_>
It seems to be two function invocations; one to get a context, and another that you pass your code to.

[12:26:01.0911] <pie_>
I'm somewhat familiar with low level things like this, but not very  - I don't know if there will be reentrancy issues, or if there is a thread safe way to just queue up some js code to run.

[12:26:22.0221] <ptomato>
this is probably not the place where you'll get the most help with GJS's API, but I can answer that

[12:26:47.0248] <pie_>
Thanks! Ideally I want to do the minimum amount of work to just flip a single boolean in this case.

[12:27:33.0328] <pie_>
It may be sufficient to actually do something with the GObject introspection API in that case, but thats an alternative path that I havent looked too deeply into yet.

[12:27:50.0941] <pie_>
If it's not hard to inject JS, than this approach would be a lot more flexible.

[12:30:29.0672] <ptomato>
nobody has tried this that I know of, but I'd guess that `call gjs_context_eval(gjs_context_get_current(), "myBoolean = true;", -1, "<injected>", NULL, NULL)` might work

[12:30:52.0088] <pie_>
Haha yeah I mean it's a weird thing to do.

[12:31:13.0081] <pie_>
 * Haha yeah I mean it's normally a weird thing to do with modern systems.

[12:31:46.0136] <pie_>
(not sure about old systems, but something something lisp)

[12:31:58.0427] <pie_>
What I'm actually trying to work around it this https://askubuntu.com/questions/1412130/dbus-calls-to-gnome-shell-dont-work-under-ubuntu-22-04

[12:32:19.0405] <pie_>
I want to toggle that `global.context.unsafe_mode`  mode variable.

[12:32:29.0634] <pie_>
After that I can pass code to their Eval thing over dbus

[12:33:02.0643] <pie_>
It seems kind of dumb to do this given that the security context doesn't change but idk. Maybe it's designed for systems where you cant ptrace your own processes? :P

[12:33:15.0705] <pie_>
(I just find it frustrating)

[12:33:37.0732] <pie_>
> <@pchimento:igalia.com> nobody has tried this that I know of, but I'd guess that `call gjs_context_eval(gjs_context_get_current(), "myBoolean = true;", -1, "<injected>", NULL, NULL)` might work

Do I need to worry about calling this on the right thread or something?

[12:33:54.0308] <ptomato>
yes

[12:34:03.0661] <pie_>
> <@jcie74:matrix.org> (I just find it frustrating)

There doesnt seem to be any way to talk to gnome-shell over the cli anymore.

[12:34:21.0432] <pie_>
> <@jcie74:matrix.org> Do I need to worry about calling this on the right thread or something?

You have to tell me about these things :) I'm not /that/ good.

[12:34:46.0527] <pie_>
This is what I can see:
```
(gdb) i th
  Id   Target Id                                             Frame 
* 1    Thread 0x7fe90452c2c0 (LWP 3671771) ".gnome-shell-wr" 0x00007fe90bd71c89 in __GI___poll (fds=0x5f42d40, nfds=14, timeout=15552) at ../sysdeps/unix/sysv/linux/poll.c:29
  2    Thread 0x7fe904528640 (LWP 3671794) "gmain"           0x00007fe90bd71c89 in __GI___poll (fds=0x1a93bc0, nfds=2, timeout=3996) at ../sysdeps/unix/sysv/linux/poll.c:29
  3    Thread 0x7fe903cde640 (LWP 3671795) "dconf worker"    0x00007fe90bd71c89 in __GI___poll (fds=0x1b699b0, nfds=1, timeout=-1) at ../sysdeps/unix/sysv/linux/poll.c:29
  4    Thread 0x7fe903431640 (LWP 3671796) "gdbus"           0x00007fe90bd71c89 in __GI___poll (fds=0x7fe8e80122b0, nfds=3, timeout=-1) at ../sysdeps/unix/sysv/linux/poll.c:29
  5    Thread 0x7fe901278640 (LWP 3671802) "gnome-s:disk$0"  0x00007fe90b245cf5 in __futex_abstimed_wait_common64 (futex_word=futex_word@entry=0x1af0898, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, 
    private=private@entry=0, cancel=cancel@entry=true) at ../sysdeps/nptl/futex-internal.c:74
  6    Thread 0x7fe900a77640 (LWP 3671803) "gnome-shel:sh0"  0x00007fe90b245cf5 in __futex_abstimed_wait_common64 (futex_word=futex_word@entry=0x1c18e08, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, 
    private=private@entry=0, cancel=cancel@entry=true) at ../sysdeps/nptl/futex-internal.c:74
  7    Thread 0x7fe8ece05640 (LWP 3671804) "gnome-shel:sh1"  0x00007fe90b245cf5 in __futex_abstimed_wait_common64 (futex_word=futex_word@entry=0x1c18e08, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, 
    private=private@entry=0, cancel=cancel@entry=true) at ../sysdeps/nptl/futex-internal.c:74
  8    Thread 0x7fe8d159b640 (LWP 3671805) "gnome-shel:sh2"  0x00007fe90b245cf5 in __futex_abstimed_wait_common64 (futex_word=futex_word@entry=0x1c18e08, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, 
    private=private@entry=0, cancel=cancel@entry=true) at ../sysdeps/nptl/futex-internal.c:74
  9    Thread 0x7fe8d0d9a640 (LWP 3671808) "gnome-sh:gdrv0"  0x00007fe90b245cf5 in __futex_abstimed_wait_common64 (futex_word=futex_word@entry=0x1c73458, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, 
    private=private@entry=0, cancel=cancel@entry=true) at ../sysdeps/nptl/futex-internal.c:74
  10   Thread 0x7fe8ec204640 (LWP 3671826) "JS Helper"       0x00007fe90b245cf5 in __futex_abstimed_wait_common64 (futex_word=futex_word@entry=0x1ab5fb8, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, 
    private=private@entry=0, cancel=cancel@entry=true) at ../sysdeps/nptl/futex-internal.c:74
  11   Thread 0x7fe8d0319640 (LWP 3671827) "JS Helper"       0x00007fe90b245cf5 in __futex_abstimed_wait_common64 (futex_word=futex_word@entry=0x1ab5fb8, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, 
    private=private@entry=0, cancel=cancel@entry=true) at ../sysdeps/nptl/futex-internal.c:74
  12   Thread 0x7fe8bb7fe640 (LWP 3671828) "JS Helper"       0x00007fe90b245cf5 in __futex_abstimed_wait_common64 (futex_word=futex_word@entry=0x1ab5fb8, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, 
    private=private@entry=0, cancel=cancel@entry=true) at ../sysdeps/nptl/futex-internal.c:74
  13   Thread 0x7fe8bb5ff640 (LWP 3671829) "JS Helper"       0x00007fe90b245cf5 in __futex_abstimed_wait_common64 (futex_word=futex_word@entry=0x1ab5fb8, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, 
    private=private@entry=0, cancel=cancel@entry=true) at ../sysdeps/nptl/futex-internal.c:74

```

[12:36:15.0921] <ptomato>
it's probably "gmain", but it's hard to tell from that output

[12:36:33.0416] <pie_>
Is there any info I can get that will help?

[12:36:46.0997] <pie_>
I don't have debug symbols but I will see if I can get some backtraces.

[12:39:21.0065] <pie_>
```
(gdb) thr 10                                                                                                                                                                                                                                  
[Switching to thread 10 (Thread 0x7f54a4319640 (LWP 3745835))]                                                                                                                                                                                                  
(gdb) bt                                                                                                               
#0  0x00007f54e4024cf5 in __futex_abstimed_wait_common64 (futex_word=futex_word@entry=0xc46fbc, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, private=private@entry=0, cancel=cancel@entry=true)
    at ../sysdeps/nptl/futex-internal.c:74
#1  0x00007f54e4024d4b in __GI___futex_abstimed_wait_cancelable64 (futex_word=futex_word@entry=0xc46fbc, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, private=private@entry=0)
    at ../sysdeps/nptl/futex-internal.c:123                                                                                                                                                                                                   
#2  0x00007f54e401ec22 in __pthread_cond_wait_common (abstime=0x0, clockid=0, mutex=0xc46f38, cond=0xc46f90) at pthread_cond_wait.c:504
#3  __pthread_cond_wait (cond=0xc46f90, mutex=0xc46f38) at pthread_cond_wait.c:619
#4  0x00007f54e36c5f27 in mozilla::detail::ConditionVariableImpl::wait(mozilla::detail::MutexImpl&) () from /nix/store/jbd1lfwfac40qcxvxfz1k2bc925r3qmw-spidermonkey-78.15.0/lib/libmozjs-78.so
#5  0x00007f54e36c6108 in mozilla::detail::ConditionVariableImpl::wait_for(mozilla::detail::MutexImpl&, mozilla::BaseTimeDuration<mozilla::TimeDurationValueCalculator> const&) ()                                               
   from /nix/store/jbd1lfwfac40qcxvxfz1k2bc925r3qmw-spidermonkey-78.15.0/lib/libmozjs-78.so
#6  0x00007f54e2f40495 in js::HelperThread::threadLoop() () from /nix/store/jbd1lfwfac40qcxvxfz1k2bc925r3qmw-spidermonkey-78.15.0/lib/libmozjs-78.so                                                            
#7  0x00007f54e2f40534 in js::HelperThread::ThreadMain(void*) () from /nix/store/jbd1lfwfac40qcxvxfz1k2bc925r3qmw-spidermonkey-78.15.0/lib/libmozjs-78.so
#8  0x00007f54e2f3c055 in js::detail::ThreadTrampoline<void (&)(void*), js::HelperThread*>::Start(void*) () from /nix/store/jbd1lfwfac40qcxvxfz1k2bc925r3qmw-spidermonkey-78.15.0/lib/libmozjs-78.so
#9  0x00007f54e4018d40 in start_thread (arg=0x7f54a4319640) at pthread_create.c:481
#10 0x00007f54e4b5c03f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95
```

[12:39:55.0563] <pie_>
```
(gdb) thr 2                                                                                                            
[Switching to thread 2 (Thread 0x7f54dd307640 (LWP 3745803))]                                                                                           
(gdb) bt                                                                                                                                                                                                                                      
#0  0x00007f54e4b50c89 in __GI___poll (fds=0xc24bc0, nfds=2, timeout=3996) at ../sysdeps/unix/sysv/linux/poll.c:29
#1  0x00007f54e5966d4e in g_main_context_poll (priority=<optimized out>, n_fds=2, fds=0xc24bc0, timeout=<optimized out>, context=0xc4f710) at ../glib/gmain.c:4478
#2  g_main_context_iterate (context=context@entry=0xc4f710, block=block@entry=1, dispatch=dispatch@entry=1, self=<optimized out>) at ../glib/gmain.c:4170
#3  0x00007f54e5966e6f in g_main_context_iteration (context=0xc4f710, may_block=may_block@entry=1) at ../glib/gmain.c:4240                                                                                                       
#4  0x00007f54e5966ec1 in glib_worker_main (data=<optimized out>) at ../glib/gmain.c:6140
#5  0x00007f54e5990e0d in g_thread_proxy (data=0xc35f60) at ../glib/gthread.c:827                                                                                                                                                             
#6  0x00007f54e4018d40 in start_thread (arg=0x7f54dd307640) at pthread_create.c:481
#7  0x00007f54e4b5c03f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95     
```

[12:39:55.0570] <ptomato>
well it's definitely not any of the ones labeled "JS Helper", those are created by spidermonkey

[12:40:02.0551] <pie_>
Ah ok

[12:40:33.0685] <ptomato>
I mean it's likely just easier to try the "gmain" thread and see what happens 🤷

[12:41:00.0126] <pie_>
Ok, I think when I was on thread 1 I crashed it, but I don't know if thats an issue with what I was trying to call, or with the call method to start with

[12:41:24.0298] <ptomato>
#gnome-shell:gnome.org would be a good place to get more info on what the threads are for

[12:42:15.0659] <ptomato>
it's either 1 or 2 and so if 1 didn't work, I'd guess 2

[12:43:56.0677] <pie_>
```
(gdb) call (void*)gjs_context_eval((void*)gjs_context_get_current(), "global.context.unsafe_mode = true", -1, "<injected>", 0, 0)

Thread 2 "gmain" received signal SIGSEGV, Segmentation fault.
0x00007ff43bcc4bc3 in js::AutoClearTypeInferenceStateOnOOM::AutoClearTypeInferenceStateOnOOM(JS::Zone*) [clone .cold] () from /nix/store/jbd1lfwfac40qcxvxfz1k2bc925r3qmw-spidermonkey-78.15.0/lib/libmozjs-78.so
The program being debugged was signaled while in a function called from GDB.
GDB remains in the frame where the signal was received.
To change this behavior use "set unwindonsignal on".
Evaluation of the expression containing the function
(gjs_context_eval) will be abandoned.
When the function is done executing, GDB will silently stop.

```

[12:44:30.0972] <pie_>
I don't know if those void* casts are safe, I did it because it was complaining about not knowing return types (no debug symbols).

[12:45:00.0413] <ptomato>
those should be no problem

[12:46:10.0770] <ptomato>
yeah, no guarantees that this will work in the first place

[12:46:31.0277] <pie_>
It might need some massaging, problem is I'm not sure what I need to massage.

[12:46:51.0055] <pie_>
Can I start a new ("clean") thread and dispatch via a thread safe api or something?

[12:47:44.0324] <pie_>
Not sure about the terminology but I imagine if we use it like this we are expecting something that is reentrant.

[12:50:23.0169] <pie_>
*we expect to be running is code that is reentrant

[12:50:48.0522] <pie_>
If the symols are accessible and it makes sense we could also just call some spidermonkey api directly?

[12:51:11.0011] <pie_>
 * If the symols are accessible and it makes sense we could also call some spidermonkey api directly.

[12:51:14.0504] <ptomato>
no, there isn't an API that lets you mess with JSContext from an arbitrary thread

[12:51:51.0248] <ptomato>
you could call JS::Evaluate directly, but it'll be much harder to set up from a GDB prompt

[12:52:05.0594] <ptomato>
that's why I suggested `gjs_context_eval`

[12:52:40.0784] <pie_>
gjs_context new seems to be just doing some gobject magic
https://gitlab.gnome.org/GNOME/gjs/-/blob/master/gjs/context.cpp#L818
https://gitlab.gnome.org/GNOME/gjs/-/blob/master/gjs/context.h#L40

[12:52:47.0534] <pie_>
 * gjs\_context\_new seems to be just doing some gobject magic
https://gitlab.gnome.org/GNOME/gjs/-/blob/master/gjs/context.cpp#L818
https://gitlab.gnome.org/GNOME/gjs/-/blob/master/gjs/context.h#L40

[12:54:17.0136] <pie_>
Err no I think I totally misread that.

[13:16:15.0615] <ptomato>
gjs_context_new is not what you want; it'll create a new JSContext which won't even have this variable that you want to manipulate

[13:17:04.0026] <pie_>
yeah Im slowly learning stuff, I just figured that out while typing this;

[13:18:44.0589] <pie_>
Ok so getting the current context does work
```
(gdb) call (void*)gjs_context_get_current()
[Thread 0x7f133a814640 (LWP 3802134) exited]
$2 = (void *) 0x14fc1f0
```

but creating a new one (not sure if this is something I should do, i just noticed above that you get the current context instead of a new one)

```
(gdb) call (void*)gjs_context_new()
[New Thread 0x7f133a814640 (LWP 3807920)]

Thread 2 "gmain" received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:49
49      ../sysdeps/unix/sysv/linux/raise.c: No such file or directory.
The program being debugged was signaled while in a function called from GDB.
GDB remains in the frame where the signal was received.

To change this behavior use "set unwindonsignal on".
Evaluation of the expression containing the function
(gjs_context_new) will be abandoned.
When the function is done executing, GDB will silently stop.
(gdb) bt
#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:49
#1  0x00007f13b2c36533 in __GI_abort () at abort.c:79
#2  0x00007f13b3ae0ddc in g_assertion_message (domain=<optimized out>, file=0x7f13b322eef4 "../gjs/context.cpp", line=<optimized out>, func=<optimized out>, message=<optimized out>) at ../glib/gtestutils.c:3223
#3  0x00007f13b3b3ff3b in g_assertion_message_expr (domain=0x7f13b32240cb "Gjs", file=0x7f13b322eef4 "../gjs/context.cpp", line=1566, func=0x7f13b322f668 "void gjs_context_make_current(GjsContext*)", expr=<optimized out>)
    at ../glib/gtestutils.c:3249
#4  0x00007f13b31e783e in gjs_context_init(_GjsContext*) () from /nix/store/m9y268hk5l5gsla39w8n26sv6kjlb60n-gjs-1.70.1/lib/libgjs.so.0
#5  0x00007f13b3c2e61a in g_type_create_instance (type=<optimized out>) at ../gobject/gtype.c:1929
#6  0x00007f13b3c14ca5 in g_object_new_internal (class=class@entry=0x14fb6e0, params=params@entry=0x0, n_params=n_params@entry=0) at ../gobject/gobject.c:1939
#7  0x00007f13b3c1622d in g_object_new_with_properties (object_type=22001136, n_properties=0, names=names@entry=0x0, values=values@entry=0x0) at ../gobject/gobject.c:2108
#8  0x00007f13b3c16be1 in g_object_new (object_type=<optimized out>, first_property_name=<optimized out>) at ../gobject/gobject.c:1779
#9  <function called from gdb>
#10 0x00007f13b2d00c89 in __GI___poll (fds=0x123ebc0, nfds=2, timeout=3872) at ../sysdeps/unix/sysv/linux/poll.c:29
#11 0x00007f13b3b16d4e in g_main_context_poll (priority=<optimized out>, n_fds=2, fds=0x123ebc0, timeout=<optimized out>, context=0x1269710) at ../glib/gmain.c:4478
#12 g_main_context_iterate (context=context@entry=0x1269710, block=block@entry=1, dispatch=dispatch@entry=1, self=<optimized out>) at ../glib/gmain.c:4170
#13 0x00007f13b3b16e6f in g_main_context_iteration (context=0x1269710, may_block=may_block@entry=1) at ../glib/gmain.c:4240
#14 0x00007f13b3b16ec1 in glib_worker_main (data=<optimized out>) at ../glib/gmain.c:6140
#15 0x00007f13b3b40e0d in g_thread_proxy (data=0x124ff60) at ../glib/gthread.c:827
#16 0x00007f13b21c8d40 in start_thread (arg=0x7f13ab4b7640) at pthread_create.c:481
#17 0x00007f13b2d0c03f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

(gdb) fr 4
#4  0x00007f13b31e783e in gjs_context_init(_GjsContext*) () from /nix/store/m9y268hk5l5gsla39w8n26sv6kjlb60n-gjs-1.70.1/lib/libgjs.so.0
(gdb) disas
Dump of assembler code for function _ZL16gjs_context_initP11_GjsContext:
   0x00007f13b31e7800 <+0>:     push   %rbx
   0x00007f13b31e7801 <+1>:     mov    %rdi,%rbx
   0x00007f13b31e7804 <+4>:     call   0x7f13b3222ea0 <_Z12gjs_log_initv>
   0x00007f13b31e7809 <+9>:     test   %rbx,%rbx
   0x00007f13b31e780c <+12>:    je     0x7f13b31e7840 <_ZL16gjs_context_initP11_GjsContext+64>
   0x00007f13b31e780e <+14>:    cmpq   $0x0,0xbe3d2(%rip)        # 0x7f13b32a5be8 <_ZL15current_context>
   0x00007f13b31e7816 <+22>:    je     0x7f13b31e7840 <_ZL16gjs_context_initP11_GjsContext+64>
   0x00007f13b31e7818 <+24>:    lea    0x47e19(%rip),%r8        # 0x7f13b322f638
   0x00007f13b31e781f <+31>:    lea    0x47e42(%rip),%rcx        # 0x7f13b322f668
   0x00007f13b31e7826 <+38>:    mov    $0x61e,%edx
   0x00007f13b31e782b <+43>:    lea    0x476c2(%rip),%rsi        # 0x7f13b322eef4
   0x00007f13b31e7832 <+50>:    lea    0x3c892(%rip),%rdi        # 0x7f13b32240cb
   0x00007f13b31e7839 <+57>:    call   0x7f13b3193430 <g_assertion_message_expr@plt>
=> 0x00007f13b31e783e <+62>:    xchg   %ax,%ax
   0x00007f13b31e7840 <+64>:    mov    %rbx,0xbe3a1(%rip)        # 0x7f13b32a5be8 <_ZL15current_context>
   0x00007f13b31e7847 <+71>:    pop    %rbx
   0x00007f13b31e7848 <+72>:    ret
End of assembler dump.

```
https://gitlab.gnome.org/GNOME/gjs/-/blob/master/gjs/context.cpp#L1674


[13:19:03.0440] <pie_>
 * Ok so getting the current context does work

```
(gdb) call (void*)gjs_context_get_current()
[Thread 0x7f133a814640 (LWP 3802134) exited]
$2 = (void *) 0x14fc1f0
```

but creating a new one does not (not sure if this is something I should do, i just noticed above that you get the current context instead of a new one)

```
(gdb) call (void*)gjs_context_new()
[New Thread 0x7f133a814640 (LWP 3807920)]

Thread 2 "gmain" received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:49
49      ../sysdeps/unix/sysv/linux/raise.c: No such file or directory.
The program being debugged was signaled while in a function called from GDB.
GDB remains in the frame where the signal was received.

To change this behavior use "set unwindonsignal on".
Evaluation of the expression containing the function
(gjs_context_new) will be abandoned.
When the function is done executing, GDB will silently stop.
(gdb) bt
#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:49
#1  0x00007f13b2c36533 in __GI_abort () at abort.c:79
#2  0x00007f13b3ae0ddc in g_assertion_message (domain=<optimized out>, file=0x7f13b322eef4 "../gjs/context.cpp", line=<optimized out>, func=<optimized out>, message=<optimized out>) at ../glib/gtestutils.c:3223
#3  0x00007f13b3b3ff3b in g_assertion_message_expr (domain=0x7f13b32240cb "Gjs", file=0x7f13b322eef4 "../gjs/context.cpp", line=1566, func=0x7f13b322f668 "void gjs_context_make_current(GjsContext*)", expr=<optimized out>)
    at ../glib/gtestutils.c:3249
#4  0x00007f13b31e783e in gjs_context_init(_GjsContext*) () from /nix/store/m9y268hk5l5gsla39w8n26sv6kjlb60n-gjs-1.70.1/lib/libgjs.so.0
#5  0x00007f13b3c2e61a in g_type_create_instance (type=<optimized out>) at ../gobject/gtype.c:1929
#6  0x00007f13b3c14ca5 in g_object_new_internal (class=class@entry=0x14fb6e0, params=params@entry=0x0, n_params=n_params@entry=0) at ../gobject/gobject.c:1939
#7  0x00007f13b3c1622d in g_object_new_with_properties (object_type=22001136, n_properties=0, names=names@entry=0x0, values=values@entry=0x0) at ../gobject/gobject.c:2108
#8  0x00007f13b3c16be1 in g_object_new (object_type=<optimized out>, first_property_name=<optimized out>) at ../gobject/gobject.c:1779
#9  <function called from gdb>
#10 0x00007f13b2d00c89 in __GI___poll (fds=0x123ebc0, nfds=2, timeout=3872) at ../sysdeps/unix/sysv/linux/poll.c:29
#11 0x00007f13b3b16d4e in g_main_context_poll (priority=<optimized out>, n_fds=2, fds=0x123ebc0, timeout=<optimized out>, context=0x1269710) at ../glib/gmain.c:4478
#12 g_main_context_iterate (context=context@entry=0x1269710, block=block@entry=1, dispatch=dispatch@entry=1, self=<optimized out>) at ../glib/gmain.c:4170
#13 0x00007f13b3b16e6f in g_main_context_iteration (context=0x1269710, may_block=may_block@entry=1) at ../glib/gmain.c:4240
#14 0x00007f13b3b16ec1 in glib_worker_main (data=<optimized out>) at ../glib/gmain.c:6140
#15 0x00007f13b3b40e0d in g_thread_proxy (data=0x124ff60) at ../glib/gthread.c:827
#16 0x00007f13b21c8d40 in start_thread (arg=0x7f13ab4b7640) at pthread_create.c:481
#17 0x00007f13b2d0c03f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

(gdb) fr 4
#4  0x00007f13b31e783e in gjs_context_init(_GjsContext*) () from /nix/store/m9y268hk5l5gsla39w8n26sv6kjlb60n-gjs-1.70.1/lib/libgjs.so.0
(gdb) disas
Dump of assembler code for function _ZL16gjs_context_initP11_GjsContext:
   0x00007f13b31e7800 <+0>:     push   %rbx
   0x00007f13b31e7801 <+1>:     mov    %rdi,%rbx
   0x00007f13b31e7804 <+4>:     call   0x7f13b3222ea0 <_Z12gjs_log_initv>
   0x00007f13b31e7809 <+9>:     test   %rbx,%rbx
   0x00007f13b31e780c <+12>:    je     0x7f13b31e7840 <_ZL16gjs_context_initP11_GjsContext+64>
   0x00007f13b31e780e <+14>:    cmpq   $0x0,0xbe3d2(%rip)        # 0x7f13b32a5be8 <_ZL15current_context>
   0x00007f13b31e7816 <+22>:    je     0x7f13b31e7840 <_ZL16gjs_context_initP11_GjsContext+64>
   0x00007f13b31e7818 <+24>:    lea    0x47e19(%rip),%r8        # 0x7f13b322f638
   0x00007f13b31e781f <+31>:    lea    0x47e42(%rip),%rcx        # 0x7f13b322f668
   0x00007f13b31e7826 <+38>:    mov    $0x61e,%edx
   0x00007f13b31e782b <+43>:    lea    0x476c2(%rip),%rsi        # 0x7f13b322eef4
   0x00007f13b31e7832 <+50>:    lea    0x3c892(%rip),%rdi        # 0x7f13b32240cb
   0x00007f13b31e7839 <+57>:    call   0x7f13b3193430 <g_assertion_message_expr@plt>
=> 0x00007f13b31e783e <+62>:    xchg   %ax,%ax
   0x00007f13b31e7840 <+64>:    mov    %rbx,0xbe3a1(%rip)        # 0x7f13b32a5be8 <_ZL15current_context>
   0x00007f13b31e7847 <+71>:    pop    %rbx
   0x00007f13b31e7848 <+72>:    ret
End of assembler dump.

```

https://gitlab.gnome.org/GNOME/gjs/-/blob/master/gjs/context.cpp#L1674

[13:20:07.0836] <pie_>
That seems like an odd place to segfault. - or am I misunderstanding what's happening?

[13:20:26.0111] <pie_>
Its segfaulting inside an assertion function?

[13:21:21.0163] <pie_>
(sidenote, testing this is rather obnoxious, I'm not using a vm and the nested gnome-shell session I'm running as recommended by the docs , is capturing the keyboard from some applications...)

[13:24:44.0770] <pie_>
That...doesn't look right?:
````
(gdb) call (void*)gjs_context_eval((void*)gjs_context_get_current(), "global.context.unsafe_mode = true", -1, "<injected>", 0, 0)                                                                                                    [13/1471]
[Thread 0x7f2b0ffff640 (LWP 3826132) exited]                                                                                                                                                                                                  
                                                                                                                                                                                                                                              
Thread 2 "gmain" received signal SIGSEGV, Segmentation fault.                                                                                                                                                                                 
0x00007f2b627c2bc3 in js::AutoClearTypeInferenceStateOnOOM::AutoClearTypeInferenceStateOnOOM(JS::Zone*) [clone .cold] () from /nix/store/jbd1lfwfac40qcxvxfz1k2bc925r3qmw-spidermonkey-78.15.0/lib/libmozjs-78.so                             
The program being debugged was signaled while in a function called from GDB.                                                                                                                                                                  
GDB remains in the frame where the signal was received.                                                                                                                                                                                       
To change this behavior use "set unwindonsignal on".
Evaluation of the expression containing the function
(gjs_context_eval) will be abandoned.
When the function is done executing, GDB will silently stop.
(gdb) bt
#0  0x00007f2b627c2bc3 in js::AutoClearTypeInferenceStateOnOOM::AutoClearTypeInferenceStateOnOOM(JS::Zone*) [clone .cold] () from /nix/store/jbd1lfwfac40qcxvxfz1k2bc925r3qmw-spidermonkey-78.15.0/lib/libmozjs-78.so
#1  0x00007f2b62a27068 in js::ObjectGroup::defaultNewGroup(JSContext*, JSClass const*, js::TaggedProto, JSObject*) () from /nix/store/jbd1lfwfac40qcxvxfz1k2bc925r3qmw-spidermonkey-78.15.0/lib/libmozjs-78.so
#2  0x00007f2b629e3451 in js::NewObjectWithClassProto(JSContext*, JSClass const*, JS::Handle<JSObject*>, js::gc::AllocKind, js::NewObjectKind) [clone .part.0] ()
   from /nix/store/jbd1lfwfac40qcxvxfz1k2bc925r3qmw-spidermonkey-78.15.0/lib/libmozjs-78.so
#3  0x00007f2b64a3fd79 in GjsContextPrivate::eval_with_scope(JS::Handle<JSObject*>, char const*, long, char const*, JS::MutableHandle<JS::Value>) [clone .localalias] ()
   from /nix/store/m9y268hk5l5gsla39w8n26sv6kjlb60n-gjs-1.70.1/lib/libgjs.so.0
#4  0x00007f2b64a3fefa in GjsContextPrivate::eval(char const*, long, char const*, int*, _GError**) [clone .localalias] () from /nix/store/m9y268hk5l5gsla39w8n26sv6kjlb60n-gjs-1.70.1/lib/libgjs.so.0
#5  0x00007f2b64a400a9 in gjs_context_eval () from /nix/store/m9y268hk5l5gsla39w8n26sv6kjlb60n-gjs-1.70.1/lib/libgjs.so.0
#6  <function called from gdb>
#7  0x00007f2b64554c89 in __GI___poll (fds=0x21d9bc0, nfds=2, timeout=3996) at ../sysdeps/unix/sysv/linux/poll.c:29
#8  0x00007f2b6536ad4e in g_main_context_poll (priority=<optimized out>, n_fds=2, fds=0x21d9bc0, timeout=<optimized out>, context=0x2204710) at ../glib/gmain.c:4478
#9  g_main_context_iterate (context=context@entry=0x2204710, block=block@entry=1, dispatch=dispatch@entry=1, self=<optimized out>) at ../glib/gmain.c:4170
#10 0x00007f2b6536ae6f in g_main_context_iteration (context=0x2204710, may_block=may_block@entry=1) at ../glib/gmain.c:4240
#11 0x00007f2b6536aec1 in glib_worker_main (data=<optimized out>) at ../glib/gmain.c:6140
#12 0x00007f2b65394e0d in g_thread_proxy (data=0x21eaf60) at ../glib/gthread.c:827
#13 0x00007f2b63a1cd40 in start_thread (arg=0x7f2b5cd0b640) at pthread_create.c:481
#14 0x00007f2b6456003f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95
(gdb) disas
Dump of assembler code for function _ZN2js32AutoClearTypeInferenceStateOnOOMC2EPN2JS4ZoneE.cold:
   0x00007f2b627c2bb2 <+0>:     mov    0xbf819f(%rip),%rax        # 0x7f2b633bad58
   0x00007f2b627c2bb9 <+7>:     lea    0xa08560(%rip),%rdx        # 0x7f2b631cb120
   0x00007f2b627c2bc0 <+14>:    mov    %rdx,(%rax)
=> 0x00007f2b627c2bc3 <+17>:    movl   $0x0,0x0
   0x00007f2b627c2bce <+28>:    ud2    
   0x00007f2b627c2bd0 <+30>:    mov    0xbf8181(%rip),%rax        # 0x7f2b633bad58
   0x00007f2b627c2bd7 <+37>:    lea    0xa0857a(%rip),%rcx        # 0x7f2b631cb158
   0x00007f2b627c2bde <+44>:    mov    %rcx,(%rax)
   0x00007f2b627c2be1 <+47>:    movl   $0x0,0x0
   0x00007f2b627c2bec <+58>:    ud2    
End of assembler dump.

```

[13:24:59.0873] <pie_>
`movl $0x0,0x0`?

[13:38:00.0035] <pie_>
Is that getting disassembled wrong? I dont think this involved any JIT? did it?

[13:38:16.0477] <pie_>
(Im not sure what a .cold is)

[13:39:29.0226] <pie_>
Why would there be an instruction that is basically equal to a segfault with no branches?

[13:40:04.0608] <pie_>
apparently ud2 "generated an invalid opcode"

[13:40:08.0649] <pie_>
 * apparently ud2 "generates an invalid opcode"

[13:40:21.0570] <pie_>
debug? hardening?

[13:42:25.0815] <pie_>
 * (Im not sure what a .cold is) - apparently its a gcc annotation for functions unlikely to be executed, and are optimized for size

[13:44:15.0072] <pie_>
 * (Im not sure what a .cold is) - edit: apparently its a gcc annotation for functions unlikely to be executed, and are optimized for size

[13:44:19.0255] <iain>
It's generally what you use for a controlled crash

[13:44:23.0128] <iain>
Like if an assertion fails

[13:45:18.0414] <pie_>
right, thats what I meant. Hm.

[13:45:22.0772] <pie_>
I'm having trouble finding the source of this function.

[13:45:31.0460] <iain>
https://searchfox.org/mozilla-esr78/source/js/src/vm/TypeInference.cpp#4597-4602

[13:45:39.0591] <pie_>
Oh thanks.

[13:45:47.0821] <pie_>
I tried searching central but I failed.

[13:46:02.0536] <iain>
TypeInference was removed when we moved from IonBuilder to WarpBuilder

[13:46:16.0129] <pie_>
Oh.

[13:46:19.0444] <iain>
https://hacks.mozilla.org/2020/11/warp-improved-js-performance-in-firefox-83/

[13:46:29.0327] <pie_>
```
AutoClearTypeInferenceStateOnOOM::AutoClearTypeInferenceStateOnOOM(Zone* zone)
    : zone(zone) {
  MOZ_RELEASE_ASSERT(CurrentThreadCanAccessZone(zone));
  MOZ_ASSERT(!TlsContext.get()->inUnsafeCallWithABI);
  zone->types.setSweepingTypes(true);
}
```

[13:46:37.0930] <pie_>
Well that's starting to make more sense.

[13:47:26.0798] <pie_>
Now I'm just not sure what to do about it. That heavily implies wrong thread?

[13:47:46.0411] <pie_>
Is w+x settable per thread?

[13:48:01.0517] <pie_>
No thats a memory region thing isn't it.

[13:48:12.0154] <iain>
Yeah

[13:49:05.0219] <pie_>
Is it possible that there isn't even a thread running that I need to hijack and I actually need to start something else first?

[13:49:05.0397] <iain>
Generally speaking, a JSContext belongs to a single thread

[13:49:22.0865] <pie_>
That makes sense I think, given that js engines are (uh?) single threaded.

[13:49:32.0055] <pie_>
- or at least the user facing side is.

[13:49:36.0143] <pie_>
 * \- or at least the user facing side is.

[13:49:52.0177] <pie_>
or is this more of a "python GIL" type of thing?

[13:50:24.0062] <iain>
JS execution is semantically single-threaded

[13:50:29.0534] <pie_>
yes that

[13:50:32.0340] <iain>
You can have worker threads that communicate via message passing

[13:50:47.0076] <pie_>
right. (I've never used that myself)

[13:50:48.0184] <iain>
And we have some helper threads to do things like background compilation

[13:50:56.0926] <pie_>
*nod*

[13:52:16.0564] <iain>
https://searchfox.org/mozilla-central/source/js/src/vm/JSContext.h#159-162

[13:52:53.0976] <iain>
"A JSContext encapsulates the thread local state used when using the JS runtime."

[13:53:30.0806] <iain>
So you can't just reach in and grab the context from another thread

[13:53:49.0574] <iain>
Most of the time we pass it around explicitly, but there are definitely some cases where we use thread-local storage to retrieve the context

[13:54:28.0235] <iain>
 * Most of the time we pass it around explicitly, but there are definitely [some cases](https://searchfox.org/mozilla-central/search?q=symbol:_ZN2js10TlsContextE&redirect=false) where we use thread-local storage to retrieve the context

[13:54:56.0314] <pie_>
ptomato: The thing is, I think _none_ of these looks like the right thread...

[13:55:05.0948] <pie_>
I feel like I'm missing something

[13:56:03.0162] <pie_>
Hm. What would be a good question to ask the system?

[13:56:22.0131] <pie_>
Maybe I can set a breakpoint on some js function and check what thread it's running on?

[13:56:59.0063] <pie_>
 * Maybe I can set a breakpoint on some gjs / spidermonkey function and check what thread it's running on?

[13:57:31.0077] <iain>
Something like `Interpret` could work: https://searchfox.org/mozilla-central/source/js/src/vm/Interpreter.cpp#356

[13:57:41.0299] <iain>
That will only be executed on the main JS thread

[13:57:43.0888] <pie_>
Is the engine in the helper threads?

[13:58:23.0562] <pie_>
because it would make _some_ sense architecturally if what's actually happening is that a new thread is spawned whenever some js code is run, and then dies afterwards

[13:58:31.0488] <pie_>
and thats why I can't hijack anything.

[13:58:57.0740] <pie_>
Well, that doesn1t make sense. - a thread must be able to spawn those, and that's what we are trying to hijack.

[13:59:19.0995] <iain>
The helper threads don't run JS code

[13:59:26.0351] <pie_>
Though they could be spawning the spawner :/ . IDK. This might be the point to ask upstream.

[13:59:56.0502] <pie_>
I havent figured out yet how they invoke gjs.

[14:46:40.0150] <pie_>
iain: ptomato OMG I think I got it! :D

[14:47:42.0587] <pie_>
more info in a sec.

[14:50:00.0364] <pie_>
Uh. OK this is really dumb. I may have neglected to try it on the only other thread that would have made sense, which is thread 1...

[14:50:53.0089] <pie_>
iain: your breakpoint suggestion helped, I basically confirmed that only thread 1 seemed to be running js:
```
Thread 1 ".gnome-shell-wr" hit Breakpoint 1, 0x00007f336dacbac0 in Interpret(JSContext*, js::RunState&) () from /nix/store/jbd1lfwfac40qcxvxfz1k2bc925r3qmw-spidermonkey-78.15.0/lib/libmozjs-78.so                                           
(gdb) c                                                                                                                                                                                                                                       
Continuing.                                                                                                            
                                                                                                                                                                                                                                              
Thread 1 ".gnome-shell-wr" hit Breakpoint 1, 0x00007f336dacbac0 in Interpret(JSContext*, js::RunState&) () from /nix/store/jbd1lfwfac40qcxvxfz1k2bc925r3qmw-spidermonkey-78.15.0/lib/libmozjs-78.so                                           
(gdb) c 100                                                                                                                                                                                                                                   
Will ignore next 99 crossings of breakpoint 1.  Continuing.                                  
                                                                                                                                                                                                                                              
Thread 1 ".gnome-shell-wr" hit Breakpoint 1, 0x00007f336dacbac0 in Interpret(JSContext*, js::RunState&) () from /nix/store/jbd1lfwfac40qcxvxfz1k2bc925r3qmw-spidermonkey-78.15.0/lib/libmozjs-78.so                                           
(gdb) cond 1  $_thread != 1                                                                                                                                                                                                                   
(gdb) c                                                                                                                                                                                                                                       
Continuing.                                                                                                                                                                                                                                   
^C                           
```

[14:51:19.0061] <pie_>
 * iain: your breakpoint suggestion helped, I basically confirmed that only thread 1 seemed to be running js:

```
(gdb) b Interpret                                                                                                      
Breakpoint 1 at 0x7f3337fb1840 (2 locations)       
Thread 1 ".gnome-shell-wr" hit Breakpoint 1, 0x00007f336dacbac0 in Interpret(JSContext*, js::RunState&) () from /nix/store/jbd1lfwfac40qcxvxfz1k2bc925r3qmw-spidermonkey-78.15.0/lib/libmozjs-78.so       
                                    
(gdb) c                                                                                                                                                                                                                                       
Continuing.                                                                                                            
                                                                                                                                                                                                                                              
Thread 1 ".gnome-shell-wr" hit Breakpoint 1, 0x00007f336dacbac0 in Interpret(JSContext*, js::RunState&) () from /nix/store/jbd1lfwfac40qcxvxfz1k2bc925r3qmw-spidermonkey-78.15.0/lib/libmozjs-78.so                                           
(gdb) c 100                                                                                                                                                                                                                                   
Will ignore next 99 crossings of breakpoint 1.  Continuing.                                  
                                                                                                                                                                                                                                              
Thread 1 ".gnome-shell-wr" hit Breakpoint 1, 0x00007f336dacbac0 in Interpret(JSContext*, js::RunState&) () from /nix/store/jbd1lfwfac40qcxvxfz1k2bc925r3qmw-spidermonkey-78.15.0/lib/libmozjs-78.so                                           
(gdb) cond 1  $_thread != 1                                                                                                                                                                                                                   
(gdb) c                                                                                                                                                                                                                                       
Continuing.                                                                                                                                                                                                                                   
^C                           
```

[14:51:54.0154] <pie_>
before that, I was trying to look around the code and figure out how they were running the js stuff, but I guess it was all just running on the main thread.

[14:54:14.0847] <pie_>
This is the first thing I got working:
```
(gdb) call (void*)gjs_context_eval((void*)_shell_global_get_gjs_context((void*)the_object), "global.context.unsafe_mode = true", -1, "<injected>", 0, 0)                                                                                      
[New Thread 0x7f33656ce640 (LWP 3962544)]                                                                                                                                                                                                     
$5 = (void *) 0x1       
```

at first I though the solution was that we were getting the wrong object, because they have some code that keeps a singleton around
https://github.com/GNOME/gnome-shell/blob/4a0cfbc5d6711cfce592d79cc62b89de8b86cb08/src/main.c#L179

but turns out ptomato's suggestion works just fine.

[14:54:32.0058] <pie_>
```
(gdb) call (void*)gjs_context_eval((void*)gjs_context_get_current(), "global.context.unsafe_mode = true", -1, "<injected>", 0, 0)                                                                                                             
[Thread 0x7f1e57fff640 (LWP 3968069) exited]                                                                                                                                                                                                  
[New Thread 0x7f1e57fff640 (LWP 3968968)]                                                                                                                                                                                                     
$6 = (void *) 0x1
```

[14:54:45.0441] <pie_>
So I think I just did a bunch of digging for the dumb reason of not trying it on the main thread I guess.


2022-08-26
[02:22:56.0428] <nbp>
> <@jcie74:matrix.org> I want to attach to gnome-shell with gdb, and then dispatch some javascript code to the js engine, and since I'm not familiar with js engine internals, I hope it's not that hard, and I'd like some help with this.

One trick used in Gecko, is to add a call to `Math.sin` and break on the equivalent symbol in spidermonkey.

[07:23:54.0974] <Mohamed Atef>
arai: I updated the patch.

[07:24:37.0654] <arai>
thanks! I'll look into it

[07:58:10.0834] <davidj361>
Is there a way to inspect passed JavaScript objects in C++ and print print out all the properties (member variables)?

[07:58:20.0124] <davidj361>
 * Is there a way to inspect passed JavaScript objects in C++ and print out all the properties (member variables)?

[07:59:00.0088] <davidj361>
Or do you need to know the property name ahead of time?

[07:59:34.0229] <arai>
if it's for debugging purpose, https://searchfox.org/mozilla-central/rev/8dd35cd8f5284fbaa506aab02fe42fc87efb249e/js/public/friend/DumpFunctions.h#87
```cpp
extern JS_PUBLIC_API void DumpObject(JSObject* obj);
```

[07:59:52.0976] <arai>
that prints the internal of the object

[08:06:25.0420] <davidj361>
Not sure how I could find this stuff on my own. Is it in the examples or github readme docs?

[08:08:03.0183] <davidj361>
Or is it more expected to read all the header files under `js/`?

[08:08:21.0813] <davidj361>
if I'm looking for a functionality

[08:09:45.0342] <davidj361>
 * Not sure how I could find this stuff on my own. Is it in the examples or (github readme docs)[https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/tree/esr91/docs]?

[08:10:08.0259] <davidj361>
 * Not sure how I could find this stuff on my own. Is it in the examples or c]?

[08:10:26.0755] <davidj361>
 * Not sure how I could find this stuff on my own. Is it in the examples or (github readme docs)[https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/tree/esr91/docs]?

[08:13:07.0142] <davidj361>
 * Not sure how I could find this stuff on my own. Is it in the examples or [github readme docs](https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/tree/esr91/docs)?

[08:16:42.0423] <davidj361>
 * if I'm looking for a functionality as a new user to SpiderMonkey JS API

[08:16:58.0435] <arai>
the example is very limited right now

[08:17:26.0626] <arai>
and yeah, please search through the public headers, or just ask here

[08:18:40.0393] <davidj361>
right, I was wondering because I didn't want to spam chat for every single question I have

[08:19:00.0587] <davidj361>
 * right, I was wondering because I didn't want to spam chat for every single question I have where you could easily look it up

[08:21:09.0521] <davidj361>
 * right, I was wondering because I didn't want to spam chat for every single question I have where you could easily look it up
as i'm a new user to the code base

[08:22:30.0038] <davidj361>
is there a way I can search for just header files on searchfox? `js\/.*\.h` in the path filter isn't cutting it

[08:22:58.0109] <arai>
js/public in the path would be sufficient

[08:23:18.0282] <arai>
there are only headers

[08:23:37.0957] <Bryan Thrall [:bthrall]>
Or ".h$" for the path filter

[08:23:40.0753] <davidj361>
but for esr68 I noticed `DumpObject` being in js/src <https://searchfox.org/mozilla-esr68/source/js/src/jsfriendapi.cpp>

[08:23:47.0602] <arai>
oh

[08:24:24.0281] <arai>
on older versions, many functions would still be in js/src/jsapi.h

[08:24:39.0159] <davidj361>
ah whatever, i'll just browse the source on my drive instead of the website

[08:24:50.0763] <Bryan Thrall [:bthrall]>
 * Or "js/**.h$" for the path filter

[08:24:55.0817] <arai>
and jsfriendapi.h maybe?

[08:26:09.0389] <arai>
so, searching through those 2 files would work?

[08:26:38.0986] <davidj361>
> <@bthrall:mozilla.org> Or "js/**.h$" for the path filter

I noticed with `.h$` that the results were cut off with no next page ability (since i didn't see any `js/` in the results)
So I don't trust the search for listing all .h files even with `js/**.h$`

[08:26:43.0278] <arai>
here's list of public headers https://searchfox.org/mozilla-esr68/source/js/src/moz.build#108

[08:27:00.0302] <arai>
the file lists with `EXPORTS*`

[08:35:22.0298] <Bryan Thrall [:bthrall]>
> <@davidj361:matrix.org> I noticed with `.h$` that the results were cut off with no next page ability (since i didn't see any `js/` in the results)
> So I don't trust the search for listing all .h files even with `js/**.h$`

Yeah, I realized I forgot to put the "js/**" 😊, sorry!

[08:44:13.0009] <Bryan Thrall [:bthrall]>
The SpiderMonkey helper threads are using `ErrorAllocator` (for example, [here](https://searchfox.org/mozilla-central/source/js/src/vm/JSScript.cpp#2085) ) while at the same time using `JSContext` as the `AllocPolicy` for types like Vector. Will mixing these allocators cause any problems? nbp or sfink perhaps you have an idea?

[08:47:20.0413] <Mohamed Atef>
https://bugzilla.mozilla.org/show_bug.cgi?id=1786819

[08:51:07.0062] <nbp>
Bryan Thrall [:bthrall]: Reading the code, it seems to matter if we were to track allocations [`updateMallocCounter`](https://searchfox.org/mozilla-central/search?q=updateMallocCounter&path=&case=true&regexp=false), or if we were interested in reporting OOM to a specific context with `onOutOfMemory`. So, I would say that probably not during the migration process from `JSContext` to `ErrorContext`

[08:51:28.0777] <nbp>
But that in general it would be better to have consistency.

[09:33:51.0206] <arai>
Bryan Thrall [:bthrall], Mohamed Atef :  sorry, I didn't notice the bug for XDR part is already filed and assigned

[09:37:30.0915] <Bryan Thrall [:bthrall]>
And I apologize for marking bug 1786117 duplicate without looking to see if there was any work done on it already

[09:37:32.0330] <botzilla>
https://bugzil.la/1786117 — RESOLVED (mohamedatef1698) — Use ErrorContext-variant of `ReportOutOfMemory` in Stencil XDR

[09:38:30.0723] <arai>
I'm leaning toward going with [bug 1786117](https://bugzilla.mozilla.org/show_bug.cgi?id=1786117) patch, with extra review.  does it sound good?

[09:39:35.0661] <arai>
 * I'm leaning toward going with [bug 1786117](https://bugzilla.mozilla.org/show_bug.cgi?id=1786117) patch, with extra review from Bryan Thrall [:bthrall] .  does it sound good?

[09:40:41.0382] <arai>
I'd like to avoid exposing `ErrorContext` to public header, at least for now

[09:41:56.0204] <Bryan Thrall [:bthrall]>
That is fine with me, I will review 1786117's changes

[09:42:06.0872] <arai>
thanks!

[09:53:38.0552] <Mohamed Atef>
> <@arai:mozilla.org> Bryan Thrall [:bthrall], Mohamed Atef :  sorry, I didn't notice the bug for XDR part is already filed and assigned

No problem.

[09:55:08.0600] <Mohamed Atef>
And I am sorry,  I saw bug 1783951 but i thought it's for another part. I should have mention it.


[09:55:11.0111] <botzilla>
https://bugzil.la/1783951 — ASSIGNED (bthrall) — Use ErrorContext variant of js::ReportOutOfMemory() when encoding/decoding Stencils

[09:56:12.0175] <Mohamed Atef>
> <@mohamed_atef:matrix.org> https://bugzilla.mozilla.org/show_bug.cgi?id=1786819

arai: what about this? 

[10:00:35.0070] <arai>
I haven't yet looked into the details of the oomTest case about how it should be solved or dependency with other bugs

[10:07:22.0512] <davidj361>
> <@arai:mozilla.org> if it's for debugging purpose, https://searchfox.org/mozilla-central/rev/8dd35cd8f5284fbaa506aab02fe42fc87efb249e/js/public/friend/DumpFunctions.h#87
> ```cpp
> extern JS_PUBLIC_API void DumpObject(JSObject* obj);
> ```

is there one where you can use the properties and values without needing to know the actual property name?

[10:10:19.0237] <arai>
maybe the issue simply disappear when we switch to `SystemAllocPolicy`

[10:11:25.0172] <arai>
and in that case, there's nothing to do in the bug

[10:11:47.0010] <arai>
davidj361: what's the actual use case, and what are the input and expected output?

[10:11:49.0767] <davidj361>
 * is there one where you can use the properties and values without needing to know the actual property name?
i.e. not just print them but interact with the properties

[10:12:35.0572] <davidj361>
if we have an arbitrary class
```js
var data = {
    "data": [
        {
            "MainId": 1111,
            "firstName": "Sherlock",
            "lastName": "Homes",
            "categories": [
                {
                    "CategoryID": 1,
                    "CategoryName": "Example"
                }
            ]
        },
        {
            "MainId": 122,
            "firstName": "James",
            "lastName": "Watson",
            "categories": [
                {
                    "CategoryID": 2,
                    "CategoryName": "Example2"
                }
            ]
        }
    ],
    "messages": [], // blank json
    "success": true // boolean value
}
``

[10:13:02.0499] <davidj361>
for example can I get all the categories without retrieving them without knowing the property names?

[10:13:09.0457] <davidj361>
 * for example can I get all the categories  without knowing the property names?

[10:13:12.0843] <davidj361>
 * for example can I get all the categories without knowing the property names?

[10:13:58.0574] <arai>
what are "the property names" ?

[10:14:18.0694] <arai>
can you provide some pseudo code that utilizes what you want?

[10:14:53.0897] <davidj361>
like can i get "categories" in `data` without having to write "getMemberVariable("categories")"

[10:15:48.0091] <davidj361>
could i iterate through all the member variables of the object, get its name, type, etc, without knowing ahead of time what it is?

[10:16:13.0630] <davidj361>
I don't mean solely to print for debugging, but interact with it like adding numbers, concatenating strings, etc

[10:16:25.0140] <Mohamed Atef>
Bug 1786834

[10:16:26.0917] <botzilla>
https://bugzil.la/1786834 — NEW (nobody) — Integrate SharedImmutableStringsCache into frontend context

[10:16:43.0530] <arai>
so, you want to walk through the object tree, right?

[10:16:50.0039] <davidj361>
yes

[10:20:28.0790] <arai>
Mohamed Atef: sorry I should've set the proper dependency.  the "frontend context" struct doesn't yet exist (or, it partially exists as `OffThreadErrorContext` but needs cleanup before adding more)

[10:21:49.0410] <jesup>
I'm getting an assertion js::GlobalHelperThreadState::cancelParseTask(): MOZ_ASSERT(task->kind == kind);   when loading a big WASM app.   
(rr) p kind
$2 = js::ParseTaskKind::ModuleStencil
(rr) p task->kind
$3 = js::ParseTaskKind::StencilDecode
Anything useful I can gather?  Stack: https://paste.mozilla.org/yv2SJCY0/raw

[10:21:51.0429] <arai>
let me tidy up the bug tree

[10:26:51.0450] <arai>
jesup: thanks!  yeah, the branch in `ScriptLoadContext::MaybeCancelOffThreadScript` is incorrect and calls wrong function

[10:27:12.0423] <arai>
jesup: can you file a bug and CC me?

[10:27:16.0369] <jesup>
sure

[10:30:59.0480] <jesup>
https://bugzilla.mozilla.org/show_bug.cgi?id=1787529

[10:31:11.0524] <arai>
thank you!

[10:31:52.0056] <jesup>
It may get triggered by race conditions because Adobe CC iloops when you try to log in, switching between the homepage and the login page

[10:32:50.0557] <arai>
yeah, it's cancelling off-thread script decode task, that happens only when navigating away in the middle of the operation

[10:33:57.0514] <arai>
davidj361: sorry, I'll prepare example but it may take some time

[10:34:52.0741] <davidj361>
no worries, you don't have to go too much out of the way for me

[10:35:33.0129] <arai>
basically, what you need is a recursive function receives `JS::Handle<JS::Value>` and check the type, and iterate over properties and recurse

[10:36:33.0369] <davidj361>
right so if it's an object you receive, how do you obtain the list of stuff inside the object?

[10:37:05.0166] <arai>
https://searchfox.org/mozilla-central/rev/8dd35cd8f5284fbaa506aab02fe42fc87efb249e/js/src/vm/Iteration.h#461
```cpp
[[nodiscard]] bool EnumerateProperties(JSContext* cx, HandleObject obj,
```

[10:37:06.0537] <davidj361>
and are you even able to see the name of that member-variable/property?

[10:37:07.0851] <arai>
it could be used

[10:37:41.0865] <arai>
err, sorry, it was private function

[10:38:16.0223] <arai>
davidj361: https://searchfox.org/mozilla-central/rev/8dd35cd8f5284fbaa506aab02fe42fc87efb249e/js/public/PropertyAndElement.h#434-435
```cpp
extern JS_PUBLIC_API bool JS_Enumerate(JSContext* cx, JS::Handle<JSObject*> obj,
                                       JS::MutableHandle<JS::IdVector> props);
```

[10:38:18.0638] <arai>
this one instead

[10:38:58.0018] <arai>
that gives you a list of property keys

[10:39:15.0657] <arai>
and you can perform `JS_GetPropertyById`

[10:55:54.0792] <arai>
jesup: can you test with https://phabricator.services.mozilla.com/D155740 ?

[10:56:18.0939] <jesup>
sure, I can add that to the stack

[10:59:17.0026] <arai>
davidj361: here's example case that used both of them https://searchfox.org/mozilla-central/rev/839718c65b62ad1fca710390f472f834994da819/js/loader/ImportMap.cpp#115-116,121-122,137-139
```cpp
JS::Rooted<JS::IdVector> specifierKeys(aCx, JS::IdVector(aCx));
if (!JS_Enumerate(aCx, aOriginalMap, &specifierKeys)) {
...
for (size_t i = 0; i < specifierKeys.length(); i++) {
  const JS::RootedId specifierId(aCx, specifierKeys[i]);
...
  JS::RootedValue idVal(aCx);
  NS_ENSURE_TRUE(JS_GetPropertyById(aCx, aOriginalMap, specifierId, &idVal),
                 nullptr);
```

[11:02:23.0181] <arai>
Mohamed Atef: so, right now, there's no already-filed-and-available bug around frontend context.  one option is to look into bugs that has dependency and figure out other task that unblocks them

[11:03:35.0452] <arai>
other option is to work on other part of the code meanwhile

[11:43:02.0280] <aswan>
Hey folks, not sure if this is the right channel, but I was playing with cloning Errors and ran into some confusing behavior.  Wondering if this is a bug or not?

```
let e = new Error("outer", { cause: new Error("inner") });
let e2 = new Error("outer");
e2.cause = new Error("inner");

let eClone = structuredClone(e);
console.log(eClone.cause);  // all good, cause is the "innner" error!

let e2Clone = structuredClone(e2);
console.log(e2Clone.cause);  // huh, undefined?
```

[11:53:50.0222] <davidj361>
is the `global` an oversight? https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/4ce99da2a6f1b01ff6b38702c157261c72d07c88/examples/cookbook.cpp#L513

[11:58:36.0353] <evilpie>
> <@aswan:mozilla.org> Hey folks, not sure if this is the right channel, but I was playing with cloning Errors and ran into some confusing behavior.  Wondering if this is a bug or not?
> 
> ```
> let e = new Error("outer", { cause: new Error("inner") });
> let e2 = new Error("outer");
> e2.cause = new Error("inner");
> 
> let eClone = structuredClone(e);
> console.log(eClone.cause);  // all good, cause is the "innner" error!
> 
> let e2Clone = structuredClone(e2);
> console.log(e2Clone.cause);  // huh, undefined?
> ```

cloning `cause` is not specified so we can not say if it's a bug. But basically we only create (and clone) an internal slot for cause when using the constructor. We could fix this by doing a [[Get]] lookup instead.

[12:10:30.0853] <davidj361>
Do I really have to declare an extra tmp variable to convert each RootedValue to a HandleObject?
```c++
    JS::RootedObject yobj(cx);
    if (!JS_ValueToObject(cx, y, &yobj)) return false;

    JS::RootedValue data(cx);
    if (!JS_GetProperty(cx, yobj, "data", &data)) return false;
    JS::RootedValue signals(cx);
    if (!JS_GetProperty(cx, data, "foo", &signals)) return false;
```

[12:11:00.0721] <davidj361>
 * Do I really have to declare an extra tmp variable to convert each RootedValue to a HandleObject? For example if I wanted to manually traverse down an object tree.

```c++
    JS::RootedObject yobj(cx);
    if (!JS_ValueToObject(cx, y, &yobj)) return false;

    JS::RootedValue data(cx);
    if (!JS_GetProperty(cx, yobj, "data", &data)) return false;
    JS::RootedValue signals(cx);
    if (!JS_GetProperty(cx, data, "foo", &signals)) return false;
```

[12:13:23.0384] <davidj361>
`myObj { data: { foo: 5 } };` for example

[12:14:34.0325] <davidj361>
at least I'm wondering if there are JS API functions that do the same thing as JS_ValueToObject but returns instead, otherwise I'll just utilize 2 iterator buffer variables

[12:14:40.0400] <davidj361>
 * at least I'm wondering if there are JS API functions that do the same thing as `JS_ValueToObject` but returns instead, otherwise I'll just utilize 2 iterator buffer variables

[12:15:02.0074] <davidj361>
 * at least I'm wondering if there are JS API functions that do the same thing as `JS_ValueToObject` but returns an handleobject instead, otherwise I'll just utilize 2 iterator buffer variables

[12:15:12.0042] <arai>
the `RootedValue` can be reused across multiple calls

[12:17:25.0350] <davidj361>
right but it will look slightly ugly like this:
```c++
    JS::RootedObject obj(cx); // iterator
    JS::RootedValue rv(cx); // iterator
    if (!JS_ValueToObject(cx, y, &obj)) return false;
    if (!JS_GetProperty(cx, obj, "data", &rv)) return false;
    if (!JS_ValueToObject(cx, rv, &obj)) return false;
    if (!JS_GetProperty(cx, obj, "foo", &rv)) return false;
    if (!JS_ValueToObject(cx, rv, &obj)) return false;
    if (!JS_GetProperty(cx, obj, "use", &rv)) return false;

```

[12:18:29.0033] <arai>
if the value is known to be object, you don't need `JS_ValueToObject`

[12:18:56.0286] <arai>
```
JS::RootedValue rv(cx);
JS::RootedObject obj(cx, &y.toObject());
if (!JS_GetProperty(cx, obj, "data", &rv)) return false;
obj = &rv.toObject();
if (!JS_GetProperty(cx, obj, "foo", &rv)) return false;
```


[12:43:33.0730] <aswan>
evilpie: thanks, I haven't read the spec, but mdn says:|
> Browsers must serialize the properties name and message, and are expected to serialize other "interesting" properties of the errors such as stack, cause, etc.
and fwiw, v8 clones cause in both cases.  Is it worth filing a bug?

[12:43:51.0036] <aswan>
 * evilpie: thanks, I haven't read the spec, but mdn says:|

> Browsers must serialize the properties name and message, and are expected to serialize other "interesting" properties of the errors such as stack, cause, etc.

 and fwiw, v8 clones cause in both cases.  Is it worth filing a bug?

[12:44:03.0343] <evilpie>
> <@aswan:mozilla.org> evilpie: thanks, I haven't read the spec, but mdn says:|
> 
> > Browsers must serialize the properties name and message, and are expected to serialize other "interesting" properties of the errors such as stack, cause, etc.
> 
>  and fwiw, v8 clones cause in both cases.  Is it worth filing a bug?

can't hurt

[12:44:20.0740] <aswan>
ha, okay.  thanks!

[12:58:31.0143] <davidj361>
> <@arai:mozilla.org> davidj361: here's example case that used both of them https://searchfox.org/mozilla-central/rev/839718c65b62ad1fca710390f472f834994da819/js/loader/ImportMap.cpp#115-116,121-122,137-139
> ```cpp
> JS::Rooted<JS::IdVector> specifierKeys(aCx, JS::IdVector(aCx));
> if (!JS_Enumerate(aCx, aOriginalMap, &specifierKeys)) {
> ...
> for (size_t i = 0; i < specifierKeys.length(); i++) {
>   const JS::RootedId specifierId(aCx, specifierKeys[i]);
> ...
>   JS::RootedValue idVal(aCx);
>   NS_ENSURE_TRUE(JS_GetPropertyById(aCx, aOriginalMap, specifierId, &idVal),
>                  nullptr);
> ```

from what i'm reading you can only get the values of the enumerated properties but you cannot get the names of them, correct?

[12:59:02.0152] <arai>
the "id" is the name

[12:59:20.0414] <arai>
it can be one of string, integer, or symbol

[13:00:16.0014] <davidj361>
this? `const JS::RootedId specifierId(cx, props[i]);` the struct looks like bits or an int? 
https://searchfox.org/mozilla-esr68/rev/4b79eedfe95ef427490a16e7c96f3a0930ab0c32/js/public/Id.h#45

[13:01:06.0737] <arai>
`JSID_IS_STRING` and `JSID_TO_STRING` etc for type check and convert

[13:01:21.0198] <davidj361>
what is this magic? converting "bits" to a string? lol

[13:01:38.0249] <davidj361>
Just noticed those functions after looking over again

[13:01:44.0935] <arai>
"bits" is tagged pointer

[13:01:54.0400] <davidj361>
ahh

[13:02:41.0704] <arai>
newer version of `JS::PropertyKey` has accessor methods

[13:02:55.0216] <arai>
https://searchfox.org/mozilla-central/rev/839718c65b62ad1fca710390f472f834994da819/js/public/Id.h#83
```cpp
MOZ_ALWAYS_INLINE bool isString() const {
```

[13:17:49.0408] <davidj361>
how would I go about printing to stdout `JSID_TO_STRING(id)`?

[13:18:44.0220] <arai>
https://searchfox.org/mozilla-esr68/rev/4b79eedfe95ef427490a16e7c96f3a0930ab0c32/js/src/jsfriendapi.h#279
```cpp
extern JS_FRIEND_API void DumpString(JSString* str);
```

[13:18:47.0194] <davidj361>
I'm familiar with `JS_EncodeStringToUTF8(cx, str)` but would it be needed?

[13:22:45.0158] <davidj361>
Ah I guess that's just for GC purposes

[13:37:19.0004] <arai>
`JS_EncodeStringToUTF8` is for retrieving UTF8 buffer for the string

[13:37:39.0983] <arai>
`DumpString` prints the internal representation of the string

[14:01:51.0080] <TheQwertiest>
is there any difference in performance between settings `trace` in object's `JSClassOps` vs manually propagating `trace` from the corresponding global object?

[14:01:59.0224] <TheQwertiest>
 * is there any difference in performance between setting `trace` in object's `JSClassOps` vs manually propagating `trace` from the corresponding global object?

[14:13:16.0845] <TheQwertiest>
or in other words: is there any demerit in defining `trace` in non-global object?

[14:32:27.0231] <iain>
TheQwertiest: You need `trace` when an object has edges to other garbage-collected things. The GC uses it when marking live objects.

[14:32:49.0862] <iain>
I don't understand how you think the global object gets involved.

[14:33:16.0219] <iain>
 * TheQwertiest: You need `trace` when an object has references to other garbage-collected things. The GC uses it when marking live objects.

[14:36:50.0095] <TheQwertiest>
> <@iain:mozilla.org> I don't understand how you think the global object gets involved.

the way that I was doing it till now was smth like this:

NativeGlobal::Trace() {  childObject->Trace() }; // NativeGlobal is a private native of a global object, childObject is a private native object of some ChildJsObject that is stored in global

I've never gave it much thought, but now I'm starting to think that I've overcomplicated things a bit =)

[14:38:08.0640] <TheQwertiest>
so now I'm wondering, if I can just define `trace` for every native js object without doing things like that

[14:40:13.0666] <TheQwertiest>
unrelated question: what is the best way to define a property in native object that contains an object with contants
i.e. in js land said property would look something like this:
```
obj.contants = {
  CONST_1 = 1,
  CONST_2 = 42,
  CONST_3 = 69,
};
```

[14:41:01.0302] <TheQwertiest>
 * unrelated question: what is the best way to define a property in native object that contains an object with contants
i.e. in js land said property would look something like this:

```
obj.contants = {
  CONST_1: 1,
  CONST_2: 42,
  CONST_3: 69,
};
```

[14:41:27.0342] <TheQwertiest>
 * so now I'm wondering, if I can just define `trace` for every native js object without doing stuff like that

[14:43:55.0490] <iain>
GC works by tracing everything that's reachable from the roots. So it starts by looking at every Rooted<X>, and calling `trace` on those objects.

[14:44:08.0639] <iain>
Those objects may have edges to other objects

[14:46:16.0249] <iain>
If an object has another GC thing in a slot (eg for `var o1 = {}; var o2 = {x: o1}`, there will be an ObjectValue pointing to `o1` in one of the slots in `o2`, then the GC already knows how to trace it.

[14:46:31.0724] <iain>
If you're doing something fancier, you may need a trace method to tell the GC what to do.

[14:48:40.0444] <TheQwertiest>
from your answer it seems that defining a `trace` in `JSClassOps` is a standard tool that does not carry much overhead (in my case those native childObjects contain GC things, so I have to trace them manually)

[14:49:09.0774] <iain>
It's a standard tool without too much overhead, but depending on what you're doing you may not need it

[14:50:22.0443] <iain>
For example: RegExpObject has four reserved slots: https://searchfox.org/mozilla-central/source/js/src/vm/RegExpObject.h#41-53

[14:50:49.0515] <iain>
But they're all normal values, so `RegExpObject` doesn't need a `trace` hook

[14:51:05.0207] <iain>
MapObject is an example that needs a `trace` hook

[14:51:30.0468] <iain>
https://searchfox.org/mozilla-central/source/js/src/builtin/MapObject.cpp#537-544

[14:51:50.0076] <iain>
Because one of its slots contains a PrivateValue, which is a raw pointer to a malloc-allocated hashtable

[14:52:05.0417] <iain>
By default the GC will ignore that slot

[14:52:34.0211] <iain>
 * Because one of its slots contains a PrivateValue, which is a raw pointer to (in this case) a malloc-allocated hashtable

[14:52:39.0670] <iain>
So we need a `trace` method to trace the contents of the hashtable

[14:53:04.0379] <iain>
 * So we need a `trace` hook to trace the contents of the hashtable

[14:53:08.0300] <TheQwertiest>
yea, I know the basics :)
my question was mainly related to the overhead of defining `trace`

[14:53:39.0916] <TheQwertiest>
anyway thanks for all the clarifications, this will allow to clean my code quite a bit :)

[14:55:23.0935] <TheQwertiest>
ps: regretfully, the way I've implemented generic wrapper that defines native js objects makes it difficult to use private slots to store js things, so I usually store them with JS::Heap + trace...

[14:55:34.0987] <TheQwertiest>
 * ps: regretfully, the way I've implemented generic my wrapper that defines native js objects makes it difficult to use private slots to store js things, so I usually store them with JS::Heap + trace...

[14:56:13.0764] <TheQwertiest>
> <@theqwertiest:mozilla.org> unrelated question: what is the best way to define a property in native object that contains an object with contants
> i.e. in js land said property would look something like this:
> 
> ```
> obj.contants = {
>   CONST_1: 1,
>   CONST_2: 42,
>   CONST_3: 69,
> };
> ```

ps: any tips on this would be greatly appreciated

[14:56:33.0630] <TheQwertiest>
 * ps: regretfully, the way I've implemented generic my wrapper that defines native js objects makes it difficult to use reserved slots to store js things, so I usually store them with JS::Heap + trace...

[15:11:50.0855] <TheQwertiest>
I mean I can generate object in runtime via `JS_DefineProperties` that has a getter method for `constants`, but that doesn't seem optimal. Especially since this property (and it's keys) might be accessed frequently, so I'm trying to minimize the crossing between jsLand and nativeLand

[15:14:37.0813] <evilpie>
Why accessor? Can't you just specify values?

[15:15:17.0296] <iain>
Yeah, just about to say: JSPropertySpec can also specify constants

[15:16:17.0474] <iain>
See here: https://searchfox.org/mozilla-central/source/js/public/PropertySpec.h#385-392

[15:17:01.0939] <TheQwertiest>
> Can't you just specify values?
> JSPropertySpec can also specify constants

but is it possible to use an object as a constant value?

[15:18:22.0177] <TheQwertiest>
since in my case I have `Object1` that has property `constant`, which has multiple primitivee constant values

[15:18:27.0830] <TheQwertiest>
 * since in my case I have `Object1` that has property `constant`, which has multiple primitive constant values

[15:18:33.0625] <TheQwertiest>
 * since in my case I have `Object1` that has property `constants`, which has multiple primitive constant values

[15:18:48.0713] <TheQwertiest>
 * since in my case I want to have `Object1` that has property `constants`, which has multiple primitive constant values

[15:19:57.0292] <evilpie>
Create an object for all the constants. Create another object and assign the property `constants` with the previous object? 

[15:22:47.0296] <TheQwertiest>
> <@evilpie:mozilla.org> Create an object for all the constants. Create another object and assign the property `constants` with the previous object?

>  and assign the property

you mean via JS_DefinePropertyById? Or is it possible to do so with JS_DefineProperties as well? (without accessor)

[15:23:22.0015] <TheQwertiest>
> <@evilpie:mozilla.org> Create an object for all the constants. Create another object and assign the property `constants` with the previous object?

 * > and assign the property

you mean via JS\_DefineProperty? Or is it possible to do so with JS\_DefineProperties as well? (without accessor)

[15:23:30.0080] <evilpie>
You would need the former 

[15:24:32.0259] <TheQwertiest>
oh well, guess there is no simple way to hide it all in JSPropertySpec =)

[15:24:35.0964] <TheQwertiest>
thanks!


2022-08-27
[07:44:03.0810] <TheQwertiest>
and another question :)
is it possible to get the result of `JS::ModuleEvaluate` synchronously?
e.g. `JS::Evaluate` or `JS_ExecuteScript` return false if code evaluation failed, whereas `JS::ModuleEvaluate` returns true even if there was an error, which seem to be resolved only during promise handling

[07:44:27.0608] <TheQwertiest>
 * and another question :)
is it possible to get the result of `JS::ModuleEvaluate` synchronously?
e.g. `JS::Evaluate` or `JS_ExecuteScript` return false if code evaluation failed, whereas `JS::ModuleEvaluate` returns true even if there was an error, which seem to be resolved and propagated only during promise handling

[07:52:39.0457] <TheQwertiest>
looking at searchfox, it seems that it is possible on trunk: https://searchfox.org/mozilla-central/source/js/public/Modules.h#243
I wonder, if I can just reimplement it manually (since I'm still on esr91)


[07:56:51.0748] <TheQwertiest>
yup, luckily OnModuleEvaluationFailure is just a syntax sugar and does not require any mozjs internals

[08:06:52.0345] <TheQwertiest>
 * looking at searchfox, it seems that it is possible on master: https://searchfox.org/mozilla-central/source/js/public/Modules.h#243
I wonder, if I can just reimplement it manually (since I'm still on esr91)



2022-08-28
[03:10:13.0011] <pie_>
> <@nbp:mozilla.org> One trick used in Gecko, is to add a call to `Math.sin` and break on the equivalent symbol in spidermonkey.

makes sense, thanks


2022-08-29
[07:04:14.0456] <liam_g>
If I run `JS_GetPendingException()`, I get a JSObject back. I can then use `JS_ErrorFromException()` to convert that object to a `JSErrorReport`. But how to I get a `String` from that `JSErrorReport`?

[07:06:12.0014] <mccr8>
I'm not sure of the right answer, but there are a few methods on JSErrorBase, the parent class, that return various kinds of strings.

[07:35:45.0932] <davidj361>
> <@liam_g:mozilla.org> If I run `JS_GetPendingException()`, I get a JSObject back. I can then use `JS_ErrorFromException()` to convert that object to a `JSErrorReport`. But how to I get a `String` from that `JSErrorReport`?

did you take a look at this? https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/4ce99da2a6f1b01ff6b38702c157261c72d07c88/examples/boilerplate.cpp#L26-L40

[07:58:24.0881] <liam_g>
davidj361:  thanks, that's helpful. What if I don't want stderr though, but my own output?

[08:01:09.0640] <liam_g>
I guess I have to create my own error stream. I can probably work this out.

[08:02:11.0229] <liam_g>
> <@mccr8:mozilla.org> I'm not sure of the right answer, but there are a few methods on JSErrorBase, the parent class, that return various kinds of strings.

I saw that, but those functions didn't link property, so I guess they're not intended for public use.

[08:03:16.0501] <mccr8>
Ah, ok. Yeah maybe the boilerplate example linked above is more useful.

[13:12:43.0256] <Bryan Thrall [:bthrall]>
Mohamed Atef and arai I forgot about some changes needed for bug 1786117 that I just rediscovered: there are 11 function that should be cleaned up (they are no longer needed). The functions all have a "TODO bug 1783951" comment to indicate they should be cleaned up.

Do you want to fix these for that bug, or (since the patch is ready to land) or I could create another bug to clean them up in?

[13:12:45.0260] <botzilla>
https://bugzil.la/1786117 — REOPENED (mohamedatef1698) — Use ErrorContext-variant of `ReportOutOfMemory` in Stencil XDR

[13:12:45.0839] <botzilla>
https://bugzil.la/1783951 — ASSIGNED (bthrall) — Use ErrorContext variant of js::ReportOutOfMemory() when encoding/decoding Stencils


2022-08-30
[06:26:18.0193] <liam_g>
If I have two JS::Heap objects A and B which both point to the same thing, and if I know that A will always outlive B, do I need to run JS::TraceEdge() on both of them, or can I run it only on A?

[07:17:06.0382] <tcampbell>
> <@lgoodacre:matrix.org> If I have two JS::Heap objects A and B which both point to the same thing, and if I know that A will always outlive B, do I need to run JS::TraceEdge() on both of them, or can I run it only on A?

You generally need to run on both of them. The GC is also able to move objects around in memory and the TraceEdge code is involved in making sure all pointers are updated.

[07:18:04.0140] <tcampbell>
Things are moved either because they are promoted out of the nursery into the tenured heap (old generation), or the GC does a compaction to reduce fragmentation.

[08:12:08.0538] <davidj361>
Does SpiderMonkey have any agnostic backend support for binding C++ code? I wanted to use this but it doesn't seem to support SpiderMonkey: https://github.com/Chobolabs/jsbind

[10:45:41.0446] <iain>
davidj361: It looks like that is an abstraction layer providing a common C++ interface to multiple JS backends. I'm not aware of any similar project that supports SpiderMonkey, but we have a C++ API that could probably be used to add SpiderMonkey support to that project (or a similar project).

[10:58:23.0499] <usva.techdev>
Hello Everyone I'm trying to create a yocto recipe to bubild spidermonkey 68.0.2 because I cannot use a c++17 compiler... but at the moment of running configure I got some errors. If running inside a container from docker... If I run the configure command as follows outside yocto it runs correclty but if I run it inside yocto it marks the errors below:

this is configure command I'm running:

../configure --disable-jemalloc --enable-posix-nspr-emulation --enable-unaligned-private-values --with-system-zlib --with-intl-api --enable-debug --enable-optimize --with-clang-path=/usr/bin/clang --with-libclang-path=/usr/lib/llvm-10/lib

this are the errors returned from yocto warrrior build

|     'Failed to create virtualenv: %s' % self.virtualenv_root)
| Exception: Failed to create virtualenv: qemu-x86/build/tmp/work/core2-64-poky-linux/mozjs/68.2-r0/firefox-68.2.0/js/src/_build/_virtualenvs/init
| WARNING: qemu-x86/build/tmp/work/core2-64-poky-linux/mozjs/68.2-r0/temp/run.do_configure.6599:1 exit 1 from '../configure --disable-jemalloc --enable-posix-nspr-emulation --enable-unaligned-private-values --with-system-zlib --with-intl-api --enable-debug --enable-optimize --with-clang-path=/usr/bin/clang --with-libclang-path=/usr/lib/llvm-10/lib --x-includes=no --x-libraries=no'
| ERROR: Function failed: do_configure (log file is located at build/tmp/work/core2-64-poky-linux/mozjs/68.2-r0/temp/log.do_configure.6599)
ERROR: Task (recipes-scriptingservice/mozjs/mozjs_68.2.bb:do_configure) failed with exit code '1'


[11:49:37.0618] <usva.techdev>
Which is the latest C++14 community supported/released version of spiderMonkey?

[11:50:56.0014] <usva.techdev>
 * Which is the latest C++14 officially community supported/released version of spiderMonkey?

[12:52:55.0780] <davidj361>
> <@usva.techdev:mozilla.org> Which is the latest C++14 officially community supported/released version of spiderMonkey?

I would go with the latest esr version, esr = extended support release

[12:53:34.0036] <davidj361>
which is esr 102 I think

[13:36:13.0201] <tcampbell>
68 was probably the last ESR version targeting C++14, but it isn't actively supported. Depending on what headers you use, it may be possible to compile the spidermonkey library as C++17, but your project as C+

[13:36:16.0858] <tcampbell>
 * 68 was probably the last ESR version targeting C++14, but it isn't actively supported. Depending on what headers you use, it may be possible to compile the spidermonkey library as C++17, but your project as C++14

[13:37:08.0518] <tcampbell>
The "failed to create virtualenv" error sounds like an issue between Python and yocto and might need to be debugged seperately

[15:14:42.0142] <usva.techdev>
> <@tcampbell:mozilla.org> The "failed to create virtualenv" error sounds like an issue between Python and yocto and might need to be debugged seperately

how can I debug this issue? any hint?

[15:15:00.0943] <usva.techdev>
> <@tcampbell:mozilla.org> 68 was probably the last ESR version targeting C++14, but it isn't actively supported. Depending on what headers you use, it may be possible to compile the spidermonkey library as C++17, but your project as C++14

thanks this is helpful

[15:30:29.0894] <tcampbell>
See if a simple script that just runs python virtualenv works right

[15:34:15.0015] <usva.techdev>
> <@tcampbell:mozilla.org> See if a simple script that just runs python virtualenv works right

actually if I run the ../configure command with the options I wrote from the command line it works and there is no problem. it gets configured correctly the problem happens when I run the recipe with bitbake something happens that makes it crash.... which version of python should I be using for the ../configure command in spider monkey?

[15:35:17.0085] <tcampbell>
I'd suggest searching for yocto and virtualenv. I saw some pages earlier talking about special setup for bitbake

[15:35:35.0572] <tcampbell>
I think for 68, it was a mix of python 2 and 3

[15:36:07.0227] <tcampbell>
I believe all the python 2 stuff is now gone in more recent esr like 102


2022-08-31
[12:06:35.0404] <davidj361>
Is there any exception handling in esr 68 for embedded programming? I'm not really finding any in the examples nor in the source code.

[12:10:45.0425] <iain>
davidj361: SpiderMonkey should be compiled with `-fno-exceptions`, if that's the kind of exception handling you mean.

[12:14:47.0991] <davidj361>
I mean stuff like this:
https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/4ce99da2a6f1b01ff6b38702c157261c72d07c88/examples/boilerplate.cpp#L26-L40

[12:14:55.0767] <davidj361>
where it isn't in esr 68
https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr68/examples/boilerplate.cpp

[12:17:18.0775] <iain>
Look here: https://searchfox.org/mozilla-esr68/source/js/src/jsapi.cpp#5010

[12:30:56.0820] <iain>
 * davidj361: Look here: https://searchfox.org/mozilla-esr68/source/js/src/jsapi.cpp#5010

[12:35:10.0409] <davidj361>
> <@iain:mozilla.org> davidj361: Look here: https://searchfox.org/mozilla-esr68/source/js/src/jsapi.cpp#5010

That's really odd, why didn't it show up here? https://searchfox.org/comm-esr68/search?q=exception&path=js%2F&case=false&regexp=false

[12:35:52.0113] <arai>
the URL is for comm-esr68

[12:36:19.0446] <davidj361>
ahhh..
comm?

[12:36:35.0680] <arai>
it's a repository for thunderbird, seamonkey, etc

[12:37:08.0566] <arai>
https://searchfox.org/mozilla-esr68/search

[12:37:36.0869] <arai>
use the URL instead

[13:02:39.0246] <kfjvj>
Does anyone here know how I can have a JS object store a pointer to a C++ object in spidermonkey?

[13:06:54.0535] <kfjvj>
Another way to refer to such a thing would be an "opaque" object

[13:08:53.0742] <arai>
you can use private slot or reserved slot, depending on the version

[13:08:59.0281] <arai>
which version of SpiderMonkey are you using?

[13:09:04.0136] <kfjvj>
68

[13:10:32.0005] <arai>
then you can use private slot of the object

[13:10:59.0178] <arai>
https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/d9a734321de9394ac4cd30cb2889970622c12136/examples/resolve.cpp#L209

[13:11:24.0039] <arai>
`JSCLASS_HAS_PRIVATE` flag is to let the object have private slot

[13:11:45.0660] <arai>
https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/d9a734321de9394ac4cd30cb2889970622c12136/examples/resolve.cpp#L232

[13:12:20.0370] <arai>
[and you can use `JS::SetPrivate` to set the slot](https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/d9a734321de9394ac4cd30cb2889970622c12136/examples/resolve.cpp#L97)

[13:12:35.0753] <kfjvj>
thanks

[13:12:36.0843] <arai>
and you can use `JS::SetPrivate` to set the private slot's value, to raw pointer

[13:12:52.0342] <arai>
and `JS::GetPrivate` to get the value

