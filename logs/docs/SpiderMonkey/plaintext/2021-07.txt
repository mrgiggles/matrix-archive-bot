2021-07-01
[17:56:00.0924] <Redfire>
2 Questions:
1. What are compartments? I see something about CCWs (Cross-compartment wrappers) all over the place.
2. Does anyone know of a simple event loop implementation that I can use to learn about how to do one?

[19:15:12.0423] <arai>
 * it's almost same thing as realm in the spec

[19:19:03.0789] <arai>
Redfire: https://searchfox.org/mozilla-central/source/js/public/Zone.h#15-35

[19:20:22.0868] <arai>
what kind of event loop are you looking for?

[19:23:00.0399] <arai>
if it's about Promise and Jobs, `InternalJobQueue` is simple implementation https://searchfox.org/mozilla-central/rev/347bc5719ad83cda5f8e53017cb2699b6004c27e/js/src/vm/JSContext.cpp#761

[21:13:19.0176] <arai>
hmm, I see PROCESS-CRASH in spidermonkey jobs, while they're green

[22:07:22.0223] <arai>
filed bug 1718819

[22:07:23.0957] <botzilla>
https://bugzil.la/1718819 — NEW (nobody) — PROCESS-CRASH in green spidermonkey jobs


2021-07-03
[03:32:17.0032] <TheQwertiest>
Hey everyone! a few small questions:
- in embedding examples for modules is says that `Maintain a registry of imported modules. ... in general the registry needs to be distinct for each GlobalObject.`(https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/examples/modules.cpp#L43) 
   Is it actually required to be distinct though? I.e., it's allowed to store JSScript in a single global and then execute them in different global (via CloneAndExecuteScript), is there a some difference for modules?
- Regarding JS::Stencil: what is the actual benefit? That is, what is the difference between parsing script and storing it as Stencil vs compiling script and cloning it when needed (as described above)?

[03:32:33.0747] <TheQwertiest>
 * Hey everyone! a few small questions:
- in embedding examples for modules is says that `Maintain a registry of imported modules. ... in general the registry needs to be distinct for each GlobalObject.`(https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/examples/modules.cpp#L43)
Is it actually required to be distinct though? I.e., it's allowed to store JSScript in a single global and then execute them in different global (via CloneAndExecuteScript), is there a some difference for modules?
- Regarding JS::Stencil: what is the actual benefit? (https://searchfox.org/mozilla-central/source/js/public/experimental/JSStencil.h)
  That is, what is the difference between parsing script and storing it as Stencil vs compiling script and cloning it when needed (as described above)?

[03:33:04.0028] <TheQwertiest>
 * Hey everyone! a few small questions:
- in embedding examples for modules is says that `Maintain a registry of imported modules. ... in general the registry needs to be distinct for each GlobalObject.`(https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/examples/modules.cpp#L43)
Is it actually required to be distinct though? I.e., it's allowed to store JSScript in a single global and then execute them in different global (via CloneAndExecuteScript), is there a some difference for modules?
- Regarding JS::Stencil: what is the actual benefit? (https://searchfox.org/mozilla-central/source/js/public/experimental/JSStencil.h)
That is, what is the difference between parsing script, storing it and executing it as Stencil vs compiling script and cloning it when needed (as described above)?

[03:33:21.0392] <TheQwertiest>
 * Hey everyone! a few small questions:
- in embedding examples for modules it says that `Maintain a registry of imported modules. ... in general the registry needs to be distinct for each GlobalObject.`(https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/examples/modules.cpp#L43)
Is it actually required to be distinct though? I.e., it's allowed to store JSScript in a single global and then execute them in different global (via CloneAndExecuteScript), is there a some difference for modules?
- Regarding JS::Stencil: what is the actual benefit? (https://searchfox.org/mozilla-central/source/js/public/experimental/JSStencil.h)
That is, what is the difference between parsing script, storing it and executing it as Stencil vs compiling script and cloning it when needed (as described above)?

[03:33:42.0815] <TheQwertiest>
 * Hey everyone! a few small questions:
- in embedding examples for modules it says that `Maintain a registry of imported modules. ... in general the registry needs to be distinct for each GlobalObject.`(https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/examples/modules.cpp#L43)
Is it actually required to be distinct though? I.e., it's allowed to store JSScript in a single global and then execute them in different globasl (via CloneAndExecuteScript), is there some difference for modules?
- Regarding JS::Stencil: what is the actual benefit? (https://searchfox.org/mozilla-central/source/js/public/experimental/JSStencil.h)
That is, what is the difference between parsing script, storing it and executing it as Stencil vs compiling script and cloning it when needed (as described above)?

[03:34:04.0363] <TheQwertiest>
 * Hey everyone! a few small questions:
- in embedding examples for modules it says that `Maintain a registry of imported modules. ... in general the registry needs to be distinct for each GlobalObject.`(https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/examples/modules.cpp#L43)
Is it actually required to be distinct though? I.e., it's allowed to store JSScript in a single global and then execute them in different globasl (via CloneAndExecuteScript), is there something different for modules?
- Regarding JS::Stencil: what is the actual benefit? (https://searchfox.org/mozilla-central/source/js/public/experimental/JSStencil.h)
That is, what is the difference between parsing script, storing it and executing it as Stencil vs compiling script and cloning it when needed (as described above)?

[03:36:21.0475] <arai>
Stencil is GC-free structure, so, manipulating it (compiling, serializing, de-serializing) can be done in any thread, without interfering with other part of JavaScript VM

[03:39:39.0543] <arai>
also, Stencil data can be shared across processes, storing it in mmap-ed file or shared memory, that reduces memory consumption, especially when we use many processes in order to isolate websites with processes

[03:42:22.0851] <TheQwertiest>
TLDR: not really that useful for single-process desktop apps that don't load super heavy scripts or a lot of scripts in the middle of it's runtime =)

[03:42:27.0440] <TheQwertiest>
oh well

[03:42:41.0989] <TheQwertiest>
 * TLDR: not really that useful for single-process desktop apps that don't load super heavy scripts or a lot of scripts in the middle of it's run time =)

[03:43:36.0934] <TheQwertiest>
thanks for the info, anyway =)
btw, do you have any insight about the second question?

[03:44:14.0931] <TheQwertiest>
 * Hey everyone! a few small questions:
- in embedding examples for modules it says that `Maintain a registry of imported modules. ... in general the registry needs to be distinct for each GlobalObject.`(https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/examples/modules.cpp#L43)
Is it actually required to be distinct though? I.e., it's allowed to store JSScript in a single global and then execute them in different globasl (via CloneAndExecuteScript), so is there something different about modules?
- Regarding JS::Stencil: what is the actual benefit? (https://searchfox.org/mozilla-central/source/js/public/experimental/JSStencil.h)
That is, what is the difference between parsing script, storing it and executing it as Stencil vs compiling script and cloning it when needed (as described above)?

[03:45:45.0643] <arai>
fwiw, I'm going to remove `JS::CloneAndExecuteScript` :P

[03:46:38.0107] <arai>
in bug 1662152

[03:46:39.0467] <botzilla>
https://bugzil.la/1662152 — ASSIGNED (arai) — Remove JSScript cloning mechanism in favour of sharing Stencils

[03:47:11.0984] <arai>
then, I don't think module is really supported in script cloning

[03:47:23.0409] <arai>
(there wasn't such case, at least in tree

[03:49:29.0072] <arai>
also, the object returned by `JS::CompileModule` is `ModuleObject`, not `JSScript`, and `ModuleObject` is not clone-able

[03:51:35.0407] <TheQwertiest>
> <@arai:mozilla.org> fwiw, I'm going to remove `JS::CloneAndExecuteScript` :P

this is power abuse!

[03:51:37.0931] <TheQwertiest>
:D

[03:52:10.0740] <arai>
is `JS::CloneAndExecuteScript` much useful in embedding scenario?

[03:53:10.0216] <TheQwertiest>
> <@arai:mozilla.org> then, I don't think module is really supported in script cloning

hm... I see... is there a way to avoid having to compile the same module in different globals without stencil? (e.g. in ESR68 , where there's no Stencil)

[03:53:35.0774] <arai>
(in case it's much useful, I'll try adding code example for the transition from `JS::CloneAndExecuteScript` to Stencil

[03:54:13.0006] <TheQwertiest>
> <@arai:mozilla.org> is `JS::CloneAndExecuteScript` much useful in embedding scenario?

Well, I don't think it will be needed, once there'll be Stencil, but it *is* needed now =)

[03:55:01.0832] <TheQwertiest>
> <@arai:mozilla.org> is `JS::CloneAndExecuteScript` much useful in embedding scenario?

 * Well, I don't think it will be needed, once there'll be Stencil, but it _is_ needed now... For my needs anyway =)

[03:55:27.0452] <TheQwertiest>
I'm using CloneAndExecuteScript to avoid parsing the same script files in different globals (each global is a different UI window)

[03:56:29.0646] <TheQwertiest>
for example, the same script could be used in 10 different globals, parsing it only once greatly reduces the time needed to initialize all consequent loads (and window initializations)

[03:56:42.0895] <arai>
I'm not aware of any way to share/copy ModuleObject across multiple globals.  (there can be, just that I don't know

[03:57:49.0781] <TheQwertiest>
> <@arai:mozilla.org> I'm not aware of any way to share/copy ModuleObject across multiple globals.  (there can be, just that I don't know

darn, I guess I'll have to postpone implementing module support till ESR91, since the loading time trade-off is too much

[03:58:31.0643] <TheQwertiest>
 * for example, the same script could be used in 10 different globals, parsing it only once greatly reduces the time needed to initialize all consequent loads (and corresponding window initializations)

[04:00:55.0148] <TheQwertiest>
 * for example, the same script could be used in 10 different globals, parsing it only once greatly reduces the time needed of all consequent loads (and corresponding window initializations)

[04:02:06.0480] <arai>
ah... wait

[04:02:27.0425] <arai>
I was looking my local tree that already removes some code that allows sharing

[04:02:36.0990] <TheQwertiest>
xD

[04:02:54.0152] <arai>
you could use XDR in order to skip parsing module multiple times

[04:03:03.0548] <arai>
let me check if it's available in 68

[04:04:57.0032] <arai>
uh, XDR doesn't support modules in 68 (bug 1588861) :P

[04:04:58.0326] <botzilla>
https://bugzil.la/1588861 — RESOLVED (caroline) — XDR encoding modules

[04:04:59.0986] <TheQwertiest>
> <@arai:mozilla.org> I'm not aware of any way to share/copy ModuleObject across multiple globals.  (there can be, just that I don't know

 * darn, I guess I'll have to postpone implementing module support till ESR91, since the loading time trade-off is too much (i.e. compared to glorified script `eval` that I have now)

[04:05:11.0206] <arai>
it's from 73

[04:05:23.0899] <TheQwertiest>
what was the next esr after 68?

[04:05:29.0906] <TheQwertiest>
71?

[04:05:49.0864] <arai>
78

[04:06:26.0061] <TheQwertiest>
hm... Now i need to decide if I want to migrate to another ESR when 91 is just around the corner -_-

[04:07:59.0270] <TheQwertiest>
could you please, point me to some docs about this xdr thingy?

[04:08:10.0879] <TheQwertiest>
 * could you, please, point me to some docs about this xdr thingy?

[04:09:28.0898] <TheQwertiest>
(does not matter which esr)

[04:09:33.0450] <arai>
that's what I should write :P

[04:11:00.0018] <TheQwertiest>
> <@arai:mozilla.org> that's what I should write :P

you are not using esr anyway, no? since you are living in `on-the-bleeding-edge` land =)

[04:11:33.0933] <TheQwertiest>
oh, wait, do you mean that you are the one who supposed to write those docs? xD

[04:11:40.0259] <arai>
yes :)

[04:11:41.0451] <TheQwertiest>
 * oh, wait, do you mean that you are the one who is supposed to write those docs? xD

[04:11:44.0038] <TheQwertiest>
hahahah

[04:11:57.0936] <arai>
so... there isn't much document right now :P

[04:12:20.0737] <TheQwertiest>
so, uhm, is it actually usable now in any esr then? xD

[04:12:49.0657] <arai>
the XDR is a way to serialize/de-serialize JS scripts and objects to/from byte stream

[04:13:17.0765] <arai>
so, you can save the compiled script as binary file, and load from it in order to skip compilation

[04:13:49.0157] <arai>
public API is in https://searchfox.org/mozilla-esr68/source/js/public/Transcoding.h

[04:14:33.0784] <arai>
that improves startup time or page load time

[04:14:56.0179] <arai>
so, if the time taken by script compilation is problematic for your case, this will help

[04:15:33.0726] <arai>
the problem is that... I don't see public API for transcoding module...

[04:15:44.0789] <arai>
(internally, it exists

[04:16:14.0620] <TheQwertiest>
hm... so can it be used to share modules across globals? i.e. is xdr `global-agnostic`?

[04:16:32.0044] <TheQwertiest>
> <@arai:mozilla.org> the problem is that... I don't see public API for transcoding module...

even in the later esr's?

[04:17:15.0325] <arai>
even in central

[04:18:20.0405] <arai>
XDR is global-agnostic.  it can be decoded into different globals

[04:19:08.0212] <Redfire>
> <@arai:mozilla.org> I'm not aware of any way to share/copy ModuleObject across multiple globals.  (there can be, just that I don't know

~~I mean, it'd be nice if we had native modules, that'd be much more important than that~~

[04:19:36.0749] <TheQwertiest>
> <@arai:mozilla.org> even in central

there go my hopes >_<

[04:19:40.0558] <Redfire>
> <@arai:mozilla.org> I'm not aware of any way to share/copy ModuleObject across multiple globals.  (there can be, just that I don't know

 * ~I mean, it'd be nice if we had native modules, that'd be much more important than that~

[04:19:58.0283] <TheQwertiest>
> <@arai:mozilla.org> even in central

 * there go my hopes for using modules pre-91 >_<

[04:20:47.0340] <TheQwertiest>
oh well, thanks anyway =)

[04:21:14.0305] <Redfire>
 * <del>I mean, it'd be nice if we had native modules, that'd be much more important than that</del>

[04:48:06.0950] <Redfire>
What does `InitRealmStandardClasses` do? Code seems to say `globalThis` and `undefined` are defined, as well as some other stuff, but I can't figure out what that other stuff is? https://searchfox.org/mozilla-central/source/js/src/vm/GlobalObject.cpp#754-762

[05:13:55.0699] <TheQwertiest>
> <@redfire75369:mozilla.org> What does `InitRealmStandardClasses` do? Code seems to say `globalThis` and `undefined` are defined, as well as some other stuff, but I can't figure out what that other stuff is? https://searchfox.org/mozilla-central/source/js/src/vm/GlobalObject.cpp#754-762

```
// Initialize standard JS class constructors, prototypes, and any top-level
// functions and constants associated with the standard classes (e.g. isNaN
// for Number).
```

[05:14:35.0750] <TheQwertiest>
all the types and stuff that you would expect from pure JS, I guess

[05:15:14.0523] <Redfire>
hmm, I'm not running that anywhere and all of those are already defined though?

[05:15:38.0410] <Redfire>
I haven't not found something I would expect

[05:16:51.0922] <TheQwertiest>
https://searchfox.org/mozilla-central/source/js/public/ProtoKey.h#134

[05:17:20.0974] <TheQwertiest>
all the stuff listed in JS_FOR_PROTOTYPES_

[05:17:49.0094] <TheQwertiest>
according to the code at least =)

[08:16:26.0971] <jandem|pto>
Redfire: `InitRealmStandardClasses` initializes them eagerly, but you can also do it lazily with a resolve hook, `JS_ResolveStandardClass`

[09:40:36.0682] <Redfire>
Having an issue now, my module resolve hook is slightly broken and only works with absolute paths and paths relative to the working directory.
Does anyone have ideas for how I can paths relative to each module's directory working? possible with `modulePrivate` (second param of ModuleResolveHook)? 

[09:42:43.0641] <Redfire>
* Having an issue now, my module resolve hook is slightly broken and only works with absolute paths and paths relative to the working directory.

Does anyone have ideas for how I can paths relative to each module's directory working? possibly with `modulePrivate` (second param of ModuleResolveHook)? 

[09:55:16.0195] <Redfire>
* Having an issue now, my module resolve hook is slightly broken and only works with absolute paths and paths relative to the working directory.

Does anyone have ideas for how I can paths relative to each module's directory, working? possibly with `modulePrivate` (second param of ModuleResolveHook)? 

[15:56:52.0698] <ptomato>
yes, in our case we store the module's URI in the module object's private data, and then resolve relative paths against the importing module's URI

[15:59:35.0389] <ptomato>
does anyone know if it's possible to enable embedders to use the UTF8-UTF16 encoding facilities in `mozilla/Utf8.h`?

[15:59:42.0764] <ptomato>
currently it's only sort of possible

[16:00:55.0773] <ptomato>
we can `#define MOZ_HAS_MOZGLUE 1` before including the header, in order to get `MOZ_HAS_JSRUST()`, but that's probably not good for other reasons

[16:02:13.0912] <ptomato>
if we do that, `mozilla::ConvertUtf8toUtf16()` works, but `mozilla::ConvertUtf16toUtf8()` does not, because the underlying Rust function does not have a symbol in libmozjs-78.so for the latter, whereas it does for the former

[16:04:07.0588] <ptomato>
that does make it seem like it should be possible to have those symbols

[16:04:39.0322] <ptomato>
I mean, `encoding_rs_mem.h` is installed into `/usr/include/mozjs-78` for embedders, so... 😃

[16:06:11.0285] <ptomato>
and then maybe we could stick a new symbol into `js-config.h` that would enable `MOZ_HAS_JSRUST()` without having to define `MOZ_HAS_MOZGLUE`

[16:06:53.0373] <ptomato>
is this something that would be considered if I opened a bug for it?


2021-07-05
[12:20:57.0050] <dminor>
For my experimentation with ICU4x, I added a finalize method to Intl.Locale to free associated ICU4x resources (https://phabricator.services.mozilla.com/D118073), but my finalize is never called. I was hoping someone could have a quick look and see if I've missed something with how I have things set up.


2021-07-06
[03:11:51.0814] <nicolo-ribaudo>
Hi! I am reading/debugging SM's garbage collector code, and I have a doubt. Doesn't https://searchfox.org/mozilla-central/source/js/src/gc/Marking-inl.h#70 always evaluate to `true`, since it ends with `|| true`? And if it does, what's the point of that `MightBeForwarded` class?

[03:19:16.0175] <Ms2ger>
jonco: ^

[03:23:13.0572] <jonco>
nicolo-ribaudo: Hi, you're right, this will always evaluate to true.

[03:23:50.0919] <jonco>
nicolo-ribaudo: This is incorrect, but it doesn't cause a problem in practice it just means we make some extra unnecessary checks

[03:24:55.0871] <nicolo-ribaudo>
Thanks! It still works because in practice `t->isForwarded()` will then always return `false` for non-forwardable things?

[03:25:03.0326] <jonco>
Yes

[03:25:49.0076] <nicolo-ribaudo>
Should I submit a patch to change that `|| true` to `|| false`, or since it's guaranteed to work anyway it isn't worth it?

[03:26:36.0986] <jonco>
Yes that would be great

[03:26:46.0223] <jonco>
It's more efficient if this works, so it's worth doing

[03:26:59.0496] <jonco>
Thanks you for reporting this!

[03:27:34.0773] <jonco>
 * Thank you for reporting this!

[07:23:42.0889] <Redfire>
If you had to had to return null or undefined from a rust function (to be called from js)
Would you rather have `Nullable<T>` and `Undefinable<T>` or ```rs
enum Valueable<T> {
    Null,
    Undefined,
    Value(T)
} ```This really depends on your semantical definition of null vs undefined, which is why I want to ask

[07:24:00.0488] <Redfire>
* If you had to had to return null or undefined from a rust function (to be called from js)
Would you rather have `Nullable<T>` and `Undefinable<T>` or <code>rs
enum Valueable<T> {
    Null,
    Undefined,
    Value(T)
} </code>This really depends on your semantical definition of null vs undefined, which is why I want to ask

[07:24:14.0174] <Redfire>
* If you had to had to return null or undefined from a rust function (to be called from js)
Would you rather have `Nullable<T>` and `Undefinable<T>` or ```rs
enum Valueable<T> {
    Null,
    Undefined,
    Value(T)
} ```This really depends on your semantical definition of null vs undefined, which is why I want to ask

[07:24:44.0241] <Ms2ger>
`Option<Option<T>>`?

[07:25:12.0182] <Redfire>
That is kinda annoying to work with in regular code

[07:25:55.0875] <Redfire>
I was considering `Option<T>` for null, and `Undefinable<T>` for undefined, as well

[07:26:11.0379] <Ms2ger>
I'm surprised by your need to return both null and undefined, but not arbitrary js values

[07:27:26.0483] <Redfire>
arbitrary already exists, but currently, converting to arbitrary values is kind of a pain, I haven't done the required abstraction for that

[07:29:53.0458] <Redfire>
Technically I think I only need to do null *or* undefined, but just asking beforehand

[07:33:07.0977] <Redfire>
* Technically I think I only need to do null *or* undefined for now, but just asking beforehand

[15:04:27.0006] <sfink>
Whoa. It was a PITA to set up this new machine for building, but it certainly does fly when it works!

[15:05:29.0241] <sfink>
final important step: remove the -j8 limiters from my mozconfigs. ;-)

[15:08:34.0062] <tcampbell>
were the problems self-inflicted?

[15:08:52.0799] <sfink>
I'm still not sure!

[15:09:10.0092] <sfink>
I would think they would have to be, except I didn't copy anything but my source tree over to the box.

[15:09:15.0212] <tcampbell>
fedora?

[15:09:20.0862] <sfink>
and I still have to hand-patch every objdir's virtualenv that it creates

[15:09:24.0701] <sfink>
yes, fedora 34

[15:09:47.0131] <sfink>
it was all Python-related crap

[15:10:35.0742] <tcampbell>
hmm.. that seems like something we should fix?

[15:11:12.0560] <sfink>
yeah, though I think I'll need to do a completely clean clone to make sure I'm reporting the right problems

[15:12:40.0570] <tcampbell>
I probably should update docs for windows builds. I set it up two times recently and it getting pretty smooth. Seems we can use the build-tools-only installer of visual studio instead of needing to do a real setup

[15:13:44.0438] <sfink>
I have the same Windows installation running natively or in a VM on it, but I haven't tried doing Windows builds at all yet.

[15:15:07.0378] <tcampbell>
I used to have a similar vm/non-vm dual boot, but I kept managing to corrupt things when the host randomly powered off.

[15:16:50.0165] <sfink>
I haven't had any problems yet, save possibly one recent one. But I don't give the VM access to the raw disk, I give it a md device that works off a copy of everything but the actual Windows data partition. Which makes it much harder for it to mess things up.

[15:17:14.0584] <tcampbell>
ah, I did raw disk access in bad ways

[15:17:32.0583] <sfink>
recently, though, my Windows updates started failing and rolling back. Same behavior whether I'm running on raw hardware or the VM.

[15:17:55.0174] <sfink>
now it's threatening me that my version of Windows 10 is going unsupported, since it's unable to upgrade

[15:18:12.0766] <sfink>
(this is on my laptop; no issues with the threadripper's Windows yet)

[15:18:21.0333] <tcampbell>
yeah, I've had problems like that on test laptops that I boot twice a year

[15:18:22.0486] <sfink>
I should probably just reinstall Windows

[15:18:39.0899] <tcampbell>
windows really doesn't like being neglected

[15:18:49.0589] <sfink>
yeah, that could very well be it

[15:19:00.0965] <sfink>
it started happening when I started it up for the first time in like 8 months

[15:19:25.0438] <tcampbell>
after enough reboots the updates started working again though

[15:20:27.0802] <tcampbell>
but that doesn't play nice with do-a-few-hours-of-work-twice-a-year

[15:20:31.0805] <sfink>
dang -- I now have an excellent network, and it takes about an hour to clone mozilla-unified??

[15:20:48.0099] <sfink>
wtf is it doing?

[15:20:59.0532] <tcampbell>
cinnabar or hg?

[15:21:03.0811] <sfink>
hg

[15:21:10.0168] <sfink>
I guess the download was fast

[15:21:11.0286] <tcampbell>
it should use bundles

[15:21:15.0656] <sfink>
it says it is

[15:22:10.0757] <tcampbell>
yeah, it is pretty slow. I used to run into issues before bundles where the processing of chunks was so slow, the HTTP channel would drop and the thing would fail :(

[15:24:49.0253] <sfink>
ok, trying another build using a local clone of the directory I copied. That'll be safe from any rogue .pyc files in the source dir.

[15:26:31.0516] <sfink>
nope, same error. Can't import `pkg_resources` for glean in the objdir's virtualenv.

[15:26:33.0492] <sfink>
time to file a bug

[15:39:15.0789] <sfink>
 * time to file a [bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1719379)

[15:39:45.0932] <tcampbell>
that was fast reply..

[15:39:50.0549] <sfink>
hm... seems like something populated my `~/.local` directory with conflicting stuff. Renaming the whole directory makes things happier.

[15:40:16.0262] <sfink>
whoa, he did reply


2021-07-07
[17:42:09.0507] <iain>
Who can review mfbt these days? While reviewing anba's Map/Set patches I realized (because anba had faithfully reproduced it in masm) that [this line in HashBytes](https://searchfox.org/mozilla-central/rev/1c5c3f4ec274462b92cf5bd82235ae3a56c508e9/mfbt/HashFunctions.cpp#27) will add both a word of data (good) and the *length* of a word of data (constant; almost certainly not intended) to the hash.

[17:42:57.0591] <iain>
Hooray for variadic functions!

[21:59:44.0591] <leveryd>
what's JSAutoRealm and Realms?  i found document link "developer.mozilla.org/en-US/docs/SpiderMonkey/SpiderMonkey_compartments" , but this link have been invalid.

[22:00:25.0565] <arai>
https://searchfox.org/mozilla-central/rev/1c5c3f4ec274462b92cf5bd82235ae3a56c508e9/js/public/Realm.h#17-20

[22:00:46.0606] <arai>
https://searchfox.org/mozilla-central/rev/1c5c3f4ec274462b92cf5bd82235ae3a56c508e9/js/public/Realm.h#141-182

[22:02:03.0688] <arai>
objects belong to one realm, and when operating on the raw (not-wrapped) object, you need to be in the realm.  `JSAutoRealm` lets you enter the given object's realm

[22:02:22.0155] <arai>
 * objects belong to one realm, and when operating on the raw (not-wrapped) object, you need to be in the object's realm.  `JSAutoRealm` lets you enter the given object's realm

[22:02:44.0690] <arai>
oh, the URL you've mentioned is there :P

[22:03:10.0034] <arai>
for compartments, https://searchfox.org/mozilla-central/rev/1c5c3f4ec274462b92cf5bd82235ae3a56c508e9/js/public/Zone.h#15-35

[22:03:49.0201] <arai>
can you file a bug for the outdated URL in the comment?

[22:04:11.0583] <leveryd>
how to file a bug? 😂

[22:04:28.0443] <arai>
do you have bugzilla.mozilla.org account?

[22:04:32.0489] <arai>
https://bugzilla.mozilla.org/home

[22:05:11.0379] <leveryd>
no, i can register one account now.

[22:05:42.0530] <arai>
great :)  after you've registered, there will be "New Bug" link at the top bar

[22:05:58.0484] <leveryd>
ok，i will try.

[22:06:48.0321] <arai>
SpiderMonkey bugs are filed under "Core" product, "JavaScript Engine" component

[22:07:12.0967] <arai>
so, in the "Enter A Bug" page, "Other Products" category.

[22:07:18.0098] <arai>
there's "Core"

[22:15:28.0072] <leveryd>
done.  https://bugzilla.mozilla.org/show_bug.cgi?id=1719412

[22:23:13.0019] <arai>
Thank you!

[00:34:04.0344] <dbezhetskov>
Hi folks, I was been assigned to do the review https://phabricator.services.mozilla.com/D118283 here but I can't leave comments because I'm not in the `editbugs` group, who can I ask for granting permissions?

[00:41:56.0358] <Ms2ger>
Once upon a time I would have asked jdm 

[01:09:39.0371] <Redfire>
🤔 On HeapApi.h#554 (SM 88):
```rs
MOZ_ALWAYS_INLINE bool CellHasStoreBuffer(const Cell* cell) {
  return GetCellChunkBase(cell)->storeBuffer;
}
```
```
Exception: Exception 0xc0000005 encountered at address 0x7ff71fb8f1c3: Access violation reading location 0x00000000
```
I'm getting a silent exception, and I'm confused

[01:10:42.0963] <arai>
is `cell` nullptr ?

[01:11:15.0072] <arai>
what's the backtrace?

[01:11:36.0112] <Redfire>
backtrace as in?

[01:12:25.0523] <arai>
stack trace, or call stack.  how the execution reach the function

[01:14:09.0167] <Redfire>
```
js::gc::detail::CellHasStoreBuffer(const js::gc::Cell *) HeapAPI.h:558
js::gc::IsInsideNursery(const js::gc::Cell *) HeapAPI.h:567
js::gc::Cell::isTenured() Cell.h:158
CanCheckGrayBits(const js::gc::Cell *) GC.cpp:8951
js::gc::detail::AssertCellIsNotGray(const js::gc::Cell *) GC.cpp:9005
JS::AssertCellIsNotGray(const js::gc::Cell *) RootingAPI.h:407
JS::AssertObjectIsNotGray(JSObject *) RootingAPI.h:412
js::ContextChecks::checkObject(JSObject *) JSContext-inl.h:95
js::ContextChecks::check(JSObject *,int) JSContext-inl.h:89
JSContext::checkImpl<JS::Handle<JSObject *>,JS::Handle<JS::PropertyKey>,JS::Handle<JS::Value> >(const JS::Handle<JSObject *> &,const JS::Handle<JS::PropertyKey> &,const JS::Handle<JS::Value> &) JSContext-inl.h:206
JSContext::check<JS::Handle<JSObject *>,JS::Handle<JS::PropertyKey>,JS::Handle<JS::Value> >(const JS::Handle<JSObject *> &,const JS::Handle<JS::PropertyKey> &,const JS::Handle<JS::Value> &) JSContext-inl.h:213
DefineDataPropertyById(JSContext *,Handle<JSObject *>,Handle<JS::PropertyKey>,Handle<JS::Value>,unsigned int) jsapi.cpp:2180
DefineDataProperty(JSContext *,Handle<JSObject *>,const char *,Handle<JS::Value>,unsigned int) jsapi.cpp:2262
JS_DefineProperty(JSContext *,Handle<JSObject *>,const char *,Handle<JS::Value>,unsigned int) jsapi.cpp:2268
ion::objects::object::IonObject::define(mozjs_sys::generated::root::JSContext *,String,Value,unsigned int) object.rs:112
runtime::globals::console::define(mozjs_sys::generated::root::JSContext *,IonObject) console.rs:498
runtime::init(mozjs_sys::generated::root::JSContext *,IonObject) lib.rs:21
cli::commands::repl::start_repl() repl.rs:31
cli::main() main.rs:74
core::ops::function::FnOnce::call_once<fn(),tuple<>>(void (*)()) function.rs:227
std::sys_common::backtrace::__rust_begin_short_backtrace<fn(),tuple<>>(void (*)()) backtrace.rs:125
std::rt::lang_start::{{closure}}<tuple<>>(std::rt::lang_start::closure-0 *) rt.rs:66
std::rt::lang_start_internal() rt.rs:51
std::rt::lang_start<tuple<>>(void (*)(),long long,unsigned char **) rt.rs:65
main 0x00007ff71faa5320
__scrt_common_main_seh() 0x00007ff72150830c
BaseThreadInitThunk 0x00007ffcc1837c24
RtlUserThreadStart 0x00007ffcc252d721
```

[01:14:34.0308] <Redfire>
Line 14 is the one I

[01:14:40.0711] <Redfire>
 * Line 14 is the one I'm calling

[01:16:22.0281] <arai>
what's the value of `obj` argument of `JS_DefineProperty` ?

[01:16:37.0156] <arai>
maybe, it sounds like that is `nullptr`

[01:18:58.0734] <Redfire>
I have this feeling that this `Handle` is outliving the `RootedGuard` which is what is causing it

[01:19:37.0430] <arai>
what is RootedGuard ?

[01:20:44.0664] <Redfire>
```JS_DefineProperty(cx, rooted.handle().into(), key.as_ptr() as *const i8, rval.handle().into(), attrs);```
```rs
pub unsafe fn handle(&self, cx: *mut JSContext) -> Handle<*mut JSObject> {
	rooted!(in(cx) let rooted = self.raw());
	rooted.handle().into();
}
```

RootedGuard: https://doc.servo.org/mozjs/rust/struct.RootedGuard.html
rooted!: https://doc.servo.org/mozjs/macro.rooted.html

[01:21:45.0780] <arai>
if you've extracted the handle directly from rooted, it won't outlive I guess

[01:22:02.0835] <arai>
what's the value of `rooted` there ?

[01:22:13.0545] <arai>
does it contain valid object pointer?

[01:28:44.0760] <Redfire>
just tested without using this seperate function, and yep, it doesn't outlive in this case

[01:30:42.0704] <Redfire>
 * just tested without using theseperate function, and yep, it doesn't outlive when I do this instead

[01:30:59.0819] <Redfire>
might have to add a lifetime to this struct then

[11:49:44.0907] <TheQwertiest>
hey everyone!
a small question (probably not for this channel though), does anyone know if there is any task prioritization in firefox event loop?
It seems I've reached the limit of what I can do with SM without a proper html event loop...

[11:53:07.0869] <TheQwertiest>
and I've felt a little dead inside just by looking at the mozilla code that implements timers properly (i.e. setTimeout/setInterval stuff)...

[11:54:46.0001] <TheQwertiest>
 * hey everyone!
a small question (probably not for this channel though), does anyone know if there is any task prioritization in firefox event loop? (e.g. redraw vs mouse events vs timers and etc)
It seems I've reached the limit of what I can do with SM without a proper html event loop...

[11:56:20.0990] <TheQwertiest>
though it's a pretty ingenious idea to implement all timers with only a single timeout

[11:56:31.0036] <TheQwertiest>
 * though it's a pretty ingenious idea to implement all timers with only a single timeout timer

[11:59:42.0154] <TheQwertiest>
 * hey everyone!
a small question (probably not for this channel though), does anyone know if there is any task prioritization in firefox event loop? (e.g. redraw vs mouse events vs timers and etc)
It seems I've reached the limit of what I can do with SM without a proper html event loop and now I have to implement one as well...

[12:17:58.0914] <mccr8>
TheQwertiest: The #dom:mozilla.org channel is a better place to ask about event loop stuff. I know for things like IPC we treat input stuff as a higher priority, but I'm not sure if you are allowed to reorder events if it would be visible to the page.

[12:18:46.0692] <TheQwertiest>
> <@mccr8:mozilla.org> TheQwertiest: The #dom:mozilla.org channel is a better place to ask about event loop stuff. I know for things like IPC we treat input stuff as a higher priority, but I'm not sure if you are allowed to reorder events if it would be visible to the page.

thanks!


2021-07-09
[22:43:30.0570] <Redfire>
Found another game using SpiderMonkey https://www.uox3.org/

[22:43:59.0172] <Redfire>
* Found another thing using SpiderMonkey https://www.uox3.org/

[22:52:33.0500] <Redfire>
SM 1.7.0 though.... 

[02:18:40.0599] <nbp>
Weird, the changelog mentioned that they updated last year

[06:47:07.0553] <nbp>
sfink: related to https://phabricator.services.mozilla.com/D119467 , I recently changed the `// |jit-test| crash` to reject non-crashing test cases, which might exclude `assertEq`.

[06:47:53.0150] <sfink>
Uh oh!

[06:48:16.0243] <sfink>
hm, maybe I should change it to `crash("...", {suppress_minidump=true})` then.

[06:49:21.0931] <sfink>
though I'm surprised it can tell the difference between `crash` and `assertEq`; I think `assertEq` bottoms out at `MOZ_CRASH` or `MOZ_RELEASE_ASSERT`.

[06:49:42.0226] <nbp>
the reason for doing that is Bug 1549763

[06:49:43.0741] <botzilla>
https://bugzil.la/1549763 — ASSIGNED (nbp) — Intermittent tests\jit-test\jit-test\tests\basic\bug1161762.js | Timeout (code 1, args "--ion-eager --ion-offthread-compile=off --ion-check-range-analysis --ion-extra-checks --no-sse3 --no-threads") [970.1 s]

[06:49:53.0992] <sfink>
actually, maybe I should look at the existing uses of `crash` and see if the default should be the other way around

[06:50:06.0622] <nbp>
assertEq returns false, and bubble up to the shell entry function, which exit 3 (IIRC)

[06:50:23.0877] <nbp>
while crash will exit with a SEGV

[06:51:06.0993] <nbp>
This is the only use of crash, now that I removed the second one.

[06:52:32.0052] <sfink>
ah! ok. Then it does seem like it can just suppress the minidump unconditionally.

[06:52:59.0635] <sfink>
I read the bug. You're right, that makes more sense.

[06:57:25.0499] <nbp>
sfink: I am no expert in mini-dump instrumentation, but I would definitely be happy to learn if you add the test case name in the report.

[06:59:34.0222] <sfink>
it seemed like a fairly big change to code that's going to die before too long (replaced with Rust)

[06:59:44.0767] <sfink>
I can get the data into the minidump fairly easily

[07:00:11.0106] <sfink>
one hacky option would be to get it out by surrounding it with an unusual sequence of characters and running `strings`

[07:00:44.0806] <sfink>
but I should be able to get the PID soonish, so I can correlate that way, at least for tests that don't reuse the shell

[15:23:05.0539] <mgaudet>
confession: Mapping out the state of streams 

[15:23:13.0032] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[15:32:43.0752] <sfink>
confession: fixing up the minidump creation logic (and fixing the prerequisite bug in libbreakpadinjector.so)

[15:33:00.0496] <sfink>
confession: wrangling my convoluted TypedArray patch stack into shape.


2021-07-12
[05:50:11.0779] <nbp>
arai: Bug 1708432 and Bug 1708448 are both adding the same file without adding the same content.

[05:50:13.0608] <botzilla>
https://bugzil.la/1708432 — ASSIGNED (arai) — Move JS_Get*PropertyDescriptor* to js/public/PropertyDescriptor.h

[05:50:14.0192] <botzilla>
https://bugzil.la/1708448 — ASSIGNED (arai) — Move property and element functions into new js/public/PropertyAndElement.h

[05:51:06.0535] <arai>
same file?

[05:51:31.0590] <nbp>
oh … that's me miss reading

[05:53:10.0609] <arai>
if the filenames are misleading, suggestions are welcome

[06:39:50.0814] <nbp>
arai: I reveiewing the diff across files, and I wonder, why in jsapi.h, in the removed code there is some `, Native getter` instead of `, JSNative getter`. Even searchfox cannot find the `, Native getter` code.

[06:41:14.0549] <arai>
what I saw is that, in `jsapi.cpp`, `Native` was used instead of `JSNative` 

[06:41:19.0152] <arai>
do you mean that?

[06:41:40.0968] <nbp>
yes, but I cannot find it in searchfox

[06:41:51.0925] <arai>
https://searchfox.org/mozilla-central/search?q=Native+getter&path=&case=false&regexp=false

[06:42:20.0017] <arai>
there are 2 occurrences in jsapi.cpp

[06:42:21.0343] <nbp>
https://searchfox.org/mozilla-central/source/js/src/vm/JSFunction.h#32 ok

[06:42:22.0596] <arai>
(not .h

[06:42:27.0288] <nbp>
I was looking in the wrong file

[06:42:45.0991] <nbp>
sounds like you can remove this using as well.

[06:43:02.0537] <nbp>
in a follow-up patch

[06:43:06.0179] <arai>
okay

[06:43:41.0691] <nbp>
oh … that was to have js::Native be the same as JSNative.

[06:47:20.0417] <nbp>
the more I read the diff the more I hate auto-formatting tools. I feel that this kind of patch would be much better faster to review if the auto-formatting were to be applied in a sperated patch.

[06:48:24.0262] <arai>
I guess using `JSNative` everywhere would work

[06:49:53.0132] <nbp>
don't worry for JSNative.

[06:50:06.0877] <nbp>
we can still live with both, this is not a huge burden

[06:52:55.0658] <nbp>
/me reading the JSAPI function makes me wish we had the type trait `IntoValue` to remove 5 overloads of the same function.

[07:19:40.0054] <nbp>
arai: If you don't mind I will keep the third review for tomorrow ;)

[07:19:52.0277] <arai>
no problem :)

[07:19:57.0293] <arai>
thank you for reviewing

[07:23:16.0271] <nbp>
hum … I guess even C++ concept might not work properly for making an `IntoValue` concept, as we need proper Rooting while giving values as argument to a function.

[13:00:47.0642] <tcampbell>
confession: Updated the spidermonkey-embedding-examples repo for 91 now that it is in beta.

[13:00:49.0466] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[13:01:28.0156] <tcampbell>
Probably when 91 hits release we can make the esr91 branch of the examples the default


2021-07-13
[04:25:10.0308] <dbezhetskov>
Hi, I'm still in a funny situation here - https://phabricator.services.mozilla.com/D118283, I can't neither submit comments nor resign as a reviewer because `You do not have permission to edit this object.`

[04:25:25.0285] <dbezhetskov>
who can help me with this?

[04:26:41.0337] <arai>
what happens if you "Follow" the bug?

[04:27:50.0896] <arai>
if that doesn't solve, try asking in #conduit:mozilla.org or #bmo:mozilla.org 

[04:28:20.0582] <dbezhetskov>
> <@arai:mozilla.org> what happens if you "Follow" the bug?

still the same behaviour :(

[07:27:04.0198] <mccr8>
dbezhetskov: I gave your bugzilla account canconfirm and editbugs. Maybe that'll help?

[07:27:11.0973] <mccr8>
(just now)

[07:27:26.0959] <mccr8>
Maybe it inherits from bugzilla permissions or something...

[11:01:38.0702] <mgaudet>
confession: Correcting await handling for class-static-blocks

[11:01:41.0494] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[13:37:46.0311] <mgaudet>
Just in case anyone has strong feelings, I am arguing in favour of removing the modelines from files, starting in js/src/builtin/streams, but potentially expanding the remit eventually. 

https://bugzilla.mozilla.org/show_bug.cgi?id=1720378 

[13:41:31.0437] <mccr8>
FWIW, I wrote a somewhat hacky script to fix mode lines in files. Though I think it hasn't been used for a few years. https://github.com/amccreight/moz-source-tools/blob/master/modeline.py

[13:42:26.0545] <mccr8>
I guess now that the entire codebase is clang-formatted the logic in there to decide if a file is 2-space or 4-space indented is no longer needed.

[13:43:43.0459] <mgaudet>
Neat. I wonder if I could fix it with that. Will have to check it out later, so I'll comment in the bug so I remember :) 


2021-07-14
[01:46:03.0790] <dbezhetskov>
> <@mccr8:mozilla.org> dbezhetskov: I gave your bugzilla account canconfirm and editbugs. Maybe that'll help?

it helped, thanks a lot!

[05:28:11.0644] <Redfire>
What's the difference between `JS_DefineProperty` and `JS_SetProperty`?
I would think be flags and defining fails if already set/defined? 

[05:37:51.0514] <jandem>
they're very different operations. `JS_SetProperty` is like `obj.x = y` in JS, it can invoke setters (also on the prototype). `JS_DefineProperty` is similar to `Object.defineProperty`


2021-07-15
[04:18:05.0898] <nbp>
confession: We can use statistics to justify moving bugs to other components: https://bugzilla.mozilla.org/show_bug.cgi?id=1718960 😄

[04:57:10.0478] <Nicolò>
Q: What is the difference between `JSClassOps` and `ObjectOps`? For example, why does `ArgumentsObject` use `delProperty` in `JSClassOps` rather than `deleteProperty` in `ObjectOps` (https://searchfox.org/mozilla-central/source/js/src/vm/ArgumentsObject.cpp#1099-1127)?

[05:07:07.0398] <jandem>
Nicolò: there's no great answer for that, but I want to tidy this up the coming months. If you want to add a new use of either of these hooks, please let me know

[05:08:49.0395] <jandem>
(in general `ObjectOps` are used more for non-native objects, but we do violate that with defineProperty for arguments objects unfortunately..)

[05:15:00.0038] <Nicolò>
Ok thanks! For now I'm just trying to understand how the different specification things translate to source code patterns/structures. I'll make sure to first ask you when I'll use those hooks.

[05:17:02.0492] <jandem>
yeah making these hooks map more directly to operations (that are overloaded) in the spec is one of the goals

[06:09:35.0656] <dminor>
tcampbell: Hi Ted, I'm doing some experiments with ICU4X in SpiderMonkey, and I've hit a small mystery while working with Intl.Locale. With ICU4X, on my benchmark I'm seeing significantly faster results, which is nice, but also quite a bit more memory use, which isn't.

Looking at a profile, the current SpiderMonkey implementation is garbage collecting a lot more often that the ICU4X version during the benchmark. With the switch to ICU4X, I had to add a finalize method to the Intl.Locale object. I'm not sure if I messed that up, or if a chance in behaviour would be expected. I was wondering if you could have a quick look and see if anything jumps out at you. This should be the relevant code: https://phabricator.services.mozilla.com/D118073.

[06:17:08.0448] <tcampbell>
I can take a look in a little bit. My first concern would be if the cell-memory-use data is being tracked correctly

[06:19:02.0569] <dminor>
Thank you!

[06:19:33.0647] <dminor>
Actually, that is probably what I'm missing, I'll have a look :)

[06:41:25.0681] <dminor>
tcampbell: Thank you :) That was the problem. Now to come up with a reasonable memory use estimate.

[06:43:43.0499] <tcampbell>
ha. I was just chatting with gregtatum about that yesterday. They seem to be quite hand-wavy

[09:08:36.0480] <sfink>
I'm trying to do merges off of my threadripper box using forwarded X11. `kdiff3` is painfully slow, occasionally stalling for 30sec. `meld` opens up a window with a minimum width of twice my screen width (I can resize it, just not any smaller.) I don't suppose anyone has any alternative suggestions?

[09:08:53.0921] <sfink>
maybe I should look to see if someone has a vscode extension for a 3-way merge...

[09:10:47.0174] <sfink>
ugh. There are many merge extensions. I'm assuming most of them probably get triggered by vscode actions, not terminal hg commands.

[09:12:40.0800] <sfink>
ooh, stackoverflow has [https://stackoverflow.com/questions/60559329/how-to-use-visual-studio-code-as-the-default-mergetool-for-mercurial](an answer)

[09:27:21.0012] <sfink>
bleh. I'm giving up for now.

[10:34:57.0623] <nbp>
sfink: xrandr can let you set larger screen size than what your display is capable off, and let you re-map the range which are displayed on the actual monitor.

[10:35:12.0607] <nbp>
but I presume this is not a good solution.

[10:37:08.0869] <nbp>
That's strange I think I tried all these tools at one point … but strangely I am back to merging by hand most of the time.

[10:39:00.0970] <sfink>
I think the problem stems from my screen size being reported based on a my two monitors, which makes sense. Setting a minimum size to the full size of the screen doesn't make so much sense.

[10:39:15.0210] <sfink>
 * I think the problem stems from my screen size being reported based on my two monitors, which makes sense. Setting a minimum size to the full size of the screen doesn't make so much sense.

[10:40:19.0267] <nbp>
sfink: move one above the other, open `meld` and move it back?

[10:40:30.0159] <sfink>
heh, that might work

[10:40:50.0756] <nbp>
(then it wants to fit the screen height as well)

[10:48:36.0819] <sfink>
I have my laptop screen positioned below my other screens already, so I would've been seeing the height problem. And thankfully, it doesn't seem to set a ridiculously large minimum height, just width.


2021-07-16
[11:10:17.0500] <fitzgen>
hello y'all :)

[11:14:15.0581] <fitzgen>
I'm wondering: is there a way to create a `ModuleObject` from a collection of (native) functions via JSAPI? I'm not seeing anything in `js/public/Modules.h` or anywhere else, but maybe I'm missing something. Alternatively, what would be the best way to do accomplish this? create a new global with all the functions I want exported attached and synthesize some JS source code with `export foo = self.foo;` for each function I want to export?

[12:59:55.0016] <evilpie>
our structured cloning code is super complicated when serializing nested object :(

[13:01:15.0895] <mgaudet>
> <@fitzgen:mozilla.org> I'm wondering: is there a way to create a `ModuleObject` from a collection of (native) functions via JSAPI? I'm not seeing anything in `js/public/Modules.h` or anywhere else, but maybe I'm missing something. Alternatively, what would be the best way to do accomplish this? create a new global with all the functions I want exported attached and synthesize some JS source code with `export foo = self.foo;` for each function I want to export?

I seem to recall this has come up before, and the answer at the time was no, we didn't have any JSAPI level code to do this. Having said that, you may get a better answer Monday 

[13:03:17.0209] <mgaudet>
> We don't have generic support for non-scripted modules right now (as far as I know..). The `ModuleObject` is always associated with a JSScript/BaseScript and different asserts trip. I think people have tried hacks by having a wrapper .mjs file that has the export list and in the body calls some helper method that populates those bindings. I don't recall if that plan worked though..

fitzgen this was Ted from last time we looked at this -^ 


[14:27:09.0421] <mgaudet>
confession: Trying to figure out how to coordinate all the algorithms for the streams spec into doing something... this is hard work :) 

[14:27:11.0920] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2021-07-18
[23:41:41.0819] <Redfire>
I'm crashing with a ```
Caused by:
  process didn't exit successfully: `C:\Users\[REDACTED]\Software\spiderfire\target\debug\deps\assert-b71590113009ad97.exe` (exit code: 0xc000001d, STATUS_ILLEGAL_INSTRUCTION)
```

Stack: ```
_CxxThrowException 0x00007ff79f1693a0
panic_unwind::real_imp::panic() seh.rs:315
panic_unwind::__rust_start_panic() lib.rs:109
std::panicking::rust_panic() panicking.rs:640
std::panicking::rust_panic_with_hook() panicking.rs:610
std::panicking::begin_panic_handler::{{closure}}() panicking.rs:495
std::sys_common::backtrace::__rust_end_short_backtrace<closure-0,!>() backtrace.rs:141
std::panicking::begin_panic_handler() panicking.rs:493
core::panicking::panic_fmt() panicking.rs:92
core::panicking::panic() panicking.rs:50
modules::assert::assert::assert::native_fn(mozjs_sys::generated::root::JSContext *,ion::functions::arguments::Arguments *) assert.rs:27
modules::assert::assert::assert(mozjs_sys::generated::root::JSContext *,unsigned int,mozjs_sys::generated::root::JS::Value *) macros.rs:22
js::InternalCallOrConstruct(JSContext *,const JS::CallArgs &,MaybeConstruct,CallReason) Interpreter.cpp:520
Interpret(JSContext *,js::RunState &) Interpreter.cpp:3244
js::RunScript(JSContext *,js::RunState &) Interpreter.cpp:405
js::ExecuteKernel(JSContext *,Handle<JSScript *>,Handle<JSObject *>,Handle<JS::Value>,AbstractFramePtr,MutableHandle<JS::Value>) Interpreter.cpp:772
js::Execute(JSContext *,Handle<JSScript *>,Handle<JSObject *>,MutableHandle<JS::Value>) Interpreter.cpp:804
js::ModuleObject::execute(JSContext *,Handle<js::ModuleObject *>,MutableHandle<JS::Value>) ModuleObject.cpp:1164
intrinsic_ExecuteModule(JSContext *,unsigned int,JS::Value *) SelfHosting.cpp:1942
js::InternalCallOrConstruct(JSContext *,const JS::CallArgs &,MaybeConstruct,CallReason) Interpreter.cpp:520
Interpret(JSContext *,js::RunState &) Interpreter.cpp:3244
js::RunScript(JSContext *,js::RunState &) Interpreter.cpp:405
js::InternalCallOrConstruct(JSContext *,const JS::CallArgs &,MaybeConstruct,CallReason) Interpreter.cpp:552
js::Call(JSContext *,Handle<JS::Value>,Handle<JS::Value>,const js::AnyInvokeArgs &,MutableHandle<JS::Value>,CallReason) Interpreter.cpp:597
js::CallSelfHostedFunction(JSContext *,Handle<js::PropertyName *>,Handle<JS::Value>,const js::AnyInvokeArgs &,MutableHandle<JS::Value>) SelfHosting.cpp:1642
js::ModuleObject::Evaluate(JSContext *,Handle<js::ModuleObject *>,MutableHandle<JS::Value>) ModuleObject.cpp:1220
runtime::modules::compile_module(mozjs_sys::generated::root::JSContext *,str,Option<std::path::Path*>,str) modules.rs:79
assert::eval_module(std::path::Path *) assert.rs:61
assert::assert() assert.rs:30
assert::assert::{{closure}}(closure-0 *) assert.rs:26
core::ops::function::FnOnce::call_once<closure-0,tuple<>>(closure-0) function.rs:227
test::__rust_begin_short_backtrace<fn()>() lib.rs:577
test::run_test::run_test_inner::{{closure}}() lib.rs:492
std::sys_common::backtrace::__rust_begin_short_backtrace<closure-1,tuple<>>() backtrace.rs:125
core::ops::function::FnOnce::call_once<closure-0,tuple<>>() function.rs:227
std::sys::windows::thread::{{impl}}::new::thread_start() thread.rs:56
BaseThreadInitThunk 0x00007ffb804e7c24
RtlUserThreadStart 0x00007ffb8096d721
```

Specific line I crash on:
```asm
	jmpq   *0x10640a(%rip)            ; mozilla::unused_t const mozilla::Unused + 709392
```

[23:41:53.0920] <Redfire>
 * I'm crashing with a```
Caused by:
process didn't exit successfully: `C:\Users\[REDACTED]\Software\spiderfire\target\debug\deps\assert-b71590113009ad97.exe` (exit code: 0xc000001d, STATUS_ILLEGAL_INSTRUCTION)
```

Stack: ```
_CxxThrowException 0x00007ff79f1693a0
panic_unwind::real_imp::panic() seh.rs:315
panic_unwind::__rust_start_panic() lib.rs:109
std::panicking::rust_panic() panicking.rs:640
std::panicking::rust_panic_with_hook() panicking.rs:610
std::panicking::begin_panic_handler::{{closure}}() panicking.rs:495
std::sys_common::backtrace::__rust_end_short_backtrace<closure-0,!>() backtrace.rs:141
std::panicking::begin_panic_handler() panicking.rs:493
core::panicking::panic_fmt() panicking.rs:92
core::panicking::panic() panicking.rs:50
modules::assert::assert::assert::native_fn(mozjs_sys::generated::root::JSContext *,ion::functions::arguments::Arguments *) assert.rs:27
modules::assert::assert::assert(mozjs_sys::generated::root::JSContext *,unsigned int,mozjs_sys::generated::root::JS::Value *) macros.rs:22
js::InternalCallOrConstruct(JSContext *,const JS::CallArgs &,MaybeConstruct,CallReason) Interpreter.cpp:520
Interpret(JSContext *,js::RunState &) Interpreter.cpp:3244
js::RunScript(JSContext *,js::RunState &) Interpreter.cpp:405
js::ExecuteKernel(JSContext *,Handle<JSScript *>,Handle<JSObject *>,Handle<JS::Value>,AbstractFramePtr,MutableHandle<JS::Value>) Interpreter.cpp:772
js::Execute(JSContext *,Handle<JSScript *>,Handle<JSObject *>,MutableHandle<JS::Value>) Interpreter.cpp:804
js::ModuleObject::execute(JSContext *,Handle<js::ModuleObject *>,MutableHandle<JS::Value>) ModuleObject.cpp:1164
intrinsic_ExecuteModule(JSContext *,unsigned int,JS::Value *) SelfHosting.cpp:1942
js::InternalCallOrConstruct(JSContext *,const JS::CallArgs &,MaybeConstruct,CallReason) Interpreter.cpp:520
Interpret(JSContext *,js::RunState &) Interpreter.cpp:3244
js::RunScript(JSContext *,js::RunState &) Interpreter.cpp:405
js::InternalCallOrConstruct(JSContext *,const JS::CallArgs &,MaybeConstruct,CallReason) Interpreter.cpp:552
js::Call(JSContext *,Handle<JS::Value>,Handle<JS::Value>,const js::AnyInvokeArgs &,MutableHandle<JS::Value>,CallReason) Interpreter.cpp:597
js::CallSelfHostedFunction(JSContext *,Handle<js::PropertyName *>,Handle<JS::Value>,const js::AnyInvokeArgs &,MutableHandle<JS::Value>) SelfHosting.cpp:1642
js::ModuleObject::Evaluate(JSContext *,Handle<js::ModuleObject *>,MutableHandle<JS::Value>) ModuleObject.cpp:1220
runtime::modules::compile_module(mozjs_sys::generated::root::JSContext *,str,Option<std::path::Path*>,str) modules.rs:79
assert::eval_module(std::path::Path *) assert.rs:61
assert::assert() assert.rs:30
assert::assert::{{closure}}(closure-0 *) assert.rs:26
core::ops::function::FnOnce::call_once<closure-0,tuple<>>(closure-0) function.rs:227
test::__rust_begin_short_backtrace<fn()>() lib.rs:577
test::run_test::run_test_inner::{{closure}}() lib.rs:492
std::sys_common::backtrace::__rust_begin_short_backtrace<closure-1,tuple<>>() backtrace.rs:125
core::ops::function::FnOnce::call_once<closure-0,tuple<>>() function.rs:227
std::sys::windows::thread::{{impl}}::new::thread_start() thread.rs:56
BaseThreadInitThunk 0x00007ffb804e7c24
RtlUserThreadStart 0x00007ffb8096d721
```

Specific line I crash on:
```asm
	jmpq   *0x10640a(%rip)            ; mozilla::unused_t const mozilla::Unused + 709392
```

[23:42:05.0472] <Redfire>
 * I'm crashing with a
```
Caused by:
process didn't exit successfully: `C:\Users\[REDACTED]\Software\spiderfire\target\debug\deps\assert-b71590113009ad97.exe` (exit code: 0xc000001d, STATUS_ILLEGAL_INSTRUCTION)
```

Stack:
```
_CxxThrowException 0x00007ff79f1693a0
panic_unwind::real_imp::panic() seh.rs:315
panic_unwind::__rust_start_panic() lib.rs:109
std::panicking::rust_panic() panicking.rs:640
std::panicking::rust_panic_with_hook() panicking.rs:610
std::panicking::begin_panic_handler::{{closure}}() panicking.rs:495
std::sys_common::backtrace::__rust_end_short_backtrace<closure-0,!>() backtrace.rs:141
std::panicking::begin_panic_handler() panicking.rs:493
core::panicking::panic_fmt() panicking.rs:92
core::panicking::panic() panicking.rs:50
modules::assert::assert::assert::native_fn(mozjs_sys::generated::root::JSContext *,ion::functions::arguments::Arguments *) assert.rs:27
modules::assert::assert::assert(mozjs_sys::generated::root::JSContext *,unsigned int,mozjs_sys::generated::root::JS::Value *) macros.rs:22
js::InternalCallOrConstruct(JSContext *,const JS::CallArgs &,MaybeConstruct,CallReason) Interpreter.cpp:520
Interpret(JSContext *,js::RunState &) Interpreter.cpp:3244
js::RunScript(JSContext *,js::RunState &) Interpreter.cpp:405
js::ExecuteKernel(JSContext *,Handle<JSScript *>,Handle<JSObject *>,Handle<JS::Value>,AbstractFramePtr,MutableHandle<JS::Value>) Interpreter.cpp:772
js::Execute(JSContext *,Handle<JSScript *>,Handle<JSObject *>,MutableHandle<JS::Value>) Interpreter.cpp:804
js::ModuleObject::execute(JSContext *,Handle<js::ModuleObject *>,MutableHandle<JS::Value>) ModuleObject.cpp:1164
intrinsic_ExecuteModule(JSContext *,unsigned int,JS::Value *) SelfHosting.cpp:1942
js::InternalCallOrConstruct(JSContext *,const JS::CallArgs &,MaybeConstruct,CallReason) Interpreter.cpp:520
Interpret(JSContext *,js::RunState &) Interpreter.cpp:3244
js::RunScript(JSContext *,js::RunState &) Interpreter.cpp:405
js::InternalCallOrConstruct(JSContext *,const JS::CallArgs &,MaybeConstruct,CallReason) Interpreter.cpp:552
js::Call(JSContext *,Handle<JS::Value>,Handle<JS::Value>,const js::AnyInvokeArgs &,MutableHandle<JS::Value>,CallReason) Interpreter.cpp:597
js::CallSelfHostedFunction(JSContext *,Handle<js::PropertyName *>,Handle<JS::Value>,const js::AnyInvokeArgs &,MutableHandle<JS::Value>) SelfHosting.cpp:1642
js::ModuleObject::Evaluate(JSContext *,Handle<js::ModuleObject *>,MutableHandle<JS::Value>) ModuleObject.cpp:1220
runtime::modules::compile_module(mozjs_sys::generated::root::JSContext *,str,Option<std::path::Path*>,str) modules.rs:79
assert::eval_module(std::path::Path *) assert.rs:61
assert::assert() assert.rs:30
assert::assert::{{closure}}(closure-0 *) assert.rs:26
core::ops::function::FnOnce::call_once<closure-0,tuple<>>(closure-0) function.rs:227
test::__rust_begin_short_backtrace<fn()>() lib.rs:577
test::run_test::run_test_inner::{{closure}}() lib.rs:492
std::sys_common::backtrace::__rust_begin_short_backtrace<closure-1,tuple<>>() backtrace.rs:125
core::ops::function::FnOnce::call_once<closure-0,tuple<>>() function.rs:227
std::sys::windows::thread::{{impl}}::new::thread_start() thread.rs:56
BaseThreadInitThunk 0x00007ffb804e7c24
RtlUserThreadStart 0x00007ffb8096d721
```

Specific line I crash on:
```asm
	jmpq   *0x10640a(%rip)            ; mozilla::unused_t const mozilla::Unused + 709392
```

[23:45:40.0743] <Redfire>
 * I'm crashing with a
```
Caused by:
process didn't exit successfully: `C:\Users\[REDACTED]\Software\spiderfire\target\debug\deps\assert-b71590113009ad97.exe` (exit code: 0xc000001d, STATUS_ILLEGAL_INSTRUCTION)
```

Stack:
```
_CxxThrowException 0x00007ff79f1693a0
panic_unwind::real_imp::panic() seh.rs:315
panic_unwind::__rust_start_panic() lib.rs:109
std::panicking::rust_panic() panicking.rs:640
std::panicking::rust_panic_with_hook() panicking.rs:610
std::panicking::begin_panic_handler::{{closure}}() panicking.rs:495
std::sys_common::backtrace::__rust_end_short_backtrace<closure-0,!>() backtrace.rs:141
std::panicking::begin_panic_handler() panicking.rs:493
core::panicking::panic_fmt() panicking.rs:92
core::panicking::panic() panicking.rs:50
modules::assert::assert::assert::native_fn(mozjs_sys::generated::root::JSContext *,ion::functions::arguments::Arguments *) assert.rs:27
modules::assert::assert::assert(mozjs_sys::generated::root::JSContext *,unsigned int,mozjs_sys::generated::root::JS::Value *) macros.rs:22
js::InternalCallOrConstruct(JSContext *,const JS::CallArgs &,MaybeConstruct,CallReason) Interpreter.cpp:520
Interpret(JSContext *,js::RunState &) Interpreter.cpp:3244
js::RunScript(JSContext *,js::RunState &) Interpreter.cpp:405
js::ExecuteKernel(JSContext *,Handle<JSScript *>,Handle<JSObject *>,Handle<JS::Value>,AbstractFramePtr,MutableHandle<JS::Value>) Interpreter.cpp:772
js::Execute(JSContext *,Handle<JSScript *>,Handle<JSObject *>,MutableHandle<JS::Value>) Interpreter.cpp:804
js::ModuleObject::execute(JSContext *,Handle<js::ModuleObject *>,MutableHandle<JS::Value>) ModuleObject.cpp:1164
intrinsic_ExecuteModule(JSContext *,unsigned int,JS::Value *) SelfHosting.cpp:1942
js::InternalCallOrConstruct(JSContext *,const JS::CallArgs &,MaybeConstruct,CallReason) Interpreter.cpp:520
Interpret(JSContext *,js::RunState &) Interpreter.cpp:3244
js::RunScript(JSContext *,js::RunState &) Interpreter.cpp:405
js::InternalCallOrConstruct(JSContext *,const JS::CallArgs &,MaybeConstruct,CallReason) Interpreter.cpp:552
js::Call(JSContext *,Handle<JS::Value>,Handle<JS::Value>,const js::AnyInvokeArgs &,MutableHandle<JS::Value>,CallReason) Interpreter.cpp:597
js::CallSelfHostedFunction(JSContext *,Handle<js::PropertyName *>,Handle<JS::Value>,const js::AnyInvokeArgs &,MutableHandle<JS::Value>) SelfHosting.cpp:1642
js::ModuleObject::Evaluate(JSContext *,Handle<js::ModuleObject *>,MutableHandle<JS::Value>) ModuleObject.cpp:1220
runtime::modules::compile_module(mozjs_sys::generated::root::JSContext *,str,Option<std::path::Path*>,str) modules.rs:79
assert::eval_module(std::path::Path *) assert.rs:61
assert::assert() assert.rs:30
assert::assert::{{closure}}(closure-0 *) assert.rs:26
core::ops::function::FnOnce::call_once<closure-0,tuple<>>(closure-0) function.rs:227
test::__rust_begin_short_backtrace<fn()>() lib.rs:577
test::run_test::run_test_inner::{{closure}}() lib.rs:492
std::sys_common::backtrace::__rust_begin_short_backtrace<closure-1,tuple<>>() backtrace.rs:125
core::ops::function::FnOnce::call_once<closure-0,tuple<>>() function.rs:227
std::sys::windows::thread::{{impl}}::new::thread_start() thread.rs:56
BaseThreadInitThunk 0x00007ffb804e7c24
RtlUserThreadStart 0x00007ffb8096d721
```

Specific line I crash on:
```as
	jmpq   *0x10640a(%rip)            ; mozilla::unused_t const mozilla::Unused + 709392
```

[23:46:35.0594] <Redfire>
 * I'm crashing with a
```
Caused by:
process didn't exit successfully: `C:\Users\[REDACTED]\Software\spiderfire\target\debug\deps\assert-b71590113009ad97.exe` (exit code: 0xc000001d, STATUS_ILLEGAL_INSTRUCTION)
```

Stack:
```
_CxxThrowException 0x00007ff79f1693a0
panic_unwind::real_imp::panic() seh.rs:315
panic_unwind::__rust_start_panic() lib.rs:109
std::panicking::rust_panic() panicking.rs:640
std::panicking::rust_panic_with_hook() panicking.rs:610
std::panicking::begin_panic_handler::{{closure}}() panicking.rs:495
std::sys_common::backtrace::__rust_end_short_backtrace<closure-0,!>() backtrace.rs:141
std::panicking::begin_panic_handler() panicking.rs:493
core::panicking::panic_fmt() panicking.rs:92
core::panicking::panic() panicking.rs:50
modules::assert::assert::assert::native_fn(mozjs_sys::generated::root::JSContext *,ion::functions::arguments::Arguments *) assert.rs:27
modules::assert::assert::assert(mozjs_sys::generated::root::JSContext *,unsigned int,mozjs_sys::generated::root::JS::Value *) macros.rs:22
js::InternalCallOrConstruct(JSContext *,const JS::CallArgs &,MaybeConstruct,CallReason) Interpreter.cpp:520
Interpret(JSContext *,js::RunState &) Interpreter.cpp:3244
js::RunScript(JSContext *,js::RunState &) Interpreter.cpp:405
js::ExecuteKernel(JSContext *,Handle<JSScript *>,Handle<JSObject *>,Handle<JS::Value>,AbstractFramePtr,MutableHandle<JS::Value>) Interpreter.cpp:772
js::Execute(JSContext *,Handle<JSScript *>,Handle<JSObject *>,MutableHandle<JS::Value>) Interpreter.cpp:804
js::ModuleObject::execute(JSContext *,Handle<js::ModuleObject *>,MutableHandle<JS::Value>) ModuleObject.cpp:1164
intrinsic_ExecuteModule(JSContext *,unsigned int,JS::Value *) SelfHosting.cpp:1942
js::InternalCallOrConstruct(JSContext *,const JS::CallArgs &,MaybeConstruct,CallReason) Interpreter.cpp:520
Interpret(JSContext *,js::RunState &) Interpreter.cpp:3244
js::RunScript(JSContext *,js::RunState &) Interpreter.cpp:405
js::InternalCallOrConstruct(JSContext *,const JS::CallArgs &,MaybeConstruct,CallReason) Interpreter.cpp:552
js::Call(JSContext *,Handle<JS::Value>,Handle<JS::Value>,const js::AnyInvokeArgs &,MutableHandle<JS::Value>,CallReason) Interpreter.cpp:597
js::CallSelfHostedFunction(JSContext *,Handle<js::PropertyName *>,Handle<JS::Value>,const js::AnyInvokeArgs &,MutableHandle<JS::Value>) SelfHosting.cpp:1642
js::ModuleObject::Evaluate(JSContext *,Handle<js::ModuleObject *>,MutableHandle<JS::Value>) ModuleObject.cpp:1220
runtime::modules::compile_module(mozjs_sys::generated::root::JSContext *,str,Option<std::path::Path*>,str) modules.rs:79
assert::eval_module(std::path::Path *) assert.rs:61
assert::assert() assert.rs:30
assert::assert::{{closure}}(closure-0 *) assert.rs:26
core::ops::function::FnOnce::call_once<closure-0,tuple<>>(closure-0) function.rs:227
test::__rust_begin_short_backtrace<fn()>() lib.rs:577
test::run_test::run_test_inner::{{closure}}() lib.rs:492
std::sys_common::backtrace::__rust_begin_short_backtrace<closure-1,tuple<>>() backtrace.rs:125
core::ops::function::FnOnce::call_once<closure-0,tuple<>>() function.rs:227
std::sys::windows::thread::{{impl}}::new::thread_start() thread.rs:56
BaseThreadInitThunk 0x00007ffb804e7c24
RtlUserThreadStart 0x00007ffb8096d721
```

Specific instruction I crash on:
```as
	jmpq   *0x10640a(%rip)            ; mozilla::unused_t const mozilla::Unused + 709392
```

[23:51:16.0305] <Redfire>
The weird part is that this crash only happens in tests, regular builds work fine

[00:07:58.0657] <arai>
which frame is it in the stack?

[00:08:09.0183] <arai>
it looks like the innermost frame is inside assertion failure

[00:08:43.0246] <arai>
what's `Interpreter.cpp` line 520 for you?

[00:08:58.0470] <arai>
that's frame 13 (or 12 if it's 0-origin)

[00:09:37.0055] <arai>
the next frame is assertion handling, that sounds like, the assertion at line 520 fails

[00:10:11.0627] <Redfire>
technically the assertion is my own? `assert!(b, "Assertion Failed");`

[00:10:27.0250] <Redfire>
 * technically the assertion is my own? `assert!(b, "Assertion Failed"); //assert.rs:27`


[00:10:58.0394] <arai>
oh, so you have assertion function implemented as JS native?

[00:11:12.0236] <Redfire>
basically, yep

[00:12:34.0273] <arai>
and `jmpq   *0x10640a(%rip)` instruction is around `assert.rs:27` ?

[00:12:39.0735] <arai>
or somewhere else?

[00:12:57.0588] <Redfire>
I'm not sure about that one



[00:13:01.0854] <Redfire>
 * I'm not sure about that one

[00:13:06.0840] <arai>
how do you get the instruction?

[00:13:30.0490] <Redfire>
CLion's Debugger just showed it to me when the crash occured

[00:13:44.0711] <arai>
and it shows stack trace as well?

[00:13:53.0243] <Redfire>
yep

[00:13:56.0583] <arai>
if so, which stack does it point when it shows the instruction?

[00:14:42.0416] <arai>
or, does it show the function name and/or offset or something for the instruction?

[00:15:03.0211] <Redfire>
Isn't the stack the thing I sent earlier?

[00:15:49.0603] <arai>
yes, I suppose it's the instruction in some function inside the stack trace

[00:16:19.0974] <arai>
and I suppose debugger shows which function it is

[00:17:03.0130] <Redfire>
I have access to the LLDB console if that'll help

[00:17:43.0151] <arai>
is the lldb already attached to the paused process ?

[00:18:20.0125] <arai>
if so, try running `bt` again to see if the stack trace is same there.  and `up` and `down` to move between frames, that will also show either the current code (C++, rust, etc) or instructions

[00:18:41.0014] <arai>
 * if so, try running `bt` = (backtrace) to see if the stack trace is same there.  and `up` and `down` to move between frames, that will also show either the current code (C++, rust, etc) or instructions

[00:18:53.0052] <arai>
 * if so, try running `bt` = (backtrace) to see if the stack trace is same there.  and `up` and `down` to move between frames, that will also show either the current code (C++, rust, etc) or disassembly

[00:21:35.0385] <arai>
if the above jmpq is for the innermost frame, going up/down frames will tell us how the execution goes there

[00:39:15.0836] <arai>
also, what happens if you call the function in regular build?  how is the `assert!` at `assert.rs:27` supposed to work?

[00:42:43.0271] <Redfire>
regular build just panics as expected, doesn't panic while panicking
`assert!` checks if the first param is true, if it isn't, it panics with the second param as the message

[00:51:04.0128] <Redfire>
```as
_CxxThrowException:
	jmpq   *0x29a61a(%rip)            ; mozilla::unused_t const mozilla::Unused + 2089995
	int3
	int3
	int3
	int3
	int3
	int3
	int3
	int3
	int3
	int3
; ...
```

Called by:
```rs
    _CxxThrowException(throw_ptr, &mut THROW_INFO as *mut _ as *mut _); //seh.rs:315
```


[01:06:02.0576] <arai>
I wonder if there's some inconsistency around build configuration for C++ exception handling

[01:07:01.0736] <arai>
given the jump target pointer value is bogus, it would mean that it's already in unexpected state

[01:09:50.0055] <arai>
/me looks into https://github.com/rust-lang/rust/blob/master/library/panic_unwind/src/seh.rs

[01:11:56.0915] <arai>
can you try putting assertion failure in other place to see how it behaves?  for example, at the beginning of the program

[01:52:26.0032] <Redfire>
I think you can't do `assert!` in `extern "C"` functions, which would explain the issue

[02:06:52.0805] <Redfire>
oh.. panicking across FFI is undefined behaviour

[02:10:47.0727] <arai>
oh https://doc.rust-lang.org/nomicon/ffi.html#ffi-and-panics

[07:30:45.0688] <TheQwertiest>
hey everyone!
trying to build the SM 91.0b3 from sources but can't get past `mach bootstrap` step: `Could not identify the root directory of your checkout! Are you running `mach bootstrap` in an hg or git clone?`

[07:31:14.0144] <TheQwertiest>
Is it not possible to build SM without downloading it via source control anymore?

[07:34:19.0527] <TheQwertiest>
 * hey everyone!
trying to build the SM 91.0b3 from sources but can't get past `mach bootstrap` step: 
```
Could not identify the root directory of your checkout! Are you running `mach bootstrap` in an hg or git clone?
```

[07:40:55.0682] <arai>
looks like mach bootstrap requires local checkout, instead of source code snapshot (bug 1662893)

[07:40:57.0020] <botzilla>
https://bugzil.la/1662893 — RESOLVED (rstewart) — Refactor bootstrap to reflect that the state_dir and topsrcdir are both mandatory

[07:42:07.0863] <arai>
so, you'll need local checkout of mozilla-central or mozilla-unified, run mach bootstrap there, and then build your spidermonkey source (that can be in different directory)

[07:44:12.0329] <TheQwertiest>
ugh, sounds like a PITA (last time I've tried it took like half a day to download the whole tree via git)

[07:44:33.0689] <arai>
oh, wait

[07:44:57.0618] <arai>
in that case, you can run bootstrap.py script alone, that should download necessary files

[07:45:15.0627] <TheQwertiest>
that's exactly the script that fails =)

[07:45:33.0848] <arai>
eh

[07:45:46.0027] <arai>
running bootstrap.py alone should work

[07:45:48.0624] <arai>
https://firefox-source-docs.mozilla.org/setup/linux_build.html#building-firefox-on-linux

[07:45:52.0581] <TheQwertiest>
bootsrtap.py:
```
        # We need to enable the loading of hgrc in case extensions are
        # required to open the repo.
        (checkout_type, checkout_root) = current_firefox_checkout(
            env=self.instance._hg_cleanenv(load_hgrc=True), hg=which("hg")
        )
```

[07:45:56.0164] <arai>
https://firefox-source-docs.mozilla.org/setup/linux_build.html#bootstrap-a-copy-of-the-firefox-source-code

[07:46:23.0366] <arai>
maybe the situation changes...?

[07:46:38.0205] <TheQwertiest>
hm... maybe there is a different bootstrap.py? let me check

[07:46:46.0410] <arai>
yeah, there are 2 bootstrap.py

[07:47:30.0416] <arai>
but that will run the same thing.  one downloaded above is a script that downloads necessary files (scripts, including another bootstrap.py)

[07:48:19.0711] <arai>
hmm, if it doesn't work without local checkout, it doesn't work as bootstrap script...

[07:49:05.0540] <arai>
oh, bug 1647792

[07:49:06.0874] <botzilla>
https://bugzil.la/1647792 — RESOLVED (rstewart) — Rewrite standalone bootstrap.py script to clone before calling into `mach bootstrap`

[07:49:22.0920] <arai>
so, the standalone bootstrap.py now requires cloning...

[07:49:29.0970] <TheQwertiest>
bin/bootstrap clones wnyay

[07:49:36.0621] <TheQwertiest>
 * bin/bootstrap clones the whole tree anyway

[07:49:50.0509] <arai>
that was optional step when I worked on bootstrap scripts

[07:50:43.0732] <TheQwertiest>
I've managed to hack around by commenting out all the lines that reference source control and it seems to work, but that *is* a dirty dirty hack

[07:51:21.0482] <TheQwertiest>
and it doesnt mesh well with sources snapshots (i.e. esr tarballs)

[07:51:46.0417] <TheQwertiest>
 * IMO, current bootstrap doesnt mesh well with sources snapshots (e.g. esr tarballs)

[07:52:03.0118] <TheQwertiest>
 * IMO, current bootstrap method doesnt mesh well with source snapshots (e.g. esr tarballs)

[07:52:04.0340] <arai>
yeah, that's problematic

[08:03:13.0173] <TheQwertiest>
@arai

[08:03:30.0443] <TheQwertiest>
 * @arai, btw do you know if it's possible to build only js project with mach?

[08:03:48.0297] <TheQwertiest>
 * @arai, btw do you know if it's possible to build only js project with mach? (in 91b3)

[08:04:14.0442] <TheQwertiest>
previously it could've been achieved by using configure in js/src directly, but it was removed at some point

[08:04:40.0385] <arai>
yes, you can specify js shell as target application

[08:05:06.0218] <arai>
https://firefox-source-docs.mozilla.org/js/build.html


[08:05:25.0961] <TheQwertiest>
will that work even if I use `--disable-js-shell` (since I don't need it)

[08:05:29.0721] <TheQwertiest>
 * will that work even if I use `--disable-js-shell` (since I don't need it)?

[08:05:48.0215] <TheQwertiest>
 * will that work even if I use `--disable-js-shell` (since I need only the SM library)?

[08:05:48.0639] <arai>
not sure

[08:06:35.0257] <TheQwertiest>
oh well, guess I'll have to experiment with it =)

[08:08:33.0662] <arai>
also, configure+make would still work

[08:09:12.0819] <arai>
there's configure.in I guess

[08:09:20.0053] <TheQwertiest>
there's no configure file in js/src anymore though?

[08:09:38.0647] <arai>
copying it to configure should work

[08:10:14.0758] <arai>
or, directly run configure.in

[08:11:06.0044] <TheQwertiest>
I'll try the mach first, since I'd rather minimize the number of hacks I have to use to build SM :D


[08:52:13.0490] <TheQwertiest>
arai: another small question, if you dont mind: do you know where I can find correct rust toolchain settings (i.e. `--host/--target`) for Windows builds by any chance?

[08:52:57.0389] <arai>
I'm afraid I don't know

[08:53:31.0165] <TheQwertiest>
oh well, thanks anyway =)

[08:53:49.0869] <TheQwertiest>
guess I'll have to brute-force it, like I did with esr68

[09:50:52.0118] <TheQwertiest>
welp, regretfully it failed to work: a lot of errors like `undefined symbol: _encoding_mem_convert_latin1_to_utf8_partial`, which look like symbols from rust binding

[09:51:39.0385] <TheQwertiest>
 * welp, regretfully it failed to work: a lot of errors like `undefined symbol: _encoding_mem_convert_latin1_to_utf8_partial`, which look like symbols from rust bindings

[09:53:04.0723] <TheQwertiest>
 * welp, regretfully, it doesn't work: a lot of errors like `undefined symbol: _encoding_mem_convert_latin1_to_utf8_partial`, which look like symbols from rust bindings

[11:03:19.0268] <TheQwertiest>
bit the bullet and went full-tree via source control way

[11:03:25.0428] <TheQwertiest>
still doesn't build on windows

[11:04:10.0387] <TheQwertiest>
are there any special settings for rust or mozconfig required to make it work?

[11:04:54.0200] <TheQwertiest>
my MOZCONFIG:
```
ac_add_options --enable-application=js
ac_add_options --enable-debug
ac_add_options --enable-nspr-build
ac_add_options --disable-jemalloc
ac_add_options --disable-js-shell
ac_add_options --disable-tests

mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/obj-debug-@CONFIG_GUESS@
```

[11:08:29.0284] <TheQwertiest>
 * bit the bullet and went `whole tree via source control` way

[11:23:10.0929] <TheQwertiest>
 * still doesn't build on Windows

[11:39:31.0544] <TheQwertiest>
the problems seems to be with `--disable-js-shell`, which probably causes some deps not to be included or smth

[11:39:56.0854] <TheQwertiest>
 * the problems seems to be with `--disable-js-shell`, which probably causes some mozjs deps not to be included or smth

[11:40:06.0969] <TheQwertiest>
 * the problems seems to be with `--disable-js-shell`, which probably causes some deps required for mozjs not to be included or smth


2021-07-19
[18:32:21.0475] <arai>
https://searchfox.org/mozilla-central/rev/a3b91b5afbd0402e416203e0915cef209d792449/js/src/moz.build#53-68

[18:32:47.0264] <arai>
it disables the build for rust directory, maybe that's the reason?

[00:39:54.0244] <ryzokuken>
Hello! What's up with https://bugzilla.mozilla.org/show_bug.cgi?id=1719535?

[00:40:33.0672] <ryzokuken>
Are we expecting Segmenter to land soon? Is it waiting on something external? Any way Igalia could help with this?

[02:07:09.0646] <jandem>
ryzokuken: maybe try asking in #i18n:mozilla.org  

[02:07:36.0603] <ryzokuken>
Ah didn't know about that room, thanks a ton jandem 

[05:31:34.0435] <TheQwertiest>
> <@arai:mozilla.org> it disables the build for rust directory, maybe that's the reason?

yup, that's it

[08:44:48.0158] <sfink|pto>
You're *supposed* to be able to use the source tarball to bootstrap and build. I recently fixed the build to recognize that you're using a source package (in fact, it'll now assume `--enable-application=js`). But I guess the bootstrap isn't tested anywhere.

[08:45:02.0695] <sfink>
that really ought to be fixed

[09:05:09.0788] <fitzgen>
> <@mgaudet:mozilla.org> > We don't have generic support for non-scripted modules right now (as far as I know..). The `ModuleObject` is always associated with a JSScript/BaseScript and different asserts trip. I think people have tried hacks by having a wrapper .mjs file that has the export list and in the body calls some helper method that populates those bindings. I don't recall if that plan worked though..
> 
> fitzgen this was Ted from last time we looked at this -^

okay, thanks for the reply. sounds like I came to the same conclusion of how to fake one of these modules up, hope it works 🤞

[09:17:44.0068] <mgaudet>
Thanks again jandem for curating the newsletter. It's been a fantastic effort this past while, helping me (an actual team member) keep up with all the various things happening in SM land. 

[09:17:56.0505] <arai>
for bootstrap with tarball, it's filed as bug 1687908

[09:17:58.0051] <botzilla>
https://bugzil.la/1687908 — NEW (nobody) — Can no longer run mach bootstrap to build Firefox from archives

[09:27:07.0728] <jandem>
mgaudet: thanks, good to hear it's helpful 🙂 


2021-07-20
[10:05:24.0284] <TheQwertiest>
tcampbell: btw, not sure other users can actually edit your "wiki" post, since I can't find any relevant button: https://discourse.mozilla.org/t/survey-where-are-you-embedding-spidermonkey/77988

[10:06:20.0969] <TheQwertiest>
 * tcampbell: btw, not sure other users can actually edit your "wiki" post, since I can't find a corresponding button: https://discourse.mozilla.org/t/survey-where-are-you-embedding-spidermonkey/77988

[10:08:18.0398] <tcampbell>
TheQwertiest: once I'm logged in, I see a little Edit button 

[10:08:53.0190] <tcampbell>
I have no idea how the permissions / reputation model works here. I need to update the table with a few of those comments

[10:09:08.0115] <TheQwertiest>
tcampbell: there is no such button for me though


[10:10:01.0200] <tcampbell>
aha https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/ (seach "wiki")

[10:11:19.0193] <tcampbell>
thanks for the msvc feedback. That clang issue with constructors was surprising

[10:12:23.0073] <TheQwertiest>
> <@tcampbell:mozilla.org> aha https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/ (seach "wiki")

haha, being level 0 is no fun xD

[10:14:05.0002] <TheQwertiest>
> <@tcampbell:mozilla.org> thanks for the msvc feedback. That clang issue with constructors was surprising

no problem, since I'll have to work around these anyway ro embed SM =)
clang issue is an old one, I think I've first encountered it in esr68 (i.e. after msvc support was deprecated in favour of clang)

[10:14:13.0350] <TheQwertiest>
> <@tcampbell:mozilla.org> thanks for the msvc feedback. That clang issue with constructors was surprising

 * no problem, since I'll have to work around these anyway to embed SM =)
clang issue is an old one, I think I've first encountered it in esr68 (i.e. after msvc support was deprecated in favour of clang)

[10:14:31.0569] <TheQwertiest>
 * no problem, since I'll have to work around these to embed SM anyway =)
clang issue is an old one, I think I've first encountered it in esr68 (i.e. after msvc support was deprecated in favour of clang)

[10:17:06.0229] <TheQwertiest>
> <@theqwertiest:mozilla.org> haha, being level 0 is no fun xD

hm... which I am not... profile shows meas a `basic user` which should have access to editing wiki (unless these settings were changed by admin)

[10:17:06.0697] <TheQwertiest>
> <@theqwertiest:mozilla.org> haha, being level 0 is no fun xD

 * hm... which I am not... profile shows me as a `basic user` which should have access to editing wiki (unless these settings were changed by admin)

[10:18:37.0765] <tcampbell>
hmm.. annoying. I'll do an update later this week to the wiki then

[10:21:21.0461] <TheQwertiest>
which makes sense though: "Spend a total of 10 minutes reading posts" is a rather lax requirement for having an ability to delete all wiki content

[10:21:35.0437] <tcampbell>
lol, indeed

[10:22:30.0210] <tcampbell>
(there is automatic history though)

[10:25:31.0674] <TheQwertiest>
not sure if there's "automatic rollback of all changes made by a specific user" though :D

[11:37:09.0784] <l11d>
are all heap-objects accessed by spidermonkey (or accessed by jitted code) gc-allocated or are there accesses to regular firefox heap allocations as well?

[11:38:57.0759] <iain>
l11d: SM allocates lots of non-GC data on the regular heap

[11:39:19.0961] <iain>
It's not uncommon for a GC thing to own a non-GC allocated buffer

[11:41:21.0978] <l11d>
are these allocations also accessed from jitted code?

[11:42:30.0730] <iain>
Yes

[11:45:15.0158] <l11d>
thanks alot iain 

[11:47:23.0909] <iain>
For example, [ArrayBufferObject](https://searchfox.org/mozilla-central/source/js/src/vm/ArrayBufferObject.h#214) has `BufferKind::MALLOCED`

[12:38:51.0947] <TheQwertiest>
does anyone know what's the proper way to declare a custom reason for GC? (e.g. in `JS::FinishIncrementalGC`)

[12:39:53.0360] <TheQwertiest>
previously I was told that `JS::GCReason::RESERVED*` could be used for this purpose, but it was removed since then

[12:40:57.0730] <tcampbell>
probably `FIRST_FIREFOX_REASON+i` 😶

[12:43:04.0016] <TheQwertiest>
but that would overlap with firefox reasons, no? =)

[12:43:44.0538] <tcampbell>
but  you don't have a FIREFOX around, right?

[12:44:12.0485] <tcampbell>
(I'm pretty sure they don't mean anything to GC code in spidermonkey itself, and are only used by special code in the full Gecko)

[12:45:20.0438] <TheQwertiest>
it just feels... rather hacky =)

[12:45:27.0502] <tcampbell>
agreed

[12:45:27.0743] <TheQwertiest>
 * true, but it just feels... rather hacky =)

[12:45:48.0298] <tcampbell>
do you need more than 1 custom reason?

[12:46:17.0444] <tcampbell>
(would a single reserved one for arbitrary embedder be enough?)

[12:46:37.0884] <TheQwertiest>
yea, for debugging purposes (though I've had to use like two or maybe three times)

[12:46:50.0898] <TheQwertiest>
for debugging GC problems that is

[12:46:51.0062] <tcampbell>
UNUSED1/2/3 are there :|

[12:47:28.0368] <TheQwertiest>
well, I need at least 4 xD

[12:47:45.0472] <tcampbell>
(I think we avoid changing the current order right now bcause it throws off telemetry data across versions)

[12:48:18.0431] <TheQwertiest>
what if I use NUM_REASONS + x? or is it actually checked somewhere?

[12:48:56.0422] <tcampbell>
It is `enum class` and I don't know if C++ thinks that is undefined behaviour

[12:49:21.0336] <tcampbell>
but that might work

[12:50:40.0824] <TheQwertiest>
```
A value of integral or enumeration type can be explicitly converted to a complete enumeration type. The value is unchanged if the original value is within the range of the enumeration values (7.2). Otherwise, the behavior is undefined.
```

[12:50:43.0323] <ptomato>
in GNOME we are using the FIREFOX reasons, fwiw

[12:50:46.0643] <TheQwertiest>
well crap xD

[12:51:08.0187] <ptomato>
I'll link you to the code, we dealt with that enum class stuff as well

[12:52:02.0129] <ptomato>
https://gitlab.gnome.org/GNOME/gjs/-/blob/master/gjs/jsapi-util.h#L571-597

[12:52:56.0397] <ptomato>
it would've been nicer to be able to do `enum class GCReason : JS::GCReason {...}` but that is not allowed, enum classes can only have a fundamental integer type as underlying storage

[12:53:15.0683] <TheQwertiest>
you should be careful not to exceed enum type tho, since it seem to be UB according to the spec...

[12:53:40.0250] <tcampbell>
This also seems like it should be an enum instead of enum class

[12:53:47.0938] <ptomato>
right, you have to have enough FIREFOX reasons to alias

[12:54:14.0326] <TheQwertiest>
that AND it must not have any missing members

[12:54:53.0669] <TheQwertiest>
e.g.
```
enum class E {
k1 = 1,
// if you use 2, then it's UB as well...
k2 = 3
}

[12:55:00.0590] <TheQwertiest>
 * e.g.
```
enum class E {
  k1 = 1,
  // if you use 2, then it's UB as well...
  k2 = 3
};
```

[12:56:45.0755] <TheQwertiest>
I'm 99% sure that the three big compilers will treat it as plain enums, but you can never know...

[12:56:58.0899] <TheQwertiest>
 * I'm 99% sure that the three big compilers will treat it as plain enums and won't crash and burn, but you can never know...

[12:57:39.0027] <TheQwertiest>
 * I'm 99% sure that the three big compilers will treat it as plain enums internally and won't crash and burn, but you can never know...


2021-07-21
[00:15:03.0427] <jonco>
ptomato, TheQwertiest : there a couple of reasons that do have meaning to the GC: MEM_PRESSURE and any with SHUTDOWN in them

[00:28:01.0171] <jonco>
I filed bug 1721549 to add some reserved reasons for embedders

[00:28:03.0171] <botzilla>
https://bugzil.la/1721549 — NEW (nobody) — Provide some GC reasons for embedders to use

[06:23:49.0390] <jonco>
what's the restriction on callWithABI calls callVM again?

[06:24:00.0129] <jonco>
 * what's the restriction on callWithABI vs callVM again?

[06:24:33.0656] <jonco>
I guess I'm really asking if it's ok to GC in a callWithABI call

[06:34:30.0184] <jonco>
ok, it looks like the answer is no it's not

[06:49:23.0482] <tcampbell>
callWithABI doesn't setup for stack tracing, but it is faster

[07:59:42.0377] <ptomato>
> <@jonco:mozilla.org> ptomato, TheQwertiest : there a couple of reasons that do have meaning to the GC: MEM_PRESSURE and any with SHUTDOWN in them

oh, this is really good to know, thanks for the heads up

[08:00:24.0560] <ptomato>
until we get the embedder GC reasons, it sounds like it's OK to override any other FIREFOX reasons that are not MEM_PRESSURE or SHUTDOWN?

[08:29:09.0062] <jonco>
ptomato: yes, that's fine

[09:05:46.0270] <mconley>
tcampbell: Hey - if you're around... do you know if it's supposed to be possible to use `<script type="module">` in browser.xhtml running in the parent process?

[09:07:30.0673] <tcampbell>
That is a question I'd be redirecting to yulia if she were here today

[09:09:24.0035] <tcampbell>
I want to say yes, but I think there were some caveats

[09:09:51.0783] <tcampbell>
(there is work in progress to clean up this mess though)

[09:19:12.0480] <nbp>
mconley: I would expect xhtml to use the same script loader code (as I do not know any others), and if there is a difference it would be in the way the scripts are registered. My guess would be that this is possible.

[09:20:21.0556] <nbp>
mconley: isn't there a limitation about inlined-script in browser.xhtml (which has nothing to do with modules)

[09:20:50.0265] <nbp>
in which case `<script type="module" src="" />` might be the answer?

[09:21:14.0125] <nbp>
 * mconley: isn't there a limitation about inlined-script in browser.xhtml / parent process (which has nothing to do with modules)

[09:22:25.0690] <mconley>
I suspect that limitation is mainly a performance-related convention

[09:22:59.0485] <mconley>
but yeah, it seems like I can use `<script type="module">` in browser.xhtml to some degree

[13:05:24.0139] <tcampbell>
module scripts are not cached by startup-cache or script-preloader right now

[14:08:00.0443] <tcampbell>
sfink: do you know how to do gcc builds locally with mozconfig? I tried to set CC/CXX and get weird failures about std::isnan

[14:08:31.0932] <tcampbell>
(I have a weird failure in shell-hazard build, so first attempt is to see if it is gcc related

[14:11:44.0357] <sfink>
tcampbell: there's a bug filed for it. We have old bug workaround functions that are now themselves causing problems. It's gcc version dependent. If you use the version of gcc that the hazard analysis uses, it'll work.

[14:11:53.0665] <sfink>
we do need to remove some of that code, though

[14:12:19.0640] <tcampbell>
dumb question: what is the best way to get specific gcc versions?

[14:12:24.0200] <sfink>
`mach hazards bootstrap` will pull the correct gcc

[14:12:28.0813] <tcampbell>
woah

[14:12:32.0430] <sfink>
then `mach hazards build-shell` will run with it

[14:12:43.0085] <sfink>
you'll need to unset `MOZCONFIG`

[14:13:09.0555] <sfink>
I did run into some problems running the analysis on the threadripper, but if it's just the shell analysis, it may work

[14:13:12.0748] <tcampbell>
I somehow broke the out-of-memory test https://treeherder.mozilla.org/logviewer?job_id=345921046&repo=try&lineNumber=44674

[14:13:30.0956] <tcampbell>
I must be leaking an edge or something

[14:13:55.0270] <tcampbell>
or broken something when I deleted the selfhosted zone

[14:14:53.0779] <sfink>
bug 1660405

[14:14:55.0181] <botzilla>
https://bugzil.la/1660405 — NEW (nobody) — Replace mozilla::IsNaN with std::isnan, etc.

[14:15:38.0213] <tcampbell>
/me avoids making eye contact with that bug

[14:16:06.0045] <tcampbell>
does a bug really exist when no one is watching?

[14:17:01.0542] <sfink>
heh

[14:18:39.0638] <tcampbell>
sfink: is there anything magic I need to do when running the binaries? (equiv to JS_GC_ZEAL for cgc)

[14:19:06.0532] <sfink>
which binaries? jsapi-tests?

[14:19:10.0552] <tcampbell>
yeah

[14:19:21.0856] <sfink>
oh, sm-rootanalysis

[14:19:39.0355] <sfink>
`JS_GC_ZEAL=GenerationalGC`

[14:20:05.0535] <sfink>
https://searchfox.org/mozilla-central/source/js/src/devtools/automation/variants/rootanalysis#6

[14:22:25.0932] <tcampbell>
hmm.. not reproducing :(

[14:24:11.0601] <sfink>
I feel I've run into that test before

[14:24:20.0442] <sfink>
have a meeting starting in a minute right now, though

[14:25:25.0151] <tcampbell>
I'll do some bisections and throw the stack up for review anyways

[14:29:47.0224] <TheQwertiest>
hey everyone!
a small question: do I need to be inside Realm to do smth like `JS::RootedValue jsValue( cx, /* JS::Heap<JS::Value> /* heapValue );`?

[14:29:55.0291] <TheQwertiest>
 * hey everyone!
a small question: do I need to be inside Realm to do smth like `JS::RootedValue jsValue( cx, /* JS::Heap<JS::Value> */ heapValue );`?

[14:31:23.0958] <TheQwertiest>
I kinda forgot which operations actually require realm

[15:22:17.0060] <tcampbell>
you do not need to be in a realm in order to root things (that just needs a JSContext). Generally if you might allocate a thing (even an error), you want an active realm

[15:31:43.0024] <TheQwertiest>
oh, nice, thanks!


2021-07-22
[21:24:49.0443] <leveryd>
can spidermonkey be used to deobfuscation javascript code? such as beautify below code.

[21:25:18.0149] <leveryd>
/*
// OPTIMIZE(deobfuscation): 
var d = ["1", "23", "4"]
var c = ["4", "23", "1"]
var s = "4231"
*/
var s="1 23 4"
var d = s.split("")
  , c = d.reverse();
s = c.join("");


[21:27:47.0591] <arai>
does the beautify mean formatting the code ?

[21:28:27.0906] <arai>
oh, I guess I misunderstood

[21:28:30.0214] <leveryd>
> <@arai:mozilla.org> does the beautify mean formatting the code ?

no. mean evaluate some simple expression.

[21:28:39.0262] <leveryd>
> <@arai:mozilla.org> does the beautify mean formatting the code ?

 * no. mean "evaluate some simple expression".

[21:29:27.0300] <arai>
what's the difference between evaluating it in regular way?

[21:32:06.0848] <arai>
do you want to pretty print each variable name and value?

[21:32:28.0704] <arai>
 * do you want to pretty print each variable name and value, after evaluating the whole code?

[21:37:47.0087] <arai>
if so, you can enumerate global object's properties and uneval each value, and format them into JS code manually

[21:38:32.0593] <arai>
in which layer are you going to do that? C++?

[23:50:17.0232] <leveryd>
> <@arai:mozilla.org> do you want to pretty print each variable name and value, after evaluating the whole code?

yes.but my scenario is complex. one function which has more than 20000 lines code, it has been obfuscated and so it is hard to read.for reading easy,i want to beatify some small code of this function.

[23:50:30.0991] <leveryd>
complete code is here https://gist.github.com/leveryd/d0562783282c65178303c2bcbcb9f3f2

[23:51:06.0148] <leveryd>
> <@arai:mozilla.org> do you want to pretty print each variable name and value, after evaluating the whole code?

 * yes.but my scenario is complex: one function which has more than 20000 lines code, it has been obfuscated and so it is hard to read.for reading easy,i want to beatify some small code of this function.

[23:55:03.0757] <arai>
what's expected output?

[23:57:02.0837] <arai>
if you want to apply some kind of filter to the code and get another JS function, it's not JS engine's job, but you'll need a dedicate program

[23:57:17.0757] <arai>
you could use parser API there tho

[23:58:29.0054] <arai>
so, feed the source to parser API, get AST, apply the filter on the AST, pretty print the AST to get filtered source

[00:00:43.0644] <leveryd>
input:

```
...
case 1:
      return e[0] = 0,
      e[2] = "sucof",
      e[8] = e[2].split(""),
      e[2] = e[8].reverse(),
      e[8] = e[2].join(""),
      e[2] = e[20] == e[8],
      r = e[2] ? 1996 : 2679,
      void 0;
...
```

expected output:

```
...
case 1:
  return e[0] = 0,
  e[2] = "sucof",
  e[8] = ["s", "u", "c", "o" ,"f"]
  e[2] = ["f", "o", "c", "u", "s"]
  e[8] = "focus"
  e[2] = e[20] == "focus"
  r = e[2] ? 1996 : 2679,
...
```

or more simplified

```
...
case 1:
  return e[0] = 0,
  e[8] = "focus"
  e[2] = e[20] == "focus"
  r = e[2] ? 1996 : 2679,
...
```

[00:03:19.0983] <Nicolò>
You can try with https://prepack.io/repl.html, which partially evaluates your code

[14:50:07.0421] <sfink>
tcampbell: apologies for dragging you in, but g:landium could not reproduce that `mozilla::isNaN` thing and now neither can I. What were you running when you hit it? `autospider.py`? With what args, or at least what variant? And what version is your system `gcc`, not that I would expect it to be used.

[14:51:22.0303] <tcampbell>
sfink: `./mach build` + a mozconfig that said CC=gcc CXX=g++

[14:51:38.0307] <tcampbell>
my system gcc is 9.3

[14:53:17.0199] <sfink>
cool, thanks


2021-07-23
[02:32:15.0172] <Redfire>
What does `` even do?

[02:32:34.0906] <Redfire>
 * What does `JS_ForwardGetElementTo` even do?

[02:32:48.0041] <Redfire>
<https://searchfox.org/mozilla-central/source/js/src/vm/PropertyAndElement.cpp#603>

[02:36:36.0839] <Redfire>
Also <https://searchfox.org/mozilla-central/source/js/public/PropertyAndElement.h#465> preferrably
`JS_AlreadyHasOwnElement`


[02:43:09.0314] <evilpie>
> <@redfire75369:mozilla.org> What does `JS_ForwardGetElementTo` even do?

This is like https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get where you can specify a target and a reciever

[02:44:30.0455] <evilpie>
> <@redfire75369:mozilla.org> Also <https://searchfox.org/mozilla-central/source/js/public/PropertyAndElement.h#465> preferrably
> `JS_AlreadyHasOwnElement`
> 

You probably don't need this. This is like HasOwnProperty, but meant for calling in resolve hooks

[02:45:13.0345] <Redfire>
I mean, if its arrays which Is what I'm using the `Element` methods for, I guess I don't need `HasOwnProperty` either?


[02:45:51.0327] <Redfire>
 * I mean, if its arrays which Is what I'm using the `JS_*Element` methods for, I guess I don't need `HasOwnProperty` either?

[02:45:59.0463] <Redfire>
 * I mean, if its arrays which Is what I'm using the `JS_{*}Element` methods for, I guess I don't need `HasOwnProperty` either?

[02:47:37.0096] <evilpie>
I am not sure what you are trying to do

[02:48:07.0093] <evilpie>
Just JS_GetProperty* and JS_GetElement is usually enough

[02:51:33.0098] <Redfire>
nah, was making an wrapper to make stuff easier, which is why I was trying to implement as many of the respective functions (which are relatively common) as possible

[08:40:04.0127] <TheQwertiest>
> <@redfire75369:mozilla.org> nah, was making an wrapper to make stuff easier, which is why I was trying to implement as many of the respective functions (which are relatively common) as possible

note that there is overhead in JS<>Native calls, so (if it matters in your case) it might be actually more beneficial performance-wise to limit the exposed API (as to avoid an unintended misuse by users)

[08:40:49.0689] <TheQwertiest>
> <@redfire75369:mozilla.org> nah, was making an wrapper to make stuff easier, which is why I was trying to implement as many of the respective functions (which are relatively common) as possible

 * note that there is overhead in JS<>Native calls, so (if it matters in your case) it might be actually more beneficial performance-wise to limit the exposed API (as to avoid an unintended misuse and the following performance hit)

[08:59:55.0975] <TheQwertiest>
e.g. I had the following case:
- an array-like native object and a lot of native methods that access this object.
- naively, I made a transparent automatic transformation from this native object to JS array (and vice-versa).
this slowed down all corresponding operations massively, because this generated a huge JS<>native overhead


[09:00:04.0112] <TheQwertiest>
 * e.g. I had the following case:
- an array-like native object and a lot of native methods that access this object.
- naively, I made a transparent automatic transformation from this native object to JS array (and vice-versa).

this slowed down all corresponding operations massively, because this generated a huge JS<>native overhead

[09:05:23.0865] <TheQwertiest>
 * e.g. I had the following case:
Native-side had an array-like object and a lot of methods that access this object. Naively, I made a transparent automatic transformation from this native object to JS array (and vice-versa).
This slowed down all corresponding operations massively, because this generated a huge JS<>native overhead

[09:06:57.0764] <TheQwertiest>
 * e.g. I had the following case:
Native-side had an array-like object and a lot of methods that access this object (which were exposed to JS-side as well). Naively, I made a transparent automatic transformation from this native object to JS array (and vice-versa).
This slowed down all corresponding operations massively, because this generated a huge JS<>native overhead

[09:31:43.0294] <TheQwertiest>
 * for example I had the following case:
Native-side had an array-like object and a lot of methods that access this object (which were exposed to JS-side as well). Naively, I made a transparent automatic transformation from this native object to JS array (and vice-versa).
This slowed down all corresponding operations massively, because this generated a huge JS<>native overhead

[13:14:03.0868] <mgaudet>
confession: Irked by Queueing and Queuing both being accepted spellings. 

[13:14:06.0936] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2021-07-25
[06:46:12.0000] <Standard8>
If we removed the Components.classes, Components.utils, Components.interfaces, Components.results interfaces, and just kept the Cc, Cu, Ci and Cr ones, would that save on any overhead?

We've largely removed uses of the long form from most of mozilla-central now, apart from tests.

With ESLint, it shouldn't be too hard to finish off, and hence I'm wondering if we removing the long form would save us anything in particular.

[07:23:39.0020] <arai>
not something specific to Components.* tho:
 * small memory win for not having extra global property "Components", and its object representation
 * small memory win for not having those property names in runtime atom table
 * if there were still some use of long-form in chrome-priv code:
   * small perf win in parser for shorter text
   * small win for disk usage for not storing long form names in XDR cache


[07:48:47.0198] <vringar>
Hey,
is there a single piece of code in spidermonkey that all access to native wrappers has to go through?
I'm currently writing my bachelor's thesis on observing WebAPI usage from a WebExtension and started prototyping by instrumenting individual callsites ([see this very WIP patch](https://phabricator.services.mozilla.com/D110681) or [this blog post](https://zabka.it/bachelor/01-introduction/#implementation)  for additional context). 
Is there a more generalized approach possible in the engine?

[07:50:37.0482] <vringar>
 * Hey,
is there a single piece of code in spidermonkey that all access to native code has to go through?
I'm currently writing my bachelor's thesis on observing WebAPI usage from a WebExtension and started prototyping by instrumenting individual callsites ([see this very WIP patch](https://phabricator.services.mozilla.com/D110681) or [this blog post](https://zabka.it/bachelor/01-introduction/#implementation)  for additional context).
Is there a more generalized approach possible in the engine?

[07:58:30.0809] <arai>
vringar: in interpreter execution, all native function call will go through here  https://searchfox.org/mozilla-central/rev/fffc51a40a341eefced15420d12e15419122b63a/js/src/vm/Interpreter.cpp#379-408

[07:59:39.0581] <vringar>
And once it's been JIT-ed it wouldn't?

[08:00:04.0474] <arai>
it depends on the native function

[08:02:23.0862] <arai>
for experimental purpose, one option is to disable all JITs, so that that kind of instrumentation can be simpler (but of course it will be slow)

[08:03:13.0430] <arai>
you can disable them by setting preferences  https://searchfox.org/mozilla-central/rev/fffc51a40a341eefced15420d12e15419122b63a/modules/libpref/init/StaticPrefList.yaml#5722-5738

[08:03:23.0497] <arai>
those 3 preferences correspond to each JIT layer

[08:07:09.0398] <arai>
oh, there seems to be debugger API to listen to native function call  https://searchfox.org/mozilla-central/rev/fffc51a40a341eefced15420d12e15419122b63a/js/src/doc/Debugger/Debugger.md#153-174

[08:07:32.0591] <arai>
that might be simpler

[08:10:47.0144] <vringar>
👀 that API seems exactly like the kind of thing I need to scale this instrumentation. Thank you!

[08:11:27.0263] <vringar>
(I don't know what half the words in the documentation you linked mean, but I'm assuming I can read up on that in the doc folder.

[08:11:31.0227] <vringar>
 * (I don't know what half the words in the documentation you linked mean, but I'm assuming I can read up on that in the doc folder.)

[08:11:35.0498] <vringar>
Thank you so much!

[08:12:15.0439] <arai>
if you have questions, feel free to ask here :)

[08:30:26.0497] <vringar>
What would be the best way to create a debugger in every single window (Including iframes)?

[08:41:07.0511] <arai>
instead of specific page/frame?

[08:47:23.0006] <vringar>
Whatever is easier. I wanted to be more precise than "into everything", sorry.

[08:48:08.0355] <vringar>
 * Whatever is easier. I wanted to be more precise than "into everything", sorry. I only care about content, so I don't want to accidentally capture calls in the chrome code or on privileged sites.

[08:51:05.0439] <arai>
the question is, does the consumer of the new API listen to all calls across all tabs, instead of listening to calls in specific page(s)?

[08:51:55.0654] <vringar>
Yes, that's the plan. (That's also how the thing that I'm trying to replace works, and I don't aim to be better than it)

[08:55:19.0613] <arai>
not sure the "best way" tho, you'd want to hook into somewhere in the initialization of the JS global, or somewhere WebExtension's content script hooks into

[08:58:19.0005] <vringar>
Thank you! I'm going to write this down and try to experiment with it later in the week. I'll come back here when I make progress or have more questions.

[09:06:16.0088] <arai>
one more solution than debugger API.  if it's only about web API, you could modify the bindgen (binding generator) to add hook there.  bindgen generates c++ code from webidl

[09:09:37.0575] <arai>
generator is https://searchfox.org/mozilla-central/source/dom/bindings/Codegen.py  , and example binding https://searchfox.org/mozilla-central/source/__GENERATED__/dom/bindings/HTMLScriptElementBinding.cpp

[09:09:56.0798] <arai>
 * generator is https://searchfox.org/mozilla-central/source/dom/bindings/Codegen.py  , and example binding `https://searchfox.org/mozilla-central/source/__GENERATED__/dom/bindings/HTMLScriptElementBinding.cpp`

[09:13:53.0949] <vringar>
Yeah, that was my initial idea, but 23k LoC of parser generator code was too intimidating for me 😅


2021-07-26
[02:14:04.0526] <nbp>
vringar: are you monitoring any call, or only DOM calls? Would you be monitoring calls to `Math.sin` for example?

[02:23:38.0588] <vringar>
nbp  Math.sin would also be interesting.
The context for this monitoring is mostly privacy research.
What we enable by default in the old instrument are WebRTC, WebGL and Audio APIs. [See here for default config](https://www.github.com/mozilla/OpenWPM/tree/master/openwpm%2Fjs_instrumentation_collections%2Ffingerprinting.json)
However if researchers care about other APIs (iirc you could until recently also fingerprint via our math libraries) they should be able to monitor them as well.

[02:24:53.0664] <vringar>
(so at least from what I understand the Dom APIs might be the least interesting, as they don't expose information about the users machine)

[02:25:29.0069] <nbp>
vringar: The reason I am asking is that the JS engine has tons of library functions which are optimized for speed, and inlined in the JIT. IF your investigation were to be limited to DOM functions, then we have a clear entry point, and this is what the JS engine uses to communicate to the outside world. 

[02:26:36.0210] <nbp>
Sorry, when I say DOM, I mean everything outside ECMAScript spec.

[02:26:54.0463] <nbp>
I meant Web APIs.

[02:28:26.0095] <vringar>
Oh, so math.sin is not a web API but part of the ECMAScript spec?

[02:28:49.0914] <vringar>
In thar case I'm just going to declare it out of scope for my work.

[02:29:45.0416] <nbp>
Then you might be interested by the fact that we have code in charge of generating code for our Web APIs bindings.

[02:30:28.0110] <vringar>
> <@arai:mozilla.org> generator is https://searchfox.org/mozilla-central/source/dom/bindings/Codegen.py  , and example binding `https://searchfox.org/mozilla-central/source/__GENERATED__/dom/bindings/HTMLScriptElementBinding.cpp`

You mean the codegen.py that arai linked me yesterday?

[02:30:33.0830] <nbp>
even if some bits are optimized in our optimizing JIT, to skip most of the work, this would be a simple way to completeness.

[02:30:40.0698] <nbp>
yes, this is what I mean

[02:31:51.0898] <vringar>
Is there any writing outside of the source code on this generator?
I'd love to have my code there, but I'm simply overwhelmed by the sheer size of it.

[02:35:17.0823] <nbp>
https://firefox-source-docs.mozilla.org/dom/webIdlBindings/index.html — This does not directly answer your question but this document describe the input of this code generator.

[04:12:08.0640] <l11d>
anba: does the comment regarding MConcat in https://bugzilla.mozilla.org/show_bug.cgi?id=1720032#c8 still apply? i.e., is another ticket still necessary?

[11:34:00.0699] <sfink>
I'm realizing that I'm far more likely to tip a random project developer (via eg "buy me a coffee" or whatever) if I'm filing a bug, which has me pondering perverse incentives yet again.

[15:42:14.0398] <tcampbell>
sfink: I seem to be getting failures in `jsapi-tests/testGCOutOfMemory.cpp` on the shell hazard build still. The failures start once I stop executing the self-hosted script and remove the self-host-initial-GC. Any ideas how what to look for?

[16:25:22.0261] <tcampbell>
confession: I don't know the difference between the hazard analysis and root analysis jobs..

[16:25:24.0390] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[16:32:06.0836] <tcampbell>
aha! once I use the right job I can reproduce locally

[16:34:08.0265] <sfink>
oops, sorry, didn't see this

[16:35:14.0753] <tcampbell>
so root analysis is just a normal clang build with a certain JS_GC_ZEAL?

[16:35:19.0193] <sfink>
yes

[16:35:23.0997] <tcampbell>
derp

[16:35:35.0483] <sfink>
sorry, the naming is a bit unfortunate, and somewhat grandfathered at this point

[16:35:53.0281] <sfink>
I have a dumb question.

[16:35:58.0816] <sfink>
the question is dumb, even if the answer isn't

[16:36:09.0332] <sfink>
how do we get errors to be in the right compartment?

[16:36:41.0658] <tcampbell>
as in, how much realm/dom machinery do we need to invoke first?

[16:36:50.0083] <sfink>
say I'm doing a GetProperty and it throws. If I have a CCW, then presumably I unwrapped the object and entered its realm, did the GetProperty, and it threw the error in that realm.

[16:36:59.0251] <sfink>
but shouldn't the resulting error be in the outer calling realm?

[16:37:56.0156] <tcampbell>
sfink: lets set a meeting tomorrow about this and I'll try to remember what Jason explained to me last time

[16:38:32.0104] <sfink>
ok, I'm mostly open. Pick a time?

[16:39:17.0839] <sfink>
if I could figure out how to get GetProperty to throw an error other than OOM, I could test in the shell.

[16:41:56.0485] <tcampbell>
sent an invite. Hopefully I remember more tomorrow :|

[16:44:59.0356] <sfink>
great, thanks!

[16:45:14.0581] <sfink>
ironically, this was *not* in the context of Streams

[16:45:30.0818] <sfink>
though I will certainly need to understand it for real for Streams

[16:46:00.0086] <sfink>
this is for a basic code review of `Error` structured cloning

[16:46:06.0307] <sfink>
"basic"

[16:46:34.0135] <tcampbell>
streams gets fun because you get more than two possible realms

[16:47:24.0957] <sfink>
right

[16:48:31.0490] <sfink>
I've run into this a little with typed arrays, because a typed array has an array buffer and they could be in different realms from the user's POV. So there are sort of 3 in play there too (including the execution context).

[16:49:18.0751] <sfink>
but they mostly sidestep the problem with tricks


2021-07-27
[23:50:56.0100] <jandem>
exceptions are wrapped in the context's compartment at the point where you call `cx->getPendingException`

[03:49:08.0892] <nbp>
jandem: arenþ Private slots used by embedders as well?

[03:49:14.0040] <nbp>
 * jandem: aren't Private slots used by embedders as well?

[04:12:46.0036] <jandem>
nbp: yeah, they'll have to change too unfortunately

[04:24:08.0385] <mdashti>
Hi, I want to upgrade the SpiderMonkey embedded into MongoDB. It's been using `60.3.0esr` and I want to upgrade to `91.0b7`. Is there any tutorial on how to embed a recent version of SpiderMonkey to another project? I found this: https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/next/docs/Building%20SpiderMonkey.md, which suggests:

```
cd js/src
mkdir _build
cd _build
../configure --disable-jemalloc --with-system-zlib \
    --with-intl-api --enable-debug --enable-optimize
make
make install  # sudo if necessary
```

However, there's no `configure` in `js/src`. If I do a `autoconf`, I get this error:
```
autoconf                                         ubuntu@ip-10-122-9-106 04:22:22
../../build/autoconf/hooks.m4:6: error: defn: undefined macro: AC_INIT_PREPARE
../../build/autoconf/hooks.m4:6: the top level
autom4te: /usr/bin/m4 failed with exit status: 1

```

As far as I see, using `configure` is not the suggested way of compiling SpiderMonkey (suggested in https://firefox-source-docs.mozilla.org/js/build.html).

Now, I'm stuck and would appreciate any help or suggestion.

[04:24:59.0635] <wingo>
you have to use autoconf2.13

[04:25:09.0655] <arai>
`sh ./configure.in`, or `cp configure.in configure; ./configure` would work

[04:25:13.0234] <wingo>
but there are ways to build using mach that are better supported

[04:28:00.0680] <mdashti>
Thanks wingo 

[04:28:09.0275] <mdashti>
 * Thanks wingo and arai 

[04:28:46.0963] <mdashti>
Another newbie question: what are the dependencies required for SpiderMonkey. Is `rust` a dependency?

[04:30:18.0882] <jandem>
yes it is

[04:32:32.0979] <mdashti>
Thanks jandem. When I search under `js/src` I find a few rust files. Is it possible to avoid the dependency on rust by excluding those?

[04:32:56.0123] <Ms2ger 💉💉>
No

[04:33:38.0441] <mdashti>
Thanks Ms2ger 💉💉 . Is there a place that lists all the dependencies for SpiderMonkey?

[04:34:30.0498] <Ms2ger 💉💉>
Hmmm

[04:34:40.0043] <Ms2ger 💉💉>
Maybe somewhere reachable from https://firefox-source-docs.mozilla.org/js/build.html ?

[04:36:02.0407] <jandem>
there's also [some info here](https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/next/docs/Building%20SpiderMonkey.md)

[04:37:59.0307] <mdashti>
> <@jandem:mozilla.org> there's also [some info here](https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/next/docs/Building%20SpiderMonkey.md)

I'd looked at this one, but seem that it doesn't list everything, e.g., Rust

[04:39:55.0414] <jandem>
apart from Rust (and Rust crates) I can't think of a hard dependency we've added since ESR 60, but I could be missing something of course

[04:41:34.0609] <mdashti>
Another question: I'm using `clang++`:

```
$ clang++ --version
MongoDB clang version 7.0.1 (tags/RELEASE_701/final) (based on LLVM 7.0.1)
Target: x86_64-mongodb-linux
Thread model: posix
InstalledDir: /opt/mongodbtoolchain/v3/bin
```

But when I want to build SpiderMonkey, (via either `make` or `mach build`), I get this error:
```
The following warnings were emitted during compilation:

warning: In file included from wrappers.cpp:11:
warning: In file included from /home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/dist/include/mozilla/Assertions.h:342:
warning: /home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/dist/system_wrappers/type_traits:3:15: fatal error: 'type_traits' file not found
warning: #include_next <type_traits>
warning:               ^~~~~~~~~~~~~
warning: 1 error generated.

error: failed to run custom build command for `mozglue-static v0.1.0 (/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/mozglue/static/rust)`

Caused by:
  process didn't exit successfully: `/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/debug/build/mozglue-static-6591852ff4a484c3/build-script-build` (exit status: 1)
  --- stdout
  TARGET = Some("x86_64-unknown-linux-gnu")
  OPT_LEVEL = Some("2")
  HOST = Some("x86_64-unknown-linux-gnu")
  CXX_x86_64-unknown-linux-gnu = None
  CXX_x86_64_unknown_linux_gnu = Some("/opt/mongodbtoolchain/v3/bin/clang++")
  CXXFLAGS_x86_64-unknown-linux-gnu = None
  CXXFLAGS_x86_64_unknown_linux_gnu = Some("-std=gnu++17 -I/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/dist/system_wrappers -include /home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/config/gcc_hidden.h -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2 -fstack-protector-strong -DDEBUG=1 -DEXPORT_JS_API -DMOZ_HAS_MOZGLUE -I/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/rust -I/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/js/src/rust -I/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/dist/include -DMOZILLA_CLIENT -include /home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/js/src/js-confdefs.h -Qunused-arguments -Qunused-arguments -Wall -Wbitfield-enum-conversion -Wdeprecated-this-capture -Wempty-body -Wignored-qualifiers -Wpointer-arith -Wshadow-field-in-constructor-modified -Wshadow-uncaptured-local -Wsign-compare -Wtype-limits -Wno-error=tautological-type-limit-compare -Wunreachable-code -Wunreachable-code-return -Wno-invalid-offsetof -Wclass-varargs -Wfloat-overflow-conversion -Wfloat-zero-conversion -Wloop-analysis -Wno-range-loop-analysis -Wc++2a-compat -Wcomma -Wimplicit-fallthrough -Wstring-conversion -Wno-inline-new-delete -Wno-error=deprecated-declarations -Wno-error=array-bounds -Wno-error=backend-plugin -Wno-error=return-std-move -Wno-error=atomic-alignment -Wformat -Wformat-security -Wno-gnu-zero-variadic-macro-arguments -Wno-unknown-warning-option -fno-sized-deallocation -fno-aligned-new -fPIC -fno-rtti -ffunction-sections -fdata-sections -fno-exceptions -fno-math-errno -pthread -pipe -g -O3 -fno-omit-frame-pointer -funwind-tables -DMOZILLA_CONFIG_H")
  CRATE_CC_NO_DEFAULTS = None
  DEBUG = Some("true")
  running: "/opt/mongodbtoolchain/v3/bin/clang++" "-O2" "-ffunction-sections" "-fdata-sections" "-fPIC" "-g" "-fno-omit-frame-pointer" "--target=x86_64-unknown-linux-gnu" "-std=gnu++17" "-I/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/dist/system_wrappers" "-include" "/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/config/gcc_hidden.h" "-U_FORTIFY_SOURCE" "-D_FORTIFY_SOURCE=2" "-fstack-protector-strong" "-DDEBUG=1" "-DEXPORT_JS_API" "-DMOZ_HAS_MOZGLUE" "-I/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/rust" "-I/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/js/src/rust" "-I/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/dist/include" "-DMOZILLA_CLIENT" "-include" "/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/js/src/js-confdefs.h" "-Qunused-arguments" "-Qunused-arguments" "-Wall" "-Wbitfield-enum-conversion" "-Wdeprecated-this-capture" "-Wempty-body" "-Wignored-qualifiers" "-Wpointer-arith" "-Wshadow-field-in-constructor-modified" "-Wshadow-uncaptured-local" "-Wsign-compare" "-Wtype-limits" "-Wno-error=tautological-type-limit-compare" "-Wunreachable-code" "-Wunreachable-code-return" "-Wno-invalid-offsetof" "-Wclass-varargs" "-Wfloat-overflow-conversion" "-Wfloat-zero-conversion" "-Wloop-analysis" "-Wno-range-loop-analysis" "-Wc++2a-compat" "-Wcomma" "-Wimplicit-fallthrough" "-Wstring-conversion" "-Wno-inline-new-delete" "-Wno-error=deprecated-declarations" "-Wno-error=array-bounds" "-Wno-error=backend-plugin" "-Wno-error=return-std-move" "-Wno-error=atomic-alignment" "-Wformat" "-Wformat-security" "-Wno-gnu-zero-variadic-macro-arguments" "-Wno-unknown-warning-option" "-fno-sized-deallocation" "-fno-aligned-new" "-fPIC" "-fno-rtti" "-ffunction-sections" "-fdata-sections" "-fno-exceptions" "-fno-math-errno" "-pthread" "-pipe" "-g" "-O3" "-fno-omit-frame-pointer" "-funwind-tables" "-DMOZILLA_CONFIG_H" "-I" "/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/js/src" "-I" "/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/dist/include" "-DMOZ_HAS_MOZGLUE" "-o" "/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/x86_64-unknown-linux-gnu/debug/build/mozglue-static-771c2dd5635951dd/out/wrappers.o" "-c" "wrappers.cpp"
  cargo:warning=In file included from wrappers.cpp:11:
  cargo:warning=In file included from /home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/dist/include/mozilla/Assertions.h:342:
  cargo:warning=/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/dist/system_wrappers/type_traits:3:15: fatal error: 'type_traits' file not found
  cargo:warning=#include_next <type_traits>
  cargo:warning=              ^~~~~~~~~~~~~
  cargo:warning=1 error generated.
  exit status: 1

  --- stderr


  error occurred: Command "/opt/mongodbtoolchain/v3/bin/clang++" "-O2" "-ffunction-sections" "-fdata-sections" "-fPIC" "-g" "-fno-omit-frame-pointer" "--target=x86_64-unknown-linux-gnu" "-std=gnu++17" "-I/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/dist/system_wrappers" "-include" "/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/config/gcc_hidden.h" "-U_FORTIFY_SOURCE" "-D_FORTIFY_SOURCE=2" "-fstack-protector-strong" "-DDEBUG=1" "-DEXPORT_JS_API" "-DMOZ_HAS_MOZGLUE" "-I/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/rust" "-I/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/js/src/rust" "-I/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/dist/include" "-DMOZILLA_CLIENT" "-include" "/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/js/src/js-confdefs.h" "-Qunused-arguments" "-Qunused-arguments" "-Wall" "-Wbitfield-enum-conversion" "-Wdeprecated-this-capture" "-Wempty-body" "-Wignored-qualifiers" "-Wpointer-arith" "-Wshadow-field-in-constructor-modified" "-Wshadow-uncaptured-local" "-Wsign-compare" "-Wtype-limits" "-Wno-error=tautological-type-limit-compare" "-Wunreachable-code" "-Wunreachable-code-return" "-Wno-invalid-offsetof" "-Wclass-varargs" "-Wfloat-overflow-conversion" "-Wfloat-zero-conversion" "-Wloop-analysis" "-Wno-range-loop-analysis" "-Wc++2a-compat" "-Wcomma" "-Wimplicit-fallthrough" "-Wstring-conversion" "-Wno-inline-new-delete" "-Wno-error=deprecated-declarations" "-Wno-error=array-bounds" "-Wno-error=backend-plugin" "-Wno-error=return-std-move" "-Wno-error=atomic-alignment" "-Wformat" "-Wformat-security" "-Wno-gnu-zero-variadic-macro-arguments" "-Wno-unknown-warning-option" "-fno-sized-deallocation" "-fno-aligned-new" "-fPIC" "-fno-rtti" "-ffunction-sections" "-fdata-sections" "-fno-exceptions" "-fno-math-errno" "-pthread" "-pipe" "-g" "-O3" "-fno-omit-frame-pointer" "-funwind-tables" "-DMOZILLA_CONFIG_H" "-I" "/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/js/src" "-I" "/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/dist/include" "-DMOZ_HAS_MOZGLUE" "-o" "/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/x86_64-unknown-linux-gnu/debug/build/mozglue-static-771c2dd5635951dd/out/wrappers.o" "-c" "wrappers.cpp" with args "clang++" did not execute successfully (status code exit status: 1).


warning: build failed, waiting for other jobs to finish...
warning: 18 warnings emitted

error: build failed
/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/config/makefiles/rust.mk:391: recipe for target 'force-cargo-library-build' failed
make[3]: *** [force-cargo-library-build] Error 101
make[3]: Leaving directory '/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build/js/src/rust'
/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/config/recurse.mk:72: recipe for target 'js/src/rust/target' failed
make[2]: *** [js/src/rust/target] Error 2
make[2]: Leaving directory '/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build'
/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/config/recurse.mk:32: recipe for target 'compile' failed
make[1]: *** [compile] Error 2
make[1]: Leaving directory '/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/js/src/_build'
/home/ubuntu/mongo/src/third_party/mozjs-60/mozilla-release/config/rules.mk:355: recipe for target 'default' failed
make: *** [default] Error 2
```

Is it because of my `clang++` version? Have you encountered this issue before?

[04:50:38.0197] <arai>
according to https://firefox-source-docs.mozilla.org/code-quality/coding-style/using_cxx_in_firefox_code.html , current minimal requirement for clang version is 5.0. so using 7.0 won't be a problem

[04:51:28.0312] <arai>
but the log looks strange, that fatal error is marked as warning

[04:53:23.0357] <mdashti>
> <@arai:mozilla.org> according to https://firefox-source-docs.mozilla.org/code-quality/coding-style/using_cxx_in_firefox_code.html , current minimal requirement for clang version is 5.0. so using 7.0 won't be a problem

May I ask what's the version you're using?

[04:54:10.0064] <arai>
12.0.1. that's installed by `./mach bootstrap` command, into `~/.mozbuild/clang/bin/`

[04:54:53.0396] <arai>
anyway, can you try compiling minimal C++ code that includes `type_traits` ?  does it work outside of build system?

[04:55:00.0265] <arai>
 * anyway, can you try compiling minimal C++ code that includes `type_traits` ?  does it work outside of SpiderMonkey's build system?

[04:55:51.0381] <mdashti>
> <@arai:mozilla.org> anyway, can you try compiling minimal C++ code that includes `type_traits` ?  does it work outside of SpiderMonkey's build system?

How can I do "compiling minimal C++ code that includes `type_traits`?"

[04:57:53.0718] <arai>
create a temporary file `test.cpp` with `#include <type_traits>` content, and run `PATH_TO/clang++ -std=gnu++17 test.cpp` maybe?

[05:03:06.0573] <mdashti>
> <@arai:mozilla.org> create a temporary file `test.cpp` with `#include <type_traits>` content, and run `PATH_TO/clang++ -std=gnu++17 test.cpp` maybe?

Ah, that's what you mean. I though there's a "minimal C++ code" for SpiderMonkey 😁!

```
~/mongo master ⇣16⇡1 *34 !1478 ?5 ❯ cat test.cpp 
#include <type_traits>
#include <iostream>
int main() {
	std::cout << "Hellow World!" << std::endl;
	return 0;
}
~/mongo master ⇣16⇡1 *34 !1478 ?5 ❯ clang++ test.cpp && ./a.out
Hellow World!
```

It works.

[05:04:25.0074] <arai>
hm, in that case some command line parameter (or maybe environment variable) used in the build system is causing the issue?

[05:04:44.0186] <arai>
the output you've pasted above contains the command line (`running: ...` line)

[05:05:18.0692] <arai>
can you try checking if any of them are related

[05:05:20.0372] <arai>
 * can you try checking if any of them are related?

[05:08:00.0479] <arai>
maybe the system wrappers are causing trouble?  I'm not sure the details tho

[05:08:29.0266] <mdashti>
> <@arai:mozilla.org> maybe the system wrappers are causing trouble?  I'm not sure the details tho

What do you mean by "system wrappers"?

[05:09:10.0105] <arai>
`dist/system_wrappers/type_traits` file there

[05:09:47.0953] <arai>
it looks like we're wrapping system headers with them, and the error happens when searching the next file after `type_traits` there

[05:34:40.0095] <mdashti>
arai added `/home/ubuntu/.mozbuild/clang/bin` to my path and apparently, it's making some progress. Then,  it's either my specific `clang++` version that's missing some headers, or maybe it's worth revisiting the minimum `clang++` version requirement.

[05:57:29.0142] <mdashti>
Ask for opinion: Let's say if another system that already embeds SpiderMonkey ESR 60 wants to upgrade to 91 (e.g., MongoDB), but there's a hard constraint on not introducing a dependency on Rust (as it wants to remain a C++-only repo), is there a workaround? Is there a way to avoid having some features in SpiderMonkey that's implemented in Rust and only capture the C++ part of it?

[06:15:31.0455] <jandem>
mdashti: the encoding_rs dependency is a hard one, it's used for character encoding/conversion. A no-rust build would be quite a lot of work and isn't something we support

[06:29:03.0458] <tcampbell>
jonco: ping? I have questions about jsapi-tests/testGCOutOfMemory.cpp

[06:30:57.0741] <jonco>
tcampbell: hey

[06:31:22.0303] <tcampbell>
With my self-host changes, I no longer use the nursery during startup which seems to break the test case

[06:31:50.0445] <tcampbell>
 * With my self-host changes, I no longer use the nursery during startup which seems to break the test case when running JS_GC_ZEAL=GenerationalGC

[06:32:28.0944] <tcampbell>
There are a bunch of comments in the test about this having weird issues with nursery behaviour, but I do not quite understand them.

[06:33:09.0581] <tcampbell>
Increasing the heap from 1MB to 4MB does solve problem, but that seems like wrong fix

[06:34:41.0448] <jonco>
*reading comments*

[06:35:45.0844] <jonco>
I'm not sure why it would fail with generational GC zeal because it disables that in createContext

[06:36:47.0513] <jonco>
I don't really understand the comments either

[06:37:27.0595] <jonco>
oh, I think you need to GC after setting the max nursery size for it to take effect, that may help

[06:37:48.0294] <jonco>
I expect the failure is unrelated to your changes and just because the test is weird

[06:37:56.0244] <tcampbell>
the disabling does evict the nursery

[06:38:11.0882] <tcampbell>
agreed that it is probably the test

[06:38:23.0677] <tcampbell>
should I just set size to 4mb and open a followup bug?

[06:38:48.0834] <jonco>
yes that's fine, I'll try and work out what this this is all about

[06:38:58.0036] <jonco>
 * yes that's fine, I'll try and work out what this test is all about

[06:39:13.0747] <jonco>
it doesn't look like a terribly useful one tbh

[06:39:51.0422] <tcampbell>
no, but I wanted to confirm there aren't subtle impacts to dynamic nursery sizing or anything

[06:40:06.0365] <jonco>
sure

[07:01:24.0423] <sfink>
jandem: sorry, I didn't mean to ask how the exception gets wrapped into the correct compartment. I'm talking about the realm that the underlying Error object is in, as in what Error.prototype does it chain to?

[07:03:48.0137] <sfink>
eg what I could test with `g = newGlobal({newCompartment: true}); Error.prototype.whence = 'main global'; g.eval("Error.prototype.whence = 'other global'"); try { g.eval(...) } catch (e) { print(e.whence) }`

[07:05:24.0098] <Ms2ger 💉💉>
Objects were a mistake

[07:08:18.0727] <jandem>
it'd be "other global"? based on `cx->global` when the error object is allocated

[07:11:41.0248] <sfink>
right, in that case it would *probably* be that, assuming the `...` isn't doing something the crosses compartments. But generally speaking, if I do something as simple as GetOwnProperty on a CCW and it throws, it seems to me like the way we'd implement that is with an `AutoRealm` on the unwrapped object.

[07:11:56.0476] <sfink>
which is fine most of the time, since the cause of the Error *is* in that compartment

[07:13:10.0717] <sfink>
but if I'm doing some operation (here, structured cloning) that semantically lives in the main global, and it encounters an error while doing its thing, but the error is something like retrieving something disallowed by the cloning algorithm, then I would think we'd want the Error to be in "other global".

[07:13:43.0512] <sfink>
hm, I guess maybe writing that out kind of answered my question

[07:14:05.0396] <sfink>
if it is a structured cloning error, then I should be throwing the error while in the cloning compartment, not some random clone object's compartment

[07:14:51.0157] <sfink>
but if the error is triggered by an operation on a CCW object, then the error should properly be in that object's compartment -- that's not an error running the cloning algorithm, that's an error retrieving something from the object

[07:15:06.0392] <sfink>
 * if it is a structured cloning error, then I should be throwing the error while in the cloning compartment, not some random cloned object's compartment

[07:16:35.0385] <sfink>
it seems important to be careful, since at the point of discovering a structured clone related error, you could very well be in some random compartment and you'd better hang onto whatever you need to remember in order to throw the right error after you get back out

[07:17:23.0321] <sfink>
(and if you're doing something even trickier, like with Streams you're manipulating objects potentially in multiple different compartments, you have to be even more careful)

[07:17:40.0641] <sfink>
or at least, that's my current understanding until someone beats something more sensible into me

[07:18:08.0917] <sfink>
 * right, in that case it would _probably_ be that, assuming the `...` isn't doing something that crosses compartments. But generally speaking, if I do something as simple as GetOwnProperty on a CCW and it throws, it seems to me like the way we'd implement that is with an `AutoRealm` on the unwrapped object.

[07:19:14.0098] <sfink>
 * but if I'm doing some operation (here, structured cloning) that semantically lives in the main global, and it encounters an error while doing its thing, but the error is something like retrieving something disallowed by the cloning algorithm, then I would think we'd want the Error to be in "main global" yet it would naturally be in "other global" (since that's where we were when trying to retrieve.)

[07:19:34.0049] <sfink>
crap, had to go back and edit one of those above from "other global" -> "main global", oops.

[07:24:18.0025] <sfink>
ugh, and now I have a simple test case that behaves counter to my expectations. `try { obj.foo = 7 }` results in a main global error when `obj` is a CCW to a frozen object in the other global.

[07:25:08.0493] <sfink>
...how? Shouldn't the error be constructed while we're doing a SetProperty in the other global's realm? I guess it's rr time.

[07:30:42.0440] <evilpie>
Especially with methods we will often create errors objects in the wrong compartment, because of  CallNonGeneri

[07:31:10.0301] <evilpie>
Unrelated to SetProp, just something to keep in mind

[07:37:48.0146] <sfink>
argh, never mind, my test case was throwing a different error.

[07:38:15.0594] <sfink>
apparently global.eval("{}") returns undefined. Probably those brackets are parsed as a scope, not an object literal. :-(

[07:39:48.0239] <sfink>
...and adding a property to a frozen object doesn't throw unless you're in strict mode...

[07:40:01.0896] <Ms2ger 💉💉>
Hmm, does ctypes still exist?

[07:40:20.0301] <sfink>
but I *still* get "main global". Ok, I'll stop spamming this channel and figure this out.

[07:40:35.0550] <sfink>
yes, ctypes is still being used in Firefox, though there's work afoot to remove that usage.

[07:41:14.0911] <sfink>
more importantly, the hazard analysis uses it, and that's really the most important thing that Mozilla produces so clearly ctypes should never be removed

[07:41:54.0707] <sfink>
(I probably ought to remove that dependency. It wouldn't be too hard.)

[07:43:07.0674] <Ms2ger 💉💉>
(Sounds like more fun than what you were doing before)

[07:43:17.0384] <sfink>
you're not wrong

[07:44:48.0069] <sfink>
and just a leetle bit more spam: the actual error thrown is `TypeError: can't define property "foo": Proxy is not extensible` even though I'm just trying to define a property on a plain object that happens to be a CCW. That seems like a bug, and explains why it's throwing an Error in the main global.

[07:45:32.0512] <sfink>
as in, I don't think the fact that a CCW is a proxy should be visible to JS.

[07:47:25.0565] <sfink>
ah, it's mostly the right error, it's just that it fills in the "%s is not extensible" with excessively helpful info on what the obj is

[07:48:40.0392] <sfink>
I'm wondering if we ought to have a `cx->errorRealm_` for this stuff and the CallNonGeneric stuff... bleh.

[08:10:57.0863] <mdashti>
> <@arai:mozilla.org> `sh ./configure.in`, or `cp configure.in configure; ./configure` would work

jandem wingo How do you run tests after `./configure --disable-jemalloc --with-system-zlib --with-intl-api --enable-debug --enable-optimize` followed by `make` (without using `mach`)?

[08:11:25.0958] <arai>
which tests?

[08:11:41.0806] <arai>
jstests and jit-test?

[08:11:48.0427] <mdashti>
> <@arai:mozilla.org> which tests?

Let's say all tests.

[08:12:02.0705] <mdashti>
> <@arai:mozilla.org> jstests and jit-test?

Yes.

[08:12:40.0640] <arai>
there are `js/src/test/jstests.py` and `js/src/jit-test/jit_test.py`

[08:13:03.0705] <arai>
running then with passing js shell's path will run tests with the shell you've built

[08:13:20.0022] <arai>
iirc, you're supposed to be in `js/src/test` when running jstests.py

[08:13:47.0095] <arai>
another test is jsapi-test, that's in {OBJDIR}/dist/bin, next to js shell

[08:14:06.0309] <arai>
it's executable and just running it will run all C++ tests

[08:20:47.0827] <mdashti>
` {OBJDIR}/dist/bin/js` is the js shell, right? 

Then, I have to `cd mozilla-release/js/src/tests` and then run `./jstests.py --js-shell /home/ubuntu/mozilla-release/js/src/_build/dist/bin/js`.

Not sure why I still get a `jstests.py: error: missing JS_SHELL argument` error. Will figure it out.

[08:23:29.0306] <arai>
I guess `--js-shell` part isn't necessary

[08:25:14.0603] <arai>
hmm, the command line help looks wrong :/

[08:25:30.0319] <mdashti>
arai: Right. Then, we need to fix the command line help.

[08:25:54.0013] <mdashti>
Can be my first contribution 😁

[08:47:49.0203] <sfink>
oops, looks like I messed that up when going from optparse -> argparse. It's very clearly wrong.

[08:50:07.0097] <mgaudet>
> <@sfink:mozilla.org> and just a leetle bit more spam: the actual error thrown is `TypeError: can't define property "foo": Proxy is not extensible` even though I'm just trying to define a property on a plain object that happens to be a CCW. That seems like a bug, and explains why it's throwing an Error in the main global.

Mostly a bug of error message though right? (Trying to follow along). If `obj` is a frozen object, you'd expect it to throw a not-extensible error... the fact that it's a CCW ought to be invisible normally though, right? 

[08:50:48.0605] <sfink>
that's my thinking

[08:52:11.0829] <sfink>
and yes, it seems like for most things it should be just about error objects. But whenever you have callbacks getting invoked, or other objects being created, then you might need to worry about more than just error objects.

[08:52:25.0339] <sfink>
(I'm guessing Streams fall squarely in that category.)

[08:52:44.0938] <mgaudet>
😬 Gonna be fun

[08:58:46.0495] <sfink>
to answer my own question: SetProperty does exactly what I described would be needed above. It enters the target realm, detects the error, and fills the relevant information into an `ObjectOpResult` structure. Then it leaves the target realm, examines the result, and constructs the Error object in the calling realm.

[10:10:37.0191] <sfink>
is there some way to make unwrapping a CCW fail in the shell, without nuking it? I tried playing with the shell principals stuff, but I could only get that to elide stack frames.

[10:11:03.0497] <sfink>
(it's unlikely to give me what I want for this test, but it seems like something we'd want to expose)

[10:11:14.0131] <sfink>
maybe the fake WIndowProxy thing would help?

[10:24:25.0344] <mccr8>
I think E4X objects were unwrappable, if that helps.

[10:27:41.0459] <sfink>
so I could like use `os.spawn` to update to an E4X-compatible version, build it, and run the test with that version? Might work.

[10:28:27.0298] <sfink>
also, why are my SM(f) and SM(fuzzilli) jobs failing with bizarro linker errors involving jsrust?

[10:28:31.0460] <sfink>
maybe I need to trim down my patch stack

[10:29:27.0513] <nbp>
decoder: ^ some pasta issues

[10:30:24.0276] <decoder>
feel free to send me failure logs, I will look tomorrow :)

[10:30:56.0760] <sfink>
decoder: https://treeherder.mozilla.org/logviewer?job_id=346366814&repo=try&lineNumber=3722 but would you prefer email?

[11:04:50.0206] <decoder>
sfink: you can just send me a pm here, then ill remember it tomorrow

[11:05:14.0136] <sfink>
will do, thanks

[12:29:39.0551] <fitzgen>
is there a way, via JSAPI, to add new bindings to a script's top-level environment before I execute it? (in this case, I'm dealing with a module's script, if it matters)

[12:49:23.0256] <sfink>
"use strict";

var g = newGlobal({newCompartment: true});
Error.prototype.whence = "main global";
g.eval("Error.prototype.whence = 'other global'");

var obj = g.eval("gobj = {}");
Object.freeze(obj);
try { obj.foo = 7; } catch(e) { print(e.whence); print(e); }


[12:49:37.0459] <sfink>
 * ```js
"use strict";

var g = newGlobal({newCompartment: true});
Error.prototype.whence = "main global";
g.eval("Error.prototype.whence = 'other global'");

var obj = g.eval("gobj = {}");
Object.freeze(obj);
try { obj.foo = 7; } catch(e) { print(e.whence); print(e); }
```

[12:49:58.0504] <sfink>
 * ```js
"use strict";

var g = newGlobal({newCompartment: true});
Error.prototype.whence = "main global";
g.eval("Error.prototype.whence = 'other global'");

var obj = g.eval("[]");
Object.freeze(obj);
try { obj.foo = 7; } catch(e) { print(e.whence); print(e); }
```


2021-07-28
[08:03:31.0490] <sfink>
jonco: I'm going to have to drop off our meeting at around 10am (half an hour after the start)

[14:41:05.0599] <tcampbell>
confession: Got bounced trying to remove self-hosting zone. Now fixing a pre-existing devtools startup race in DOM land..

[14:41:08.0555] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:54:41.0376] <fitzgen>
> <@mgaudet:mozilla.org> I seem to recall this has come up before, and the answer at the time was no, we didn't have any JSAPI level code to do this. Having said that, you may get a better answer Monday

fwiw, I now have a WIP patch to add JSAPI functions for this functionality: https://bugzilla.mozilla.org/show_bug.cgi?id=1722802

it isn't working yet though, so feedback welcome :)

[15:20:42.0606] <tcampbell>
hmm.. seems you've hit an annoying spot were it is difficult to directly create EnvironmentObjects outside of the parser

[15:21:30.0555] <tcampbell>
One hack could be to parse `export var foo1; export var foo2;..` to get the right environment to participate in module linking.

[15:25:58.0865] <tcampbell>
If you wanted to skip parsing, it might be possible to directly construct a minimal `CompilationStencil` directly. Running `dumpStencil("export var foo; export var bar;", {module: true})` gives a sense of what data that involves.

[15:27:38.0369] <tcampbell>
A more direct API using GC objects would probably be passed a `JSObject` with key:values for export name -> native function. Then the API should have to convert that to a frozen ModuleEnvironmentObject

[15:27:51.0774] <Redfire>
> <@fitzgen:mozilla.org> fwiw, I now have a WIP patch to add JSAPI functions for this functionality: https://bugzilla.mozilla.org/show_bug.cgi?id=1722802
> it isn't working yet though, so feedback welcome :)

👀👀 I need this so bad for my runtime. I hope it gets finished sometime soon.

[15:28:34.0697] <tcampbell>
It is kind of unfortunate we directly use `EnvironmentObject` for the module linking

[15:35:52.0151] <Redfire>
My current method for native modules involves global scope pollution, which is 1. counterproductive since these are modules, 2. bad.
So.... that's why I really do want this improved native module support. 😛

[15:56:18.0213] <tcampbell>
yeah, it is a reasonable thing to want

[15:56:38.0396] <tcampbell>
Redfire: what are the types of values you export? All JSNative JSFunctions?

[16:00:34.0521] <Redfire>
For now, all native functions, yep.


2021-07-29
[00:50:18.0952] <evilpie>
sfink: thanks for looking at the patch. Looks like landing this is going to be blocked on the DOM principal stuff for workers anyway

[06:02:17.0783] <nbp>
https://github.com/alexpolt/luple/blob/master/struct-reader.h#L75-L102 — This code retrieves the components of a structure using a structure initialization list, and a parametric cast operator to identify the expected type in a list of known types. The cast operator is selected by the C++ compiler, and once selected, the constexpr code computes the index of the type in a pre-defined list of types.  Thus exposing the cast operator selection to template computation ! (I do not think there is a short acronym for it yet)

[06:04:19.0212] <nbp>
arai: sounds like it is after all possible to assert whether a structure is safely mmap-able ;)  I will try do to it after Stencil off-thread delazification.

[06:15:19.0911] <arai>
seems like full of magic :P  but yeah, having better way than alignment check would be great :)

[06:16:53.0796] <nbp>
https://alexpolt.github.io/struct-tuple.html

[06:17:50.0937] <arai>
thanks

[06:21:48.0616] <arai>
does this apply recursively to a field with struct type?

[06:22:40.0335] <arai>
err, maybe I'm still misunderstanding

[06:37:19.0811] <nbp>
The linked version does not, it has a list of accepted types.

[06:39:07.0950] <nbp>
technically, I presume it would be possible as long as the inner-types can also be created with a list initialization.

[06:40:01.0179] <arai>
ah, sounds nice

[14:50:50.0400] <mgaudet>
confession: Continuing to build skills and lessons through prototyping work.

[14:50:53.0874] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[15:41:04.0176] <fitzgen>
given a `js::ModuleObject`, how can I get one of its exports?

[15:43:39.0346] <fitzgen>
I guess by doing a similar dance as `js::ModuleNamespaceObject::ProxyHandler::getOwnPropertyDescriptor`?


2021-07-30
[02:23:45.0466] <fke>
Hi there! Does spidermonkey have an option for bounds checks instead of using guard pages (which I assume it uses judging from execution speed) to sandbox the WebAssembly linear memory?

[02:33:08.0954] <jandem>
fke: there's an option to disable 'huge memory' on 64-bit platforms, in the browser that's the `javascript.options.wasm_disable_huge_memory = false` hidden pref

[02:33:37.0403] <jandem>
just curious, why do you want bounds checks?

[02:33:51.0175] <jandem>
 * fke: there's an option to disable 'huge memory' on 64-bit platforms, in the browser that's the `javascript.options.wasm_disable_huge_memory = true` hidden pref

[02:34:39.0919] <fke>
Honestly I was just curious as I am comparing Wasm runtimes and compilers and saw that V8 has an option to disable the utilization of guard pages

[02:35:25.0713] <jandem>
ah right

[02:35:55.0847] <jandem>
(note that there's also a #webassembly:mozilla.org room)

[02:36:18.0470] <fke>
Perfect. Thank you!

[02:37:16.0708] <fke>
> <@jandem:mozilla.org> fke: there's an option to disable 'huge memory' on 64-bit platforms, in the browser that's the `javascript.options.wasm_disable_huge_memory = true` hidden pref

Can this be set when using the spidermonkey js command line shell?

[02:38:22.0373] <jandem>
fke: `--disable-wasm-huge-memory`

[02:40:19.0379] <fke>
Works like a charm

[02:56:40.0751] <l11d>
when changing the order of 2 MIR instructions (no intersecting aliasset), is there anything I'd need to take into account regarding resume points? I currently see `Assertion failure: isLowered()` in LIRGeneratorShared::buildSnapshot for some testcases but can't really figure out why

[04:10:08.0771] <jandem>
l11d: you also shouldn't move instructions before any of its operands (uses), I can imagine that triggering this assertion

[04:12:58.0803] <jandem>
* l11d: you also shouldn't move an instruction before any of its operands (uses), I can imagine that triggering this assertion

[05:58:45.0786] <Redfire>
Hmm, slight crashing issue:
```
js::frontend::ModuleCompiler<char16_t>::compile(JSContext *) BytecodeCompiler.cpp:775
ParseModuleToStencilAndMaybeInstantiate<char16_t>(JSContext *,js::frontend::CompilationInput &,JS::SourceText<char16_t> &,mozilla::Variant<mozilla::UniquePtr<js::frontend::ExtensibleCompilationStencil,JS::DeletePolicy<js::frontend::ExtensibleCompilationStencil> >,mozilla::UniquePtr<js::frontend::CompilationStencil,JS::DeletePolicy<js::frontend::CompilationStencil> >,js::frontend::CompilationGCOutput *> &) BytecodeCompiler.cpp:886
CompileModuleImpl<char16_t>(JSContext *,const JS::ReadOnlyCompileOptions &,JS::SourceText<char16_t> &) BytecodeCompiler.cpp:983
js::frontend::CompileModule(JSContext *,const JS::ReadOnlyCompileOptions &,JS::SourceText<char16_t> &) BytecodeCompiler.cpp:995
CompileModuleHelper<char16_t>(JSContext *,const JS::ReadOnlyCompileOptions &,JS::SourceText<char16_t> &) Modules.cpp:107
JS::CompileModule(JSContext *,const JS::ReadOnlyCompileOptions &,JS::SourceText<char16_t> &) Modules.cpp:113
runtime::modules::compile_module(mozjs_sys::generated::root::JSContext *,str,Option<std::path::Path*>,str) modules.rs:49
modules::assert::assert::init_assert(mozjs_sys::generated::root::JSContext *,IonObject) assert.rs:81
modules::init_modules(mozjs_sys::generated::root::JSContext *,IonObject) lib.rs:22
cli::evaluate::eval_module(std::path::Path *) evaluate.rs:95
cli::commands::run::run(str) run.rs:17
cli::main() main.rs:97
core::ops::function::FnOnce::call_once<fn(),tuple<>>(void (*)()) function.rs:227
std::sys_common::backtrace::__rust_begin_short_backtrace<fn(),tuple<>>(void (*)()) backtrace.rs:125
std::rt::lang_start::{{closure}}<tuple<>>(std::rt::lang_start::closure-0 *) rt.rs:49
std::rt::lang_start_internal() rt.rs:34
std::rt::lang_start<tuple<>>(void (*)(),long long,unsigned char **) rt.rs:48
main 0x00007ff6e0c74b16
__scrt_common_main_seh() 0x00007ff6e26c3e4c
BaseThreadInitThunk 0x00007ff931377c24
RtlUserThreadStart 0x00007ff932aad721
```

[05:59:03.0996] <Redfire>
```cpp
  MOZ_ASSERT_IF(!cx->isHelperThreadContext(), !cx->isExceptionPending());
```
this is the line specifically

[05:59:20.0022] <Redfire>
Any idea what could have caused it?

[06:02:13.0730] <jandem>
do you have a pending exception on the context when you call `CompileModule`?

[06:02:35.0716] <Redfire>
I *shouldn't*

[06:02:57.0149] <Redfire>
but there's only one place it could have occurred

[06:05:19.0089] <Redfire>
```rs
rooted!(in(cx) let console = JS_NewPlainObject(cx));
		return JS_DefineFunctions(cx, console.handle().into(), METHODS.as_ptr())
			&& global.define(cx, String::from("console"), ObjectValue(console.get()), 0);
```

[06:05:25.0991] <Redfire>
 * ```rs
                rooted!(in(cx) let console = JS_NewPlainObject(cx));
		return JS_DefineFunctions(cx, console.handle().into(), METHODS.as_ptr())
			&& global.define(cx, String::from("console"), ObjectValue(console.get()), 0);
```

[06:22:11.0200] <l11d>
jandem: I'm taking care of def/use dependencies already, it feels like my issue is related to resume points.
When I have MIR code:
`23:loadfixedslot (22:unbox (14:phi))`
`24:newplainobject (21:constant shape at ...)`

and newplainobject->dependency()->dump() is:
`resumepoint mode=After [omitting unrelated] loadfixedslot23 newplainobject24`

would it be valid to reorder loadfixedslot and newplainobject? Maybe there some kind of ordering requirement w.r
.t. the resume point operands?

[06:28:54.0908] <jandem>
l11d: when you say "I'm taking care of def/use dependencies", does that include resume point uses? If in your example the `newplainobject` has a resume point that captures the `loadfixedslot` we can't reorder them

[06:31:04.0157] <l11d>
aaaah okay well this might just be the gist of it. with def/use dependencies I was referring to the operands of loadfixedslot and newplainobject. many thanks

[07:16:19.0269] <arai>
evilpie: the Promise bug is very strange. the content of CSS file also affects the behavior :/   still trying to figure out the minimal testcase

[07:33:49.0382] <arai>
okay, figured out the minimal testcase.  it seems to be just timing issue or some complicate dependency

[07:33:57.0476] <arai>
and the minimal testcase is simple

[07:34:05.0196] <arai>
(fwiw, the context is bug 1723124

[07:34:06.0587] <botzilla>
https://bugzil.la/1723124 — UNCONFIRMED (nobody) — Promise .then not called when .bind used

[07:57:15.0267] <arai>
the problem is that the behavior differs between browsers :/

[08:01:20.0568] <Ryan Hunt>
Does anyone have a M1 machine that they could use to try to reproduce bug 1720650?

[08:01:22.0550] <botzilla>
https://bugzil.la/1720650 — NEW (nobody) — [ARM64 M1]Zoom video is rendered incorrectly

[08:03:31.0637] <evilpie>
arai: good work figuring this out

[08:03:50.0424] <evilpie>
so they are actually changing `bind` it's just another native

[08:04:32.0145] <arai>
yeah, and it should be an issue with the resulting function's realm, promise job's realm, and HostEnqueuePromiseJob's requirement

[08:04:52.0870] <arai>
now checking the spec

[08:42:59.0943] <arai>
looks like a bug around realm handling in EnqueuePromiseReactionJob with bound function

[08:43:27.0098] <arai>
we don't handle bound function there

[08:57:21.0859] <ptomato>
what should be the recommended migration path for embedders who use private slots?

[08:57:24.0869] <ptomato>
(re. https://bugzilla.mozilla.org/show_bug.cgi?id=1719457)

[08:57:52.0688] <ptomato>
is it a matter of reserving a slot and sticking a `JS::PrivateValue` in there?

[09:12:51.0347] <jandem>
ptomato: yes, just use a reserved slot instead 

[09:14:36.0272] <ptomato>
seems to increase the boilerplate in embedder code, is there any chance that JSAPI could include a function that takes care of this boilerplate?

[09:37:02.0552] <TheQwertiest>
ptomato: it's not that much more boilerplate though: 
JSCLASS_HAS_PRIVATE > JSCLASS_HAS_RESERVED_SLOTS(1)
JS_SetPrivate > JS_SetReservedSlot(0)
JS_GetPrivate > JS_GetReservedSlot(0)

still, it will be a pita to rewrite all the current code for the objects that use both private and reserved slots (e.g. global object)

[09:38:16.0969] <TheQwertiest>
no wait

[09:38:58.0073] <TheQwertiest>
ReservedSlot uses JS object while Private accepts a plain pointer (so a native object could be used directly)

[09:39:54.0592] <TheQwertiest>
 * ReservedSlot uses JS object while SetPrivate accepts a plain pointer (so a native object could be used directly)

[09:41:07.0731] <ptomato>
right, you have to wrap all the pointers in `JS::PrivateValue(priv)` and unwrap them with `toPrivate()`

[09:41:18.0465] <TheQwertiest>
yikes

[09:42:30.0074] <TheQwertiest>
doable, but annoying =)

[10:56:59.0873] <jandem>
ptomato: there's a [helper function](https://searchfox.org/mozilla-central/rev/2aa97aea1085cf1363582725407c514833ad47e4/js/public/Object.h#114) for getting a pointer out. We could add more of that 

[10:57:55.0175] <ptomato>
oh, that looks like what I was looking for

[10:59:52.0406] <jandem>
sorry for the breakage. Private slots were a pain internally though and redundant with reserved slots 

[11:00:31.0172] <ptomato>
I actually assumed they were already reserved slots under the hood! :-)

[11:04:16.0522] <jandem>
not really, it was implemented with a PrivateValue under the hood but still pretty different :) 

[11:12:15.0069] <botzilla>
https://bugzil.la/1723066 — NEW (nobody) — Some pages' dynamic content doesn't load with dom.script_loader.full_parse = true

[14:29:14.0580] <mgaudet>
confession: Away for a week, starting now-ish. 

[14:29:17.0199] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2021-07-31
[17:35:49.0556] <sfink>
confession: deep in linker hell for a patch that doesn't seem like it should be anything related: https://bugzilla.mozilla.org/show_bug.cgi?id=1723245

[01:18:05.0951] <Redfire>
> <@redfire75369:mozilla.org> Any idea what could have caused it?

Well... that explains it
```rs
	function_spec!(group, 0),
	function_spec!(group, "groupCollapsed", 0),
	function_spec!(groupEnd, 0),
	function_spec!(group, "groupCollapsed", 0),
```
Telle me if you see any issues here 😛

[01:18:10.0321] <Redfire>
> <@redfire75369:mozilla.org> Any idea what could have caused it?

 * Well... that explains it
```rs
	function_spec!(group, 0),
	function_spec!(group, "groupCollapsed", 0),
	function_spec!(groupEnd, 0),
	function_spec!(group, "groupCollapsed", 0),
```

Tell me if you see any issues here 😛

[01:53:49.0011] <Redfire>
 * Well... that explains it
```rs
const METHODS: &[JSFunctionSpec] = [
	function_spec!(group, 0),
	function_spec!(group, "groupCollapsed", 0),
	function_spec!(groupEnd, 0),
	function_spec!(group, "groupCollapsed", 0),
```

Tell me if you see any issues here 😛

[01:54:09.0437] <Redfire>
 * Well... that explains it
```rs
const METHODS: &[JSFunctionSpec] = &[
	function_spec!(group, 0),
	function_spec!(group, "groupCollapsed", 0),
	function_spec!(groupEnd, 0),
	function_spec!(group, "groupCollapsed", 0),
        // ...
];
```

Tell me if you see any issues here 😛

[01:54:16.0367] <Redfire>
 * Well... that explains it
```rs
const METHODS: &[JSFunctionSpec] = &[
         // ...
	function_spec!(group, 0),
	function_spec!(group, "groupCollapsed", 0),
	function_spec!(groupEnd, 0),
	function_spec!(group, "groupCollapsed", 0),
        // ...
];
```

Tell me if you see any issues here 😛

[01:54:22.0546] <Redfire>
 * Well... that explains it
```rs
const METHODS: &[JSFunctionSpec] = &[
        // ...
	function_spec!(group, 0),
	function_spec!(group, "groupCollapsed", 0),
	function_spec!(groupEnd, 0),
	function_spec!(group, "groupCollapsed", 0),
        // ...
];
```

Tell me if you see any issues here 😛

