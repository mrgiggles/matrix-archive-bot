2021-01-04
[00:57:00.0907] <wingo>
happy new year, spidermonkey :)

[01:19:44.0262] <jandem>
happy new year!

[02:03:57.0284] <yulia>
Happy New Year!

[02:22:40.0400] <jonco>
happy new year everyone

[03:11:40.0152] <dbezhetskov>
С Новым годом everyone!

[07:27:22.0293] <lth>
is slack broken or only for nightly users?

[07:27:37.0031] <lth>
... or just deadly slow... sigh

[07:29:33.0842] <tcampbell>
I'm getting a spinner too. `status.slack.com` is showing issues on their end

[07:58:01.0171] <evilpie>
happy new year!

[08:04:27.0971] <lth>
indeed, happy new year :-)

[09:46:54.0100] <iain>
Happy New Year!

[14:32:02.0510] <zombie>
happy new year SM folks

[14:32:57.0899] <zombie>
a fun SM trivia: how/when can `new Uint8Array(returnedData.buffer) isinstance Uint8Array` be false?  :)

[14:34:05.0109] <tcampbell>
Is this in a webext context?

[14:35:03.0510] <zombie>
yes, right trail :)

[14:37:13.0661] <tcampbell>
zombie: is this reproducible at all? (can we test with jit on/off?)

[14:38:05.0296] <tcampbell>
/me wonders if we did something weird in `isinstance` for odd cross-compartment cases

[14:38:34.0958] <zombie>
don't think jit would matter, but i'm about to ni? you

[14:38:56.0038] <tcampbell>
zombie: can you point to mgaudet first :)

[14:39:06.0794] <tcampbell>
he last worked on instanceof I believe

[14:39:53.0306] <mgaudet>
A hundred years ago. But I will take a look tomorrow. 

[14:39:59.0084] <tcampbell>
/me is cleaning up bugmail backlog and sees a shameful pile of webext questions..

[14:40:56.0952] <tcampbell>
that xray stuff is tricky

[14:43:36.0907] <zombie>
heh, sure

[14:43:57.0011] <zombie>
bug 1681809 for the rest following

[14:43:58.0342] <botzilla>
https://bugzil.la/1681809 — UNCONFIRMED (nobody) — Typed arrays generated by TextEncoder belong to a wrong context


2021-01-05
[23:04:50.0571] <Ms2ger>
Ugh

[04:57:01.0700] <evilpie>
Was this https://bugzilla.mozilla.org/show_bug.cgi?id=1291850 ever fixed?

[05:13:18.0741] <mgaudet>
evilpie: as far as I know, no; but I last looked at very close to the beginning of my tenure here and at the time couldn't make heads-nor-tails of it.d 

[05:13:21.0221] <mgaudet>
 * evilpie: as far as I know, no; but I last looked at very close to the beginning of my tenure here and at the time couldn't make heads-nor-tails of it.

[08:58:06.0060] <sfink>
uh oh, I just showed up 5th on the try high scores chart

[09:00:10.0509] <andrei_petcu>
> <@sfink:mozilla.org> uh oh, I just showed up 5th on the try high scores chart

what is the try high scores chart?

[09:00:39.0138] <Ms2ger>
Does that still exist?

[09:01:14.0869] <Ms2ger>
https://catlee.github.io/highscores/highscores.html

[09:02:00.0819] <sfink>
yeah, that

[13:19:11.0015] <mgaudet>
confession: I -think- I've crossed off all the fuzz bugs from warp generators / warp async functions 

[13:19:17.0178] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2021-01-06
[09:23:42.0176] <tcampbell>
https://bugzilla.mozilla.org/show_bug.cgi?id=1638764


2021-01-07
[05:59:30.0472] <jonco>
Is there a way to get pernosco recordings of failures on central?  I seem to remember there was some way to request this...

[07:06:07.0225] <mccr8>
jonco: something on here might be useful? https://github.com/Pernosco/pernosco/wiki/Mozilla-Tips

[07:11:05.0290] <jonco>
mccr8: cheers I'll try that

[10:12:03.0213] <mgaudet>
jonco: I was hoping to dump some statistics about scripts, so I figured I'd add dump code to `BaseScript::finalize`; however it seems that if we're shutting down we won't necessarily finalize every script. Before I instead add some script-enumeration code, I am curious if there's an option or zeal mode I could deploy that would get finalization to happen for every object on shutdown? 

[10:16:12.0078] <jonco>
mgaudet: we do finalize everything if the runtime is shut down

[10:16:36.0567] <iain>
mgaudet: caroline has been doing some similar stuff with her CacheIR report code. Maybe talk to her?

[10:16:51.0339] <jonco>
mgaudet: I think content processes just exit though without going through shutdown

[10:17:50.0129] <mgaudet>
Ok; thanks for the pointer to Caroline. I'll also poke in the debugger a bit more? Maybe the order of operations is leading to a mistake in my code instead

[10:17:57.0988] <mgaudet>
 * Ok; thanks for the pointer to Caroline. I'll also poke in the debugger a bit more. Maybe the order of operations is leading to a mistake in my code instead

[10:21:47.0747] <caroline>
In BaseScript::finalize, I have code that dumps the final warm up count for certain scripts that we are interested in. https://searchfox.org/mozilla-central/source/js/src/vm/JSScript.cpp#658

[10:27:52.0153] <mgaudet>
/me coughs. 

So it turns out... I was running the wrong binary. 

[10:28:06.0424] <mgaudet>
because I'd switched mozconfigs and forgottoen

[10:28:10.0838] <mgaudet>
 * because I'd switched mozconfigs and forgotten


2021-01-08
[01:28:27.0849] <jandem>
nice, shell tests are noticeably faster now with the self-hosted-code caching

[02:26:25.0443] <nbp>
I should probably suggest that to decoder, as a way to test case reducing.

[02:27:06.0790] <decoder>
what? free stuff?

[02:27:08.0965] <decoder>
^.^

[02:28:04.0886] <nbp>
decoder: I recently added `--selfhosted-xdr-mode {encode|decode|off}` and `--selfhosted-xdr-path /tmp/selfhosted.xdr` options.

[02:28:53.0769] <nbp>
decoder: If you are in a case where you spawn many JS shell, I would mostly think of test case reduction for example.

[02:29:50.0682] <decoder>
ah, so that caches stuff while the machine exists so I have to do the parsing only once for self hosted code?

[02:29:58.0525] <decoder>
sounds interesting both for reducing and fuzzing

[02:30:05.0451] <nbp>
Then you can spawn a JS shell with `--selfhosted-xdr-mode encode --selfhosted-xdr-path /tmp/selfhosted.xdr`, and later spawn the other JS shells with `--selfhosted-xdr-mode decode --selfhosted-xdr-path /tmp/selfhosted.xdr`

[02:30:35.0464] <decoder>
couldnt we even make it the default to auto-create a cached xdr somewhere and use it automatically if present?

[02:30:50.0727] <nbp>
Exactly, it caches the selfhosted parsed content on disk and reload it when asked to `decode`.

[02:30:55.0682] <decoder>
(we can add an option to disable it)

[02:31:09.0968] <decoder>
if this is really providing that much of a speed up, we should aim at making it the default for the shell too

[02:31:22.0011] <nbp>
decoder: This would be racy and this is highly dependent on the JS shell version.

[02:31:45.0639] <decoder>
racy if multiple shells start at once you mean?

[02:31:52.0310] <nbp>
You could no longer run 2 JS test suite concurrently.

[02:32:00.0412] <decoder>
I think you could

[02:32:06.0062] <nbp>
if one start decoding while one is encoding.

[02:32:08.0544] <decoder>
the first just locks the cache dir

[02:32:17.0583] <decoder>
if the second doesnt get the lock, it uses the in memory default

[02:32:26.0140] <decoder>
and that should be a rare case

[02:32:37.0883] <decoder>
and yea, it would have to be versioned 

[02:33:38.0984] <nbp>
I prefer the explicit command line, such that we have control over what is happening.

[02:34:18.0247] <nbp>
but I think we could add another mode which does what you expect.

[02:34:19.0396] <decoder>
imho, we should always try to make things as easy and automatic as possible. that doesnt mean that we cant have a command line option to disable that automatic behavior

[02:34:40.0861] <decoder>
with automatic behavior, everyone benefits immediately

[02:34:47.0097] <decoder>
no matter if they know about this or not

[02:35:29.0236] <nbp>
This might be a source of differential behavior for fuzzing, as the memory would not be allocated the same way when we parse/encode/decode.

[02:35:50.0489] <decoder>
yea, for something like differential fuzzing we should disable this

[02:35:58.0036] <decoder>
but we already have a runtime flag for that anyway

[02:36:10.0642] <decoder>
so we can easily disable it

[02:36:38.0101] <decoder>
hm.. thinking about this, I am not sure if that is actually true: this should not cause differential behavior

[02:36:43.0438] <decoder>
at least not observable one

[02:36:49.0039] <decoder>
(other than oom, which is already filtered)

[02:37:00.0536] <decoder>
if it does, that might actually be a bug

[02:37:06.0691] <nbp>
or allocation alignments … but these are rare.

[02:37:30.0133] <decoder>
anyway, if it became a problem in that mode, there is --differential-testing by now 

[02:37:34.0975] <decoder>
so we can disable it for that use case easily

[02:41:05.0359] <jandem>
how much code does the fuzzer load for its harness? eventually it would be nice if we could XDR-encode that too

[02:42:01.0907] <jandem>
a bit like python's .pyc files, .jsc :p

[02:42:12.0737] <jandem>
decoder: ^

[02:43:58.0464] <decoder>
jandem: yea, it would make sense for the toplevel shell

[02:44:05.0607] <decoder>
thats a concat of js/src/tests/shell.js and some others

[02:44:19.0503] <decoder>
it takes up quite some time to load

[02:45:01.0757] <decoder>
we only have a limited amount of restarts, but I have numbers and it would allow us to calculate the time save to determine if it is worth it

[02:45:57.0106] <jandem>
yeah it would allow doing more restarts and make reduction easier?

[02:48:58.0769] <nbp>
> <@jandem:mozilla.org> a bit like python's .pyc files, .jsc :p

That's a good idea, we could do that for loaded files as well.

[02:54:32.0318] <jandem>
I wonder how much it would speed up jstests, most test files are small but jstests loads some shell.js files for every test

[02:55:10.0527] <jandem>
but it uses lazy parsing unlike self-hosted

[02:59:05.0211] <jandem>
 * I wonder how much it would speed up jstests, most test files are small but jstests load some shell.js files for every test

[03:57:06.0503] <flx1101>
Hey, I've just compiled the js shell 84 and it looks like `dis` has been removed / replaced. What are the alternatives? `disnative` doesn't seem to work in the same way as it doesn't show any bytecode.

[03:57:18.0026] <flx1101>
 * Hey, I've just compiled the js shell v84 and it looks like `dis` has been removed / replaced. What are the alternatives? `disnative` doesn't seem to work in the same way as it doesn't show any bytecode.

[03:59:07.0551] <evilpie>
flx1101: it was not removed

[03:59:25.0050] <flx1101>
Did I mess up compilation? :smi

[03:59:30.0565] <flx1101>
 * Did I mess up compilation? :D

[04:00:29.0450] <evilpie>
flx1101: you either need a debug build or --enable-jitspew

[04:02:21.0020] <flx1101>
`--enable-debug` somehow removed itself from the configure options 😃 thank you!

[04:10:53.0615] <flx1101>
Before I waste hours of debugging and digging through code, maybe someone here can help me?

What I'm trying to find out (also with the help of `dis`, hence my previous question) is how calls with ignored return values are optimized, i.e., called with opcode `CallIgnoresRv`. Are they eliminated at some optimization stage (I think `Math` functions can be)? And where can I find this in the code base?

[04:28:41.0199] <jandem>
flx1101: native functions can have a JSJitInfo attached. This makes it possible to optimize some natives for when they're called and the return value isn't used, for example here for array splice: https://searchfox.org/mozilla-central/rev/519f913527b0d9d5097d290d5731cff6b2991fe0/js/src/builtin/Array.cpp#3648

[04:30:34.0999] <jandem>
this isn't used for Math functions, those are optimized by the JIT and the JIT knows it can eliminate those operations if they're not used

[04:32:28.0601] <flx1101>
> <@jandem:mozilla.org> this isn't used for Math functions, those are optimized by the JIT and the JIT knows it can eliminate those operations if they're not used

How does the JIT know it can eliminate those?

[04:33:20.0425] <flx1101>
> <@jandem:mozilla.org> flx1101: native functions can have a JSJitInfo attached. This makes it possible to optimize some natives for when they're called and the return value isn't used, for example here for array splice: https://searchfox.org/mozilla-central/rev/519f913527b0d9d5097d290d5731cff6b2991fe0/js/src/builtin/Array.cpp#3648

If I understand this correctly they are different functions in the JIT? So there's a `array_splice` and a `array_splice_noRetVal`?

[04:33:47.0048] <jandem>
for example for `Math.abs` the optimizing JIT will use the `MAbs` instruction, and that has a [getAliasSet](https://searchfox.org/mozilla-central/rev/519f913527b0d9d5097d290d5731cff6b2991fe0/js/src/jit/MIR.h#4903) that tells the optimizer there are no side-effects 

[04:34:17.0878] <jandem>
also note that the `MAbs` constructor calls `setMovable()`, this makes it possible to hoist it before loops

[04:35:16.0026] <jandem>
yeah the JIT will call `array_splice_noRetVal` if it's a `CallIgnoresRv` op

[04:39:33.0077] <flx1101>
> <@jandem:mozilla.org> for example for `Math.abs` the optimizing JIT will use the `MAbs` instruction, and that has a [getAliasSet](https://searchfox.org/mozilla-central/rev/519f913527b0d9d5097d290d5731cff6b2991fe0/js/src/jit/MIR.h#4903) that tells the optimizer there are no side-effects

Does this mean every function that has `AliasSet::None()` and therefore no side effects gets eliminated when it's a `CallIgnoresRv`?

[04:40:41.0543] <jandem>
not just when it's a `CallIgnoresRv`, it doesn't matter what call opcode the `MAbs` was added for

[04:41:05.0392] <jandem>
instructions can also call `setGuard()`, that means "don't eliminate this even if it has no side-effects"

[04:42:51.0204] <jandem>
> <@jandem:mozilla.org> not just when it's a `CallIgnoresRv`, it doesn't matter what call opcode the `MAbs` was added for

this is because the JIT does its own tracking of which values are used where (it uses SSA)

[04:43:44.0618] <jandem>
> <@jandem:mozilla.org> not just when it's a `CallIgnoresRv`, it doesn't matter what call opcode the `MAbs` was added for

 * this is because the JIT does its own tracking of which values are used where (it uses SSA and tracks where each definition is used)

[04:44:49.0120] <flx1101>
So if I wanted to compile a list of instructions that can't be eliminated I could search for `setGuard()` and remove all that have `AliasSet::None()`?

[04:46:50.0608] <jandem>
everything with `setGuard()` definitely can't be eliminated. Then, instructions that have a `getAliasSet` that's a store (`None` but also loads) also can't be eliminated (see `isEffectful` [here](https://searchfox.org/mozilla-central/rev/519f913527b0d9d5097d290d5731cff6b2991fe0/js/src/jit/MIR.h#921))

[04:48:04.0912] <jandem>
for example the instruction for loading a value from a typed array has an alias set that's not `None`, but it can still be eliminated because it's not observable

[04:49:26.0966] <flx1101>
Aah, yes, that makes sense

[04:51:22.0332] <flx1101>
Okay, I'll try and go ahead with my list, thank you for your help jandem ! 🙂

[04:53:02.0338] <jandem>
no problem 🙂

[04:54:50.0990] <jandem>
 * everything with `setGuard()` definitely can't be eliminated. Then, instructions that have a `getAliasSet` that's a store (not `None` but also loads) also can't be eliminated (see `isEffectful` [here](https://searchfox.org/mozilla-central/rev/519f913527b0d9d5097d290d5731cff6b2991fe0/js/src/jit/MIR.h#921))

[04:55:09.0466] <jandem>
 * everything with `setGuard()` definitely can't be eliminated. Then, instructions that have a `getAliasSet` that's a store (not `None` and not loads) also can't be eliminated (see `isEffectful` [here](https://searchfox.org/mozilla-central/rev/519f913527b0d9d5097d290d5731cff6b2991fe0/js/src/jit/MIR.h#921))

[07:27:07.0581] <tcampbell>
decoder: I think of the long options as just initial steps until we are more comfortable with it being robust and not surprising. Eg automatic decision to encode/decode makes test failures harder to reproduce. The next steps are to get a similar system in browser + android builds and then we'll continue iterating.

[07:28:04.0266] <decoder>
sgtm, but we can still add the auto-mode as opt in using a single flag.

[07:28:18.0266] <decoder>
(or opt-out and add that to tests if it is causing problems)

[07:28:43.0187] <decoder>
this can also be used to determine pain points as we are progressing

[07:29:11.0932] <tcampbell>
mostly I want to avoid surprises where `./mach run foo.js` has different gc behaviour depending on when you run it

[07:29:28.0396] <decoder>
you already have that by now because of the memory load of the machine

[07:29:37.0894] <decoder>
we are long past the point of deterministic GC ;)

[07:29:41.0111] <decoder>
but I see what you mean

[07:29:51.0876] <decoder>
in fuzzing we have quite a few GC asserts that never reproduce

[07:29:56.0764] <tcampbell>
longer term, we'll probably make this data part of the build itself

[07:30:19.0532] <tcampbell>
eg. a build step will parse selfhosted.js into this stencil-xdr form

[09:47:55.0652] <decoder>
yea, that sounds like a great idea :)

[09:52:26.0186] <nbp>
^ when we would have a solution for cross-compiling stencil.

[10:12:56.0587] <tcampbell>
To support [ORB](https://github.com/annevk/orb) we might want to have lightweight standalone parsing (without any GC). To do that, it might be helpful to have parse-to-stencil compile with from minimal spidermonkey sources. If we did that, it could be a basis for cross-compiling stencil.


2021-01-11
[02:37:04.0593] <nbp>
tcampbell: to support ORB, we would have to make it extremelly fast, even for very large files, and also it sounds to me we should make sure our compile-to-stencil can run fully isolated from Gecko/SpiderMonkey to not have any security risks.

[02:38:59.0569] <nbp>
We had a discussion in Berlin on this topic, and on the use of the jsparagus, which from my point of view was not a good idea to include a full feature JS parser.

[02:40:06.0276] <nbp>
tcampbell: one other issue of ORB, is that we want developers to have syntax error reported in the devtools. If we are using the same Syntax errors to claim that the input is not JavaScript … then no invalid JS would ever output any messages in the devtools.

[05:46:53.0005] <tcampbell>
For the current "muted errors" mechanism, do we actually show the errors in devtools?

[05:51:51.0797] <nbp>
That would be a question for jorendorff.

[05:53:59.0352] <tcampbell>
Having compile-to-stencil an isolated thing seems useful for us in general to have. Potentially we could emscripten the parser then if that made sense

[05:54:50.0990] <tcampbell>
(I tried to compile just the minimal parts of js/src/frontend, but there are still too many places that touch GC barriers and pull in the entire world. Some files need a bit more refactoring..)

[06:21:43.0189] <nbp>
LifoAlloc uses some GC function, IIRC. (or used to)

[06:26:42.0549] <tcampbell>
I think that is all gone now.

[06:29:30.0900] <jonco>
tcampbell: hey, can I get a review for D101024 please?

[06:30:32.0099] <tcampbell>
sure..

[06:34:07.0689] <jonco>
tcampbell: thanks

[07:19:18.0042] <jorendorff>
I don't know about muted errors. Argument could be made both ways.

[07:24:21.0521] <annevk>
I think it's reasonable to show them there, FWIW.

[07:25:59.0272] <annevk>
 * I think it's reasonable to show them there, FWIW. (I see the origin of the question was ORB, I think that matters much less there. We'd just tell them to use text/javascript in the console and once they do we can show errors.)

[07:26:29.0501] <annevk>
nbp: ^

[07:28:21.0293] <annevk>
(The algorithm hitting the "we need to parse this file as JavaScript to see if it's JavaScript" is really the bottom of the barrel of bad web content. I think it's fine if the experience is a tiny bit sub-optimal in that they have to fix a MIME type first before getting the parser feedback.)

[08:05:36.0556] <nbp>
annevk: ok, is that still a lot of content which does not have a proper MIME/type?

[08:07:35.0295] <annevk>
nbp: we'll get telemetry, but I'm pretty sure it's less than 1% of cross-origin scripts

[08:08:19.0181] <jandem>
I like the idea of a stand-alone frontend build (that's kind of cool to have anyway) we can put in rlbox

[14:08:33.0584] <tcampbell>
confession: Added some spidermonkey overview documentation to the tree. https://firefox-source-docs.mozilla.org/js/index.html

[14:08:36.0275] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2021-01-12
[07:27:04.0422] <wraitii>
Hello everyone, is if safe to Trace a JS::Heap<JSObject*> containing a nullptr ?

[07:29:51.0360] <jandem>
I think so. /cc jonco 

[07:33:30.0842] <wraitii>
And relatedly, another dev apparently had reports GCHashTable wasn't working correctly?

[07:33:37.0138] <jonco>
one sec, checking

[07:33:53.0974] <wraitii>
(I basically have a need for something like std::map<JSObject*, u32>)

[07:35:13.0310] <jonco>
wraitii: yes, there's a null check in JS::TraceEdge

[07:36:02.0482] <jonco>
consider using js::GCHashMap rather than std::map

[07:36:49.0577] <wraitii>
OK so that ought to work then. 0 A.D. used to use an older version of that I think, that got removed, but I need to add it back

[07:36:58.0253] <wraitii>
and I had conflicting reports of issues

[07:40:02.0329] <jonco>
wraitii: what was the problem with GCHashTable?  The combination of hash tables and moving GC is tricky to get right and there are several pitfalls

[07:41:08.0612] <wraitii>
I'm not entirely sure, we used something that ultimately came from '/source/js/ipc/JavaScriptShared.h' in a much older SM (< 38)

[07:41:20.0917] <wraitii>
But GCHashTable does look like what I need 

[07:41:39.0661] <jonco>
ok, great

[07:42:35.0455] <wraitii>
Is it supposed to be GCHashMap<JSObject*, int> or GCHashMap<JS::Heap<JSObject*>, int> ?

[07:49:11.0733] <jonco>
wraitii: the latter

[07:50:20.0461] <tcampbell>
confession: Consolidated the https://spidermonkey.dev/ landing page

[07:51:50.0847] <wraitii>
jonco: thanks :) 

[07:52:06.0555] <jonco>
hang on, looking for an example

[07:52:33.0377] <jonco>
wraitii: probably your best bet is to copy something like this: https://searchfox.org/mozilla-central/source/dom/base/CustomElementRegistry.h#516-518

[07:52:59.0481] <jonco>
so, wrap the JSObject* in JS::Heap and use MovableCellHasher

[07:53:12.0196] <jonco>
if you do that it should 'just work'

[07:57:38.0408] <tcampbell>
wraitii: out of curiousity, have you seen https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples

[07:58:05.0300] <tcampbell>
(It is far far from complete, but slowly we are trying to put these sorts of answers there)

[07:58:28.0082] <wraitii>
tcampbell: I have indeed, it's been quite useful for the 52->78 migration

[07:58:37.0143] <wraitii>
I do believe this particular class is missing from the examples

[07:58:47.0113] <tcampbell>
feel free to file issues

[07:58:51.0520] <wraitii>
jonco: that seems to compile and fits my mental picture indeed, thanks

[07:58:55.0753] <wraitii>
will see if it runs

[07:59:01.0634] <tcampbell>
ha

[07:59:13.0978] <jonco>
great

[07:59:50.0932] <wraitii>
(there already is an issue, in fact: https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/issues/29 )

[08:00:21.0595] <wraitii>
We could probably clean up our stuff a little bit and provide an example of using proxies

[08:01:34.0664] <wraitii>
jonco: that appears to work fine indeed, many thanks

[08:03:15.0222] <tcampbell>
wraitii: I put some high-level docs [here](https://firefox-source-docs.mozilla.org/js/index.html). I'm curious if they are clear from your perspective

[08:06:58.0998] <wraitii>
In general, you mean?

[08:07:43.0860] <tcampbell>
yeah

[08:07:45.0877] <wraitii>
I would say in general, if I also have the header code comments to look at, most things are fairly well documented

[08:08:04.0109] <wraitii>
For the build process the biggest issue I had was that we mostly don't use mozbuild

[08:08:14.0672] <jorendorff>
tcampbell: good s tuff

[08:08:18.0629] <jorendorff>
 * tcampbell: good stuff

[08:08:21.0992] <tcampbell>
yeah, build process for embedding is not good :(

[08:09:00.0236] <tcampbell>
thanks for answering my unprepared embedders survey! 😃

[08:09:08.0729] <tcampbell>
 * thanks for answering my adhocembedders survey! 😃

[08:09:13.0026] <tcampbell>
 * thanks for answering my adhoc embedders survey! 😃

[08:09:20.0386] <wraitii>
but except for the build process & the occasional VS bug the upgrade from 52 to 78 was very straightforward

[08:09:34.0488] <wraitii>
much more so than 45-52 (or the earlier ones I guess, wasn't really involved in those)

[08:09:48.0388] <tcampbell>
you can thank ptomato (and gnome project) for documenting these upgrades :)

[08:09:54.0919] <wraitii>
I do have a weird bug with ZONE_INCREMENTAL that I haven't had time to look into

[08:10:10.0907] <wraitii>
Indeed

[08:11:02.0955] <wraitii>
(Zone_incremental crashes after some quicksaving/loading (and thus GC), but I couldn't figure out why it did and why regular INCREMENTAL didn't)

[08:13:18.0399] <wraitii>
The target next time around will be to try and upgrade before they do, if at all possible, to give back some help :p 

[08:17:13.0385] <tcampbell>
jorendorff: can `JSON.parse` have side-effects (without a reviver)?

[08:17:43.0098] <jorendorff>
No. It can throw.

[08:17:48.0769] <jorendorff>
It side-effects stuff like the shape tree.

[08:17:52.0208] <tcampbell>
It uses canonical prototypes and define-property machinery, which I understood means it is well behaved

[08:18:04.0503] <tcampbell>
s/side-effect/arbitrary-script-exec/

[08:18:15.0918] <jorendorff>
Right, it's well-behaved

[08:19:07.0718] <jorendorff>
probably the worst it can do is oom

[08:19:13.0806] <tcampbell>
/me reviewing a new use of `JS_JSONParse`

[08:19:23.0673] <tcampbell>
/me  * reviewing a new use of `JS_ParseJSON`

[08:31:21.0170] <Ms2ger>
I'm sorry

[08:51:39.0549] <sfink>
jonco: ping

[08:52:03.0180] <sfink>
jonco: unping

[08:52:11.0045] <jonco>
oh hey

[08:53:32.0282] <sfink>
(I was just wondering why you hadn't told me "ping for meeting in 24 hours because it's not Wednesday like you think it is")

[08:55:30.0558] <jonco>
hah yeah I've found myself wondering what day it is a few times recently

[08:57:08.0484] <sfink>
It should be easier now that it's March 318, 2020. You can just do the day of the month % 7.

[10:18:31.0476] <nbp>
jonco: this would be my fault, you can easily rerun the test suite with --no-xdr

[10:22:24.0526] <jonco>
nbp: ah, thanks, that fixes it

[13:43:45.0482] <Aryx>
hi, there are new js engine crashes in the latest nightly: https://crash-stats.mozilla.org/signature/?product=Firefox&signature=js%3A%3Ajit%3A%3AFinishBailoutToBaseline&date=%3E%3D2020-07-12T21%3A21%3A00.000Z&date=%3C2021-01-12T21%3A21%3A00.000Z&_columns=date&_columns=product&_columns=version&_columns=build_id&_columns=platform&_columns=reason&_columns=address&_columns=install_time&_columns=startup_crash&_sort=-date&page=1#reports They are from https://hg.mozilla.org/mozilla-central/rev/26b00e8e7ac06c5c373cd1e7a69797ef3cecd050
Should more be done about this than the creation of a bug?

[13:59:16.0878] <iain>
Aryx: Please open a bug. There shouldn't be any security concerns here.

[14:27:09.0115] <mgaudet>
confession: Doing a bit of preliminary investigation into [removing subclassing](https://github.com/tc39/proposal-rm-builtin-subclassing); have a patch that allows me to disable/enable a good chunk of Type II and Type III subclassing via a command line flag. 

[14:27:11.0547] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:42:05.0107] <tcampbell>
What does an exit code of 3 mean for the js-shell?

[14:43:03.0878] <mgaudet>
return false without setting an exception typically

[14:43:30.0369] <mgaudet>
(in my experience) 

[14:43:32.0587] <tcampbell>
mgaudet: do you know where in the shell that happens?

[14:43:37.0262] <arai>
https://searchfox.org/mozilla-central/rev/014fe72eaba26dcf6082fb9bbaf208f97a38594e/js/src/shell/js.cpp#203-208

[14:43:49.0300] <tcampbell>
or tips to break on exit in rr...

[14:44:33.0365] <mgaudet>
Alas, not really. It typically happens to me during development, so these days I know where to look 

[14:48:59.0844] <arai>
yeah, if the shell exits without printing anything, it usually means forgetting reporting exception for failure case. (or accidentally returning false for successful case, for me usually)

[14:49:40.0320] <tcampbell>
yeah, I'm touching error reporting code

[14:50:05.0858] <tcampbell>
(trying to eliminitate double-faults.. might be not worth the trouble though..)

[14:50:41.0235] <tcampbell>
Replacing the `EXITCODE_RUNTIME_ERROR` with MOZ_CRASH helped

[15:11:27.0583] <sfink>
the whole exit status thing is uncomfortably complicated


2021-01-13
[07:02:08.0559] <@allstarschh|afk>
my zoom is crashing, will join the meeting later

[07:08:00.0478] <Ms2ger>
Oh, I thought "brexit status thing"

[07:16:45.0623] <iain>
Hard to do an Apple-to-Apple comparison?

[07:34:42.0889] <nbp>
/me always assume the doc is outdated, therefore I am no longer disappointed! Read the source!

[07:39:50.0450] <jonco>
tcampbell: can you file a bug with the specific GC things you'd like to see documented?

[07:40:59.0589] <tcampbell>
jonco: sure. largely just this comment https://searchfox.org/mozilla-central/source/js/src/gc/GC.cpp#8

[07:42:12.0162] <tcampbell>
high-level characteristics and what they mean: generation, incremental, precise, etc

[07:53:34.0612] <nbp>
tcampbell: where does the page you showed live?

[07:54:57.0227] <tcampbell>
nbp: https://firefox-source-docs.mozilla.org/

[07:55:04.0456] <tcampbell>
you can also reach from spidermonkey.dev

[07:55:33.0379] <tcampbell>
https://searchfox.org/mozilla-central/source/js/src/doc/index.rst

[07:55:39.0964] <tcampbell>
 * Source: https://searchfox.org/mozilla-central/source/js/src/doc/index.rst

[07:56:21.0856] <tcampbell>
 * you can also reach from spidermonkey.dev -> "Overview of SpiderMonkey"

[07:56:48.0465] <nbp>
Yours is more uptodate than mine.

[07:56:54.0193] <nbp>
ok, thanks.

[09:01:14.0304] <@allstarschh|afk>
jonco: sfink: https://bugzilla.mozilla.org/show_bug.cgi?id=1686222

[10:32:58.0232] <wraitii>
Hello, is it possible for JIT to change the order of property enumeration for JS Objects? I seem to have found "yes" but ES15 appears to define some order, so I'm not entirely sure

[10:35:38.0591] <mgaudet>
I don't think so; AIUI property enumeration order is specified. However, we do get this wrong in a few cases for lazy-initialization reasons. 

[10:35:49.0572] <mgaudet>
and certainly the JIT shouldn't be observable regardless

[10:36:16.0590] <iain>
Do you have an example?

[10:36:35.0567] <iain>
 * wraitii: Do you have an example?

[10:41:30.0334] <wraitii>
no, not really

[10:41:39.0163] <wraitii>
We have a weird bug, I'm trying to find plausible reasons for it

[10:41:50.0384] <wraitii>
JIT vs non-JIT path would be one, but I'm really not sure

[10:42:06.0583] <wraitii>
I guess I'm going to assume it's not that for the moment then

[10:42:20.0097] <wraitii>
(the bug is not SM related a priori)

[11:23:42.0610] <tcampbell>
I'm kind of reminded of Bug 1538386 which remains unresolved. That covers properties on the global object only.

[11:23:45.0110] <botzilla>
https://bugzil.la/1538386 — NEW (nobody) — Differential Testing: Different output message involving __proto__


2021-01-14
[16:12:02.0963] <arai>
is SMDOC rendered to a standalone documentation?

[16:12:39.0866] <arai>
does it follow certain syntax?

[16:19:00.0738] <iain>
No, the only feature of [SMDOC] is that it's easy to find in searchfox

[16:19:25.0513] <arai>
I see.  thanks :)

[02:28:52.0692] <nbp>
https://github.com/ruffle-rs/ruffle/blob/master/core/src/ecma_conversions.rs

[09:23:46.0951] <wraitii>
(FYI, the 'weird bug' above was cause by incorrect usage of GCHashTable, as I had trouble with MovableCellHasher and tried not using it)

[09:24:22.0565] <wraitii>
The 'trouble' is that it GCHashTable<JS::Heap<X>, T, MovableCellHasher<Js::Heap<>>> doesn't compile on VS17

[09:24:33.0548] <wraitii>
because of some weird undefined symbol error - probably a VS17 bug tbh

[09:40:05.0224] <sfink>
wtf? Over Thanksgiving, out of curiousity I tried building 0AD to better understand the SM embedding situation there. The compile failed on something, I forget what. Some Collada related thing, maybe? Anyway, yesterday I kicked off a build to recreate the error, and it appears to have built fine? I didn't update the 0ad source.

[09:40:27.0176] <sfink>
maybe some header that Fedora updated, perhaps

[09:40:39.0936] <wraitii>
could be

[09:40:48.0574] <wraitii>
also since thanksgiving we've upgraded from SM45 to 78

[09:40:53.0447] <wraitii>
and to C++17

[09:41:01.0713] <wraitii>
and fixed a lot of bugs

[09:41:03.0038] <sfink>
yeah, but I didn't pull

[09:41:29.0119] <wraitii>
ha, then dunno but \o/ I guess

[09:43:30.0120] <sfink>
huh? Ok, I'm not so good with git, but my HEAD is eb2fc5c53d0c55de308be6dc5bb7f952cfbc210d which seems to have a Date from 2018.

[09:44:16.0383] <wraitii>
yeah that's wrong

[09:44:34.0400] <wraitii>
the GitHub mirror is GitHub.com/0ad/0ad, HEAD is currently 8e21eca984753c4d148395f8d91bf30adf3f0152

[09:47:11.0599] <sfink>
ah! Somehow it looks like I pulled from https://github.com/Yves-G/0ad

[09:47:21.0055] <sfink>
this might be a checkout I did a few years ago

[09:48:14.0880] <wraitii>
Probably because Yves was working on the SM38 migration back then

[09:49:29.0219] <sfink>
uh, this is a big repo. My pull is at 6% at 136MB.

[09:49:47.0567] <wraitii>
It's about 7GB 

[09:49:53.0615] <wraitii>
there's art in the git repo

[09:49:56.0945] <wraitii>
which isn't great

[09:50:24.0770] <wraitii>
you can skip some of it by using --depth 1, but not as much as I'd like

[10:16:06.0195] <wraitii>
Is there a reason why the MovableCellHasher implementation is in Barrier.cpp ? Or is it just for compiling efficiency?

[10:20:58.0739] <sfink>
Hm. I should know, but I'd guess either compilation speed, or it would pull in stuff that we can otherwise keep out of header files.

[10:21:40.0650] <sfink>
it's using Zone internals, and perhaps that would require pulling in a large header in places we don't want.

[10:22:22.0848] <sfink>
oh, wait. MovableCellHasher is probably exposed publicly, and we don't *want* to expose everything it needs in its implementation. So that's probably it.

[10:23:40.0318] <wraitii>
Ok, I'm trying to sort out why this isn't compiling on VS17 and I'm not making progress :/

[10:23:47.0226] <sfink>
yeah. js/public/{RootingAPI.h,GCHashTable.h} use MovableCellHasher, and the impl wants gc/Zone.h, which is internal.

[10:24:24.0414] <sfink>
when did we (Gecko) drop official support for MSVC?

[10:26:00.0697] <mccr8>
sfink: 2019 maybe? https://groups.google.com/u/1/g/mozilla.dev.platform/c/me1ZMGgv6mI/m/u0xS5aapGQAJ

[10:26:52.0149] <sfink>
wraitii: what's the error?

[10:29:10.0287] <wraitii>
Unresolved Symbols for MovableCellHasher<Js::Heap<JSObject**>::hash (and a bunch of others, I get different ones on our CI but that's the idea)

[10:29:30.0965] <wraitii>
 * Unresolved Symbols for MovableCellHasher<Js::Heap<JSObject*>::hash (and a bunch of others, I get different ones on our CI but that's the idea)

[10:29:44.0558] <wraitii>
as if it didn't use the specialization

[10:29:57.0220] <wraitii>
or used it but somehow silently failed to generate code

[10:32:24.0345] <sfink>
does your version have the explicit `#if !MOZ_IS_GCC` check?

[10:32:28.0856] <sfink>
#if !MOZ_IS_GCC
template struct JS_PUBLIC_API MovableCellHasher<JSObject*>;
#endif

[10:33:21.0740] <wraitii>
I don't think so, and I believe MovableCellHasher<JSObject*> compiles

[10:34:08.0761] <sfink>
hm, ok. I was looking at bug 1560064.

[10:34:10.0449] <botzilla>
https://bugzil.la/1560064 — RESOLVED (mail) — js::MovableCellHasher<JSObject*> is not exported when SpiderMonkey is compiled with gcc

[10:34:31.0257] <wraitii>
I don't think that's it, no.

[10:34:37.0104] <sfink>
yeah, looks different

[10:34:55.0086] <wraitii>
One thing I'm confused by: JS::GCHashMap<JS::Heap<JSObject*>, u32, js::MovableCellHasher<JSObject*>, js::SystemAllocPolicy> seems to compile

[10:35:02.0813] <wraitii>
when I would expect to have to write JS::GCHashMap<JS::Heap<JSObject*>, u32, js::MovableCellHasher<JS::Heap<JSObject*>>, js::SystemAllocPolicy>

[10:36:49.0423] <wraitii>
Should I just use the first?

[10:39:11.0933] <sfink>
it must autoconvert everywhere the HashPolicy is used, I guess? It should probably work to use either. HashPolicy will only be reading, and JS::Heap doesn't need read barriers.

[10:39:36.0369] <sfink>
(and if it did, I would guess it wouldn't be the *only* read that is happening, so it would still work)

[10:47:43.0141] <wraitii>
ok

[10:47:51.0711] <wraitii>
Given that _that_ compiles with VS17, I think I'll just switch to it

[10:48:50.0945] <wraitii>
thanks for the help

[10:54:46.0697] <sfink>
if that causes problems, you might also try throwing a `template struct JS_PUBLIC_API MovableCellHasher<JS::Heap<JSObject*>>;` into `RootingAPI.h` or somewhere, and see if that fixes the compile.

[10:59:44.0946] <wraitii>
Tried that, it didn't seem to unfortunately

[11:00:02.0858] <wraitii>
But From testing using MovableCellHasher<JSObject*> seems to work fine

[11:01:09.0446] <sfink>
ok, cool

[12:13:57.0697] <jorendorff>
tcampbell: ping

[12:14:42.0194] <tcampbell>
jorendorff: pong

[12:15:19.0119] <jorendorff>
when there's a pending exception there's usually a pending savedStack --- not 100% but usually

[12:16:46.0065] <jorendorff>
tcampbell: but it's not accessible from JS at all, right? I was looking into https://bugzilla.mozilla.org/show_bug.cgi?id=1684043 and it occurred to me, we have JS code that tries to send error messages across thread/process boundaries and it probably drops the savedStack on the floor (?)

[12:17:29.0170] <tcampbell>
jorendorff: where does `.stack` get it from?

[12:18:08.0447] <jorendorff>
inside the ErrorObject. and (of course) only if it's actually an ErrorObject

[12:19:25.0216] <jorendorff>
again—that should usually be good enough by itself

[12:19:31.0685] <jorendorff>
but, sometimes it's not

[12:20:21.0911] <evilpie>
actually you should use `ExceptionStack::stack()` for pending exceptions

[12:20:35.0243] <evilpie>
otherwise it only works for error objects as you said

[12:22:51.0250] <evilpie>
and we can structure clone stacks and send them across process: https://searchfox.org/mozilla-central/source/dom/ipc/ContentChild.cpp#488

[12:23:36.0639] <jorendorff>
evilpie: Ooh, good to know. But still, this means if someone has written code to do this in JS, they cannot get it right. Right?

[12:24:01.0007] <evilpie>
normal JS no

[12:24:04.0499] <evilpie>
not sure about chrome JS

[12:25:15.0564] <jorendorff>
yeah, you'd need a method that basically implements try-catch but also catches the stack

[12:25:21.0789] <jorendorff>
it's annoyingly secret

[12:25:42.0644] <evilpie>
there is also window.onerror

[12:25:53.0006] <evilpie>
I am actually not completely sure what you are getting at

[12:27:52.0514] <jorendorff>
evilpie: Do you know what this code is? https://searchfox.org/mozilla-central/source/toolkit/components/promiseworker/worker/PromiseWorker.js#179

[12:28:30.0119] <jorendorff>
evilpie: I'm trying to figure out how we end up with bugs like this one, where a JS error happened but with no info at all https://bugzilla.mozilla.org/show_bug.cgi?id=1621861

[12:28:45.0255] <jorendorff>
 * evilpie: (what I'm getting at:) I'm trying to figure out how we end up with bugs like this one, where a JS error happened but with no info at all https://bugzilla.mozilla.org/show_bug.cgi?id=1621861

[12:29:04.0108] <evilpie>
ah a righteous cause

[12:29:45.0363] <evilpie>
I tried debugging a few of these "no exception info" at all bugs

[12:29:54.0536] <evilpie>
it's usually a bad intersection with XPCOM

[12:30:09.0078] <evilpie>
 * it's usually a bad interaction with XPCOM

[13:00:53.0911] <jorendorff>
evilpie: If gijs wanted to try this idea of crashing whenever someone throws something that isn't an ErrorObject, is this the right place to do it? https://searchfox.org/mozilla-central/source/xpcom/base/CycleCollectedJSRuntime.cpp#1878

[13:01:12.0641] <jorendorff>
evilpie: understanding he's going to have to disable a lot of JS language tests

[13:02:20.0792] <jorendorff>
Or maybe not, since he would be crashing only if *system* code does it

[13:02:38.0357] <evilpie>
seems reasonable? I was going to suggest JSContext::setPendingException, but that calls that code apparently

[13:02:45.0846] <evilpie>
I hadn't looked at this code before

[13:02:52.0362] <jorendorff>
right, and he wants to call some `xpc::` method to check for systemness

[13:03:07.0652] <jorendorff>
i have a feeling something will still manage to go horribly wrong with this idea, but

[13:03:10.0982] <jorendorff>
we'll see i guess

[13:33:54.0471] <dana>
hi folks - would anyone know if there's a particular reason why loading a js (es6) module in a chrome:// xhtml resource wouldn't work?

[13:34:14.0681] <dana>
(vs. an .html resource, which appears to work just fine)

[13:59:33.0200] <tcampbell>
hmm.. I wonder if we have any of the ES-module machinery to ChromeScriptLoader ..

[13:59:42.0556] <tcampbell>
 * hmm.. I wonder if we have any of the ES-module machinery hooked up to ChromeScriptLoader ..

[14:03:23.0440] <tcampbell>
 * hmm.. I wonder if we have any of the ES-module machinery hooked up to ChromeScriptLoader ..Edit: nope, the ChromeScriptLoader is only for specific ChromeUtils cases and unrelated

[14:23:13.0171] <tcampbell>
dana: what is your script tag in the xhtml case?

[14:24:06.0587] <dana>
my example is in that patch

[14:24:23.0620] <dana>
(we're also discussing this in #DOM, fyi)

[14:51:09.0552] <tcampbell>
(Looks like xhtml case triggers an additional cache system (XUL cache) which does not support es-modules. None of our script caches do at the moment .. )


2021-01-15
[07:21:26.0205] <jorendorff>
iain: dumb q. devtools wants to warn when a web site replaces `global.console`. (I'm asking what they are trying to achieve, a separate issue from the question i have for you)

[07:22:37.0539] <jorendorff>
iain: i believe it is impossible to detect, as `global.console` is a normal data property. what they *can* do is, check on every single use; or check once and then use `defineProperty` to  prevent future changes.

[07:23:05.0069] <jorendorff>
iain: but i figured i'd just ask if assigning to `console` is in any sense a slow path where we could insert a hack

[07:23:10.0036] <jorendorff>
long shot

[07:23:22.0698] <jorendorff>
i can tell the answer is no now that i've actually said the words

[07:31:20.0369] <tcampbell>
I think most of our magic property flags are visible to script

[07:58:27.0384] <lth>
xdr command line switches break debugging workflows?

[07:58:46.0863] <lth>
previously i could run a failing case with -f and get a command line that could be used from anywhere

[07:59:13.0072] <lth>
now, with some new xdr command line switches in the command line, i get "can't open self-hosted stencil xdr file"

[07:59:53.0458] <lth>
it looks like i can just remove the xdr switches but this is a bit of a papercut

[08:02:49.0651] <tcampbell>
lth:  --no-xdr flag can be passed to jit-test for now

[08:03:18.0294] <tcampbell>
agree it is a papercut though

[08:03:28.0885] <lth>
ok, thanks!

[08:05:42.0031] <tcampbell>
I wonder if a crude heuristic like only using the xdr mode if more than 50 tests are scheduled would be less problematic on average. Might need a console message in that case "Using selfhosted.xdr from /tmp/...."

[08:06:47.0615] <tcampbell>
We were trying to avoid having stale xdr files sitting around since crossing versions is a worse problem. Having the shell continue even if the xdr file isn't found might also help

[08:13:42.0508] <tcampbell>
```
> ./mach jit-test
Using selfhosted.xdr cache. (Disable with --no-xdr)
[8000|0|0] Tests Passed!

> ./mach jit-test --ion --debug arrayConcat
Select command to debug:
1. arrayConcat
2. arrayConcat --baseline-eager
...

> ./mach jit-test --xdr arrayConcat
Using selfhosted.xdr cache. (Disable with --no-xdr)
[1|0|0] Tests Passed!
```

[08:15:27.0808] <tcampbell>
 * Something like this..
```
> ./mach jit-test
Using selfhosted.xdr cache. (Disable with --no-xdr)
[8000|0|0] Tests Passed!

> ./mach jit-test --ion --debug arrayConcat
Select command to debug:
1. arrayConcat
2. arrayConcat --baseline-eager
...

> ./mach jit-test --xdr arrayConcat
Using selfhosted.xdr cache. (Disable with --no-xdr)
[1|0|0] Tests Passed!

> ./mach run --selfhosted-xdr /path/does/not/exist --selfhosted-xdr-mode decode
Warning: Could not open /path/does/not/exist. Falling back.
```

[08:28:09.0578] <iain>
 jorendorff I can't think of a non-user-visible approach that wouldn't impose a performance cost for other property lookups

[08:28:23.0046] <jorendorff>
yup

[08:32:51.0122] <iain>
jorendorff: I think it's probably possible to check cheaply whenever they want, though. So they could just do that at regular intervals?

[08:42:28.0995] <jorendorff>
they already have a way to check. i dunno, they'll figure it out

[08:42:50.0216] <jorendorff>
it's not for security, just to keep people from being confused when they type `console.whatever` and nothing happens

[08:42:52.0452] <nbp>
tcampbell: lth: I thought I added a check which check if there is one of more test case to be run before annotating with encode/decode.

[08:43:55.0446] <nbp>
visitAsmJSLoadHeap

[08:44:09.0306] <nbp>
 * https://searchfox.org/mozilla-central/source/js/src/tests/lib/tasks_unix.py#251

[08:49:17.0883] <tcampbell>
I think the problem is if you have 2 tests, such as the autogenerated flags variants

[09:11:50.0803] <lth>
yeah, i think in this case i had four - the filename was specific but it ran four variants

[10:57:09.0014] <mgaudet>
Before I open a spec issue, can someone double-check my reading? I've been investigating the [subclassing removal](https://github.com/tc39/proposal-rm-builtin-subclassing) proposal. I think I've found a pre-existing spec bug around the RegExp global flag. 

The following test case OOMs on the three engines I tried: 

```
class GlobalRegExp extends RegExp { global = true; }
let greg = new GlobalRegExp("hi");
"hi".match(greg);
```

The reason seems to be Type IV subclassing is broken in the specification. Specifically, the [`@@match`](https://tc39.es/ecma262/#sec-regexp.prototype-@@match) method uses Type IV subclassing to decide if we're a global regexp; and so loops over the input. However, [`RegExpBuiltinExec`](https://tc39.es/ecma262/#sec-regexpbuiltinexec) does -not- use Type IV subclassing. As such I think the algorithms are getting confused around`lastIndex` -- I've not nailed down the precise sequence here, but it definitely seems off. 

Regardless of what happens to the subclassing proposal, this is a spec bug right? 

[10:58:59.0065] <mgaudet>
/me drops wall of text then runs away for a while. Ooops 

[11:00:11.0920] <iain>
tcampbell: ping

[11:01:29.0687] <tcampbell>
iain: pong

[11:01:34.0439] <iain>
Question about STABLE_ACROSS_CLONES function flags

[11:01:36.0421] <iain>
https://phabricator.services.mozilla.com/D101292#inline-572461

[11:02:19.0058] <iain>
After doing some reading, my best guess is that it doesn't matter one way or the other, because this is a flag that only applies to self-hosted code, and self-hosted code is immune to function.arguments / function.caller

[11:02:36.0977] <iain>
But I wanted a second opinion

[11:02:42.0873] <tcampbell>
it doesn't matter because we don't have canonical vs instance

[11:02:50.0991] <tcampbell>
 * it doesn't matter because we don't have canonical vs instance-of-lambda

[11:02:57.0734] <tcampbell>
 * it doesn't matter because we don't have canonical vs instance-of-lambda for self-hosted

[11:03:11.0301] <iain>
Cool, thanks

[11:03:25.0941] <tcampbell>
(I commented on the patch if you reload..)

[11:03:57.0621] <iain>
Oh, so you did!

[11:04:23.0520] <tcampbell>
:)

[11:04:58.0710] <iain>
(Didn't notice that you were also marked as a reviewer)

[11:28:18.0440] <arai>
mgaudet: RegExpBuiltinExec had been using `global` property  in ES 2016  https://www.ecma-international.org/ecma-262/7.0/#sec-regexpbuiltinexec

[11:29:00.0241] <evilpie>
Hehe I added tcampbell especially because of the functionflags question

[11:29:51.0582] <tcampbell>
evilpie: would this work for Array.forEach as an example?

[11:29:52.0923] <arai>
changed by https://github.com/tc39/ecma262/pull/494

[11:36:31.0096] <arai>
mgaudet: and the issue seems to be mentioned in https://github.com/tc39/ecma262/issues/489#issuecomment-202531490

[11:37:02.0884] <evilpie>
tcampbell: that is sort of the hope :) Right now it doesn't work on a simple shell testcase, but sometimes trial inlining is a bit wonky on these

[11:38:35.0414] <tcampbell>
nice

[11:44:38.0053] <evilpie>
oh interesting Array.forEach is marked as uninlinable

[11:46:57.0492] <evilpie>
because of https://searchfox.org/mozilla-central/source/js/src/jit/IonAnalysis.cpp#3800

[11:47:12.0408] <evilpie>
and https://searchfox.org/mozilla-central/source/js/src/builtin/Array.js#208 I think

[11:51:32.0894] <evilpie>
mhm and we still don't inline the actual lambda call :(

[11:53:59.0466] <evilpie>
ah never mind it works 🎉

[11:57:09.0944] <evilpie>
I find the spew for trial inlining hard to follow

[11:58:45.0188] <mgaudet>
arai: thanks for the find! It seems like my read of this is that they fixed one issue, and made another new one :) 

[11:59:00.0043] <mgaudet>
I'll clarify my writing a bit and open a spec issue. Appreciate it! 

[12:01:06.0818] <iain>
evilpie: I mostly used the trial inlining spew while I was writing the optimization itself. These days I'm more likely to just look at `warp-snapshots` to see what we transpiled

[12:01:25.0992] <iain>
I'm open to improving the trial inlining spew if you have suggestions

[12:02:06.0110] <evilpie>
I think my biggest problem is I don't really understand when we start a new trial inlining attempt

[12:02:14.0996] <evilpie>
is that outer vs inner script?

[12:04:02.0802] <iain>
This line happens when we hit the trial inlining threshold and look for things to inline into a script: https://searchfox.org/mozilla-central/source/js/src/jit/TrialInlining.cpp#77-80

[12:05:09.0679] <iain>
"outer" vs "inner" is "are we inlining into an already-inlined ICScript?

[12:06:56.0257] <iain>
So if A->B->C, then we first do inlining for A (which should be "outer") and inline B, and then maybe later this inlined copy of B will be hot enough that we do trial-inlining for that (which should be "inner") and inline C 

[12:07:13.0112] <iain>
 * "outer" vs "inner" is "are we inlining into an already-inlined ICScript?"

[12:08:16.0347] <evilpie>
ah that makes sense

[12:13:16.0037] <iain>
The `arguments[i]` thing is because supporting it inside inlined functions for arbitrary `i` was complicated scary code that didn't seem worthwhile to port from Ion to Warp

[12:14:13.0958] <iain>
I'm currently just starting to look at getting rid of the arguments optimization entirely and using escape analysis / scalar replacement in the optimizer instead

[12:14:50.0892] <iain>
But I'm not far enough along to know whether it will make `arguments[i]` easier

[12:15:20.0249] <iain>
It might be possible to hack in special-case treatment for constant `i`?

[12:15:24.0130] <evilpie>
I wonder if we could optimize arguments[constant] to JSOp::GetArg in self-hosted code

[12:16:52.0200] <iain>
If that worked, I think it would dodge the problem, yeah

[12:20:43.0529] <mgaudet>
(opened https://github.com/tc39/ecma262/issues/2277 for anyone following along) 

[12:33:56.0863] <evilpie>
tcampbell: so do you want me to change anything with my patch? you didn't accept

[12:35:08.0748] <tcampbell>
evilpie: what is your preference?

[12:35:38.0292] <evilpie>
if it's not used anyway it might be confusing?

[12:36:32.0709] <tcampbell>
Sorry, question is do you still think FunctionFlags is the best way or did you want to change to MutableScriptFlags

[12:36:43.0242] <tcampbell>
we have less FunctionFlags than ScriptFlags is the main reason I bring it up

[12:42:12.0338] <evilpie>
mhm I see no issue with moving it MutableScriptFlags

[12:49:18.0704] <evilpie>
tcampbell: I can use `function->baseScript()` right?

[12:50:04.0028] <tcampbell>
evilpie: yep :)

[12:50:56.0401] <tcampbell>
The only subtle thing is in CopyScriptImpl you'll need an `if (src->islargeinlinable()) { dst->setIsLargeInlinable() }`

[12:51:52.0871] <evilpie>
I was wondering about `js::SelfHostedLazyScript`

[12:55:56.0147] <tcampbell>
oh hmm

[12:56:32.0702] <tcampbell>
a getOrCreateScript would be needed somewhere in Warp

[12:56:53.0864] <tcampbell>
do we even consider inlining lazy functions?

[12:57:14.0806] <evilpie>
no

[12:57:40.0888] <evilpie>
But isn't there also a problem when trying to set flag in SetIsInlinableLargeFunction?

[12:57:41.0202] <tcampbell>
then SelfHostedLazyScript should not be a problem

[12:57:57.0184] <tcampbell>
selfhosted realm is always full parsed

[12:58:19.0422] <evilpie>
ah, okay that makes sense

[12:58:23.0096] <tcampbell>
(it has to have the bytecode for others to clone, and the sh-realm is frozen at startup and never GC'd)

[13:03:47.0167] <evilpie>
nice seems to work now

[13:16:56.0192] <tcampbell>
evilpie: do existing tests hit this already?

[13:17:19.0285] <evilpie>
the inlining? I haven't checked

[13:17:20.0522] <evilpie>
let's see

[13:20:21.0383] <evilpie>
I doubt it, we don't have any at tests that loop or something

[13:34:10.0522] <tcampbell>
mind adding one then?

[13:35:25.0025] <evilpie>
I just did 👍️

[13:35:33.0463] <tcampbell>
:)

[13:36:15.0731] <tcampbell>
stamped

[13:42:20.0087] <evilpie>
for more complex stuff like array.forEach we should look into actually having some way to assert that we actually inline


2021-01-16
[03:40:55.0693] <TheQwertiest>
Hey everyone! A small question: would it be possible to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1243367?

Scenario: my software is a dynamic library that uses an embedded SM as a shared library (on Windows).
For reasons, I have to use statically linked c++ runtime, while SM uses dynamically linked runtime, so my library and SM use different memory heaps.
The problem occurs when I'm using some JSApi that allocates memory in SM (dynamic rutime heap), but frees it using inlined `free` that's defined in the JSApi headers, i.e. using the static runtime. Which causes application to crash.

Most notable example is `StackGCVector`

[03:41:20.0835] <TheQwertiest>
 * Hey everyone! A small question: would it be possible to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1243367?

Scenario: my software is a dynamic library that uses an embedded SM as a shared library (on Windows).
For reasons, I have to use statically linked c++ runtime, while SM uses dynamically linked runtime, so my library and SM use different memory heaps.
The problem occurs when I'm using some JSApi that allocates memory in SM (dynamic rutime heap), but frees it using inlined `free` that's defined in the JSApi headers, i.e. using the static runtime. Which causes application to crash.

Most notable example that has such behaviour is `StackGCVector`

[03:42:14.0433] <TheQwertiest>
I've searched through JSAPI headers and it doesnt look like there are a lot of places where inline `js_free` (that's mapped to `free()`) is called

[03:43:56.0450] <TheQwertiest>
A brute-force programming fix of replacing `free()` with `moz_arena_free(js::MallocArena, p)` in `js_free()` in headers removed the crash, but I'm sure that it's not a proper fix and will cause all sort of problems later.

[03:52:18.0009] <TheQwertiest>
> I've searched through JSAPI headers and it doesnt look like there are a lot of places where inline js_free (that's mapped to free()) is called

to be more specific:
- AllocPolicy.h: AllocPolicyBase and TempAllocPolicy: they use moz_arena_* functions to alloc, safe to use moz_arena_free
- CharacterEncoding.h: JS_free() for strings: no idea since the memory is allocated inside SM.
- MemoryMetrics.h: NotableClassInfo/NotableStringInfo/NotableScriptSourceInfo: no idea since the memory is allocated inside SM.
- SourceText.h: ~SourceText: used on `Unit* units` which is passed via `init()` method from outside, hence no idea.
- TraceLogger.h: ~TraceLoggerCollectorBuffer(): allocated via js_pod_malloc, safe to use moz_arena_free

[03:55:08.0662] <TheQwertiest>
 * Hey everyone! A small question: would it be possible to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1243367?

Scenario: my software is a dynamic library that uses an embedded SM as a shared library (on Windows).
For reasons, I have to use statically linked c++ runtime, while SM uses dynamically linked runtime, so my library and SM use different memory heaps.
The problem occurs when I'm using some JSApi that allocates memory in SM (dynamic rutime heap), but frees it using inlined `free` that's defined in the JSApi headers, i.e. using the static runtime heap. Which causes application to crash.

Most notable example that has such behaviour is `StackGCVector`

[03:57:10.0194] <TheQwertiest>
oh, and that's all based on esr68 sources

[03:57:28.0319] <TheQwertiest>
esr68.9 to be more specific

[04:01:02.0459] <TheQwertiest>
another solution would be to make `js_free()` non-inline, so that `free()` call would be actually inside SM binary, but I understand that would be less than ideal, since it might have performance implications.

[04:01:15.0177] <TheQwertiest>
 * another solution would be to make `js_free()` non-inline, so that `free()` call would be actually inside SM binary, but I understand that it would be less than ideal, since it might have performance implications.

[05:13:00.0852] <TheQwertiest>
 * another solution would be to make `js_free()` non-inline, so that `free()` call would be actually inside SM binary, but I understand that it would be less than ideal, because this code is used in non-public parts of SM as well (so it might have performance implications).

[05:18:26.0582] <TheQwertiest>
on that note, I can't for the life of me, find the definition of `moz_arena_free` in SM sources, could anyone help me, please? =)

[05:26:39.0289] <TheQwertiest>
 * on that note, I can't, for the life of me, find the definition of `moz_arena_free` in SM sources, could anyone help me, please? =)

[05:30:01.0508] <TheQwertiest>
oh, so my "hacky" solution is a actually working solution (still hacky though): I'm building SM with --disable-je-malloc, which makes moz_arena_free to be defined as a call to `free()`, so it's actually exactly what I need

[05:32:06.0792] <evilpie>
https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/docs/Building%20SpiderMonkey.md#disabling-jemalloc

[05:37:16.0897] <TheQwertiest>
@ev

[05:37:45.0225] <TheQwertiest>
> <@evilpie:mozilla.org> https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/docs/Building%20SpiderMonkey.md#disabling-jemalloc

I'm not sure what this is answer to :D

[05:37:54.0958] <TheQwertiest>
 * -snip-

[05:39:07.0519] <TheQwertiest>
Since the problem mentioned above happens even *with* --disable-je-malloc

[05:39:40.0038] <TheQwertiest>
and as I've said I *do* build --disable-je-malloc

[05:39:48.0280] <TheQwertiest>
 * and as I've said I _do_ build with --disable-je-malloc

[08:17:04.0715] <sfink>
`moz_arena_free` is a macro, https://searchfox.org/mozilla-central/rev/03224522336f60a1a61a87e1fcd4feb0a0315a9b/memory/build/malloc_decls.h#136

[08:20:47.0205] <sfink>
I don't know that it still works, but in theory you can always define `JS_USE_CUSTOM_ALLOCATOR` and then provide your own `jscustomallocator.h`. I didn't think it was supposed to be needed for what you're trying to do, though.

[08:25:56.0083] <sfink>
it does look like the thing to fix here would be bug 1243367 as you originally said

[08:25:57.0511] <botzilla>
https://bugzil.la/1243367 — NEW (nobody) — Deal with remaining js_free instances inlined into JSAPI

[08:26:33.0240] <sfink>
it sounds like making them non-inline would be the most straightforward fix. Not that I'm really understanding everything going on here.

[08:35:39.0624] <TheQwertiest>
> <@sfink:mozilla.org> it sounds like making them non-inline would be the most straightforward fix. Not that I'm really understanding everything going on here.

Do you mean that you don't understand the problem or do you mean the SM code? =)
If it's the former I can try to make a more structured description.

[09:04:08.0054] <TheQwertiest>
> <@sfink:mozilla.org> it sounds like making them non-inline would be the most straightforward fix. Not that I'm really understanding everything going on here.

 * Do you mean that you don't understand the problem or do you mean the SM code? :D
If it's the former I can try to make a more structured description.


2021-01-18
[16:29:21.0550] <arai>
is it fine to put C++ unit test of non-public API into jsapi-test?  or is there any other place?

[16:30:01.0142] <arai>
 * is it fine to put C++ unit test of non-public API into jsapi-tests?  or is there any other place?

[16:33:40.0045] <arai>
hm, looks like we already have such tests

[16:33:45.0180] <arai>
 * hm, looks like we already have such tests in jsapi-tests

[03:17:36.0565] <nbp>
Yes, we already have Range Analysis and MacroAssembler tests in jsapi-test, for the lack of better location.

[04:54:14.0924] <dbezhetskov>
hi, recently I discovered that `jit-tests` uses `--selfhosted-xdr-path /tmp/tmpzhxyGI/shell.xdr --selfhosted-xdr-mode encode` and I can't run failed test with these options, but if I remove them then everything is ok. What is it and how to disable it?

[05:13:26.0379] <Ms2ger>
Hm, is that new?

[05:14:30.0645] <Ms2ger>
Were tcampbell and lth not talking about that just now?

[06:57:25.0409] <nbp>
https://bugzilla.mozilla.org/show_bug.cgi?id=1687309 That's a first!

[08:56:37.0091] <sfink>
jonco: finally submitted my review comments for bug 1686219, sorry for the delay. Lots of comments, but very little that needs to be addressed in this patch.

[08:56:38.0716] <botzilla>
https://bugzil.la/1686219 — NEW (jonco) — Investigate storing chunk metadata as a header at the start of the chunk

[08:57:33.0142] <jonco>
sfink: no worries!  I'll take a look...

[09:02:56.0841] <jonco>
sfink: yeah, I was going to remove the padding in a later patch

[09:03:13.0242] <jonco>
I'll file a separate bug about improving the naming too


2021-01-19
[04:20:32.0949] <stratan>
Hello there! I’m relatively new to spidermonkey. I’m interested in understanding its JIT internals. I was wondering if somebody can point me to the source files that are involved from the interpreter, baseline IC etc all the way up to Warp and Ion.

[04:23:04.0692] <yulia>
This might be a good place to start: https://firefox-source-docs.mozilla.org/js/index.html#javascript-jits

[04:26:48.0568] <yulia>
Some of the files you are looking for are linked there. You are probably going to spend a bit of time in the js/src/jit folder. You will find bytecode and the interpreter in the js/src/vm foler

[04:28:23.0480] <yulia>
Ion is being replace, so it is probably a good idea to focus on baseline/warp

[04:28:28.0899] <yulia>
 * Ion is being replaced, so it is probably a good idea to focus on baseline/warp

[04:30:19.0267] <yulia>
 * Ion is more or less being replaced, so it is probably a good idea to focus on baseline/warp

[04:32:24.0958] <yulia>
If you prefer video walk throughs, this was part of the compiler compiler stream: https://www.youtube.com/watch?v=mgRXdgPcYc0&list=PLo3w8EB99pqJVPhmYbYdInBvAGarDavh-&index=4 -- this walks through implementing something in each of the jits with a fallback to the interpretter. Then it goes through introducing a new inline cache and doing the process again

[04:32:44.0206] <yulia>
 * If you prefer video walk throughs, this was part of the compiler compiler stream parts 3-7: https://www.youtube.com/watch?v=mgRXdgPcYc0&list=PLo3w8EB99pqJVPhmYbYdInBvAGarDavh-&index=4 -- this walks through implementing something in each of the jits with a fallback to the interpretter. Then it goes through introducing a new inline cache and doing the process again

[04:32:53.0597] <yulia>
 * If you prefer video walk throughs, this was part of the compiler compiler stream parts 4-7: https://www.youtube.com/watch?v=mgRXdgPcYc0&list=PLo3w8EB99pqJVPhmYbYdInBvAGarDavh-&index=4 -- this walks through implementing something in each of the jits with a fallback to the interpretter. Then it goes through introducing a new inline cache and doing the process again

[04:33:09.0641] <yulia>
 * If you prefer video walk throughs, this was part of the compiler compiler stream parts 4-7: https://www.youtube.com/watch?v=mgRXdgPcYc0&list=PLo3w8EB99pqJVPhmYbYdInBvAGarDavh-&index=4 -- this walks through implementing something in each of the jits with a fallback to the interpreter. Then it goes through introducing a new inline cache and doing the process again

[04:42:17.0745] <stratan>
Thank you yulia! I’ll have a look. I really enjoyed your videos by the way. Looking forward to more :)

[04:42:54.0142] <yulia>
Sure! happy they are helping :) let me know if you have any other questions or want to look at something specific

[04:43:25.0826] <stratan>
will do! Much appreciated :) 

[04:45:18.0555] <yulia>
for myself, I usually learn best by doing. If you haven't already cloned and run the js engine -- try doing that first, and then play around with the ICs and engine a bit (reproducing the work in the stream could be a good starting point). If you run into trouble anywhere along the way I can help you get unstuck

[04:45:59.0684] <yulia>
If you clone the current mozilla-central, you will see different code than what was in the stream. There is a stable branch here: https://github.com/codehag/compiler-compiler-dev/tree/bug-1286997

[04:46:26.0468] <yulia>
It will probably be more interesting to try to apply this to the current state of spidermonkey rather than that old branch -- however you can use that old branch to see each step along the way

[04:47:31.0758] <yulia>
(it is a nice bug mostly because it takes you through a lot of different parts of the engine)

[05:04:12.0721] <stratan>
I've build the js shell and I'm playing around with iongraph and IONFLAGS but I feel I need something more hands-on.

[05:04:33.0594] <stratan>
Your recommendations look great! thank you once again :)

[05:06:29.0333] <stratan>
 * I've built the js shell and I'm playing around with iongraph and IONFLAGS but I feel I need something more hands-on.

[05:10:43.0541] <stratan>
"../configure --enable-debug --disable-optimize --enable-jitspew" this is the command I'm using to build the js shell. If there are more interesting flags (i.e --enable-jitspew) that could help me let me know :) 

[05:26:36.0242] <mgaudet>
you've got the best of them there :) 

[05:28:41.0341] <stratan>
Hey Matthew! I was looking at SpiderMonkeyBibliography just today. Thank you very much for this :) 

[05:29:20.0647] <mgaudet>
You're welcome! 

[05:29:33.0038] <yulia>
One tip, i used configure in the stream, but it is probably easier to set up a mozconfig: https://firefox-source-docs.mozilla.org/js/build.html?highlight=mozconfig#setting-up-a-mozconfig -- then you can just use `./mach run`

[05:30:49.0673] <stratan>
 * `../configure --enable-debug --disable-optimize --enable-jitspew` this is the command I'm using to build the js shell. If there are more interesting flags (i.e --enable-jitspew) that could help me let me know :) 

[05:31:09.0777] <stratan>
sweet, thank you yulia :) 

[05:31:32.0416] <stratan>
 * `../configure --enable-debug --disable-optimize --enable-jitspew` this is the command I'm using to build the js shell. If there are more interesting flags (i.e `--enable-jitspew`) that could help me let me know :)

[05:55:28.0759] <nbp>
stratan: If you are interested in Warp, there is also the #warpbuilder:mozilla.org channel, where most of Warp related discussion happen.

[05:59:22.0512] <stratan>
@nbp awesome! I'll definitely join!

[06:00:11.0919] <stratan>
out of curiosity, is there a channel related to arm64e for the apple m1?

[06:00:26.0654] <stratan>
 * out of curiosity, is there a channel related to arm64e for the apple m1? I'm interested in tracking the progress there as well :)

[06:04:12.0110] <nbp>
stratan: not as far as I know, lth and I might be the person to ask question about our Arm64 backend.

[06:05:20.0133] <nbp>
stratan: if you are interested in making a patch with some inline assembly for Apple M1, we have some ToInt32 function to optimize.

[06:08:02.0564] <stratan>
nbp: haha I'm too much of a newbie to make a patch (feels scary) but thank you :)

[06:08:41.0007] <stratan>
but definitely planning to make one in the future as soon as I familiarize myself with the codebase :)

[06:47:48.0986] <tcampbell>
jandem + others: Should we change the channel message to point to spidermonkey.dev instead?

[06:50:13.0769] <jandem>
tcampbell: works for me

[06:52:49.0816] <tcampbell>
(someone can fix the phrasing if they have a better idea)

[09:44:18.0371] <stratan>
so I'm trying to understand what's going on behind the scenes as far as JIT is concerned by jitting the function ` function getElem() { return arr[0]; }` I'm interested in knowing the compilation process from the baseline interpreter, to the ICs, to emiting CacheIR, to the WarpBuilder. I've found a bunch of source files but I'm having a hard time to structure them in the right order in order to debug from start to end them under gdb. More specifically, the files of interest seem to be `WarpBuilder.cpp`, `BaselineIC.cpp`, `BaselineCodeGen.cpp`, `WarpSnapshot.cpp`, `CacheIR.cpp`, `BaselineCacheIRTranspiler.cpp`. Can somebody point me to the right direction? Thank you :)

[09:51:24.0591] <iain>
stratan: Many of us are in a meeting right now, but I will point to: 1. Te  `dis()` builtin in the shell (try `function foo() { return 3; } dis(foo)`) 2. IONFLAGS=warp-snapshots to see the transpiled CacheIR, 3. IONFLAGS=logs + [this tool](https://github.com/sstangl/iongraph) to visualize Warp optimization, and CACHEIR_LOGS=1 + [this visualizer](http://tomschuster.name/cacheir-tools/) to see cacheir in baseline + warp

[09:51:34.0130] <iain>
 * stratan: Many of us are in a meeting right now, but I will point to: 1. The  `dis()` builtin in the shell (try `function foo() { return 3; } dis(foo)`) 2. IONFLAGS=warp-snapshots to see the transpiled CacheIR, 3. IONFLAGS=logs + [this tool](https://github.com/sstangl/iongraph) to visualize Warp optimization, and CACHEIR_LOGS=1 + [this visualizer](http://tomschuster.name/cacheir-tools/) to see cacheir in baseline + warp

[10:00:57.0671] <stratan>
Thank you iain  I'm using iongraph already actually and it's been quite helpful. But now I'm more interested in let's say what's the drive (source code) behind which IR to emit, which IC to emit etc. I feel that the answer to that is in the source.

[10:02:11.0379] <stratan>
What's the "filter" for the CacheIR analyzer? and the log file? is it the ion.json file?

[10:02:31.0955] <iain>
The log file is the dumped json file, yes

[10:03:21.0373] <iain>
The filters are optional. They just help narrow things down in big dumps.

[10:04:01.0828] <iain>
The parser creates bytecode. Opcodes are in vm/Opcodes.h, and can be seen with `dis`. That bytecode is directly interpreted by the C++ interpreter and the baseline interpreter. The baseline compiler generates code directly from the bytecode. That code is in BaselineCodegen.cpp.

[10:04:48.0867] <iain>
All the IC fallbacks are in BaselineIC.cpp. They call into CacheIR.cpp, which makes the decisions about which CacheIR to generate. That CacheIR is then compiled by CacheIRCompiler.cpp and BaselineCacheIRCompiler.cpp.

[10:05:47.0389] <iain>
When we transition from baseline to Warp, WarpOracle.cpp takes a snapshot of the current state and passes it to WarpBuilder.cpp, which uses WarpCacheIRTranspiler.cpp to convert the CacheIR into MIR.

[10:06:05.0091] <iain>
The generated MIR then feeds into the Ion optimization pipeline, which is what you see in iongraph.

[10:10:36.0593] <stratan>
Much appreciated iain ! That's good enough to get me started :) By the way, the CacheIR Analyzer seems to unresponsive? I select the ion.json file and when I click Analyze, nothing happens. I guess I'm doing something wrong.

[10:12:01.0690] <iain>
Oh, sorry, ion.json is the wrong file. That's the output from IONLOG. You want to look at `/tmp/cacheir#####.json`

[10:12:59.0012] <stratan>
ah indeed! now it works! thank you

[10:13:36.0440] <iain>
 * Oh, sorry, ion.json is the wrong file. That's the output from IONFLAGS=logs. You want to look at `/tmp/cacheir#####.json`


2021-01-20
[21:14:46.0186] <arai>
nbp: ^

[23:23:24.0389] <jandem>
anyone else seeing those messages from Monday appear after the ones from yesterday? I wonder what happened there

[23:27:56.0094] <iain>
Yeah, I see the same thing

[23:50:03.0013] <lth>
Ms2ger: yes

[23:50:24.0919] <lth>
Ms2ger: run jit_test.py with the --no-xdr flag

[23:55:06.0140] <Ms2ger>
dbezhetskov: ⬆️

[23:55:13.0874] <Ms2ger>
Thanks lth !

[00:12:32.0999] <nbp>
dbezhetskov / iain , are you using `--repeat` option? 

[00:12:56.0521] <stratan>
 * Much appreciated iain ! That's good enough to get me started :) By the way, the CacheIR Analyzer seems to be unresponsive? I select the ion.json file and when I click Analyze, nothing happens. I guess I'm doing something wrong.

[00:13:14.0575] <nbp>
* dbezhetskov  / iain  , are you using `--repeat` option? 

[00:17:34.0459] <iain>
(I am not seeing this problem. I was seeing the same thing as jandem where Matrix said the most recent messages were from Monday.)

[00:51:13.0278] <stratan>
Is there any ETA for PAC support in spidermonkey?

[00:57:38.0100] <evilpie>
never. why would spidermonkey support PAC? Firefox has support for it though

[00:58:57.0894] <stratan>
hm? The latest Firefox isn't released PAC-compiled.

[00:59:30.0027] <evilpie>
oh. I think we are talking about different PACs then: https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling/Proxy_Auto-Configuration_PAC_file

[01:00:13.0083] <stratan>
Seems so. I'm talking about Pointer Authentication Code.

[02:09:15.0098] <nbp>
dbezhetskov: (sorry if this is a late reply) Feel free to open a bug about the `--selfhosted-xdr-mode` option which causes failures. This is not supposed to happen and I should probably investigate it.

[02:48:30.0022] <dbezhetskov>
> <@nbp:mozilla.org> dbezhetskov: (sorry if this is a late reply) Feel free to open a bug about the `--selfhosted-xdr-mode` option which causes failures. This is not supposed to happen and I should probably investigate it.

no problem at all, I just remove `*xdr-mode` and everything works :)

[02:49:10.0609] <nbp>
dbezhetskov: I understand, the question is which configuration do you used, such that we can make it work without workaround ;)

[02:50:24.0373] <dbezhetskov>
> <@nbp:mozilla.org> dbezhetskov: I understand, the question is which configuration do you used, such that we can make it work without workaround ;)

well, `ac_add_options --enable-artifact-builds` it is what in my mozconfig file

[02:50:49.0020] <nbp>
Why do you even run the jit-test then?

[02:50:57.0877] <dbezhetskov>
`../jit-test/jit_test.py -f dist/bin/js wasm`

[02:51:30.0722] <dbezhetskov>
 * `../jit-test/jit_test.py -f dist/bin/js wasm` in my `mozilla/js/src/build_DBG.OBJ`

[02:52:30.0068] <nbp>
If you are using artifact builds, this implies you are getting a binary which is already compiled, and which should already have gone through the compilation & test phase of the JS engine.

[02:53:53.0653] <dbezhetskov>
> <@nbp:mozilla.org> If you are using artifact builds, this implies you are getting a binary which is already compiled, and which should already have gone through the compilation & test phase of the JS engine.

yep, I see, it is strange because I don't choose artifacts build in `mach`, let me see again at config

[02:54:52.0033] <dbezhetskov>
sorry, this config is right

[02:56:09.0736] <nbp>
did you recompile the JS engine after updating the sources?

[02:56:39.0094] <dbezhetskov>
> <@nbp:mozilla.org> did you recompile the JS engine after updating the sources?

sure

[02:57:06.0936] <nbp>
hum … I do not know what would be wrong, as this should be tested by the CI :/

[02:58:05.0865] <nbp>
Does `dist/bin/js --help | grep selfhosted` print the 2 options used by the `jit_test`?

[03:12:47.0238] <nbp>
What is the failure then?

[03:47:59.0418] <dbezhetskov>
> <@nbp:mozilla.org> What is the failure then?

when I run `jit-test` and some tests fails the script prints commands for reproduction like this

[03:48:21.0396] <dbezhetskov>
`dist/bin/js -f /home/dmitry/code/igalia/mozilla_2/js/src/jit-test/lib/prologue.js --selfhosted-xdr-path /tmp/tmpQvG5vU/shell.xdr --selfhosted-xdr-mode encode -e 'const platform='"'"'linux2'"'"'' -e 'const libdir='"'"'/home/dmitry/code/igalia/mozilla_2/js/src/jit-test/lib/'"'"'' -e 'const scriptdir='"'"'/home/dmitry/code/igalia/mozilla_2/js/src/jit-test/tests/wasm/abi-2020/'"'"'' -f /home/dmitry/code/igalia/mozilla_2/js/src/jit-test/lib/wasm.js --module-load-path /home/dmitry/code/igalia/mozilla_2/js/src/jit-test/modules/ -f /home/dmitry/code/igalia/mozilla_2/js/src/jit-test/tests/wasm/abi-2020/add.js`

[03:48:34.0632] <nbp>
oh, and you cannot reproduce it because the file no longer exists, got it!

[03:48:54.0305] <dbezhetskov>
> <@nbp:mozilla.org> oh, and you cannot reproduce it because the file no longer exists, got it!

exactly

[03:49:21.0228] <dbezhetskov>
but I can remove `--selfhosted-xdr-path /tmp/tmpQvG5vU/shell.xdr --selfhosted-xdr-mode encode` and continue my debugging

[03:49:22.0698] <nbp>
the failure is not caused by the flags when running the test suite, but it is caused by these flag when running each test manually.

[05:52:34.0622] <nbp>
jonco: hum … I am sorry about `--repeat`. Apparently I manage to get bitten twice by generators in python.

[05:53:22.0106] <jonco>
nbp: hah, no worries

[06:47:34.0497] <jonco>
how do I build the documentation in js/src/doc?

[06:49:27.0144] <jandem>
`mach doc` I think

[07:02:43.0934] <jonco>
jandem: thanks

[07:31:24.0877] <tcampbell>
jonco: the other way is to push your patch to phabricator and the bots will give you a link to a rendered deployment

[07:31:57.0128] <jonco>
tcampbell: thanks, easier than getting mach doc to work it seems

[07:33:18.0244] <tcampbell>
yeah, I ran into a bunch of trouble getting mach doc to work. When I did though, the nice thing is they have all the auto-reload hooked up, so when you save the .rst file, your browser auto-reloads with the new version rendered

[07:52:50.0913] <stratan>
Hello there. Can someone explain to me the relationship between `frame` and JIT? How should I think of it when reading let's say the Baseline compiler code? Is it a virtual stack that is used by JIT to perform operations? Also what does it mean to "sync the stack"? 

[07:54:02.0492] <stratan>
Let's take this code as an example

```
bool BaselineCodeGen<Handler>::emit_GetElem() {
  // Keep top two stack values in R0 and R1.
  frame.popRegsAndSync(2);

  // Call IC.
  if (!emitNextIC()) {
    return false;
  }

  // Mark R0 as pushed stack value.
  frame.push(R0);
  return true;
}
```

[07:55:23.0181] <stratan>
if I were to examine the generated code right after the `frame.popRegsAndSync(2)` line, should I expect a generated assembly that performs two pops?

[07:56:15.0498] <stratan>
The explanation here https://searchfox.org/mozilla-central/source/js/src/jit/BaselineFrameInfo.h#27 doesn't click for me

[07:56:50.0690] <yulia>
did you happen to already read this definition here? https://searchfox.org/mozilla-central/source/js/src/jit/BaselineFrameInfo.cpp#123

[08:01:20.0130] <stratan>
hm ok maybe a bit better now. any idea what `useCount` and `defCount` mean? https://searchfox.org/mozilla-central/source/js/src/jit/BytecodeAnalysis.cpp#97

[08:02:01.0531] <yulia>
I don't know if you already found this, in case you havent -- if you hover most symbols in searchfox you can go directly to the definition. Here is a screenshot of how to get there from where you were:



[08:02:02.0758] <stratan>
does `stackDepth` correspond to the amount of stack slots opcode x needs?

[08:02:32.0329] <stratan>
> <@yulia:mozilla.org> I don't know if you already found this, in case you havent -- if you hover most symbols in searchfox you can go directly to the definition. Here is a screenshot of how to get there from where you were:

yes indeed! searchfox rocks :)

[08:03:16.0720] <yulia>
ok great, just wanted to make sure

[08:06:26.0302] <yulia>
nuses if i recall correctly is the number of things on the stack that it uses, and ndefs is the number of things its expected to define? I think anyway

[08:06:48.0731] <yulia>
are you familiar with how stack machines work?

[08:07:16.0191] <evilpie>
https://searchfox.org/mozilla-central/source/js/src/vm/Opcodes.h#33 defines these

[08:08:12.0129] <stratan>
ah great! thank you to both of you :)

[08:08:28.0184] <stratan>
I should grep for all `SMDOC` comments before asking questions I guess haha

[08:09:05.0119] <yulia>
sometimes its hard to find the right words, but you will get an intuition for where things are soon :)

[08:09:10.0087] <yulia>
don't worry about asking

[08:28:16.0294] <jorendorff>
I am splitting LexicalEnvironmentObject into separate subclasses for the global "lexical" env, actually-lexical envs like blocks, and non-syntactic weirdo envs

[08:28:45.0357] <jorendorff>
which is better: (1) LexicalEnvironmentObject (2) NonExtensibleLexicalEnvironmentObject (3) BlockObject

[08:34:38.0020] <yulia>
is this for the naming of a specific subclass? i guess it is right?

[08:35:08.0716] <yulia>
 * is this for the naming of a specific subclass? i guess it is right? for the former?

[08:37:11.0292] <jandem>
hm, (2) is long, would make it awkward to type/use

[08:38:00.0046] <jandem>
there used to be a BlockObject at some point

[09:15:30.0220] <evilpie>
jandem: jorendorff yulia do we want to enable .at before the beta merge?

[09:15:50.0877] <evilpie>
seems like Chrome is going to ship in 89, which is next version after 88 (released yesterday)

[09:16:03.0507] <jorendorff>
ship it

[09:16:03.0962] <jandem>
it's stage 3 now right? 

[09:16:07.0685] <jorendorff>
yup

[09:16:19.0595] <yulia>
yes

[09:16:24.0883] <jandem>
exciting it stuck this time

[09:16:27.0978] <jandem>
well so far

[09:16:37.0208] <evilpie>
someone review https://phabricator.services.mozilla.com/D102453 pls

[09:17:15.0661] <jorendorff>
yulia: jandem: Looking for a name for the specific subclass for non-extensible environments that correspond to blocks and other specific regions of a script or module

[09:18:13.0043] <jorendorff>
The shared base class of this one, and GlobalLexicalEnvironment, and NonSyntacticLexicalEnvironment, currently called LexicalEnvironmentObject, is being renamed to AbstractLexicalEnvironmentObject

[09:19:00.0271] <jorendorff>
(could change it back — partly i just want to make sure i visit all the places where we're using it)

[09:20:25.0554] <jorendorff>
"other specific regions" includes for-loops, named FunctionExpressions, classes, catch clauses, and probably a few others

[09:21:19.0462] <jandem>
what about `NonExtensibleLexicalEnvObject` or so?

[09:21:49.0057] <jorendorff>
maybe `s/EnvironmentObject/Env/` throughout the tree, YOLO

[09:23:27.0415] <iain>
AbstractLexicalEnv + GlobalLexicalEnv / NonSyntacticLexicalEnv / BlockLexicalEnv?

[09:23:42.0997] <jorendorff>
those all sound very nice

[09:26:21.0692] <iain>
I think "NonExtensible" is a lot of characters to type to say what something isn't

[09:28:05.0665] <jandem>
"Extensible" is also a bit overloaded in the JS engine (see preventExtensions, isExtensible)

[09:29:36.0126] <jandem>
(it's sort of similar but also not really)

[09:48:01.0639] <jorendorff>
tcampbell: How well are the more exotic non-syntactic environment cases tested in SM standalone tests? looks like we have a jsapi-test for the JSM api

[09:48:10.0338] <jorendorff>
how good should i feel about that...

[09:48:26.0011] <jorendorff>
never mind, i need to do a full test run anyway

[09:49:02.0055] <tcampbell>
If this change was a bridge, I wouldn't be walking on it myself first.

[09:49:14.0225] <tcampbell>
"marginal" coverage

[11:23:51.0887] <gankra>
hey spidermonkey folks, trying to plan what low-level tools will be up to this year, and I was curious if y'all have been getting many complaints (or are yourselves annoyed) with the state of JS <-> Rust interop, especially in the context of xpcom (e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=1651223 ), or if anything regarding that is already on your roadmap?

[11:27:14.0478] <gankra>
(this was a big source of complaints in our survey last year, so i'm inclined to do *something* here but not sure what to focus on precisely)

[11:34:30.0813] <iain>
gankra: I'm not aware of any internal-to-SM JS<->Rust interop. IIRC, we currently only have smooshmonkey and cranelift as Rust components of SM, neither of which is shipping in production, and both of which are more C++<->Rust.

[11:35:53.0467] <gankra>
right fair

[11:39:55.0043] <iain>
Also I know that the rust bindings for SM are somewhat stale: see, for example, https://bugzilla.mozilla.org/show_bug.cgi?id=1616543

[11:40:14.0925] <iain>
I don't personally know anything about xpcom complaints, but other people on the team might

[13:46:57.0481] <jorendorff>
kind of weird: jit-test/tests/basic/bug1516406.js is failing for me because if there's a pending OOM exception here https://searchfox.org/mozilla-central/source/js/src/vm/Scope.cpp#1886 we don't clear it

[13:47:12.0535] <jorendorff>
but that's been that way forever. is this test failing for anyone else?

[14:04:25.0791] <tcampbell>
Not failing for me.. I wonder if there is some cache that causes the oomTest retries to not follow consistent paths, making it intermittant?

[14:10:06.0617] <tcampbell>
jorendorff: That code you linked is dead?

[14:10:19.0935] <tcampbell>
https://searchfox.org/mozilla-central/search?q=DumpBindings&path=

[14:10:25.0557] <tcampbell>
wut

[14:10:42.0926] <jorendorff>
yeah, i just realized i have more patches in my stack than i remembered

[14:11:03.0121] <jorendorff>
i'm failing this due to one of those, where I add a DumpBindings call to dumpScopeChain

[14:11:06.0483] <jorendorff>
derp

[14:11:07.0337] <jorendorff>
thanks

[14:11:50.0263] <tcampbell>
np


2021-01-21
[01:12:01.0678] <stratan>
Hello there. Who may I ask about Pointer Authentication support in spidermonkey?

[01:34:13.0383] <lth>
If anybody is thinking about implementing Atomics.waitAsync, this discussion is interesting: https://github.com/WebAssembly/threads/issues/176

[01:34:17.0077] <lth>
yulia: ^

[01:34:55.0409] <lth>
(it discusses liveness of the memory, storage retention / leaks, and the problems that we get into with concurrency)

[01:49:18.0326] <stratan>
Is there a secret hidden feature to turn on dark mode on searchfox? :D 

[02:44:34.0015] <jandem>
> <@jandem:mozilla.org> exciting it stuck this time

I'm sorry, I jinxed it: https://github.com/tc39/proposal-relative-indexing-method/issues/41

[02:46:39.0118] <jandem>
stratan: not that I know of. There's bug 1580988...

[02:46:40.0512] <botzilla>
https://bugzil.la/1580988 — NEW (nobody) — Obligatory feature request: dark mode/theme

[03:03:34.0409] <emilio>
stratan: patches welcome, I think it should be somewhat straight-forward :-)

[03:06:19.0590] <evilpie>
jandem: I guess we can just delay one cycle. Otherwise we would probably ship even before Chrome?

[03:07:24.0117] <jandem>
letting them ship first makes sense

[03:28:27.0425] <stratan>
```
let arr = [1, 2, 3, 4, 5];

function foo() {  
	return arr[1];
}

dumpObject(foo)

function main() {
	for (let i = 0; i < 0x1000; i++) {
		foo();
	}
}

readline();
main();
disnative(foo, "./out.bin")
```

Am I doing something wrong? I get this error https://searchfox.org/mozilla-central/source/js/src/builtin/TestingFunctions.cpp#1237

[03:44:17.0324] <arai>
it sounds like an issue around newline

[03:44:34.0185] <arai>
I think, line fopen should use "wb" instead of "w"

[03:44:39.0091] <arai>
 * I think, fopen should use "wb" instead of "w"

[03:46:58.0232] <arai>
stratan: ^

[04:33:24.0533] <stratan>
arai: cool thank you!

[05:57:33.0431] <stratan>
arai: no difference after all, still getting the error

[05:58:22.0379] <arai>
can you check the value of `expected_length`, and the return value of `fwrite` ?

[05:58:41.0922] <stratan>
I'm away now but I'll check later, thank you

[06:02:10.0652] <arai>
oh, I get the same error

[06:03:55.0175] <arai>
will look into it

[06:05:16.0203] <arai>
ah

[06:05:33.0608] <arai>
it should be `fwrite(jit_begin, 1, jit_end - jit_begin, f)`

[06:05:59.0027] <arai>
size and count are swapped, and fwrite returns count = 1

[06:18:19.0518] <stratan>
Thank you for the catch :)

[10:54:48.0766] <nbp>
lth / tcampbell: interested in a quick review? https://phabricator.services.mozilla.com/D102630

[11:00:50.0010] <tcampbell>
nbp: stamped

[11:01:08.0914] <nbp>
Thanks

[12:18:33.0586] <tcampbell>
jorendorff: I have a fix for Bug 1684821 for you, but the cost is you get to review it. I can explain the details further if it helps..

[12:18:35.0040] <botzilla>
https://bugzil.la/1684821 — NEW (tcampbell) — Assertion failure: environment().is<CallObject>() && environment().as<CallObject>().callee().isGeneratorOrAsync(), at vm/EnvironmentObject.cpp:2434

[12:19:35.0491] <jorendorff>
cool. I can look now

[12:20:21.0795] <tcampbell>
thanks. this stuff always falls out of my head immediately..

[12:20:40.0046] <jorendorff>
thanks for the test case reduction, to start with

[12:21:19.0976] <tcampbell>
I realized you were going ask me to review, which wasn't gonna take me any less time :p

[12:23:18.0936] <jorendorff>
haha

[12:23:29.0897] <tcampbell>
[The assert](https://searchfox.org/mozilla-central/rev/8dae1cc76a6b45e05198bc0d5d4edb7bf1003265/js/src/vm/EnvironmentObject.cpp#2469-2472) checks that we don't have a snapshot already _unless_ we are in async/generator that already paused.

[12:23:55.0129] <tcampbell>
the environment when we pop frames apparently can be the lexenvobj instead of jsut the callobj

[12:24:09.0932] <jorendorff>
Right, it all makes sense

[12:24:41.0850] <tcampbell>
we I need the `symbol.iterator` in the test case is beyond me

[12:25:49.0692] <tcampbell>
maybe it isn't actually

[12:25:58.0277] <jorendorff>
that is definitely bizarre. Doesn't that iterator method just `return this`?

[12:27:02.0246] <jorendorff>
tcampbell: stamped, either way

[12:27:32.0416] <tcampbell>
thanks. removed the symbol.iterator and still reproduces

[12:27:57.0061] <tcampbell>
jorendorff: need a test tag

[12:28:45.0755] <tcampbell>
(I recommend this addon https://github.com/nchevobbe/phab-test-policy/releases )

[15:53:20.0681] <pbone>
Can someone remind me the name of the class that we use to do some clean up action from it's destructor.  Like you pass it a lambda during construction then wait for it to go out of scope to call the lambda.  (maybe an `std::function`)

[15:55:16.0604] <sfink>
ScopeExit

[15:55:58.0794] <sfink>
I think I called it something different initially, then stumbled across the standards-track version that was going to be called `std::scope_exit`

[15:59:17.0885] <pbone>
Yep. that's what I want.  Thanks.

[15:59:45.0974] <pbone>
I remember using it (or something with a different name that may have been the same or different) and just couldn't find it.


2021-01-22
[03:59:06.0716] <nbp>
stratan: IF you are interested in Apple M1, the bug I was thinking about would be this one: https://bugzilla.mozilla.org/show_bug.cgi?id=1688187 it should be quite easy, the most difficult part would be  that Firefox is being compiled on both gcc/clang, and they might have a different syntax for inline assembly.

[04:40:47.0343] <stratan>
thank you for the suggestion nbp :) 

[04:41:46.0265] <stratan>
nbp: is there any link where I can follow the Pointer Authentication support progress?

[05:32:06.0724] <nbp>
stratan: There is no pointer authentication work yet.

[05:34:52.0906] <stratan>
I recall an issue about PAC in the jit but I can’t find it anymore 

[05:36:14.0087] <nbp>
it has been mentioned before, but it is not necessary yet. The Apple M1 does offer the feature, but Firefox does not make use of it yet.

[05:37:19.0120] <stratan>
Alright, thank you for the heads up 

[05:38:58.0990] <nbp>
There are concerns about adding pointer authentication in the JS engine, most notably it will be related to how values are packed in JSValue.

[05:40:17.0672] <stratan>
That’s one of the main reasons I was asking about the progress :) I’m curious to know how things will get (re)implemented.

[05:40:24.0013] <nbp>
It has been mentioned here: https://bugzilla.mozilla.org/show_bug.cgi?id=1648827#c3

[05:40:57.0448] <stratan>
Ah right, that’s the issue I couldn’t recall. Nice!

[06:52:23.0100] <tcampbell>
@jonco is there a metabug for concurrent gc investigation

[06:52:31.0784] <tcampbell>
 * jonco:  is there a metabug for concurrent gc investigation

[07:38:23.0015] <mccr8>
There's https://bugzilla.mozilla.org/show_bug.cgi?id=1232802 but it hasn't been touched in a few years. :P

[07:38:45.0813] <jonco>
tcampbell: there's also bug 721236

[07:38:47.0156] <botzilla>
https://bugzil.la/721236 — NEW (nobody) — Concurrent GC marking

[12:16:29.0962] <denispal>
What is the difference b/w sourceStart() and toStringStart() in JSScript?

[12:18:37.0306] <evilpie>
denispal: see https://searchfox.org/mozilla-central/source/js/src/vm/SharedStencil.h#125

[12:19:23.0861] <denispal>
evilpie: perfect, thank you

[13:47:22.0939] <Waldo>
TIL `std::size` exists in C++17.


2021-01-26
[05:22:48.0878] <yulia | Timezone = PT (ish)>
Import maps sort of fell off my radar, but it looks like chrome will ship in 89: https://wicg.github.io/import-maps/

[05:23:25.0582] <yulia | Timezone = PT (ish)>
I spoke with annevk about it, it looks like there will be some more work yet to integrate with the HTML Standard, but we might want to see where this fits in for us, work wise

[05:23:35.0628] <yulia | Timezone = PT (ish)>
 * I spoke with annevk about it, it looks like there will be some more work yet to integrate with the HTML Standard, but we might want to see where this fits in for us, work wise, if we want to prototype it

[08:00:14.0994] <arai>
uh, spidermonkey local build with `make` from `autospider.py` is broken.  it somehow tries to import `mozbuild.action.preprocessor` and fails :/

[08:00:56.0708] <arai>
```
/Applications/Xcode.app/Contents/Developer/usr/bin/python3: Error while finding module specification for 'mozbuild.action.process_install_manifest' (ModuleNotFoundError: No module named 'mozbuild')
```


[08:01:18.0329] <arai>
 * ```
/Applications/Xcode.app/Contents/Developer/usr/bin/python3: Error while finding module specification for 'mozbuild.action.preprocessor' (ModuleNotFoundError: No module named 'mozbuild')
...
/Applications/Xcode.app/Contents/Developer/usr/bin/python3: Error while finding module specification for 'mozbuild.action.process_install_manifest' (ModuleNotFoundError: No module named 'mozbuild')
```

[08:03:39.0911] <arai>
/me tries to bisect

[08:06:52.0316] <arai>
it fails even with revision from last month.  maybe my env is broken...?

[08:11:17.0884] <tcampbell>
arai: try ./mach create-mach-environment

[08:11:26.0641] <tcampbell>
it should rebuild the venvs

[08:11:43.0207] <arai>
does it require venv?

[08:12:45.0639] <tcampbell>
for autospider? not sure. I've seen similar errors before when I go back and forth between old branches. I'm not sure what uses what though =\

[08:13:09.0521] <arai>
it should be basically configure + make

[08:13:25.0307] <arai>
and if it requires venv, that's unfortunate...

[08:13:46.0766] <tcampbell>
our configure script still calls into python I thought (to process mozbuild files)

[08:14:01.0383] <arai>
ah...

[08:14:08.0455] <arai>
/me tries raw configure + make

[08:14:45.0161] <tcampbell>
See js/src/configure.in

[08:14:50.0856] <tcampbell>
 * See `js/src/configure.in`

[08:19:26.0462] <arai>
`./mach create-mach-environment` doesn't solve. now waiting for raw `make` result

[08:35:54.0943] <arai>
oh, raw configure + make works...

[08:36:31.0181] <evilpie>
I switched to mozconfig + ./mach build and I am quite happy with it

[08:38:05.0876] <arai>
can we use autospider variants from mach build ?  or should it be done manually?

[08:38:48.0231] <tcampbell>
I'm curiou which variants you are interested in

[08:39:18.0641] <sfink>
manual for now. I was intending to switch `autospider.py` over to `mach`, but it's not high in my priority list atm

[08:39:33.0285] <tcampbell>
(I still would love a `--cgc` flag to `mach jit-test`, but have been too lazy to do myself..)

[08:39:49.0930] <arai>
I use plain/plaindebug/smoosh/smooshdebug usually, and compacting sometimes

[08:40:43.0732] <tcampbell>
ah. Compacting is just a debug build run with JS_GC_ZEAL=10 env var

[08:40:52.0827] <tcampbell>
don't actually need to rebuild

[08:41:01.0772] <arai>
oh

[08:41:06.0944] <arai>
good to know :)

[08:41:17.0460] <tcampbell>
so ideally it would just be `./mach jit-test --cgc` on any existing build

[08:42:22.0670] <tcampbell>
related `--ion` and `--tbpl` are now very bad test config names 😛

[08:43:30.0275] <sfink>
I could always land https://phabricator.services.mozilla.com/D91880 over tcampbell's objections, but I suspect he'll still feel the same about it 😛

[08:44:08.0109] <tcampbell>
oh, that was the clever parsing thing?

[08:44:29.0947] <sfink>
yeah

[08:46:57.0306] <tcampbell>
I guess if the default was something like 'none' and didn't try reading any files, then this would wouldn't have any impact on current system

[08:47:03.0420] <sfink>
it has the advantage of less hardcoding, and the disadvantage of more hardcoding. And more coding.

[08:52:32.0431] <tcampbell>
Soon we'll learn that sfink was the autospider all along

[08:52:57.0095] <arai>
looks like it fails if I invoke autospider.py with system python3, and works if I invoke autospider.py with venv's python3

[08:53:24.0305] <sfink>
Ok, bare-bones --cgc in your review queue. Seemed easier to just implement it if I don't want to think through everything yet.

[08:53:38.0071] <sfink>
oops

[08:53:41.0551] <sfink>
DOA

[08:54:01.0938] <arai>
so, `make` there gets affected from which python3 the caller script is using

[08:55:22.0083] <sfink>
ok, updated to something that at least appears to work.

[08:56:21.0579] <sfink>
one advantage of doing something fancier is that it could inherit other args like `--ignore-timeouts=cgc-jittest-timeouts.txt`

[08:56:38.0447] <sfink>
it feels a little weird duplicating those in the `mach_commands.py` script

[08:58:00.0723] <jandem>
would it make sense to replace that with a `|jit-test|` attribute?

[08:58:29.0919] <sfink>
attribute?

[09:02:30.0223] <jandem>
`|jit-test| cgc-timeout` or so, to annotate the test as "ignore cgc timeouts"

[09:02:44.0907] <sfink>
oh! those attributes

[09:02:44.0940] <jandem>
I don't know if that's actually easier, you still have to know it's a cgc build

[09:03:18.0451] <jandem>
 * I don't know if that's actually easier, you still have to know it's a cgc run

[09:05:48.0931] <arai>
looks like we need similar fix as bug 1686168, for `make`

[09:05:50.0239] <botzilla>
https://bugzil.la/1686168 — RESOLVED (mhentges) — Cannot complete `./mach bootstrap` on macOS Big Sur due to `ModuleNotFoundError: No module named 'zstandard'`

[09:06:26.0243] <arai>
`__PYVENV_LAUNCHER__` is affecting how python3 inside make works

[09:07:59.0171] <arai>
this might hit embedding/automation scenario

[09:11:22.0748] <arai>
hm, according to the comment https://hg.mozilla.org/mozilla-central/rev/0cdfd2afeefb04a61cd9610f413bda90988d9b72 , it's fixed by python

[09:11:43.0415] <arai>
I guess I can add workaround for now

[09:28:04.0107] <sfink>
you can use `mach python autospider.py` to run the python in the venv. Not as nice as `./autospider.py`, I know.

[09:29:40.0904] <arai>
ah, thanks :)

[09:30:08.0731] <jandem>
another one for the wish list: an easy way to build the JS rust bindings in `js/rust`. I got that working this week but it required some workarounds and it downloaded a lot of unrelated crates (neqo, gfx things)

[14:12:04.0857] <iain>
jorendorff: Gentle review ping on [D101232](https://phabricator.services.mozilla.com/D101232)

[14:13:19.0601] <jorendorff>
iain: that's a pretty weird patch

[14:13:43.0385] <jorendorff>
iain: hi :) sorry for not reviewing that yet

[14:15:22.0118] <iain>
We talked about it sometime in, like, November, and then I never finished working on a couple other patches in the stack

[14:15:36.0284] <iain>
 * jorendorff: We talked about it sometime in, like, November, and then I never finished working on a couple other patches in the stack

[14:17:00.0785] <iain>
https://chat.mozilla.org/#/room/#spidermonkey:mozilla.org/$dz1U98wxl6H7LRHjCXPm255inEnwojuntnK2MTwEMhQ

[14:19:47.0847] <jorendorff>
iain: at the time I wrote "heh! i think changing the expected behavior on the existing testcase seems better" and i just Requested Changes with a similar remark

[14:20:26.0547] <iain>
Oh, wait, I was sure that was what I had done

[14:20:30.0361] <iain>
Oops!

[14:20:42.0071] <iain>
I guess that's what happens when you let a patch sit for two months without looking at it

[14:20:52.0427] <jorendorff>
just needs an update then, maybe

[14:21:02.0154] <iain>
Yeah, my fault there

[14:21:34.0122] <iain>
I remember making the change, so I must have messed up a rebase somewhere

[14:45:15.0095] <iain>
jorendorff: Updated!

[14:47:23.0123] <jorendorff>
stamped!

[14:47:29.0149] <iain>
Thanks!

[14:47:29.0636] <jorendorff>
 * iain: Stamped!


2021-01-27
[16:40:56.0484] <tcampbell>
sfink: would not using helper-thread globals have a heavy impact on GC behaviour? eg are any heuristics around GlobalObjects?

[16:43:51.0073] <sfink>
sorry, I have to run, but... what's a "helper-thread global"? I'm not understanding the question.

[16:45:11.0066] <tcampbell>
oh off-thread parsing creates a new GlobalObject for the helper thread to use and allocate into. We then mergeRealms from it at end

[16:45:54.0808] <tcampbell>
Stencil-mvp removed most of these, but is also getting caught in the cross fire of other bizarre failures that look more like flakey tests, but it is hard to tell

[16:46:12.0335] <sfink>
oh! uh... I have no idea. I'd have to read  code to figure that out. I'm afraid that's a jonco question.

[16:46:35.0197] <tcampbell>
no worries, just checking if there was anything obvious I should know of

[16:47:59.0029] <tcampbell>
confession: Revived patches to allow relazifying async/generator scripts (Bug 1627111)

[16:48:01.0274] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[16:48:02.0476] <botzilla>
https://bugzil.la/1627111 — NEW (tcampbell) — Support relazifying async/generator functions

[17:01:29.0854] <jrollins>
Do the official docs for spidermonkey now live at spidermonkey.dev?  Are the MDN Web docs still useful?  Is it best just to stick to the SMDOCs in the source code?

[17:08:26.0848] <tcampbell>
MDN stuff is entirely unmaintained. the SMDOCs are the most accurate

[17:09:00.0516] <jrollins>
Thanks

[17:11:15.0474] <tcampbell>
Stuff on https://firefox-source-docs.mozilla.org is also up to date (it builds from mozilla-central)

[17:13:26.0176] <jrollins>
Good to know.  I appreciate it.

[21:21:37.0530] <Waldo>
Dumb git question, if I have a branch with two commits in it, what's standard way to amend the non-`HEAD` commit with some extra change?  With `hg` I'd `hg prev` (or even `hg up <rev>`), `hg commit --amend`, `hg next`.  With `git` I could work around this by making both revs into branches and doing some manual rebasing, but this is surely more awkward than it has to be.

[21:22:11.0534] <Waldo>
 * Dumb git question, if I have a branch with two commits in it, what's standard way to amend the non-`HEAD` commit with some extra change?  With `hg` I'd `hg prev` (or even `hg up <rev>`), `hg commit --amend`, `hg next` (or manually use `hg rebase` to move the tip commit atop the amended rev).  With `git` I could work around this by making both revs into branches and doing some manual rebasing, but this is surely more awkward than it has to be.

[21:26:23.0392] <arai>
not sure about standard way tho, I usually remember the hash of the topmost one, and hard reset to previous one, then amend, and cherry-pick the topmost one

[21:26:55.0808] <arai>
or, if the change doesn't conflict with topmost one, just create a new commit, and then reorder/fold with `rebase -i`

[21:27:24.0167] <Waldo>
Oh right, `git reset --hard`.  That's what I was forgetting.  :-)

[21:29:25.0423] <Waldo>
Had to `git` some to make some MDN edits, seems it's no longer a wiki.  ☹️  And then, as happens often enough, a fix to solve one problem ended up being broader changes, followed by the actual change I needed to make.  https://github.com/mdn/content/pull/1778

[21:30:37.0931] <Waldo>
MDN being on Github may help somewhat for interactions with spec things typically tracked on Github, but the non-wiki-ness now seems like it's going to stultify improvements.

[03:11:45.0088] <nbp>
Waldo: As you are around, maybe you would have some ideas about https://bugzilla.mozilla.org/show_bug.cgi?id=1674295 and a leak which is making use of ReadableStream.

[03:12:32.0631] <Waldo>
Um

[03:12:50.0767] <Waldo>
I am around but should not be, still.  😅

[03:12:58.0783] <Waldo>
(shut up Ms2ger)

[03:13:10.0418] <Ms2ger>
👁️

[03:14:15.0647] <Waldo>
nbp: So my mind is distracted somewhat now, where should I start looking at that bug to most quickly figure out what's up?

[03:14:29.0060] <Waldo>
Or to understand the testcase/problem that bug concerns.

[03:15:32.0004] <nbp>
Waldo: start by the last comments, the summary is that Firefox running on a computer without ffmpeg would leak with allocations under ReadableStream.

[03:15:40.0200] <Waldo>
wat

[03:15:56.0364] <nbp>
When testing on Facebook, which would strangely loop on what seems to be the same URLs.

[03:16:28.0489] <Waldo>
So the claim is `ArrayBuffer`s are being leaked?

[03:17:01.0278] <nbp>
Likely a logical leak, not an actual leak

[03:17:47.0214] <Waldo>
Okay.  Which usually is a page problem, right?  Are we trying to figure out _why_ it is a page problem?

[03:18:59.0432] <nbp>
So far no data points towards ffmpeg except from the user STR. I presume that ffmpeg is likely to be the consumer of the stream, but how would that explain that we keep reloading the same content if ffmpeg is not present :/

[03:19:32.0042] <Waldo>
I...think you're still trying to describe this problem halfway into it, and I don't necessarily understand the starting point of the problem, exactly.

[03:20:32.0839] <nbp>
This video is what our user see: https://bugzilla.mozilla.org/show_bug.cgi?id=1674295#c33

[03:25:25.0866] <Waldo>
Okay, so the page is open, and slowly memory just keeps accumulating?

[03:31:56.0390] <Waldo>
Just from that description, I'm not terribly sure how I am supposed to be able to immediately see what information would be salient, even if it's a lot of info, to start digging into what precisely would be at fault.  Can we do something like find the stack of an allocation that's leaked, do a `DumpJSStack()` or something to see what the relevant webpage code is, then look at what references to it are created that are not purely in uncaptured stack frames?

[03:36:16.0297] <nbp>
Today, we do not know what keeps the memory alive.

[03:36:49.0993] <nbp>
The question I am asking, is would you know any reasons for ReadableStream to remain alive, or to keep requesting the same data over and over?

[03:58:01.0493] <Waldo>
nbp: ReadableStream hands out its "chunks" of data (a chunk is an arbitrary value), in series, each chunk only once.  I don't believe there's some way to get the same chunk out of it twice.

[03:58:30.0734] <nbp>
/me lunch time … back in an hour.

[03:58:54.0095] <nbp>
Waldo: Thanks for looking at it, I'll read the back log once I am back.

[03:59:01.0195] <Waldo>
Sure.

[04:02:38.0604] <Waldo>
nbp: Well, I should sort of correct myself.  If you have a stream, and you call `getReader()` on it, that reader has a `.ready` property.  That property is a getter that returns a Promise, and you can `.then()` on it as many times as you want.  Ideally, you only `.then` once, and that single time will do work that would read a _new_ value of the `.ready` property (a distinct/different/separate Promise) and then `.then()` on it to keep going.

[04:04:27.0343] <Waldo>
nbp: In theory, could this page be caching the value of `reader.ready` and then trying to repeatedly `.then` it, making no actual progress?  And you'd probably get a new `ArrayBuffer`, wrapping fresh memory allocations, each time.  (I am assuming the underlying memory is as provided by `fetch` or similar -- namely, a readable stream that is C++-backed with raw memory underlying it.)  Seems like that sort of error would break the page entirely, but at least it's not entirely inconceivable.

[08:33:13.0735] <obsu>
hi Waldo , apologies for the delay in follow up.. can I add check-in-required flag for D95580 (bug 1670124) ?

[08:33:21.0672] <botzilla>
https://bugzil.la/1670124 — ASSIGNED (obsu) — \8 and \9 should be forbidden in strict mode strings and in template literals

[08:39:02.0855] <Ms2ger>
He was up *way* late, fwiw

[08:47:46.0082] <sfink>
jonco: I'd like to finish up the monthly meeting, if that's ok

[08:47:50.0475] <jonco>
sfink: sure

[08:52:23.0198] <jorendorff>
Moz Berlin was just one year ago today

[08:53:00.0335] <mgaudet>
Ooof. I miss your faces all. 

[08:53:04.0384] <Ms2ger>
How many years until the next one in Europe?

[08:53:08.0768] <mgaudet>
(low latency faces) 

[08:56:44.0138] <Ms2ger>
/me still using his 2013 summit water bottle

[09:33:47.0938] <sfink>
jonco: sorry, somehow I didn't realize this was a 90minute meeting. Wrapping up now.

[09:34:15.0182] <jonco>
np, yeah it's a long one today

[09:38:11.0363] <sfink>
https://searchfox.org/mozilla-central/source/js/src/builtin/Promise.cpp#534

[09:39:50.0981] <sfink>
https://treeherder.mozilla.org/logviewer?job_id=327859190&repo=try&lineNumber=14366

[09:55:16.0059] <evilpie>
obsu: I marked it as checkin-needed

[09:58:56.0001] <obsu>
thanks evilpie 

[10:08:56.0360] <sfink>
https://profiler.firefox.com/public/jvpnfqt92qfh5a3cd4zeecyrspm3vr98cxgctyg/marker-table/?globalTrackOrder=0-1-2-3-4-5-6-7-8&hiddenGlobalTracks=1-2-3-4&localTrackOrderByPid=400-1-0~20820-0~14524-0~19032-0~4184-0~18244-0~&markerSearch=GCSlice%2CGCMajor&thread=6&v=5

[10:09:04.0407] <sfink>
bug 1655690

[10:09:09.0078] <botzilla>
https://bugzil.la/1655690 — NEW (nobody) — Figure out the GC/CC scheduling story in web extension processes

[12:16:33.0721] <obsu>
evilpie: autolanding failed, so i have rebased and updated the patch. Should I add check-in-needed tag? (D95580) cc: Waldo 

[14:42:37.0201] <jorendorff>
nbp: sdetar: Can we meet for triage an hour early? I very carefully scheduled an appointment to avoid conflicting with the one meeting I have all day, and got it exactly wrong

[14:42:50.0214] <jorendorff>
asking about tomorrow

[14:43:02.0994] <jorendorff>
sorry for the late notice, i just realized

[14:43:35.0959] <sdetar>
jorendorff: That will work great for me, I will go change the calendar appointment

[14:43:43.0028] <jorendorff>
ok, thanks.

[14:43:57.0326] <sdetar>
Unless we here differently from nbp 

[15:10:18.0504] <Waldo>
> <@mgaudet:mozilla.org> Ooof. I miss your faces all.

https://www.youtube.com/watch?v=DBITZw5-HWY 😉


2021-01-28
[05:39:36.0482] <tcampbell>
confession: Just realized that tzdata updates mention cities in data files, while countries in release notes and that I'm just bad at geography..

[05:39:39.0773] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[05:46:13.0567] <nbp>
> <@waldo:mozilla.org> https://www.youtube.com/watch?v=DBITZw5-HWY 😉

I will keep that in mind if I ever have to do a farewell email to all.


2021-01-29
[16:04:39.0787] <jorendorff>
yulia | Timezone = PT (ish): filed the TLA cycle bug. https://bugzilla.mozilla.org/show_bug.cgi?id=1689499

[02:31:53.0802] <stratan>
Hello there! Is there a way to track bugzilla issues based on components? i.e js engine

[02:38:44.0753] <arai>
stratan: In bug page, hover on Component name, it will show popup, and there's "Watch This Component" button

[02:42:59.0413] <stratan>
thank you arai 

[03:24:52.0351] <jandem>
anyone around to stamp https://phabricator.services.mozilla.com/D103463 ?

[03:25:20.0288] <jandem>
Waldo! :-) 

[03:25:41.0755] <Waldo>
jandem: Since when did the test parser begin allowing spaces in those conditions?

[03:26:38.0621] <jandem>
Waldo: not sure, but I don't think it's a very recent thing?

[03:27:00.0043] <Waldo>
Hm, maybe reftest is different?

[03:27:12.0553] <Waldo>
et viola

[03:27:25.0545] <jandem>
cheers

[03:28:57.0126] <jandem>
there are no logs for those failing tasks (they're blue/purple), I suspect TSan requests a lot more memory than non-TSan tasks and that results in OOMs somewhere

[03:45:59.0478] <nbp>
jandem: this is an OOM issue while testing with TSan?

[03:50:26.0103] <jandem>
nbp: there are no logs so I'm not completely sure, but I think TSan's shadow memory mapping causes an OOM somewhere yeah

[03:50:44.0271] <jandem>
maybe that terminates the test task and that's why we don't get any logs

[08:24:40.0671] <jandem>
"The app I'm currently working on clocks in at 75MB of JS before minification. That's enough for the browser to take seconds to parse the whole thing." [source](https://news.ycombinator.com/item?id=25951265)

[09:04:05.0636] <mgaudet>
should get them to be guinea pigs for deferred modules https://github.com/tc39-transfer/proposal-defer-import-eval (only mostly joking) 

[09:07:16.0899] <nbp>
last time I measured we were parsing at around 25 KB/ms

[09:09:27.0926] <mgaudet>
so 3s of parse on a 75mb bundle (tho presumably lower because of minification) 

[09:10:05.0243] <arai>
should we look into parallel parsing?

[09:11:41.0859] <mgaudet>
probably should be in our backlog somewhere; almost certainly on Ted's radar (I seem to recall talk of building a super fast function-boundary parser then using that to build parallelizable chunks) 

[09:11:59.0556] <mgaudet>
I can't imagine it's super high priority yet tho

[09:21:32.0541] <arai>
yeah, I was thinking that it's not high priority until many-core processors become more common

[09:35:17.0736] <tcampbell>
With the [progressive-stencil](https://bugzilla.mozilla.org/show_bug.cgi?id=progressive-stencil) stuff, we should be able to experiment with parallel delazification. Parallel syntax would need something like fast function-boundaries

[09:35:45.0291] <tcampbell>
(also, that 75MB takes more than 0s to transfer over network, so streaming parsing would be more useful there)

[09:35:58.0899] <mgaudet>
Oh that's a good point


2021-01-30
[00:32:25.0478] <wraitii>
Hello, quick question: when using GCHashTable, is calling sweep() after/before trace() necessary?

[00:33:08.0701] <wraitii>
I am currently not doing that, and I have a "put" call that unexpectedly returned false - my understanding is that either I was passing in a non-live pointer (but given the code that seems impossible) or re-hashing occurred and failed (maybe because I didn't sweep?)

[00:57:53.0931] <jandem>
is that a debug build? 

[00:58:06.0408] <wraitii>
No, release build

[01:00:33.0499] <jandem>
is it possible it reached max capacity or OOM?

[01:01:37.0430] <wraitii>
it's not entirely implausible yeah

[01:04:00.0353] <wraitii>
though I'm trying to explore other possibilities, because that seems relatively unlikely still - we have a 400MB runtime atm and in my experience we're staying way under that

[01:11:34.0093] <wraitii>
Oh while I'm at it: we once had a really weird issue where, apparently, the "Shape" of a JS object got swapped with another JS object but the values stayed the same. Does that ring any bell?

[01:25:37.0372] <jandem>
wraitii: you mean the objects had their shapes swapped, but the shapes themselves were still valid?

[01:26:57.0358] <wraitii>
well the symptom was that one object had the keys of another object, but the values it ought to have had

[01:27:49.0269] <jandem>
hm doesn't ring any bell. Which SM version are you on now?

[01:27:54.0610] <wraitii>
and I honestly couldn't find any code that would even remotely do that on our end + we only have one confirmed case

[01:28:14.0722] <wraitii>
That was back on SM45

[01:28:29.0571] <wraitii>
I don't think we'll ever see it again tbh, was curious

[01:29:21.0439] <jandem>
yeah. Memory corruption or GC-related issues can have weird symptoms like that 

[01:30:09.0509] <wraitii>
Yeah. Anyways I updated our GCHashMap code to hopefully get more data on why 'put' returned false, to rule in/out OOM

[15:08:21.0824] <jarred>
Are there any known issues with allocating thousands of 200b up to 256kb SharedArrayBuffer objects inside a Worker? I'm getting an exception with the string "out of memory". It doesn't happen on Chrome or Safari. This happens after fetch returns a ~20 MB ArrayBuffer. I know at least my computer isn't out of memory (> 10 GB free). Context: this is loading compressed map data for a game. Same behavior whether SharedArrayBuffer or ArrayBuffer


2021-01-31
[22:14:18.0329] <jandem>
jarred : so it also happens if you don't create any SABs, just plain ArrayBuffers? How are you creating them? 

[22:16:32.0311] <jandem>
I'm asking because we have this limit that is somewhat related, but for simple ArrayBuffers unrelated to Wasm it shouldn't kick in afaik: https://searchfox.org/mozilla-central/source/js/src/vm/ArrayBufferObject.cpp#79

[22:20:31.0392] <jandem>
if you have a test case or demo we can look at that would be ideal 

