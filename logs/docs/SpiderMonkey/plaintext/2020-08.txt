2020-08-01
[17:12:38.0486] <jorendorff>
this is going to be harder than i thought

[01:39:37.0174] <Caspy7>
I wonder if moving Mac to ARM will lead to more optimizations that would then make their way to Android builds

[11:02:51.0344] <heftig>
I'm trying to PGO the standalone JS. would using octane/run.js be appropriate for this?

[14:17:44.0016] <sfink>
heftig: we haven't reallly been paying attention to the octane numbers, but it's still the first goto suite for basic performance tests. If it doesn't take too long to run, I think it's a good idea.

[14:28:07.0863] <heftig>
sfink: it's pretty fast, just about half a minute

[14:34:29.0188] <heftig>
sfink:  I did get the PGO build to work, unfortunately the performance gain (if any) is within noise

[15:01:54.0758] <heftig>
hm, ARES-6 is less noisy and is about ~5% faster

[15:19:51.0435] <heftig>
https://paste.xinu.at/m-ymQX/


2020-08-03
[02:35:51.0553] <nbp>
> <@mgaudet:mozilla.org> chat: Spent far too long trying to figure out how to write a test case with workers, such that you can get an answer back. Gonna need to use promises... which means I need to learn promises. Monday.

Lars added atomics, and a system for passing messages across workers. For promises, this is a way to implement callback where the callback is set afterward, with a then-able. While you are at it, I suggest having a look at async/await as this is a nice way to write Promise without noticing.

[02:39:21.0418] <nbp>
> <@heftig:archlinux.org> I'm trying to PGO the standalone JS. would using octane/run.js be appropriate for this?

Depends what is your use case.  If parsing is what you are interested in, I will suggest using real-js-samples repository, if this is JIT-compiling, then octane might be a good candidate.

[06:47:49.0780] <nicolo-ribaudo>
Hi all, I'm trying to learn about bytecode generation and I have a question: I noticed that array literals (`[4, 5, 6]`) are emitted like this:
```
NewArray 3                      # []
Int8 4                          # [] 4
InitElemArray 0                 # [...]
Int8 5                          # [...] 5
InitElemArray 1                 # [...]
Int8 6                          # [...] 6
InitElemArray 2                 # [...]
```

However, function calls are emitted like this:
```
GetGName "foo"                  # foo
GImplicitThis "foo"             # foo THIS
Int8 4                          # foo THIS 4
Int8 5                          # foo THIS 4 5
Int8 6                          # foo THIS 4 5 6
CallIgnoresRv 3                 # foo(...)
```

From yulia's streams I learned (or at least, I got the impression) that it's better to avoid growing the bytecode size too much and I was wondering why we need one additional op for each array element, and why it's not something similar to function calls:

```
Int8 4                          # 4
Int8 5                          # 4 5
Int8 6                          # 4 5 6
NewArray 3                         # [...]
```
Is there a performance/feasibility reason?

[06:48:02.0330] <nicolo-ribaudo>
 * Hi all, I'm trying to learn about bytecode generation and I have a question: I noticed that array literals (`[4, 5, 6]`) are emitted like this:
```
NewArray 3                      # []
Int8 4                          # [] 4
InitElemArray 0                 # [...]
Int8 5                          # [...] 5
InitElemArray 1                 # [...]
Int8 6                          # [...] 6
InitElemArray 2                 # [...]
```

However, function calls are emitted like this:
```
GetGName "foo"                  # foo
GImplicitThis "foo"             # foo THIS
Int8 4                          # foo THIS 4
Int8 5                          # foo THIS 4 5
Int8 6                          # foo THIS 4 5 6
CallIgnoresRv 3                 # foo(...)
```

From yulia's streams I learned (or at least, I got the impression) that it's better to avoid growing the bytecode size too much and I was wondering why we need one additional op for each array element, and why it's not something similar to function calls:
```
Int8 4                          # 4
Int8 5                          # 4 5
Int8 6                          # 4 5 6
NewArray 3                       # [...]
```

Is there a performance/feasibility reason?

[06:48:09.0497] <nicolo-ribaudo>
 * Hi all, I'm trying to learn about bytecode generation and I have a question: I noticed that array literals (`[4, 5, 6]`) are emitted like this:
```
NewArray 3                      # []
Int8 4                          # [] 4
InitElemArray 0                 # [...]
Int8 5                          # [...] 5
InitElemArray 1                 # [...]
Int8 6                          # [...] 6
InitElemArray 2                 # [...]
```

However, function calls are emitted like this:
```
GetGName "foo"                  # foo
GImplicitThis "foo"             # foo THIS
Int8 4                          # foo THIS 4
Int8 5                          # foo THIS 4 5
Int8 6                          # foo THIS 4 5 6
CallIgnoresRv 3                 # foo(...)
```

From yulia's streams I learned (or at least, I got the impression) that it's better to avoid growing the bytecode size too much and I was wondering why we need one additional op for each array element, and why it's not something similar to function calls:
```
Int8 4                          # 4
Int8 5                          # 4 5
Int8 6                          # 4 5 6
NewArray 3                      # [...]
```

Is there a performance/feasibility reason?

[06:50:48.0290] <jandem>
good question. Array initializers can be huge and htis avoids running out of stack space

[06:51:07.0721] <jandem>
 * good question. Array initializers can be huge and this avoids running out of stack space

[06:51:18.0162] <jandem>
 * good question. Array literals can be huge and this avoids running out of stack space

[06:52:25.0664] <jandem>
 * good question. Array literals can be huge and this avoids running out of stack space. It's also a bit easier to optimize in the JITs.

[06:52:48.0685] <jandem>
 * good question. Array literals can be huge and this prevents running out of stack space. It's also a bit easier to optimize in the JITs.

[06:52:59.0000] <nbp>
nicolo-ribaudo: I guess there is a bit of historical legacy here.  A while ago SpiderMonkey was the only JS engine to implement E4X. One of the feature of E4X was the ability to reflect on it-self during the initialization, su an Array could contain it-self as an element.  `InitElemArray` extend the length as needed, each time an element is added, and this behaviour was inspectable from JS code AFAIR.

[06:55:19.0364] <nbp>
 * nicolo-ribaudo: I guess there is a bit of historical legacy here.  A while ago SpiderMonkey was the only JS engine to implement E4X. One of the feature of E4X was the ability to reflect on it-self during the initialization, so an Array could contain it-self as an element.  `InitElemArray` extend the initialized-length as needed, each time an element is added, and this behaviour was inspectable from JS code AFAIR.

[06:56:36.0630] <nicolo-ribaudo>
Thanks for your answers!

[12:14:12.0460] <zombie>
am i missing something, there's no way to access `class`'s `constructor` method as a thing from js, right?

[14:01:11.0263] <evilpie>
I just found this blog post that quotes me on JSString from 9 years ago ... https://josephmate.github.io/java/javascript/stringbuilder/2020/07/27/javascript-does-not-need-stringbuilder.html

[14:01:23.0005] <evilpie>
I honestly don't really remember that at all


2020-08-04
[05:34:56.0282] <tcampbell>
> <@zombie:mozilla.org> am i missing something, there's no way to access `class`'s `constructor` method as a thing from js, right?

(I'm likely misunderstanding your question...) If you have `class C { constructor() {} }` then the `constructor` is just `C` (or `(new C).constructor`. That said, the "function" is only "constructable" but not "callable" so must always be the target of `new` and not just called arbitrarily.

[05:35:01.0992] <tcampbell>
yulia: ping

[05:39:39.0856] <yulia>
tcampbell: yep?

[05:40:16.0807] <tcampbell>
I saw a comment about using functions to implement top-level await and am wondering what the relation between ModuleObject / BaseScript / JSFunction / ModuleScope becomes?

[05:40:33.0203] <yulia>
sigh, good question

[05:40:36.0660] <yulia>
im looking at that right now

[05:41:17.0766] <yulia>
its technically possible for me to split the async function generator into an async module generator and the original

[05:41:38.0623] <yulia>
the only thing i am missing is the callee

[05:42:16.0558] <tcampbell>
https://searchfox.org/mozilla-central/rev/72a1334982cadde0ca8b3d3583877afea80f5639/js/src/vm/JSScript.h#1645

[05:42:58.0856] <tcampbell>
that is currently 'functionOrGlobal', but probably makes sense to point to some sort of object in the module case, just for simplicity

[05:43:51.0930] <tcampbell>
what is the callee in module case?

[05:44:00.0899] <tcampbell>
undefined or the ModuleObject?

[05:44:07.0646] <yulia>
undefined

[05:44:50.0968] <yulia>
the callee is used afaik, in resuming

[05:45:10.0516] <tcampbell>
hmm

[05:45:19.0473] <yulia>
to check if the function is async, and to get the script

[05:45:29.0552] <yulia>
and also to get the environment (in initCallFrame)

[05:45:51.0613] <yulia>
arguably, the module script has that  information (the async status, the script itself)

[05:46:02.0858] <yulia>
but this would be reeally custom

[05:46:23.0557] <yulia>
so i was wondering if it made sense to have some sort of place holder function attached to the module

[05:46:26.0864] <yulia>
that could act as the callee

[05:46:33.0213] <tcampbell>
interesting..

[05:46:48.0837] <yulia>
i might not have the whole model of what is going on figured out yet

[05:47:24.0164] <yulia>
there are some pieces of information that i am missing, for example what the frame layout of the module is compared to the function

[05:47:32.0099] <yulia>
i couldn't find it documented anywhere

[05:47:45.0408] <yulia>
but i don't know yet if it will be important

[05:47:50.0519] <tcampbell>
ha. our frame layouts are rarely documented =\

[05:48:00.0036] <yulia>
it might be easier to implement all this by just having a real function instead of something custom

[05:48:18.0500] <yulia>
the main problem is resuming, i have everything else working up to that point without a function object

[05:48:31.0753] <tcampbell>
I do wonder if the uses of an actual callee are small enough taht we should just remove them

[05:49:02.0576] <yulia>
callee acts as an interesting invariant -- all generators (up to now) must have one

[05:49:03.0048] <tcampbell>
things like https://searchfox.org/mozilla-central/rev/72a1334982cadde0ca8b3d3583877afea80f5639/js/src/vm/Interpreter.cpp#4325 are trivial, but I'm sure there are some much worse ones

[05:49:57.0419] <yulia>
so, to get back to your question

[05:49:57.0481] <tcampbell>
hmm.. right, I guess callee can be a clone (`return () => {}`)

[05:50:15.0126] <yulia>
"relation between ModuleObject / BaseScript / JSFunction / ModuleScope"

[05:50:39.0839] <yulia>
im not really sure. it feels like there is a simple solution here and i haven't found it yet

[05:50:58.0126] <yulia>
`callee can be a clone (return () => {})` -- what would that look like in practice?

[05:51:28.0279] <tcampbell>
you'd have one `BaseScript` with multiple JSFunctions

[05:51:48.0703] <yulia>
oh, interesting

[05:51:52.0363] <tcampbell>
when the JSFunction runs, the callee is the specific one, but the underlying basescript with bytecode is all the same

[05:51:53.0404] <yulia>
i didn't realize you could do that

[05:52:17.0709] <yulia>
necessarily JSFunctions or could it be two script types?

[05:52:23.0054] <tcampbell>
anytime we make a closure we usually get a new JSFunction over an existing BaseScript

[05:52:33.0490] <yulia>
this is the other problem, its weird to make a function that isn't actually a function

[05:53:23.0611] <tcampbell>
yep. I kind of wondered if we went this route whether we'd replace moduleobject with some extended kind of JSFunction

[05:53:35.0311] <yulia>
yeah, i was thinking the same

[05:54:19.0009] <yulia>
i have a patch that already makes moduleSharedContext inherit from FunctionBox

[05:54:41.0500] <yulia>
i guess that would be the logical next step and then i wouldn't have to deal with all of this custom stuff

[05:55:36.0719] <yulia>
would that be an issue in your view?

[05:57:31.0547] <tcampbell>
it is complex, but I don't see giant conceptual problems

[05:57:57.0582] <yulia>
ok, thanks for reaching out btw

[05:58:14.0748] <tcampbell>
one thing that is weird now is that we call some flags "for function" https://searchfox.org/mozilla-central/source/js/src/vm/StencilEnums.h#166-168

[05:58:57.0159] <tcampbell>
so, going the module extends functionbox route makes those comments still sensible

[05:59:05.0299] <yulia>
right

[05:59:16.0509] <yulia>
i have all of the work saved so we can revert if anything goes really wonky

[05:59:32.0249] <yulia>
so, custom mess to make module work will still exist

[05:59:41.0080] <tcampbell>
but if we went the generator-resume-supports-modules-directly route, we'd have to rebalance a bunch the frontend on when we have a function and when we jsut have a script

[06:00:11.0512] <yulia>
hm interesting, i didn't run into that yet

[06:00:21.0864] <yulia>
(but i didn't get it to resume properly)

[06:00:57.0690] <yulia>
ok how about -- i try one last time to get the mess to work

[06:01:05.0763] <yulia>
and then i extend moduleObject from JSFunction

[06:01:16.0549] <tcampbell>
do we ever anticipate non-module top-level scripts supporting await?

[06:01:20.0128] <yulia>
no

[06:01:29.0034] <yulia>
i don't think it will be possible in scripts

[06:02:02.0905] <tcampbell>
yeah, that makes sense

[06:03:25.0252] <tcampbell>
would sync modules still use a function-like pattern in your model?

[06:03:49.0624] <yulia>
for extending from function? yes i think everything would be made to be consistent

[06:03:57.0162] <tcampbell>
👍️

[06:06:07.0416] <tcampbell>
well I don't have any particular instincts yet on which approach is better long term, but am happy to chat more as you discover details

[06:06:52.0056] <yulia>
sure, i think i am pretty close to a working implementation so we should have some code we can look at soom

[06:08:31.0250] <tcampbell>
\o/

[06:38:50.0762] <zombie>
tcampbell: yeah, i got confused from `C.toSource()` returning the whole class, and `C.constructor.toSource()` returning `[native code]`, which I interpreted as it wrapping the class method named `constructor` with some native code, but is actually the Function constructor :/

[06:40:48.0726] <zombie>
i guess I'm grumpy that in js, the constructor code and the prototype chain are bound, you can't graft just the code to another class as you can with regular methods

[06:41:30.0516] <zombie>
(same holds true for both function-prototype based "classes" and new classes)

[06:47:51.0652] <nicolo-ribaudo>
@zombie It's not the same thing, but you could "steal" the constructor by wrapping it - https://gist.github.com/nicolo-ribaudo/80e6db0d73ed18db65d454b612571b65

[06:48:19.0991] <nicolo-ribaudo>
 * zombie:  It's not the same thing, but you could "steal" the constructor by wrapping it - https://gist.github.com/nicolo-ribaudo/80e6db0d73ed18db65d454b612571b65

[06:51:08.0302] <zombie>
ooh, i forgot about Reflect.  not exactly what i wanted, but need to refresh on what's possible, thanks!

[08:47:38.0053] <avandolder>
jorendorff: I made it so the private name kind is available in the bytecode emitter, so I can use when creating the private method initializers. I'm not sure how to mark the properties as read-only though. There's `InitLockedProp`, but since the private names are handled as symbols I need to use the various `Init*Elem` opcodes

[08:50:26.0068] <jorendorff>
avandolder: OK. It sounds like you'll need a new opcode.

[08:51:14.0436] <jorendorff>
tcampbell: super dumb question. Does the expression stack in a BaselineFrame grow up or down?

[08:51:56.0516] <iain>
Down towards lower memory addresses, I'm pretty sure

[08:52:08.0956] <jandem>
yep

[08:52:11.0128] <jorendorff>
Definitely the stack as a whole grows down, and unaliased locals are in the opposite order vs. InterpreterFrame

[08:52:15.0506] <jorendorff>
ok, good

[08:52:59.0004] <tcampbell>
/me doesn't actually know

[08:55:05.0577] <jorendorff>
Haha, I was confused because `AbstractGeneratorObject::{suspend,resume}` are not aware of this difference between interpreter and baseline, so I was a bit confused about how any of this could possibly work :)

[08:55:34.0914] <jorendorff>
but I found the knowledge. it's here https://searchfox.org/mozilla-central/source/js/src/jit/VMFunctions.cpp#956-958

[08:57:54.0081] <jandem>
that copy is inefficient, who wrote that code

[08:59:28.0033] <jandem>
('twas me in case it wasn't obvious)

[08:59:35.0024] <jorendorff>
it's always great news to be working on perf and discover something slow that i think i can fix :)

[09:06:14.0365] <nbp>
> <@jorendorff:mozilla.org> Definitely the stack as a whole grows down, and unaliased locals are in the opposite order vs. InterpreterFrame

define "down", everytime I draw it on a blackboard it goes up toward 0, with 0 being at the top of the blackboard, and 0xffff at the bottom.

[09:06:44.0878] <iain>
Clearly the top of the blackboard is down

[09:07:46.0705] <nbp>
The reason I draw it that way, is that it is easy to understand why you can reinterpret_cast the content of the stack.

[11:43:16.0830] <sfink>
confession: finally landed the patch that adds the ability to find a path from any GC root to the testing function `nearestPaths()`

[11:43:18.0988] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[11:44:04.0282] <sfink>
confession: discovered that our extensible string space optimization rarely kicks in during normal load (~0.3% on awsy tp6)

[11:48:46.0182] <yulia>
tcampbell: do we have more documentation on stencil beyond the SMDOC comments?

[12:10:46.0044] <tcampbell>
yulia: right now, no. The data structures are still evolving but should be stabalizing soon

[12:11:04.0219] <tcampbell>
I am happy to answer any questions about it in the mean time

[12:34:06.0556] <yulia>
ok, will gather my thoughts and ask tmr 

[12:35:53.0373] <sefeng>
can I tell if this chrome context from a JSContext or JSObject? 

[12:43:55.0127] <evilpie>
sefeng: I think `JSContext::runningWithTrustedPrincipals` might work. Not sure how secure that actually is

[12:47:20.0302] <sefeng>
evilpie: thanks. Not sure what I should react to the `Not sure how secure that actually is` comment. I am updating webidl to expose a tag to Chrome only by going with the ` [Func="funcname"] ` approach  

[12:48:46.0490] <evilpie>
And [ChromeOnly] doesn't work?

[12:53:16.0574] <evilpie>
sefeng: ^

[12:53:53.0688] <sefeng>
evilpie: oh I want it to be both regular Nightly and Chrome for all channels 

[12:54:40.0818] <sefeng>
evilpie: https://searchfox.org/mozilla-central/source/dom/base/Document.cpp#3052 this seems similar to what you suggested 

[12:54:48.0475] <sefeng>
looks like it's going to work 

[12:55:20.0616] <evilpie>
There is also `IsChromeOrUAWidget` which is similar as well

[12:55:51.0717] <sefeng>
I see, thanks 

[12:58:27.0105] <evilpie>
hope that helps emilio or some one else from the DOM team are probably the right people to ask. This doesn't really involve SpiderMonkey


2020-08-05
[06:37:59.0444] <yulia>
this might be a stupid question

[06:38:38.0566] <yulia>
but, i am trying to get the script property after initialization in a module (this one https://searchfox.org/mozilla-central/source/js/src/builtin/ModuleObject.h#289)

[06:38:47.0608] <yulia>
during initialization, its definitely set

[06:38:51.0740] <yulia>
but on resume, it is missing

[06:39:01.0910] <yulia>
i noticed we have some work on functions around tenured objects

[06:39:12.0403] <yulia>
could the script have been GC'd? what might i need to do here?

[06:40:13.0113] <tcampbell>
when you say "missing", is it a nullptr or a garbage value?

[06:40:34.0153] <yulia>
it is a nullptr

[06:40:48.0832] <yulia>
i hit this: https://searchfox.org/mozilla-central/source/js/src/builtin/ModuleObject.cpp#936

[06:41:22.0401] <tcampbell>
https://searchfox.org/mozilla-central/source/js/src/builtin/ModuleObject.cpp#1055-1059

[06:41:26.0394] <tcampbell>
this looks very relevant

[06:42:06.0629] <yulia>
ahhhhh yep

[06:42:08.0035] <tcampbell>
probably could just comment it out for while you get things working

[06:42:29.0302] <tcampbell>
(I looked for uses of ScriptSlot https://searchfox.org/mozilla-central/search?q=symbol:E_%3CT_js%3A%3AModuleObject%3A%3AModuleSlot%3E_ScriptSlot&redirect=false )

[06:42:48.0873] <yulia>
thanks, i will try that

[06:43:35.0139] <arai>
is using `JSONPrinter` for JSON-like output plausible?

[06:43:36.0389] <arai>
https://searchfox.org/mozilla-central/source/js/src/vm/JSONPrinter.h

[06:43:58.0542] <arai>
I want a readable/structured dump of a class/struct for debug purpose

[06:44:27.0348] <arai>
and `JSONPrinter` seems to provide most of requirement (indentation, array/object)

[06:44:42.0218] <tcampbell>
arai: yeah, I think that is what we often use for new dumps https://searchfox.org/mozilla-central/search?q=symbol:_ZN2js11JSONPrinter11beginObjectEv&redirect=false

[06:45:55.0624] <arai>
I want "typed" output, so, the value might look like `Some(ScopeIndex(0))`, that's not valid JSON

[06:46:04.0383] <tcampbell>
oh I see

[06:46:34.0558] <tcampbell>
could you quote it?

[06:46:48.0895] <arai>
yeah, that would work

[06:47:11.0095] <tcampbell>
would be nice to keep JSON, so we can do bits of tooling later

[06:47:30.0883] <arai>
I see.  I'll do that :)

[07:39:32.0401] <chaircrusher>
So... deep breath ... I thought I could track dirty strings (i.e. strings not sanitized, e.g. from POSTs)   by using an 'unused' bit in the StringType.d.flags.
I added this:    static const uint32_t DIRTY_BIT              = JS_BIT(8);


[07:42:29.0074] <chaircrusher>
but I'm getting false positive from very simple scripts. This is with our SpiderMonkey embed, so it's a server-side script.
var tst = "This is another test";
print_doc(isStringDirty(tst).toString() + '\n');
var r = "This is a test " + tst;
print_doc(isStringDirty(r).toString() + '\n');

(print_doc being a function we add to send text to stdout in our CGI

[07:43:22.0841] <chaircrusher>
I suspect it's because of shenanigans in StringType where this->d is struct Data, but there's all sorts of unions and bitshifts for inline strings etc.

[07:43:36.0927] <sfink>
`JS_BIT(8)` is not free

[07:43:49.0627] <sfink>
it's used for external strings and permanent atoms

[07:43:54.0887] <chaircrusher>
I discovered that empirically

[07:44:00.0253] <chaircrusher>
;-)

[07:44:21.0366] <sfink>
`JS_BIT(12)` looks to be the first available right now

[07:44:30.0977] <chaircrusher>
OK

[07:44:32.0795] <sfink>
(though in a slightly older version, it would be `JS_BIT(11)`

[07:44:50.0553] <sfink>
 * (though in a slightly older version, it would be `JS_BIT(11)`)

[07:44:55.0715] <chaircrusher>
I'm sticking with JS60 for now

[07:45:05.0168] <chaircrusher>
I'd like to future-proof tho

[07:45:38.0311] <sfink>
Heh. I'm not sure there's any way to truly future-proof when you're messing with flags. We're greedy with them.

[07:45:58.0014] <sfink>
you'd need a side lookup table or something

[07:46:11.0720] <chaircrusher>
true that. moreover I'm in no position to 'claim a flag' for this feature

[07:46:29.0239] <chaircrusher>
though if it works, it's something my boss talked about contributing back.

[07:47:33.0611] <sfink>
we could maybe add a `FLAGS_MASK` or `HIGHEST_FLAG` or something to at least fail a `static_assert` for now

[07:47:45.0793] <chaircrusher>
Is there a definitive way to see what flags are available?

[07:48:20.0096] <chaircrusher>
At some point I'll upgrade to JS version > 60, but as they say I'll burn that bridge when I get to it.

[07:48:33.0784] <sfink>
actually, `INDEX_VALUE_SHIFT` probably already gives the highest usable flag

[07:48:50.0262] <sfink>
 * actually, `INDEX_VALUE_SHIFT` probably already gives the highest usable flag bit

[07:49:09.0009] <sfink>
but to know which ones are used... we could add something for that

[07:49:41.0668] <chaircrusher>
INDEX_VALUE_SHIFT is used if INDEX_VALUE_BIT is set and the high word is an index, right?

[07:50:48.0527] <chaircrusher>
high word = upper 16 bits, rathter

[07:51:28.0661] <chaircrusher>
LOL not sure FAT_INLINE_MASK is politically correct.

[07:51:43.0687] <sfink>
(just going by the comments) well, I would say that if `INDEX_VALUE_BIT` is set, then the high halfword is an index and you can recover it by shifting with `INDEX_VALUE_SHIFT`. But yeah.

[07:52:13.0124] <chaircrusher>
There's a movement now to stop using "MASTER" and "SLAVE" in technical language.

[07:52:20.0880] <chaircrusher>
FAT and THIN are next

[07:53:34.0187] <sfink>
huh, I hadn't even considered the "fat" one

[07:54:13.0344] <sfink>
I would complain about losing the nice short 3 letter word, but really, "WIDE" would be fine

[07:55:25.0357] <sfink>
(or "long", "big", ...)

[08:00:26.0939] <chaircrusher>
It's not a thing... yet.

[08:01:51.0299] <chaircrusher>
As a fat person I don't object to people using fat in a non-pejorative way.  The meaning is clear here.  And who wants to spend a day changing it everywhere it's in the Mozilla source? *shudder*

[08:02:10.0990] <yulia>
could be a good beginner issue

[08:03:08.0896] <yulia>
speaking for myself, when i was just starting out in open source i would look for things like this, or documentation corrections -- something that didn't change behavior but gave a chance to poke around

[08:04:46.0208] <sfink>
yeah, it's really nice to be able to start with working build, make a change, get a new build, go through the submission process, etc., without getting bogged down in deep technical issues when you're still at the steep part of the tool learning curve

[08:05:14.0457] <yulia>
yep, exactly

[08:06:28.0078] <yulia>
another reason to change the name is i wasn't too sure what it meant at a glance, `big` might be more descriptive. 

[08:16:58.0073] <chaircrusher>
well @sfink Changing the bit I use didn't fix the issue I was seeing.  Could that bit (12) be getting set somewhere else?

[08:17:36.0454] <chaircrusher>
It's not even clear to me where the flags get initialized in StringType.

[08:18:09.0179] <sfink>
in the various *subtype*`::init()` functions

[08:18:33.0852] <sfink>
https://searchfox.org/mozilla-central/source/js/src/vm/StringType-inl.h#185 for example

[08:18:50.0817] <sfink>
personally, I'd probably run it under rr and set a hw watchpoint on the flags word

[08:19:01.0869] <sfink>
rr makes me lazy

[08:44:25.0032] <Waldo>
sfink: I randomly ran across https://searchfox.org/mozilla-central/rev/a315a1a0f09550e23e4590a77e74f36543315da3/js/public/HeapAPI.h#432 the other day -- any chance I could trouble you to move that to `namespace JS`, consistent with bug 1618038?

[08:44:29.0005] <botzilla>
https://bugzil.la/1618038 — RESOLVED (Waldo) — Define inequality operators on wrapper classes in their namespaces, not in the global namespace

[08:46:22.0526] <sfink>
ok, will do

[08:47:05.0067] <jonco>
sfink: ping

[08:49:32.0626] <tcampbell>
@jonco Bug 1480772

[08:49:36.0191] <botzilla>
https://bugzil.la/1480772 — NEW (nobody) — Investigate allowing compacting gc on ObjectGroup

[08:50:35.0870] <jonco>
tcampbell: bug 1657122

[08:50:38.0794] <botzilla>
https://bugzil.la/1657122 — NEW (jonco) — Compact ObjectGroups

[09:10:26.0046] <sfink>
https://bugzilla.mozilla.org/show_bug.cgi?id=1656047

[09:49:56.0602] <froydnj>
`MEMORY_JS_GC_HEAP`, how does it work

[10:49:34.0827] <sfink>
if I followed that correctly, I believe the answer was that you let GPT-3 generate the code based on the description, which includes "... (KB)"

[13:38:42.0854] <mgaudet>
confession: Implemented Ion IC support for `CheckPrivateField`, and added Warp support based on that. Starting to poke at ergonomic brand checks for private fields: Have determined there's at least a touch more complexity to get this right in the parser than I'd thought.

[13:38:45.0199] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2020-08-06
[17:16:46.0499] <Waldo>
confession: Working through what in the world pluggable JSAPI hooks whose operation may potentially cross realms ought look and function like.  What could go wrong?

[20:29:36.0869] <sfink>
/me wonders if this is related to what jonco was talking about in this morning's meeting, where he said some custom hook turned out too be too much trouble so he's ripping it out

[20:53:38.0742] <Waldo>
Piping needs to understand the DOM's `AbortSignal` interface.  There also needs to be a way to add actions to `AbortSignal`s.  So I need `JS::SetAbortSignalClass` a la `js::SetWindowProxyClass` (easy).  And I need `JS::AddActionToAbortSignal` (messier).

[20:53:46.0678] <Waldo>
So, probably not.

[20:56:17.0205] <Waldo>
/me mutters

[20:56:27.0624] <Waldo>
If I'm going to eat, I have to make food, don't I...

[01:28:06.0432] <yulia>
Do we have documentation about how JSObject fields/slots work? This is related to the experience I had yesterday extending JSFunction

[01:58:58.0440] <jonco>
sfink: that was a shell-only test hook (see https://phabricator.services.mozilla.com/D85560 )

[02:00:14.0975] <jonco>
*wonders how to enforce that JSAPI hooks do the right thing when crossing realms*

[05:27:44.0411] <mgaudet>
yulia: this may be relevant to your question earlier; https://searchfox.org/mozilla-central/source/js/src/vm/NativeObject.h#452-485

[05:31:13.0567] <yulia>
brillaint, thank you

[08:07:56.0761] <nbp>
This is amazing! https://bugzilla.mozilla.org/show_bug.cgi?id=1656565

[08:48:57.0314] <nbp>
Another one … bugzil.la/1655947#c7

[09:55:06.0403] <nbp>
jorendorff: ^ Now that I think about it, this is actually one instance of a 2000 year bug!

[10:03:08.0719] <mgaudet>
confession: Landed warp and Ion support for CheckPrivateField. Tried to figure out how to implement ergonomic brand checks without accidentally allowing private names to become arbitrarily legal identifiers, ideally in a way that doesn't require me to gate -everywhere but InExprs- on private names. Didn't come to a conclusion. 

[10:04:17.0356] <sfink>
nice!

[10:04:54.0941] <sfink>
just prefix them with "i-solemnly-swear-i-am-up-to-no-good#" and call it a day.

[10:32:50.0170] <avandolder>
jorendorff: I have the patch so far up: https://phabricator.services.mozilla.com/D86239. It's in a kinda rough state atm, but at least you can see all the changes done

[11:35:46.0436] <jorendorff>
thanks!

[12:05:02.0017] <Aryx>
hi, there are win 32-bit sm(p) failures on central (because they only run there). https://treeherder.mozilla.org/#/jobs?repo=mozilla-central&group_state=expanded&selectedTaskRun=PBGzE_fQTkiBk2aAv6Rcrg.0&fromchange=af63ceb254223ee0868fb3ee05f17c50fd7938d4&searchStr=spidermonkey%2Cbuilds%2Cspidermonkey-
If anybody could check if they are from https://bugzilla.mozilla.org/show_bug.cgi?id=1639153 that'd speed up resolving the issue (having the tasks ran on autoland takes 2h)

[12:11:59.0947] <RyanVM>
jorendorff: review ping for bug 1655729

[12:12:01.0504] <botzilla>
https://bugzil.la/1655729 — ASSIGNED (mgaudet) — Perma js/xpconnect/src/XPCJSContext.cpp:1016:30: error: use of undeclared identifier 'privateFieldsEnabled' when Gecko 81 merges to Beta on 2020-08-24

[12:13:39.0266] <jorendorff>
RyanVM: sorry for not seeing it, I requested a little changee

[12:13:40.0733] <jorendorff>
 * RyanVM: sorry for not seeing it, I requested a little change

[12:13:51.0543] <RyanVM>
thx

[15:50:22.0284] <ptomato>
Waldo: did you want to review https://phabricator.services.mozilla.com/D85808 since you suggested it, or is one review enough?

[16:24:19.0044] <Waldo>
ptomato: Shouldn't generally be necessary, but I did a look over it anyway.

[16:25:28.0307] <ptomato>
thanks! Evan and I are trying to get these last bits in so we have a usable esr78 for GNOME

[16:36:21.0157] <Waldo>
You're going to bitrot some patching I have to split up `jsfriendapi.h` a bit, but oh well.  🙂


2020-08-07
[01:55:27.0198] <jonco>
confession: working on reducing the number of chunks we allocate by moving arenas out of sparsely used chunks, but it's not having the desired effect on AWSY

[01:55:32.0568] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[02:50:22.0724] <nbp>
jandem: lth: Is Bug 1657830 true for WASM?

[02:50:24.0211] <botzilla>
https://bugzil.la/1657830 — NEW (nobody) — Clean up x64 jump code

[02:51:17.0896] <jandem>
yes. If wasm ever needs more than 4 gb of memory per process, I think we'd handle that separately from all other JIT code

[02:51:29.0566] <lth>
yes, we are limited to a much smaller buffer

[02:51:44.0683] <nbp>
ok, just checking ;)

[03:51:07.0565] <nicolo-ribaudo>
> <@mgaudet:mozilla.org> confession: Landed warp and Ion support for CheckPrivateField. Tried to figure out how to implement ergonomic brand checks without accidentally allowing private names to become arbitrarily legal identifiers, ideally in a way that doesn't require me to gate -everywhere but InExprs- on private names. Didn't come to a conclusion.

If you haven't found a solution for limiting private names yet, in Babel we have solved it by creating the AST node corresponding to the private name, and then throwing if the new token is `in`. By doing so, you don't need to check everywhere to disallow `#foo` in arbitrary expressions.

[05:36:14.0596] <yulia>
jandem: i have a weird failure in the jit tests, but other than that it looks like it works

[05:36:28.0643] <yulia>
i guess good enough for now

[05:36:43.0932] <yulia>
mainly somehow I mixed up the variables at some point

[05:37:02.0915] <yulia>
so instead of "can't access foo of undefined", we get "cant access undefined of undefined"

[05:37:16.0580] <yulia>
i had that at some point before but its in a different spot now

[05:37:21.0575] <jandem>
nice it works

[05:37:35.0938] <yulia>
it also works on warp, but there are some odd failures there as well

[05:37:40.0031] <yulia>
im rerunning the tests now

[05:37:46.0996] <yulia>
but ill have to look into those later

[05:37:55.0988] <yulia>
i think i got the general idea

[05:38:09.0336] <jandem>
assertion failures?

[05:39:19.0068] <yulia>
https://treeherder.mozilla.org/#/jobs?repo=try&revision=2b8944a1b9de2292910c7ca3ac00dcaf82c6b0e7&selectedTaskRun=bsH37XAJTc-dOM_7mKaEVA.0

[05:39:36.0424] <yulia>
from an earlier test run, where i had some of the wrong tests turned on

[05:39:52.0963] <yulia>
lots of errors for typed objects for some reason

[05:41:55.0987] <jandem>
hm curious

[05:42:42.0108] <yulia>
I also ran some benchmarks against central

[05:43:08.0746] <yulia>

Best of 5 result->
prepareSetElem: 16264.00390625
central: 17107.625

[05:43:16.0014] <yulia>
so a tiny bit faster

[05:45:22.0070] <jandem>
ah that's quite a bit faster

[05:58:25.0086] <mgaudet|pto-till-monday>
> <@nicolo-ribaudo:matrix.org> If you haven't found a solution for limiting private names yet, in Babel we have solved it by creating the AST node corresponding to the private name, and then throwing if the new token is `in`. By doing so, you don't need to check everywhere to disallow `#foo` in arbitrary expressions.

Thanks! I will try something like that Monday. 

[06:01:49.0889] <yulia>
well, assuming it isn't completely borked 

[06:14:22.0738] <jorendorff>
`[62|19| 0| 0] 100%` my new patch executes 100% of tests!


[06:14:36.0571] <jorendorff>
...i mean, it fails a bunch of them

[07:21:10.0624] <yulia>
anyone want to review my ugly drawings?

[07:21:52.0646] <yulia>
ugly drawings for everyone: http://hag.codes/images/review-property-access.pdf

[07:22:04.0871] <yulia>
now to get this set up

[07:25:05.0102] <jandem>
yulia: looks great. On page 7, the baseline interpreter also uses the inline caches like the baseline JIT

[07:26:57.0423] <yulia>
gah

[07:27:00.0449] <yulia>
good

[07:27:09.0885] <yulia>
uppppdattting

[07:27:23.0044] <jandem>
oh I see what you meant in a later slide. The Baseline JIT/Compiler doesn't rely on ICs but it uses them to optimize things, just like Baseline Interp

[07:27:33.0605] <yulia>
yes exactly

[07:27:54.0577] <yulia>
we make them there but they are used to generate native code later, iiuc

[07:28:13.0010] <yulia>
thanks for the comment on the patch btw, you were right that was a mistake

[07:29:11.0449] <jandem>
every IC stub has native code, corresponding to the CacheIR that was emitted

[07:30:12.0570] <jandem>
Ion/Warp can look at the Baseline IC's CacheIR and generate MIR from them so it doesn't always need ICs

[07:33:29.0095] <yulia>
hmm, should i change what i have there somehow?

[07:37:21.0181] <sfink>
yulia: maybe I'm misunderstanding the intent, but the "yes/no" both seem misplaced on page 12. Isn't that the answer to "is String?"

[07:38:08.0043] <sfink>
I do really love the emotions throughout

[07:38:41.0017] <yulia>
oh shoot

[07:38:44.0068] <yulia>
its missing f[2]

[07:39:16.0789] <yulia>
i may have oversimplified this

[07:40:30.0710] <yulia>
hm just realized the code is wrong

[07:40:32.0991] <sfink>
between page 10 and page 11, you changed `f("string")` -> `f["string"]`. Is that intentional?

[07:40:58.0011] <yulia>
ah, no thats another mistake

[07:41:02.0194] <yulia>
ill have to fix it on the go

[07:41:13.0888] <sfink>
oh, wait, it's only page 10 that's a call

[07:41:31.0483] <yulia>
yeah its a mistake

[07:41:39.0031] <yulia>
ill fix it in the stream and then republish it

[07:41:46.0340] <yulia>
i wanted to make this nicer but one day isn't enough

[07:41:59.0666] <yulia>
i have to start prepping on wednesdays it looks like

[07:42:13.0013] <sfink>
yeah, I'm really not sure how you're managing to prepare as much as you do in so short a time

[07:42:23.0623] <iain>
"Fall BACK! Ye vermin!" is amazing

[08:09:17.0872] <tcampbell>
why does JS allow non-default arguments after default arguments? `function f(a = 2, b)` seems odd

[08:10:10.0327] <evilpie>
tcampbell: so you can pass undefined to use the default?

[08:11:04.0384] <tcampbell>
oh right.. undefined still triggers defaults..

[08:11:05.0111] <tcampbell>
fun

[08:14:28.0747] <decoder>
Did I ever mention JS is a terrible language? ;D

[08:21:39.0311] <jandem>
decoder: to be fair, your fuzzers generate the worst possible JS :p 

[08:23:03.0065] <decoder>
it's my constant expression of contempt for the language xD 

[09:27:57.0261] <froydnj>
> <@jandem:mozilla.org> decoder: to be fair, your fuzzers generate the worst possible JS :p

nobody wants to write `fuzzer --nice` :p

[09:31:08.0653] <nbp>
froydnj: when you have issue which is about counting the number of character, such that the source file has `source_length % 32 > 16` causes a crash … it's hard to make a choice what is the nicest source input.

[09:32:10.0197] <jandem>
it would be a `--nice` option

[10:09:28.0867] <tcampbell>
js smoothers

[10:15:47.0317] <yulia>
well, it wasn't the smoothest ride today, but actually a bit more fun

[10:15:51.0350] <yulia>
because there was _discovery_

[10:17:56.0620] <nbp>
Welcome to the JIT side of the implementation!

[10:18:14.0217] <yulia>
"what am i doing"

[10:18:16.0457] <evilpie>
Still soo much boilerplate

[10:18:17.0998] <yulia>
"where am i"

[10:18:19.0918] <yulia>
"who am i"

[10:21:01.0379] <evilpie>
the long compile times while streaming are really a drag

[10:21:12.0265] <evilpie>
makes it harder to iterate

[10:21:59.0169] <yulia>
yeah

[10:22:14.0551] <yulia>
i should really have a machine that i ssh into to do the work

[10:22:26.0437] <yulia>
because its really killing my computer to do both

[10:24:29.0965] <evilpie>
nice

[10:27:13.0584] <daemon1024>
Hello all, I came from yulia's stream.

[10:28:05.0029] <daemon1024>
I recently started to dive into compilers and would love to start contributing to spidermonkey :)

[10:28:11.0433] <iain>
jandem: Do you remember why the VM function list has to be alphabetized?

[10:28:54.0790] <jandem>
iain : no real reason, I think it was just a "keeps things organized and easy to look something up" 

[10:29:01.0097] <yulia>
daemon1024: you might want to take a look at https://codetribute.mozilla.org/projects/jseng

[10:29:14.0110] <yulia>
we have a list of good first bugs there

[10:29:42.0582] <yulia>
Or, if you want to follow the stream directly, you can re-implement the bug that I am doing on the playground

[10:29:53.0971] <yulia>
whatever learning style works best for you

[10:30:47.0831] <daemon1024>
Thanks for that yulia . Will look into it.

[11:04:54.0646] <tcampbell>
jorendorff: ping?

[11:05:02.0719] <jorendorff>
hey!

[12:44:30.0559] <avandolder>
it's still a wip, but as of right now all (but 14 that are skipped) private instance methods tests are passing!


2020-08-08
[20:48:55.0408] <huyage>
Hi folks! New here. Is it possible to run a WASM program compiled with say emscripten (a js file and a wasm file) on spidermonkey? The program uses WASI to read and write files.

[04:38:50.0008] <yulia>
my experience is that usually i compile for two targets, wasi and wasm. It depends on how much of the system interface api you use in wasi, to determine how much if it can be shared directly

[04:39:34.0964] <yulia>
if you are using emscripten you can just target webassembly and js and it should run on spidermonkey no probelm

[10:49:12.0568] <ptomato>
does it seem likely that something like https://bugzilla.mozilla.org/show_bug.cgi?id=1606568 could get backported to esr78?

[12:10:06.0300] <Caspy7>
ptomato: I'm *not* a dev, but my understanding is that ESR only gets security and stability fixes

[12:11:20.0123] <huyage>
> <@yulia:mozilla.org> if you are using emscripten you can just target webassembly and js and it should run on spidermonkey no probelm

So I can just compile the js shell and point it to the compiled js file?

[12:26:46.0263] <yulia>
huyage: what do you mean by the js shell?

[12:27:37.0624] <yulia>
emscripten will output a demo html page if you give it an output with a `.html` -- this should have your wasm set up to run

[12:27:43.0986] <yulia>
but i might be misunderstanding your original question

[12:29:54.0142] <yulia>
 * huyage: hmm... what do you mean by the js shell?

[12:30:07.0393] <yulia>
 * emscripten will output a demo html page, with the js and wasm if you give it an output with a `.html` -- this should have your wasm set up to run

[12:55:16.0073] <heftig>
Caspy7: esr68 did get a backport for "unaligned private values"

[12:59:58.0419] <huyage>
> <@yulia:mozilla.org> huyage: hmm... what do you mean by the js shell?

I mean the js shell mentioned [here](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Introduction_to_the_JavaScript_shell). I want to compile a C program to `.js` + `.wasm` (which I've already done) and somehow run it with spidermonkey.

[13:00:26.0600] <huyage>
Thanks a lot for answering my question btw :)

[13:00:55.0656] <yulia>
ok, if you can compile to wasm, then probably the only thing missing is the .html extension which should give you an example file

[13:01:12.0607] <yulia>
you might need a server to run it, i think when i tried this some time ago, there was a CORS error

[13:01:22.0001] <yulia>
so if you run into that just get http-server

[13:05:37.0051] <huyage>
Why do I need a `.html` file? Correct me if I'm wrong but I thought spidermonkey is capable of running js and wasm directly. My goal is to compile some benchmark programs to wasm and use them to benchmark spidermonkey as a wasm runtime

[13:06:00.0116] <yulia>
ah yep, you should be able to run it directly in spidermonkey

[13:06:27.0489] <yulia>
let me take a look at what i did, just a sec

[13:07:35.0631] <yulia>
ok, so, i think you should be able to output emscripten to js

[13:07:51.0883] <yulia>
so instead of the .html extension you can do .js

[13:08:05.0377] <yulia>
and then run the shell against it, `js your-file.js`

[13:08:41.0016] <yulia>
lemme try myself

[13:08:52.0259] <huyage>
OK yeah that's what I thought. 

[13:10:05.0140] <yulia>
the main thing that might be a problem is the fetch that it outputs, but you can also compile to bytecode and then run the bytecode by putting it into an array buffer directly

[13:10:09.0417] <yulia>
the file might be huge though

[13:11:49.0349] <huyage>
Also the benchmark needs to read and write files. I don't think spidermonkey can mount a host directory and provide it to the wasm program right?

[13:12:50.0432] <huyage>
Something like [WAVM](https://github.com/WAVM/WAVM)'s `--mount-root` option.

[13:14:52.0997] <yulia>
it works

[13:15:08.0677] <yulia>
hm, reading and writing files will be really tricky

[13:15:36.0862] <yulia>
so, starting point -- yes the flow i described works and you can run wasm that way

[13:16:04.0225] <yulia>
now that i know that you want to run wasm, there is likely a way to run wasm without JS, but I am not sure how that works and i suspect its more complicated

[13:16:23.0752] <yulia>
wrt using spidermonkey to read and write files -- this feels like something that would work better with wasi

[13:16:31.0332] <yulia>
where is wasi falling short for you?

[13:17:23.0880] <huyage>
What do mean by "work better with wasi"? Do you mean compiling the program with wasi sdk?

[13:18:03.0142] <yulia>
yeah, since you want to work with the system, i am not sure it makes sense to use spidermonkey for this since wasi should give you native support for this

[13:19:20.0452] <yulia>
so, for example, wasi has all of this built in. For a file, you pass a file descriptor with the appropriate permissions.

[13:19:36.0169] <yulia>
in order to do that on the web for example, you have to have a deliberate user action to start that

[13:21:11.0044] <yulia>
afaik spidermonkey doesnt have fs capability (but i never tried so i don't _really_ know). it seems like this might be the wrong way to go

[13:21:17.0615] <yulia>
 * afaik spidermonkey doesnt have fs capability exposed (but i never tried so i don't _really_ know). it seems like this might be the wrong way to go

[13:21:30.0065] <huyage>
OK so I should use something like wasmtime or wasmer or some other wasm runtime

[13:21:55.0304] <yulia>
yep, wasmtime should work pretty well

[13:22:04.0809] <yulia>
then you can also slot in the appropriate modules as you need them

[13:22:12.0990] <yulia>
that way you don't have a lot of other stuff on top that you might not use

[13:23:27.0301] <yulia>
but its still maturing so functionality is likely missing

[13:24:16.0854] <huyage>
To give you some context, I'm starting a research that aims to benchmark different wasm runtimes. Would spidermonkey not fall into the category of a "wasm runtime"?

[13:25:04.0654] <yulia>
it would. but i don't really know what you want to do here

[13:25:13.0747] <yulia>
like, why do you need to load files for that?

[13:25:27.0558] <yulia>
why not have the benchmarks as part of the package that is run?

[13:25:32.0602] <yulia>
then you wouldn't run into the FS issue

[13:26:10.0091] <yulia>
also you can get around writing files but piping the output from spidermonkey into a file (so, using logs)

[13:26:19.0635] <yulia>
with those two things out of the way, this would work on spidermonkey

[13:28:48.0186] <huyage>
So we want to incorporate some existing and well-established benchmark suites like [PARSEC](https://parsec.cs.princeton.edu/). The PARSEC suite reads input files and write result to a output file. Ideally we want minimal to no code change. But it seems like it would be a lot easier with the way you're suggesting

[13:29:03.0503] <yulia>
hm, i see

[13:29:38.0837] <huyage>
Basically bringing existing benchmark suites meant for native OS to wasm

[13:30:48.0551] <huyage>
But thanks a lot for the clarification. I learned a lot! This is a super helpful community! I'll focus on wasmtime and revisit spidermonkey later

[13:31:18.0382] <yulia>
so, maybe this also helps

[13:31:23.0929] <yulia>
the backend for wasmtime is cranelift

[13:31:39.0434] <yulia>
which is i believe, the intended backend for wasm in spidermonkey (but i am not 100% sure on this)

[13:32:04.0473] <yulia>
there are folks on this team who would know more

[13:32:19.0819] <yulia>
buuut.... its possible that the wasm implementation on wasmtime will be the same as the one on spidermonkey

[13:32:37.0875] <yulia>
so, this might end up being simpler, if this is true then you might be able to just profile wasmtime

[13:32:56.0306] <huyage>
Got it.

[13:33:28.0713] <yulia>
im not sure its true _yet_, i think we might still be using mir. but i dont know our wasm implementation... at all to be honest

[13:34:07.0880] <yulia>
otherwise, its likely possible to hack an fs implementation onto spidermonkey, but that will be extra work and you won't be working with the engine as is. again, don't know 100% but i think this is the case

[13:34:38.0197] <yulia>
since it is weekend, i don't want to ping anyone -- try back on monday and you might have some people who know more than me

[13:35:04.0782] <huyage>
Of course. Much appreciated.

[13:35:57.0409] <yulia>
yep, sorry i couldn't help more!

[15:00:02.0119] <cfallin>
huyage: wanted to add a little more detail to the above -- wasmtime uses Cranelift as yulia said, and SpiderMonkey will use Cranelift for wasm on AArch64 (ARM64) soon -- it's gated behind a pref flag now -- but uses IonMonkey for Wasm on x86-32/x86-64 (the same optimizing compiler backend that the JS engine proper uses)

[15:00:27.0721] <cfallin>
Properly speaking I would consider each of those separate benchmarking configs (but I'd be really curious to see how Cranelift stacks up against others you're comparing!)

[15:02:02.0959] <cfallin>
one thing you might want to look into if you want to run on IonMonkey is to use some sort of WASI stub. Perhaps you could embed the needed input files (if they're not too large) in the JS as a payload?


2020-08-10
[06:50:39.0601] <RyanVM>
ptomato: I'm open to backporting fixes that make building the JS shell easier, yes. We did that for esr68 as I'm sure you remember 🙂

[06:51:37.0103] <RyanVM>
ptomato: but putting approval requests on the patch is a better way to get it on people's radar vs. leaving a comment in the bug

[06:51:45.0007] <RyanVM>
 * ptomato: but putting approval requests on the patches is a better way to get it on people's radar vs. leaving a comment in the bug

[06:53:24.0266] <RyanVM>
 * ptomato: I'm open to backporting fixes that make using the JS shell easier, yes. We did that for esr68 as I'm sure you remember 🙂

[08:14:09.0842] <mgaudet>
jorendorff: Fixed that beta patch how you wanted it. (In addition, there's two more reviews for you waiting in your queue; reminder just because if you missed the beta one you probably missed those two as well) 

[08:14:25.0111] <jorendorff>
yup

[08:14:31.0232] <jorendorff>
no i saw them this morning

[08:17:20.0165] <mgaudet>
Awesome :) Thanks. 

[08:19:35.0799] <ptomato>
RyanVM: thanks. I didn't want to waste anyone's time if it was a lost cause :-)

[09:29:28.0107] <mgaudet>
nicolo-ribaudo: Thanks for the pointer on peeking for `in`: https://phabricator.services.mozilla.com/D86572 follows that approach and seems to work out nicely. 

[09:29:39.0498] <mgaudet>
confession: Uploaded first pass of ergonomic brand checks code. 

[09:29:41.0799] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[09:59:32.0519] <avandolder>
mgaudet: I actually have a fix for bug 1647789 in https://phabricator.services.mozilla.com/D86239, I can split that off it that works

[09:59:34.0652] <botzilla>
https://bugzil.la/1647789 — NEW (avandolder) — Teach expression decompiler about private name opcodes

[10:00:04.0941] <mgaudet>
avandolder: Oh perfect: Let

[10:00:10.0276] <mgaudet>
 * avandolder: Oh perfect: Let's do that then!

[10:14:58.0502] <sfink>
huyage: yulia: I don't know anything about wasm or wasi or wasmtime etc. But the JS shell *does* have (weird and limited) FS capabilities. The place to look is by running `js -e 'help(os.file)'`

[10:16:09.0678] <sfink>
for reading, use `os.file.readFile`. It'll return a string by default, but there's an option to get back a typed array

[10:17:30.0466] <sfink>
for writing, there's `writeTypedArrayToFile`, or use `redirect(OUTFILE); print(...)`

[10:18:08.0519] <sfink>
`redirect` makes all stdout-type output go to that file. You can recover the original output stream: `old = redirect(FILE); ...; redirect(old)`

[10:18:40.0659] <sfink>
it's the hacky minimum necessary for what I've needed at various points, and what bhackett needed.

[10:21:55.0709] <mgaudet>
confession: Declared email bankruptcy on bugmail subscriptions. Got too far behind -- if you didn't ni? me for anything in the last 3 weeks but hoped maybe I'd see it... I won't. 

[10:56:07.0597] <yulia>
sfink: oooo good to know!

[10:56:52.0755] <yulia>
that should make it possible to run what huyage needed then

[13:47:07.0361] <jorendorff>
iain: It's OK to call `lookupScope()` once per Yield instruction, right? it looks O(log n) in the number of scopes to me, so technically makes compiling a ridiculous generator O(n log y)

[13:52:43.0081] <iain>
jorendorff: Once per yield operation executed? Or once per parse / compile / something?

[13:52:57.0203] <jorendorff>
sorry, per baseline compile.

[13:53:30.0938] <jorendorff>
once per baseline compile, per Yield/Await instruction in the generator/async function

[13:53:48.0442] <jorendorff>
O(y log n)

[13:53:50.0581] <iain>
Even without looking at code, that's almost certainly fine

[13:54:06.0292] <jorendorff>
ok

[13:56:20.0676] <iain>
It looks like we call `lookupScope()` via `calculateLiveFixed()` once per frame when tracing

[13:57:12.0834] <iain>
And `innermostScope()` also contains a call to `lookupScope()` and is called in a bunch of places

[13:59:31.0576] <iain>
Yeah, I would write that code and never look back

[14:33:57.0247] <mgaudet>
confession: Writing blog post about implementing private fields 

[14:34:02.0362] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:43:45.0593] <evilpie>
mgaudet: nice


2020-08-11
[01:06:39.0095] <Yoric>
Well, what a very nice way to start the day...

[08:46:57.0671] <sstangl>
Hey everyone, I'm so sorry about the news today. I hope you're all well.

[08:47:37.0114] <sstangl>
1) If this affected you, there is a support network on Slack called "MozVets" that I can invite you to. It's a helpful group. Please let me know if you'd like to join.

[08:48:53.0800] <sstangl>
2. If this affected you or anyone you know, please reach out to me. The company I joined is specifically asking for Mozilla engineers. They're a good group of people, working in Rust on distributed systems, about half open-source.

[08:55:23.0195] <iain>
sstangl: So far (🤞) it looks like SM has come through mostly unscathed, but the spreadsheet has been revived and I can add your employer to the "companies hiring" tab if you send me `name / remote friendly? / location / contact / jobs page link / other notes`

[08:56:41.0044] <sstangl>
good to hear, and sure! EraDB / yes / fully-remote / todd@eradb.com / https://eradb.com/company#careers / Rust distributed systems

[09:04:30.0675] <iain>
Added!

[14:26:35.0836] <mgaudet>
confession: Made progress on blog post while processing other news; need to finish section on Proxies, then get first round of review.


2020-08-12
[04:03:38.0080] <yulia>
i have  a dumb question: how can i view  information in macros when debugging, or enums/other things like that?

[04:08:31.0050] <yulia>
like, for JSOp i can do `JSOp(*op)` but is there a general rule to follow for this?

[04:08:39.0891] <yulia>
for example, accessing `REGS`?

[04:28:06.0428] <yulia>
jonco: sorry, i have a lot of questions. but-- i think the most pressing one is, is there an easy way to debug inside of self hosted code?

[04:28:15.0123] <yulia>
i am trying to update the module linking code to the async stuff

[04:28:29.0172] <yulia>
right now im relying on throwing 😬

[04:41:32.0587] <jonco>
yulia: there is no good way to do this as far as I can remember

[04:41:49.0066] <jonco>
although there is a function that prints out a message I think...

[04:42:03.0602] <jandem>
yeah `DumpMessage` 

[04:42:13.0343] <jonco>
yes that ^

[04:50:24.0058] <yulia>
ah thanks

[06:58:23.0818] <jorendorff>
not super in the mood for stupid questions this morning

[06:59:05.0937] <yulia>
do we want to meet at all?

[06:59:15.0825] <yulia>
we can also just talk

[07:00:09.0368] <yulia>
its just waldo and me rn

[07:00:33.0908] <yulia>
i think its just gunna be a chat round

[09:01:38.0600] <jorendorff>
mgaudet: Would you mind taking a look at https://phabricator.services.mozilla.com/D86239 Proxy.cpp, the changes in ProxyDefineOnExpando?

[09:02:04.0952] <mgaudet>
Can Do 

[09:02:29.0231] <jorendorff>
mgaudet: I told Adam to make that change, because it makes the code work for accessors. Wanted to check with you that the more complex existing code wasn't for a subtle reason

[09:04:47.0106] <mgaudet>
jorendorff: The only real reason that I ended up landing it in that shape was that I wanted to assert here that the expando did not already have the private field (which should have asserted prior, but would catch a case where perhaps we didn't emit a CheckPrivateField where we ought to have. 

[09:04:54.0042] <mgaudet>
 * jorendorff: The only real reason that I ended up landing it in that shape was that I wanted to assert here that the expando did not already have the private field (which should have asserted prior, but would catch a case where perhaps we didn't emit a CheckPrivateField where we ought to have.)

[09:05:01.0847] <jorendorff>
oh cool

[09:05:25.0508] <jorendorff>
hmm, the assertion doesn't always hold anymore, since we define getters and setters separately

[09:05:27.0995] <mgaudet>
jorendorff: I'd be OK with simplifying; but perhaps for safety's sake adding a `#ifdef DEBUG HasOwnProperty` check? 

[09:05:46.0712] <mgaudet>
Oh, that would be yet-another reason to get rid of it :P 

[09:05:49.0944] <jorendorff>
yep, can do

[09:06:05.0951] <jorendorff>
well, we could still assert it for data properties, no particular reason not to...

[09:54:51.0756] <sfink>
jonco: @allstarschh|afk: I looked at the stats from my latest awsy-tp6 run. 47% of rope nodes end up flattened.

[09:55:20.0882] <sfink>
22% are converted to extensible strings, so were the root of a flattened string. 25% are converted to dependent strings, which I think means they were interior rope nodes.

[09:57:56.0818] <sfink>
(and it looks like most of the ones that were converted to extensible strings end up getting converted to dependent strings later, but I'm still working out what that number means exactly)

[09:58:57.0059] <jonco>
hmm, I'm not sure what this means but it's good have have actual numbers

[09:59:38.0113] <sfink>
to me, it's mostly rejecting the hypotheses that either almost all or hardly any ropes get flattened

[10:00:27.0900] <sfink>
but I don't know whether that means it's worth going to the effort of doing more operations on ropes without flattening them, or conversely flattening ropes more eagerly

[10:39:57.0652] <jorendorff>
what is a SetPropIRGenerator::DeferType?

[10:41:33.0558] <mgaudet>
jorendorff: SetProp (and SetElem) fallback is a bit peculiar, 

[10:41:57.0482] <mgaudet>
in that it's implemented as a 'two phase' -- the first attempt to attach may decline, until after the operation is complete

[10:42:13.0888] <mgaudet>
DeferType tells you if you are deferring to the 'after the operation' attach point

[10:42:21.0704] <jorendorff>
ok

[10:42:25.0690] <jorendorff>
makes sense.

[10:42:48.0493] <jorendorff>
so tryAttachStub is just the first attempt

[10:43:12.0048] <mgaudet>
And we only try one thing in the 'after' case: https://searchfox.org/mozilla-central/source/js/src/jit/BaselineIC.cpp#2841

[11:06:23.0198] <jorendorff>
mgaudet: i was asking because the new InitLockedElem opcode will be used when attaching private methods to instances, so it'll happen more frequently

[11:06:33.0386] <jorendorff>
i'll ask for a follow-up bug

[11:06:52.0828] <jorendorff>
really the right answer is to decide how to optimize the feature

[11:06:59.0309] <mgaudet>
Yeah, I would say that's a nice followup 

[11:07:15.0899] <jorendorff>
this opcode possibly shouldn't exist, in quite the form we have it

[11:16:39.0878] <mgaudet>
confession: finished draft of private fields blog post (if anyone would like to take a peek and make suggestions,  let me know)

[11:16:45.0841] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[11:20:18.0412] <iain>
mgaudet: I can take a look

[12:42:29.0661] <Waldo>
/me grmbls at Gecko taking so long to build

[12:44:35.0121] <mgaudet>
For the blog post, I'd like to link to a section of code that is a direct implementation of a spec algorithm with step numbers commented in. Anyone have a particular favourite they'd like to suggest?

[12:45:41.0472] <evilpie>
mgaudet: probably some array functions like ArrayIndexOf

[12:46:17.0262] <mccr8>
I don't have any particular favorites, but it isn't too hard to find some if you don't get useful replies for anybody: https://searchfox.org/mozilla-central/search?q=step%203&path=

[12:46:44.0274] <mccr8>
 * I don't have any particular favorites, but it isn't too hard to find some if you don't get useful replies from anybody: https://searchfox.org/mozilla-central/search?q=step%203&path=

[12:46:52.0132] <mccr8>
 * I don't have any particular favorites, but it isn't too hard to find some if you don't get useful replies from anybody: https://searchfox.org/mozilla-central/search?q=step%203&path=

[13:08:28.0026] <mgaudet>
That was a good trick asking for a specific step number when searching :) 

[13:12:12.0456] <Caspy7>
can someone help me find the slaughterhouse blog post?

[13:12:28.0264] <Caspy7>
web searches and my poor memory are failing me

[13:16:58.0936] <Caspy7>
this was a post a few years ago that synopsized a range of changes that apparently fixed and mitigated several vulns 

[13:17:59.0370] <mgaudet>
I know exactly the one you're talking about, I read it a few weeks ago

[13:18:04.0947] <mgaudet>
I'm trying to see if I can find it in my history

[13:18:33.0625] <mgaudet>
Caspy7: This one right: https://bholley.net/blog/2016/the-right-fix.html 

[13:19:26.0948] <Caspy7>
mgaudet: Yes! That's it. Thanks.

[13:20:32.0104] <mgaudet>
(I ended up there through a very weird sequence of events, but it was a good read) 

[13:20:58.0902] <Caspy7>
ha

[13:32:19.0357] <Caspy7>
I may have picked a fight on twitter...
https://twitter.com/caspy7/status/1293636527231205377

[13:35:13.0338] <Waldo>
Fight worth picking, but I'm pretty sure "fantasy land" and "gas-lit cult" are not exactly going to change minds, rather harden them.

[13:35:47.0497] <Caspy7>
/me nods

[13:35:50.0665] <Caspy7>
hrm

[13:53:22.0095] <Waldo>
/me mutters

[13:53:48.0286] <Waldo>
"add an algorithm to a signal" and "remove an algorithm from a signal", in embedder-directed fashion, is going to be some messy code.

[13:56:32.0387] <iain>
Is this streams? 

[14:00:53.0914] <Waldo>
iain: Yes.

[14:02:29.0308] <Waldo>
At the DOM level there's `AbortSignal*` and it has `AddFollower(AbortFollower*)` and `RemoveFollower(AbortFollower*)` functions, but I'm guessing maybe I need to be something like `JS::AbortSignalAddFollower(JSContext* cx, Handle<JSObject*> signal, Handle<JSFunction*> action)` or so.

[14:03:04.0186] <Waldo>
But if I do that, that means DOM side is going to have some grody `AbortFollower` subclass implementation, and it's going to have gross tracing through it of a JS function, yadda yadda yadda.

[14:03:10.0259] <Waldo>
Maybe that's just how it has to be?

[14:03:45.0611] <Waldo>
Or not sure, maybe I can replicate the effect in subtly different fashion somehow.

[14:08:26.0079] <iain>
Blugh

[14:12:08.0286] <Waldo>
In contrast, suitably making "is the aborted flag on this AbortSignal set" work embedder-directedly was utterly trivial.

[14:12:33.0845] <Waldo>
`dom::UnwrapDOMObject<dom::AbortSignal>(obj)->Aborted()` basically.

[14:15:10.0788] <iain>
What part of the API is this for?

[14:15:39.0875] <Waldo>
iain: See all the mentions of "signal" in https://streams.spec.whatwg.org/#readable-stream-pipe-to

[14:16:54.0237] <Waldo>
"If signal’s aborted flag is set" "Add abortAlgorithm to signal." "remove abortAlgorithm from signal." and "Assert: either signal is undefined, or signal implements AbortSignal." in a caller

[14:17:17.0724] <Waldo>
I have the first and the last implemented in patches locally.  Middle two are the mess.

[14:19:16.0512] <iain>
Oh wow

[14:19:25.0909] <iain>
That is quite the spec

[14:21:29.0047] <Waldo>
Streams still feels to me like a very...architectured...architecture.  Of not really any meaningful value on its own.  And with respect to intended use in other specs, maybe of unclear value.

[14:22:10.0994] <iain>
It feels like it was all designed at once, rather than starting with a minimal design and adding features as they became necessary

[14:23:03.0659] <Waldo>
It still isn't clear that the spec _enables_ any new behavior that could not have been implemented before.  Generally, I would prefer specs that clearly implement some new, previously-unusable behavior, because then their value is sort of blindingly clear.


2020-08-13
[23:12:35.0629] <dbezhetskov>
Is there any robust way to build SpiderMonkey on windows 10? I tried https://firefox-source-docs.mozilla.org/setup/windows_build.html but mozilla's terminal crashes with `can't allocate space for heap...` during `./mach build`

[23:13:22.0108] <dbezhetskov>
 * Is there any robust way to build SpiderMonkey on windows 10? I tried https://firefox-source-docs.mozilla.org/setup/windows_build.html but mozilla's terminal crashes with `can't allocate space for heap...` during `./mach build`.

[23:14:25.0868] <dbezhetskov>
I need to reproduce one issue on windows, maybe are there some windows abi emulator for this or prebuilt docker containers?

[23:41:32.0046] <jandem>
can you pastebin (part of) the build output somewhere? 

[23:42:19.0957] <jandem>
do you need a local build or would a Try shell build work?

[01:54:46.0254] <dbezhetskov>
> <@jandem:mozilla.org> can you pastebin (part of) the build output somewhere?

sure, I created the doc with screenshots: https://docs.google.com/document/d/1Sg4IYM_CiBeoLMRR5T-7vI4Bz-5rDytPONVGHHhLdnk/edit?usp=sharing

[01:55:52.0821] <dbezhetskov>
> <@jandem:mozilla.org> do you need a local build or would a Try shell build work?

to debug windows builds local build is preferable, but if there is now easy way to build SM on windows try server is the way

[02:00:44.0576] <jandem>
dbezhetskov: also happens if you start with a fresh terminal?

[02:03:18.0140] <dbezhetskov>
> <@jandem:mozilla.org> dbezhetskov: also happens if you start with a fresh terminal?

yes, sometimes I run into this error when I just started terminal and run `./mach build`

[02:04:35.0246] <jandem>
and it's the latest MozillaBuild version?

[02:05:58.0805] <jandem>
someone had this problem in bug 1490142, starting over helped :/ 

[02:06:00.0973] <botzilla>
https://bugzil.la/1490142 — RESOLVED (nobody) — mach build compile fails on windows with cygwin error

[02:09:30.0440] <dbezhetskov>
> <@jandem:mozilla.org> and it's the latest MozillaBuild version?

I checked out repo a few days ago

[02:10:36.0068] <dbezhetskov>
> <@jandem:mozilla.org> someone had this problem in bug 1490142, starting over helped :/

thanks, will try again

[06:31:26.0838] <emilio>
Curious, what's warp?

[06:33:08.0293] <yulia>
warp is a jit compiler that would replace ion

[06:36:10.0217] <tcampbell>
We are replacing the translation layer of IonMonkey with a different approach, but keeping the optimizing code-generator.

[06:36:58.0894] <tcampbell>
It brings a lot of simplification and we expect to be less fragile performance-wise on complex javascript (that dominates the web these days..)

[06:37:46.0499] <emilio>
Ah, cool.

[06:37:57.0220] <emilio>
So did we run out of *Monkey names? ;)

[06:38:57.0346] <jandem>
we should start calling it WarpMonkey :) 

[06:41:18.0089] <tcampbell>
as we scoped down the project, we started calling it WarpBuilder to replace the IonBuilder portion of IonMonkey without being a completely new JIT

[06:43:53.0621] <tcampbell>
under-promise and all that

[06:44:14.0112] <yulia>
sorry i overstated

[06:46:42.0462] <yulia>
it is _very exciting_ though

[08:46:37.0123] <Waldo>
"monkey" names were never terribly coherent branding, even internal or developer-focused branding.

[08:52:05.0578] <yulia>
can cacheIR be cache monkey?

[08:52:27.0841] <yulia>
💸🐒

[08:52:54.0313] <yulia>
 * 💵🐒

[09:41:41.0883] <sfink>
Waldo: uh... I just noticed for https://phabricator.services.mozilla.com/D86725#inline-495129 that `MakeUnique` is infallible, even when used via `js::MakeUnique`? (bug 1216611). I'm guessing spidermonkey code assumes it to be fallible, since *almost* ever use I see in a quick grep does a null-check.

[09:41:43.0426] <botzilla>
https://bugzil.la/1216611 — RESOLVED (nobody) — add a MakeUniqueFallible<T[]> (and maybe <T>) function

[09:42:00.0865] <sfink>
do you think it would be a good idea to make `js::MakeUnique` alias `js::MakeUniqueFallible`?

[09:45:28.0450] <jandem>
`js::MakeUnique` [calls](https://searchfox.org/mozilla-central/rev/3434a9df60373a997263107e6f124fb164ddebf2/js/public/UniquePtr.h#43) `js_new`, I think it's fallible?

[09:46:32.0559] <sfink>
ah, I missed that

[09:47:12.0166] <sfink>
yeah, I think that fixes it

[09:48:09.0756] <jandem>
the split is unfortunate..

[13:22:22.0220] <gkw>
fyi people, I am now unable to compile 32-bit builds on 64-bit Linux, see bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1658976 (and its potential regressor)

[13:29:22.0438] <tcampbell>
On Windows for 32-bit builds I've had to explicitly specify both host and target to make rust work

[13:30:44.0824] <tcampbell>
but this looks not quite the same

[13:46:26.0361] <tcampbell>
32-bit builds still work for me using a target of `i686-pc-linux`. Both with mach and with js/src/configure

[14:19:51.0313] <gkw>
tcampbell: oh I've been using `i686-unknown-linux-gnu`. It suggested `x86_64-unknown-linux-gnux32` but that fails too

[14:20:55.0741] <tcampbell>
I've never been very clear on this build-tuple subtlety

[14:23:13.0867] <gkw>
me neither

[14:29:56.0438] <evilpie>
those are like zodiac signs for C++ developers

[14:48:20.0173] <gkw>
froydnj: I've gotten as much information as you folks have requested

[16:46:07.0266] <arai>
what is "RealmMerge" mentioned here?  https://searchfox.org/mozilla-central/rev/358cef5d1a87172f23b15e1a705d6f278db4cdad/js/src/builtin/ModuleObject.h#287

[16:47:41.0534] <arai>
I'm wondering why it's called only from off-thread compilation https://searchfox.org/mozilla-central/rev/358cef5d1a87172f23b15e1a705d6f278db4cdad/js/src/vm/HelperThreads.cpp#1933

[16:54:31.0790] <Waldo>
arai: Isn't that basically what the function formerly (still?) known as `gc::MergeCompartments` did, to merge the GCthing results of off-thread parsing back into the compartment in which the script was actually being parsed?

[16:57:11.0511] <arai>
ah, makes sense.  thanks :)


2020-08-14
[17:04:52.0954] <arai>
sounds like we can eliminate it after moving GC allocation to the main thread

[17:06:13.0356] <arai>
 * sounds like we can eliminate it after moving GC object allocation to the main thread

[17:36:05.0841] <tcampbell>
@arai correct. The plan is to replace it with instantiateStencil

[17:36:50.0279] <arai>
testing the patch now :)  https://treeherder.mozilla.org/#/jobs?repo=try&revision=2cedc8ec0fca9c301a7232d362f2703291a6431f

[17:36:53.0423] <tcampbell>
We only need mergeRealms for offthread since we create the separate parser GlobalObject

[17:38:14.0288] <tcampbell>
One thing to note is that we still require a parse global to allocate atoms because of some internals of how Zones work

[17:38:34.0893] <tcampbell>
So the merge realms can't be completely removed until we land the atoms patch

[17:39:46.0653] <arai>
I see

[01:43:48.0648] <yulia>
jonco: i am getting some weird errors.. namely that this is failing to set: https://searchfox.org/mozilla-central/source/js/src/builtin/Module.js#646

[01:43:52.0811] <yulia>
is there a reason why that might happen?

[01:44:10.0921] <yulia>
i might just try to rewrite everything since i can't remember much of what i did last week, if this error seems totally impossible

[01:44:34.0052] <yulia>
also, when i add logging, the behavior changes. i wonder if i just really broke something

[01:45:11.0905] <jonco>
what's the error?  that function is not changing the status?

[01:45:20.0704] <yulia>
yeah it just doesnt change status

[01:45:51.0222] <yulia>
and then we hit this: https://searchfox.org/mozilla-central/source/js/src/builtin/ModuleObject.cpp#1047

[01:45:57.0639] <yulia>
but we do _try_ to set the status correctly

[01:46:12.0286] <yulia>
i added an assert after setting, and it is failing the assert. We don't end up setting to evaluating

[01:46:19.0815] <yulia>
this is with my async changes

[01:46:33.0576] <yulia>
some more context: module now inherits from JSFunction, so something might be interfering

[01:46:55.0838] <yulia>
its the first time i poke around in self hosted code so there might be some basic stuff im missing

[01:46:55.0920] <jonco>
oh, do slots work differently for JSFunctions?

[01:47:04.0715] <yulia>
.... ugh wait you are right

[01:47:12.0422] <yulia>
they do... i forgot from earlier this week

[01:47:22.0900] <yulia>
i think i will just rewrite this

[01:47:34.0673] <jonco>
do we support functions with enough slots to cover what we use for modules would be my next qeustion...

[01:47:49.0138] <yulia>
i was recommended to look at extended functions...

[01:47:57.0139] <yulia>
and have the module linked from there, or vice versa

[01:48:00.0725] <yulia>
do you know anything about that?

[01:48:26.0903] <jonco>
oh right, keep ModuleObject separate and link to it from an extended slot sounds reasonable

[01:48:37.0518] <yulia>
ok

[01:48:43.0503] <yulia>
rewrite number 3 time

[01:48:55.0385] <jonco>
good luck :)

[09:47:55.0933] <sfink>
jonco: you haven't landed anything that would reorder weak vs grey marking yet, right? I'm just surprised at some of the recent bugs, especially this new `marker.isDrained()` assertion.

[09:48:27.0908] <jonco>
no I wrote a patch and it didn't immediately work, and I haven't debugged it yet

[09:48:56.0495] <sfink>
ok, I didn't see anything that had gone in. Thanks.

[09:50:06.0530] <jonco>
what's the timeframe? bug 1657122 could have caused problems, maybe bug 1658895

[09:50:07.0987] <botzilla>
https://bugzil.la/1657122 — RESOLVED (jonco) — Compact ObjectGroups

[09:50:08.0608] <botzilla>
https://bugzil.la/1658895 — RESOLVED (jonco) — We unnecessarily trace wrapper rooters in mark slices

[09:51:46.0520] <sfink>
the latest (posted to bug 1658654 comment 3) was just a few hours ago.

[09:51:47.0901] <botzilla>
https://bugzil.la/1658654

[09:52:10.0328] <sfink>
the other one is the thing the bug was originally for, but that's probably unrelated

[09:52:37.0235] <sfink>
(though if we *did* reorder grey/weak, then it might have been related. No luck there.)

[09:52:48.0859] <jonco>
ok it predates bug 1658895 at least

[09:56:07.0343] <sfink>
oh, I just looked at the stack. It's doing plenty of scary things. (`RemapDeadWrapper` etc.) So everything I need might be right there.

[09:56:15.0286] <jonco>
sfink: oh, the new marker.isDrained() assertion is certinaly bug 1658895

[09:56:16.0846] <botzilla>
https://bugzil.la/1658895 — RESOLVED (jonco) — We unnecessarily trace wrapper rooters in mark slices

[09:56:27.0723] <jonco>
that assertion doesn't hold any more I guess

[09:59:35.0459] <sfink>
hm, I guess that comment "In the first sweep..." doesn't form an actual sentence.

[10:00:34.0787] <jonco>
wow that's like something generated by an AI that superficially looks like english

[10:00:59.0039] <sfink>
😆

[10:01:43.0531] <sfink>
yeah, reads like classic Markov chain writing

[10:03:27.0403] <jonco>
(I've commented on the bug)

[10:03:38.0795] <sfink>
saw that, thanks

[10:46:52.0961] <mgaudet>
confession: Why can I never reliably spell the features I work on... 'visbility... visibilty... visibility', 'ergnomic, ergonmic, ergonomic'  

[10:46:55.0230] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[13:31:07.0498] <sfink>
froydnj: do you think it's ok to post a user's addons in a public bug? I was going to paste them into bug 1658253 (they're stored in the profile), but even though it's already possible to get them, I feel a little uncomfortable making it *that* easy to see.

[13:31:11.0125] <botzilla>
https://bugzil.la/1658253 — UNCONFIRMED (nobody) — Firefox continues freezing after update to 79

[13:31:26.0036] <sfink>
I could mark the comment private, though I don't necessarily want to hide it from the reporter.

[13:52:48.0119] <froydnj>
sfink: I hadn't considered that; if they want to post their addons, I think that's different from posting them as extracted from the profile?  or are you saying that even asking they themselves to post the addons is heading into sketchville?

[13:53:13.0561] <sfink>
just the former

[13:53:38.0623] <sfink>
I don't really see an issue with asking them for their addons

[13:57:27.0368] <froydnj>
ok, yeah

[14:40:51.0844] <Waldo>
yulia: Extended functions have two spare reserved slots to work with -- see `builtin/streams/HandlerFunctions-inl.h` (?) for code that uses the idea in streams.


2020-08-17
[23:52:53.0726] <yulia>
Waldo: ok, thanks  for the pointer!

[02:46:42.0060] <nicolo-ribaudo>
Q: Can I lint only the last commit with `./mach lint`? When I run it it tries to lint everything and it crashes because of too many files passed to clang-format (`Argument list too long: '/Users/nribaudo1/.mozbuild/clang-tools/clang-tidy/bin/clang-format'`)

[05:29:00.0349] <tcampbell>
nicolo-ribaudo: This link suggests the `--outgoing` flag https://firefox-source-docs.mozilla.org/code-quality/lint/usage.html#using-the-command-line

[05:33:17.0935] <tcampbell>
yulia: ping re packaging

[05:34:00.0464] <yulia>
yep?

[05:34:40.0258] <yulia>
(which packaging? of sm?)

[05:34:44.0971] <tcampbell>
correct

[05:34:48.0405] <yulia>
right

[05:36:10.0257] <tcampbell>
1) Generally I've been suggesting people track ESR since it changes details less often, but still has security updates. Having releases for both ESR and mozilla-release probably makes sense though.

[05:37:24.0021] <tcampbell>
2) We currently have a `pkg` job on treeherder that generates a `mozjs-XX.X.X.tar.bz2` tarball which is generally the thing an embedder would want instead of full firefox source.

[05:38:05.0094] <tcampbell>
3) There is a path on `archive.mozilla.org` that would presumably would use: http://archive.mozilla.org/pub/spidermonkey/releases/

[05:39:16.0595] <tcampbell>
4) The reference we would follow is what generates the Firefox source tarballs: http://archive.mozilla.org/pub/firefox/releases/78.1.0esr/source/

[05:40:35.0528] <tcampbell>
5) There is a tool in the releng suite called `Beetmover` ("bit" with a strong accent.. I don't remember the history..) that moves firefox tarball to archive.m.o https://github.com/mozilla-releng/scriptworker-scripts/tree/master/beetmoverscript

[05:42:14.0980] <tcampbell>
6) We would ideally like to have basic signing of the tarball (like the ff one), but I was asked to setup a second key and that it was preferred not to use the firefox source signing key.

[05:44:03.0840] <tcampbell>
I'm not sure what the task for firefox-source is called, but here is a beetmover example for langpacks https://treeherder.mozilla.org/#/jobs?repo=mozilla-release&selectedTaskRun=XByi_xVfRPOnFnrdKw1fag.0&group_state=expanded&searchStr=bm

[05:46:35.0467] <tcampbell>
One argument made to me was that if building in automation, the spidermonkey package doesn't by you much over the firefox package other than download size.

[05:46:57.0144] <tcampbell>
 * One argument made to me was that if building in automation, the spidermonkey package doesn't by you much over the firefox package other than download size. If one is just tracking security releases it is not that often.

[05:46:57.0992] <yulia>
automation from which direction?

[05:47:17.0229] <tcampbell>
embedder building their build of a gecko library

[05:47:55.0727] <yulia>
i think size is possibly the main concern

[05:48:09.0174] <yulia>
as well as not having extra code that isn't being used

[05:48:45.0935] <tcampbell>
well, one would still be building just the spidermonkey portion. It would certainly be nice to have

[05:49:12.0671] <yulia>
at least, when i was talking to the embedders so far, its been a pain point to separate spidermonkey from the rest of gecko

[05:49:35.0485] <yulia>
(they are working with some historical stuff as well)

[05:50:09.0270] <yulia>
i think you are already familiar with that though

[05:50:43.0869] <tcampbell>
Another gross part about our current setup is that generally embedders should turn off `jemalloc`because linking it is complex. In the embedding examples we explain this, but perhaps we have have better defaults.
https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr68/docs/Building%20SpiderMonkey.md

[05:52:34.0885] <yulia>
is this our most recent documentation? https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/How_to_embed_the_JavaScript_engine

[05:52:48.0678] <yulia>
i noticed that we don't really have these instructions anywhere official: https://github.com/servo/mozjs#upgrading

[05:52:56.0797] <yulia>
but thats the process you outlined

[05:53:49.0711] <tcampbell>
The MDN is out of date (and I think slated for removal). We've been trying to collect https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/tree/esr68/docs as the most recent docs

[05:54:31.0110] <yulia>
i see, this has the esr thing

[05:55:26.0294] <yulia>
I wonder if we could somehow echo the tarballs as releases here, via a github action or something

[05:55:43.0385] <tcampbell>
that would be neat

[05:56:02.0498] <yulia>
not really a high priority thing right now... i need to gather more discussions with embedders

[05:56:52.0486] <tcampbell>
the problem with downloading `pkg` tarballs directly is that it is hard to know which of the revs on taskcluster are the one that shipped and which are staging a dot-release is assembled

[05:57:39.0714] <tcampbell>
yulia: maybe we need to embaress ourselves in a stream trying to get hello-world embedding doing

[05:57:41.0679] <tcampbell>
 * yulia: maybe we need to embaress ourselves in a stream trying to get hello-world embedding done

[05:58:00.0082] <tcampbell>
 * yulia: maybe we need to embarrass ourselves in a stream trying to get hello-world embedding done

[05:58:35.0010] <yulia>
that sounds like a great idea

[05:58:36.0715] <tcampbell>
I think we do need a better landing .md for the embedding examples 

[05:58:44.0596] <yulia>
yeah i agree

[05:58:50.0135] <yulia>
im looking at v8's page now

[05:58:54.0858] <yulia>
https://v8.dev/docs/embed

[05:59:19.0876] <yulia>
i didn't find anything for javascript core

[06:00:09.0892] <tcampbell>
(btw, you'll see references for a build tool called meson in the examples repo. This was just an arbitrary thing for the examples. The embedding is independant of that entirely)

[06:01:38.0439] <tcampbell>
Another sore spot is that on Windows the embedding story is complex because we don't build with MSVC anymore

[06:02:07.0815] <yulia>
uff i see

[06:03:35.0402] <yulia>
i guess thats for a year or two now iirc?

[06:03:43.0691] <tcampbell>
yeah, sounds about right

[06:04:36.0079] <tcampbell>
generally one builds the spidermonkey code using our build system into a library though

[06:05:20.0795] <tcampbell>
so as long as embedders aren't trying to just add the .cpp files to their project, it isn't impossible. Writing down the steps will go a long way

[06:32:28.0638] <yulia>
do we have a simpler example of using extended functions than streams?

[06:32:46.0511] <yulia>
finding it hard to focus, so something simpler might be easier to follow

[06:36:13.0724] <tcampbell>
yulia: There are cases with extended functions https://searchfox.org/mozilla-central/rev/2f9eacd9d3d995c937b4251a5557d95d494c9be1/js/src/frontend/Parser.cpp#1985-2006

[06:36:48.0375] <tcampbell>
/me tries to work backwards to the related parser code...

[06:38:19.0049] <tcampbell>
Ah, HomeObjects use them. That is why classes and methods are on list https://searchfox.org/mozilla-central/source/js/src/vm/Interpreter.cpp#4430

[06:38:34.0352] <tcampbell>
 * Ah, HomeObjects use them. That is why classes and methods are on list. https://searchfox.org/mozilla-central/rev/2f9eacd9d3d995c937b4251a5557d95d494c9be1/js/src/vm/Interpreter.cpp#4430

[06:38:35.0309] <yulia>
oh perfect, i think thats what i neded

[06:38:40.0109] <yulia>
 * oh perfect, i think thats what i needed

[06:39:28.0665] <tcampbell>
so you need to tweak `InitialFunctionFlags`to ensure your case will requested FunctionExtended

[06:40:07.0766] <tcampbell>
and you'll need to avoid stepping on someones use of a slot by looking at https://searchfox.org/mozilla-central/rev/2f9eacd9d3d995c937b4251a5557d95d494c9be1/js/src/vm/JSFunction.h#799-816

[06:40:34.0096] <tcampbell>
(note that not everyone was kind enough to declare their uses of extended functionslots there, but it is most)

[06:41:50.0325] <tcampbell>
(Uses of `getExtendedSlot` should reveal them all though https://searchfox.org/mozilla-central/search?q=symbol:_ZNK10JSFunction15getExtendedSlotEj%2C_ZNK10JSFunction15getExtendedSlotEm%2C_ZNK10JSFunction15getExtendedSlotEy&redirect=false )

[07:04:59.0847] <jorendorff>
mgaudet: Any thoughts on https://phabricator.services.mozilla.com/D86572 ?

[07:06:23.0785] <mgaudet>
> <@jorendorff:mozilla.org> mgaudet: Any thoughts on https://phabricator.services.mozilla.com/D86572 ?

Yes... I thought I uploaded a fix... 

[07:09:18.0359] <mgaudet>
hah. It failed because I had edited a comment and forgotten to amend; then I didn't notice. 

[07:10:11.0814] <mgaudet>
jorendorff: It's been updated now. The fix is what made rough sense to me... I am definitely in an area where I'm not sure how all the different competing interests and parts of parsing are supposed to fit together: Fix works, but may be in the totally wrong spot 

[07:19:30.0901] <jorendorff>
cool, will look today

[07:20:49.0088] <jorendorff>
mgaudet: do we have any minor bugs related to private fields and methods for avandolder to look at next? we've got 2 weeks left on his internship, the major stuff is wrapping up, just looking to fill the cracks.

[07:23:44.0108] <jorendorff>
mgaudet: this hack

[07:25:33.0142] <jorendorff>
i wish i could think of a better way

[07:26:47.0614] <yulia>
jorendorff: we might have  two small bugs here: https://bugzilla.mozilla.org/show_bug.cgi?id=1654001

[07:27:05.0963] <yulia>
(this is unrelated to private fields, just other along tc39)

[07:29:19.0676] <jorendorff>
avandolder: similarly, if you want a trivial bug that would help web compat, there's https://bugzilla.mozilla.org/show_bug.cgi?id=1655947

[07:29:24.0640] <jorendorff>
yulia: thanks

[07:30:33.0456] <mgaudet>
jorendorff / avandolder https://bugzilla.mozilla.org/show_bug.cgi?id=1647437 would be an interesting cchoice

[07:30:37.0120] <mgaudet>
 * jorendorff / avandolder https://bugzilla.mozilla.org/show_bug.cgi?id=1647437 would be an interesting choice

[07:31:00.0433] <jorendorff>
yes, very interesting

[07:31:48.0997] <mgaudet>
(the only concern with that one would be a non-zero chance of exploding non-local effects) 

[07:34:37.0942] <mgaudet>
if adam doesn't take that one up, I think I might start on that one today 

[07:35:27.0551] <avandolder>
I can take a look, I think I'm gonna try to get Reflect.parse tests for private methods first

[07:38:27.0357] <KaiE>
Hello wes suggested I should ask here about js-ctypes questions. I'm looking for an efficient way to convert a ctypes.uint8_t array (which contains binary data) to a JS string. I cannot use readString, because the contents aren't UTF-8. Currently I'm using a loop and String.fromCharCode, but it is very slow (it's code in Thunderbird). Is there a faster mechanism to do this conversion? Bug 1659443. Loop is here: https://searchfox.org/comm-central/rev/38c93f8c99cfe10cff5cd1b0ce399ff2334c0003/mail/extensions/openpgp/content/modules/RNP.jsm#973

[07:38:31.0358] <botzilla>
https://bugzil.la/1659443 — NEW (KaiE) — Processing an OpenPGP message is very slow

[07:49:02.0978] <evilpie>
KaiE you could try String.fromCharCode.apply(null, unit8array)

[08:00:56.0629] <KaiE>
evilpie: thanks, but apply() doesn't seem to like the ctypes array type? I get: RangeError: too many arguments provided for a function call

[08:01:15.0224] <jorendorff>
mgaudet: I wonder if the ergonomic brand-check proposal has an Automatic Semicolon Insertion change of behavior that's been overlooked...

[08:01:19.0897] <evilpie>
Oh you array is too largr

[08:01:43.0873] <jorendorff>
oh, no wait (thinks)

[08:02:08.0495] <KaiE>
evilpie: yes it's large. could be up to 30-40 MB depending on email provider

[08:02:23.0883] <KaiE>
in my test it's just 1.6 MB

[08:02:49.0583] <jorendorff>
never mind, I don't think it's a problem (feels slightly gross)

[08:04:43.0556] <jorendorff>
KaiE: Hmm. I don't know a good way to do that. Ideally there should be a way to take a ctypes.uint8_t array and convert it to a Uint8Array, and then I think you have options

[08:04:46.0997] <KaiE>
evilpie: is there any way to type cast a ctypes array to a JS type array? 

[08:04:47.0217] <jorendorff>
(I haven't checked)

[08:05:00.0706] <KaiE>
 * evilpie: is there any way to type cast a ctypes array to a JS type array? (ok you say there isn't)

[08:05:03.0127] <jorendorff>
KaiE: i don't think we do, but we'd take that patch

[08:05:41.0976] <evilpie>
I don't know jsctypes enough

[08:05:41.0986] <KaiE>
thanks. I don't have the inside knowledge to hack that, but can consider it for a long term optimization

[08:05:58.0278] <KaiE>
 * thanks. I don't have the inside knowledge (yet) to hack that, but can consider it for a long term optimization

[08:07:11.0053] <KaiE>
evilpie: in my particular scenario, it might be a shorter way to success to implement a variation of readString that doesn't attempt to interpret as UTF-8 but preserves the binary values.

[08:08:14.0531] <KaiE>
Because, I made a test using a typecast to ctypes.char.array, and then called .readString() on that. If the data happens to be ASCII only, then it works fine, and it is fast.

[08:09:41.0190] <evilpie>
Sounds ok. JS strings don't care if your data is valid utf8

[08:10:16.0285] <KaiE>
evilpie: do you think a patch to add a readBinaryString() method could be accepted?

[08:12:32.0324] <tcampbell>
or "readStringLatin1"? I don't think there would be objections to adding on cetnral

[08:12:39.0041] <tcampbell>
 * or "readStringLatin1"? I don't think there would be objections to adding on mozilla-central

[08:16:02.0762] <KaiE>
tcampbell: I don't know what encoding it has. It could be any. And in theory the data I'm obtaning could be a raw binary data stream.

[08:17:51.0365] <tcampbell>
if you are converting the 0-255 bytes into fromCharCode, that is the same as pretending the data is Latin1

[08:18:16.0474] <tcampbell>
but does not lose fidelity and covers any binary stream input

[08:19:53.0583] <tcampbell>
doing a conversion to an Array8Uint would be better end result, but probably involves more work to do clever things with the backing buffer. For the string case, we'd naively be making a copy of the data as a JSString

[08:20:53.0213] <Ms2ger [~half-time dedication]>
Uint8Array

[08:23:52.0267] <jorendorff>
Even a ctypes method that naively copies the array data into a `Uint8Array` would be much faster than a JS loop

[08:24:05.0061] <jorendorff>
Fast enough.

[08:24:26.0494] <jorendorff>
`readStringLatin1` is the right name for the other suggestion

[08:26:37.0561] <jorendorff>
What you intend is more like `copyInto8BitString`, but that just makes it obvious that String is the wrong type, what you _really_ want is a Uint8Array :)

[08:27:53.0608] <jorendorff>
mgaudet: I bounced that patch back to you, again. parsing js is so great

[08:28:58.0559] <mgaudet>
😬 you're not kidding 

[08:29:18.0228] <mgaudet>
the `for (#x in y)`... I should have caught that one tho 

[08:29:43.0899] <jonco>
sfink: where did JS_FlushRuntimeBeforeAbruptExit come from?

[08:30:14.0460] <jonco>
sfink: sorry for the delay in reviewing your patches BTW

[08:30:17.0175] <sfink>
jonco: er... it doesn't exist. Yet. Or possibly ever. Still working that out. bug 1657729.

[08:30:26.0948] <botzilla>
https://bugzil.la/1657729 — ASSIGNED (sfink) — Add a shutdown hook

[08:30:49.0248] <sfink>
it doesn't matter; everything is blocked on figuring out how to trigger the flush anyway.

[08:32:49.0590] <jonco>
ok, thanks

[08:34:42.0271] <sfink>
I thought I'd whip up a `readStringLatin1` (yes, the whole "string" thing is a lie. My rationalization is that if you're starting from ctypes you're already lying.) But I don't understand how https://searchfox.org/mozilla-central/source/js/src/ctypes/CTypes.cpp#7825-7826,7834-7835 works. `js_strnlen` and "embedded nulls" do not go together.

[08:37:46.0405] <evilpie>
sfink: well it seems like this is trying to handle `char*`. We don't know the max length in that case: https://searchfox.org/mozilla-central/source/js/src/ctypes/CTypes.cpp#7810

[08:38:09.0156] <evilpie>
this is very much a C specific thing

[08:38:24.0924] <sfink>
sure. But sometimes we do know that max length (when it's coming in as an array), but it's just using that as a maximum length and still stopping at the first NUL.

[08:38:56.0431] <sfink>
 * sure. But sometimes we do know that length (when it's coming in as an array), but it's just using that as a maximum length and still stopping at the first NUL.

[08:38:57.0471] <evilpie>
I think it's just what people expect when using C APIs

[08:39:21.0243] <evilpie>
For `char a[200] = "abc"` you don't want 197 trailing zeros

[08:39:44.0139] <sfink>
ah, fair point. But the comment about embedded nulls is still a lie.

[08:39:48.0195] <sfink>
it claims to handle them, and doesn't.

[08:40:20.0431] <sfink>
maybe it meant "trailing nulls"?

[08:41:02.0043] <evilpie>
I think "correct string length" in this case means the truncated string?

[08:41:26.0952] <sfink>
ohhh.... yes, that would work

[08:41:55.0788] <sfink>
anyway, it built. Not sure how to test now.

[08:42:29.0708] <evilpie>
We have some tests in jit-test/tests/ctypes

[08:44:26.0082] <sfink>
thanks, mindlessly cargo-culting now

[08:44:57.0108] <sfink>
ugh... though all of those are only testing error cases. None have a valid use of `readString`. :-(

[08:45:28.0949] <avandolder>
jorendorff: the current reflect-parse/classes.js test is actually broken right now, and has been since public fields were introduced. should I fix that in a separate patch first?

[08:46:48.0921] <sfink>
ugh, there are come in toolkit/component/ctypes/tests

[08:46:56.0602] <sfink>
 * ugh, there are some in toolkit/component/ctypes/tests

[08:48:30.0280] <sfink>
hm, maybe compiling with --enable-ctypes would be a good idea...

[08:49:38.0373] <sfink>
oh wait, maybe I'm reading the tests wrong

[08:51:11.0681] <sfink>
(I'm not)

[08:52:56.0972] <sfink>
ok, I'll write some tests that are expected to do something. Seems straightforward. Probably duplicating work elsewhere.

[08:54:18.0725] <jorendorff>
avandolder: interesting. how does it fail? or, why isn't it running in CI?

[08:55:18.0718] <avandolder>
Currently, on line 527, it does `assertClassError("class NAME { static }", SyntaxError);` which, since static is a valid public field name, no longer throws a SyntaxError

[08:55:33.0266] <jorendorff>
blurf

[08:55:41.0562] <jorendorff>
it's marked `slow` ...is it really slow?

[08:55:52.0535] <avandolder>
It takes about a minute to run

[08:56:00.0860] <jorendorff>
what the heck though

[08:57:29.0864] <jorendorff>
`assertValidSuperProps` is called many times, maybe

[08:57:39.0201] <jorendorff>
avandolder: To answer your question: yes, please fix this

[09:57:04.0881] <sfink>
KaiE: implemented in bug 1659508, we'll see what the almighty jorendorff says

[09:57:06.0719] <botzilla>
https://bugzil.la/1659508 — ASSIGNED (sfink) — Implement a CTypes readStringLatin1() for CData and CDataFinalizer

[09:59:01.0863] <KaiE>
sfink: wow you're awesome, thanks a lot

[10:05:15.0046] <tcampbell>
will there be null's in the string?

[10:05:26.0700] <tcampbell>
I'd imagine if it is true binary data than it will =

[10:05:28.0729] <tcampbell>
 * I'd imagine if it is true binary data than it will =\

[10:07:49.0388] <sfink>
hm, I guess my "it's ok if it's not semantically clean" argument would get blown away by the "yeah but it doesn't actually work" argument

[10:08:31.0542] <sfink>
somehow, I was assuming that this data is something that would already have been crafted to avoid nuls. But I guess the current code would handle them just fine.

[10:08:33.0271] <sfink>
ugh.

[10:08:46.0255] <sfink>
maybe `Uint8Array` really is the only valid path.

[10:48:43.0023] <sfink>
Waldo: so... over the weekend I was attempting to create a function that I could pass an initializer list of C string literals to: `foo({ "hi", "mom", "I'm", "a", "function", "argument", "now!")`.

[10:48:58.0716] <sfink>
I can *almost* get it to work.

[10:49:24.0987] <sfink>
as in, if I create a separate variable `const char* arg = { "allow", "deny" }; foo(arg)`, it works.

[10:50:09.0126] <sfink>
via something like `template <size_t N> void foo(const char *(&words)[N]) { ... }` I believe.

[10:50:39.0515] <sfink>
but I couldn't get it to take it directly. I attempted things like accepting an `iniailizer_list`. Couldn't get anything to work.

[10:50:52.0073] <sfink>
my Google-fu was too weak to figure out whether it should be possible or not.

[10:51:25.0780] <sfink>
 * as in, if I create a separate variable `const char* arg[] = { "allow", "deny" }; foo(arg)`, it works.

[10:54:24.0318] <Waldo>
sfink: I'm not sure, offhand.  It's nothing I've had to write out before, for sure.

[11:10:12.0603] <tcampbell>
sfink: isn't it just this:
```cpp
void foo(std::initializer_list<const char*> list) {
  for (const char* x : list) {
    printf("%s\n", x);
  }
}
void bar() {
  foo({"a", "b", "c"});
}
```

[11:10:39.0098] <sfink>
Lemme see, I thought I tried that one.

[11:11:07.0097] <sfink>
/me scans through emacs windows looking for the right tree...

[11:11:54.0038] <tcampbell>
/me just put that code into the bigint parser instead of switching directories..

[11:13:11.0566] <Waldo>
godbolt!

[11:13:20.0461] <tcampbell>
oh right.. I knew that..

[11:13:34.0845] <sfink>
oh, yeah

[11:14:04.0706] <sfink>
I think I'm gonna name my firstborn Godbolt.

[11:14:16.0388] <sfink>
(he just walked out of the room, though, so I can't tell him yet)

[11:15:09.0903] <sfink>
uh... wtf??! Yes, that just worked.

[11:15:18.0764] <sfink>
I could've *sworn* I tried that.

[11:15:34.0600] <sfink>
Like, I'm not really sure what other variant of that I could have possibly been trying.

[11:15:44.0364] <sfink>
dammit

[11:15:44.0714] <sfink>
thanks

[11:33:17.0856] <KaiE>
> <@tcampbell:mozilla.org> will there be null's in the string?

When processing MIME encoded email, mostly likely there won't be NULL characters. I've asked Patrick in the "slow" bug to comment based on his experience. If true, then you API would help for our most important scenario. (Currently I'm working under release time pressure based on pre-existing Enigmail code, which used Strings for transport) - Eventually I'd like to also offer users to decrypt arbitrary files, which could then indeed contain NULL bytes. But that future feature could go through a new code path, in which we could flush out the buffer to a file, without requiring it to be converted to a JS string.

[11:43:03.0708] <Waldo>
KaiE: FWIW in the DOM there's `TextEncoder` and `TextDecoder` for converting arrays of bytes to/from UTF-8, but I can't remember if that/they require copying into a `Uint8Array`.

[11:43:55.0472] <KaiE>
Waldo: we are processing data that isn't utf-8

[11:44:22.0438] <Waldo>
Oh, I skimmed too fast.  :-)

[11:44:29.0841] <KaiE>
no worries!

[11:44:56.0786] <Waldo>
"can't you just make email only use UTF-8"

[11:46:23.0621] <KaiE>
> <@waldo:mozilla.org> "can't you just make email only use UTF-8"

only if you control all email clients ever deployed

[11:46:52.0641] <Waldo>
KaiE: The quotes and lack of question mark at end were to indicate it was a joke.  😉

[11:47:17.0138] <KaiE>
OK ;)

[11:47:22.0927] <Waldo>
But also why isn't Thunderbird working on that now?  😉

[12:02:34.0130] <sfink>
Waldo: why does https://searchfox.org/mozilla-central/source/js/src/builtin/streams/StreamAPI.cpp#364-365 do both `AutoSuppressGCAnalysis` and `AutoCheckCannotGC`? They seem redundant. You could pass the suppress into `JS_GetArrayBufferViewData`, and (despite what might be implied by the name) it still does the dynamic check.

[12:06:42.0264] <sfink>
actually... if `AutoCheckCannotGC` isn't throwing a hazard there, then it doesn't seem like the suppress is needed.

[12:06:51.0217] <Waldo>
sfink: ¯\_(ツ)_/¯  https://hg.mozilla.org/mozilla-central/annotate/5808b57453825fe1185e94fd4e7e2e551bdf878f/js/src/builtin/Stream.cpp sez you should ask someone else, maybe jandem.  https://bugzilla.mozilla.org/show_bug.cgi?id=1384513 seems to have been the introducer?

[12:07:10.0637] <sfink>
I don't get to blame you for everything vaguely streams-related??!

[13:47:03.0298] <mgaudet>
jorendorff: you around for a quick/dumb question? 

Essentially: in your review feedback you suggested that inside `orExpr` we check specificially for private names. I'm not super sure what that looks like though / parser norms: Does returning null() always indicate an error condition; or does it just indicate failure to parse by that grammar rule; ie, would we instead check for private names specificially within the `if (!pn) ` block right after the `unaryExpr` call? 

[13:54:16.0871] <mgaudet>
Or I guess we could check for private name first; 

[14:14:30.0638] <mgaudet>
confession: too slow to do this parser work today (and too hot; apologies to those where it's actually hot hot). 

[14:14:33.0099] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:23:29.0966] <jorendorff>
mgaudet: sorry for slowness, was running an errand

[14:23:44.0600] <jorendorff>
mgaudet: `null()` is always an error

[14:24:00.0817] <mgaudet>
No worries. Too hot and too slow to really solve this today anyhow— headed out myself shortly. 

[14:24:19.0938] <jorendorff>
yeah, i saw. see you tomorrow :)

[14:25:02.0738] <jorendorff>
mgaudet: I thought about this, reading the patch, and didn't see a very nice answer. decided to leave it as an exercise for the reader

[14:25:28.0317] <jorendorff>
one possibility would be to add a PrivateNameHandling bool to `unaryExpr()` :-\

[14:26:14.0244] <mgaudet>
Heh. It’s definitely awkward. I will say that. 

The proposal grammar change seems so -simple-, but our parse doesn’t map nicely on this dimension. 

[14:26:21.0806] <jorendorff>
right

[14:26:31.0001] <mgaudet>
 * Heh. It’s definitely awkward. I will say that.

The proposal grammar change seems so -simple-, but our parser doesn’t map nicely on this dimension.

[14:28:03.0260] <jorendorff>
maybe the shift-reduce parser there was a mistake, i dunno

[14:28:17.0694] <jorendorff>
(the one inside of `orExpr`, that is)

[14:31:59.0154] <mgaudet>
¯\_(ツ)_/¯ 

[14:32:05.0571] <mgaudet>
 * ¯\_(ツ)_/¯

[14:32:09.0808] <mgaudet>
 * ¯\\_(ツ)_/¯

[14:32:39.0431] <mgaudet>
 * ¯\\_(ツ)\_/¯

[14:37:17.0641] <jorendorff>
Hmm. Is there a way to `getReservedSlot(obj, index)` from the shell?

[14:37:54.0163] <Waldo>
/me sees mgaudet is as incapable as he is of shrugging in some Markdown flavor

[14:38:08.0304] <Waldo>
 * sfink: ¯\\_(ツ)_/¯  https://hg.mozilla.org/mozilla-central/annotate/5808b57453825fe1185e94fd4e7e2e551bdf878f/js/src/builtin/Stream.cpp sez you should ask someone else, maybe jandem.  https://bugzilla.mozilla.org/show_bug.cgi?id=1384513 seems to have been the introducer?

[14:38:16.0701] <Waldo>
 * sfink: ¯\\_(ツ)\_/¯  https://hg.mozilla.org/mozilla-central/annotate/5808b57453825fe1185e94fd4e7e2e551bdf878f/js/src/builtin/Stream.cpp sez you should ask someone else, maybe jandem.  https://bugzilla.mozilla.org/show_bug.cgi?id=1384513 seems to have been the introducer?

[14:50:01.0450] <evilpie>
jorendorff: getSelfHostedValue("UnsafeGetReservedSlot")(obj, index) might work.

[15:04:23.0678] <jorendorff>
hey, that worked. thanks!

[15:04:49.0211] <jorendorff>
TFW you find the exact line of code containing the bug and you wrote `// XXX BAD` on that line 2 weeks ago

[15:24:19.0287] <Waldo>
you was right

[16:06:31.0136] <Caspy7>
in case it hadn't come up in here https://www.usenix.org/conference/usenixsecurity20/presentation/lehmann


2020-08-18
[03:26:04.0208] <Waldo>
arai: You could have just r-'d the unwrap-and patch and the other one, ugh.  🙂

[03:30:02.0236] <Waldo>
(whoops, fixed the mismatching comment on `maybeUnwrapAs` locally)

[03:45:44.0733] <arai>
Waldo: does `js::WriteOnceData<const JSClass*>` initialize the pointer?

[03:47:05.0547] <Waldo>
arai: Yeah, it starts as null, see the WOD that stores the WindowProxy class just above there too. 

[03:48:23.0716] <Waldo>
I debated adding a "= nullptr" or so to clarify, decided I didn't want to have to work out of that would correctly initialize that data structure - and without writing in a way to trip the "once" logic. 

[03:48:37.0077] <Waldo>
* I debated adding a "= nullptr" or so to clarify, decided I didn't want to have to work out if that would correctly initialize that data structure - and without writing in a way to trip the "once" logic. 

[03:48:46.0257] <arai>
okay, thanks :)

[03:50:10.0590] <Waldo>
I kinda think WOD might be mildly overengineered, but hey, it exists, it's not a crazy idea or anything at least. And in context it certainly is only right to use it. 

[03:52:38.0645] <arai>
Waldo: what's the braces around `JS::InitAbortSignalHandling` call for?

[03:53:37.0845] <Waldo>
arai: I add a bunch more arguments to that call over future patches, braces will scope them all. 

[03:54:02.0529] <arai>
ah, I see

[03:54:17.0749] <Waldo>
The last patch adds another, with an argument narrowly scoped. 

[05:59:54.0750] <yulia>
I just learned about this tool and its really impressive: https://godbolt.org/

[06:03:21.0158] <yulia>
(found it, will play around with it)

[06:04:16.0523] <jonco>
lol, "rateMyCacheIR"

[06:04:33.0611] <yulia>
 * (found it, was wondering about tools that could be used locally, will play around with it)

[06:04:47.0419] <Ms2ger>
10/10

[06:07:10.0222] <yulia>
the benchmarking is also really neat

[06:08:43.0178] <yulia>
 * the benchmarking is also really neat (linked from the top if you refresh a bunch: https://www.quick-bench.com/).. sorry just finding all this stuff

[06:14:19.0513] <yulia>
 * the benchmarking is also really neat (linked from the top: https://www.quick-bench.com/).. sorry just finding all this stuff

[06:21:26.0003] <jonco>
yulia: quick-bench looks nice, I hadn't seen that

[06:27:33.0113] <Benjamin Bouvier>
would have been fun to call it CacheMIR and keep the name Cretonne

[06:28:16.0211] <Benjamin Bouvier>
Spidermonkey, weaving fabric since 1995

[06:28:30.0415] <yulia>
would it be pronounced cashmere? 

[06:28:51.0515] <yulia>
sorry really thick today for some reason

[06:29:34.0040] <Benjamin Bouvier>
yeah 😅 the fact you ask makes me wonder if it might be the french pronunciation

[06:29:44.0943] <yulia>
no no. its good

[06:29:47.0509] <yulia>
im just really thick

[06:29:51.0988] <yulia>
and i support that name

[06:30:10.0433] <yulia>
its one of those days...

[06:31:24.0851] <Benjamin Bouvier>
take care of yourselves 💛

[06:43:42.0914] <yulia>
 * (impressively dumb question) would it be pronounced cashmere? 

[09:19:18.0400] <jonco>
iain: why do we use dynamic slots rather than fixed slots for reg exp match results? https://searchfox.org/mozilla-central/source/js/src/jit/CodeGenerator.cpp#2743-2745

[09:23:57.0624] <mgaudet>
jorendorff: Clang format went a bit bananas, but here's an approach like the one you described in the comment https://phabricator.services.mozilla.com/D86572

Worked out mostly nicely, but I had to do a hack that I don't like to make `#x in #y in o` syntax error. 

Also, read that review request as more of a `f?` -- it's not polished at all, and I'm trying to mostly see if we're on the same page on high level approach

[09:25:56.0565] <iain>
jonco: Hmm, good question

[09:27:07.0577] <iain>
I just went along with the existing code

[09:27:18.0984] <iain>
Let me dig into it and see if I can find where we originally made the decision

[09:32:41.0251] <jonco>
mostly curious, but it would be cheaper to not have to allocate dynamic slots if that's what we're doing

[09:35:38.0720] <iain>
I suspect the answer is "no good reason"

[09:36:08.0666] <iain>
We create the template object here: https://searchfox.org/mozilla-central/source/js/src/vm/RegExpObject.cpp#930

[09:36:22.0845] <iain>
Which was introduced in this patch: https://bugzilla.mozilla.org/show_bug.cgi?id=879402

[09:43:35.0297] <jonco>
iain: oh are these arrays with inline storage?

[09:43:58.0208] <iain>
They're arrays

[09:44:03.0108] <iain>
How would I know if they have inline storage?

[09:46:11.0181] <jonco>
not sure

[09:46:34.0180] <jonco>
ah, we're using NativeObject::offsetOfFixedElements() so that's probably what's happening

[09:47:52.0134] <iain>
Semantically, a results object has three named properties and n+1 indexed elements, where n is the number of capture groups in the pattern

[09:48:53.0430] <iain>
If there's a more efficient way to represent that, I can't think of any constraints that would prevent it

[09:50:12.0526] <iain>
(So long as it's still possible to write jit code to initialize the new representation)

[09:50:34.0847] <iain>
 * If there's a more efficient way to represent that, I can't think of any additional constraints that would prevent us from doing so

[09:56:17.0519] <jonco>
the fact that we've got inline elements means that we can't use that space for slots, so that explains why it's like this I think

[09:56:32.0045] <jonco>
I don't fully understand how we're intiialising the array values

[09:56:32.0470] <iain>
Okay

[09:56:42.0619] <jonco>
but I think it makes sense as it is

[09:57:15.0706] <jonco>
 * I don't fully understand how we're intialising the array values

[10:00:01.0931] <iain>
The initialization of the array values is a bunch of scary code that hand-crafts dependent strings, which I have done my best not to look at

[10:01:00.0295] <iain>
But the high-level version is that the regexp engine gives us back a `(start-index, end-index)` pair for each capture, and we build dependent strings out of those indices and store them in the elements array

[10:02:21.0565] <iain>
If it helps, this code is purportedly doing the same thing as the jitcode: https://searchfox.org/mozilla-central/source/js/src/builtin/RegExp.cpp#44

[10:04:45.0754] <jonco>
thanks

[10:04:52.0496] <jorendorff>
> <@mgaudet:mozilla.org> jorendorff: Clang format went a bit bananas, but here's an approach like the one you described in the comment https://phabricator.services.mozilla.com/D86572
> 
> Worked out mostly nicely, but I had to do a hack that I don't like to make `#x in #y in o` syntax error. 
> 
> Also, read that review request as more of a `f?` -- it's not polished at all, and I'm trying to mostly see if we're on the same page on high level approach

reviewed. looks good!

[10:07:47.0092] <jonco>
iain: yes that helps

[10:08:14.0674] <jonco>
the jit stub only handles matches with up to RegExpObject::MaxPairCount pairs, and stores the elements inline in the object

[10:08:26.0999] <jonco>
so this does make sense

[10:09:11.0184] <iain>
Ah, right, yeah


2020-08-19
[03:21:54.0945] <yulia>
Hey folks, I am out sick for a little while

[03:32:39.0635] <jandem>
hope you feel better soon

[03:59:07.0927] <jandem>
jonco: I'm excited about bug 1635185. Will make it much nicer to optimize slot allocations in the JIT backend in the future (do the slot allocation with the object allocation so adding slots after that will be fast)

[03:59:09.0580] <botzilla>
https://bugzil.la/1635185 — NEW (jonco) — Consider storing an object's dynamic slot count directly in a header

[03:59:34.0933] <jonco>
cool :)

[04:00:16.0951] <jandem>
hm for this we might need a capacity field, but not sure

[04:03:29.0743] <jonco>
oh hm, my plan was mainly to store the capacity

[04:03:42.0331] <jonco>
I might have misunderstood when filing this

[04:04:21.0107] <jonco>
you're talking about tracking the count, so you can get this without doing what NativeObject::slotSpan has to do

[04:04:26.0110] <jonco>
 * you're talking about tracking the count, so you can get this without doing what NativeObject::slotSpan has to do?

[04:05:13.0557] <jonco>
there would be space in a header for both so that part would be ok

[04:06:27.0618] <jandem>
yeah maybe keeping the dynamicSlotCount computation is fine for now and storing capacity is better

[04:09:28.0440] <jonco>
ok I'll send you my patches when I get them working and you can tell me what you think

[05:44:01.0486] <mgaudet>
The patch on [Bug 1659972](https://phabricator.services.mozilla.com/D87585) is a start of giving us a home to write down some of our SpiderMonkey conventions; I *know* there are more; please feel free send ones you know to me. I'll start trying to get them landed (or, once that patch lands feel free to edit after) 

[05:44:03.0373] <botzilla>
https://bugzil.la/1659972 — ASSIGNED (mgaudet) — Start documenting SpiderMonkey Conventions

[06:05:21.0460] <evilpie>
mgaudet: Does that work? I thought we used rst instead of markdown

[06:05:32.0258] <mgaudet>
evilpie: it does :) 

[06:05:33.0234] <evilpie>
and great idea

[06:06:04.0138] <evilpie>
the function signature thing was the first think that came to me as well

[06:06:08.0754] <mgaudet>
Sphinx, the document processor used, AIUI, will process rst or markdown. RST is gently preferred because there's more control, but markdown was quicker for me to write. 

[06:06:16.0877] <evilpie>
 * the function signature thing was the first thing that came to me as well

[06:06:26.0559] <mgaudet>
(we can always pandoc it to rst later if it becomes an issues)

[06:06:28.0810] <mgaudet>
 * (we can always pandoc it to rst later if it becomes an issue) 

[06:06:56.0107] <mgaudet>
> <@evilpie:mozilla.org> the function signature thing was the first thing that came to me as well

Yeah, I realized I couldn't find any documentation of it... which was kind of funny to me.

[06:07:34.0006] <evilpie>
Pure + NoGC are kind of related

[06:14:53.0051] <mgaudet>
Yeah. Another one that popped into mind is the 'having an `AutoAssertNoGC&` param to enforce no GC' 

[06:22:21.0390] <jonco>
mgaudet: I like this idea of documenting conventions

[06:23:12.0045] <jonco>
another one we do is to pass references to lock guards to enforce/document locking requirements

[06:25:47.0260] <jonco>
evilpie: nice 'matrix' avatar

[06:36:17.0505] <froydnj>
https://bugzilla.mozilla.org/show_bug.cgi?id=1659667#c3 🎉

[06:43:37.0751] <mgaudet>
Given a getter property, I suspect (because JS) one can get a handle on the underlying function.... any pointers? (I'm trying to see how to observe said functions `.name` property

[06:43:40.0952] <mgaudet>
 * Given a getter property, I suspect (because JS) one can get a handle on the underlying function.... any pointers? (I'm trying to see how to observe said functions `.name` property) 

[06:46:06.0538] <Ms2ger>
mgaudet: `Object.getOwnPropertyDescriptor(obj, prop).get`

[06:46:56.0828] <mgaudet>
Ms2ger: perfect. 

[06:47:05.0126] <mgaudet>
Thanks! 

[06:47:36.0072] <Ms2ger>
My pleasure

[07:24:11.0586] <Waldo>
https://developer.apple.com/documentation/security/preparing_your_app_to_work_with_pointer_authentication may be of interest to people.

[07:30:30.0366] <Benjamin Bouvier>
nit: preliminary*

[07:45:44.0657] <Waldo>
Function pointer incompatibility is an interesting exploitation of C++ UB, that we have abused in the past (but not now, to my knowledge).

[07:47:25.0732] <froydnj>
xpconnect is basically one giant abuse of that

[07:47:45.0094] <Waldo>
froydnj: I just want to tell you good luck, we're all counting on you.

[07:47:58.0823] <froydnj>
Waldo: lol

[07:48:00.0951] <Ms2ger>
Go back to sleep

[07:48:01.0210] <Waldo>
(I was speaking SpiderMonkey-centrically, of course)

[07:48:13.0175] <Waldo>
lol

[07:51:52.0779] <Waldo>
Note that A->B->A function pointer casting is well-defined, it's just A->B and then call as B that's bad.

[07:52:00.0857] <mgaudet>
nbp (pto until 24/08): https://dl.acm.org/doi/10.1145/1375634.1375649 is the transform; worked on bringing it to production quality during an internship. 

Thinking more on it though; you're right that we have a lot of potential opportunities for things like that in JS engines, though, without unboxed objects the impact is lower IMO

[07:53:48.0693] <froydnj>
mgaudet: is that paper about fancy array-of-structures => structures-of-arrays transforms, some sort of automatic memory pooling based on types, or something else?  the abstract seems opaque to me

[07:53:57.0115] <nbp>
mgaudet: Thanks for the link, that would be the third paper I see on memory optimization that I can think of now.

[07:54:01.0582] <mgaudet>
froydnj: exactly correct

[07:54:42.0927] <mgaudet>
with the additional twist, that it takes arbitrary allocation using malloc, and converts it into pooled allocation so you get to structure-of-array format automatically

[07:55:14.0053] <mgaudet>
powered by a (in hindsight nearly incomprehensible) pointer analysis

[07:55:28.0756] <froydnj>
ok, that seems kind of cool

[07:56:16.0063] <mgaudet>
froydnj: was really cool to work on; but in the absence of profile information effectively useless, because profitability is impossible to estimate statically. And at the time I didn't hook it up to profile information -- I was an intern :P 

[07:57:07.0686] <iain>
It's very 2020 that my response was "oh good, just wildfires"

[07:57:18.0844] <nbp>
My assumption is that as soon as we have allocation sites and hotness through compiled functions & hit counts, we could gather some form of hints on how to reorder data for the next time we load the page.

[07:57:33.0348] <Waldo>
Very California, really.

[07:57:55.0326] <Waldo>
Santa Cruz hills don't have fires quite as often, maybe, but it's not at all uncommon.

[07:58:29.0618] <froydnj>
mgaudet: profile information solves everything

[07:58:36.0627] <nbp>
mgaudet: the 2 other papers that I knew are listed in the references of the paper that you mentioned :)

[07:59:32.0721] <nbp>
one about ordering single linked list, and the other about allocating object of the size of the cache lines.

[08:06:12.0366] <nbp>
jonco: Where is `checkResult` called from in https://phabricator.services.mozilla.com/D86803?

[08:07:16.0552] <jonco>
nbp: oh I think I missed a file from the patch, sorry I'll try and fix

[08:07:42.0949] <sfink>
tcampbell: mconca: Do we have a mechanism, or an external group (eg perf) we could use, to validate whether some random perf issue we're observing might tie into a push/pull concern?

[08:07:54.0239] <sfink>
Example: someone showed up with a game that had a lot of GC pauses, I looked into it some and it seems like there's something going wrong with our GC/CC scheduling.

[08:08:05.0124] <nbp>
jonco: I linked the test case for the bytecode cache in the bug, which is relying on `promise_test` function, I do not know if it will work for you in this mochitest

[08:08:19.0163] <sfink>
It's not simple enough that I can just go fix it, so I'd like to know how to prioritize the work. One random game isn't worth it. To make it into a push factor, I'd have to know whether some class of applications doesn't work as well in Firefox, and additionally that it's a class of apps that people care about. I don't know how to answer that question; I don't happen to play JS games on the web.

[08:08:29.0931] <tcampbell>
sfink: I'm not really sure either

[08:08:31.0421] <sfink>
(Or conversely, how would I know if making these applications run better in Firefox would be a pull factor?)

[08:08:58.0993] <nbp>
jonco: the `WaitForScriptTagEvent` is a nice way to avoid the `setTimeout` ;)

[08:09:37.0850] <sfink>
I have another example where FxR had a use case (that would impact spec work, even) that would require a major enhancement to our nursery collection mechanism

[08:10:02.0221] <sfink>
I'm guessing that the FxR use case isn't too motivating today :-/

[08:10:52.0497] <mconca>
sfink: Good question.  We are working with the Desktop team and User Research to identify top areas.  A single game isn't worth it, like you said, but we might want to target 1) top sites (FB, reddit, others) and 2) top use cases (video playback, etc).

[08:11:32.0443] <mconca>
Personally, I'd really like to narrow it down to something like These-Top-5-Sites, and maybe even as far as On-This-Platform.

[08:12:18.0756] <mconca>
Really create an intense focus in order to substantially move things.  It is hard to boil the ocean.

[08:12:21.0006] <jonco>
nbp: I updated the patch (also includes some other messing around to try to make it work)

[08:13:04.0969] <jonco>
I'll take a look at the test case you posted

[08:16:52.0024] <sfink>
fair enough. Though GC work doesn't often bubble up to be a major factor when looking at a small targeted set of sites. (I mean, people start out thinking it's to blame because any mystery pause is assumed to be GC.) Which is not to say that GC work necessarily has no impact, it's more that it can be harder to see if it's not a simple pause.

[08:19:20.0261] <tcampbell>
I'm still curious if there are meaningful improvemnts to jitcode eviction policy

[08:19:42.0486] <tcampbell>
eg. If I pause for a few seconds, am I likely to have a stall on next keypress

[08:19:45.0773] <nbp>
jonco: the test case I linked worked by following the events which are emitted on the script tags (when `dom.expose_test_interfaces` is set). The -1 setting should remove the need for small scripts https://searchfox.org/mozilla-central/source/dom/script/ScriptLoader.cpp#2678-2704 (however, it is possible this is not used for modules)

[08:21:32.0800] <nbp>
jonco: you should probably look at adding a similar call in the module case: https://searchfox.org/mozilla-central/source/dom/script/ScriptLoader.cpp#2926

[08:22:34.0095] <nbp>
oh … this is not a module case … sorry I confused my-self.

[08:23:59.0702] <tcampbell>
module case doesn't currently support bytecodecode. We have a lot of the machinery in-place these days, but the work kind of got stalled waiting to see how stencil plays out.

[08:25:29.0997] <tcampbell>
We have a prototype of XDR `CompilationStencil` that should make it be it possible to have module caching in near future :)

[08:26:03.0039] <nbp>
jonco: This is how events are raised on the script tags to report the status of the bytecode-cache: https://searchfox.org/mozilla-central/search?q=TRACE_FOR_TEST

[08:27:07.0970] <jonco>
nbp: it's not actually the module that's the problem, it's when a script is loaded from the cache that then import()s a module

[08:27:28.0340] <jonco>
oh, you saw that already

[08:42:13.0403] <iain>
(Watching the Zoom call and trying to follow the backchannel discussion in Slack, it occurs to me that "make Slack fast" is another potential project)

[08:47:30.0418] <tcampbell>
Ugh.. the slack deadlock because of layout size precision causing infinite rerendering was super annoying

[08:50:37.0097] <jonco>
sfink: ping

[09:40:53.0675] <nbp>
jorendorff: Thanks for reviewing Bug 1654696

[09:40:56.0940] <botzilla>
https://bugzil.la/1654696 — RESOLVED (ewlsh) — js::GetCodeCoverageSummary always hits release assert

[09:44:46.0232] <jorendorff>
sure, np

[10:34:40.0061] <nbp>
https://twitter.com/JSKongress/status/1293178613647519744 yulia are you going there?

[10:36:34.0694] <jandem>
Yulia and iain I think 

[10:48:28.0789] <iain>
Yep

[13:23:24.0292] <jorendorff>
avandolder: I found out how to do this, after we decided it wasn't necessary for the static methods patch https://gist.github.com/jorendorff/bf8b03a75b438d5e29e903829cddb91b

[13:26:23.0249] <avandolder>
Ah, that does make sense


2020-08-20
[19:30:19.0147] <Waldo>
Ugh, this is going to be ghastly.

[01:58:26.0290] <nicolo-ribaudo>
Hi 👋
I'm trying to update my local clone of mozilla-central with git-cinnabar from https://phabricator.services.mozilla.com/source/mozilla-central/history/default/, but `git pull` doesn't download the last ~150 commits. Could this be a local caching issue? (I'm in the `branches/default/tip` branch locally)

[02:00:10.0269] <lth>
what happened to js.msg?  i appear not to have gotten the memo...

[02:00:58.0718] <lth>
hm ok

[02:16:42.0945] <jandem>
nicolo-ribaudo: that Phabricator page isn't the actual mozilla-central, it also shows commits that are only on autoland (the integration tree that's merged to mozilla-central about twice a day)

[02:17:16.0270] <jandem>
see https://treeherder.mozilla.org/#/jobs?repo=mozilla-central&group_state=expanded for the commits that have been merged to central

[02:17:27.0099] <nicolo-ribaudo>
> <@jandem:mozilla.org> nicolo-ribaudo: that Phabricator page isn't the actual mozilla-central, it also shows commits that are only on autoland (the integration tree that's merged to mozilla-central about twice a day)

Ok thanks for the info!

[06:47:23.0928] <jorendorff>
current status: monkeypunched https://searchfox.org/mozilla-central/search?q=monkeypunched

[06:48:51.0832] <jorendorff>
one of the changes I made causes a vmfunction to be called with a completely bogus `BaselineFrame*`, bisecting :-\

[06:49:33.0157] <jorendorff>
my stack has a few intermediate states that are definitely nonsense

[06:50:05.0304] <jorendorff>
so bisecting may not be the best plan, but it's a handful of patches, so it's at least quick

[07:23:33.0912] <avandolder>
mgaudet: would you be able to meet with me and Jason some time today to talk a bit about Bug 1647437?

[07:23:37.0203] <botzilla>
https://bugzil.la/1647437 — NEW (nobody) — Allow accessing private fields via Debugger.Frame.prototype.eval

[07:40:41.0389] <mgaudet>
avandolder: Absolutely

[07:41:26.0085] <mgaudet>
When works for the two of you ( jorendorff / avandolder ) -- my calendar is relatively clear today

[07:41:44.0034] <jorendorff>
how about in the afternoon

[07:42:04.0796] <jorendorff>
1PM Central / 2PM Eastern?

[07:42:50.0592] <mgaudet>
I think that's noon/lunchtime for me

[07:43:00.0972] <mgaudet>
does an hour earlier work?

[07:43:11.0610] <jorendorff>
oops

[07:43:25.0038] <jorendorff>
an hour earlier works for me

[07:43:50.0594] <avandolder>
Sounds good to me

[07:44:05.0194] <mgaudet>
(erm -- that puts it into the noon slot for you Jason; sorry about that; does that still work?) 


[07:44:32.0443] <jorendorff>
an hour later would be better than an hour earlier, so 1PM/2PM/3PM

[07:44:43.0925] <jorendorff>
how's that?

[07:44:52.0945] <mgaudet>
Still good by me

[07:44:59.0746] <jorendorff>
ok, changing it to that :)

[08:12:11.0192] <jonco>
jandem: thanks for the reviews, working on storing slot span in the header too

[09:01:53.0590] <jandem>
jonco: ah great

[09:04:48.0601] <jonco>
sfink: sorry I meant to ask you yesterday - can you make the performance meeting later?

[09:05:05.0006] <sfink>
yes, no problem

[09:05:55.0121] <jonco>
cool :)

[10:00:17.0023] <jorendorff>
mgaudet: avandolder Heyyyyy, can we push our meeting back another 30 minutes?

[10:00:37.0616] <mgaudet>
works for me

[10:00:53.0692] <jorendorff>
ok, will optimistically assume it works for Adam and change the meeting notice

[10:01:12.0782] <jorendorff>
tx

[10:42:58.0956] <mgaudet>
confession: Professional Development - learning about async JS programming: Promises, async await etc. 

[10:43:03.0939] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[10:46:25.0542] <Waldo>
Do we have good demos/docs about how to make a C++ object hold onto/trace a JS value anywhere?  I'm somewhat scrounging up `JS::Heap` and other random uses from the tree right now.

[10:47:36.0132] <mgaudet>
Waldo: https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr68/docs/GC%20Rooting%20Guide.md#general-classesstructures 

[10:49:10.0341] <Waldo>
Mm, that may be enough for this.  Thanks!

[10:49:42.0825] <Waldo>
mgaudet: Although, are there any complexities I need to consider if the value/object I need to keep alive/trace is potentially a cross-compartment wrapper?

[10:49:53.0529] <jonco>
Waldo: https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Interfacing_with_the_XPCOM_cycle_collector ?

[10:49:57.0758] <Waldo>
(yes I have the worst taste in this)

[10:50:16.0488] <Waldo>
jonco: In my case my `mozilla::dom::AbortFollower` subclass is not an XPCOM object.

[10:50:28.0141] <mgaudet>
erm. I don't *think* so, but would defer to jonco 

[10:53:33.0287] <Waldo>
mgaudet, jonco: If you want to weep some, https://paste.rs/Vz9.diff sketches out an outline of what I'm doing (tho it's possibly still too outline-y to really convey the full eldritch horror, unless you are me).

[10:55:41.0181] <Waldo>
The `JS::MakeAbortAlgorithm makeAbortAlgorithm` near the end of that patch is eventually going to `new` up an instance of `class AbortAlgorithmFollower : public dom::AbortFollower { JS::Heap<JSObject*> state; ... }` more or less, and it's going to need `state` to invoke `JS::RunAbortAlgorithm`, and it's going to need to trace it when `JS::TraceAbortAlgorithm traceAbortAlgorithm` is called.

[10:57:18.0840] <Waldo>
My plan is during `pipeTo` to store an `AbortAlgorithmFollower*` in a private slot in the `state`, `PipeToState` will have to manually trace it by calling the embedder-supplied hook.  DOM code will be responsible for invoking the follower whenever needed.

[10:57:41.0231] <Waldo>
Also I guess that patch is missing some sort of `DeallocateAbortAlgorithm` hook.

[11:09:41.0977] <jonco>
wow that sounds complicated

[11:10:03.0946] <Waldo>
> <@waldo:mozilla.org> Ugh, this is going to be ghastly.

^

[11:10:08.0576] <jonco>
Waldo: a CCW will handle the complexity for you, mostly

[11:11:44.0381] <Waldo>
jonco: I may not be able to guarantee the stored `JSObject*` is always (or always not) a CCW.  Unfortunately, DOM `AbortSignal` and `AbortFollower` are C++, and I think the abort algorithms can be invoked from any realm.  😒

[11:12:16.0362] <Waldo>
jonco: I can have `JS::RunAbortAlgorithm` maybe class-check or something and unwrap into a specific realm, at least, tho, to hide this madness from the embedder.

[12:36:08.0119] <lth>
sfink++ for revealing how to get the IRC layout...

[12:36:51.0460] <sfink>
Heh. I had gotten used to the native layout when they added that, and had to go through a period of adjusting back.

[12:36:58.0394] <sfink>
but now I officially prefer the IRC layout

[12:36:58.0484] <Waldo>
lth: Did you find `js/public/friend/ErrorNumbers.msg` with `hg log`, or what?

[12:37:09.0794] <lth>
searchfox, i think

[12:37:23.0358] <Waldo>
I could quibble a little with the IRC layout (and did, in #synchronicity:mozilla.org), but it's adequate.

[12:37:38.0771] <Waldo>
Note that you can resize the amount of space dedicated to nicks.

[12:37:53.0810] <sfink>
ooh

[12:38:20.0330] <Waldo>
That was my first grump, then they told me.  :-)

[13:40:07.0728] <mgaudet>
(this may be a question where I ought to wait for Yulia, who just went through this I'll bet, but) If someone were trying to get started understanding our our async/await implementation is designed, do we have good places to start looking? or am I best served by understanding the bytecode


2020-08-21
[23:55:38.0931] <Waldo>
For anyone who wants to see what the link above has metastasized into, https://paste.rs/49J.diff is...well, at least a lot more fleshed out, even if there are some corner cases that I am utterly unsure I'm handling right.

[23:56:45.0376] <Waldo>
...and I guess there's some obvious detritus in there as well, but that patch (or at least that patch before minor local tweaks) actually built.

[00:06:35.0505] <Ms2ger>
/me coughs

[00:09:38.0899] <Waldo>
Hey, it's like barely morning right now.

[01:48:20.0013] <Waldo>
confession: Nothing better than stumbling into rat's nests of complexity past end of day.

[01:48:23.0981] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[01:48:33.0055] <Waldo>
And with that, g'morning.

[05:20:46.0724] <jonco>
bradwerth: ping

[09:12:50.0590] <mgaudet>
jorendorff: Are you around today? 

[09:12:58.0680] <jorendorff>
yep

[09:15:58.0137] <mgaudet>
KK. I'd like to chat with you and avandolder about how we want to proceed on private methods / private fields/ shipping if you don't mind?

[09:16:18.0243] <jorendorff>
mgaudet: hey, i had a question. what is the motivation behind bug 1659595?

[09:16:22.0026] <botzilla>
https://bugzil.la/1659595 — NEW (mgaudet) — Avoid creating atoms for BigInt property names

[09:16:38.0277] <jorendorff>
from the bug it seems like it's parser-atom compatibility, but i don't understand the issue

[09:20:22.0632] <mgaudet>
jorendorff: so, when you have a property name directly, we atomize it. But we'd like to avoid implementing a BigInt text -> ParserAtom algorithm; one relatively nice way of doing that is rewriting the bigint properties as computed; then, the bigint is only synthesized at stencil init time

[09:22:12.0527] <jorendorff>
oh, gross!

[09:22:52.0428] <mgaudet>
yeah

[09:22:55.0028] <mgaudet>
... yeah. 

[09:25:58.0864] <mgaudet>
avandolder / jorendorff sent an invite for same time as yesterday's chat; lemme know if it doesn't work and we can reschedule for Monday or later

[09:48:50.0851] <jorendorff>
will be there

[10:01:27.0886] <mgaudet>
jorendorff: not so much for today, but do you know who'd be the best person to give a high level overview of our async/await implementation? 

[10:03:18.0382] <jorendorff>
mgaudet: I would have said you.

[10:03:33.0123] <jorendorff>
or evilpie or arai or me, i guess?

[10:03:36.0659] <mgaudet>
hahahaha O.o 

[10:04:09.0406] <mgaudet>
is there anything written down? (I imagine I'm treading in Yulia's footsteps right now) 

[10:04:42.0111] <mgaudet>
Or does our implementation mostly just follow the spec, and I ought to put that together? 

[10:04:46.0646] <jorendorff>
Yulia is actually a great person to ask, honestly

[10:05:29.0254] <arai>
unfortunately, some spec sections are split into multiple places

[10:06:34.0960] <jorendorff>
 I don't think there is any documentation, certainly not for async generators—the spec itself is also difficult

[10:06:54.0976] <tcampbell>
/me eagerly awaits the presentation that mgaudet will inevitably be guilted into giving

[10:07:07.0436] <mgaudet>
I was just thinking

[10:07:11.0793] <mgaudet>
I'd best get my notes in shape

[10:07:19.0763] <tcampbell>
something something unless he rejects that promise

[10:08:07.0444] <tcampbell>
hopefully before the next turn of the mozilla event loop

[10:13:06.0485] <bradwerth>
jonco: Heya, just trying my hand at threading fixes in Bug 1559660. I'm happy to defer to anybody else who's working on it.

[10:13:10.0327] <botzilla>
https://bugzil.la/1559660 — NEW (nobody) — Divert JS offthread tasks to use XPCOM thread pool when the runtime hook is present

[10:13:24.0644] <jonco>
bradwerth: hey!

[10:13:52.0394] <jonco>
yeah sorry about that, and thanks for getting involved

[10:14:25.0871] <bradwerth>
jonco: Sure thing. I'd be happy to help on other thread-related stuff that might be open.

[10:15:14.0699] <jonco>
bradwerth: great, I'll let you know if something comes us

[10:15:20.0464] <jonco>
 * bradwerth: great, I'll let you know if something comes up

[10:15:57.0484] <tcampbell>
jorendorff: We are planning on flipping the frontend over to ParserAtoms on Monday after merge. Ideally we'd hold off for a day or two on frontend changes to make sure nothing blows up. If we end up needing to backout the ParserAtoms stuff the process is going to bring us to inner circle of merge-conflict hell. Do you have any frontend changes planned for early next week?

[10:16:04.0857] <arai>
/me starts writing SMDOC for async function impl

[10:16:21.0812] <jorendorff>
tcampbell: nothing I can't rebase, go for it

[10:17:02.0508] <sfink>
Yoric++

[10:17:04.0869] <sfink>
great article

[10:21:49.0251] <jorendorff>
mgaudet: the first things to know about are generators, and that begins like: layout of AbstractGeneratorObject, what is a resume index, the InitialYield/Yield/Await/AfterYield/Resume/FinalYieldRval opcodes. The comments in Opcodes.h are documentation of a sort.

[10:22:15.0057] <sfink>
I think we really need a set of canonical articles that explain major decisions. Right now, we try to fight back against FUD one fragment of an argument at a time.

[10:22:38.0027] <mgaudet>
jorendorff: Yeah starting at generators is the right choice

[10:22:40.0021] <sfink>
going further, I really wish we could adopt Rust's "no new justifications" rule, but I'm guessing that'd be a harder sell

[10:23:55.0680] <jorendorff>
sfink: what article?

[10:24:09.0396] <mgaudet>
jorendorff: https://yoric.github.io/post/why-did-mozilla-remove-xul-addons/ 

[10:24:49.0006] <iain>
 sfink "no new justifications"?

[10:25:04.0878] <sfink>
uh, let me try to dig up a link for that, I won't do it justice

[10:27:31.0181] <mgaudet>
sfink: to help you find the link you're looking for, IIRC it's 'no new rationale' not no new justification

[10:27:45.0490] <sfink>
aha, thanks

[10:28:46.0490] <sfink>
http://aturon.github.io/tech/2018/05/25/listening-part-1/ is one source

[10:28:58.0713] <iain>
Found it, thanks

[10:51:26.0060] <evilpie>
jorendorff: mgaudet haha I actually don't know either how it works

[10:51:35.0705] <evilpie>
I suspect arai and anba do

[11:09:23.0166] <tcampbell>
jorendorff: ping? (or can cancel..)

[11:09:46.0941] <jorendorff>
tcampbell: ack, let's cancel. too many code reviews pending

[11:09:56.0044] <jorendorff>
mgaudet: more elements: the TrySkipAwait optimization, how the next/throw/return methods are implemented, the purpose of [[AsyncGeneratorQueue]], how we implement it

[11:10:49.0043] <jorendorff>
mgaudet: beyond that, ISTM there's mainly just the implementation in BaselineCodeGen, which people can go read if they want...?

[11:55:55.0176] <arai>
mgaudet: jorendorff here's WIP patch with some documentation  https://phabricator.services.mozilla.com/D87896

[11:56:16.0597] <jorendorff>
that's weird, i don't have access to read it

[11:57:14.0175] <arai>
what

[11:58:24.0238] <iain>
Once I had a similar problem because I had a typo in the bug number that collided with a sec bug

[11:59:05.0763] <evilpie>
I had the bot that unrestricts not work before too

[11:59:30.0127] <arai>
the bot has just removed the sec tag

[11:59:35.0139] <arai>
now it should be visible

[12:00:30.0642] <arai>
TIL, I shouldn't post phab URL before getting an email about the revision creation

[12:13:54.0092] <jorendorff>
sfink: do we really need the readStringLatin1 one then?

[12:14:24.0567] <sfink>
jorendorff: my impression is yes? It sounded like the whole setup was based on strings currently.

[12:17:30.0373] <jorendorff>
well, but it seemed like the "correct" answer was ctypes array -> Uint8Array -> TextDecoder

[12:19:06.0250] <sfink>
I don't know this TextDecoder. If that is a thing, then I would be fine not having readStringLatin1

[12:19:07.0625] <jorendorff>
...or wait ...i guess there is no correct answer, short of downstream changes

[12:19:27.0815] <jorendorff>
oh, TextDecoder certainly exists

[12:19:44.0077] <jorendorff>
KaiE: ping

[12:21:40.0437] <jorendorff>
ok, so decryptedData is supposed to be 8-bit data, but stored in a string :-P

[12:22:07.0440] <sfink>
but does it support an identity encoding that doesn't muck with NULs?

[12:22:20.0237] <jorendorff>
mmm, don't know

[12:22:26.0448] <mgaudet>
arai: this looks great -- and comprehensive. I appreciate it hugely :) 

[12:22:28.0234] <sfink>
(Though even mismanaging NULs wouldn't make it any worse than readStringLatin1)

[12:22:53.0715] <sfink>
I do know that for this particular use, NULs are not a problem

[12:23:01.0670] <evilpie>
btw it sounds like they tried TextDecoder: https://bugzilla.mozilla.org/show_bug.cgi?id=1659443#c5

[12:24:38.0444] <evilpie>
mhm "utf-8" must be wrong

[12:24:47.0310] <sfink>
I don't think so. It was a suggestion, but they have no way of getting a UintArray in the first place.

[12:25:15.0261] <sfink>
 * I don't think so. It was a suggestion, but they have no way of getting a Uint8Array in the first place.

[12:25:30.0693] <evilpie>
So we only convert from Uint8Array to ctypes?

[12:26:22.0602] <sfink>
right now, we only convert from  `ctypes.uint8_t.array()`, I think

[12:26:50.0888] <sfink>
well, `ctypes.uint8_t.ptr()`

[12:27:08.0214] <sfink>
as per comment 6

[12:27:45.0244] <sfink>
and https://encoding.spec.whatwg.org/#label doesn't seem to have any useful encoding, though perhaps we support more than the 3 it requires

[12:29:20.0065] <evilpie>
`var decoder = new TextDecoder("latin1");` seems to work (https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/TextDecoder)

[12:30:03.0425] <sfink>
hm, yeah, I traced to https://searchfox.org/mozilla-central/source/third_party/rust/encoding_rs/src/lib.rs#2157

[12:31:02.0749] <sfink>
so assuming that does what is expected, then dropping the `readStringLatin1` patch seems fine

[12:32:05.0132] <sfink>
the other patch is a little more sketchy, though. It mostly keys off of size to pick the right typed array variant.

[12:34:27.0517] <evilpie>
I think hardcoding some ctypes -> typed array mappins would be fine

[12:35:13.0056] <sfink>
yeah. It'd be a somewhat less satisfying patch, but more practical perhaps. I'll see what jorendorff says.

[12:47:23.0739] <KaiE>
jorendorff: if there is another syntax that could be used for efficient conversion, I'm fine to use it. But I couldn't figure out how to do it.

[12:50:06.0917] <KaiE>
a conversion that works without that new API would be preferred - because we'd like to use it on esr78

[12:51:23.0511] <sfink>
I don't think jorendorff is suggesting such a thing; I think this is more about which patch(es) of the two I posted to accept.

[12:51:38.0638] <KaiE>
sfink: ok thanks. I wasn't sure why I was pinger.

[12:51:44.0091] <KaiE>
 * sfink: ok thanks. I wasn't sure why I was pinged.

[12:52:03.0115] <sfink>
he probably wants to know details of your use case

[12:54:08.0043] <KaiE>
jorendorff: we have preexisting code, which was previously an Add-on, and which we have ported to an integrated feature. It was a lot of work, as we had to change what external library we're using. We barely were ready in time to deliver the feature for 78.x (because the old Add-on will no longer be usable with 78.x). All that code is organized to work with strings. And it needs to transport non-UTF-8 bytes in strings across modules.

[12:54:37.0779] <KaiE>
We cannot easily change that whole code on stable 78.x branch to reorganize that. But we need to support Thunderbird 78.x with that existing code for at least one year from now.

[12:54:51.0528] <sfink>
with the 2nd patch, I think it would work pretty much the same way, except it would be done as `var decoder = new TextDecoder("latin1"); decoded = decoder.decode(data.readTypedArray())`

[12:54:54.0661] <KaiE>
And unfortunately that code is currently slow with big email attachments.

[12:55:21.0071] <KaiE>
sfink: I'm happy to try your 2nd patch, I had not seen it yet.

[12:58:45.0671] <sfink>
ooh, it seems a little better, even -- zeroes are preserved by the decoder.

[12:59:10.0713] <sfink>
`new TextDecoder("latin1");
decoder.decode(new Uint8Array([65, 66, 0x81, 0, 180])).charCodeAt(4)` works when I try it in the console.

[13:00:13.0225] <sfink>
oh. I should read my email. He accepted the 2nd patch with a couple of fixes.

[13:09:30.0883] <KaiE>
sfink: how do I go from ctypes.uint8_t.array to Uint8Array ?

[13:10:55.0078] <tcampbell>
(in my opinion asking for the `readStringLatin1` patch to uplift to ESR is quite reasonable. It is low risk, not-content-facing, and changes nothing that firefox depends on)

[13:19:18.0813] <KaiE>
tcampbell: It sounds like the readStringLatin1 patch is not being accepted, but rather an alternative solution is being discussed - but I don't understand yet how to use the alternative solution - sfink showed above how to convert from Uint8Array to a string - but I don't understand yet how that helps me - because my starting point is ctypes.uint8_t.array - and I don't know how to convert ctypes.uint8_t.array to Uint8Array

[13:20:51.0992] <tcampbell>
Ah, Bug 1659801 

[13:20:53.0306] <botzilla>
https://bugzil.la/1659801 — ASSIGNED (sfink) — Implement a CTypes readTypedArray() for CData and CDataFinalizer

[13:22:26.0976] <tcampbell>
That patch introduces an API to convert `ctypes.uint8_t.array` to `Uint8Array`. (And probably same argument applies that it could be uplifted)

[13:23:34.0756] <tcampbell>
(I guess this is a fraction riskier, but if nightly doesn't blow-up, that is probably good evidence)

[13:38:16.0956] <arai>
I wonder if performing `memmove` with js-ctypes from ctypes array to TypedArray buffer works on unpatched tree :P

[13:44:19.0139] <arai>
(the pointer retrieval/calculation part would be super hacky tho

[13:49:48.0179] <Waldo>
jandem, jonco: Looking at https://phabricator.services.mozilla.com/D87889 now, does `BaseShape` no longer contain the `parent` pointer that's present in `JS::shadow::BaseShape`?  Worth removing it if so, in that rev or another.

[13:58:03.0662] <sfink>
sorry, was at lunch

[13:58:26.0436] <sfink>
KaiE: yes, the other patch adds a `readTypedArray()` similar to the `readStringLatin1` in the patch you've been using.

[13:59:33.0720] <sfink>
so my example above would first do `data = result.readTypedArray()` or similar.

[14:01:08.0943] <sfink>
arai: I didn't think ctypes ever exposed the data pointer to a buffer from a typed array?

[14:01:19.0974] <KaiE>
tcampbell: sfink ok I see! (I had not seen that bug number previously)

[14:01:28.0551] <sfink>
oh, sorry

[14:02:29.0257] <arai>
sfink: it doesn't

[14:03:39.0508] <sfink>
oh, you'd get a pointer to the typed array or its arraybuffer and dereference it at some offset or something?

[14:03:53.0386] <sfink>
that would be pretty awesome. And horrible.

[14:20:28.0496] <mconca>
Both Blink and WebKit are moving to ship Intil.Segmenter:  https://groups.google.com/a/chromium.org/g/blink-dev/c/MJ1OpvkcA8s

[14:23:29.0402] <mconca>
 * Both Blink and WebKit are moving to ship Intl.Segmenter:  https://groups.google.com/a/chromium.org/g/blink-dev/c/MJ1OpvkcA8s

[14:23:59.0036] <jonco>
Waldo: thanks, will do


2020-08-24
[18:18:10.0023] <arai>
can single JSRuntime be referred from multiple thread?

[18:36:31.0752] <Waldo>
No. 

[18:38:11.0480] <arai>
thanks :)

[01:16:14.0567] <Benjamin Bouvier>
there's this [super useful comment](https://searchfox.org/mozilla-central/source/js/src/jsapi.h#203) about that, that i go read every 6 months or so

[01:44:41.0438] <annevk>
Seems that could use an update now that https://bugzilla.mozilla.org/show_bug.cgi?id=1357862 is fixed...

[01:50:08.0081] <annevk>
https://bugzilla.mozilla.org/show_bug.cgi?id=1523843#c3 is also interesting as I'm guessing that means Compartments are not equal to agents (those do go across tabs). (And the talk about same-origin is somewhat confusing as I thought we made Compartment more aligned with the document.domain boundary, which is wider.)

[01:55:36.0054] <jandem>
yeah we moved from "compartment per global" to "compartment per origin" but there are some caveats. `document.domain` is annoying because different compartments can become same-origin but at that point it's too late to change the compartments, so we still have transparent wrappers there

[01:58:11.0788] <jandem>
"compartment per site (eTLD+1)" would be an option but we're not doing that right now

[01:59:34.0834] <jandem>
 * yeah we moved from "compartment per global" to mostly "compartment per origin". `document.domain` is annoying because different compartments can become same-origin but at that point it's too late to change the compartments, so we still have transparent wrappers there

[05:17:14.0610] <Yoric>
sfink: Thanks for the reinforcements  on HN, btw!

[05:19:29.0196] <annevk>
jandem: thanks, so sounds like currently we have (mostly) compartment per origin per tab/top-level browsing context (for contrast, agent is per-site per tab group/browsing context group)

[05:25:50.0688] <jandem>
annevk: yes that sounds right

[05:30:08.0707] <jandem>
 * annevk: yes that sounds right (I also posted a patch to fix the SMDOC comment)

[11:53:00.0578] <jorendorff>
What does JitActivation::jsExitFP point to (when valid)?

[11:53:28.0283] <jorendorff>
oh, it's an ExitFrame

[11:54:03.0715] <jorendorff>
i wonder

[12:05:46.0552] <jorendorff>
ok, what writes this frame before jumping to the C++ function (the target of the vmcall)?

[12:07:58.0439] <jorendorff>
also, would it be wrong for `JitActivation::jsExitFP()` to return a `js::jit::ExitFrameLayout*`?

[12:09:55.0952] <jorendorff>
ok, looking at the uses, it seems like the method is sometimes called when the stack is in between states and the invariant doesn't hold

[12:12:29.0765] <sfink>
Yoric: ping (about browser shutdown APIs)

[12:13:11.0397] <sfink>
I keep neglecting to get in touch with European timezone people until much too late

[12:14:30.0027] <tcampbell>
(I get myself hopelessly lost with our frame layout and am never sure if the current, outer, or inner frame's type influences a given aspect of layout.)

[12:19:49.0532] <Yoric>
sfink: Can we postpone this to tomorrow?

[12:19:58.0849] <sfink>
Yoric: yes

[12:20:14.0508] <Yoric>
Then I'll get back to my slumber :)

[12:20:53.0453] <sfink>
slumber well

[14:38:22.0893] <mconley>
tcampbell: Hey - still around?

[14:40:18.0879] <tcampbell>
mconley: fading fast so no. I can make time tomorrow though

[14:40:36.0436] <mconley>
Oh, no worries - maybe I'll just ask the channel in general and try my luck

[14:40:49.0068] <mconley>
have a good night!

[14:41:35.0146] <mconley>
My question: we have this structure in Stopwatch.cpp which is a JSObject* - https://searchfox.org/mozilla-central/rev/19c23d725f27d0989e4a60f36d64004cebb39736/toolkit/components/telemetry/core/Stopwatch.cpp#168. It's actually a JS MapObject, if you look at where it's initialized on line 188

[14:41:57.0678] <mconley>
Is there a convenient way for me to iterate the entries of that map from C++? If so, is there an example I can look at?

[14:43:40.0245] <tcampbell>
/me points in direction of sfink 

[14:46:33.0758] <sfink>
whoo boy. I'm guessing it's not going to be pretty.

[14:46:58.0820] <sfink>
It looks like you'd want to do something like https://searchfox.org/mozilla-central/source/js/src/builtin/MapObject.cpp#1795

[14:48:33.0739] <mconley>
so I guess this isn't a thing we do often

[14:48:38.0639] <sfink>
Hm, or I guess these examples are probably most relevant: https://searchfox.org/mozilla-central/search?q=symbol:_ZN2JS10MapEntriesEP9JSContextNS_6HandleIP8JSObjectEENS_13MutableHandleINS_5ValueEEE&redirect=false

[14:48:51.0961] <mconley>
ah, generated code

[14:48:53.0555] <sfink>
/me tries to figure out what those are doing

[14:49:34.0540] <iain>
Looks like they create a MapIteratorObject: https://searchfox.org/mozilla-central/source/js/src/builtin/MapObject.h#188

[14:49:43.0074] <mconley>
look related to `maplike` in WebIDL: https://searchfox.org/mozilla-central/search?q=maplike&path=.webidl&case=false&regexp=false

[14:49:50.0848] <sfink>
within spidermonkey, this wouldn't be too bad at all. You'd extract out the actual table, and it has a decent interface. But I don't think any of that is exposed.

[14:51:12.0641] <sfink>
yeah, it seems like you can pass your Map `JSObject*` to `JS::MapEntries` and get back an iterator value, and then you're stuck with going through its protocol.

[14:52:03.0919] <mconley>
so it looks like what these generated functions do is grab the entries and expose it to the caller, which is presumably also JS

[14:53:12.0855] <sfink>
grab an iterator over those entries, yes

[14:53:39.0597] <sfink>
and currently the only caller I see of `MapIteratorObject::next` is our self-hosting code

[14:53:54.0301] <sfink>
but it looks like it might not be *too* horrible to use

[14:54:00.0377] <mconley>
I feel like an astronaut, this is great

[14:54:20.0103] <sfink>
plunging into the sun

[14:54:33.0281] <mconley>
my body is ready

[14:54:43.0408] <sfink>
I guess the short answer is: "no, we don't have a nice way of doing this from C++"

[14:56:12.0410] <sfink>
but it does seem to be possible. Call `MapEntries` to get an iterator, create a 2-element ArrayObject, pass it repeatedly to `next` to grab out an entry at a time.

[14:56:31.0913] <mconley>
Okay, that sounds possible

[14:56:34.0969] <mconley>
Thank you

[14:56:36.0503] <mconley>
 * Thank you!

[14:57:23.0835] <yozaam>
I am a newbie here, I am just studying the spidermonkey docs -> what is js/src/frontend doing? And where can i learn more about the terminology like self hosted function etc

[14:57:45.0129] <sfink>
oh, and to create that 2-element ArrayObject, you can use `MapIteratorObject::createResultPair`

[14:57:57.0031] <mconley>
ah, danke

[14:58:16.0604] <sfink>
though... is there any way to *not* do any of this? As in, somehow go through WebIDL?

[14:58:53.0831] <mconley>
yeah, I actually think I'm going to try going a different tack here

[14:58:57.0760] <mconley>
like, I value what I've learned here

[14:59:03.0594] <mconley>
but I'm going to see if I can muster something simpler

[14:59:52.0483] <iain>
yozaam: js/src/frontend is where the parser lives. It takes JS source code and turns it into our internal bytecode representation

[15:00:39.0295] <yozaam>
iain:  oh okay, is there some doc to read all this? I read the internals page 

[15:00:43.0902] <iain>
One place to look for explanations is the `[SMDOC]` comments scattered throughout the code: https://searchfox.org/mozilla-central/search?q=%5Bsmdoc%5D&path=

[15:01:17.0214] <yozaam>
oh, thank you i did not actually think of reading the source code, I will do that

[15:01:25.0081] <iain>
I'm not really aware of any documentation we've written about self-hosting

[15:01:38.0595] <Waldo>
Self-hosting is largely a just-so setup.

[15:01:54.0590] <yozaam>
i did not find this on google also ... self host

[15:02:16.0622] <yozaam>
i will read the smdoc lines in the code for now

[15:02:30.0531] <iain>
There are some resources here: https://mgaudet.github.io/SpiderMonkeyBibliography/

[15:03:05.0973] <iain>
Self-hosting is basically the idea that some parts of SpiderMonkey are implemented in JavaScript

[15:03:15.0633] <yozaam>
ohhhhhhhhhhh 

[15:03:17.0828] <yozaam>
got it

[15:03:27.0061] <sfink>
(beware: it's a lie)

[15:03:43.0421] <sfink>
as in, the JavaScript used in the self-hosted code looks very little like "real" JS

[15:03:54.0965] <sfink>
eg you can't call a function directly, you have to go through a helper, etc.

[15:04:03.0200] <yozaam>
i have not read the dragon book, is that okay? i know about basic compilers from uni like 2pass and all the steps

[15:04:22.0740] <Waldo>
Also it is very easy to do things that "look" like JavaScript in it, that are wildly unsafe except if done with extreme care.

[15:04:36.0288] <sfink>
the dragon book is good, but it would be of little use deciphering spidermonkey

[15:04:48.0539] <iain>
Traditional compiler knowledge is actually a surprisingly small fraction of understanding a JS engine

[15:04:48.0611] <sfink>
 * the dragon book is good, but it would be of little use in deciphering spidermonkey

[15:05:21.0933] <yozaam>
ohh okay, so i will read the smdocs and MDN only

[15:05:41.0068] <iain>
Here's an example of what self-hosted code looks like: https://searchfox.org/mozilla-central/source/js/src/builtin/Array.js

[15:06:18.0814] <iain>
It's JS, but it's weird JS and it has access to a bunch of functions that aren't exposed to regular JS

[15:06:51.0024] <yozaam>
yes that context part

[15:06:59.0842] <yozaam>
call a function through a call function

[15:07:01.0775] <iain>
Have you seen Compiler Compiler? It's a twitch stream / series of videos put together by one of our colleagues

[15:07:03.0721] <yozaam>
i read that

[15:07:18.0569] <yozaam>
> <@iain:mozilla.org> Have you seen Compiler Compiler? It's a twitch stream / series of videos put together by one of our colleagues

I am watching side by side, i saw part 1 today l

[15:07:29.0115] <yozaam>
and built the shell

[15:07:54.0088] <yozaam>
thank you iain sfink Waldo 

[15:08:05.0377] <iain>
You're welcome!

[15:11:12.0126] <mconley>
sfink: You're certain that `MapIteratorObject::createResultPair` is something I can call from outside of SpiderMonkey code?

[15:11:21.0587] <mconley>
I doesn't _seem_ like it's exposed anywhere, but I might be missing it

[15:13:55.0621] <iain>
mconley: You appear to be correct

[15:14:34.0132] <mconley>
this also suggests to me that calling `next` on it is then going to be pretty tricky, and I might be SOL

[15:15:05.0924] <iain>
Well, the set of things that is exposed can be expanded

[15:16:39.0565] <sfink>
oh, ugh, you're right. It looks like none of this stuff is particularly exposed. It seems like you'd have to do method invocations and things.


2020-08-25
[01:12:06.0968] <evilpie>
sfink: mconley I think you can use the `ForOfIterator` on the result of MapEntries: https://searchfox.org/mozilla-central/source/js/public/ForOfIterator.h

[01:16:21.0651] <evilpie>
Btw. Now that the whole MDN team was fired, it would be good if we tried to maintain some minimal documentation when possible

[01:16:59.0373] <Waldo>
...I'm just gonna re-up this content right now, for no particular reason: http://whereswalden.com/2011/01/31/waiting-for-superman/

[01:17:38.0480] <Waldo>
 Also, uh, that was nine years ago?  😳

[01:31:31.0418] <Ms2ger>
Good morning

[01:31:41.0236] <Waldo>
Shut it, you :-P

[01:32:08.0801] <Ms2ger>
Always so rude in the mornings

[01:32:25.0511] <Waldo>
i no u r but wat am i

[01:33:30.0760] <Waldo>
Good news, everyone!  Now that I only have one LDAP account again, I no longer have to resort to container-tabbing every tab I open that's a Lando page!

[01:33:58.0218] <Waldo>
Now I just need a patch to land, versus going through the steps up to that point to verify my long national nightmare is over...

[01:49:41.0012] <arai>
TIL, I shouldn't use TempAllocPolicy for a js::Vector instance shared between threads

[01:53:09.0629] <Waldo>
"you're gonna have a bad time"

[02:06:29.0622] <Ms2ger>
> … threads

[02:06:31.0955] <Ms2ger>
Well, yeah

[02:31:51.0747] <arai>
and replacing some TempAllocPolicy vectors with SystemAllocPolicy vectors in existing code is a nightmare :P

[03:43:51.0536] <yozaam>
the JIT doesn't run when i'm using the js> shell

[03:43:53.0089] <yozaam>
?

[03:44:08.0416] <yozaam>
debug build ^ not optimized

[03:45:00.0748] <yozaam>
or JIT is switched off when i write dis()

[03:58:40.0166] <jandem>
yozaam: the JIT doesn't run until code gets hot. Try a loop, `for (var i = 0; i < 10_000; i++) {}`

[03:59:01.0637] <jandem>
or run the shell with `--ion-eager`

[03:59:23.0792] <jandem>
 * yozaam: the JIT is only used when code gets warm. Try a loop, `for (var i = 0; i < 10_000; i++) {}`

[03:59:38.0895] <Benjamin Bouvier>
even with `--ion-eager` you need to run at least twice to see some interesting graph artefacts/speedup, iirc

[04:00:35.0787] <yozaam>
ohh okay, so it can be used in the shell

[04:00:55.0762] <Benjamin Bouvier>
(the reason being that on the first compilation, ion will assume everything has the Value ("any") type everywhere, and the second run will trigger a recompilation with more precise types)

[04:01:28.0481] <yozaam>
wow! trained like machine learning :O

[04:01:56.0117] <Benjamin Bouvier>
yeah, type inference is Your Machine Learning

[04:03:17.0073] <yozaam>
the second compilation has stored the atoms / types in a hashmap?

[04:03:20.0372] <Benjamin Bouvier>
ohhh, we should call this "Virtual Machine Learning"

[04:04:19.0392] <yozaam>
🤣

[04:05:03.0937] <yozaam>
another question -> ionmonkey will use the macroassambler after doing this optimizaiton / before?

[04:05:47.0894] <Benjamin Bouvier>
the macro-assembler really is an abstraction (an "API" for spidermonkey hackers) over code generation

[04:06:11.0967] <Benjamin Bouvier>
so not only Ion uses it, but other compiler backends (baseline etc) use it as well

[04:06:34.0622] <yozaam>
oh okay, is there some big UML diagram i can study? of who does what and how they are connected

[04:09:06.0040] <Benjamin Bouvier>
i don't know if there is such a thing, but maybe jandem has better insights there

[04:11:01.0674] <jandem>
I don't think there's such a diagram, but the Compiler Compiler episodes cover some of this. The `[SMDOC]` comments in the source code might be useful too

[04:12:36.0398] <yozaam>
Yesss iain told me about those yesterday

[04:13:06.0656] <yozaam>
thanks -> i will watch compiler compilers second part today

[04:15:35.0933] <jandem>
ok, if you have more questions just ask

[04:16:18.0844] <yozaam>
thanks!

[04:17:11.0080] <yozaam>
one thing -> these project plans 

"For us, one of the coolest aspects of IonMonkey is that it was a highly-coordinated team effort. Around June of 2011, we created a somewhat detailed project plan and estimated it would take about a year. "

https://blog.mozilla.org/javascript/2012/09/12/ionmonkey-in-firefox-18/#content-main


Can we view them?


[04:17:40.0658] <yozaam>
are they like design docs?

[04:23:06.0018] <jandem>
yozaam: there's some info here: https://wiki.mozilla.org/IonMonkey/Overview (some parts will be outdated though)

[04:24:11.0590] <yozaam>
that kind of diagram and all is exactly what i wanted thank youuuu

[04:28:13.0910] <yozaam>
this may not be accurate but in one sentence,  ...  similar to the types -> does ionmonkey cache the already compiled binaries for those operations that baseline is compiling again and again

[04:31:42.0895] <yozaam>
could ionmonkey cache the binaries of some methods like that

[04:31:55.0316] <yozaam>
i am understanding the other optimizations it does

[04:33:20.0553] <jandem>
we don't cache Ion code. You're right that in theory we could but it's a hard problem because the compilation inputs are so dynamic. We can do code caching for WebAssembly though

[04:35:36.0724] <yozaam>
ohh okay -> but could we cache just a method? like is it posssible to have a cache for a method and then just pass it a register address to run the compiled method on?

[04:36:23.0404] <yozaam>
is that inline caching?

[04:37:19.0944] <yozaam>
or inline caching is just storing the result of commmmon parameters to the method

[04:37:41.0994] <yozaam>
like dynamic programming

[04:37:46.0485] <jandem>
inline caching is used a lot by the Baseline Interpreter and Baseline JIT. The idea is: if you have `x + y` and you see both are integers, add an IC stub for adding two integers.

[04:38:05.0423] <jandem>
and the same principle applies to more complicated things like object properties

[04:38:22.0094] <yozaam>
ohh okay so who does this?

[04:39:10.0419] <jandem>
who does what?

[04:40:01.0199] <yozaam>
adding the IC stub

[04:40:02.0925] <yozaam>
like 

[04:40:54.0452] <yozaam>
does this happen at the parser level / code generation level 

[04:42:07.0212] <jandem>
it happens at runtime. Let's say we have `x + y`, that will result in a `JSOp::Add` bytecode instruction. When that op is executed in the Baseline Interpreter/JIT it tries to add an IC stub to make the next execution of that bytecode instruction faster

[04:42:29.0276] <jandem>
we try to add that stub here: https://searchfox.org/mozilla-central/rev/19c23d725f27d0989e4a60f36d64004cebb39736/js/src/jit/BaselineIC.cpp#3727

[04:43:30.0511] <yozaam>
Wow that makes sense

[04:43:34.0485] <yozaam>
thank you very much for explaining all this to me 

[04:44:11.0527] <jandem>
no problem 

[04:59:02.0899] <evilpie>
jorendorff: avandolder I looked at some of the date parse bugs. It seems like many failures come from us not accepting `-` instead of `.`

[06:26:29.0588] <nbp>
jorendorff: sdetar: djvj: Should we move the triage meeting to a different time-slot?

[06:34:22.0884] <mconley>
 * 


[07:29:22.0309] <jorendorff>
evilpie: avandolder: https://bugzilla.mozilla.org/show_bug.cgi?id=1275498

[07:29:55.0680] <evilpie>
And https://bugzilla.mozilla.org/show_bug.cgi?id=1439800

[07:30:47.0255] <jorendorff>
Hey everyone: **intern presentations** start today at 1PM Pacific time, 4PM Eastern

[07:31:11.0169] <evilpie>
https://bugzilla.mozilla.org/show_bug.cgi?id=1617258 isn't actually caused by the dash

[07:31:21.0840] <jorendorff>
JS engine intern avandolder presents **tomorrow** in the same time slot

[07:31:32.0916] <jorendorff>
so if anyone would like a calendar invite or just the zoom link, let me know

[07:32:24.0301] <jandem>
jorendorff: I'm interested. A lot of work got done

[07:32:56.0372] <jorendorff>
sure did :)

[07:33:29.0019] <jorendorff>
sent

[07:33:36.0964] <iain>
Me too!

[07:33:46.0999] <iain>
 * jorendorff: Me too!

[07:33:52.0637] <jandem>
maybe send to sdetar-all?

[07:34:03.0335] <jorendorff>
ok, let me try that...

[07:34:38.0100] <sdetar>
sdetar-all would be appropriate

[07:35:46.0187] <evilpie>
jorendorff: me too

[07:45:15.0511] <sdetar>
nbp: jorendorff djvj With regards to the triage meeting on Thu, could we move it 1 hour later or 1 hour ealier?

[07:45:48.0088] <jorendorff>
either one is fine with me.

[07:46:40.0537] <jorendorff>
evilpie: ok, invites sent 

[07:57:34.0325] <nbp>
sdetar: one hour after sounds good to me.

[07:57:55.0126] <nbp>
 * sdetar: one hour later sounds good to me.

[08:26:14.0258] <mgaudet>
confession: One hour later... still submitting a patch [(this one still)](https://bugzilla.mozilla.org/show_bug.cgi?id=1635298)

[08:26:16.0553] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[08:34:33.0575] <Benjamin Bouvier>
anybody knowledgeable about the arm64 simulator?

[08:35:36.0721] <Benjamin Bouvier>
there seems to be a mechanism to record pending icache flushes on the simulator, and if the current thread owns the simulator, the icache flush happens immediately; but afaict if the current thread doesn't own the simulator, the pending icache flush never happens

[08:37:13.0339] <mgaudet>
I believe nbp is the last person to do icache simulation work for arm64

[08:37:43.0243] <nbp>
I confirm!

[08:40:13.0766] <Benjamin Bouvier>
nbp: so i'm navigating this code: https://searchfox.org/mozilla-central/source/js/src/jit/arm64/vixl/MozCpu-vixl.cpp#100-102
I can see that the iflush request is being recorded, but then the current simulator instance is nullptr

[08:40:32.0165] <Benjamin Bouvier>
nbp: and there seems to be no other callers to FlushICache (confirmed by renaming the function locally)

[08:40:43.0752] <nbp>
/me in a meeting, back in a few minutes

[08:42:33.0013] <jandem>
Benjamin Bouvier: just curious, is this related to Cranelift? does it do things differently?

[08:44:56.0492] <Benjamin Bouvier>
jandem: not sure. While tiering wasm compilation, the second tier will trigger an icache flush from a background thread, maybe the JIT doesn't do this?

[08:45:42.0696] <Benjamin Bouvier>
jandem: in addition to this fact, wasm test cases tend to create *a lot* of executable memory allocations (one module = one or more allocations), so we end up recycling this memory more often than JS might

[08:46:51.0061] <jandem>
bug 1575153 simplified icache flushing by doing that when we make the code executable, so it's hard to get wrong (if the code isn't executable it will crash anyway)

[08:46:52.0539] <botzilla>
https://bugzil.la/1575153 — RESOLVED (jandem) — Remove AutoFlushICache

[08:47:36.0550] <jandem>
but the JITs do that on the main thread

[08:48:21.0554] <Benjamin Bouvier>
jandem: yeah i've seen this, but the bug is somewhere lower: the call to icache flushing in the arm64 simulator happens to create a pending request; if the current thread has a simulator (not the case on background helper threads) it'll execute it immediately

[08:52:01.0373] <Benjamin Bouvier>
that might be one situation where the simulator still executes wasm on the main thread, and racily jump from wasm baseline code to cranelift code just after cranelift is done compiling, and the simulator never gets an opportunity to flush its icache

[08:54:54.0870] <lth>
hm

[08:55:08.0816] <lth>
i thought we patched that table all in one go

[08:55:17.0706] <lth>
and we should *definitely* be done flushing at that point

[08:55:35.0640] <lth>
is the patching happening on a background thread?  i forget

[08:55:44.0535] <nbp>
/me back

[08:55:48.0437] <Benjamin Bouvier>
this patching happens on the background thread, and the icache flushing request has been recorded but not executed

[08:56:00.0127] <lth>
i see

[08:56:14.0818] <jandem>
so the icache simulator requires a flush on the main thread, but wasm is swapping in code off-thread

[08:57:09.0389] <nbp>
Benjamin Bouvier: icache flush across threads is not a garanteed things, it has to be re-done on the running thread, as the cache flush is per-cpu and there is no garantee that the flush occurred in the CPU which is running the code.

[08:57:27.0272] <Benjamin Bouvier>
yes, and there's no mechanism to handle the flush request on the main thread at all thereafter

[08:57:52.0048] <Benjamin Bouvier>
nbp: oh, so it's not only a simulator issue

[08:57:58.0847] <lth>
whelp

[08:58:15.0669] <nbp>
Benjamin Bouvier: that's my understanding of the ARM64 documentation.

[08:58:36.0929] <jandem>
an icache-flushing trampoline :p 

[08:58:58.0847] <Benjamin Bouvier>
oh my

[08:59:39.0172] <nbp>
I agree … I have no idea why they implemented it that way.

[08:59:47.0666] <nbp>
 * I agree … I have no idea why they spec-ed it that way.

[09:02:29.0621] <lth>
we should revisit the docs but it sounds somewhat plausible

[09:02:49.0948] <lth>
if true, we'll need to defer patching until after we've flushed on the main thread

[09:03:09.0166] <jandem>
I wonder about the mprotect that follows the flushing and if that has any guarantees. Probably nothing documented

[09:03:32.0180] <lth>
this means some kind of action to be done when we exit wasm code or something like that

[09:04:07.0816] <Benjamin Bouvier>
lth: that'd be unfortunate in the case where wasm never exits (interpreters eg)

[09:04:17.0663] <Benjamin Bouvier>
we'd remain stuck in the baseline

[09:04:17.0818] <lth>
it's the main thread.  they will exit.

[09:04:26.0732] <lth>
well, workers are a problem...

[09:04:33.0220] <lth>
but workers are always a problem...

[09:06:22.0359] <Benjamin Bouvier>
> Maintenance may need to be broadcast to the interconnect. This means that software on one core can issue a cache clean or invalidate operation to an address that might currently be stored in the data cache of a different core that holds the address. When a maintenance operation is broadcast as shown in Figure 14.3, the operation is performed by all the cores in a particular shareability domain.

https://developer.arm.com/documentation/den0024/a/multi-core-processors/cache-coherency?lang=en

[09:07:47.0410] <lth>
"data cache"

[09:08:36.0610] <lth>
/me is in a meeting for the next hour

[09:12:19.0096] <jandem>
(bug 1529933 has some discussion on this too)

[09:12:20.0605] <botzilla>
https://bugzil.la/1529933 — RESOLVED (lth) — ARM/ARM64: Use-after-free of previously generated code due to non-synchronized instructions caches

[09:12:58.0145] <Benjamin Bouvier>
https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/sys_icache_invalidate.3.html is unclear about the behavior on MacOS

[09:16:27.0622] <Benjamin Bouvier>
possibly the icache-flushing trampoline solution could be implemented: the background thread patches all the jump table entries (jump table from wasm baseline to wasm optimized) with the entry address of the icache flushing trampoline, and then the icache flushing trampoline does flush the icache, and then re-patches all the jump table entries (if there's a way to recover the jump table index that was called)

[09:29:44.0558] <Benjamin Bouvier>
soo it seems that https://bugzilla.mozilla.org/show_bug.cgi?id=1529933#c7 seems to say it's safe

[09:29:56.0102] <Benjamin Bouvier>
anyway, a problem for Tomorrow Benjamin

[09:54:48.0104] <mgaudet>
Nothing like writing a blog post about something you don't understand to realize you don't understnad it :) 

[09:54:53.0555] <mgaudet>
 * Nothing like writing a blog post about something you don't understand to realize you don't understand it :) 

[10:01:00.0988] <jorendorff>
speaking of which

[10:01:47.0211] <jorendorff>
i'm writing a new DumpFunction, `js::DumpStackBytes(cx)` which dumps the raw bytes of the native stack for the topmost `JitActivation`

[10:01:54.0102] <jorendorff>
annotated with struct and field names

[10:03:18.0972] <jorendorff>
I'm just going to omit everything I don't need to make it work in my special case, folks can fill in the missing parts later if desired

[10:03:26.0239] <jorendorff>
 * I'm just going to omit everything I don't need to make it work in my test case, folks can fill in the missing parts later if desired

[10:04:05.0907] <mgaudet>
neat :) 

[10:04:49.0803] <jorendorff>
i don't really know how to divide responsibilities -- there are parts of the stack that are clearly just some struct

[10:05:00.0439] <jorendorff>
but then some class needs to have the responsibility of printing other parts

[10:05:36.0588] <jorendorff>
for now ... I guess BaselineFrame can have responsibility for the extra bits, since I only have BaselineFrames

[10:05:50.0436] <jorendorff>
i'm a little worried about getting the boundary wrong and it not working for ion frames

[10:06:04.0968] <jorendorff>
making it unnecessarily difficult for someone later just because I don't understand

[10:10:02.0614] <mgaudet>
I would suggest it's still worth doing, but you could always 1) Rename it to `JS::DumpStackBytesBestEffort`, and then 2) in the dump output say "This is a best effort dump: YMMV" 

[10:11:53.0152] <jorendorff>
will definitely include a disclaimer in the output

[10:12:24.0345] <jorendorff>
and maybe rename -- is there a way to ask the `JitActivation` for the base of that range of frames?

[10:12:35.0114] <jorendorff>
it doesn't look like it's possible, except by following the frame chain

[10:12:37.0317] <jorendorff>
although that's not hard

[10:14:18.0164] <jorendorff>
actually: who understands the baseline stack layout well enough for a quick call

[10:14:21.0629] <jorendorff>
i'd like to sanity-check what i've learned

[10:14:33.0178] <jorendorff>
iain?

[10:14:38.0808] <nbp>
jorendorff: This is the address of the JitActivation, which lives on the Stack.

[10:14:47.0224] <jorendorff>
nbp: sweet!! thanks

[10:15:49.0333] <nbp>
https://searchfox.org/mozilla-central/search?q=symbol:_ZN2js3jit13JitActivationC1EP9JSContext&redirect=false

[10:17:12.0240] <iain>
jorendorff: I know a bit. Listening to the moco call right now, but free after that

[10:17:17.0848] <jorendorff>
ok

[10:18:37.0854] <jorendorff>
nbp: perfect, that's clear. so the jit stack may not run _right_ up to the edge of the BaselineFrame, but close.

[10:19:10.0687] <nbp>
I am double checking …

[10:23:17.0338] <nbp>
jorendorff: we do not set the beginning of the stack when we enter the JIT, so the JITActivation address is the best approximation of the JIT entry without walking the JIT frames.

[11:05:41.0693] <iain>
jorendorff: Moco meeting is over. Free to talk whenever.

[11:06:00.0439] <jorendorff>
ok, 5 minutes

[11:06:03.0685] <jorendorff>
thanks!

[11:06:34.0929] <jorendorff>
https://mozilla.zoom.us/j/4196723414 I'll be there in a bit

[11:35:57.0853] <Waldo>
jorendorff: I'd be interested in a tag onto avandolder's talk too.

[11:58:58.0465] <yozaam>
> <@waldo:mozilla.org> jorendorff: I'd be interested in a tag onto avandolder's talk too.

me too

[12:03:01.0489] <iain>
jorendorff: https://searchfox.org/mozilla-central/source/js/src/jit/x64/Trampoline-x64.cpp

[12:08:22.0760] <Waldo>
confession: Maaaybe have a patch finished to make DOM's `AbortSignal` keep strong references to its followers, i.e. the algorithms added to it that run when the signal is aborted, bug 1660555.  Maybe.

[12:08:26.0465] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[12:08:27.0715] <botzilla>
https://bugzil.la/1660555 — ASSIGNED (Waldo) — AbortSignal needs to keep strong references to its followers

[13:49:31.0773] <mgaudet>
Time for a real confession: I've realized that I either never learned, or (I think more likely) have seemingly forgotten, how the environment/scope split works, and how (gestures vaguely) environments fit in. Do we have a reasonable documentation for this (I'd also accept the pointer to the wikipedia / spec) that would help elucidate this for me. 

[13:51:15.0585] <mgaudet>
 * Time for a real confession: I've realized that I either never learned, or (I think more likely) have seemingly forgotten, how the environment/scope split works, and how (gestures vaguely) environments fit in. Do we have a reasonable documentation for this (I'd also accept the pointer to the wikipedia / spec that would help elucidate this for me).

[13:52:21.0863] <Waldo>
Scopes are a parse/compile-time representation of the sets of local variables/lets/constants in each lexical section (block, function body, global scope, module scope) of code.  Environments are actual objects, at runtime, that store actual values that inhabit particular scopes.

[13:52:43.0450] <Waldo>
(no that probably isn't "reasonable documentation")

[13:53:21.0933] <mgaudet>
Oh; the actual values end up in the environments

[13:53:24.0500] <yozaam>
https://bugzilla.mozilla.org/show_bug.cgi?id=1651208 I have edited a few lines(not solved the bug) I want to submit a patch to share a link in a comment here I did hg commit and now do i have to use moz-phab ? 

[13:53:50.0703] <mgaudet>
that is a helpful pointer

[13:55:09.0644] <mgaudet>
yozaam: Yep: The way to get `moz-phab` to do the right thing is: 1) in your commit message wrote `Bug <BUGNUMBER> - Description of change r?<REVIEWERNAME>` 2) submit the patch with `moz-phab submit .`

[13:55:41.0055] <yozaam>
thanks a lot

[13:57:48.0534] <yozaam>
in username of hg config do we use our bugzilla / phabricator username ( i have different ones cause of a duplicate)

[13:59:33.0138] <mgaudet>
yozaam: I don't think it matters hugely, except insofar as it'll be what's reflected in the commit lots when the time comes for your patch to be committed

[13:59:46.0617] <yozaam>
oh okay ,thank youuu

[14:04:37.0116] <yozaam>
so sorry

[14:05:39.0286] <yozaam>
 i made 3 local commits but in the first two the message did not have Bug Id so i submitted only the latest commit -> but now the diff is not showing the preeviuos two

[14:07:19.0963] <mgaudet>
yozaam: So, if all three are conceptually the same change, I'd suggest you roll them together (this is a difference between git/github workflows and here) 

[14:07:58.0148] <yozaam>
yes all are the same

[14:09:51.0049] <mgaudet>
Ok. So, what I'd do is `hg histedit` (this is like `git rebase -i`); that should show you all of your changes. Then for the bottom most two changes, select it and hit `f` -- converting the action to  fold. At the end, edit the commit message to be `bug bugnum - description ...` but make sure to keep the `Differential Revision: ` line 

[14:09:59.0526] <mgaudet>
then once you've done that, re-run `moz-phab submit .` 

[14:11:32.0985] <mgaudet>
subsequently, as you keep editing the patch, you can add new contents to the most-recently committed patch with `hg amend` 

[14:12:54.0210] <yozaam>
wow, I am trying right now one second

[14:19:43.0125] <mgaudet>
yozaam: I'm about to take off -- end of the day for me here; if you need some more help (asynchronous), feel free to email me at `username@mozilla.com` and I'll get back to you afterwards. You may also find `hg` help in #introduction, or someone in this channel may be able to help with this

[14:21:16.0658] <yozaam>
thank youuuuu

[14:22:52.0420] <mgaudet>
yozaam: I appreciate you taking a stab at that one. It's a silent performance issue that will be nice to get cleaned up 

[14:24:27.0632] <yozaam>
I managed the patch, will think about it for a while

[14:24:45.0508] <yozaam>
see you tomorrow :D

[14:25:17.0712] <mgaudet>
yozaam: your updated patch looks like something I can look at -- it feels like there's an implicit question in there about an error: feel free to write more about that and I'll take a look

[14:26:01.0788] <yozaam>
okay I will

[14:29:38.0614] <mgaudet>
Great. Otherwise, I'll get a first pass review done tomorrow. 

[14:32:25.0033] <yozaam>
thanks, goodnight 🤞


2020-08-26
[17:57:42.0404] <jorendorff>
current status: https://gist.github.com/jorendorff/7a730ed3a2a82a0c63f4effb4a5b2693

[18:07:17.0207] <tcampbell>
jorendorff: I've just pushed the ParserAtoms stuff again and hopefully it sticks this time. Ideally we'd avoid landing any new conflicts in the next day or so in case we do need to back out this monster patch

[18:07:25.0250] <jorendorff>
ok

[18:07:58.0181] <tcampbell>
(there should not be any more such chaos for the remaining stencil work at least..)

[18:08:56.0466] <tcampbell>
we'll keep an eye on the nightly crash stats once the build ships in the morning

[18:10:59.0252] <tcampbell>
(the exciting work kicks off next week though! we should be able to land the new APIs in a couple of days, and then go through Gecko and find oppotunities to use them)

[18:34:05.0489] <jesup>
tcampbell: discussion touching on precompiling/sharing compile data in #fission:mozilla.org  ... 

[01:28:34.0569] <jonco>
where does our SMDOC documentation get hosted?

[01:28:44.0376] <jonco>
 * where does our SMDOC documentation get published?

[01:29:52.0802] <Ms2ger>
Maybe https://firefox-source-docs.mozilla.org/js/

[01:30:00.0337] <Ms2ger>
If at all

[01:31:38.0291] <jonco>
I can't find it there

[01:32:04.0535] <jonco>
I'm assuming this does get built and published somewhere, but maybe not

[01:32:53.0391] <jandem>
not yet I think, but it would be nice to do that in the future

[01:34:10.0158] <jonco>
oh right, yes it would

[01:49:09.0458] <jandem>
 * not yet I think, but it would be nice to do that

[02:22:09.0778] <nbp>
my understanding was that SMDOC was a low cost entrypoint for searchfox-based documentation.

[02:38:55.0379] <Ms2ger>
Why not both?

[02:55:46.0443] <nbp>
Why not dilating time for the rest of the world and giving immortality for the developers … I wonder!

[02:57:44.0982] <nbp>
 * Why not dilating time for the rest of the world and giving immortality to the developers … I wonder!

[04:21:30.0141] <3v1n0>
Hey, I'm packaging mozjs (78) for debian, now there's some request of building it without rust dependency as it was possible til 68).
Now, is it technically feasible at this day (without huge changes) to get rid of the rust dependency when compiling spidermonkey as a shared library?

[04:25:03.0823] <jandem>
Marco Trevisan: no it's not really feasible, we depend on Rust crates for character encoding/decoding for example

[04:26:25.0016] <jandem>
 * Marco Trevisan: no it's not really feasible, we depend on Rust crates for character encoding for example (encoding_rs)

[04:35:05.0722] <Marco Trevisan>
> <@jandem:mozilla.org> Marco Trevisan: no it's not really feasible, we depend on Rust crates for character encoding for example (encoding_rs)

Yeah, that's what I was wondering as well, thanks for confirming.

[05:40:01.0381] <nbp>
Marco Trevisan: If you have any issue with packaging, there is some overlap between Mozilla employee and Debian package owner/maintainer.

[05:47:30.0733] <jonco>
@allstarschh|afk: hey, I just landed some changes to HelperThreads.cpp so you probably need to rebase your patches

[05:47:45.0043] <jonco>
hopefully it shouldn't touch the bits you're working on

[05:48:51.0448] <@allstarschh|afk>
jonco:  you mean https://bugzilla.mozilla.org/show_bug.cgi?id=1657850 ? 

[05:48:59.0178] <jonco>
yes

[05:49:59.0796] <jonco>
well, I guess you saw this already

[05:50:01.0217] <@allstarschh|afk>
jonco: I have rebased and the conflict is small, and try looks green

[05:50:14.0270] <@allstarschh|afk>
jonco: yeah :P

[05:52:20.0067] <jonco>
wait, are you sure?  I doesn't look like your patch is based on the latest changes

[05:53:45.0888] <jonco>
@allstarschh|afk: ^

[05:59:58.0171] <@allstarschh|afk>
jonco: I think I have rebased to latest m-c, could you point out which part you look weird?

[06:00:31.0679] <jonco>
@allstarschh|afk: my patches got backed out and just made it to autoland today, so they won't be on m-c yet

[06:01:38.0089] <jonco>
I changed GlobalHelperThreadState::threads so it's now accessed by calling a getter rather than directly

[06:02:20.0500] <@allstarschh|afk>
jonco: oh you mean https://bugzilla.mozilla.org/show_bug.cgi?id=1660346 ? then I'll rebase on that patch

[06:04:13.0319] <jonco>
oh right, yes that one

[06:04:18.0251] <jonco>
great

[06:18:34.0919] <nbp>
lth: (cc Benjamin Bouvier ) https://bugzilla.mozilla.org/show_bug.cgi?id=1529933#c8 Does a fence garantee that another core would invalidate its icache without an "isb"?

[06:26:12.0860] <nbp>
From the bug, what I understand is that it only prevent a race between the code write and the mprotect call which might SEGV if a cache line is flushed after the mprotect, while being written before.

[06:50:49.0634] <lth>
nbp:  i believe the principle at work here is that mprotect has to notify all cores to invalidate their mmu states since some pages have changed permissions, and that the locking that coordinates compilation coupled with the dsb is sufficient to ensure that all new written code will be visible to all cores.  it is arguably the case that no iflush / isb is neeeded at all since the mprotect causes equivalent action to be taken, under the conditions that jacob lists

[06:54:15.0259] <nbp>
lth: execpt that we reuse pages … which invalidates the first point of jacob list.

[06:54:42.0563] <lth>
no, that point is more subtle than that

[06:54:43.0157] <nbp>
as we have a limnited space for allocating code pages.

[06:55:48.0569] <lth>
the point of no page reuse is that the previous version of the code may not be on pages we reuse

[06:55:55.0115] <lth>
but that is not a problem when we tier up

[06:56:17.0307] <lth>
it may have been used for code before, but not the baseline code that the tier2 code is replacing, because that code is still live

[06:56:33.0140] <lth>
(at least that's how i remember it)

[06:57:26.0990] <nbp>
I wonder, because we share code pages between WASM and JS, and even between WASM modules. So if one comes to be GC-ed, would that count as code reuse.

[06:58:23.0938] <lth>
note we're doing no patching.  any "fresh" but reused page will have gone from rx to rw to rx again

[06:59:21.0943] <nbp>
What you are mentioning is the point (b) , but this address while pointing to the WASM baseline, being replaced by the Cranelift WASM, might still be the location of an old JIT code.

[07:00:15.0674] <nbp>
thus I am not sure how much of the pointer update, would help reload the icache.

[07:00:56.0206] <nbp>
unless the ARM64 documentation specify that icache entries have to be linked to their call-site, which would be strange.

[07:01:40.0274] <nbp>
mgaudet: thanks

[07:01:56.0042] <mgaudet>
whoops

[07:02:31.0522] <lth>
nbp: i doubt i'll be able to convince you of something that was simply asserted by an arm engineer, i don't have further documentation to point you to

[07:04:35.0414] <nbp>
lth: Sorry, I have hard time convincing myself first, especially knowing the way the erata is written :/

[07:05:40.0712] <nbp>
Benjamin Bouvier: ok, I will stop blocking things … I fine adding more interface to reflect what the mprotect is doing to the simulator.

[07:06:06.0703] <Benjamin Bouvier>
nbp: can you point to the errata document, please?

[07:06:41.0538] <nbp>
Benjamin Bouvier: http://infocenter.arm.com/help/topic/com.arm.doc.genc007826/Barrier_Litmus_Tests_and_Cookbook_A08.pdf (download button on the left, page 24)

[07:11:00.0122] <nbp>
jorendorff: https://searchfox.org/mozilla-central/source/js/src/jit/JSJitFrameIter.cpp#346 (that's the one I am thinking of)

[07:21:45.0732] <nbp>
https://searchfox.org/mozilla-central/source/js/src/jit/JSJitFrameIter.cpp#182-187

[07:30:26.0872] <Benjamin Bouvier>
iain: how many cats do you have?? 🙀

[07:37:30.0253] <iain>
Benjamin Bouvier: Two, but they are big and it's almost breakfast time

[07:41:47.0119] <nbp>
iain: I will not give you my parrot for breakfast!

[07:53:43.0555] <Benjamin Bouvier>
nbp, lth: i wonder what the situation for icache flushing is on arm32, where wasm is supported by ion and the same can happen, in theory

[07:55:07.0555] <lth>
i continue to believe that this is a non-problem on hardware and that it's a simulator bug

[07:55:17.0650] <Benjamin Bouvier>
mac [man pages](https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/sys_icache_invalidate.3.html) of icache flushing: `Normally the operations apply to every processor in the system, but the exact semantics of these operations is platform dependent.  They should be used with caution.` 😅

[07:55:19.0874] <lth>
(and that the situation is the same on arm until proven otherwise)

[08:03:11.0829] <tcampbell>
nbp: does the real-world JS stuff use full browser builds?

[08:03:14.0227] <iain>
nbp: You are too far away anyway. My cats demand to be fed *right now*

[08:04:04.0033] <nbp>
tcampbell: Yes, the addon is just to collect all JS script which are loaded by the browser, but the collecting process is manual at the moment

[08:04:06.0970] <tcampbell>
or I guess my question is how to _execute_ them rather than just parse

[08:04:12.0387] <tcampbell>
ah

[08:04:57.0372] <nbp>
 * tcampbell: Yes, the addon is just to collect all JS script which are loaded by the browser, but the <del>collecting</del> browsing process is manual at the moment

[08:06:14.0478] <nbp>
tcampbell: I was thinking of finding a way to normalize the browsing process across these websites. Even if this is a moving target, I think this would still show us progress on a day-by-day basis.

[08:06:49.0588] <nbp>
and adding any instrumentation we think desirable to make these runs actionable targets.

[08:07:39.0467] <nbp>
Talos is opaque but a stable target.

[08:07:58.0460] <nbp>
What I was wondering is if we could make it actionable.

[08:08:12.0722] <nbp>
such as running the CacheIR Health reports on the top50.

[08:08:23.0941] <nbp>
and adding wieght based on the numbers of visits.

[08:08:31.0348] <nbp>
 * and adding weight based on the numbers of visits.

[08:08:36.0189] <tcampbell>
Could be interesting

[08:09:09.0924] <nbp>
The idea being, to be as close as possible to what our user experience, while being actionable.

[08:09:27.0572] <nbp>
(not sure if this is doable in any way)

[08:16:30.0270] <mgaudet>
In principle, I think it is; and I think it's an interesting idea. Especially since raptor recordings are stable targets, but (AIUI) updated sometimes too. How to boil the high dimensional complexity of our CacheIR report into a metric we're comfortable watching is a hard problem, but potentially valuable. (One trivial idea would be to track what percentage of our stubs are 'healthy') 

[08:17:13.0620] <mgaudet>
(Then, if facebook updates, and suddenly our healthy sub count drops from 85% to 65%, we have work to do)

[09:04:39.0713] <nbp>
At the same time, if Facebook updates and the healthy result drops, then we have work to do, and a short notification instead of an increasing pain.

[09:05:19.0055] <nbp>
I think this is preferable, even if too late, than not having any notification.

[09:05:32.0354] <jandem>
we've also been thinking about some form of telemetry for this so we can keep track of which ops have "good IC coverage" and which need work 

[09:05:58.0998] <jandem>
(ideally it would also give the reason for IC failures) 

[09:15:22.0843] <tcampbell>
Congrats djvj , looks like ParserAtoms stuck!

[09:22:02.0692] <jorendorff>
woo

[09:22:33.0236] <tcampbell>
we'll give it a day or so before we stack much more on so we can watch crashstats, etc

[09:40:23.0432] <Benjamin Bouvier>
what's the treeherder CI job that runs the arm64 simulator? linux64?

[09:41:26.0961] <Benjamin Bouvier>
(it seems [it is](https://searchfox.org/mozilla-central/source/taskcluster/ci/config.yml#192) linux64)

[10:43:20.0130] <tcampbell>
do we still need a message argument to `static_assert` or did our sufficiently modern C++ remove that requirement?

[10:46:07.0143] <iain>
Looks like message-less static_assert is in C++17

[10:46:14.0187] <froydnj>
which we use

[10:49:34.0179] <tcampbell>
I'm still traumatized by being backed out for that I guess

[10:58:20.0533] <nbp>
jandem: I think we can go as far as oolCallVM, but I will keep that for later. I think I will first go with a wrapper class which has the function pointer and the signature, such that we can at least make callWithABI signature grep-able (at least for non VMWrapper cases)

[10:59:48.0234] <nbp>
It might also make sense to make all the function signature centralized, like VMFunctions are.

[11:00:45.0411] <nbp>
^ even if this is an additional restriction, this will kind of enforce all signatures to be listed in the same file and help us answer whether we have any uses cases for some ABI corner cases.

[11:51:45.0179] <yozaam>
i was trying to submit a new patch for todays work

[11:52:13.0069] <yozaam>
i did hg pull -> hg merge -> hg commit -> now cannot do moz-phab submit

[11:52:58.0139] <yozaam>
hg histedit gives 

abort: histedit requires exactly one ancestor revision

moz-phab submit gives 

Unable to submit commits:

Commit stack contains a merge commit

[11:53:11.0945] <yozaam>
I should have used append, i realized now..

[11:53:48.0524] <yozaam>
 * I should have used amend, i realized now..

[11:54:29.0685] <iain>
After pulling a new version of central, you generally want to use `rebase`

[11:55:10.0705] <iain>
But mercurial is generally pretty good at not wedging you into unrecoverable situations

[11:56:02.0791] <iain>
(Note: `hg rebase` is less scary than `git rebase` because mercurial has phase-based guardrails that prevent you from rewriting public history accidentally)

[11:56:15.0519] <iain>
What is the output of `hg wip`?

[11:56:26.0757] <yozaam>
‘ysv-hg wip
hg: unknown command 'wip'
(did you mean tip?)

[11:56:45.0656] <yozaam>
have i messed up something ?

[11:57:19.0959] <yozaam>
can i make a new clone of mozilla, I've changed only two files and place these two there and make a new commit and submit?

[11:58:05.0531] <iain>
If you run `mach bootstrap`, it will give you the option to configure your `.hgrc` with a bunch of extra useful commands

[11:58:19.0879] <iain>
`wip` is one of them, which will show the state of your local repository

[11:58:38.0186] <iain>
Making a new clone will take a long time and is overkill for this situation

[11:59:04.0275] <iain>
If you want to brute-force copy your changes over, `hg up central` will check out central, and then you can apply your changes there

[11:59:06.0492] <yozaam>
oh okay, i will try bootstrap -> wip -> rebase

[11:59:25.0487] <iain>
`wip` is just for figuring out the current situation

[11:59:36.0771] <yozaam>
> <@iain:mozilla.org> If you want to brute-force copy your changes over, `hg up central` will check out central, and then you can apply your changes there

okay , so if i save my two cpp and .h files that i edited i can just put them back in the new hg up central

[11:59:48.0254] <yozaam>
i think i will do that

[12:00:28.0401] <iain>
When you commit your changes, if you include the `Differential Revision: https://phabricator.services.mozilla.com/D#####` line in the commit message, then phabricator should pick it up as the same revision

[12:01:13.0141] <yozaam>
okay , i am trying

[12:01:25.0604] <iain>
Make sure when you save the files you've changed that you are not erasing any other changes in those files between your original version of mozilla central and the new one you just pulled

[12:01:42.0330] <yozaam>
yes 

[12:04:31.0873] <yozaam>
hg up central
abort: unknown revision 'central'!


[12:05:25.0815] <iain>
That's unexpected

[12:05:29.0272] <yozaam>
‘ysv-hg heads
changeset:   546274:7d7c2703f3e1
bookmark:    moz-phab_7d7c2703f3e1
tag:         tip
parent:      546273:c44abace61ad
parent:      546272:7cea08d78f8b
user:        yohaan <yozaam@outlook.com>
date:        Wed Aug 26 23:42:01 2020 +0530
summary:     Bug 1651208 Set a bit in the UsedNameTracker and short circuit some private field early error checks r?mgaudet




can i delete the parent that i merged today ?

[12:05:32.0738] <botzilla>
https://bugzil.la/1651208 — ASSIGNED (yozaam) — Set a bit in the UsedNameTracker to determine if there are any private names

[12:05:47.0893] <yozaam>
this is my hg heads

[12:06:11.0767] <yozaam>
I think I will make a new clone?

[12:06:23.0627] <yozaam>
I have the files and revision D

[12:06:26.0575] <iain>
Start by running mach bootstrap

[12:06:59.0507] <yozaam>
okay

[12:07:20.0993] <yozaam>
I can't rebase to remove the second parent?

[12:07:28.0947] <yozaam>
sorry , i am a noob at this

[12:08:04.0498] <yozaam>
bootstrap is running

[12:08:11.0693] <iain>
All of the revision surgery will be much easier once bootstrap has updated your hgrc

[12:08:22.0015] <yozaam>
ohh okay

[12:10:35.0851] <iain>
I expect that you will be able to unwedge yourself with something like `hg up 7cea08d78f8b && hg prune tip && hg rebase -s 7cea08d78f8b -d c44abace61ad`

[12:10:55.0320] <iain>
But I really want to see the output of `hg wip` to make sure I understand the state of your repository before we make any more changes

[12:15:42.0277] <yozaam>
hg wip
@    546274:7d7c2703f3e1 yozaam tip  moz-phab_7d7c2703f3e1 Bug 1651208 Set a bit in the UsedNameTracker and short circuit some private field early error checks r?mgaudet
|\
| o  546273:c44abace61ad yozaam  Bug 1651208 put boolean in constructor and get,has functions to track private names in used name tracker r?mgaudet
o |  546272:7cea08d78f8b malexandru  Backed out changeset 9d95edbd8386 (bug 1660892) for causing devtool timeouts.
|/
o  546116:a8f04609cdd8 jcoppeard  Bug 1660965 - Report bad JS::Value contents in crash messages r=jandem
~


[12:15:43.0828] <botzilla>
https://bugzil.la/1651208 — ASSIGNED (yozaam) — Set a bit in the UsedNameTracker to determine if there are any private names

[12:15:44.0421] <botzilla>
https://bugzil.la/1660892 — NEW (ochameau) — Browser toolbox fails opening with "Permission denied to access property 'windowUtils' on cross-origin object" exception

[12:15:45.0081] <botzilla>
https://bugzil.la/1660965 — RESOLVED (jonco) — Report corrupted JS::Values in crash data

[12:16:05.0643] <yozaam>
this is the wip

[12:17:28.0005] <iain>
Ah, great, thanks, much easier with the right formatting

[12:18:50.0125] <iain>
Did you do anything during/after the merge that you want to preserve?

[12:19:01.0184] <iain>
(Fix merge conflicts, etc?)

[12:19:20.0135] <yozaam>
no nothing

[12:19:34.0117] <iain>
Ok, great

[12:19:44.0102] <yozaam>
i have the two files separately also

[12:19:51.0986] <yozaam>
so i can put them back

[12:19:52.0561] <iain>
You don't need them

[12:19:56.0013] <yozaam>
oh ok

[12:20:25.0738] <iain>
`hg rebase -s c44abace61ad -d 7cea08d78f8b`

[12:20:43.0634] <iain>
This will take your original changeset, and rebase it on top of the new copy of central

[12:20:54.0557] <yozaam>
thank you very much

[12:21:31.0437] <iain>
It may give you some sort of warning about an orphan, because the merge changeset depends on your original

[12:21:59.0298] <iain>
But you don't actually care about the merge changeset, so you can just `hg prune 7d7c2703f3e1`

[12:22:47.0622] <yozaam>
okay , done

[12:22:57.0418] <iain>
I'm a little confused about why you're not seeing a `central` tag on `546272:7cea08d78f8b`

[12:23:43.0414] <iain>
But if it worked, then `hg wip` should just show you the new version of central with your change on top of it, and nothing else

[12:23:55.0217] <yozaam>
yessss

[12:23:57.0181] <yozaam>
it worked

[12:24:09.0468] <yozaam>
thank youuo

[12:24:17.0409] <yozaam>
it is the old commit message with the new changes

[12:24:36.0115] <iain>
You can edit the commit message with `hg commit --amend`

[12:25:09.0866] <iain>
It is just like `hg amend` (in that it will take any uncommitted changes and roll them into `tip`), but it will also give you a chance to edit the commit message

[12:25:34.0374] <iain>
 * It is just like `hg amend` (in that it will take any uncommitted changes and roll them into the current patch), but it will also give you a chance to edit the commit message

[12:28:16.0416] <yozaam>
everything worked, i got it on the phabricator page as well

[12:28:22.0085] <yozaam>
sorry for taking your time

[12:28:29.0728] <yozaam>
thanks a lot

[12:29:00.0616] <yozaam>
for next time, I don't need to run hg pull every day, i should just amend to my own commit

[12:31:44.0189] <iain>
Yeah, you can normally just amend your commit and run `moz-phab submit` again to update your Phabricator revision

[12:32:11.0807] <iain>
Lando will automatically rebase when landing a patch, so you only need to pull-and-rebase if there is a merge conflict that needs manual intervention

[12:34:45.0049] <yozaam>
from tomorrow i will do it like that 🤞

[12:35:32.0189] <mgaudet>
yozaam: "// how can I merge the equality check on line 76 and 78 ?" the line numbers on phabricator don't quite line up there: which checks are you hoping to merge? 

[12:36:31.0733] <yozaam>
oh yes

[12:36:36.0373] <yozaam>
i was saying

[12:36:54.0120] <yozaam>
visibility == NameVisibility::Private is used in both lines

[12:36:58.0355] <yozaam>
could i combine them

[12:37:23.0725] <yozaam>
if(visibility == NameVisibility::Private) {
    MOZASSERT.....
    hasprivat = true
}

[12:37:36.0449] <yozaam>
or is there some assert functionality for false

[12:37:38.0601] <mgaudet>
oh you mean inside the assert; 

[12:37:39.0598] <yozaam>
that i will miss

[12:37:43.0004] <yozaam>
yes

[12:38:08.0194] <yozaam>
isPrivate = visibility == NameVisibility::Private  

[12:38:17.0308] <yozaam>
and then put isPrivate in both locations?

[12:38:21.0688] <mgaudet>
eh; I wouldn't worry about it. The asserts are only there for debug builds and get compiled out at release; going into too many contortions to micro-optimize here isn't worth while

[12:38:26.0831] <yozaam>
ohhhhh

[12:38:28.0468] <yozaam>
okay

[12:38:42.0082] <mgaudet>
the compiler will do the right thing under the covers anyhow

[12:38:43.0899] <jorendorff>
yozaam: need hg help?

[12:38:49.0056] <mgaudet>
(or, we should assume so :P) 

[12:38:53.0022] <jorendorff>
 * 


[12:38:55.0070] <yozaam>
we use OFast? 

[12:39:16.0201] <mgaudet>
yozaam: we have a complicated optimization set across a large variety of products and builds

[12:39:30.0833] <yozaam>
> <@jorendorff:mozilla.org> 

iain solved the problem, thanks -> i will study the hg docs better

[12:39:44.0427] <mgaudet>
but this is super basic common sub-expression elimination, so likely happens everywhere

[12:39:45.0048] <jorendorff>
ok

[12:40:13.0761] <yozaam>
> <@mgaudet:mozilla.org> but this is super basic common sub-expression elimination, so likely happens everywhere

oh okay, i didn't know that

[12:40:41.0858] <mgaudet>
No worries :) 

[12:42:27.0340] <mgaudet>
yozaam: So, the patch looks pretty good. I'm going to do a bit of local testing, and submit it to our try server for testing. Once that's done, I'll let you know if there are any problems, and otherwise will approve it, and queue it for landing 

[12:42:56.0316] <yozaam>
also, thanks a lot for explaining the assertion return true in yesterdays inline comment mgaudet 

[12:42:57.0648] <mgaudet>
yozaam: there's one typo you could update (in comments just submitted) 

[12:43:26.0995] <yozaam>
okay, and i will remove the comment where i ask about line 76 and 78

[12:44:18.0567] <Marco Trevisan>
> <@nbp:mozilla.org> Marco Trevisan: If you have any issue with packaging, there is some overlap between Mozilla employee and Debian package owner/maintainer.

Ah thanks... No per sé the packaging is not too much a problem these days, but if anyone wants to review it's at https://salsa.debian.org/gnome-team/mozjs68

[12:44:45.0069] <Marco Trevisan>
> <@nbp:mozilla.org> Marco Trevisan: If you have any issue with packaging, there is some overlap between Mozilla employee and Debian package owner/maintainer.

 * Ah thanks... No per sé the packaging is not too much a problem these days, but if anyone wants to review it's at https://salsa.debian.org/gnome-team/mozjs

[12:45:21.0804] <yozaam>
> <@mgaudet:mozilla.org> yozaam: there's one typo you could update (in comments just submitted)

is there a feature to edit and accept your inline comment or should i edit it locally and submit?

[12:45:55.0300] <mgaudet>
I -think- there should be an accept edit thing;

[12:46:08.0456] <mgaudet>
tbh, it's new to phabricator, and I've not used it yet

[12:47:20.0525] <mgaudet>
yozaam: ok, poking at one of my own: it appears the answer is no

[12:47:24.0823] <mgaudet>
not yet at least

[12:49:08.0581] <yozaam>
okay , i have done it locally

[12:49:48.0513] <yozaam>
done , wow hg amend moz-phab submit

[12:49:51.0898] <yozaam>
thats so easy

[12:59:45.0825] <jorendorff>
intern presentations starting now!

[13:01:53.0722] <yozaam>
joined 👍️

[13:10:35.0270] <jorendorff>
\o/

[13:10:45.0388] <iain>
\o/

[13:11:32.0774] <Waldo>
\o/

[13:11:36.0625] <sdetar>
Great job Adam on your intern presentation

[13:12:03.0047] <avandolder>
Thanks! I'm glad I was able to get it down to 9 minutes

[13:15:24.0749] <yozaam>
very nice presentation, I am a newbie here but I understood everything you explained

[13:16:28.0207] <yozaam>
mgaudet: my jit-test is running -> basic/bug688939.js basic/bug832203.js have failed (red)

[13:17:11.0577] <mgaudet>
yozaam: hmm. interesting; my local test didn't hit the same failure

[13:17:12.0860] <yozaam>
it is at 26%

[13:17:16.0651] <yozaam>
oh wait

[13:17:20.0623] <mgaudet>
are you running a debug build? 

[13:17:24.0764] <yozaam>
yes 

[13:17:27.0588] <mgaudet>
I wonder if it timed out

[13:17:32.0484] <yozaam>
i am not sure i build it again

[13:17:36.0673] <yozaam>
let me build and try 

[13:17:49.0453] <yozaam>
 * i am not sure i built it again

[13:17:56.0843] <mgaudet>
I was just going to submit to try; we can wait and see what it says (I'm pretty sure you're just hitting a timeout) 

[13:18:25.0314] <yozaam>
oh okay started it again

[13:18:49.0848] <yozaam>
and I'm not able to run jstests because of my python setup i guess... 

[13:19:31.0909] <yozaam>
./mach create-mach-environment didn't work

[13:19:33.0028] <mgaudet>
In a few minutes your try build should show up here: https://treeherder.mozilla.org/#/jobs?repo=try&revision=0959562084a6846fbfb178e70da6ecf0a06ba794 

[13:19:46.0315] <yozaam>
> <@mgaudet:mozilla.org> In a few minutes your try build should show up here: https://treeherder.mozilla.org/#/jobs?repo=try&revision=0959562084a6846fbfb178e70da6ecf0a06ba794

this will run all tests?

[13:20:31.0592] <yozaam>
if i have finished this, is it okay if i take a few more bugs from codetribute/good-first-bugs to get used to contributing

[13:22:34.0507] <mgaudet>
This will run a good selection of tests (all... is a lot of tests :P) 

[13:22:48.0589] <mgaudet>
for sure; at this point we're mostly done with that one so you can grab something else

[13:23:33.0639] <yozaam>
okay , I'll pick up Bug 1655110 Provide isPrivateName method to replace JSID manipulations.


[13:23:35.0308] <botzilla>
https://bugzil.la/1655110 — NEW (nobody) — Provide isPrivateName method to replace JSID manipulations.

[13:24:00.0470] <yozaam>
do i continue in the same local repo?

[13:24:08.0887] <yozaam>
with amend and submit

[13:24:22.0972] <mgaudet>
So long as you use a different patch, you can do that. 

[13:24:25.0914] <mgaudet>
*commit

[13:25:02.0936] <yozaam>
ohhh okay

[13:27:16.0723] <yozaam>
one more question -> am I asking too many questions in the IRC ? should i spend more time searching for these errors before coming here? 

[13:28:18.0724] <mgaudet>
yozaam: In the early days, I'd say better to ask than get stuck

[13:28:32.0704] <mgaudet>
we'd rather you hang around and learn and grow, than get frustrated and disappear

[13:28:52.0307] <Waldo>
You are, to be sure, commenting here more than most people are.  But that's probably to be expected if you're new and less familiar.  I don't think the level is so high it reaches a level of meaningful inconvenience.

[13:28:55.0600] <mgaudet>
and we're aware that our workflow is idiosyncratic and a big change for people

[13:30:14.0661] <yozaam>
okay, thank you -> if you guys are busy feel free to reply to my future doubts at your own pace 😅


2020-08-27
[02:55:09.0329] <Benjamin Bouvier>
how can one run the aarch64 simulator in treeherder's CI? running linux64 wasn't sufficient, turns out

[02:59:01.0809] <jandem>
Benjamin Bouvier: if you select a job on treeherder, you see the name in the bottom left corner. You can use that in `mach try fuzzy` or on Treeherder itself ("Add jobs..")

[02:59:21.0219] <jandem>
for the non-cranelift simulator job it's `spidermonkey-sm-arm64-sim-linux64/debug`

[03:04:44.0378] <Benjamin Bouvier>
jandem: ah, thanks. Is there a cranelift-specific arm64 simulator job?

[03:06:17.0880] <jandem>
Benjamin Bouvier: yes I've seen arm64cl on Try, `spidermonkey-sm-arm64-sim-cranelift-linux64/debug`

[03:07:33.0630] <Benjamin Bouvier>
jandem: great, thanks

[03:11:05.0127] <Benjamin Bouvier>
wow i always forget about how awesome is mach try fuzzy

[03:12:37.0686] <jandem>
yes it's great. `./mach try --preset sm-shell` is also useful, it runs all the linux64 SM shell jobs, including the arm64 simulator ones

[04:12:43.0124] <yozaam>
 * so right now i have two heads one for yesterdays bug and one for todays,  

i have checked out todays boookmark,

 done hg commit now if i do moz-phab submit how to make it go to a new differential? 

is it automatic since the bug id is different

[05:54:17.0284] <jonco>
jandem: the problem with slots capacity going out of sync with calculateDynamicSlots() is that we have already called prebarriers and poisoned the unused memory by the time realloc() fails so it's hard to recover from that

[05:54:59.0581] <nbp>
Question for anybody who ever wrote `callWithABI(JS_FUNC_TO_DATA_PTR(void*, …));` function call: Was it easy to manipulate, was it a source of bugs during development?

[05:55:51.0110] <evilpie>
https://labs.f-secure.com/blog/exploiting-cve-2019-17026-a-firefox-jit-bug/

[05:57:01.0287] <jandem>
jonco: where does the OOM happen again? in setSlotSpan?

[05:57:09.0190] <jandem>
(on m-c)

[05:57:13.0876] <jonco>
jandem: in shrinkSlots

[05:57:42.0939] <jonco>
this only occurs when we're reducing the allocation

[06:03:11.0153] <jandem>
jonco: still looking..

[06:09:42.0255] <jandem>
jonco: is there a reason we can't propagate the OOM similar to what growSlots does?

[06:11:31.0635] <jonco>
jandem: yeah, we've already poisoned the memory at this point so we can't fail the shrink (as far as I understand)

[06:11:38.0854] <jonco>
and we can't do this after the realloc()

[06:29:07.0247] <jandem>
jonco: if we didn't do the poisoning.. the pre-barrier would be ok to keep right?

[06:31:14.0685] <jonco>
jandem: yes I think it would, but I don't particularly like depending on that in rarely occurring situations either

[06:32:08.0790] <jonco>
jandem: where do we depend on capacity matching calculateDynamicSlots()?  it's only ever going to be great than this if it doesn't match which doesn't seem too bad (not that I know the details mind you...)

[06:35:01.0233] <jandem>
jonco: since we're shrinking, it must be realloc failing and it can't be the nursery => malloc case. If realloc fails the old buffer should still be valid..

[06:36:15.0013] <jonco>
yes

[06:36:34.0246] <jonco>
we can update the capacity and continue to use the old buffer

[06:36:59.0254] <jonco>
which is the same as what happens now, we're just lying to ourselves about the capacity ;)

[06:37:45.0344] <jandem>
oh yeah

[06:38:04.0773] <jonco>
I guess this is what we already do for the nursery case

[06:39:05.0072] <jandem>
I was concerned about this one weird OOM case being the only way for the two values to get out-of-sync, maybe I'm being paranoid

[06:41:03.0798] <jonco>
it's good to be concerned about weird OOM cases

[06:42:24.0255] <jonco>
for this I think we should pretend the realloc succeeded, update the capacity and move on

[06:43:12.0026] <jandem>
agreed

[06:43:38.0161] <jonco>
great, thanks, I'll update the patches

[06:58:30.0316] <jandem>
jonco: shapes store/imply nfixed now. I wonder if your patches could let us remove that. We'd still want a bit that said "is slot_ fixed or dynamic" so ICs don't get confused, but if that worked it could let us shrink objects more easily during tenuring/compacting

[06:58:49.0827] <jandem>
just a vague thought, I don't know how feasible but maybe worth exploring at some point

[07:00:38.0472] <jandem>
hm there are some tricky cases, so I don't know if that's possible

[07:02:17.0222] <jonco>
yeah I think we still need this at the moment - we have the slot span for dictionary objects, but this can be less than the number of fixed slots AIUI

[07:03:25.0534] <jandem>
that's true.. we'd have to get nfixed from the alloc kind

[07:06:26.0214] <jonco>
oh, that's a possibility though

[07:07:56.0904] <jandem>
one of the tricky cases is adding a fixed slot in JIT code, if a shape guard no longer implies object size

[07:09:44.0030] <jandem>
maybe that's fixable if we overhaul groups and shapes when TI is gone

[07:11:42.0997] <jonco>
I guess we would need to make shape imply object size even if it didn't store it directly

[07:17:32.0018] <jandem>
yeah

[08:11:33.0182] <Benjamin Bouvier>
what's a quick way to check if we're on a thread that can execute JS? presence of TlsContext + JSRuntime in this JSContext?

[08:11:44.0220] <Benjamin Bouvier>
(ie not a background thread, notably)

[08:14:52.0508] <iain>
I'm pretty sure it's the JSRuntime that distinguishes between script-running threads and helper threads

[08:16:10.0943] <jonco>
you can check TlsContext then check cx->isMainThreadContext()

[08:19:57.0797] <Benjamin Bouvier>
jonco: maybe a stupid question, but does this also return true for web workers threads?

[08:21:07.0667] <jonco>
yes, somewhat unfortunately 'main thread' means main JS engine thread here and is not related to main browser thread

[08:21:15.0037] <Benjamin Bouvier>
it seems the two possible kinds of JSContext are MainThread or HelperThread, so that's likely to be "yes"

[08:21:26.0548] <Benjamin Bouvier>
jonco: iain, great, thank you!

[10:12:02.0566] <yozaam>
are we expected to do moz-phab submit only after all ./mach jit-test are complete? or it is fine to just build and submit

[10:14:03.0249] <mgaudet>
yozaam: submit just means put a patch up on phabricator; if you're looking for more feedback on a patch, submit it. Otherwise, it's probably preferred you submit patches that pass tests

[10:14:19.0350] <nbp>
jorendorff:  have you seen this before: `for(r in void 0 !== t.ref && (a=t.ref), void 0 !== t.key && (o = "" + t.key), t) …;`

[10:14:39.0583] <mgaudet>
(you'll also need to submit an updated patch when manual rebasing is required) 

[10:14:49.0039] <jorendorff>
nbp: no

[10:15:17.0045] <nbp>
oh … they are using the comma operator, as returning the last value to execute code before the loop.

[10:15:37.0144] <yozaam>
> <@mgaudet:mozilla.org> (you'll also need to submit an updated patch when manual rebasing is required)

so like today, did i submit too many times ?

[10:16:09.0898] <mgaudet>
yozaam: as near as I can tell, nope

[10:16:10.0105] <yozaam>
> <@nbp:mozilla.org> jorendorff:  have you seen this before: `for(r in void 0 !== t.ref && (a=t.ref), void 0 !== t.key && (o = "" + t.key), t) …;`

is this js or c++?

[10:16:13.0105] <mgaudet>
seems fine

[10:16:22.0165] <nbp>
This is JS

[10:17:08.0143] <yozaam>
oh okay , I am still unable to get jstests to work on my machine some problems with python i am figuring that out 



[10:17:13.0461] <nbp>
Yeah … who would have thought that C developers could write better code than JS developers 🤣

[10:17:52.0324] <yozaam>
😂  i never heard of the comma operator before today

[10:18:31.0726] <nbp>
it exists in C, JS and can even be overloaded in C++, but don't tell that to Waldo .

[10:18:53.0530] <yozaam>
woww

[10:19:15.0227] <mgaudet>
yozaam: Patch looks good; one more nit. In the mean time, I'm going to submit to try for you 

[10:20:23.0844] <yozaam>
ohh okay, i will remove the this?

[10:21:33.0461] <mgaudet>
yeah; I don't think it's required there, and so should be removed

[10:21:55.0293] <yozaam>
sorry , is there somewhere i can read these best practices and design nits

[10:23:45.0867] <yozaam>
i removed this->

[10:26:09.0367] <mgaudet>
yozaam: We don't have a -great-  answer for this; for the broader mozilla codebase there's [this](https://firefox-source-docs.mozilla.org/code-quality/coding-style/coding_style_cpp.html), but SpiderMonkey has historically been developed as a separate component, as such has its own patterns and idosyncracies that aren't well written down anywhere

[10:27:32.0378] <yozaam>
thanks , i will read it

[12:30:48.0754] <tcampbell>
KaiE: we'll see what releng says, but I put in my support for uplift.

[12:31:35.0876] <iain>
Do we have a limit on the maximum number of arguments to a function?

[12:32:04.0969] <tcampbell>
baseline does

[12:32:35.0075] <tcampbell>
iain: https://searchfox.org/mozilla-central/source/js/src/jit/Jit.cpp#55

[12:34:51.0507] <iain>
Thanks, that's what I was looking for

[12:51:07.0726] <KaiE>
> <@tcampbell:mozilla.org> KaiE: we'll see what releng says, but I put in my support for uplift.

I appreciate that very much, thank you, also big kudos to sfink and jorendorff for your great help

[15:50:58.0267] <tcampbell>
jorendorff ParserAtoms hasn't blown up on us yet, so we are beginning to land the next stages. Landing stuff on that depends on ParserAtoms should be fine now. We'll fix issues that come in in-place.


2020-08-28
[03:37:39.0306] <decoder>
avandolder: (or anyone else who knows) is --enable-iterator-helpers something that should be tested by fuzzing? I just noticed it because we have a bunch of tests that use it

[05:41:00.0439] <Ms2ger>
I think it should be, yes

[06:00:54.0328] <Benjamin Bouvier>
are the JIT tested on actual aarch64 hardware?

[06:02:40.0335] <RyanVM>
we run some tests on Pixel devices, yes

[06:03:16.0698] <RyanVM>
https://treeherder.mozilla.org/#/jobs?repo=mozilla-central&group_state=expanded&searchStr=pixel%2Caarch64%2Cjit

[06:04:02.0449] <Benjamin Bouvier>
RyanVM: great, thanks

[06:04:57.0312] <jonco>
what's the status of TypedObjects in JS and will they ever be released?  ISTR something about them being needed for wasm but I'm not sure if this is still true.

[06:08:06.0012] <Ms2ger>
I believe we want it in the context of the whole wasm gc setup, though I don't know off-hand where exactly it fits in

[06:13:57.0917] <RyanVM>
jonco: safe to say we're better off letting bug 1660346 ride the trains?

[06:13:59.0425] <botzilla>
https://bugzil.la/1660346 — RESOLVED (jonco) — Intermittent js/src/jit-test/tests/gc/helper-thread-params.js | Timeout (code -6, args "") [150.0 s]

[06:15:09.0371] <jonco>
RyanVM: yeah that's a bit too invasive to uplift I think

[06:15:32.0763] <RyanVM>
thx

[06:17:02.0000] <jonco>
RyanVM: hmm, actually we should probably back bug 1657850 out of beta, if we're being careful

[06:17:03.0423] <botzilla>
https://bugzil.la/1657850 — RESOLVED (jonco) — Add a pref to control how many background threads are used

[06:18:01.0803] <jonco>
(it could only affect people if they change their about:config settings, but still)

[06:31:10.0936] <RyanVM>
we can do that

[06:33:14.0134] <RyanVM>
jonco: can you give me a good reason to throw in the commit message? :)

[06:34:57.0201] <jonco>
RyanVM: something like "possibility of crashes if users increase the maximum thread count"

[06:35:03.0739] <RyanVM>
wfm, thanks

[06:35:05.0086] <jonco>
RyanVM:  thanks :)

[06:35:33.0213] <mgaudet>
jonco: The trace on Bug 1658496 really does hint that it is the new expando slot; but the usage of said slot is relatively pedestrian, which makes me wonder if something else is corrupting it. I'm not sure how to proceed on the relatively thin amount of data we have... I suppose one option would be to land some diagnostic asserts; i.e. assert in all the proxy interfaces (for a week or so) that the expando slot always is either nullptr or a valid object pointer. 

[06:35:34.0755] <botzilla>
https://bugzil.la/1658496 — NEW (nobody) — Intermittent <test> | application crashed [@ js::MapGCThingTyped<`lambda at /builds/worker/checkouts/gecko/js/src/gc/Marking.cpp:3093:43'>(JS::Value const&, js::TenuringTracer::traverse<JS::Value>::<unnamed-tag>&&)]

[06:40:32.0282] <jonco>
mgaudet: thanks for looking into it

[06:40:52.0741] <jonco>
mgaudet: yes it's entirely likely that something somewhere is overwriting it

[06:43:09.0778] <mgaudet>
Actually: Before I try to land some diagnostics, let me try the same idea, but on try

[06:43:22.0922] <mgaudet>
See if I can't get that to happen

[06:43:25.0941] <jonco>
good plan

[06:43:34.0275] <jonco>
bug 1660965 should give us some more information

[06:43:37.0717] <botzilla>
https://bugzil.la/1660965 — RESOLVED (jonco) — Report corrupted JS::Values in crash data

[06:43:51.0173] <jonco>
but not enough data to be useful yet

[06:53:16.0887] <mgaudet>
jonco: Given an object pointer, is there a reasonable test for 'this is probably a valid object pointer that's not collected'? Or should I just dereference some fields? 

[06:53:31.0017] <jonco>
yes, one sec...

[06:54:25.0372] <jonco>
js::gc::IsCellPointerValid

[06:54:58.0654] <jonco>
that check is a pointer looks reasonable and does some sanity checks

[06:55:00.0356] <decoder>
> <@bnjbvr:mozilla.org> are the JIT tested on actual aarch64 hardware?

We also fuzz on actual aarch64 hardware (AWS graviton cpus)

[06:55:20.0623] <jonco>
 * that checks is a pointer looks reasonable and does some sanity checks

[06:59:39.0287] <mgaudet>
jonco: fantastic. Thanks :D 

[07:00:33.0649] <jonco>
np!

[07:10:33.0613] <jorendorff>
treeherder seems to be running an old version of a non262 test here v

[07:10:36.0226] <jorendorff>
 * treeherder seems to be running an old version of a non262 test here https://treeherder.mozilla.org/#/jobs?repo=try&revision=173d5363695d1d57757814ac56622d1c6ea1d9cf

[07:11:24.0538] <jorendorff>
the test had a bug

[07:11:31.0685] <jorendorff>
adam fixed it locally, passes locally, pushed the fix

[07:11:51.0277] <jorendorff>
but it still gives the same TypeError as before on CI even though the code is fixed...

[07:17:17.0829] <jorendorff>
has anyone ever seen this?

[07:19:11.0599] <jorendorff>
found it, `window.name`

[07:20:43.0952] <jorendorff>
for only the 19 millionth time

[07:21:24.0321] <jorendorff>
the local TypeError that Adam fixed was unrelated to the TypeError with the identical error message that happens for the "fixed" code in the browser

[07:22:03.0402] <jorendorff>
we should have a special error message just for assigning to `window.name`, "assigning to `window.name` lol"

[07:36:45.0995] <Benjamin Bouvier>
how does one run WPT tests with the shell?

[07:39:13.0415] <Benjamin Bouvier>
@bnjbvr: add the `--wpt=enabled` to jstests.py it seems

[07:48:19.0001] <Benjamin Bouvier>
> ModuleNotFoundError: No module named 'mozversioncontrol'

[07:48:22.0177] <Benjamin Bouvier>
ok, it's one of these days

[07:54:30.0974] <Benjamin Bouvier>
`mach jstests` works \o/

[08:05:49.0401] <nbp>
confession: Start converting callWithABI to include the function signature … after a day, only 8% converted … Time to think whether it might be possible to automate things a bit.

[08:05:51.0855] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[08:11:55.0033] <Benjamin Bouvier>
hmmm, could it be that `--wpt=enabled` isn't taken into account when searching a test case by name with `jstests.py`?

[08:18:44.0456] <tcampbell>
arai++ for making Stencil data structures support moving across threads

[08:18:47.0171] <tcampbell>
 * arai++ for making Stencil data structures support moving across threads!

[08:21:28.0683] <jorendorff>
out of curiosity, anyone know where VEC comes from here? https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S;h=bd5dc1a3f3f9bc49780e7cd0efb141549b7d53af;hb=HEAD#l403

[08:24:14.0162] <jorendorff>
(i'm tracing a particular baseline jitcode machine instruction back to the BaselineCodeGen line that emitted it, using pernosco)

[08:24:31.0586] <jorendorff>
(there's a memmove in there, under Linker::newCode)

[08:26:44.0368] <jorendorff>
oh wow it worked. hmm

[08:27:17.0511] <froydnj>
huh, my copy of glibc says it's defined in that file

[08:27:39.0422] <arai>
VEC seems to be zmm

[08:28:34.0288] <froydnj>
jorendorff: maybe https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/x86_64/multiarch/memmove-avx-unaligned-erms.S;h=e195e93f153c9512fa0255ba888214f4bec80fa6;hb=HEAD#l3

[08:29:02.0029] <arai>
oh, maybe I'm looking wrong file then

[08:29:17.0348] <arai>
it says ymm

[08:29:43.0000] <jorendorff>
oh heck. nice

[08:30:18.0898] <jorendorff>
froydnj: arai thanks! i worked around it without knowing which register it was, but this is better

[08:33:09.0747] <iain>
jorendorff: This might be useful to you: https://github.com/iainireland/jitsrc

[08:33:59.0962] <iain>
It's a python plugin I wrote for rr that skips backwards through the memcpys to find the original source of a jit instruction

[08:35:58.0130] <nbp>
I wanted to do the same thing but for crash-stat … I should get back to it at one point.

[08:36:54.0606] <nbp>
https://github.com/nbp/seqrec — aimed at recording the stack at code generation time, to reconstruct the code-generator path based on the code surrounding the program counter.

[08:38:46.0457] <froydnj>
> <@iain:mozilla.org> jorendorff: This might be useful to you: https://github.com/iainireland/jitsrc

this is very cool

[08:40:40.0848] <mgaudet>
jonco: I am on the trail of that crash; hope I will have something for you soooonish.

[08:40:57.0944] <jonco>
mgaudet: nice!

[08:41:48.0072] <mgaudet>
I have however, wandered into the beartrap of `JSObject::swap`  so we shall see

[08:43:15.0134] <jonco>
oh, yeah I have spent time in there

[08:44:15.0167] <sfink>
iain: ooh, that's *way* better than what I've been using. Mine is more manual, one copy at a time, and really only automates one of the memcpy patterns you have encoded in `jitsrc`.

[08:46:11.0748] <nbp>
iain: why not moving it into the gdb directory of js/src ?

[08:49:03.0298] <iain>
nbp: Yeah, maybe I should

[08:49:12.0980] <jorendorff>
iain: well this is just awesome

[08:50:32.0424] <jorendorff>
I don't suppose there's a way i can paste this into pernosco somehow

[08:51:03.0225] <iain>
I have no idea

[08:51:15.0508] <iain>
I've spent about an hour playing with pernosco in my life

[08:54:23.0575] <jorendorff>
ooh, maybe this ability should be built into rr

[08:55:00.0658] <nbp>
sfink: I am sure you could ask roc in #rr:mozilla.org whether there is a way to do it. However both rr and pernosco would have one failure mode if the data being tracked has the same value before and after the memcpy/memmove. (which does not happen frequently in practice)

[08:55:02.0654] <jorendorff>
"yep, a watchpoint just tripped in memmove. follow the data back? [y/n]"

[08:55:39.0085] <jorendorff>
 * "a watchpoint just tripped in memmove. follow the data back/forward? [y/n]"

[08:57:19.0750] <sfink>
jorendorff: if really want it, yes, you can cut & paste extension code into Pernosco. I was doing it for a while. I can dig up my notes -- it involves base64 encoding and things. ;-)

[08:57:24.0934] <tcampbell>
jorendorff: are you able to take a look at matt's computed-property/bigint patch today? https://phabricator.services.mozilla.com/D87627

[08:57:38.0206] <tcampbell>
it is the last off-thread gc allocation for parsing

[08:58:02.0782] <jorendorff>
tcampbell: definitely

[08:58:16.0046] <jorendorff>
i owe arai a quick review first

[08:58:59.0554] <tcampbell>
before monday would be helpful. It doesn't need to go in this moment

[09:04:42.0504] <sfink>
ah, found it. That script ^ is what I paste the extension code into, and it prints out two lines to cut & paste (*individually*) into the Pernosco gdb window.

[09:15:36.0921] <tjr>
lth: I put some questions on https://phabricator.services.mozilla.com/D85624 for you

[09:17:33.0997] <mgaudet>
jonco: I know -what- is happening, at a high level. However, fixing it is... definitely not going well. `::swap` is confusing to say the least. I will write up what I know on the bug and ni? you. 

You're right the slot is being corrupted; frankly, I'm surprised this doesn't blow up more. 

[09:17:50.0964] <mgaudet>
but because private fields are only enabled in a subset of tests, I guess this path doesn't get triggered frequently

[09:18:47.0833] <jonco>
mgaudet: sure, ni? me and I'll take a look

[09:20:22.0922] <mgaudet>
thanks 

[09:30:38.0586] <jonco>
mgaudet: thanks for tracking this down!

[09:31:43.0111] <mgaudet>
jonco: I did not foresee this problem :S 

[09:31:49.0337] <sfink>
in a way it makes sense -- private fields have weakmap semantics, so I guess they get to have weakmap bugs too. (Weakmaps and `::swap` don't get along all that well.)

[09:32:13.0779] <jonco>
hmmm, I don't know how to fix this though

[09:32:27.0682] <jonco>
how *do* you swap two objects when one is a proxy and the other not?

[09:33:02.0928] <mgaudet>
I... uhhh 

[09:33:04.0706] <mgaudet>
I don't know

[09:33:25.0873] <mgaudet>
nor do I understand why this works before hand ;P 

[09:33:36.0233] <mgaudet>
 * nor do I understand why this works beforehand

[09:33:39.0235] <jonco>
yeah, don't we have the same problem for the proxy private value?

[09:34:02.0101] <mgaudet>
it's handled specially inside of initExternalValueArrayAfterSwap  

[09:34:27.0383] <mgaudet>
somehow (not sure why?) it ends up being the first element of the values array https://searchfox.org/mozilla-central/source/js/src/vm/JSObject.cpp#1581

[09:34:46.0056] <lth>
tjr: ok.  i'm out today but i'll get to it on monday.

[09:35:18.0609] <mgaudet>
oh; https://searchfox.org/mozilla-central/source/js/src/vm/JSObject.cpp#1546-1548 

[09:35:18.0892] <jonco>
ok, can we handle the exapndo slot in the same way?

[09:35:43.0191] <mgaudet>
I imagine so? I guess I don't entirely understand semantically how this all fits together, but... seems like maybe? 

[09:35:51.0557] <jonco>
I guess it corresponds to the first fixed slot in the NativeObject layout

[09:37:01.0626] <tcampbell>
Swapping proxies is the normal adopt case. But they are CCW proxies

[09:37:27.0086] <jonco>
hm, so it's swapping a proxy and a native object that is unusual?

[09:38:08.0813] <tcampbell>
Sorry, that proxy<->nativeobject is normal

[09:38:23.0369] <jonco>
oh, right, wrapper and wrapped object

[09:38:43.0352] <mgaudet>
😬 

[09:40:13.0233] <mgaudet>
So. In this case we need to do two things: 1) The object that's becoming a wrapper needs to have its private fields moved to the (new?) expando object. 2) the private fields on the expando object need to be pasted onto the native object 

[09:40:22.0247] <mgaudet>
Hurk. 

[09:45:02.0232] <mgaudet>
tcampbell: to clarify: We take a CCW and replace it with a native object under some circumstances (adoption? Or just `.domain` manipulations?) 

[09:46:18.0079] <tcampbell>
mgaudet I present you https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptNode

[09:46:47.0097] <jorendorff>
👑 👼 🎶 ahhhhhh

[09:46:49.0813] <tcampbell>
The other key case is WindowProxy changes during navigation

[09:47:20.0560] <tcampbell>
Which thanks to fission are even weirder because that Window may change process

[09:47:35.0637] <jorendorff>
Right, I think we want navigation _not_ to affect private properties

[09:47:40.0784] <mgaudet>
O.o 

[09:47:58.0042] <jorendorff>
rather, the private fields are attached to the proxy itself

[09:48:02.0774] <jorendorff>
and we just leave them there

[09:48:15.0167] <nika>
It just replaces the JS object with a different wrapper object. All of the cross-process stuff is in DOM code, and I don't think should be super relevant to the JS engine (IIRC)

[09:48:21.0636] <jorendorff>
they're for the benefit of the realm where that proxy lives, they're not being pushed to the unwrapped window

[09:48:59.0036] <jorendorff>
agree

[09:49:16.0831] <mgaudet>
jorendorff: Ok; I guess I am just wondering about reasoning-by-identity (weakmap wise): If one of your nodes is adopted out from under you... then you adopt it back: is it the same node? 

[09:49:17.0519] <jorendorff>
adoptNode, though, I'm not so sure

[09:49:30.0555] <mgaudet>
(will you even get the same proxy?) 

[09:49:31.0789] <jorendorff>
I think it is supposed to be the same node object

[09:49:51.0833] <jorendorff>
I don't know if it works. I expect it does, though.

[09:50:19.0366] <tcampbell>
The trouble with adoptNode is that it is defined without being aware compartments are an implementation detail of our engine

[09:50:22.0842] <jorendorff>
The compartment maps keep those entries as long as the objects are both reachable...

[09:51:38.0237] <mgaudet>
So: swap: You've got a CCW to an object in another compartment. Then you swap. Now the guts of that other object are in your compartment, and the other compartment has a CCW to you -- the other object becoming a CCW

[09:52:07.0708] <mgaudet>
We treat CCWs as transparent proxies  though, so they won't have expandos (sorry thinking aloud) 

[09:52:16.0367] <mgaudet>
and the private fields will magically come across as we hope

[09:52:32.0131] <mgaudet>
the only thing is a scripted proxy  really: they're the only ones that use the expando object... 

[09:52:34.0301] <jorendorff>
I think that is right.

[09:52:59.0156] <jorendorff>
It should Just Work™️

[09:52:59.0384] <mgaudet>
You can't swap a scripted proxy with its target; not a thing

[09:53:10.0331] <jorendorff>
Should™️ 

[09:54:12.0052] <mgaudet>
So... can you ever actually swap a scripted proxy? If not, we should be able to ensure that the expando slot is always null, and corectly initialize it

[09:54:16.0961] <mgaudet>
 * So... can you ever actually swap a scripted proxy? If not, we should be able to ensure that the expando slot is always null, and correctly initialize it

[09:56:39.0217] <mgaudet>
I'm going to put together a patch. 

[10:04:58.0729] <tcampbell>
I don't think so. Most swap cases never happen

[10:05:46.0533] <tcampbell>
https://searchfox.org/mozilla-central/source/js/src/vm/JSObject.cpp#1522

[11:41:35.0349] <mythmon>
Hi there. I just read your latest newsletter, and there is a lot of exciting stuff going on! There was a mention that WarpBuilder "compiles CacheIR to MIR". Is that the same MIR that Rust uses to compile, or is that a more generic use of the term for an intermediary representation?

[11:42:41.0085] <evilpie>
mythmon: it just means mid level IR and has nothing do to with rust.

[11:42:56.0929] <tcampbell>
vaguely similar level of abstraction though

[11:43:23.0331] <mythmon>
Ok, that's what I expected. Thanks for the info!

[11:43:39.0944] <tcampbell>
we talk about "MIR" in this context because the existing IonMonkey JIT has the existing mid-level IR.

[11:43:57.0272] <tcampbell>
The WarpBuilder project replaces half of IonMonkey while preserving the backend (for now!)

[12:40:00.0402] <tcampbell>
/me wonders if EnsureDtoaState should just be part of JSContext setup

[13:09:13.0812] <Waldo>
I think it _has_ been part of runtime setup in the past, but I could be mistaken.

[13:52:49.0526] <sfink>
mccr8: would you be available for a quick zoom call? It's about GC/CC scheduling and a question about how the CC works? I think it'd be faster than typing it out.

[14:08:15.0347] <mgaudet>
confession: Mostly done my blog post about how generators work. Need to fill in some gaps about environments on monday tho.

Next up: taking a closer look at async functions 

[14:08:18.0063] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:26:51.0231] <mgaudet>
confession: Landed bigint conversion patch, which unblocks stencil stuff! 


2020-08-29
[10:40:41.0300] <yozaam>
Hey could anyone point me to a good resource to understand all about the lifecycle and interactions of bytecode with all components in spidermonkey? I read the MDN pages 

[10:41:39.0724] <yozaam>
mgaudet: I understood a little bit of whats happening reading the bug https://bugzilla.mozilla.org/show_bug.cgi?id=1478034 and patches but still not clear about many thins 

[10:41:56.0677] <yozaam>
 * mgaudet: I understood a little bit of whats happening reading the bug https://bugzilla.mozilla.org/show_bug.cgi?id=1478034 and patches but still not clear about many things

[10:47:42.0736] <iain>
I'm not sure if we have a resource written down. Very fast outline: the parser/bytecode generator take JS source and produce bytecode. Each of the execution tiers takes bytecode as an input, but does different things with them. The interpreter / baseline interpreter execute one opcode at a time. The baseline compiler compiles an entire script by translating each opcode into native code. The highest tier (currently Ion, but switching over to Warp very soon) takes bytecode (and some other things) as input, converts it into MIR (mid-level intermediate representation), optimizes it a bunch, and then generates native code.

[10:50:42.0702] <iain>
 * yozaam: I'm not sure if we have a resource written down. Very fast outline: the parser/bytecode generator take JS source and produce bytecode. Each of the execution tiers takes bytecode as an input, but does different things with them. The interpreter / baseline interpreter execute one opcode at a time. The baseline compiler compiles an entire script by translating each opcode into native code. The highest tier (currently Ion, but switching over to Warp very soon) takes bytecode (and some other things) as input, converts it into MIR (mid-level intermediate representation), optimizes it a bunch, and then generates native code.

[10:52:30.0362] <iain>
They all need to ask questions about the bytecode. The goal of the bytecode interface is to put a layer between the code asking questions, and the bytecode representation itself, so that it's easier to modify the bytecode without rewriting all the code that depends on it

[10:54:42.0969] <iain>
(A couple other examples of consumers: the debugger uses bytecode, and we have some analyses that examine the bytecode to determine properties of the script)

[11:30:44.0136] <yozaam>
Thanks a lot that was really helpful

[11:31:22.0258] <yozaam>
basically it is just a list of opcodes in a stack?

[11:31:49.0235] <yozaam>
and the interface lets us manipulate the list

[11:36:10.0613] <iain>
It is a list of opcodes. They are not in a stack, but they manipulate values on a stack.

[11:37:54.0735] <iain>
So for example if you open the shell and type `function foo(a,b) { return a + b; } dis(foo)`, you can see the `dis`assembled bytecodes for `foo`, which are `GetArg 0; GetArg 1; Add; Return`

[11:38:15.0216] <iain>
We start executing at the beginning and continue until something tells us to stop.

[11:39:14.0700] <iain>
`GetArg 0` gets the first argument and pushes it on the stack. `GetArg 1` does the same with the second argument. `Add` takes two arguments off the stack, adds them together, and pushes the sum back on the stack. `Return` takes the value on the stack and returns it to the caller.

[11:39:41.0329] <yozaam>
ohhhh makes sense, thank you

[14:28:15.0214] <yozaam>
why do many files have -inl 

does it mean these have inline functions ?

[14:28:51.0834] <yozaam>
ScriptLocation.h and ScriptLocation-inl.h

[14:29:22.0179] <yozaam>
 * ScriptLocation.h and ScriptLocation-inl.h is it because we don't include function definition in normal headers?

[14:32:33.0410] <yozaam>
 * ScriptLocation.h and ScriptLocation-inl.h is it because we don't include function definition in normal headers? ( I realized these files are not part of the current codebase -> but there are others i found like ParseContext-inl.h

[14:37:01.0255] <Waldo>
yozaam: C++ always requires stuff be declared before it's used.  You can't have `JSScript* s = nullptr;` without having already observed a declaration of `JSScript`.

Sometimes, C++ also requires stuff be _defined_ before it's used.  `JSString* s = nullptr;` is fine with just a declaration; `JSString* s = ...; std::cout << s->length() << std::endl;` requires `JSString` also be defined.

But _defining_ things, means the majority of what's in them also needs to be defined, too.  And the more stuff that has to be defined, the more inclusion dependencies are required.  So ideally, if you can rely on a declaration but not a definition, that's usually preferable.  Putting inline functions that have large dependencies in `-inl.h` files helps reduce dependencies, to only the files that need those inline functions.

But there's another problem: what about an inline function in a class that depends on the definition of another class, but that class _itself_ has an inline function that requires the definition of the first class?  Toy example:  `struct A { static size_t sizeOfB() { return sizeof(B); } }; struct B { static size_t sizeOfA() { return sizeof(A); } };`.  In this case, the inline function in the first class (at minimum) needs to be _declared_ in the class body but _defined_ after `B` is defined: `struct A { static inline size_t sizeOfB() { return sizeof(B); } }; struct B { static size_t sizeOfA() { return sizeof(A); } }; /* static */ inline size_t A::sizeOfB() { return sizeof(B); }`.  In cases like this, we put the inline function definition in a `-inl.h` file -- and we do it for both `A::sizeOfB` and `B::sizeOfA`, symmetrically, so that our includes aren't implicitly encoding unpredictably (to the developer) giving one class priority over another.  (And the additional benefit is, only the files that need these inline functions have to include the `-inl.h` files -- so dependencies are reduced generally.)

[14:39:27.0973] <Waldo>
In a better language than C++, there wouldn't be this requirement of things being defined at time of their use.  But C++, deriving from C, has this conceit that everything must be defined at the time it is used, so that compilers can compile code by just reading in linear order start to finish basically.  So, we have to play these games to make sure things are defined when they are used, and ideally are _not_ defined (if they are complicated or have costly dependencies) until they are needed.

[14:41:23.0374] <yozaam>
Thank you very much! is this called a cyclic dependency?

[14:43:10.0434] <Waldo>
yozaam: Arguably, yes.  Terminologically, I think the quibbling pedantic definition would probably be "no" -- because `A` depends only only a subset of `B`, and vice versa.

[14:43:37.0130] <yozaam>
oh ok , so we just import that subset to both of them in advance and there is no cycle

[14:44:20.0135] <Waldo>
yozaam: In particular, `A` and `B` don't depend on the full definition of the other, they require that the other be "complete" -- their definition is required, but every member function within them does not have to be defined.

[14:45:20.0732] <yozaam>
I think i understood,

[14:45:20.0779] <Waldo>
Past the end of a class or struct body, and inside of member and static functions within those bodies, a class or struct is "complete".  Before the definition of the class or struct, or in the class or struct body but not inside a function defined within that struct body, a class or struct is not complete.

[14:46:18.0311] <Waldo>
("complete" is C++ term of art, I'm spewing C++ language fine-grained details at you, I would avoid it if I really could but I'm not sure I can, so I'm trying to be precise but also understandable without deep understanding of C++.)

[14:46:33.0261] <yozaam>
ohh okay , I think  i got it

[14:46:54.0222] <Waldo>
(back shortly)

[14:46:54.0664] <yozaam>
thank you very very very much!

[15:21:41.0457] <Waldo>
 * yozaam: C++ always requires stuff be declared before it's used.  You can't have `JSScript* s = nullptr;` without having already observed a declaration of `JSScript`.

Sometimes, C++ also requires stuff be _defined_ before it's used.  `JSString* s = nullptr;` is fine with just a declaration; `JSString* s = ...; std::cout << s->length() << std::endl;` requires `JSString` also be defined.

But _defining_ things, means the majority of what's in them also needs to be defined, too.  And the more stuff that has to be defined, the more inclusion dependencies are required.  So ideally, if you can rely on a declaration but not a definition, that's usually preferable.  Putting inline functions that have large dependencies in `-inl.h` files helps reduce dependencies, to only the files that need those inline functions.

But there's another problem: what about an inline function in a class that depends on the definition of another class, but that class _itself_ has an inline function that requires the definition of the first class?  Toy example:  `struct A { static size_t sizeOfB() { return sizeof(B); } }; struct B { static size_t sizeOfA() { return sizeof(A); } };`.  In this case, the inline function in the first class (at minimum) needs to be _declared_ in the class body but _defined_ after `B` is defined: `struct A { static inline size_t sizeOfB(); }; struct B { static size_t sizeOfA() { return sizeof(A); } }; /* static */ inline size_t A::sizeOfB() { return sizeof(B); }`.  In cases like this, we put the inline function definition in a `-inl.h` file -- and we do it for both `A::sizeOfB` and `B::sizeOfA`, symmetrically, so that our includes aren't implicitly encoding unpredictably (to the developer) giving one class priority over another.  (And the additional benefit is, only the files that need these inline functions have to include the `-inl.h` files -- so dependencies are reduced generally.)


2020-08-31
[07:02:05.0324] <nbp>
confession: Running a script to simplify the manual process of updating callWithABI call sites, by copying the signature of the called function next to callWithABI use. (the grep result of the function name). This way, no need to dig in tons of files to do more copy and paste.

[07:02:08.0517] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[07:08:53.0488] <nbp>
tcampbell: any reason to check the pointer size and the endianness, when the buildid is already covering the cache invalidation?

[07:09:42.0729] <evilpie>
nbp: build IDs are the same for every platform

[07:10:01.0070] <tcampbell>
just a distrust of buildids

[07:10:25.0046] <tcampbell>
https://hg.mozilla.org/mozilla-central/firefoxreleases

[07:10:33.0697] <nbp>
build id contains a timestamp, which depends when the build was made, the likelyhood of having builds at the same seconds sounds low, unless we share it across platforms?

[07:10:41.0086] <tcampbell>
we share apparently

[07:11:09.0429] <nbp>
apparrently … ok, … keep going then

[07:11:10.0650] <tcampbell>
(to make crashstats, telemetry, etc more predictable)

[07:11:21.0684] <jandem>
also the shell has just "JS-shell" as build ID :p this could matter for stencil at some point

[07:11:24.0110] <tcampbell>
see the `firefoxreleases` link

[07:28:46.0928] <jcristau>
nbp: the build id is the push timestamp

[07:28:50.0186] <jcristau>
not build

[08:05:01.0992] <nbp>
s/build/push/

[08:05:17.0037] <nbp>
 * s/build/push/ — just a simple suggestion :P

[09:03:31.0516] <Benjamin Bouvier>
note we have some code in wasm for our internal cache, using both the build id and some CPU id

[09:03:33.0869] <Benjamin Bouvier>
maybe that can be reused

[09:04:15.0873] <tcampbell>
Unifying the ID would be nice. The wasm things adds cpu arch too

[11:42:01.0282] <mccr8>
sfink: did you ping me about something on Friday? I was on PTO and saw the notification but didn't look at it. Now I can't figure out any way to see prior notifications I got.

[11:44:12.0702] <iain>


If I search for your name, I see this from Friday:
> mccr8: would you be available for a quick zoom call? It's about GC/CC scheduling and a question about how the CC works? I think it'd be faster than typing it out.


[11:44:41.0926] <mccr8>
iain: thanks. I'll have to remember that in the future.

[11:55:21.0308] <sfink>
mccr8: yes, I'd still like to talk if you're around

[11:56:22.0447] <sfink>
(and thanks iain, I've run into the same problem. There's a notifications bell icon in the top right that usually gives me what I need, but sometimes... doesn't.)

[11:57:06.0432] <mccr8>
sfink: I'm free now until 3:30pm today

[11:57:42.0437] <sfink>
ok. Right now I would have to interrupt it to go check on the grill, so I'll ping you after lunch.

[11:58:33.0818] <sfink>
argh. How can I force `mach clang-format` to Just Work instead of whining about an old version that it errors out when trying to update? Sadly not that uncommon of a problem.

[12:01:24.0373] <sfink>
ooh. "Manually" installing clang-tidy worked. `mach artifact toolchain --bootstrap --from-build linux64-clang-tidy` and then say "oops, I need that in ~/.mozbuild/clang-tools/ not here" and fix it.

[13:39:02.0354] <sfink>
mccr8: available now? I just sent a zoom invite

[13:39:38.0300] <mccr8>
sfink: sure

[13:40:33.0261] <sfink>
bug 1662254

[13:40:34.0667] <botzilla>
https://bugzil.la/1662254 — ASSIGNED (sfink) — Move CC/GC scheduling to separate header

[14:06:15.0249] <mgaudet>
confession: mostly done blog post about generators. 

[14:06:18.0290] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:06:59.0478] <mgaudet>
If anyone wants to volunteer to give it a pass let me know. I'm also curious about venue. Currently planning on dumping this on my own blog, but wondering if this ought to go on spidermonkey.dev, or elsewhere? 

[14:09:13.0955] <iain>
mgaudet: I like reading things

[14:09:24.0131] <mgaudet>
Sure

[14:11:12.0088] <Waldo>
mgaudet: Tag me in too, I don't write as much stuff as I wish I could.

[14:22:46.0936] <sfink>
mgaudet: I'm up for dumping on your wor.... uh, I mean to say, I like proofreading.

[14:23:06.0802] <mgaudet>
sfink: Heh; will ping you with link via DM 

[14:25:20.0386] <Waldo>
tcampbell: \o/ that code was such hot garbage

[14:28:45.0567] <tcampbell>
ha!

