2021-03-01
[23:45:04.0866] <arai>
is disk image or something to replicate "linux32 SM(p)" job's env available somewhere?

[23:47:28.0895] <arai>
I'm trying to update the old VM that had been able to build it, but looks like the env seems to be lost/broken during upgrade

[23:48:21.0041] <arai>
it took 1 hour and looks like it's almost there.  but I think the next time I'll bump into similar issue and I want smarter solution

[00:50:32.0829] <arai>
hm, successfully built, but it fails because of `error while loading shared libraries: libnspr4.so: cannot open shared object file: No such file or directory`

[00:50:56.0177] <arai>
`libnspr4.so` exists in the same directory as `js`, and both are ELF 32-bit

[00:56:39.0659] <arai>
will try without `--enable-nspr-build`

[01:26:27.0748] <jandem>
arai: this is what I use: https://paste.mozilla.org/f7HyOdwb - I think only the `--target=i686-pc-linux` is relevant

[01:28:33.0692] <arai>
jandem: thanks. yeah, the build option isn't much troublesome.  but the package/library to make the cross compile work is troublesome

[01:33:40.0239] <jandem>
I used to install `g++-multilib` but I don't know if that's still necessary with mach builds

[01:33:40.0830] <arai>
sorry, to be clear, now I'm using autospider, and that's why it had `--enable-nspr-build`

[01:33:52.0341] <arai>
oh

[01:35:51.0095] <arai>
I guess I should switch to `mach build` then

[01:36:38.0890] <jandem>
maybe bug 1649845 would help..

[01:36:44.0738] <arai>
(I just realized that the gcc dependency is spidermonkey job specific

[01:36:45.0236] <botzilla>
https://bugzil.la/1649845 — NEW (nobody) — Run autospider.py under mach

[01:37:15.0670] <arai>
yeah, thanks :)

[04:13:35.0062] <jonco>
jandem: You know how we discard JIT code at the start of GC?  I'm wondering whether it would be better to do this when sweeping, to avoid processing JIT code that would get collected anyway.  What do you think?

[04:18:02.0644] <jandem>
jonco: for JIT code that isn't dead, it means we would mark/trace more things? interesting idea though, we could measure to see if it makes a difference

[04:20:12.0965] <jonco>
oh of course, this would keep more JIT code alive

[04:22:39.0813] <jandem>
our heuristics for this aren't great, I'd like to have a mechanism where code that is used all the time won't be discarded. One approach is a trampoline that marks the code as "recently used" and then the next gc can discard JIT code for scripts still using the trampoline

[04:22:54.0449] <jandem>
/me back in a bit

[04:42:41.0340] <jonco>
yes, that sounds like a nice approach

[05:07:13.0677] <tcampbell>
jonco: out of curiosity, what putting environmentShape in Scope header-word be an option?

[05:38:18.0807] <jonco>
tcampbell: that would require creating another update phase for compacting GC since currently scopes and shapes are updated in the same phase

[05:38:41.0723] <jonco>
tcampbell: there's a comment here: https://searchfox.org/mozilla-central/source/js/src/gc/GC.cpp#2590-2594

[05:42:25.0704] <tcampbell>
jonco: thanks. I'll revert the change and rework the other patches

[05:43:13.0162] <tcampbell>
(our objective is to make it a bit easier to access binding-names without switch-statements all over for ScopeKind, but there are other ways to do that)

[05:43:52.0068] <jonco>
tcampbell: thanks

[05:44:25.0640] <jonco>
tcampbell: sorry, I know this is an annoying constraint

[05:45:05.0855] <tcampbell>
no worries, I did this because other places were also having annoying constraints ;)

[06:06:44.0045] <jonco>
software development in a nutshell :)

[06:15:20.0170] <tcampbell>
ha

[06:38:27.0666] <jkratzer>
does anyone know if it's possible to use websockets in xpcshell?  Any attempts to initialize a websocket return a `NS_ERROR_FAILURE`

[06:49:32.0126] <jandem>
jkratzer: maybe try #necko:mozilla.org ?

[06:50:04.0902] <jkratzer>
jandem: will do - thanks jandem 


2021-03-02
[02:36:46.0064] <wraitii>
Hello: quick sanity check: is it legal to have a function declare a local JS::RootedValue, and return that as a JS::Value ?

[02:37:21.0540] <wraitii>
(https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/docs/GC%20Rooting%20Guide.md#return-values seems to say so)

[02:39:43.0773] <jonco>
wraitii: yes, in general we return the raw type

[02:40:14.0342] <jonco>
wraitii: sometimes we pass a MutableHandle<> to a function, and that gets set to return a value

[02:41:22.0215] <wraitii>
k good. I'm converting some from the latter to the first

[02:41:34.0698] <wraitii>
(for unrelated reasons it's more convenient for me here)

[03:29:58.0577] <jandem>
jonco: ping?

[03:30:10.0888] <jonco>
jandem: hey

[03:32:24.0931] <jandem>
jonco: hey, I have a patch stack removing groups. It was green on central tip from yesterday (I think) but today I get pre-barrier verifier failures related to ShapeTables on the part that moves the ShapeCachePtr from BaseShape to Shape. Can you think of anything obvious that changed?

[03:32:53.0502] <jandem>
I'm wondering if I need a pre-barrier when moving the table to the new child shape, but not sure why that wasn't caught before

[03:34:07.0450] <jonco>
you will need a barrier if you're overwriting the pointer from a live GC thing

[03:34:38.0894] <jonco>
and yes, bug 1694209 landed yesterday although I don't know why it would have precipitated this exactly

[03:34:41.0843] <botzilla>
https://bugzil.la/1694209 — RESOLVED (jonco) — Stop the pre-write barrier accessing the mark stack directly

[03:35:59.0516] <jandem>
that makes sense, it looks like it made the verifier more precise for some reason

[03:36:42.0503] <jonco>
good news I guess!  

[03:37:49.0251] <jonco>
although I'm wondering whether I broke the verifier somehow

[03:39:52.0374] <jandem>
jonco: I wonder if the code currently happens to trigger the pre-barrier [here](https://searchfox.org/mozilla-central/rev/3f97afc8db535f9b0232222cb48cc4cbf8334c76/js/src/vm/Shape.cpp#155) when replacing the base shape from owned (owned the table) to unowned

[03:40:11.0335] <jandem>
 * jonco: I wonder if the code currently happens to trigger the pre-barrier [here](https://searchfox.org/mozilla-central/rev/3f97afc8db535f9b0232222cb48cc4cbf8334c76/js/src/vm/Shape.cpp#155) when replacing the base shape from owned (the one that owned the table) to unowned

[03:41:13.0508] <jonco>
yes, that will trigger a barrier

[03:42:01.0781] <jonco>
but also, I think I did break the verifier

[03:42:35.0284] <jandem>
do you think I should add the pre-barrier or is it an issue with the verifier?

[03:43:42.0911] <jonco>
let me make a patch to address this and we can see if that fixes it

[03:44:06.0264] <jonco>
unless there is obviously a missing barrier, in which case we can think about why that isn't caught

[03:46:30.0836] <jandem>
jonco: thanks! the table only contains shapes that are also reachable through the parent links (see also the `canSkipMarkingShapeCache` optimization), I wonder if that makes it not an issue in practice without the verifier

[03:47:15.0206] <jonco>
yes, that's quite possible

[03:47:32.0618] <jonco>
if the shapes are never actually removed from the graph then it probably doesn't matter

[03:51:42.0809] <jandem>
great, hopefully the verifier patch will fix it then

[04:01:14.0014] <jonco>
jandem: try that ^

[04:08:31.0747] <jandem>
jonco: yes that fixes it!

[04:08:39.0401] <jonco>
great!

[04:08:43.0496] <jonco>
I'll file a bug

[04:09:38.0976] <Ms2ger>
Got a surprisingly efficient build today

[04:09:49.0801] <Ms2ger>

```
 8:42.13 Overall system resources - Wall time: 521s; CPU: 0%; Read bytes: 0; Write bytes: 0; Read time: 0; Write time: 0
```

[04:11:09.0312] <jandem>
hah

[08:10:02.0687] <jorendorff>
Hi everyone — quick announcement...

[08:11:06.0029] <jorendorff>
I'm leaving Mozilla after 13 years. My last day will be next Friday.

[08:12:31.0391] <jorendorff>
That is so hard to say. It's hard to leave this team.

[08:13:27.0297] <sfink>
Ouch. You will be greatly missed.

[08:15:35.0748] <mgaudet>
Woah

[08:17:21.0405] <jandem>
what sfink said. I think you were the first to help me out when I joined IRC as a contributor years ago

[08:21:45.0833] <iain>
Ouch. Rough news for SM; hopefully great news for wherever you end up. It won't be the same without you.

[10:02:20.0768] <wraitii>
I have a bit of a build system question: we ran into a 0 A.D. compilation issue on some linux distributions were people wanted to used the system-provided SM version. The ICU headers are provided alongside the SM headers, and they conflict with the system ICU

[10:02:29.0430] <wraitii>
(essentially the same issue as https://bugzilla.mozilla.org/show_bug.cgi?id=776126)

[10:03:18.0518] <wraitii>
It doesn't happen on all distributions because some build with --without-intl-api (as we do for the custom-provided SM)

[10:04:25.0232] <wraitii>
(or possibly just with --with-system-icu - same difference)

[10:06:27.0897] <wraitii>
The actual Question here being -> is there a solution ?

[10:07:55.0021] <wraitii>
I thought that you could possibly move those headers behind another 'level of indirection', as in 'js/unicode' and 'js/zlib' instead of the regular path, but I have 0 idea if that's something realistic

[10:57:19.0762] <jorendorff>
Thanks everyone `<3`

[12:43:53.0496] <ryzokuken>
Hi! Is someone actively working on implementing `Intl.Segmenter`? (https://bugzilla.mozilla.org/show_bug.cgi?id=1423593 has the last update from 2 months ago)

[12:45:03.0868] <yulia>
ryzokuken: we paused work on that for now

[12:45:12.0571] <yulia>
because we have some initial work to do first

[12:45:34.0960] <yulia>
should be detailed here: https://bugzilla.mozilla.org/show_bug.cgi?id=1423593#c24

[12:45:35.0681] <tcampbell>
That is blocked on Bug 1684927 which will try to tackle the data file size issue in another way

[12:45:40.0883] <botzilla>
https://bugzil.la/1684927 — NEW (nobody) — [meta] Unified Segmenter 2021

[12:45:49.0830] <ryzokuken>
alright, but there's still progress on it? I see.

[12:46:15.0255] <ryzokuken>
I was looking for talks we could help out with, so wanted to ask 😇

[12:46:22.0175] <ryzokuken>
 * I was looking for tasks we could help out with, so wanted to ask 😇

[12:47:41.0176] <tcampbell>
yulia: do you know if date/time parsing work is feasible? I didn't really understand the scale of it

[12:47:54.0342] <ryzokuken>
oh, I see. Thanks yulia tcampbell, that comment cleared it up.

[12:48:18.0724] <yulia>
erm... which date/time parsing work?

[12:48:26.0415] <yulia>
the date/parse amiright bug? or something else?

[12:48:41.0158] <tcampbell>
that I think

[12:48:51.0487] <tcampbell>
some web compat complaints I thought

[12:50:33.0506] <jorendorff>
that bug

[12:50:51.0053] <evilpie>
haha just saw this on Stackoverflow again .. https://stackoverflow.com/questions/66436338/a-javascript-function-returns-different-results-in-chrome-and-firefox

[12:51:02.0376] <jorendorff>
it wouldn't be hard, exactly, just ...requires a person who cares that much

[12:51:14.0037] <jorendorff>
the problem I would have is an instinct to specify something sensible

[12:51:38.0456] <jorendorff>
but given bounded time to investigate the status quo and triangulate, that almost can't be a goal

[12:52:07.0085] <yulia>
hm. i talked to the champion of the recent date/time proposal

[12:52:22.0979] <yulia>
we need to find some time for it... i am not an expert in the area but yea -- basically what jason said

[12:52:30.0397] <yulia>
requires someone to do the leg work

[12:53:20.0384] <ryzokuken>
wait, is this date/temporal related?

[12:53:37.0776] <ryzokuken>
I would be happy to talk through something from that space if needed 😀 

[12:53:53.0186] <yulia>
its related to the old date.parse

[12:54:07.0006] <yulia>
we still have web compat issues there, that won't be solved by temporal :(

[12:54:18.0054] <yulia>
just chrome and ff do different htings

[12:54:23.0351] <yulia>
buuuuuuut maybe you are interested!

[12:54:30.0390] <ryzokuken>
yeah, that was one of the original motivations behind temporal, right?

[12:54:59.0408] <ryzokuken>
well, IIUC, aligning the browsers might... break some applications?

[12:55:02.0818] <yulia>
i believe this is the last work on it: https://github.com/tc39/proposal-uniform-interchange-date-parsing

[12:56:06.0748] <yulia>
this is unrelated to temporal, we will have this issue anyway. Its a bit of debt that was never cleaned up

[12:56:29.0117] <ryzokuken>
ah, I see.

[12:57:09.0680] <yulia>
here is the bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1274354

[12:57:38.0566] <yulia>
never ending saga, that one

[13:01:38.0528] <ryzokuken>
do we have any tooling that can analyze `Date.parse` usage in the wild?

[13:01:56.0800] <ryzokuken>
like... how much code out there depends on the non-ISO format?

[13:02:28.0963] <ryzokuken>
is that number non-trivial? Is there even a way to address this issue if that's the case?

[13:03:35.0746] <yulia>
Richard Gibson and Mathias Bynens did some research on that

[13:04:03.0489] <yulia>
one issue was that the proposal was pretty chrome focused

[13:04:56.0564] <ryzokuken>
in an ideal world, we would just remove the fallbacks and move to strict ISO 8601 but... that'll surely break the web I guess.

[13:05:14.0226] <ryzokuken>
let me try to get my hands on their findings.

[13:08:13.0358] <jorendorff>
Maybe we don't care if the proposal is Chrome-focused

[13:08:49.0203] <littledan>
> <@usharma:igalia.com> in an ideal world, we would just remove the fallbacks and move to strict ISO 8601 but... that'll surely break the web I guess.

Yes, this has been demonstrated

[13:10:33.0391] <littledan>
The thing with Richard Gibson's proposal was that he decided not to actually solve the whole problem, and just give a partial grammar

[13:11:01.0271] <littledan>
I don't think it was Chrome-biased, it's just that such a partial approach doesn't really fix the interop issue that motivates the change in the first place

[13:11:23.0207] <littledan>
(and Richard proposed broadening the grammar even more than it is today, for some kind of consistency, which seems undermotivated)

[13:11:39.0417] <yulia>
ah yes that was the issue, sorry my memory was hazy

[13:11:40.0469] <littledan>
> <@jorendorff:mozilla.org> Maybe we don't care if the proposal is Chrome-focused

I agree that this might not be so bad. However, Chrome's approach is quite ugly!

[13:12:13.0372] <yulia>
the proposal wasn't rejected, it just needs a significant amount of reworking

[13:12:26.0196] <jorendorff>
haha well

[13:12:30.0196] <yulia>
and at the moment, no one seems super excited about doing that (i am also guilty of this)

[13:12:31.0164] <littledan>
it's like, it has to stop taking their approach, and instead do what this team was doing previously

[13:13:23.0650] <littledan>
and Richard said, that's too much work, I'm out, which is fair; we're also each saying that

[13:13:29.0522] <jorendorff>
what's the phrase? don't let "doing anything remotely reasonable in any way" be the enemy of "having a standard"?

[13:14:10.0777] <littledan>
also Richard was skeptical that the browsers would be willing to agree with each other, which I think is mistaken

[13:14:28.0937] <yulia>
we all want this to be over

[13:26:51.0295] <littledan>
maybe we should just ask JSC how they feel about standardizing Chrome's behavior?

[14:50:01.0980] <yulia>
I need to look at the proposal again, but i am not opposed


2021-03-03
[02:36:17.0634] <snehaa2296>
hello, I am trying to run jstests, but they are failing . error is `Exception: Failed to test XUL condition 'wasmIsSupported()'; output was '', stderr was 'Assertion failure: ptrInfo.arenaId == js::StringBufferArena, at c:/firefox-source/firefox-source/js/src/util/Utility.cpp:126\n'` Here is the output : https://paste.mozilla.org/CQogqXUi

[02:38:39.0817] <arai>
have you modified anything?  if so, what's the diff?

[02:39:14.0283] <snehaa2296>
> <@arai:mozilla.org> have you modified anything?  if so, what's the diff?

I have not modified anything in code

[02:40:03.0022] <arai>
in which revision is it?  what does `hg parent` say ?

[02:41:20.0299] <arai>
(maybe my question wasn't clear.  I don't mean "modified from last time", but I meant "modified from clean mozilla-central"

[02:44:18.0952] <snehaa2296>
> <@arai:mozilla.org> (maybe my question wasn't clear.  I don't mean "modified from last time", but I meant "modified from clean mozilla-central"

no, i haven't modified anything except the fix for bug https://bugzilla.mozilla.org/show_bug.cgi?id=1491055

[02:44:47.0628] <arai>
I see

[02:45:16.0477] <arai>
so, the bug is already closed.  are you still on the bug's patch?  or pulled/updated after that?

[02:46:38.0101] <snehaa2296>
`hg parent`  output https://paste.mozilla.org/Gt2HNTT0

[02:47:04.0078] <snehaa2296>
> <@arai:mozilla.org> so, the bug is already closed.  are you still on the bug's patch?  or pulled/updated after that?

yes, i updated central after that

[02:48:10.0477] <arai>
what does `hg status` say? also, what's your mozconfig?

[03:13:52.0240] <Ms2ger>
and `hg heads`?

[04:19:37.0758] <evilpie>
jonco: I am looking into https://bugzilla.mozilla.org/show_bug.cgi?id=1536094 a bit

[04:20:14.0639] <evilpie>
I can get the script loader of a contentscript by taking the script loader of the "normal" window

[04:20:31.0977] <evilpie>
however now a lot of code runs into cross-compartment mismatches ..

[04:21:27.0289] <evilpie>
the content script run in a sandbox

[04:35:16.0910] <snehaa2296>
> <@arai:mozilla.org> what does `hg status` say? also, what's your mozconfig?

https://paste.mozilla.org/i4zbiq4o is the mozconfig ( for building spidermonkey)

[04:36:05.0831] <snehaa2296>
> <@arai:mozilla.org> what does `hg status` say? also, what's your mozconfig?

```
# Automatically download and use compiled C++ components:
ac_add_options --enable-artifact-builds
``` this mozconfig is in central

[04:36:17.0947] <snehaa2296>
> <@arai:mozilla.org> what does `hg status` say? also, what's your mozconfig?

 * ```
# Automatically download and use compiled C++ components:
ac_add_options --enable-artifact-builds
``` 
```

[04:36:27.0453] <snehaa2296>
 * ```
# Automatically download and use compiled C++ components:
ac_add_options --enable-artifact-builds
```
```
this mozconfig is in central

[04:36:41.0399] <snehaa2296>
 * ```
# Automatically download and use compiled C++ components:
ac_add_options --enable-artifact-builds
```
this mozconfig is in central

[04:38:16.0722] <arai>
When did you build the spider monkey shell last time?

[04:39:02.0120] <evilpie>
jonco: not sure how to resolve this. the `GetScriptGlobalObject` stuff seems complicated. Maybe the approach is wrong and the sandbox should have its own loader

[04:40:04.0333] <arai>
* When did you build the spidermonkey shell last time?

[04:41:18.0503] <snehaa2296>
> <@arai:mozilla.org> When did you build the spidermonkey shell last time?

today only, after updating central

[04:42:13.0019] <arai>
Also, what’s the output of `hg status`?

[04:42:48.0408] <arai>
Any chance there’s uncommitted change/conflict?

[04:43:03.0232] <jonco>
evilpie: I don't know enough about webextensions to help you with this

[04:44:16.0850] <jonco>
evilpie: what's the "normal" window in this context?

[04:45:19.0010] <evilpie>
so sandbox objects are a different global then the DOMWindow the contentscript is executing "with"

[04:46:22.0326] <jonco>
so the sandbox is the global for JS in this context?

[04:46:43.0532] <evilpie>
yeah

[04:47:03.0475] <jonco>
it sounds like we need to associate a script loader with that... but there is also another global too?  does that already have a scriptloader?

[04:47:47.0221] <evilpie>
yeah. The DOMWindow for the tab the contentscript is executing with is on the proto chain of the sandbox global

[04:48:14.0519] <evilpie>
so the this is the normal window for all normal scripts of the page

[04:49:47.0470] <jonco>
ok

[04:50:45.0198] <jonco>
and the content script is mostly insulated from the normal window

[04:50:56.0195] <jonco>
so that sounds like the content script should get its own module loader

[04:51:02.0172] <jonco>
err, script loader

[04:53:50.0480] <evilpie>
ScriptLoader seems to associate with a `Document` though

[04:54:50.0712] <jonco>
yes, GetCurrentScriptLoader goes via nsGlobalWindow and Document so I guess that would need to change

[04:56:04.0120] <jonco>
hmm ScriptLoader seems to depend on Document a lot

[04:56:27.0025] <evilpie>
that's what I mean

[04:56:52.0919] <Ms2ger>
Script loading is terribly complicated... Might be better off doing something separate

[04:56:54.0297] <evilpie>
maybe smaug has an idea?

[04:57:03.0504] <Ms2ger>
hsivonen is the local expert

[04:58:15.0522] <Ms2ger>
(Sorry for throwing you under this particular bus :))

[04:58:29.0450] <smaug>
evilpie: hmm, what is the context here?

[04:58:42.0650] <smaug>
which sandbox are we talking about?

[04:58:57.0919] <evilpie>
Sandbox used by WebExtension content-scripts

[04:59:13.0822] <evilpie>
> <@evilpie:mozilla.org> jonco: I am looking into https://bugzilla.mozilla.org/show_bug.cgi?id=1536094 a bit

context starts here

[05:00:27.0297] <smaug>
ah, that bug

[05:01:53.0346] <smaug>
so I and baku were thinking to split ScriptLoader so that it could be used in workers and main thread. Obviously main thread side would need to be a lot more complicated

[05:02:17.0901] <smaug>
but the same setup could be then used hopefully to do script loading in other contexts too

[05:02:27.0230] <smaug>
But that all is very much non-trivial

[05:02:57.0179] <evilpie>
oh that sounds complicated indeed

[05:06:10.0352] <smaug>
But possibly a good starting point would be to add a new class which inherit ScriptLoader

[05:06:16.0385] <smaug>
and move document specific stuff there

[05:06:49.0263] <smaug>
and the default implementation in ScriptLoader for some methods might not do anything

[05:07:04.0111] <smaug>
That might not be too hard

[05:07:24.0212] <smaug>
everything would be still main thread only at least

[05:34:18.0482] <evilpie>
That still sounds difficult. I think just fixing `GetScriptGlobalObject` would be enough

[05:34:42.0181] <evilpie>
I actually got this working now by using `xpc::NativeGlobal(aRequest->mDynamicPromise)`

[05:34:53.0977] <evilpie>
doesn't work for non dynamic imports though

[05:35:15.0604] <evilpie>
we presumably need to store the global for all requests somewhere?

[08:12:47.0716] <evilpie>
smaug: jonco I have a pretty minimal patch now. Not sure if I overlooked something problematic of course

[08:22:52.0527] <jonco>
evilpie: do you know where this is specced?

[08:23:05.0834] <evilpie>
nowhere sadly

[08:23:24.0666] <jonco>
ahhhh

[08:24:53.0169] <jonco>
I'm wondering if your patch reuses the scriptloader for the main content page and whether that is OK

[08:25:11.0070] <evilpie>
yeah it's reusing the loader

[08:29:40.0180] <jonco>
it could be problematic to mix modules from two different globals in the same module map

[08:31:37.0609] <jonco>
like, if the main page later dynamically loads a module that the extension has already loaded it will get the one with the sandbox as its global, and vice versa

[08:40:20.0561] <evilpie>
jonco oh that seems bad. I hadn't though of that

[08:41:40.0862] <evilpie>
Maybe we should go with a separate script loader after all ..

[08:41:51.0967] <evilpie>
Just much more work

[08:42:17.0809] <smaug>
don't we have different principals and what not to handle those loads separately?

[08:42:24.0779] <smaug>
/me knows next to nothing about addons

[08:42:54.0433] <jonco>
the script loader uses the document's pricipals

[08:43:06.0757] <jonco>
I imagine extensions would need different ones

[08:43:57.0976] <evilpie>
I actually wrote a patch to use the subject principal instead of the document principal

[08:44:28.0554] <evilpie>
Otherwise all scripts from the extension would need to be web accessible

[08:45:31.0489] <jonco>
ah, right

[08:46:15.0585] <evilpie>
This runs into a "fun" case where we log to the console that the load is blocked, but it actually succeeds?!

[09:20:18.0050] <annevk>
FWIW, yulia has also been looking at the script loader as it needs somewhat frequent changes for new JS features that need host integration. I think it would help if we sketched out what it should be and have some kind of plan for it as we're somewhat behind on new features. E.g., module workers.

[09:26:21.0819] <evilpie>
I am starting to think this approach isn't going to work.

[09:26:54.0458] <evilpie>
I hope we can re-use whatever we do for workers

[10:17:25.0164] <smaug>
evilpie: trying to get my head around this sandbox stuff. Looks like some code is using JS_GetPrototype and this new code GetStaticPrototype and then passing the proto to IsSandboxPrototypeProxy 

[10:20:04.0760] <evilpie>
smaug: global objects can't be proxies, so it must be a static prototype

[10:20:41.0752] <evilpie>
btw I don't think I will finish this, but this refactoring might actually be useful for something else I had in my for a few months

[10:22:24.0979] <smaug>
evilpie: are you saying the current code does work? It is using JS_GetPrototype

[10:22:57.0984] <evilpie>
why shouldn't it?

[11:49:20.0498] <jkratzer>
random question but why doesn't xpcshell support setInterval, setTimeout, etc?  It looks like a polyfill exists here - https://searchfox.org/mozilla-central/source/toolkit/modules/Timer.jsm

[13:20:23.0645] <tcampbell>
The blame leads me to a bug that says "Browser.jsm contains a setTimeout implementation that can be used without a DOM window." I guess the setTimeout impl was tied to a nsDocument or somethign


2021-03-04
[02:44:31.0080] <evilpie>
jandem: global objects can't be proxies. So they must have a static prototype right?

[02:44:56.0414] <jandem>
evilpie: correct

[02:46:10.0589] <evilpie>
thanks

[08:54:40.0544] <jkratzer>
Is there an existing list, or way to enumerate all interfaces exposed within xpcshell?  I found the following list but it doesn't appear to be exhaustive (i.e. missing AbortSignal, Request, etc). https://searchfox.org/mozilla-central/source/js/xpconnect/src/xpcprivate.h#2223

[08:59:14.0004] <tcampbell>
jkratzer: https://searchfox.org/mozilla-central/source/dom/tests/mochitest/general/test_interfaces.js has the set exposed to web. I think it ignores lower-case names though ..

[09:01:35.0416] <jkratzer>
thanks tcampbell .  Am I correct in understanding that even though the interfaces are exposed, many are not actually usable in the xpcshell context?

[09:02:15.0516] <tcampbell>
based on your question yesterday, it looks like no, not all are usable

[09:02:47.0285] <sfink>
`Object.getOwnPropertyNames(globalThis).filter(x => x.includes("Abort"))` includes `AbortSignal`, so that's one way to get a long messy list

[09:05:35.0425] <jkratzer>
sfink: that's actually very helpful


2021-03-06
[23:32:10.0951] <snehaa2296>
I am trying to build js shell and run tests `mach jit-test` and `mach jstests` but they seems to be failing, here is the output https://paste.mozilla.org/WhyxJEJU

[23:33:46.0183] <arai>
some timeouts are expected, because some testcase takes long time and it can hit the timeout depending on the hardware/environment

[23:35:44.0692] <arai>
the all other failure seems to be out of memory.  it could happen on some environment

[23:36:10.0730] <arai>
if it's without your change, then you can just ignore them

[23:36:34.0560] <snehaa2296>
> <@arai:mozilla.org> if it's without your change, then you can just ignore them

yes, i did not change anything in code

[23:37:28.0099] <iain>
When running the tests, you probably want to use a MOZCONFIG with `--enable-optimize`

[23:39:06.0488] <snehaa2296>
> <@iain:mozilla.org> When running the tests, you probably want to use a MOZCONFIG with `--enable-optimize`

does it make tests run faster?

[23:39:17.0796] <iain>
Yes, significantly faster

[00:09:17.0150] <evilpie>
do we have an internal module map that we use when trying to import?

[03:28:45.0427] <Redfire>
does anyone have an example of someone using the jsapi from rust for a repl or something at least? I'm having a very hard time following this and converting from C++ to Rust https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/tree/esr78/examples

[03:30:08.0555] <evilpie>
https://github.com/servo/rust-mozjs

[03:30:32.0273] <Redfire>
the mozjs implementation there is pretty complex, no?

[03:30:43.0232] <Redfire>
i would like something simpler to look at and learn first

[03:30:52.0959] <Redfire>
 * i would like something simpler to look at and learn from first

[03:31:00.0148] <evilpie>
most like that complexity is necessary for correct rooting

[03:31:50.0440] <Redfire>
rooting as in?

[03:32:51.0341] <evilpie>
https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/docs/GC%20Rooting%20Guide.md

[03:35:01.0555] <Redfire>
wait, sorry, i read the earlier link wrong, i am trying to use that rust-mozjs as a dependency but an example using it would be nice

[03:35:51.0748] <evilpie>
there seems to be an example folder in the rust-mozjs repository

[03:49:32.0913] <Redfire>
*how did i not see that* oof

[04:02:21.0704] <Redfire>
ill try that later

[04:55:03.0338] <Redfire>
https://paste.mozilla.org/imsX3Ljr
when running cargo build from the mozbuild shell

[04:57:32.0712] <Redfire>
 * https://paste.mozilla.org/imsX3Ljr
when running `cargo build` from the mozbuild shell

[06:00:47.0208] <tcampbell>
Were you able to follow the mozjs build instructions? https://github.com/servo/mozjs/blob/master/README.md It has advice about installing clang on windows and setting env variables

[06:23:26.0828] <evilpie>
No more ObjectGroup 🎉

[06:54:55.0503] <Redfire>
> <@tcampbell:mozilla.org> Were you able to follow the mozjs build instructions? https://github.com/servo/mozjs/blob/master/README.md It has advice about installing clang on windows and setting env variables

thanks, got it to work with that


2021-03-07
[00:02:52.0313] <Redfire>
i seem to have found another possible place to learn how to use mozjs https://github.com/HiRoFa/es_runtime

[00:30:42.0368] <jandem>
> <@evilpie:mozilla.org> No more ObjectGroup 🎉

I just got an email from someone asking the role of ObjectGroup and Shape, a day after this lands. Weird how these things go

[00:30:59.0781] <jandem>
> <@evilpie:mozilla.org> No more ObjectGroup 🎉

 * I just got an email from someone asking about the purpose of ObjectGroup and Shape, a day after this lands. Weird how these things go

[00:31:26.0032] <jandem>
 * I just got an email from someone asking about the purpose of ObjectGroup and Shape, a day after this landed. Weird how these things go

[00:31:49.0192] <jandem>
 * I just got an email from someone asking about the purpose of ObjectGroup compared to Shape, a day after this landed. Weird how these things go

[02:47:30.0760] <Redfire>
using rust-mozjs, how would one turn a `JSObject` into something printable? possibly by getting all the keys and looping over them or something of that sort

[02:50:53.0612] <arai>
`js::ValueToSource` could do that.  not sure if it's available in rust-mozjs tho

[02:51:35.0226] <arai>
or, if the object is JSON-compatible, `JS_Stringify`

[02:54:06.0774] <arai>
oh, I see `JS_ValueToSource` in `rust-mozjs/src/jsapi_wrappers.in`

[02:54:11.0317] <arai>
that would work

[02:54:36.0337] <arai>
also `JS_Stringify` is listed there

[03:23:29.0296] <arai>
(`JS_ValueToSource` is the function used when printing the result in SpiderMonkey shell.  so you can get the equivalent output as it

[03:24:07.0438] <Redfire>
`JS_ValueToSource` seems far easier to use than `JS_Stringify` lol

[03:24:52.0919] <Redfire>
2 args vs 6

[03:25:25.0455] <arai>
the consumer in JS shell https://searchfox.org/mozilla-central/rev/ca22dc040c3a6f9257efdaedec848bb48334f8bd/js/src/shell/js.cpp#1442-1451

[03:25:47.0251] <arai>
I guess it's not much different on rust

[03:29:19.0476] <Redfire>
it's https://doc.servo.org/mozjs/jsapi/fn.JS_Stringify.html vs https://doc.servo.org/mozjs/jsapi/fn.JS_ValueToSource.html

[03:51:44.0900] <Redfire>
errr
```error: process didn't exit successfully: `target\debug\spiderfire.exe` (exit code: 0xc0000005, STATUS_ACCESS_VIOLATION)```

[03:52:08.0544] <Redfire>
```rs
            unsafe {
                println!("{}", jsstr_to_string(rt.cx(), JS_ValueToSource(rt.cx(), rval.handle().into())));
            }
```

[04:41:55.0407] <Redfire>
only errors with `JSString` and `JSObject`

[06:52:05.0585] <Redfire>
update: it's specifically 
```rs
JS_ValueToSource(rt.cx(), rval.handle().into())
```


[06:52:14.0576] <Redfire>
 * update: it's specifically this part that errors
```rs
JS_ValueToSource(rt.cx(), rval.handle().into())
```

[06:56:36.0391] <jandem>
do you have a stack trace? 


2021-03-08
[21:46:56.0175] <Redfire>
umm, no i don't, and I'm not sure how to get one either

[23:38:08.0080] <arai>
Redfire: usually, running the binary with `RUST_BACKTRACE=1` environment variable shows detailed backtrace

[23:39:25.0220] <arai>
if it doesn't for some reason, try running the binary under debugger, and when it crashes, invoke a command to show backtrace (`bt` for gdb and lldb)

[04:47:36.0591] <Redfire>
err, that really doesn't help, hmm

[04:47:55.0957] <Redfire>
RUST_BACKTRACE=1 didn't help either

[04:48:02.0918] <Redfire>
 * `RUST_BACKTRACE=1` didn't help either

[04:49:24.0904] <Redfire>
wait

[04:49:41.0646] <Redfire>
i should probably add `features="debugmozjs"` to the `Cargo.toml`

[05:15:05.0558] <Redfire>
sliightly more info?
```rs
Hit MOZ_CRASH(*** Compartment mismatch 0000000000000000 vs. 000002454D2DE8D0 at argument 0) at C:/Users/[REDACTED]/.cargo/git/checkouts/mozjs-fa11ffc7d4f1cc2d/26a1e8a/m
ozjs/js/src\vm/JSContext-inl.h:58
error: process didn't exit successfully: `target\debug\spiderfire.exe` (exit code: 0x80000003)
```

[05:15:22.0448] <Redfire>
 * sliightly more info?
```rs
Hit MOZ_CRASH(*** Compartment mismatch 0000000000000000 vs. 000002454D2DE8D0 at argument 0) at C:/Users/[REDACTED]/.cargo/git/checkouts/mozjs-fa11ffc7d4f1cc2d/26a1e8a/mozjs/js/src\vm/JSContext-inl.h:58
error: process didn't exit successfully: `target\debug\spiderfire.exe` (exit code: 0x80000003)
```

[05:25:28.0018] <evilpie>
Redfire: maybe show us your whole code? You might not be entering a compartment

[05:26:00.0872] <Redfire>
what even are compartments?

[05:26:40.0323] <Redfire>
https://paste.mozilla.org/LCAmZFOx

[05:29:35.0871] <evilpie>
Pretty sure you are missing something like `let _ac = JSAutoRealm::new(context, global);` before you ValueToSource call

[06:05:46.0523] <Redfire>
now this is just sad

[06:07:30.0028] <arai>
if JSAPI returns false/nullptr, usually it sets pending exception to the context

[06:08:01.0535] <arai>
to recover from it, you need to handle the exception (get the exception, report it, and clear the exception)

[06:08:06.0536] <Redfire>
so you have to clear the context somehow?

[06:08:11.0789] <Redfire>
oh

[06:09:48.0343] <arai>
`JS_IsExceptionPending`, `JS_GetPendingException`, and `JS_ClearPendingException` for exception handling

[06:11:33.0053] <arai>
also `JS::StealPendingExceptionStack` for converting the exception to stack trace  https://searchfox.org/mozilla-central/rev/44695ef057e422a8d6c6056972bdf32766c36187/js/src/shell/js.cpp#9805-9830

[06:11:33.0264] <Redfire>
what's the `vp` you pass into `JS_GetPendingException` supposed to be?

[06:11:54.0054] <arai>
and some more for printing the exception/error report

[06:12:35.0784] <arai>
vp is a mutable handle value for the RootedValue that receives the pending exception value

[06:12:58.0014] <arai>
ah, usually `JS::StealPendingExceptionStack` + some more would work, instead of getting raw exception

[06:13:31.0146] <arai>
(the above example usage in JS shell

[06:14:16.0606] <arai>
so, convert the pending exception to stack, convert it to error report, and print the error and stack trace

[06:14:42.0622] <arai>
(of course, printing stack trace is optional)

[06:16:31.0923] <Redfire>
can't seem to find the rust-mozjs equivalent of <https://searchfox.org/mozilla-central/rev/44695ef057e422a8d6c6056972bdf32766c36187/js/src/shell/js.cpp#9804>

[06:17:11.0865] <arai>
oh

[06:19:40.0980] <arai>
okay, then, `JS_GetPendingException` + `JS_ClearPendingException` + `JS_ErrorFromException`

[06:20:10.0156] <arai>
and manually report (print) `JSErrorReport` struct, maybe?  https://searchfox.org/mozilla-central/source/js/public/ErrorReport.h#212

[06:20:22.0921] <arai>
example https://searchfox.org/mozilla-central/rev/44695ef057e422a8d6c6056972bdf32766c36187/dom/file/FileReader.cpp#212-228

[06:32:31.0386] <Redfire>
~~for now, im just gonna clear all the exceptions without any error printing~~

[06:33:28.0126] <arai>
that would also work :)

[06:33:58.0758] <Lcf.vs>
Hi all

[06:36:02.0352] <Lcf.vs>
Since the devtools console can't run as ES6 module, I created [this snippet](https://unpkg.com/esmb@latest)... but why not a native way? 

[06:39:27.0673] <Lcf.vs>
it's very useful to test a library, without any install/config, to share an idea between users on help communities, etc.

[06:41:03.0157] <Lcf.vs>
 * Since the devtools console can't run as ES6 module, I created [this snippet](https://unpkg.com/esmb@latest) and maybe soon a WebExtension (to avoid CSP)... but why not a native way?

[06:42:34.0475] <Lcf.vs>
 * it's very useful to test a library, without any install/config, to share a runnable idea between users on help communities, etc.

[06:43:24.0650] <evilpie>
`import("abc")` works fwiw

[06:44:59.0565] <Lcf.vs>
sorry, I mean AS a module

[06:45:29.0006] <Lcf.vs>
with static imports

[06:47:05.0009] <Lcf.vs>
```js
import * as etched from 'https://unpkg.com/@etchedjs/etched@latest/etched.min.js'

console.log(etched)
```

[06:47:31.0656] <Lcf.vs>
like with my bookmark snippet

[06:48:12.0021] <Lcf.vs>
and generally like the users are writing their code in their projects

[06:50:51.0687] <Lcf.vs>
when you're sharing an idea, to help/discover, the async side and the difference with their habits increases the complexity to be focused on the real subject

[06:58:00.0529] <Lcf.vs>
 * when you're sharing an idea, to help/discover, the async side and the difference with their real code increases the complexity to be focused on the real subject

[07:08:44.0599] <Lcf.vs>
imho, there is no reason to break the current behavior, it just wrap the console context 

[07:09:30.0004] <Lcf.vs>
and no reason to impact the security, if it already supports dynamic imports 

[07:09:52.0383] <Lcf.vs>
 * and no reason to additionally impact the security, if it already supports dynamic imports 

[07:10:41.0075] <Lcf.vs>
but it's a very comfortable feature

[07:12:19.0265] <Lcf.vs>
 * imho, there is no reason to break the current behavior, it just wraps the console context 

[08:05:12.0596] <tcampbell>
It is an interesting idea. The debugger shell is a bit of an oddball of not-quite-technically-legal-javascript. Parsing the same fragment of text as a JS module vs a classic script actually has different semantics.

[08:06:10.0458] <tcampbell>
and this probably wouldn't be feasible when paused at a breakpoint

[08:07:24.0983] <tcampbell>
running code while at a breakpoint is similar to running an `eval`, and a static import is certainly not allowed in an `eval`

[08:08:25.0357] <Lcf.vs>
hum, ok... waiting that feature support, I'll create that as extension, then

[08:08:59.0112] <Lcf.vs>
but thanks for your thoughts about it 😛

[08:09:20.0276] <tcampbell>
probably makes sense. It will likely cause surprises in the debugger, so it isn't trivial to be added as default.

[08:43:54.0517] <jonco>
sfink: That's a good comment.  I've updated the patch.  Do the new comments explain better?

[08:47:03.0760] <sfink>
jonco: oh thanks, yes that makes sense.

[08:47:07.0896] <jonco>
great

[11:38:25.0376] <tcampbell>
hmm.. we don't support modules at all in Workers?

[11:42:57.0824] <mccr8>
Looks like there's bug 1247687 on file for it.

[11:42:59.0246] <botzilla>
https://bugzil.la/1247687 — NEW (nobody) — Implement worker modules

[11:46:31.0017] <tcampbell>
ah, interesting

[12:19:27.0501] <Lcf.vs>
tcampbell: first submission for the extension 😛

[12:20:06.0873] <Lcf.vs>
(as devtool)

[13:51:39.0189] <lth>
https://news.ycombinator.com/item?id=26389006

[15:06:46.0472] <mgaudet>
confession: Finished a prototype change to how CompileOptions is managed (in particular around the rooted members used as debug metadata); looking at the patch in totality I am going to instead seek a third(?) route, because while this is workable, it's ugly and has some severe layering issues. 

[15:06:50.0264] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[15:18:09.0336] <tcampbell>
I guess we need to figure out the future of "mozilla.dev.tech.js-engine" and "mozilla.dev.tech.js-engine.internals" when mailman is removed. They could be migrated, but it doesn't seem helpful to maintain both of them. There was also some talk about if we should use discourse for these type of communication.

[15:18:21.0015] <tcampbell>
(Largely it seems they are used for embedders to contact us)

[15:20:59.0379] <ptomato>
I have found them useful to follow and to consult the archives

[15:25:58.0899] <tcampbell>
ptomato: any thoughts on discourse?

[15:26:19.0336] <ptomato>
I like discourse in general 😺

[15:26:40.0403] <tcampbell>
( https://discourse.mozilla.org/ )

[15:27:02.0988] <ptomato>
yes, I should've said I like Discourse with a capital D

[15:27:19.0574] <ptomato>
it's probably much more discoverable than those mailing lists

[15:27:26.0186] <tcampbell>
I think someone had suggested that it is a reasonable option that can still be accessed by email

[15:27:26.0237] <ptomato>
I do hope the archives don't disappear

[15:28:08.0655] <tcampbell>
that is an interesting question.. I'll ask

[15:46:25.0207] <tcampbell>
Looks like having an archive is in the plans already


2021-03-09
[16:55:48.0540] <Redfire>
Two Questions:
1. Am I supposed to be using `runtime.evaluate_script` for running a full script, in the form of a file?
2. How do I create a JSObject that runs native code? (trying to make a `console` object)

[17:14:50.0704] <arai>
for 1, in term of JSAPI itself, `JS::Evaluate`, or `JS::Compile`+`JS_ExecuteScript` are for running a script (including file)

[17:16:44.0641] <arai>
looking into `Runtime::evaluate_script` definition, it calls `Evaluate2`, that I'm not sure where it's defined tho, if it's equivalent of `JS::Evaluate`, that would be what you want

[17:18:58.0223] <arai>
for 2, example in C++ is here https://searchfox.org/mozilla-central/rev/9bf82ef9c097ee6af0e34a1d21c073b2616cc438/js/src/shell/js.cpp#9552-9565

[17:20:12.0274] <arai>
uh, `JS_NewPlainObject` isn't in rust-mozjs...

[17:22:20.0113] <arai>
(or perhaps it's available but just not listed in `jsapi_wrappers.in` ?

[17:57:17.0478] <Redfire>
does in fact exist https://doc.servo.org/mozjs/jsapi/fn.JS_NewPlainObject.html 

[17:58:43.0057] <arai>
nice,  then the above code in JS shell would work

[18:00:01.0759] <arai>
so, create a plain object with it, and define a native function with `JS_DefineFunctionsWithHelp`, or `JS_DefineFunctions`

[18:00:30.0233] <arai>
(for latter, use `JSFunctionSpec` instead of `JSFunctionSpecWithHelp`

[18:21:17.0440] <Redfire>
i can't seem to find an equivalent for `JS_FN_HELP`, whatever that is

[18:24:28.0393] <arai>
it's a macro to define the `JS_DefineFunctionsWithHelp` item

[18:24:38.0569] <arai>
looks like, an example with `JSFunctionSpec` is in rust-mozjs/tests/rooting.rs

[18:25:07.0112] <arai>
using `define_methods` function

[18:29:33.0057] <Redfire>
the `WithHelp` version requires `JSJitInfo` which I have no idea what it is, nor how to obtain one

[18:31:35.0008] <arai>
`JSJitInfo` is used to optimize the function call during JIT compilation. the field can be null if there's no optimization

[18:31:50.0108] <arai>
https://searchfox.org/mozilla-central/rev/9bf82ef9c097ee6af0e34a1d21c073b2616cc438/js/src/jsfriendapi.h#207-215

[18:31:59.0988] <arai>
`JS_FN_HELP` uses `nullptr` for the field

[18:52:47.0914] <Redfire>
so, overall, I'll get something like this
```
const METHODS: [JSFunctionSpecWithHelp; 1] = [
	JSFunctionSpecWithHelp {
		name: JSPropertySpec_Name { string_: "log" as *const i8 },
		call: JSNativeWrapper { op: Some(log), info: 0 as *const _ },
		nargs: 1,
		flags: JSPROP_ENUMERATE as u16,
		jitInfo: ptr:null_mut(),
		usage: "log(exp)" as *const i8
		help: "Evaluate and print expressions to stdout." as *const i8
	}
}
		

fn define(cx: *mut JSContext, global: *mut JSObject) -> bool {
	rooted!(in(cx) let obj = JS_NewPlainObject(cx));
	return JS_DefineFunctionsWithHelp(cx, obj, METHODS) && JS_DefineProperty(cx, global, "console", obj, 0);
}
```

[18:52:59.0023] <Redfire>
* so, overall, I'll get something like this
```rs
const METHODS: [JSFunctionSpecWithHelp; 1] = [
	JSFunctionSpecWithHelp {
		name: JSPropertySpec_Name { string_: "log" as *const i8 },
		call: JSNativeWrapper { op: Some(log), info: 0 as *const _ },
		nargs: 1,
		flags: JSPROP_ENUMERATE as u16,
		jitInfo: ptr:null_mut(),
		usage: "log(exp)" as *const i8
		help: "Evaluate and print expressions to stdout." as *const i8
	}
}
		

fn define(cx: *mut JSContext, global: *mut JSObject) -> bool {
	rooted!(in(cx) let obj = JS_NewPlainObject(cx));
	return JS_DefineFunctionsWithHelp(cx, obj, METHODS) && JS_DefineProperty(cx, global, "console", obj, 0);
}
```

[01:14:02.0057] <Lcf.vs>
my extension (to be able to use static imports on script injection) is approved https://addons.mozilla.org/fr/firefox/addon/esmb/ 🤩

[03:42:43.0851] <stratan>
Hello there :) Quick question. Can somebody explain to me the diff between `Shape` vs `BaseShape`?

[03:44:47.0743] <arai>
have you checked this document?  https://searchfox.org/mozilla-central/rev/5a66c4b4a41ab78a87c30c9db0d93c732c534402/js/src/vm/Shape.h#43

[03:45:05.0249] <arai>
the last paragraph mentions BaseShape

[03:47:16.0329] <stratan>
thank you arai I'll have a look :) 

[04:00:46.0072] <Redfire>
err

[04:01:07.0006] <Redfire>
how am i supposed to turn a `&'static str` into a `*const i8`

[04:03:37.0839] <arai>
`as_ptr()`, and then cast, maybe?  https://doc.rust-lang.org/std/primitive.str.html#method.as_ptr

[04:06:46.0250] <nbp>
https://doc.rust-lang.org/std/primitive.str.html#method.as_bytes might be better?

[04:09:08.0421] <nbp>
I guess it depends if you want to exit rust or not.

[04:09:19.0657] <Redfire>
not trying to exist

[04:09:23.0085] <Redfire>
 * not trying to exit

[04:10:09.0229] <Redfire>
https://doc.servo.org/mozjs/jsapi/struct.JSFunctionSpecWithHelp.html

[04:11:38.0472] <nbp>
ok, this are probably forwarded to SpiderMonkey which uses these in C++, thus the `*const i8`.

[04:12:34.0552] <Redfire>
well, yes

[04:14:38.0726] <nbp>
Then `NAME.as_ptr() as *const i8`, where `NAME` is a constant, defined else-where.

[04:16:00.0256] <nbp>
I wonder … would `{ const S: &'static str = "name"; S.as_ptr() as *const i8 }` work within a declaration, or should the constant be define within a module, and not a sub-expression.

[04:16:14.0861] <nbp>
 * I wonder … would `{ const S: &'static str = "name"; S.as_ptr() as *const i8 }` work within a declaration, or should the constant be defined within a module, and not a sub-expression.

[04:20:18.0539] <Redfire>
another qn: in https://searchfox.org/mozilla-central/rev/9bf82ef9c097ee6af0e34a1d21c073b2616cc438/js/src/shell/js.cpp#3023, it uses `args.length()`. However, `CallArgs` doesn't have such a method in rust-mozjs so what should I be using instead

[04:21:28.0337] <Redfire>
https://doc.servo.org/mozjs/jsapi/struct.CallArgs.html

[04:21:51.0573] <arai>
is `argc_` accessible?

[04:22:08.0728] <arai>
`length()` returns it

[04:22:13.0581] <Redfire>
i see

[04:34:50.0597] <Redfire>
rip, my `console.log` doesn't work yet

[05:08:36.0078] <stratan>
is there a script that downloads debug symbols for macOS?

[05:14:23.0264] <Redfire>
oh cmon

[05:14:46.0403] <Redfire>
 * oh cmon how am i supposed to debug this

[05:15:58.0113] <Redfire>
https://paste.mozilla.org/qqCaVKZj here's the code

[05:17:27.0542] <arai>
it says the process exited normally 

[05:17:46.0115] <Redfire>
it never gets to my stdin loop though

[05:18:09.0218] <arai>
try adding some breakpoints

[05:18:45.0930] <Redfire>
gdb doesn't want to let me ☹️

[05:18:53.0921] <arai>
or trace the execution from the beginning

[05:28:10.0612] <Redfire>
after some debugging, this line exits the program
```rs
JS_DefineFunctionsWithHelp(cx, Handle::<*mut JSObject>::from(obj.handle()), &METHODS);
```

[05:31:38.0596] <arai>
Redfire: the `METHODS` should be an array, ends with sentinel value (that has null for `name` field)

[05:33:58.0021] <arai>
https://github.com/servo/rust-mozjs/blob/f870c8783f1368c22f90c4d66f2dcc0524bcd845/tests/rooting.rs#L70

[05:34:17.0656] <arai>
the parameter is a pointer to the first element of an array

[05:34:27.0536] <arai>
and the function iterates over the array, until the sentinel value

[05:34:49.0202] <arai>
so, it overruns the data, in your code

[05:43:38.0007] <Redfire>
good news: it doesn't force exit anymore
bad news: the `JS_DefineProperty` doesn't seem to be working

[05:53:32.0206] <Redfire>
it's returning `true` though, so it could very well be an issue of the `"console".as_ptr() as *const i8` not working for that purpose

[05:59:13.0352] <Ms2ger>
Oh

[05:59:18.0956] <Ms2ger>
You forgot to null-terminate

[05:59:24.0523] <Ms2ger>
Right?

[05:59:40.0245] <Redfire>
huh?

[05:59:51.0847] <Redfire>
what do you mean i forgot to null-terminate

[06:00:51.0466] <Ms2ger>
Try `"console\0".as_ptr() as *const i8`

[06:03:33.0011] <Redfire>
nicee

[06:03:36.0957] <Redfire>
thanks for the help

[06:06:48.0710] <Redfire>
almost works, but i'll figure it out as i go along

[06:19:12.0675] <arai>
does your shell print the return value of the code?

[06:19:49.0307] <arai>
native function should set the return value of `CallArgs`. otherwise the return value is set to the callee function

[06:20:05.0059] <arai>
(just because of calling convention)

[06:20:35.0440] <arai>
so, if the function doesn't return anything, set the args.rval() to undefined

[06:30:15.0193] <Redfire>
hmm

[06:31:33.0559] <Redfire>
there we go

[06:33:16.0449] <tcampbell>
probably just need an automatic newline for console.log impl

[06:34:00.0803] <tcampbell>
/me wonders if debug builds of callargs should try to assert that a retval was set

[06:34:15.0856] <tcampbell>
/me has made that mistake and been very confused too

[06:34:49.0818] <nbp>
/me wonders if the macro system of Rust capable of converting `cstr!{"foo"}` into `{ "foo\0" as *const i8 }`

[06:35:27.0390] <nbp>
^ https://docs.rs/c_str_macro/1.0.2/src/c_str_macro/c_str.rs.html#52-63

[06:37:08.0789] <nbp>
However, this code creates a new string after appending a "\0", which is not a static string.

[06:37:19.0755] <nbp>
 * However, this code creates a new string after appending a "\0", which is not a static string. Or I miss understood …

[06:38:57.0784] <Ms2ger>
`concat!` is compile-time, I think

[06:41:22.0501] <Ms2ger>
And `CStr` is just a wrapper over the pointer

[06:48:53.0960] <Redfire>
> probably just need an automatic newline for console.log impl

yep, just did that

[10:49:50.0171] <nbp>
TIL, `firefox --help` creates and initialize a JS Runtime.

[10:49:58.0756] <nbp>
 * TIL, `firefox --help` creates and initializes a JS Runtime.

[11:00:17.0927] <mgaudet>
Hahaha. Reminds me of my old days of testing a Java JIT compiler by runing `java -version`

[11:00:35.0039] <mgaudet>
(which ran sufficient code that we had a fair amount of JIT compilation) 

[11:01:18.0922] <nbp>
https://searchfox.org/mozilla-central/rev/62ddcc03195036b355cb23b6f2e2b88d3f8099ad/browser/components/BrowserContentHandler.jsm#592-614

[11:54:02.0156] <evilpie>
tcampbell: was not removing binast code from the script loader just an oversight? https://searchfox.org/mozilla-central/search?q=binast&path=

[12:00:26.0462] <tcampbell>
I was leaving it in as a potential future path, but we can strip it out now. I think @mgaudet asked the same question

[12:01:38.0604] <mgaudet>
> <@evilpie:mozilla.org> tcampbell: was not removing binast code from the script loader just an oversight? https://searchfox.org/mozilla-central/search?q=binast&path=

I have a horribly bit rotted patch to remove the last vestiges, but if someone else wanted to tackle that’d be cool 

[12:02:23.0445] <tcampbell>
(mostly I didn't want to think too hard about script loader at the time..)

[12:03:15.0918] <jorendorff>
i can't believe i didn't know this but https://godbolt.org/z/bosx6v

[12:03:32.0356] <evilpie>
understandable.

[12:04:02.0812] <jorendorff>
this means you can `./dist/bin/js ../` and it'll silently compile and run an empty script

[13:02:37.0814] <sfink>
confession: updating my mercurial repos is corrupting their internal files. Not a good thing.

[13:02:39.0922] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[13:03:49.0872] <sfink>
confession: making a fool of myself trying to understand refresh driver and paint timing over in https://phabricator.services.mozilla.com/D107578#3499615

[13:16:43.0566] <sfink>
mccr8: the good news is that I've been looking specifically at delegate -> key edges very recently and could probably help if you needed

[13:16:54.0756] <sfink>
the bad news is that I'm leaving for a multi-hour dentist appointment right now

[13:17:10.0532] <sfink>
(but you may be past the problem already)

[13:17:36.0753] <mccr8>
sfink: thanks! I think I found the bit of logic I wanted in nsCycleCollector::ScanWeakMaps() that talks about how delegates keep things alive so I'm hopefully okay for now.

[13:17:50.0115] <sfink>
heh, ok

[13:18:05.0528] <mccr8>
sfink: kmag is implementing some kind of weakmap wrapper and I'm reviewing it.

[13:18:14.0054] <mccr8>
I don't know if you should look at it too or not.

[13:18:32.0679] <sfink>
I can give it a skim in a few hours if you want

[13:18:59.0722] <mccr8>
sfink: yeah that would probably be good. this is bug 1581859, part 1b and 1c.

[13:19:01.0198] <botzilla>
https://bugzil.la/1581859 — ASSIGNED (kmag) — Rewrite WebNavigationContent.js in Fission-compatible C++

[13:19:12.0692] <sfink>
ok

[13:19:46.0041] <mccr8>
1b makes the C++ hold alive a JS weakmap so that's probably okay, but 1c is using a raw WeakMap which I'm a bit more skeptical of.

[13:20:38.0937] <sfink>
rightfully so

[13:21:37.0094] <mccr8>
I'll mark you are a reviewer for 1c.


2021-03-10
[01:18:40.0409] <jorendorff>
sigh https://searchfox.org/mozilla-central/source/js/src/frontend/AbstractScopePtr.h#100

[01:18:52.0181] <jorendorff>
is that correct?

[01:19:55.0680] <jorendorff>
...it seems correct. ugh

[01:24:00.0484] <arai>
yes, both are GlobalScope

[01:31:31.0172] <jandem>
maybe one could be renamed, TopLevelScope or so (?)

[01:33:58.0693] <jandem>
hm looking at the ScopeKind enum it's probably fine though

[01:46:25.0934] <jorendorff>
It is fine. I was just confused.

[01:46:42.0907] <jorendorff>
Jan, do you remember why 252 is the right number here? https://searchfox.org/mozilla-central/source/js/src/jit-test/tests/class/super-in-nested-eval.js#18

[01:47:46.0660] <jorendorff>
I made a change to how strict direct eval works, reducing the number of environments, and now 473 works for me

[01:48:36.0784] <jorendorff>
But it's different in opt vs. no-opt

[02:33:37.0290] <jandem>
jorendorff: I think it had to do with a 1-byte max-hops number so if we reached 255 nested environments we had to throw?

[02:34:39.0263] <jandem>
maybe this one: https://searchfox.org/mozilla-central/rev/2b99ea2e97eef00a8a1c7e24e5fe51ab5304bc42/js/src/frontend/BytecodeEmitter.cpp#1631

[02:38:55.0898] <jandem>
if it's different in opt vs no-opt I wonder if you get overrecursion instead now

[02:39:14.0282] <jandem>
maybe it's fine to remove the test if it's no longer useful

[03:19:54.0955] <jorendorff>
oh, sweet hmm

[03:20:14.0938] <jorendorff>
I can make it create an environment again, and maybe then it'll test the same thing it was testing before...

[03:20:30.0167] <jorendorff>
 * I can make it (the test) create an environment per eval again (by adjusting the eval code), and maybe then it'll test the same thing it was testing before...

[03:50:58.0866] <jorendorff>
jandem: I fixed the test and now it asserts. Good test!

[03:51:20.0876] <jorendorff>
jandem: But I don't understand that comment. Why don't we check the environment depth when entering eval?

[03:55:45.0730] <jandem>
jorendorff: we call `checkEnvironmentChainLength` in most of the other enterFoo methods, we could try that for eval too.. I think I was just concerned about breaking something obscure

[03:56:02.0224] <jorendorff>
hmm. ok, let's break it...

[03:58:35.0281] <jorendorff>
hmm, that seems to have broken something, but it's obscure

[03:58:39.0952] <jorendorff>
i should try getting some sleep

[03:59:51.0317] <jorendorff>
...no, actually that worked

[04:09:00.0939] <jorendorff>
once again proving that sleep is unnecessary

[07:20:51.0628] <jonco>
iain: did we decide to get rid of OOM handling?  I'm kind of interested in being involved in discussions about this

[07:21:45.0424] <sfink>
I believe iain has been arguing for it, but afaik no decision has been made

[07:35:22.0699] <mgaudet>
There's a background task that has been percolating in Iain's mind about getting telemetry to help drive this discussion 

[07:35:34.0802] <iain>
Summary: my non-scientific survey of telemetry data says that OOM recovery very rarely prevents crashes, and fixing OOM corner cases is a suck on developer time. I've never gotten around to doing a more scientific survey to verify my claim.

[07:55:29.0101] <nbp>
iain: depends what people do when they handle OOM? Such that removing the JSRuntime and creating a new one?

[07:59:05.0818] <iain>
nbp: Does Gecko have special handling for OOMs in SM?

[08:00:24.0841] <nbp>
I tihnk we do not do anything special and the page is still scrooable.

[08:00:49.0146] <nbp>
instead of a crashed content process which does not render anything anymore.

[08:01:19.0606] <nbp>
 * I tihnk we do not do anything special and the page is still scroll-able.

[08:01:44.0904] <iain>
The issue is that the rest of the browser is going to continue allocating memory and crash when we run out

[08:01:53.0486] <nbp>
and Gecko focus on handling OOM of large allocation.

[08:02:24.0184] <iain>
(I agree that we should continue handling OOM for large allocations like WASM memory)

[08:02:52.0390] <jandem>
Fission will help here, more processes means the impact of an OOM crash is less than the pre-e10s 'Firefox is gone completely'

[08:03:09.0756] <nbp>
and less than a single process.

[08:03:47.0236] <nbp>
however, we should make our message clear to embedders, that we intend to keep handling large allocation OOMs.

[08:07:01.0635] <evilpie>
tcampbell:  oh I just had an idea, we could also use github issues instead of discourse

[08:07:57.0304] <tcampbell>
I guess I would wonder what project it is on. The embedding examples stuff still has pretty light uptake

[08:49:19.0823] <jonco>
iain: we still need to handle OOM for large allocations, one issue is what counts as large?

[08:49:46.0961] <jonco>
anything controllable by the user could end up being large, and in the JS engine that ends up being a lot of things

[08:50:26.0976] <jonco>
IMO OOM handling is not a significant pain point any more, but other people may have different experiences

[08:53:14.0079] <iain>
jonco: IIRC I just saw an oomtest stencil bug going by a week or so ago

[08:53:55.0368] <jonco>
iain: sure, they happen, but fuzzers catch them and then you can run the test case in rr and see what went wrong

[08:53:56.0878] <jonco>
ian

[08:54:44.0297] <jonco>
iain: I also feel like OOM test also catch general error handling issues that don't just apply to OOM

[08:56:11.0855] <iain>
My general impression is that it's more common for OOM-handling to force us to handle errors in code that would be infallible otherwise than it is for oomTest to uncover general error handling issues, but I could be wrong

[08:58:11.0714] <iain>
If you have an example of catching general errors, I'd be interested in seeing it

[08:58:22.0074] <iain>
It's possible that it varies depending on which component you're looking at

[08:58:29.0320] <jonco>
yeah

[08:59:32.0094] <iain>
re "what is large": my lazy response here would be "where does V8 check for it?"

[08:59:38.0638] <jonco>
we fixed a ton of bugs when oomTest was introduced and I think they weren't all exclusively about OOM... it was a few years ago now though

[09:00:31.0089] <nbp>
iain: Does v8 even handles OOM?

[09:00:37.0210] <iain>
Not in general, no

[09:00:47.0201] <iain>
This is one place where webcompat works in our favour

[09:01:43.0409] <iain>
I assume that they check when allocating large wasm buffers or whatever, but I haven't verified

[09:02:51.0973] <nbp>
I used to be in favor of supporting all OOM, especially since we have `oomTest` function, and that this makes the fuzzer more reliable. Now I am undecided, due to one of iain argument that OOM handling forces us to handle cases that would be unreachable otherwise, making the code potentially even more buggy.

[09:04:42.0205] <iain>
Taking a step back: the justification for this is that looking at crash-stats we see very very few cases where we have successfully recovered from OOM. Unless recovering from OOM makes us *less* likely to crash for other reasons, if we regularly recovered from OOM, we'd see some number of sessions that recovered and failed for unrelated reasons. So we can put a rough upper bound on how many OOM recoveries happen in the wild.

[09:05:39.0742] <iain>
If we wanted to move forward with this, the next step would be to add telemetry to figure out how often we recover from OOM and then terminate a process normally (vs hitting an unhandled OOM in non-SM code, which I expect is the most common case)

[09:05:55.0421] <nbp>
iain: it might also be that the telemetry only exists on Nightly / beta users which are experiencing less OOMs.

[09:06:04.0970] <nbp>
 * iain: it might also be that the telemetry only exists on Nightly / beta users which are experiencing less OOMs. (because they have bigger RAM)

[09:06:30.0473] <iain>
Yep, definitely possible! I'm not committed to removing OOM; I'm just committed to gathering more data about it.

[09:06:44.0868] <mgaudet>
There's a bug somewhere that Iain has self assigned 

[09:06:59.0644] <iain>
(Although not committed enough to prevent me from leaving that bug on my TODO list for literal years.)

[09:07:00.0354] <jonco>
(in a meeting right now)

[09:07:24.0909] <iain>
https://bugzilla.mozilla.org/show_bug.cgi?id=988055

[09:08:04.0497] <nbp>
iain: Maybe one thing where we can start, is annotating OOMs with the size of the OOM-ing allocation, making it a global for example.

[09:08:47.0238] <nbp>
iain: then we can do some A/B testing by causing all OOM under a given size to be fallible.

[09:09:10.0195] <nbp>
 * iain: then we can do some A/B testing by causing all OOM under a given size to be a crash.

[09:10:33.0697] <iain>
There are some weird cases there with, say, growing a vector, which is intuitively a small OOM but could count as a large one by size

[09:11:27.0233] <iain>
But we can probably work around that

[09:15:23.0213] <iain>
If there are specific vectors that can reasonably grow large enough that doubling their size would eat up all of our remaining memory in cases where we're otherwise not going to OOM, then we can handle those on a case-by-case basis, but in general appending an element to a vector should be infallible.

[09:16:27.0443] <sfink>
[gc_budget_ms_2 on glam](https://glam.telemetry.mozilla.org/firefox/probe/gc_budget_ms_2/explore?activeBuckets=%5B%22success%22%2C%22parse_error%22%2C%22no_primary_item%22%2C%22decode_error%22%2C%22size_overflow%22%2C%22out_of_memory%22%2C%22pipe_init_error%22%2C%22write_buffer_error%22%2C%22alpha_y_sz_mismatch%22%2C%22alpha_y_bpc_mismatch%22%5D&ref=20210308094833)

[09:18:06.0462] <iain>
(One other point: we may get a small performance win from not having to check return values as often when propagating errors up the stack. I doubt it's significant, though.)

[09:18:40.0087] <mccr8>
I think at least some Gecko vectors don't keep doubling. Instead they double until a certain point, then increase by ilke 20% or something. I'm not sure if that was applied to SpiderMonkey vectors or not, too

[09:21:32.0726] <iain>
SM vectors are a wrapper around `mozilla::Vector`, so we might have the same behaviour

[09:46:58.0274] <jonco>
gecko uses SegmentedVector for a lot of things nowadays I think, and that grows by a fixed size every time

[09:49:35.0190] <iain>
That might be a reasonable solution if we have any really big vectors

[09:49:43.0015] <sfink>
I wonder how much of the OOM pain is a result of AllocPolicy obscuring what happens on OOM. I, for one, never have any clue which one is going to do what.

[09:51:03.0324] <sfink>
I've always been hesitant to remove OOM handling because I think we're the only major GC engine to have it, which has been a deciding factor for embedders in the past. But that argument doesn't buy a lot of sandwiches.

[09:51:42.0814] <iain>
Yeah, it's definitely worth considering

[09:52:10.0892] <nbp>
Maybe this is a question to ask on our future discourse channel

[09:54:24.0251] <jonco>
iain: I'd be interested that telemetry

[09:56:06.0676] <jonco>
iain: Another aspect to all this is testing.  Right now we handle OOM, and have tests for it (found via fuzzing/oomTest). If the policy is to crash on OOM, it's hard to test that that in fact happens, rather than something else.

[09:56:40.0797] <iain>
I keep telling myself that I'll get around to adding it eventually, but now that Steve and I are likely to be adding some telemetry for the scheduling work, maybe that will be the impetus I need to actually do it

[09:57:58.0724] <iain>
jonco: We already have AutoEnterOOMUnsafeRegion. Does that impede testing?

[09:57:59.0849] <jonco>
"Something else" being e.g. accessing beyond the end of the buffer that couldn't be reallocated, etc

[09:58:09.0660] <iain>
Ah, interesting point

[10:00:24.0825] <nbp>
decoder: how frequent are unhandled oom?

[10:01:10.0426] <decoder>
nbp: they are pretty frequent. but let me check

[10:01:22.0806] <decoder>
ah wait. I cant even check. we throw that away on the client machines

[10:02:19.0004] <nbp>
is an unhandled oom a wasted cpu time?

[10:02:45.0564] <decoder>
"  Ignored crashes/aborts: 45" in ~3 hours with an opt build

[10:02:54.0833] <decoder>
(this is one machine)

[10:03:31.0552] <decoder>
> <@nbp:mozilla.org> is an unhandled oom a wasted cpu time?

yea, it consumes time. but also because it interrupts the fuzzing and forces a restart of the jsshell etc

[10:03:54.0884] <decoder>
it isnt a major issue right now. but if we would just always crash instead of oom, id be worried ;)

[10:09:41.0792] <jonco>
iain: I guess we could continue to simulate OOM failures for the fallible allocations and be careful to write our allocation layer so we always crash for the infallible ones

[10:10:55.0619] <jonco>
interested to hear decoder 's view on the security implications of handle OOMs and test vs. just crash

[10:11:10.0042] <jonco>
FWIW the world seems to be moving in the 'just crash' direction

[10:13:04.0275] <nbp>
Crashing is the safest route to safety, just look at the latest starship!

[10:17:04.0107] <decoder>
Well, from a security aspect it is pretty clear to me that crashing is safest. We've had exploitable oom handling bugs before.

[10:17:49.0469] <decoder>
(leaving aside that we can't crash on all OOMs, but I believe v8 is a lot more aggressive there)

[10:20:13.0766] <sfink>
decoder: do you know which unhandlable ooms happen most often? I'm just wondering if there are any that we thought would be rare and aren't, and might be worth a second look at fixing. (But then, that's maintenance time spent on OOMs...)

[10:21:06.0210] <iain>
jonco: Yeah, if we solve it in the allocation layer then hopefully we only need to write it once and it remains contained

[10:23:54.0633] <decoder>
sfink We don't have that information, no :/ we could collect it but it would require changes to our fuzzing infra. Or we could run locally for a while and just count there and assume that is statistically okay ;)

[10:24:37.0942] <sfink>
I guess all output of any form from ignored jobs is probably discarded

[10:25:02.0115] <iain>
Making most OOMs infallible might make oomTest more reliable. One problem with oomTest currently is that, because we don't reset the world after every failed allocation, we skip a lot of allocations during compilation anyway.

[10:25:47.0763] <iain>
 * Making most allocations infallible might make oomTest more reliable. One problem with oomTest currently is that, because we don't reset the world after every failed allocation, we skip a lot of allocations during compilation anyway.

[10:26:00.0089] <jonco>
iain: yes, this a problem with oomTest

[10:36:21.0466] <decoder>
> <@sfink:mozilla.org> I guess all output of any form from ignored jobs is probably discarded

Yea the fuzzer throws stuff away immediately. But I can adapt langfuzz to collect some stats.

[10:38:29.0192] <iain>
Another worthwhile experiment would be to check how often the fuzzer catches "out of memory" and continues, which would require a restart if we stopped handling OOM

[13:35:49.0807] <tcampbell>
We now have a Discourse category: https://discourse.mozilla.org/c/spidermonkey

[13:35:56.0033] <tcampbell>
working on updating the website..

[13:36:25.0620] <tcampbell>
My instinct to to mostly point things at the website as the up-to-date list of links for stuff.

[13:44:43.0683] <mgaudet>
> <@tcampbell:mozilla.org> We now have a Discourse category: https://discourse.mozilla.org/c/spidermonkey

Neat :) That was fast. 

For those who visit, after you're logged in, top right there's a little bell: you can choose to watch the category from there.

[15:28:11.0827] <tcampbell>
Project for another day is decomissioning https://wiki.mozilla.org/JavaScript:New_to_SpiderMonkey which I guess we link from spidermonkey.dev


2021-03-11
[17:24:31.0348] <jorendorff>
mgaudet: re-reading that test code. I'm sorry I subjected you to that :-|

[03:24:25.0747] <decoder>
iain jonco sfink sorry, had to leave yesterday. so for the purpose of collecting stats, I guess what you need is the stacks for each unhandlable oom caught by langfuzz to see their proportion to each other?

[03:24:36.0179] <decoder>
we should be able to do that

[03:37:46.0896] <jonco>
decoder: I think the idea would be to flag up if any were occurring frequently as these are supposed to be pretty rare, or just the top offenders

[03:37:55.0983] <jonco>
sfink: is that what you were after?

[03:45:58.0668] <decoder>
yea. "frequently" needs to be put into some kind of relation.

[03:46:10.0952] <decoder>
I can run this on my single local machine here for X hours and we can use that as a relation

[06:56:34.0815] <sfink>
decoder: yes, that would work. I was actually thinking it would be enough to capture the crash string that we require when using `AutoEnterOOMUnsafeRegion`. From a quick look at `grep -F .crash js/src/**/*.cpp`, it looks like there are a handful of duplicates, but that wouldn't be much of a problem. The full stacks might be interesting, I'm not sure, but they'd be harder to compare for identity.

[06:56:55.0690] <decoder>
we can do this with buckets in fuzzmanager maybe

[06:57:09.0213] <decoder>
if it doesnt work, we can still condense it to just asserts

[06:57:20.0047] <decoder>
ill see when I find some time to start this

[06:58:20.0918] <sfink>
I'm not sure it's actually worth the effort, honestly. Especially if a test is inducing artificial OOMs, it doesn't necessarily mean that real OOMs would hit the same locations with the same relative frequencies.

[06:58:46.0316] <decoder>
we could run with OOM testing disabled

[06:58:50.0619] <nbp>
tcampbell: I saw the topic you create when I visited as anonymous, but I no longer see it anymore here: https://discourse.mozilla.org/c/spidermonkey/551 (oh? … opening it again in a new tab fixed it)

[06:58:58.0855] <decoder>
(we have a flag to disable oomTest and friends already)

[06:59:57.0935] <sfink>
ok, that would resolve that problem. Can you tell from your existing ignored run statistics whether there *are* any unhandlable OOMs without oomTest?

[07:02:20.0810] <decoder>
yea, the stats I was posting yesterday are from runs without oom testing only

[07:02:21.0164] <tcampbell>
nbp: btw I set that topic as "wiki" mode which should allow others to edit it as needed

[07:02:26.0509] <decoder>
we have a special pool where oomtesting is enabled

[07:02:31.0936] <decoder>
because it can be disruptive to normal fuzzing

[07:05:12.0342] <sfink>
tcampbell: related to embedder stuff, it looks like I'm closing in on having `autospider.py` switched mostly over to `mach`. One ramification of this is that our CI test of the mozjs packaged tarball will now be built with `mach` as well, meaning that it will be adding in all of the various bits and pieces needed to make the relevant `mach` commands run.

[07:05:55.0154] <nbp>
tcampbell: I was thinking on adding the firefox-source-docs link, but it is already listed on spidermonkey.dev. I think keeping this one as a contact information is good enough, and would not overwhelm users.

[07:05:56.0963] <sfink>
I haven't explicitly broken the `make`-based build, but I don't think I want to continue supporting it, so it'll probably die at some  point.

[07:06:00.0931] <tcampbell>
I think that is okay? We require python to build regardless

[07:06:21.0425] <Ms2ger>
🎉

[07:06:36.0205] <tcampbell>
> <@nbp:mozilla.org> tcampbell: I was thinking on adding the firefox-source-docs link, but it is already listed on spidermonkey.dev. I think keeping this one as a contact information is good enough, and would not overwhelm users.

yeah, I agree. Keeping the stuff on spidermonkey.dev is my preference so we don't risk stale data

[07:06:42.0575] <sfink>
whoa

[07:07:37.0672] <sfink>
SM(pkg) is the last thing blocking me from cleaning it all up for landing. The dang wpt stuff still needs more random crap included from the tree.

[07:08:11.0819] <sfink>
come to think of it, I'm not sure why that broke with my changes. It was already running jstests, and they break whether I run them with `mach` or `make`...

[07:08:20.0625] <sfink>
but anyway, it shouldn't be hard to fix at this point

[07:08:23.0465] <tcampbell>
nbp: I added a section to the website for hacks.mozilla posts. The idea was to link to polished writeups that talk about how the engine _currently_ works. If you had other similar writeups in mind we can consider adding.

[07:08:46.0856] <tcampbell>
sfink: we are going to have more an more junk in pkg builds anyways..

[07:09:17.0151] <tcampbell>
I guess we should get around to fixing the signing question if we really cared, but releng is pretty busy these days

[07:09:20.0629] <sfink>
I *am* rather tempted to split wpt tests and test262 into a separate tarball. The thing is getting kind of huge.

[07:09:52.0399] <tcampbell>
jandem: you were looking at adjusting test layout, right? ^

[07:10:12.0950] <sfink>
yeah, it would be more natural to do after jandem's restructuring

[07:10:15.0512] <tcampbell>
breaking off test262 from pkg builds kind of sounds reasonable

[07:10:18.0391] <sfink>
they'd be called spec-tests

[07:10:38.0627] <tcampbell>
if they want 700MB of spec tests, they might as well get all of Fx with it..

[07:11:07.0704] <sfink>
yes. The tarball is 68MB compressed, which really doesn't sound bad.

[07:11:16.0989] <sfink>
but 734MB uncompressed, which does.

[07:12:26.0753] <tcampbell>
I kind of expect that jit-tests is a pretty good smoke test for embedders build issues

[07:12:43.0971] <sfink>
oh wow, `third_party/rust` is huge! I guess it's all the vendored stuff? It's dominated by winapi crud.

[07:13:04.0990] <Ms2ger>
Yeah

[07:42:01.0829] <iain>
decoder: Another number that I'm interested in is seeing how many *handled* OOMs we currently see while fuzzing, which I think just means counting how often the harness catches the string "out of memory". If there are a lot of them, that's an argument in favour of keeping OOM handling around.

[07:44:03.0339] <decoder>
I think we can get this info by running with --differential-testing and counting how often "ReportOutOfMemory called" is emitted, right?

[07:57:51.0136] <jorendorff>
I have never seen this UI before 

[07:58:04.0780] <Ms2ger>
😲

[07:58:41.0657] <Ms2ger>
You're a day early

[08:02:54.0746] <iain>
decoder: Yeah, that would probably work

[08:09:50.0757] <jandem>
> <@tcampbell:mozilla.org> jandem: you were looking at adjusting test layout, right? ^

yeah, not sure when we'll be able to get to that, but splitting off test262 at least would be really nice

[08:15:58.0706] <mgaudet>
Do we have a plan for test layout changes? (Could be structured as a piecemeal contributor project too) 

[08:17:16.0892] <tcampbell>
Jan started drafting up something based on the last few years of "someone should.."s

[08:18:50.0237] <tcampbell>
(I doubt any of it is surprising)

[08:19:50.0032] <jandem>
mgaudet: put some ideas in https://docs.google.com/document/d/12ZWfthQgGSpo78SQMRn0hBg74dp8cObQpWeYMTcSU8c/edit?usp=sharing

[08:20:20.0654] <jandem>
suggestions welcome. Would be excellent if contributors could help out with this

[08:21:21.0620] <mgaudet>
"Rename mach jsreftests => mach sm-spec-tests"... be still my beating heart 💓

[08:22:27.0810] <jorendorff>
jandem: i still owe you email about Mailman list ownership. It's on my list

[08:25:33.0837] <mgaudet>
I think Jan's list looks really good (I think the only thing I'm slighly iffy on is the rename of jsapi-tests, mostly because I think we've sort of got two perspectives in that directory: On the one hand, testing specific functionality directly via C++ rather than at arms-length via JS; on the other hand, it's also an embedding test in a sense; or are we moving away from calling it jsapi as an embedding API name... the library version of SM I guess tends to be called mozjs) 

[08:26:46.0347] <jandem>
I think it has evolved from jsapi-tests to also testing SM internals like the MacroAssembler, it also includes internal headers

[08:27:20.0042] <jandem>
but true, it's still an embedding test too..

[08:27:44.0430] <tcampbell>
I feel we've lost any semblance of JSAPI stability, and the best way to fix that will be to finish the refactors like splitting out different headers and removing dangerous APIs

[08:28:31.0609] <tcampbell>
it is still tests for the C++ embedding

[08:28:57.0687] <tcampbell>
based on recent chat here it seems like the rust perspective is very different

[08:35:56.0817] <Ms2ger>
We had any semblance before? :)

[08:36:44.0281] <tcampbell>
lol, I think in my head "before" was JS 1.8.5

[08:37:02.0604] <tcampbell>
so no, that battle hasn't been going the right way for a long time

[08:37:17.0798] <tcampbell>
 * so no, that battle hasn't been going the *wrong way for a long time

[08:38:06.0035] <tcampbell>
things like the published opcode definitions on MDN are at extreme odds to reality of dev today

[08:39:10.0548] <mgaudet>
Re our previous conversation about OOM handling: We do need to be cautious about potential UX regressions. [this twitter thread](https://twitter.com/austinnotduncan/status/1369860384782348288) has people irked by Safari reloading pages for 'using too much memory' (which I am guessing is an OOM heuristic potentially being too aggressive) 

[08:49:39.0661] <Amna>
Hello everyone! Hope you're all doing well. I'm an undergrad CS student, looking forward to applying for mozilla outreachy this term. In the list of open projects, there's a spidermonkey project titled as: "Modernize internationalization in SpiderMonkey's regular expression engine." Can someone please brief me about the project? Or let me know about the mentor of the project this term?

[08:50:49.0169] <jandem>
iain: ^

[08:53:27.0160] <iain>
Amna: Hi! That's me, and also mgaudet as a co-mentor

[08:55:38.0927] <iain>
JS regular expressions use Unicode information to support various internationalization features, like case-insensitive matching and [unicode property escapes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes). Right now, we are using a library implemented in C++ called ICU4C to provide that Unicode information. 

[08:56:25.0929] <iain>
There is a new project called ICU4X that is rewriting ICU4C in Rust to improve safety and performance. We want to replace our use of ICU4C with ICU4X.

[08:56:58.0035] <iain>
Do you have any specific questions?

[08:57:25.0598] <iain>
I'm not sure about timelines, but there will be a longer description available on the Outreachy website eventually

[08:58:41.0510] <mgaudet>
The contribution period has been shifted later by two weeks, so will start on March 29th now

[08:59:09.0731] <mgaudet>
in the mean time, if the above has you intrigued, you could definitely start learning about the above topics 

[08:59:11.0161] <iain>
(I should mention that ICU4X is written in Rust, but the work to integrate it will be done in C++.)

[08:59:14.0177] <mgaudet>
in preparation

[08:59:46.0014] <Amna>
I'm very much familiar with c++ but not with rust, I was looking forward to learning rust this summer and then I saw this project. It seems interesting to me so maybe I can utilize these days to learn rust. Wanted to ask, which language will the project use primarily? 

[09:00:31.0273] <Amna>
Also, I got mozilla central before. which code base will I be needing for spidermonkey?

[09:01:10.0502] <iain>
SM is in mozilla-central, in src/js

[09:01:33.0098] <mgaudet>
*js/src

[09:01:36.0938] <iain>
Build instructions are here: https://firefox-source-docs.mozilla.org/js/build.html

[09:01:58.0724] <iain>
 * SM is in mozilla-central, in js/src

[09:02:42.0145] <Amna>
> <@mgaudet:mozilla.org> The contribution period has been shifted later by two weeks, so will start on March 29th now

Does that also mean the initial applications will now be approved on March 29th?

[09:03:19.0833] <mgaudet>
That... is not a question I have a good answer to, sorry

[09:04:03.0377] <iain>
Take this with a pinch of salt, but I think the answer is yes. My understanding is that there were more applications than anticipated, so it will take longer to work through them.

[09:04:48.0199] <iain>
There should be an announcement sent out later today.

[09:04:59.0571] <Amna>
I'm completely new here, and a little lost at the point. So I dont know where to begin from. Any suggestions?

[09:05:19.0398] <Amna>
About preparing for contributing to project

[09:06:40.0182] <iain>
When our full project description goes up, there will be a link with a set of suggested steps. Abbreviated version: start by building the JS shell (using the steps in the link) and running the jit-tests locally (details are in the link; make sure you are configured with --enable-optimize so it doesn't take forever)

[09:08:11.0450] <iain>
Once you've done that, we have an assortment of bugs that we hope are good first bugs on codetribute: https://codetribute.mozilla.org/projects/jseng

[09:12:11.0409] <iain>
Some of the older "good first bugs" might require a bit of compiler-specific knowledge, which we don't expect to be necessary for completing the intl project. We've been making an effort to open some more approachable bugs recently and reserve them for Outreachy applicants; in the interest of fairness, it's probably best if you don't claim those until the application process is officially underway.

[09:13:10.0809] <Amna>
contributions made before the period dont count towards our application, right? 

[09:13:30.0727] <Amna>
but they're helpful in giving an idea of the project code

[09:13:45.0845] <mgaudet>
As I understand it, ues.

[09:13:48.0630] <mgaudet>
 * As I understand it, yes.

[09:15:11.0105] <iain>
Some background reading on our regexp engine: https://hacks.mozilla.org/2020/06/a-new-regexp-engine-in-spidermonkey/

[09:16:46.0298] <Amna>
Alright, I'll follow the steps you've told and the ones mentioned in the link you've shared. Hopefully I will be able to understand atleast some of it. If I have any questions though, can I message here?

[09:17:00.0763] <iain>
Yep! This is a good place to ask questions

[09:17:21.0410] <Amna>
Moreover, I'll learn rust side by side as well

[09:17:38.0579] <Amna>
> <@mgaudet:mozilla.org> As I understand it, yes.

Alright, thank you so much!

[09:17:57.0178] <Amna>
> <@iain:mozilla.org> Some background reading on our regexp engine: https://hacks.mozilla.org/2020/06/a-new-regexp-engine-in-spidermonkey/

Thank you so much for sharing this! :)

[09:21:18.0803] <Amna>
Thank you so much iain and mgaudet for helping! 😀

[09:21:26.0419] <mgaudet>
No problem

[09:21:58.0992] <Amna>
will I be needing javascript knowledge for this project?

[09:22:38.0245] <iain>
Ha! No, not really. I'm only barely adequate at JS myself.

[09:22:54.0825] <iain>
You will need to know enough to write some testcases

[09:23:09.0210] <Amna>
and there's a skill mentioned, called "internationalization"
What does that mean?

[09:24:25.0908] <iain>
Internationalization (often shortened to i18n) is the set of tools that make it possible for software to support multiple languages / regions / etc

[09:25:08.0110] <iain>
So it includes support for different writing systems (like Unicode), but also things like "how do you format a number? How should you display a date?"

[09:26:37.0223] <Amna>
So is it similar to defining standards for different things?

[09:27:20.0810] <iain>
Defining standards is one part of the work. Implementing those standards is another one.

[09:28:22.0694] <iain>
In addition to the regexp features I mentioned earlier, JS has some more i18n support in the Intl object: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl

[09:30:08.0584] <Amna>
Thanks a lot! I'll look into it 

[09:51:10.0804] <jonco>
Is there an easy way to see how long the main thread spends in the JITs?

[09:52:04.0810] <tcampbell>
compiling or executing?

[09:52:11.0868] <jonco>
compiling

[09:52:31.0434] <tcampbell>
iain: ^

[09:53:08.0214] <iain>
Oh no, I saw you typing and was looking forward to learning the answer

[09:53:19.0968] <jonco>
I'm trying to understand the splay latency benchmark... it doesn't seem to be affected by max GC pause time, which is not what I expected

[09:53:43.0386] <tcampbell>
 tracelogger would help for something like that, but I think it might be bitrotted today

[09:54:18.0026] <iain>
Tracelogger needs work to handle the baseline interpreter, I think.

[09:54:22.0487] <tcampbell>
lets see.. we should be able to do a hack if this is local

[09:54:54.0749] <tcampbell>
https://searchfox.org/mozilla-central/source/js/src/jit/BaselineCodeGen.cpp#206

[09:55:10.0227] <tcampbell>
there is a thing for baseline there sums timers for a telemetry probe

[09:55:37.0570] <tcampbell>
iain: can you find the equiv in warp we'd measure?

[09:55:46.0626] <jonco>
tcampbell: cool, thanks

[09:56:14.0337] <tcampbell>
this time might already be in the shell build

[09:56:21.0183] <tcampbell>
just need to extract it

[09:57:52.0987] <iain>
Warp is mostly compiled off-thread

[10:00:03.0416] <iain>
Looks like adding a timer [here](https://searchfox.org/mozilla-central/source/js/src/jit/Ion.cpp#1605) should catch both WarpOracle (the main-thread part) and any main-thread compilation time if we decide not to do it off-thread

[10:00:20.0323] <iain>
 * Looks like adding a timer [here](https://searchfox.org/mozilla-central/source/js/src/jit/Ion.cpp#1605) should catch both WarpOracle (the always-on-main-thread part) and any main-thread compilation time if we decide not to do it off-thread

[10:02:59.0850] <iain>
(I don't think we have any sophisticated logic for deciding to do a warp-compile on main thread; AFAICT, we go off-thread whenever [this](https://searchfox.org/mozilla-central/source/js/src/jit/Ion.cpp#1920-1928) returns true.

[10:03:08.0418] <iain>
 * (I don't think we have any sophisticated logic for deciding to do a warp-compile on main thread; AFAICT, we go off-thread whenever [this](https://searchfox.org/mozilla-central/source/js/src/jit/Ion.cpp#1920-1928) returns true.)

[10:16:09.0666] <tcampbell>
I believe that is pretty much static for a process

[10:39:02.0385] <nbp>
mgaudet: Do we have any special opcode to initialize `var a = [1,2,3];` ?

[10:39:27.0456] <mgaudet>
nbp: InitElemArray maybe? 

[10:39:31.0104] <nbp>
and by special, I mean, a single-ish opcode instead of initializing each element

[10:39:37.0271] <mgaudet>
(vs the more generic InitElem) 

[10:39:46.0272] <nbp>
/me looking

[10:40:11.0786] <nbp>
Thanks!

[10:41:52.0512] <nbp>
mgaudet: So nothing like we used to have for `JSOP_OBJECT`?

[10:52:15.0863] <tcampbell>
nbp: that will still use JSOP_OBJECT if if can ` eval("var x = [1, 2, 3]; dis()")  `

[10:53:00.0277] <tcampbell>
The current process is that we use an ObjLiteral in the Stencil. When we go Stencil -> Script we allocated the `ArrayObject` which can then be mutated by script

[10:53:13.0313] <nbp>
oh?! I would have thought Matthew removed it for making Stencil possible

[10:53:43.0777] <tcampbell>
ObjLiteral is a mini-bytecode that encodes it

[10:54:00.0599] <tcampbell>
mostly happened as a weird sequence of history

[10:54:28.0186] <tcampbell>
the ObjLiteral data meets the requirements of stencil

[10:55:28.0645] <nbp>
confession: Reading files suffixed by `*.java` … I would not have expected so when I committed to work on shared-memory for self-hosted stencil code.

[10:55:30.0469] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[10:55:31.0927] <tcampbell>
what might be nice in future is if we could use same approach outside of run-once contexts to go from ObjLiteral->JSObject

[10:56:06.0422] <tcampbell>
although for small things, explicit bytecode works for the JITs

[10:56:18.0202] <nbp>
Which is why I asked the question, as I was reviewing iain patch on scalar replacement.

[10:56:52.0284] <tcampbell>
yeah, I literally have to pull up searchfox and a jsshell every time I need to answer that question..

[10:57:43.0658] <nbp>
What might be interesting is if we have CowObjLiterals, taken directly out of Stencil.

[10:58:21.0976] <nbp>
Which would be really cool for simple JSON, or Arrays.

[13:51:09.0673] <tcampbell>
confession: Attempting to wrangle some of our prefs into the StaticPrefs system (Bug 1697904)

[13:51:12.0649] <botzilla>
https://bugzil.la/1697904 — NEW (tcampbell) — Migrate more JS prefs to StaticPrefs

[13:57:40.0949] <decoder>
> <@nbp:mozilla.org> confession: Reading files suffixed by `*.java` … I would not have expected so when I committed to work on shared-memory for self-hosted stencil code.

it could be much worse. you could be reading *.pl :P


2021-03-12
[16:40:00.0086] <tcampbell>
confession: Relying on phabricator to find me victim reviewers for removing a "javascript" pref that has nothing to do with spidermonkey and is from the before times. What could go wrong? (Bug 1697954)

[16:40:03.0293] <botzilla>
https://bugzil.la/1697954 — NEW (tcampbell) — Remove unused javascript.options.showInConsole pref

[19:04:23.0505] <sfink>
confession: wrote up a README.txt and uploaded it to https://ftp.mozilla.org/pub/spidermonkey/ (and the releases/ and prereleases/ directories underneath), explaining how to get a recent tarball and pointing to our newer documentation locations.

[00:37:02.0792] <Amna>
iain: I checked again, I have mozilla-unified. Do I need to delete unified and get mozilla-central? (with reference to outreachy project)

[00:39:44.0825] <iain>
mozilla-unified contains mozilla-central plus more. See here: https://mozilla-version-control-tools.readthedocs.io/en/latest/hgmozilla/unifiedrepo.html

[00:40:20.0857] <iain>
It's more than you need, but it will work

[00:42:39.0090] <Lcf.vs>
Tiny question: why there is no checkbox on devtools settings, to keep the console splitted, please? (it's a few boring to change it manually, each time)

[00:43:00.0410] <Lcf.vs>
 * Tiny question: why there is no checkbox on devtools settings, to keep the console splitted, on Firefox, please? (it's a few boring to change it manually, each time)

[00:43:30.0346] <Amna>
This is my js/src folder, am I at the right place?

[00:51:58.0339] <Amna>
I did ./mach build and then ./mach run, and got this. Hope Im doing it right? Apologies, this is my first attempt so I'm not sure.

[00:54:37.0284] <arai>
yes, the directory contains most of SpiderMonkey's source

[00:55:10.0841] <arai>
and looks like you've successfully built the browser, congrats :)

[00:55:50.0533] <Amna>
and another question, how do I get the updated code files? I mean, if there's a change in the code (in original mozilla code), how will I get it on my end? Will I have to download it everytime?

[00:56:06.0932] <arai>
how did you downloaded the source?

[00:56:24.0536] <arai>
if you've used mercurial or git, you can pull/fetch the update

[00:56:31.0072] <Amna>
> <@arai:mozilla.org> and looks like you've successfully built the browser, congrats :)

Thank you so much, feels great! 😀

[00:56:43.0428] <Amna>
> <@arai:mozilla.org> if you've used mercurial or git, you can pull/fetch the update

I used mercurial

[00:57:55.0766] <arai>
okay, then `hg pull central` to download changes from remote, into `.hg` directory, and `hg update central` to update your local tree to the latest code

[00:59:49.0596] <Amna>
so everytime I make a change, I will do hg update central and then run build and run commands, right?

[01:01:18.0327] <arai>
it depends on your purpose.  what are you going do, work on fixing bugs, embed SpiderMonkey into your app, or experiment for research?

[01:02:07.0802] <arai>
when you need to make your change based on latest/updated mozilla-central tip, you'll need to pull and then rebase your work onto the tip

[01:03:31.0396] <Amna>
> <@arai:mozilla.org> it depends on your purpose.  what are you going do, work on fixing bugs, embed SpiderMonkey into your app, or experiment for research?

work on fixing bugs

[01:03:38.0641] <arai>
if you're going to work on fixing bugs,  you'll need to make sure your patch applies onto mozilla-central tip.  so, usually, pull/update before start working on bugs, and not necessary to pull/update until the patch gets landed, unless the patch causes conflict with other patches

[01:04:40.0518] <Amna>
Alright! Thank you! :)

[01:05:56.0077] <jandem>
Lcf.vs: you could try asking in #devtools:mozilla.org 

[01:06:19.0451] <Lcf.vs>
ok, thanks :)

[01:06:43.0562] <jandem>
np

[04:58:56.0797] <annevk>
Is https://github.com/heycam/webidl/pull/963 something anyone here has an opinion on? evilpie chimed in already saying it might be a bit involved.

[05:00:02.0067] <annevk>
I don't really care either way, so I'd love for someone to take a position on behalf of Mozilla. I'd be happy for that person to be evilpie, but I thought I'd check with you all as well.

[05:00:37.0844] <evilpie>
fwiw the implementation for this lives purely in DOM land. We don't need any SpiderMonkey changes for this

[05:03:04.0391] <annevk>
Fair, though who would care about this in #dom:mozilla.org now that bz left is unclear to me :-)

[05:05:46.0684] <evilpie>
peterv reviewed https://hg.mozilla.org/mozilla-central/diff/8e5e6fd199d3d503b38f267901b737751b710413/dom/base/WindowNamedPropertiesHandler.cpp

[05:07:46.0100] <annevk>
evilpie: alright, so you and peterv can have it 😛

[05:09:38.0902] <peterv>
hmm, I don't think I want to have expandos on the named properties objects

[05:28:55.0223] <peterv>
annevk: frankly, I don't care that much about the behaviour, but I dread changing ours for something so obscure 😐️

[05:29:28.0606] <peterv>
also, the experience with changes to named properties on window hasn't been great 🙂

[05:30:08.0896] <peterv>
annevk: lemme see what it would entail on our end

[05:31:48.0318] <annevk>
yeah, Alexey does do due diligence in terms of testing and such so hopefully fallout would be minimal to none, but still

[06:40:04.0236] <Redfire>
How would I create global functions, is it just `JS_DefineFunctionsWithHelp(cx, obj.handle().into(), METHODS.as_ptr())`?

[06:40:25.0512] <Redfire>
where METHODS is a `JSFunctionSpec` thing

[06:40:31.0545] <Redfire>
 * How would I create global functions, is it just `JS_DefineFunctionsWithHelp(cx, global.handle().into(), METHODS.as_ptr())`?

[06:42:06.0470] <Redfire>
 * How would I create global functions like `setTimeout`, is it just `JS_DefineFunctionsWithHelp(cx, global.handle().into(), METHODS.as_ptr())`?

[06:48:53.0576] <jandem>
yes, `JS_DefineFunctionsWithHelp` is what we use in the JS shell

[06:49:21.0352] <Redfire>
*technically speaking*, `JS_DefineProperty` would also work too, right?

[06:50:08.0983] <evilpie>
yeah, but that's only for one property

[06:50:23.0286] <evilpie>
you don't really need to use the `WithHelp` variants

[06:54:27.0922] <tcampbell>
jandem jseward : wrote up the thoughts on Bug 1698102

[06:54:29.0577] <botzilla>
https://bugzil.la/1698102 — NEW (nobody) — Revisit SpiderMonkey pref management

[06:55:04.0114] <tcampbell>
I need to understand a bit more how the pref sync code worked with Worker runtimes, but that might just be an Atomic we need

[06:59:17.0129] <tcampbell>
I'll take a look later today about what is feasible in a short timeline

[06:59:39.0491] <jseward>
tcampbell: noted; thx!

[06:59:44.0705] <tcampbell>
having a basic shadow-pref struct seems pretty easy though

[07:00:34.0787] <tcampbell>
and things like JitOptions are already that but with more steps ;)


2021-03-13
[16:57:19.0478] <sfink>
confession: great success with Board Game Driven Debugging: I have a mysterious failure in automation. Couldn't reproduce locally after several attempts. Got frustrated, kicked off a last run, went and played a board game instead. Came back, it had reproduced. Realized that my code is totally dependent on idle time, so leaving it alone was exactly what was needed.

[16:57:21.0907] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[17:05:05.0041] <tcampbell>
I once had a bug that only reproduced when I went on vacation..

[17:06:54.0027] <tcampbell>
Turned out there was a kernel memory bug and Cron running every hour I was away would create a new process and cause termoil in the kernel. My normal work days I'd be restarting the machine regularly.

[17:09:53.0569] <sfink>
Hah!

[18:50:40.0673] <jorendorff>
it's probably bad if `PropertyResult::kind_` is `0xc0`

[00:17:08.0081] <Amna>
Hello iain , I was trying to build JS Shell and I created mozconfig file as directed (https://firefox-source-docs.mozilla.org/js/build.html). 
First Question: 
What should be the type of mozconfig file? I created a directory in home and placed debugBuild.mozconfig (please correct me if the file extension is wrong) in home/mozconfigs/debug. 

Second Question: I did export MOZCONFIG=/home/amina/src/mozconfigs/debug/debugBuild.mozconfig and then did ./mach build
it took some time to build and then I did ./mach run but it didnt run. Can someone please help me out with this?

Screenshots attached. 

[00:44:39.0282] <jandem>
Amna: it's failing to build the shell (the red `error:` line). Try `./mach clobber` before `./mach build` again?

[00:44:58.0249] <jandem>
also, did you run `./mach bootstrap`?

[00:45:15.0535] <jandem>
 * Amna: it's failing to build the shell (the red `error:`). Try `./mach clobber` before `./mach build` again?

[00:51:44.0836] <arai>
it sounds like, same object directory is shared between multiple mozconfig files with different --enable-debug/--disable-debug configuration.

[00:52:12.0728] <arai>
I wonder if it's better adding `mk_add_options MOZ_OBJDIR=...` into example mozconfig file in the document

[00:52:53.0763] <arai>
oh, opt build section has it

[00:53:36.0654] <arai>
but still people can hit the issue when they're building SpiderMonkey after building Firefox with default configuration

[00:53:53.0335] <jandem>
yeah I was wondering if that's what happened

[01:47:29.0730] <Amna>
> <@jandem:mozilla.org> also, did you run `./mach bootstrap`?

I followed the steps on the building spidermonkey guide. It didnt mention ./mach bootstrap

[01:47:34.0153] <Amna>
I'll do that 

[01:48:21.0612] <Amna>
What is the file extension of mozconfig files?

[01:48:28.0312] <arai>
no extension

[01:48:36.0050] <arai>
just "mozconfig"

[01:49:12.0757] <Amna>
I named my file wrong then I guess? it's named "debugBuild.mozconfig'

[01:49:20.0835] <Amna>
should I just name it mozconfig?

[01:49:21.0542] <arai>
oh

[01:49:27.0312] <arai>
sorry, I misunderstood the question

[01:49:47.0723] <arai>
if you specify it with environment variable, the filename and extention can be anything

[01:50:27.0928] <Amna>
# Build only the JS shell
ac_add_options --enable-application=js

# Disable Optimization, for the most accurate debugging experience
ac_add_options --disable-optimize
# Enable the debugging tools: Assertions, debug only code etc.
ac_add_options --enable-debug 


[01:50:28.0927] <Amna>
This is what I have in mozconfig right now

[01:50:41.0842] <Amna>
I got this from the building guide

[01:50:50.0417] <arai>
yeah, that's correct config

[01:50:59.0186] <arai>
have you built Firefox before?

[01:51:22.0199] <Amna>
yes

[01:51:30.0770] <arai>
if so, they use same object directory (obj-* directory under mozilla-central), and the config can conflict

[01:51:33.0109] <Amna>
> <@amina.binte.tariq:mozilla.org> sent an image.

Here^

[01:51:54.0445] <arai>
so, the workaround is either, to remove the object directory and build from scratch

[01:52:06.0846] <arai>
or specify different object directory inside mozconfig file

[01:52:08.0371] <Amna>
> <@arai:mozilla.org> if so, they use same object directory (obj-* directory under mozilla-central), and the config can conflict

I have mozilla-unified

[01:52:19.0782] <arai>
okay, then mozilla-unified directory

[01:52:40.0373] <arai>
(while building you can ignore the difference between them)

[01:52:59.0287] <arai>
 * (while building, you can ignore the difference between them)

[01:53:06.0157] <Amna>
> <@arai:mozilla.org> or specify different object directory inside mozconfig file

I've put this mozconfig in a different directory (outside mozilla-unified)

[01:53:26.0580] <arai>
have you located object directory?

[01:53:40.0280] <Amna>
it's like I have home directory, which has a directory called mozconfigs and another directory which has mozilla-unified

[01:53:45.0093] <arai>
there will be a directory under mozilla-unified, with a name starts with `obj-`

[01:54:22.0457] <Amna>
> <@arai:mozilla.org> there will be a directory under mozilla-unified, with a name starts with `obj-`

obj-x86_64-pc-linux-gnu. is this it?

[01:54:24.0981] <arai>
yes

[01:54:34.0782] <Amna>
yes, found it

[01:54:36.0889] <arai>
so, the directory is first created while building Firefox

[01:54:48.0891] <arai>
and then the same directory is reused while building SpiderMonkey

[01:55:01.0260] <arai>
(sorry, we didn't expect this situation)

[01:55:46.0520] <Amna>
Sorry, I'm totally new so I didnt know the right way ☹️

[01:56:29.0699] <Amna>
I'll remove this directory and build again

[01:56:32.0989] <arai>
then, if same object directory is used between builds with different configuration, a conflict happens there

[01:56:34.0910] <arai>
then, `./mach clobber` command removes the directory, so that the next build creates the object directory and build from scratch

[01:57:02.0053] <arai>
so, if you're not going to build Firefox again, you can use `./mach clobbber`, and then build SpiderMonkey again

[01:58:06.0775] <Amna>
I'm doing this for outreachy, and I want to work on spidermonkey project but right now Im not sure if I will have to build firefox again or not

[01:58:21.0088] <arai>
if you're going to build Firefox, it's better specifying different object directory in your mozconfig for SpiderMonkey (add `mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/obj-debug-@CONFIG_GUESS@` line to the file)

[01:59:07.0190] <Amna>
so the file should be

[01:59:12.0618] <Amna>
# Build only the JS shell
ac_add_options --enable-application=js

# Disable Optimization, for the most accurate debugging experience
ac_add_options --disable-optimize
# Enable the debugging tools: Assertions, debug only code etc.
ac_add_options --enable-debug 
mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/obj-debug-@CONFIG_GUESS@

[01:59:19.0668] <arai>
yes

[01:59:56.0162] <Amna>
and I should place it in mozconfigs directory outside mozilla-unified right?

[01:59:56.0976] <arai>
after saving the file, try building again with `./mach build`

[02:00:21.0393] <arai>
yeah, it's better placing it outside

[02:00:44.0574] <arai>
if you put files inside mozilla-unified, mercurial will try to store it inside your patch

[02:01:18.0540] <arai>
so, files unrelated to the code itself should be placed outside of the mozilla-unified directory

[02:01:19.0190] <Amna>
Alright

[02:01:34.0217] <arai>
looks good :)

[02:01:34.0596] <Amna>
This is mozconfig file that I have

[02:02:07.0379] <Amna>
> <@amina.binte.tariq:mozilla.org> # Build only the JS shell
> ac_add_options --enable-application=js
> 
> # Disable Optimization, for the most accurate debugging experience
> ac_add_options --disable-optimize
> # Enable the debugging tools: Assertions, debug only code etc.
> ac_add_options --enable-debug 
> mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/obj-debug-@CONFIG_GUESS@

After this I dont need to delete the obj- file, right?

[02:02:42.0647] <arai>
yeah, you don't have to delete for this build 

[02:03:31.0850] <Amna>
export MOZCONFIG=$HOME/mozconfigs/debug
when I run this command, do I need to add file name at the end too?

[02:03:38.0394] <arai>
when you build Firefox again (with default configuration), you'll need to delete the `obj-x86_64-pc-linux-gnu` directory, because the directory already contains inconsistent build result

[02:03:39.0652] <Amna>
like export MOZCONFIG=$HOME/mozconfigs/debug/mozconfig

[02:03:59.0096] <arai>
`export MOZCONFIG=$HOME/mozconfigs/debug/mozconfig`

[02:04:00.0809] <arai>
yes

[02:04:10.0320] <arai>
it should specify the exact path to the file

[02:04:24.0226] <Amna>
So If I will only be working with spidermonkey then I can delete the obj- directory?

[02:04:51.0167] <arai>
err, sorry, I guess I explained it wrongly

[02:05:05.0229] <arai>
usually you don't have to remove obj- directory

[02:05:33.0000] <arai>
the situation that you need to delete the directory is, when the directory has some trouble

[02:05:40.0511] <Amna>
> <@arai:mozilla.org> `export MOZCONFIG=$HOME/mozconfigs/debug/mozconfig`

and I'll be doing this in mozilla-unified directory right?
Like cd mozilla-unified and then this?

[02:05:59.0135] <arai>
`export` command can be done in any directory

[02:06:18.0037] <arai>
it has effect to the current terminal

[02:06:25.0407] <arai>
so, if you close the terminal window, you need to run it again

[02:06:41.0322] <arai>
then, `./mach build` needs to be run inside `mozilla-unified` directory

[02:07:09.0724] <Amna>
> <@arai:mozilla.org> the situation that you need to delete the directory is, when the directory has some trouble

and ./mach clobber helps find the issue occured while building?

[02:07:24.0487] <Redfire>
https://doc.servo.org/mozjs/jsval/fn.StringValue.html, this function requires a `&JSString` as the param,
https://doc.servo.org/mozjs/jsapi/struct.Value.html#method.to_string, however, this one, which i'm trying to use as a parameter returns a `*mut JSString`. How would I get a non mutable `JSString` instead?

[02:07:25.0527] <arai>
`./mach clobber` removes the object directory

[02:07:44.0213] <arai>
so, you can use it when there's some trouble in the current object directory

[02:09:50.0484] <Amna>
> <@arai:mozilla.org> so, you can use it when there's some trouble in the current object directory

Alright! Kinda makes sense now. I've started building, hope it'll work. Thanks a lot! 

[02:10:11.0240] <arai>
nice :)

[02:10:58.0497] <Redfire>
it takes 20-30 mins to compile on this pile of trash 💩

[02:11:07.0153] <Redfire>
 * spidermonkey takes 20-30 mins to compile on this pile of trash 💩

[02:13:47.0177] <arai>
Redfire: `*v.to_string()` or `&*v.to_string()` maybe?

[02:14:00.0052] <Redfire>
i just realised something

[02:14:18.0143] <Redfire>
Code is: ```rs
StringValue(args.get(0).get().to_string())
```
`args.get(0).get()` is already a `Value` though

[02:14:36.0117] <Redfire>
 * Code is:
```rs
StringValue(args.get(0).get().to_string())
```

`args.get(0).get()` is already a `Value` though

[02:14:49.0236] <Redfire>
🤦

[02:15:03.0923] <arai>
or `v.to_string().as_ref().unwrap()` ?

[02:15:11.0351] <arai>
oh

[02:16:35.0630] <Redfire>
is there a way to get a `CallArgs` with all the same arguments, except the first?

[02:17:16.0768] <arai>
I don't think so

[02:18:26.0802] <arai>
it wraps values on the value stack, so removing any arguments means change in underlying stack value layout

[02:19:20.0842] <arai>
what do you want to do with the modified `CallArgs` ?

[02:19:22.0289] <Redfire>
 * is there a way to get a `CallArgs` with all the same arguments, except the first and, second?

[02:20:24.0278] <Redfire>
setTimeout's function signature is `setTimeout(callback, delay[, args])` the `args` are then passed to the callback when running the function

[02:21:04.0622] <Redfire>
via `callback.call(globalThis, args)` i believe

[02:22:26.0898] <Redfire>
 * via `callback.bind(globalThis, args)` i believe

[02:22:28.0475] <arai>
you need to allocate `InvokeArgs` and fill it

[02:23:20.0139] <Redfire>
err, i don't see `InvokeArgs` anywhere

[02:23:24.0535] <arai>
oh

[02:24:21.0097] <arai>
sorry, it was private

[02:25:38.0728] <arai>
then I think you need `JS::RootedVector<JS::Value>` and fill it, and pass it to `Call` https://doc.servo.org/mozjs/jsapi/fn.Call.html

[02:25:39.0673] <Redfire>
could this be it? https://doc.servo.org/mozjs/glue/fn.CreateCallArgsFromVp.html

[02:26:32.0414] <arai>
no, it's mostly for very internal use.  the `vp` is a pointer to value stack, and it expects internal layout

[02:26:43.0765] <arai>
and not for calling function

[02:27:11.0121] <arai>
I mean, not for caller.  it's for callee

[02:27:20.0911] <Redfire>
> <@arai:mozilla.org> then I think you need `JS::RootedVector<JS::Value>` and fill it, and pass it to `Call` https://doc.servo.org/mozjs/jsapi/fn.Call.html

seems like i'd need a `&[JS::Value]`, not a `JS::RootedVector`

[02:27:31.0761] <Redfire>
but i can deal with it, i hope

[02:28:08.0389] <arai>
yeah, there might be some difference between C++ and rust

[02:34:40.0414] <Amna>
0:01.62 /home/amina/src/mozilla-unified/obj-debug-x86_64-pc-linux-gnu/dist/bin/js
js>

[02:34:46.0524] <Amna>
this is what I got^

[02:34:53.0416] <Amna>
is this correct for js shell?

[02:35:05.0211] <arai>
it's SpiderMonkey's JS shell.  congrats :)

[02:35:23.0729] <Amna>
Thank you!! 😀

[02:42:05.0380] <Redfire>
~~i believe they have precompiled versions for download now~~

[02:42:35.0662] <Redfire>
https://ftp.mozilla.org/pub/firefox/releases/87.0b9/jsshell/

[04:01:09.0649] <evilpie>
jonco: Maybe take a look at the patch? I agree this is a bit sketchy, but I think I found a good tradeoff. The module map is now keyed by <uri, global>. So there should be sufficient separation.

[04:03:28.0228] <jonco>
evilpie: could we somehow make a create a separate scriptloader for this case?

[04:04:00.0128] <jonco>
I agree keying off uri and global sounds like it would work but... it doesn't feel like it's the right solution

[04:06:26.0113] <evilpie>
jonco: definitely the better solution. I agree

[04:06:43.0434] <evilpie>
however the ScriptLoader is pretty heavily tied to the Document

[04:15:00.0899] <janl>
hey all, I’m looking into updating SM bindings for CouchDB from 68 to 86 and I’d appreciate any pointers y’all might have for me :)

[04:15:31.0998] <evilpie>
https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/docs/Migration%20Guide.md

[04:16:05.0622] <janl>
oh brilliant, I was two clicks away from that already, thanks! :)

[04:16:42.0013] <janl>
does this mean 78+ are compatible at least until 86?

[04:17:26.0743] <evilpie>
no, but the difference is probably not huge

[04:17:40.0290] <janl>
great thanks, this will get me started

[04:26:19.0936] <janl>
and is there an up to date API reference or am I going through header files (which is fine)

[04:27:52.0483] <Redfire>
> Much of the internal technical documentation of the engine can be found throughout the source files themselves by looking for comments labelled with [SMDOC]. Information about the team, our processes, and about embedding SpiderMonkey in your own projects can be found at https://spidermonkey.dev/.

[04:28:32.0111] <Redfire>
for [SMDOC], look https://searchfox.org/mozilla-central/search?q=[SMDOC]&path=js%2F

[04:28:48.0739] <Redfire>
 * for [SMDOC], look here: https://searchfox.org/mozilla-central/search?q=[SMDOC]&path=js%2F

[04:28:53.0792] <jonco>
evilpie: Well, the patch looks OK

[04:30:19.0239] <jonco>
I remember there were complications about getting the right global for dynamic import... I wonder if that is an issue when using xpc::CurrentNativeGlobal?

[04:32:21.0818] <evilpie>
We use the Global associated with the Loader unless it's a content-script

[04:34:10.0172] <evilpie>
xpc::NativeGlobal can return globals that don't implement `nsPIDOMWindowInner`, i.e. sandboxed globals

[04:40:10.0085] <jonco>
OK, I don't remember what the issue was exactly, something about incumbent globals

[04:41:36.0623] <jonco>
is there any issue with the lifetime of content scripts being different to the main content?

[04:53:34.0897] <evilpie>
I don't know. I would expect the content-script to have the same lifetime as the main content

[05:15:00.0412] <janl>
Thanks all! This took a lot less time than anticipated: https://github.com/apache/couchdb/pull/new/feat/3.x/sm-86

[05:15:33.0859] <jonco>
evilpie: Having looked at the patch it doesn't seem too bad.  Sorry my comment on the bug was a bit harsh.

[05:40:38.0848] <evilpie>
jonco: cheers

[09:35:28.0751] <sfink>
janl: looks good to me. I left a couple of minor comments on the github commit. I'm not that familiar with github, so hopefully the comments are visible somewhere.

[11:59:46.0133] <janl>
@sfink:mozilla.org: your comments are very much appreciated. It needs some more eyes from our end, but this is very helpful! thanks a bunch!

[12:14:02.0599] <ptomato>
janl: if you find anything that wasn't mentioned in the migration guide (https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/docs/Migration%20Guide.md) it would be great if you could send improvements in a pull request!

[14:25:10.0264] <ptomato>
is the meaning of JSGC_BEGIN, JSFINALIZE_GROUP_PREPARE, JSFINALIZE_GROUP_START, etc. documented anywhere?

[14:25:23.0826] <ptomato>
I found https://searchfox.org/mozilla-central/source/js/public/GCAPI.h#427 but ideally I'm looking for something where it's explained more basically

[14:26:20.0741] <ptomato>
(I'm fuzzy on what a group of zones is, and whether the time between JSGC_BEGIN and JSFINALIZE_GROUP_PREPARE is all spent on marking)

[14:28:00.0481] <ptomato>
also, in my application I always see all 6 statuses set in the same order: GC begin, finalize group prepare, finalize group start, finalize group end, finalize collection end, GC end. is there a circumstance under which I should expect to see anything different?


2021-03-14
[16:26:26.0867] <sfink>
I can't actually remember ever having encountered the JSFINALIZE_ stuff before, but I can hazard guesses anyway.

[16:29:15.0091] <sfink>
ptomato: I believe what is going on is that we do most sweeping in the background (and some in parallel as well), but there's a foreground-only prep phase needed before kicking the tasks off.

[16:30:35.0338] <sfink>
the weird part is that if there are certain types of edges between two Zones, then they will impose ordering constraints on their sweeping. In practice, that means that all the collecting Zones get grouped into some number of sweep groups. All the zones in one sweep group are swept together.

[16:32:19.0763] <sfink>
so I would expect to always see JSGC_BEGIN, one or more JSFINALIZE_GROUP_PREPARE -> JSFINALIZE_GROUP_START -> JSFINALIZE_GROUP_END (possibly interleaved if there are multiple sweep groups, or perhaps they are never interleaved, I don't know), and only after the last JSFINALIZE_GROUP_END has come in, GC end.

[16:32:57.0973] <sfink>
if I get a chance, I can look further to get more precise about what's going on. (Or I won't, and jonco will answer it off the top of his head on Monday.)

[17:37:44.0261] <ptomato>
thanks! that would be enlightening :-)

[01:20:16.0467] <Redfire>
I'm just looking through Deno right now, how much effort is it to implement a `setTimeout`

[01:20:33.0097] <Redfire>
cause it seems like *quite* a lot

[01:30:27.0788] <arai>
you'll need to handle a kind of job/task queue, and dispatch it based on timer.  a job queue handling itself is already provided by SpiderMonkey, as part of Promise handling (see `JS::JobQueue`, `JS::SetJobQueue`), but it's independent from timer, and Firefox (gecko) is using different layer of task handling for the timer (microtasks vs tasks, in term of HTML spec)

[01:41:02.0261] <Redfire>
so.... a lot of effort to follow the ES spec

[01:42:36.0413] <arai>
the task/job handling is both in ES spec and HTML spec.  so, it depends on whether your application/embedding follows HTML spec

[01:43:03.0187] <arai>
https://tc39.es/ecma262/#sec-jobs and https://html.spec.whatwg.org/#integration-with-javascript-jobs

[01:44:23.0673] <arai>
ES spec has some requirements (it's in section 9.4 above), and HTML spec defines the detailed steps

[01:45:23.0202] <arai>
(and... `setTimeout` isn't part of ES)

[01:46:26.0806] <Redfire>
hm, i see

[01:51:13.0785] <Redfire>
so, TL;DR very hard

[01:53:23.0052] <Redfire>
I shall hence, ignore the timers for now and go on to es modules

[04:07:11.0272] <Redfire>
how does one check if a `JSObject`/`JS::RootedObject` contains any keys

[04:09:24.0188] <arai>
Redfire: if it's about own property, `JS_HasOwnPropertyById`, or `JS_HasOwnProperty`

[04:17:03.0188] <Redfire>
also, how does one initialise a `SourceText` using rust-mozjs, I can't seem to find anything

[04:19:43.0408] <Redfire>
oh wait, found it

[04:19:47.0833] <Redfire>
https://doc.servo.org/mozjs/rust/fn.transform_u16_to_source_text.html

[05:57:51.0017] <Redfire>
hmm, rust-mozjs has a macro for `CapturedJSStack` but I still can't seem to find a way to get the exception

[05:58:43.0120] <evilpie>
JS_GetPendingException ?

[06:00:14.0643] <Redfire>
there's no param or similar to use the exception from that in `CapturedJSStack` as far as i can see

[06:01:49.0486] <Redfire>
unless...

[06:02:02.0347] <Redfire>
i use the new method instead of the macro

[06:02:09.0065] <Redfire>
 * i use the `new` method instead of the macro

[06:14:14.0102] <Redfire>
hmm, not working
```rs
			if JS_IsExceptionPending(rt.cx()) {
				rooted!(in(rt.cx()) let mut rval = UndefinedValue());
				if JS_GetPendingException(rt.cx(), rval.handle_mut().into()) {
					rooted!(in(rt.cx()) let mut obj = rval.get().to_object());

					let stack = CapturedJSStack::new(rt.cx(), obj, None);
					let js_stack = stack.and_then(|s| s.as_string(None, StackFormat::SpiderMonkey));
					if let Some(stack_trace) = js_stack {
						println!("{}", stack_trace);
					}

					JS_ClearPendingException(rt.cx());
				}
			}
```

[06:14:41.0498] <Redfire>
the `stack_trace` is just an empty string rn

[06:17:33.0691] <evilpie>
looks like CapturedJSStack always captures the current stack https://doc.servo.org/src/mozjs/rust.rs.html#1332

[06:20:50.0116] <Redfire>
that means that this would have the same result(which it does)
```rs
			if JS_IsExceptionPending(rt.cx()) {
				capture_stack!(in(rt.cx()) let stack);
				let js_stack = stack.and_then(|s| s.as_string(None, StackFormat::SpiderMonkey));
				if let Some(stack_trace) = js_stack {
					println!("Debug 3");
					println!("{}", stack_trace);
				}

				JS_ClearPendingException(rt.cx());
			}
```

[06:20:58.0952] <Redfire>
 * that means that this would have the same result(which it does)
```rs
			if JS_IsExceptionPending(rt.cx()) {
				capture_stack!(in(rt.cx()) let stack);
				let js_stack = stack.and_then(|s| s.as_string(None, StackFormat::SpiderMonkey));
				if let Some(stack_trace) = js_stack {
					println!("{}", stack_trace);
				}

				JS_ClearPendingException(rt.cx());
			}
```

[06:24:02.0315] <Redfire>
(i dont think the `JS_IsExceptionPending` matters anymore either but that's not the problem rn

[06:24:09.0750] <Redfire>
 * (i dont think the `JS_IsExceptionPending` matters anymore either but that's not the problem rn)


2021-03-15
[02:45:13.0599] <jonco>
ptomato: it's always JSGC_BEGIN, then one or more repetitions of JSFINALIZE_GROUP_PREPARE, JSFINALIZE_GROUP_START, JSFINALIZE_GROUP_END, then JSFINALIZE_COLLECTION_END and finally JSGC_END

[02:46:04.0135] <jonco>
ptomato: if you don't have more than one zone you probably won't see more than one set of the GROUP statuses

[02:47:35.0600] <jonco>
ptomato: groups are swept independently and don't interleave

[07:02:56.0573] <mgaudet>
jonco: I'm hoping to help shepherd jon4t4n's patch to landing (https://phabricator.services.mozilla.com/D106902) Submitted a try build now to shake out any functional issues. If you're comfortable with the approach as well, I think I'll aim for this to land right after the soft freeze (Next monday). Just looking for a 👍️ whenever it can get on your plate  

[07:22:11.0809] <jonco>
mgaudet: I'll take a look...

[07:45:49.0306] <jonco>
mgaudet, jon4t4n : is there a patch to update the dom module loader following the API changes here?

[07:49:38.0651] <Redfire>
can anyone help me on why MacOS built but Windows and Ubuntu didn't?
https://github.com/Redfire75369/spiderfire/runs/2112987200?check_suite_focus=true

[08:12:57.0475] <mgaudet>
jonco: Not sure if he's in chat, but I've forwarded concerns on the patch. The approach seems OK to you though in the meantime, as a partial step towards import assertions / JSON modules? Or would you prefer to see the three pieces land at once? 

(This patch would leave us in a slightly awkward position of having -partially- implemented assertions, but not all the way, so our algorithmic implementation of the spec is sort of one foot in the new world, one foot in the old) 

[08:25:15.0196] <ptomato>
jonco: thanks!

[08:25:51.0435] <ptomato>
jonco: does that mean the time between JSGC_BEGIN and JSFINALIZE_GROUP_PREPARE is marking?

[08:27:17.0576] <jonco>
ptomato: yes mostly

[08:28:17.0151] <jonco>
there's various other things the GC does but it's mostly marking

[08:30:02.0146] <jonco>
mgaudet: usually we'd land more of it together I think... but this seems fine

[08:32:12.0284] <jonco>
mgaudet: we will need to update the dom module loader first though

[08:33:10.0133] <mgaudet>
Yes. For sure. 

[08:37:10.0067] <evilpie>
Redfire: looks like you are running into https://bugzilla.mozilla.org/show_bug.cgi?id=1612667, which was fixed in 74

[08:37:56.0212] <evilpie>
can you use a newer spidermonkey version?

[08:40:35.0400] <Redfire>
im using the most updated rust-mozjs :think

[08:40:42.0010] <Redfire>
 * im using the most updated rust-mozjs 

[08:42:57.0632] <Redfire>
which, i believe uses 78?

[08:44:32.0863] <Redfire>
uses 84 actually

[08:45:01.0596] <evilpie>
weird that code should not exist in 84

[08:45:31.0962] <Redfire>
it compiles fine on windows on my local machine

[08:45:36.0684] <Redfire>
which makes it all the weirder

[08:45:43.0399] <Redfire>
 * it compiles fine on windows on my local machine and mac on gh actions

[08:48:05.0671] <jon4t4n>
mgaudet: Yes, I am here, but not that active. No, there is no patch yet. I am a bit busy with school now at the beginning of the week. I will take a look at the dom module loader later this week.

[08:49:04.0095] <Redfire>
> <@redfire75369:mozilla.org> it compiles fine on windows on my local machine and mac on gh actions

compiles on WSL locally as well 🤔

[08:49:05.0319] <mgaudet>
jon4t4n: No worries :) I just wanted to apply some effort on my side here to make sure the patch wasn't languishing without feedback. At this point I'm comfortable waiting for you over time :) 

[08:49:35.0656] <mgaudet>
 * jon4t4n: No worries :) I just wanted to apply some effort on my side here to make sure the patch wasn't languishing without feedback. At this point I'm comfortable waiting for you

[09:01:01.0130] <Redfire>
mention me if you figure anything ouy

[09:01:09.0923] <Redfire>
 * mention me if you figure anything out

[09:13:11.0766] <evilpie>
Redfire: I am not look into this. I don't know much about moz-js. Maybe open an issue and ask them directly?

[09:21:43.0681] <tcampbell>
evilpie: were you going to remove the BinAST fragments from ScriptLoader? or just wondering why they were there

[09:22:44.0954] <evilpie>
I was mostly wondering. I don't have a patch or anything like that

[09:23:43.0108] <tcampbell>
okay, I may do myself. I'm stripping it out for a local prototype as I try to work in the stencil caching

[10:01:33.0011] <tcampbell>
/me sighs..

[10:01:36.0884] <tcampbell>
pref startup is such a mess

[10:18:32.0413] <mccr8>
startup is such a mess

[10:19:31.0543] <nbp>
> <@tcampbell:mozilla.org> pref startup is such a mess

hum … can you give more info? I am currently copying the code for the self-hosted Stencil.

[10:19:50.0652] <nbp>
if I can do better :P

[10:21:40.0288] <tcampbell>
nbp:  Bug 1697904, Bug 1698311, Bug 1697560, Bug 1698473.

[10:21:41.0650] <botzilla>
https://bugzil.la/1697904 — NEW (tcampbell) — Migrate more JS prefs to StaticPrefs

[10:21:42.0385] <botzilla>
https://bugzil.la/1698311 — NEW (nobody) — "once" StaticPrefs anti-footgun is a footgun

[10:21:43.0080] <botzilla>
https://bugzil.la/1697560 — ASSIGNED (jseward) — wasm JIT preferences are sometimes ignored

[10:21:43.0842] <botzilla>
https://bugzil.la/1698473 — ASSIGNED (lth) — SIMD wormhole not being enabled in worker process

[10:21:50.0525] <tcampbell>
Still trying to distill out a plan =\

[10:23:14.0347] <lth>
in particular, workers do not appear to get non-default context options at all, very weird

[10:23:43.0113] <tcampbell>
lth: https://searchfox.org/mozilla-central/source/dom/workers/RuntimeService.cpp#706

[10:23:48.0662] <tcampbell>
so that is the closest I can find

[10:23:57.0541] <tcampbell>
but I need to pull up in browser and understand..

[10:24:16.0781] <nbp>
ok, more a limitation of such preferences than an implementation ugliness

[10:24:28.0623] <lth>
huh

[10:24:59.0342] <lth>
my particular bug is actually a mustfix for FF88 so any quick hack that can get past review is fine for now...

[10:25:10.0962] <lth>
😬

[10:25:46.0065] <tcampbell>
oh yikes.. we have an observer to workers, but it needs to fire before the CX? that makes no sense

[10:25:57.0014] <lth>
/me goes to cook dinner, will check in later

[10:25:57.0512] <tcampbell>
okay. will try to spend the afternoon on this

[10:26:12.0372] <tcampbell>
sounds like this is a problem for all of us =\

[10:26:28.0425] <tcampbell>
workers were missing bigints before I remember

[10:27:21.0585] <tcampbell>
lth: is the wormhole gated on url anywhere?

[10:48:25.0935] <nbp>
confession: I've finally found the pivot point of the content process, where the Shmen is available and where to punch holes to get it to the init function of the self-hosted code. Now, looking for the opposite in the parent process.

[10:48:29.0125] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[10:50:42.0889] <lth>
tcampbell: no

[10:51:17.0511] <lth>
tcampbell: https://axis-of-eval.org/sandbox/wormhole-test.html should work as a test case, if the prefs are ok then both tests there pass

[10:51:29.0239] <tcampbell>
oh thanks. that helps

[10:52:16.0084] <tcampbell>
There might be a missing one-liner for the wormhole pref that might help. Need to look at julian's original bug which I think is more complicated..

[11:00:10.0280] <tcampbell>
lth: good news, the dumb fix works.. posting patch

[11:09:21.0286] <tcampbell>
actually.. might also apply to jseward's wasm-baseline bug

[11:19:14.0133] <tcampbell>
PSA: If you update [ReloadPrefsCallback](https://searchfox.org/mozilla-central/source/js/xpconnect/src/XPCJSContext.cpp#928) you must also update [LoadContextOptions](https://searchfox.org/mozilla-central/rev/aa9a7136835deb0eeba00c62bb50a4a0e2cdea2d/dom/workers/RuntimeService.cpp#232)

[11:19:22.0979] <tcampbell>
😬

[11:20:36.0702] <tcampbell>
(and about half a dozen other places.. sigh)

[11:22:00.0670] <tcampbell>
I'm still in favour of migrating all.js prefs to StaticPrefsList.yaml, and then rolling our own python script to process the YAML and do basic code gen for the general needs of spidermonkey.

[11:23:16.0468] <tcampbell>
We can auto generate the ReloadPrefsCallback, etc.

[11:23:48.0435] <tcampbell>
(and by autogenerate, I probably just mean generate a macro list or C++-initializer-list and have our code use that..)

[11:25:01.0260] <tcampbell>
ideally generate the jsshell goo for us at the same time, and try to get away from ContextOptions as much as possible since they seem to largely lead to unwanted surprises..

[12:09:15.0877] <sfink>
I was today years old when I learned that `mach try fuzzy` can take a path to a test, and generate a try task that runs only that test.

[12:20:18.0085] <lth>
tcampbell: thank you!

[12:20:31.0320] <lth>
obviously, rs=me for anything that has a single definition...

[15:13:12.0409] <mgaudet>
confession: Found the failing bug in a test case on a backed out set of patches from Jason. 

[15:16:07.0408] <zbraniecki>
tcampbell iain who's the right person (during Yulia's PTO) to talk to about Temporal?

[15:16:48.0128] <tcampbell>
I'm going go volunteer iain first.. 

[15:17:46.0353] <zbraniecki>
excellent.

[15:26:45.0924] <tcampbell>
 * I'm going to volunteer iain first..

[15:28:16.0741] <tcampbell>
confession: Attempt #2 at trying to yaml-ify some of our prefs (Bug 1697904)

[15:28:18.0371] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[15:28:19.0518] <botzilla>
https://bugzil.la/1697904 — NEW (tcampbell) — Migrate more JS prefs to StaticPrefs

[15:32:59.0682] <tcampbell>
/me is still not comfortable writing Gecko code and not checking for hashtable insertions to OOM...

[15:33:30.0827] <tcampbell>
/me ducks

[15:33:38.0819] <iain>
This is commonly known as "Stockholm syndrome"

[15:36:49.0620] <iain>
Speaking of ducking: I am going to bounce the question about Temporal back to tcampbell in the sense of reminding him to review the patch for bug 1695937

[15:36:50.0980] <botzilla>
https://bugzil.la/1695937 — ASSIGNED (dminor) — Add intl::NumberFormat and use it to format numbers in Fluent

[15:37:51.0536] <tcampbell>
oh right.. I'll make sure to do that tomorrow. I think we reached the right compromise for now

[15:47:59.0762] <iain>
(^ Also jandem )

[15:49:04.0805] <Redfire>
update: it seems my local copy is using https://github.com/servo/rust-mozjs/commit/db90a4651adcc1447d1eb8c4bb13f18ea957d263 instead of the most recent commit, hence, why it works?


2021-03-16
[17:57:50.0860] <ptomato>
in the object returned by js::gc::NewMemoryInfoObject (https://searchfox.org/mozilla-central/source/js/public/GCAPI.h#1184) (let's call it `info`), what is the difference between `info.gcBytes`/`info.mallocBytes` on the one hand, and `info.zone.gcBytes`/`info.zone.mallocBytes` on the other?

[18:00:03.0830] <ptomato>
and is there another way to get this info, using the embedder API, without allocating a JSObject?

[19:13:15.0673] <sfink>
ptomato: info.gcBytes should give the sum over all zones

[19:13:33.0686] <sfink>
info.mallocBytes is the same, except I think there can also be malloc memory not associated with any ZOne

[19:15:13.0660] <sfink>
`gc::NewMemoryInfoObject` does allocate an object, but all of its fields are getters that access runtime-wide state. So you only need one.

[19:15:25.0507] <sfink>
I don't think the things it accesses are exposed through the embedding API

[19:16:02.0223] <sfink>
internally, it calls eg `cx->runtime()->gc.heapSize.bytes()` which looks very much non-exposed

[19:17:06.0861] <sfink>
bleh. Actually, I see from the implementation of mallocBytes that it purely sums over all Zones. We now do have accounting that could be exposed that would better match what I said first.

[19:40:33.0398] <ptomato>
thanks!

[19:41:44.0073] <ptomato>
as an embedder, if I'm looking for meaningful statistics about how much memory my embedded code (say, GNOME Shell for example) is using, is one of these more meaningful than the other?

[19:42:52.0897] <ptomato>
I only have one JSContext, so I believe that means only one zone? so `info.zone.gcBytes` would indicate more accurately what my JS code is taking up? whereas `info.gcBytes` includes other JS engine overhead?

[19:42:56.0950] <ptomato>
is that accurate?

[19:48:13.0054] <sfink>
JSContext is (now) per-runtime, so it's not at all surprising that you'd only have one. (You would need another process or at least thread to have another one.)

[19:48:29.0040] <sfink>
but how many Zones you have is somewhat separate

[19:48:53.0833] <sfink>
unless you're explicitly creating multiple zones, you'd normally just have one of those too

[19:49:44.0017] <sfink>
so the numbers may be the same. Though in your version, there's a self-hosting zone that sort of gets shared -- I guess in light of that, you're right, `info.zone.gcBytes` would be a better estimate for your JS code

[19:50:19.0480] <sfink>
but note that if you *do* create multiple Zones, the zone it's reporting on is the zone that the memory object is in, which is a little weird.

[19:51:04.0215] <sfink>
hm, in the shell the zone and total numbers are rather different

[19:51:33.0133] <sfink>
so maybe it is better to just use the zone-specific one, to ignore whatever else that is

[19:52:33.0652] <sfink>
note that these leak a fair amount of internal state, so it might be better not to have them available to your equivalent of user code

[20:07:16.0532] <ptomato>
indeed, I'm piping them to sysprof (https://wiki.gnome.org/Apps/Sysprof)

[20:09:22.0555] <ptomato>
in a small test program I've been seeing numbers like: `{ gcBytes: 1077248, mallocBytes: 217866, zone: { gcBytes: 577536, mallocBytes: 80590 } }`

[20:11:26.0066] <ptomato>
I've also been wondering if the numbers that you get from `JS::CollectRuntimeStats` are these same ones but expressed differently?

[20:11:59.0622] <ptomato>
`JS::RuntimeStats::realmTotals` and `JS::RuntimeStats::zTotals` are quite different from each other

[20:14:57.0233] <sfink>
Hm. One difference is that the memory object is used by pretty much nobody, and is really giving a direct read on internal data structures. RuntimeStats is actually used, often, for `about:memory` and so probably sees a lot more testing. Not to mention that it's [somewhat documented](https://searchfox.org/mozilla-central/rev/a848cde8a73065fcc41902ac58c65821eb9a44ca/js/public/MemoryMetrics.h#807-828)

[20:15:57.0820] <sfink>
it looks like RuntimeStats is probably a bit slower (it iterates over more stuff; the memory object iterates over zones but I think that's it)

[20:16:26.0956] <ptomato>
oh, interesting

[20:16:33.0727] <sfink>
until recently, the malloc stats from the memory object were useless, since we only tracked allocations and not deallocations. But it should be better now.

[20:17:17.0689] <ptomato>
do you recall a bug number from that? I'm curious if it's been fixed in esr78

[20:17:28.0772] <ptomato>
there was something that seemed to only go up and not down, but I'm not sure if it was that

[20:18:19.0127] <ptomato>
in that doc snippet, what's the difference between decommitted and unused bytes?

[20:18:56.0162] <sfink>
bug 1395509, it looks like. That was 55.

[20:18:57.0597] <botzilla>
https://bugzil.la/1395509 — RESOLVED (jonco) — Track the amount of malloc memory precisely

[20:19:37.0468] <sfink>
decommitted is where we told the OS that we wouldn't use the memory and it could kick it out of the page file or whatever. (The exact semantics differ slightly between OSes.)

[20:20:37.0349] <sfink>
VirtualFree(MEM_DECOMMIT) on WIndows, madvise(MADV_DONTNEED) on linux, madvise(MADV_FREE_REUSABLE) on osx

[20:20:53.0140] <ptomato>
got it

[20:21:30.0518] <sfink>
so the virtual memory addresses are still allocated, but no physical memory backing them

[20:30:20.0157] <ptomato>
what's the difference between `realmTotals` and `zTotals` in RuntimeStats?

[20:31:07.0320] <ptomato>
especially if I collect them into TabSizes

[20:31:30.0497] <ptomato>
I get 0 strings in the realmTotals, and 0 objects and 0 private in the zTotals

[20:31:46.0854] <ptomato>
not quite sure what the difference is between "private" and "other" in TabSizes

[20:59:04.0234] <sfink>
I'm not sure. realmTotals are for realms, zTotals are for zones, given what you said I'm guessing that it's because strings are zone-wide and all objects are in realms already so they are accounted there instead of in the realm.

[20:59:09.0970] <sfink>
but I have to run now, sorry

[20:59:32.0926] <ptomato>
thanks for all the answers though! I really appreciate it

[02:00:57.0291] <Redfire>
> <@evilpie:mozilla.org> Redfire: I am not look into this. I don't know much about moz-js. Maybe open an issue and ask them directly?

https://github.com/servo/rust-mozjs/issues/538
Just made one, let's see if they have any idea what's happening.

[02:41:04.0861] <Redfire>
completely unrelated
let's say I wanted to make all the methods on `console` getters so they could not be modified at runtime, how would I go about such a thing?
https://doc.servo.org/mozjs/jsapi/type.JSGetterOp.html this looks like it could be useful, but I'm not sure how I could use it

[02:42:40.0404] <Redfire>
 * completely unrelated
let's say I wanted to make all the methods on `console` getters so they could not be modified by the user at runtime, how would I go about such a thing?
https://doc.servo.org/mozjs/jsapi/type.JSGetterOp.html this looks like it could be useful, but I'm not sure how I could use it

[02:45:33.0913] <jandem>
can't you just define them as non-configurable/non-writable? `JSPROP_READONLY | JSPROP_PERMANENT` attributes

[02:46:14.0898] <jandem>
JSGetterOps are a bit weird, it's best not to use them if you can

[02:48:11.0180] <jandem>
[this](https://searchfox.org/mozilla-central/rev/526a5089c61db85d4d43eb0e46edaf1f632e853a/js/src/shell/js.cpp#10513-10522) is an example of a getter property, but note that getters can still be redefined with defineProperty if they're configurable

[02:50:09.0049] <Redfire>
currently, i'm defining the methods with `JS_DefineFunctionsWithHelp`, I assume I'd have to switch to `JS_DefinePropertyById` to use the attributes?

[02:53:09.0902] <jandem>
Redfire: I think you can use the readonly/permanent attributes I mentioned above as `flags` [here](https://searchfox.org/mozilla-central/rev/526a5089c61db85d4d43eb0e46edaf1f632e853a/js/src/jsfriendapi.h#183-194)

[02:56:51.0500] <Redfire>
can you only use 1 flag then?

[03:02:35.0353] <jandem>
it's a bit mask, so you can use multiple flags like this: `JSPROP_READONLY | JSPROP_PERMANENT`

[03:03:00.0265] <Redfire>
oh, the flags are set up such that the bits never overlap

[03:03:41.0538] <Redfire>
so i'd want ENUMERATE, READONLY and PERMANENT?

[03:37:41.0209] <Redfire>
rips, updating mozjs broke building https://paste.mozilla.org/nYmPUMBq

[04:26:59.0283] <Redfire>
 * rips, updating mozjs broke building https://gist.github.com/Redfire75369/6e801b7bbd3f477122438cbe28b00550

[06:02:19.0863] <tcampbell>
jandem lth: I wonder if for jit-related prefs we should generally push them to only apply on restarts, and maybe work with Fx UI folks to add a "restart required" hint to about:settings?

[06:02:23.0928] <tcampbell>
 * jandem lth: I wonder if for jit-related prefs we should generally push them to only apply on restarts, and maybe work with Fx UI folks to add a "restart required" hint to about:config?

[06:03:01.0362] <tcampbell>
I presume the main problem is remembering to restart rather than the restart?

[06:04:13.0997] <jandem>
+1, for the (non-Wasm) JIT prefs we've already been moving to process-wide and restart-required

[06:04:25.0938] <tcampbell>
One thing I'm not sure how to handle is all the JitOptions that were never exposed as prefs. We probably don't want them as enumerable prefs, and probably don't want them un-enumerable for the browser case?

[06:04:53.0287] <tcampbell>
lol.. maybe we need to add ENUMERABLE / CONFIGURABLE / RESTART bits to the yaml ;)

[06:05:05.0256] <jandem>
`about:config` is the UI for advanced users and the gfx prefs for example also require a restart, so I'm not too worried about changing behavior there

[06:05:43.0488] <tcampbell>
yeah, would be nice to have an icon or a message at the top saying "restart required" if you toggle one of them

[06:06:48.0353] <jandem>
(I think new content processes get the new pref value without `mirror: once`?)

[06:09:36.0263] <jandem>
tcampbell: for JitOptions we never exposed as prefs, maybe we should just keep these in JitOptions for now,? I'm not sure about 'polluting' StaticPrefList.yaml with internal knobs

[06:11:19.0969] <tcampbell>
Maybe we want our own yaml for them?

[06:11:43.0140] <tcampbell>
Even if internal knobs, we expose a bunch to the shell

[06:11:45.0864] <jandem>
I think that would be ideal, maybe could be combined with how we handle shell flags

[06:11:55.0256] <tcampbell>
 * Even if internal knobs, we expose a bunch to the shell, and we realy don't want to have worker/non-worker surprises

[06:12:42.0124] <jandem>
they are already process-wide though

[06:12:49.0340] <tcampbell>
true

[06:13:12.0135] <tcampbell>
I guess I want to generalize JitOptions to not be limited to jit

[06:13:24.0945] <tcampbell>
contextoptions seems to basically be never what we want

[06:15:30.0800] <jandem>
realm options could probably be migrated too, we sometimes use these for new features but it has the same potential for footguns

[06:18:18.0007] <jandem>
tcampbell: so we'd have InternalPrefList.yaml with exactly the same format? then exposing a pref to the browser is a matter of moving it to StaticPrefList.yaml, that sounds nice

[06:25:30.0962] <tcampbell>
yeah, that would be the thought

[06:57:46.0586] <lth>
tcampbell: i think that would be fine.  in the past we (wasm) have erred on the side of flexibility but the result is frequently messy and brittle

[07:45:31.0628] <wingo>
jandem: did you ever consider generating the C++ interpreter from the baseline interpreter codegen?  i.e. writing out C++ to a file or something.  i guess that sounds silly

[07:47:23.0801] <wingo>
i guess that's what jsc does with the llint cloop target, though they have that external ruby compiler

[07:48:08.0772] <wingo>
maybe it buys nothing for a low-overhead part

[07:48:21.0891] <jandem>
we've considered generating trampolines + blinterp code at build time and then baking it into the binary, but it's quite a lot of work

[07:48:26.0477] <jandem>
/me back in an hour or so

[07:49:11.0883] <wingo>
/me nod

[08:29:13.0148] <evilpie>
oh we got our first question discourse https://discourse.mozilla.org/t/js-wasm-vs-js-native-function-call-overhead/77120

[13:38:21.0358] <mgaudet>
Thoughts on removing internal-to-engine uses of `JSID_IS_ATOM` and `JSID_TO_ATOM`, replacing them with the `PropertyKey` methods, leaving those macro-like functions to embeddings? (Would a great fountain of good-first-bugs for outreachy, and remove a peculiar API-- also simpler code after) 

[13:41:33.0072] <evilpie>
mgaudet: the plan is definitely to remove all `JSID_` APIs. It's just a lot of work

[13:42:03.0130] <mgaudet>
A lot of work that's mechanical is -exactly- what we would like right now :) 

[13:43:07.0453] <evilpie>
Good

[13:44:42.0463] <mgaudet>
I'll plan to open a meta bug + write a template for generating these bugs + a few examples tomorrow, unless there are objections :) 

[15:51:07.0854] <tcampbell>
sounds good to me. I also defer to evilpie's judgment on this question anyways.


2021-03-17
[22:43:43.0806] <Redfire>
Any idea what could be causing the build to fail? https://gist.githubusercontent.com/Redfire75369/0c0573d3aeb6d66afcd709b5d0d07f3d/raw/dd11757a5809e2856c7eb15a9bd7c3402e1f8c0b/output.log

[01:14:28.0539] <Redfire>
how on earth do I get a `JSString` from  a `String`?

[01:15:26.0518] <arai>
rust's standard `String` ?

[01:17:17.0402] <arai>
if so, `JS_NewStringCopyUTF8Z` or `JS_NewStringCopyUTF8N`

[01:18:14.0215] <arai>
`Z` for null-terminated, `N` for specific length

[01:18:45.0334] <arai>
they receive UTF-8 string buffer, and returns allocated `JSString` (or `nullptr` for failure)

[01:18:52.0977] <arai>
 * they receive UTF-8 string buffer, and returns allocated `JSString` pointer (or `nullptr` for failure)

[01:20:45.0467] <arai>
so, you can pass `String::as_bytes` or something to it

[01:22:59.0444] <Redfire>
uhh
```rs
args.rval().set(StringValue(JS_NewStringCopyN(cx, string.as_ptr() as *const i8)));
```

[01:23:40.0361] <Redfire>
 * uhh, something like this?
```rs
args.rval().set(StringValue(JS_NewStringCopyN(cx, string.as_ptr() as *const i8)));
```

[01:23:51.0927] <Redfire>
 * uhh, something like this?
```rs
args.rval().set(StringValue(JS_NewStringCopyZ(cx, string.as_ptr() as *const i8)));
```

[01:24:04.0561] <arai>
`JS_NewStringCopyZ` receives Latin-1 string

[01:24:27.0461] <arai>
please use functions with `UTF8`, unless you're sure it's all ASCII

[01:24:36.0795] <Redfire>
I don't see how I'm supposed to get `ConstUTF8Chars`

[01:25:05.0903] <Redfire>
 * I don't see how I'm supposed to get `ConstUTF8CharsZ`

[01:25:11.0488] <arai>
maybe you can construct it in place?

[01:25:19.0798] <Redfire>
hmm, i'll try

[01:30:04.0962] <Redfire>
wait, my string's won't be null-terminated

[01:30:19.0865] <arai>
then `N` variant can be used

[01:30:59.0551] <Redfire>
and I need to construct this somehow? https://doc.servo.org/mozjs/jsapi/struct.UTF8Chars.html

[01:31:40.0385] <arai>
I hope there's some example in the servo

[01:36:23.0719] <Redfire>
i'm not seeing any

[01:51:39.0930] <18f>
Hey, I read the spidermonkey source code.

[01:53:36.0067] <18f>
and I am so confused, if we won't hit the block, why we will think it's hitState is count... I think maybe it should be |NotDefined|

[01:54:21.0277] <18f>
Is there a way mark the hitstate be count, but count number is 0?

[01:54:38.0111] <18f>
sorry for my bad English, and thank u gays too much.

[02:00:41.0134] <arai>
nbp: ^

[02:02:27.0213] <arai>
there had been `setHitCount(0)` call when the `HitState` was added, but now I don't see it.  maybe it's obsolete code?

[02:03:24.0501] <arai>
first added by https://hg.mozilla.org/mozilla-central/rev/b0a0ff5fa705a0906c00f76fee07b913ab6d42ed , and looks like it had one more variant

[02:08:57.0259] <18f>
cool enough

[02:09:04.0679] <18f>
I will try this , thank u so much

[02:10:59.0219] <18f>
I think the secret at here, "WarpBuilder::startNewOsrPreHeaderBlock".

[02:11:38.0569] <18f>
But I need do more work to confirm this ☹️

[02:11:42.0105] <18f>
Thank u

[02:12:57.0057] <arai>
if it turns out the code is never reached, it would be better removing those enum, fields, and code around that

[02:13:58.0287] <18f>
Yes, spidermonkey use |prune branch| to do this

[02:14:58.0601] <18f>
But when I test some code about this, seems it can't work without osr(maybe I am wrong), because the hitState will always be "Notdefined"

[02:15:11.0940] <18f>
I think may be I could osr to help me understand this

[02:20:15.0864] <jandem>
it's likely dead code since warp

[02:38:52.0713] <Redfire>
so... anyone know why my build is failing

[02:39:28.0070] <Redfire>
> <@redfire75369:mozilla.org> Any idea what could be causing the build to fail? https://gist.githubusercontent.com/Redfire75369/0c0573d3aeb6d66afcd709b5d0d07f3d/raw/dd11757a5809e2856c7eb15a9bd7c3402e1f8c0b/output.log

as in thise one

[02:39:32.0572] <Redfire>
> <@redfire75369:mozilla.org> Any idea what could be causing the build to fail? https://gist.githubusercontent.com/Redfire75369/0c0573d3aeb6d66afcd709b5d0d07f3d/raw/dd11757a5809e2856c7eb15a9bd7c3402e1f8c0b/output.log

 * as in this one

[03:05:45.0602] <nbp>
18f: We Ion, we used to have this case. Code Coverage was enabled and collecting numbers, and we could have block for which we have instrumentation and which were never hit while running in baseline.

[03:06:42.0800] <nbp>
With Warp builder, code coverage got disabled as well as this code. iain is making something based on IC, which does not report the hit count.

[03:09:22.0044] <jonco>
Redfire: "Pointer type not allowed for StructGCPolicy" - are you trying to Root a pointer to something that's not a built in GC type?

[03:10:29.0290] <Redfire>
I haven't done anything to the repository, I'm just building https://github.com/servo/rust-mozjs

[03:15:44.0937] <nbp>
 * 18f: With Ion, we used to have this case. Code Coverage was enabled and collecting numbers, and we could have block for which we have instrumentation and which were never hit while running in baseline.

[03:18:11.0379] <dbezhetskov>
Hi, is it easy to add if for the specific architecture to SM build system. For example, I don't want to compile wasm part for ARM, can I exclude `*wasm` files from the compilation pipeline and is it easy to do?

[03:18:46.0297] <dbezhetskov>
 * Hi, is it easy to add OS/Architecture specific if to the SM build system. For example, I don't want to compile wasm part for ARM, can I exclude `*wasm` files from the compilation pipeline and is it easy to do?

[03:20:21.0626] <nbp>
dbezhetskov: Easy depends on how deep you want to integrate it. We have a already support for many architectures, multiple which do not have a specific assembler.

[03:21:05.0070] <nbp>
dbezhetskov: We have the option to disable the JITs, which would cause any usage of the JIT function to crash … if any is not properly guarded.

[03:21:49.0941] <nbp>
Which architecture do you want to support?

[03:22:04.0333] <dbezhetskov>
> <@nbp:mozilla.org> dbezhetskov: Easy depends on how deep you want to integrate it. We have a already support for many architectures, multiple which do not have a specific assembler.

well, in my mind there is some place where we list all source files for specific component. My gut feeling tells me that it is in some python code

[03:23:43.0711] <nbp>
dbezhetskov: it is not that simple, for example: https://searchfox.org/mozilla-central/source/js/src/jit/MacroAssembler.h#412-414

[03:24:22.0636] <nbp>
dbezhetskov: SpiderMonkey JIT are trying to share as much code as possible between the backends, because we cannot afford to rewrite a new backend per architecture.

[03:26:01.0798] <dbezhetskov>
> <@nbp:mozilla.org> dbezhetskov: it is not that simple, for example: https://searchfox.org/mozilla-central/source/js/src/jit/MacroAssembler.h#412-414

I see, so in general we should use ifdef to select what we want to include and there is no component abstraction in SM, right?

[03:26:46.0465] <nbp>
I do not think we have any toogle to disable WASM, maybe lth would know.

[03:26:48.0698] <dbezhetskov>
we just compile all files *.cpp and *.h and preprocessor decides what is needed or not

[03:27:24.0140] <nbp>
`JS_CODEGEN_NONE` is the _fake_ target we use when disabling the JITs.

[03:29:25.0028] <nbp>
dbezhetskov: Which OS/Architecture are you looking into?

[03:34:53.0368] <dbezhetskov>
> <@nbp:mozilla.org> dbezhetskov: Which OS/Architecture are you looking into?

i.e. I want to disable compilation of WasmSignalHanlders.h for my specific ARM

[03:36:32.0182] <dbezhetskov>
I can `ifndef` the whole file or I can remove them from the compilation

[03:38:16.0936] <dbezhetskov>
`ifndef` works fine but I'm asking about possibility to exclude this file from compiler at all

[03:40:17.0058] <nbp>
If you want to exclude it, you will have to look at `moz.build` files as well as [moz.configure](https://searchfox.org/mozilla-central/source/js/moz.configure)

[03:40:30.0570] <dbezhetskov>
i.e. in chromium it is done like that

[03:40:51.0129] <nbp>
 * If you want to exclude it, you will have to look at [moz.build](https://searchfox.org/mozilla-central/source/js/src/wasm/moz.build) files as well as [moz.configure](https://searchfox.org/mozilla-central/source/js/moz.configure)

[03:41:31.0396] <dbezhetskov>
> <@nbp:mozilla.org> If you want to exclude it, you will have to look at [moz.build](https://searchfox.org/mozilla-central/source/js/src/wasm/moz.build) files as well as [moz.configure](https://searchfox.org/mozilla-central/source/js/moz.configure)

thanks, it is what I'm looking for

[03:42:44.0635] <nbp>
dbezhetskov: I would still recommend you ask lth or in the #webassembly:mozilla.org channel if there is no way for wASM to not rely on the signal handler.

[03:52:19.0309] <lth>
/me is here

[06:29:51.0240] <18f>
> <@nbp:mozilla.org> With Warp builder, code coverage got disabled as well as this code. iain is making something based on IC, which does not report the hit count.

Hey, sorry for my bad english. So I think I understand you not fully.

[06:30:23.0208] <18f>
Does it means , at here :

[06:31:15.0826] <18f>
shouldBailout will always be false?

[06:31:26.0414] <18f>
with warp enable

[06:31:46.0294] <nbp>
18f: Correct. `shouldBailout` will always be `false`.

[06:32:03.0050] <18f>
ok... 

[06:34:56.0797] <18f>
I read the code

[06:35:07.0771] <18f>
I think there are three steps

[06:35:14.0886] <18f>
at first step

[06:35:44.0258] <18f>
It's a Recursive algorithm 

[06:35:48.0558] <18f>
like this

[06:38:04.0495] <18f>
If we disable this, does it means prune unused branches won't never work?

[07:14:19.0136] <nbp>
18f: indeed, it is completely disabled.

[07:15:23.0485] <18f>
okkk... Thank u too much about this.

[07:15:32.0572] <18f>
Is it a bug?

[07:15:56.0953] <nbp>
18f: this is being restored by iain.

[07:16:01.0640] <18f>
I mean we will remove the source code, or imporve it make it work

[07:16:11.0245] <nbp>
but without using hit-counts.

[07:17:30.0494] <18f>
which is the bug ID...

[07:17:34.0482] <Redfire>
> rips, updating mozjs broke building https://gist.github.com/Redfire75369/6e801b7bbd3f477122438cbe28b00550


> and I need to construct this somehow? https://doc.servo.org/mozjs/jsapi/struct.UTF8Chars.html

Still can't find any way to construct it



[07:18:01.0275] <Redfire>
 * > rips, updating mozjs broke building https://gist.github.com/Redfire75369/6e801b7bbd3f477122438cbe28b00550
Fixed with some help


> and I need to construct this somehow? https://doc.servo.org/mozjs/jsapi/struct.UTF8Chars.html
Still can't find any way to construct it

[07:18:17.0855] <Redfire>
 * > rips, updating mozjs broke building https://gist.github.com/Redfire75369/6e801b7bbd3f477122438cbe28b00550

Fixed with some help

> and I need to construct this somehow? https://doc.servo.org/mozjs/jsapi/struct.UTF8Chars.html

Still can't find any way to construct it

[07:18:29.0183] <Redfire>
 * > rips, updating mozjs broke building https://gist.github.com/Redfire75369/6e801b7bbd3f477122438cbe28b00550

Fixed with some help from rust-mozjs people
> and I need to construct this somehow? https://doc.servo.org/mozjs/jsapi/struct.UTF8Chars.html

Still can't find any way to construct it

[07:18:47.0787] <nbp>
18f: Bug 1697696

[07:18:52.0586] <botzilla>
https://bugzil.la/1697696 — NEW (iain) — Warp: Fix branch pruning

[07:25:38.0024] <18f>
> <@nbp:mozilla.org> 18f: Bug 1697696

Ok, I will see this, I don't see any patch code... So need more time reasearch about this. Very appreciate for your patient answer, and have a good night 😴 

[07:41:19.0609] <nbp>
18f: For your information, Branch Pruning was working fine with Range Analysis and Value Numbering.

[07:44:47.0285] <18f>
okkkk

[09:21:21.0685] <iain>
18f: You are absolutely correct that the code in PruneUnusedBranches currently doesn't do anything

[09:35:06.0449] <iain>
I have been working on this for a few days. I will hopefully be putting up patches later today.

[09:35:12.0770] <iain>
Instead of using code coverage information to decide which blocks are unreachable, we are using our inline caches. If an IC has never been reached, then we generate an unconditional bailout in WarpBuilder](https://searchfox.org/mozilla-central/rev/1a47a74bd5ba89f2474aa27c40bd478e853f3276/js/src/jit/WarpBuilder.cpp#3306-3312), which will resume in the baseline interpreter. Code after an MBail is unreachable by the warp script, so I'm rewriting branch pruning to prune code after bailouts instead of using code coverage.

[09:35:34.0905] <iain>
 * Instead of using code coverage information to decide which blocks are unreachable, we are using our inline caches. If an IC has never been reached, then we [generate an unconditional bailout in WarpBuilder](https://searchfox.org/mozilla-central/rev/1a47a74bd5ba89f2474aa27c40bd478e853f3276/js/src/jit/WarpBuilder.cpp#3306-3312), which will resume in the baseline interpreter. Code after an MBail is unreachable by the warp script, so I'm rewriting branch pruning to prune code after bailouts instead of using code coverage.

[09:36:12.0208] <iain>
(It was broken during [the transition from IonBuilder to WarpBuilder](https://hacks.mozilla.org/2020/11/warp-improved-js-performance-in-firefox-83/))

[09:39:50.0570] <evilpie>
jandem: did you consider lazily setting is-index/is-not-index after an isIndexSlow call for all strings?

[09:47:40.0272] <jonco>
@allstarschh|afk: ping

[09:49:21.0816] <jandem>
evilpie: setting atom flags can be racy (worker threads share atoms for instance)

[09:49:52.0723] <evilpie>
ugh that is rather sad

[09:50:23.0281] <jandem>
and it would still be more branchy, initializing it eagerly is actually pretty fast

[10:00:55.0470] <jorendorff>
OK, I re-sent, or rather re-composed and re-sent, a message to mozilla.governance about module ownership

[10:01:08.0786] <jorendorff>
hope that goes through now

[10:01:55.0673] <jorendorff>
(feel a little self-conscious about my weird inability to ever get anything to happen as expected in google groups)

[10:15:17.0942] <tcampbell>
@allstarschh|afk: https://firefox-source-docs.mozilla.org/js/build.html#spidermonkey-on-android-aarch64

[10:33:36.0948] <jonco>
@allstarschh|afk: can you send me a link to the patch which adds the allocated arenas bitmap?

[10:41:33.0044] <@allstarschh|afk>
jonco: just uploaded it to https://phabricator.services.mozilla.com/D108817,  and the try failure is in  https://treeherder.mozilla.org/jobs?repo=try&revision=57e593ee6fd2efb0015646c99379d40d4b607598  

[10:51:23.0263] <jonco>
@allstarschh|afk: thanks! 

[10:51:25.0054] <jonco>
I've commented

[11:03:57.0868] <@allstarschh|afk>
> <@jonco:mozilla.org> I've commented

cool, thanks. I'll try that

[12:58:47.0823] <Dale>
So I am investigating adding a calculator to the urlbar, currently using a fairly ad hoc expression parser written in JS, wondering if there was a nice safe way to use the JS engines?

[12:59:04.0223] <Dale>
https://phabricator.services.mozilla.com/D108529 is the current code

[13:08:24.0155] <evilpie>
Dale: Reflect.parse maybe?

[14:21:22.0827] <mgaudet>
> <@mgaudet:mozilla.org> I'll plan to open a meta bug + write a template for generating these bugs + a few examples tomorrow, unless there are objections :)

Started the bug tree [here](https://bugzilla.mozilla.org/show_bug.cgi?id=1699266), with five seed bugs [here](https://bugzilla.mozilla.org/show_bug.cgi?id=1699268). The good news is that this provides us a lot of nice gentle starter bugs for people to be able to build, and run tests. 

Hmm. I'm going to edit those bugs to add a 'how you know you're done' section tho. 

[14:23:32.0504] <mgaudet>
(Sorry for all the mail spam I'm sure a lot of you are getting) 

[14:34:38.0600] <iain>
mgaudet: Typo in the last clause here?  ".... an old style of SpiderMonkey programming that we think we can start to get away from, *at internally to the engine*." 

[14:35:09.0231] <mgaudet>
Yep :) 

[14:35:15.0918] <mgaudet>
s/at//

[14:44:35.0121] <evilpie>
mgaudet: btw please don't open a bug open jsid_is_int, to_int. I think we should change that API to be about unsigned

[14:47:16.0740] <mgaudet>
Ok, will (not) do. 

[14:49:04.0948] <evilpie>
 * mgaudet: btw please don't open a bug for jsid_is_int, to_int. I think we should change that API to be about unsigned

[14:52:11.0779] <evilpie>
I wonder if `isUint31` is too obtuse to be useful


2021-03-18
[19:11:43.0118] <Redfire>
how would one register a native module?

[19:13:24.0602] <Redfire>
I have a `*mut JSObject` with all the required methods

[19:13:38.0384] <Redfire>
just putting that into the module map doesn't seem to work

[19:34:08.0017] <18f>
> <@iain:mozilla.org> Instead of using code coverage information to decide which blocks are unreachable, we are using our inline caches. If an IC has never been reached, then we [generate an unconditional bailout in WarpBuilder](https://searchfox.org/mozilla-central/rev/1a47a74bd5ba89f2474aa27c40bd478e853f3276/js/src/jit/WarpBuilder.cpp#3306-3312), which will resume in the baseline interpreter. Code after an MBail is unreachable by the warp script, so I'm rewriting branch pruning to prune code after bailouts instead of using code coverage.

cool I will concern about this, thank u

[19:39:32.0505] <iain>
18f: By the way, the patches are now up on bug 1697696

[19:39:33.0871] <botzilla>
https://bugzil.la/1697696 — NEW (iain) — Warp: Fix branch pruning

[19:41:44.0215] <18f>
> <@iain:mozilla.org> 18f: By the way, the patches are now up on bug 1697696

cool

[19:41:47.0654] <18f>
I will see this

[19:42:40.0226] <18f>
sorry for my Enlish, Just can say cool 😎 

[19:42:46.0000] <18f>
English

[20:46:19.0349] <18f>
> <@iain:mozilla.org> 18f: By the way, the patches are now up on bug 1697696

Hey, would u tell mind tell what rp = rp->caller means? I read the code.

[20:46:46.0206] <18f>
1. first step , we deal with operand and effectful instruction resume point. 

[20:47:12.0056] <18f>
2. So we need  a loop to deal with entry resume point. I understand this in this why

[20:47:15.0378] <18f>
way

[20:47:31.0140] <18f>
why we will need rp->caller....

[20:47:39.0470] <18f>
rp = rp->caller()

[20:59:35.0947] <iain>
18f: When we inline a function, if we bail out, we have to recreate a separate baseline frame for the caller (and for the caller's caller, if we inline two levels deep, and so on)

[21:01:03.0735] <iain>
If you compile with `IONFLAGS=logs` and use [iongraph](https://github.com/sstangl/iongraph) to visualize the CFG, the caller's resume point is separated from the current one with a `|`

[21:03:28.0593] <18f>
ok

[21:03:38.0775] <18f>
I know what u means, thank u too much.

[23:22:39.0798] <Redfire>
> just putting that into the module map doesn't seem to work

```Uncaught Error at <anonymous>:0:0: Module resolve hook did not return Module object```

[00:32:15.0016] <Redfire>
it would appear that error comes from https://searchfox.org/mozilla-central/source/js/src/builtin/ModuleObject.cpp#1968
basically, just tells me i have no idea how to make a `ModuleObject`

[01:22:21.0418] <18f>
https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules

[01:24:30.0605] <18f>
> <@redfire75369:mozilla.org> it would appear that error comes from https://searchfox.org/mozilla-central/source/js/src/builtin/ModuleObject.cpp#1968
> basically, just tells me i have no idea how to make a `ModuleObject`

useful? or not? ....

[01:25:11.0763] <Redfire>
I don't think it'll be that useful, because I need the native forms, aka the JSAPI Reference

[01:25:45.0678] <18f>
ok 👍  good luck to u

[02:00:39.0810] <18f>
Hey, I am so confused about this part. sometimes we will use |ReversePostorderIterator|, sometimes we will use |PostorderIterator|.

[02:01:24.0792] <18f>
I know why use |ReversePostorderIterator|, becuase we need use information about |predessor's| information.

[02:01:53.0289] <18f>
But I don't know why we will use |poset order| at @2?

[02:03:48.0462] <jandem>
sometimes PostOrder vs ReversePostOrder doesn't matter and we just have to pick one. This might be one of those cases

[02:04:44.0490] <18f>
I guess it is because we need mark it's operand be |useRemoved|, that's means we more propagation information from succ to pred. so use post order will be a good idea.

[02:05:11.0619] <18f>
becuase post order means we first deal with succ, then to pred...

[02:05:17.0112] <18f>
🤔

[02:41:15.0448] <nbp>
`ReversePostOrder` goes forward in the CFG, so when marking predecessors before successors. In this case this is used to compute the cost of blocks and flag them as bailing, and thus successors as unreachable.
`PostOrder` goes backward in the CFG, so visiting successors before predecessors. In this case this used to matter when the removal was part of the loop, as we want to mark predecessors before removing the back-edges. This then got split in 2 loops for sanity.

[05:55:12.0063] <Redfire>
so.. how exactly would I implement native modules given a `*mut JSObject` which has all the properties required?

[05:56:13.0021] <Redfire>
 * so.. how exactly would I implement native modules given a `*mut JSObject` which has all the properties required?

eg. `import ( readBinary ) from "fs";`

I need to get a `CompileModule`-compatible `*mut JSObject` from the one I already have

[06:03:21.0355] <evilpie>
Redfire: I suggest you start by reading https://searchfox.org/mozilla-central/source/js/src/shell/ModuleLoader.cpp

[06:04:23.0447] <Redfire>
is that a more complex version of https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/examples/modules.cpp?

[06:04:58.0462] <evilpie>
oh apparently. I didn't know we had this example

[06:05:14.0609] <Redfire>
I already have a module loader

[06:05:41.0256] <Redfire>
just that `CompileModule` returns what seems like, a specialised Object in the form of a `ModuleObject`

[06:06:21.0958] <evilpie>
I think you just return that from the ModuleResolveHook

[06:07:29.0326] <Redfire>
this is gonna be slightly hacky, but i guess i'll make a native module map along with the regular module map

[06:21:16.0181] <Redfire>
wait, what, no, that wouldn't work

[06:21:33.0332] <Redfire>
the output of the `ModuleResolveHook` is itself the `ModuleObject`

[06:28:32.0729] <tcampbell>
We don't have generic support for non-scripted modules right now (as far as I know..). The `ModuleObject` is always associated with a JSScript/BaseScript and different asserts trip. I think people have tried hacks by having a wrapper .mjs file that has the export list and in the body calls some helper method that populates those bindings. I don't recall if that plan worked though..

[06:29:12.0805] <tcampbell>
Does anyone know if we fix that for JSON modules? or do they also have a JSScript?

[06:31:37.0865] <18f>
> <@nbp:mozilla.org> `ReversePostOrder` goes forward in the CFG, so when marking predecessors before successors. In this case this is used to compute the cost of blocks and flag them as bailing, and thus successors as unreachable.
> `PostOrder` goes backward in the CFG, so visiting successors before predecessors. In this case this used to matter when the removal was part of the loop, as we want to mark predecessors before removing the back-edges. This then got split in 2 loops for sanity.

cool I fully understant this. Appreciate it!

[06:45:33.0632] <Redfire>
> We don't have generic support for non-scripted modules right now (as far as I know..). The `ModuleObject` is always associated with a JSScript/BaseScript and different asserts trip. I think people have tried hacks by having a wrapper .mjs file that has the export list and in the body calls some helper method that populates those bindings. I don't recall if that plan worked though..

☹️

[06:45:41.0607] <Redfire>
 * > We don't have generic support for non-scripted modules right now (as far as I know..). The `ModuleObject` is always associated with a JSScript/BaseScript and different asserts trip. I think people have tried hacks by having a wrapper .mjs file that has the export list and in the body calls some helper method that populates those bindings. I don't recall if that plan worked though..

☹️ rip my native module plans

[06:56:37.0279] <denispal>
Can I distinguish a frame from baseline JIT and baseline interpreter?  https://searchfox.org/mozilla-central/source/js/src/jit/JSJitFrameIter.h#161 seems to return true for both cases

[07:04:29.0513] <tcampbell>
denispal: https://searchfox.org/mozilla-central/source/js/src/jit/BaselineFrame.h#264

[07:08:36.0692] <denispal>
tcampbell: thanks

[08:59:15.0447] <denispal>
Does Ion always bailout back to the baseline interpreter? Wondering if I should change https://searchfox.org/mozilla-central/source/js/src/jit/BaselineBailouts.cpp#1555 to BaselineInterpreter permanently, or if I need to add a check here?

[09:00:08.0313] <jandem>
denispal: correct, it can only bail out to Baseline Interp

[09:00:31.0528] <denispal>
jandem: great, thanks

[11:56:34.0927] <jonco>
sfink: If you're around could you give bug 1699364 a review?

[11:56:36.0773] <botzilla>
https://bugzil.la/1699364

[12:04:21.0184] <sfink>
jonco: done. Sorry, I should have caught that one.

[12:29:37.0180] <jonco>
sfink: no worries! cheers.


2021-03-19
[18:50:33.0550] <18f>
Hey, does it means MPhiIterator will used to iterate all phi in a block?

[19:43:45.0909] <iain>
18f: Yes, that will iterate over all of the phis in the block

[19:45:02.0608] <18f>
> <@iain:mozilla.org> 18f: Yes, that will iterate over all of the phis in the block

Interesting, I mean, could it be empty?

[19:45:51.0277] <18f>
If it have one element. Then "it == end' will always  be true, so nothing happend?

[19:52:29.0245] <iain>
18f: InlineList uses a sentinel node as the end of the list, so a list with one element would visit that element, and then visit the sentinel node. `it == end` would be false when visiting the element.

[19:52:46.0547] <iain>
The implementation is in this file: https://searchfox.org/mozilla-central/source/js/src/jit/InlineList.h

[19:53:22.0068] <18f>
cool, I fully understand it. 

[19:53:28.0569] <18f>
thank u!

[20:27:11.0721] <18f>
https://github.com/mozilla/gecko-dev/blob/cfffcfb4c03737d963945c2025bbbe75beef45c6/js/src/jit/IonAnalysis.cpp#L41

[20:27:18.0865] <18f>
hey, I read this code

[20:28:31.0667] <18f>
understand DFS on tree is easy. But if there are loop backage, it's not simple. is there any slide or blog about this? 

[20:29:02.0313] <18f>
> <@nbp:mozilla.org> `ReversePostOrder` goes forward in the CFG, so when marking predecessors before successors. In this case this is used to compute the cost of blocks and flag them as bailing, and thus successors as unreachable.
> `PostOrder` goes backward in the CFG, so visiting successors before predecessors. In this case this used to matter when the removal was part of the loop, as we want to mark predecessors before removing the back-edges. This then got split in 2 loops for sanity.

like this part...

[21:05:24.0092] <iain>
18f: I don't know of any good blog posts. This wikipedia section might be useful: https://en.wikipedia.org/wiki/Depth-first_search#Vertex_orderings

[21:16:18.0159] <iain>
But it's actually pretty simple. When we generate blocks in WarpBuilder, we add each block to the CFG before we add its successors (except for backedges). Because of this, if you walk through the list of blocks backwards, you visit the successors of each block before you visit the block itself (ignoring backedges), which is postorder.

[21:16:42.0295] <iain>
Which means that walking through the list of blocks forward is reverse postorder.

[21:17:16.0307] <iain>
When we add or remove blocks, we always preserve this property

[21:18:27.0266] <iain>
In debug builds, we verify it after each pass here: https://searchfox.org/mozilla-central/source/js/src/jit/IonAnalysis.cpp#2837-2857

[21:41:07.0213] <18f>
ok, I will think about this.

[21:41:14.0587] <18f>
😐️

[00:10:02.0380] <Redfire>
Re: Native Modules
Are there any plans to support non-scripted modules or do I have to try a different approach? 

[04:01:18.0261] <Redfire>
is there a way to define something in a module locally from the JSAPI?

[04:02:16.0094] <Redfire>
like, define a local variable as a given `Value`

[04:02:48.0810] <Redfire>
 * like, define a local variable as a given `Value` inside a module

[04:13:33.0729] <arai>
Redfire: is it after compiling the module script?

[04:14:10.0270] <Redfire>
before or after, both can work

[04:14:22.0949] <arai>
if "after", adding extra binding won't work in term of ES spec

[04:15:27.0700] <arai>
if "before", the easiest way would be to modify the module script itself to contain the declaration

[04:15:47.0000] <arai>
 * if "before", the easiest way would be to modify the module script source itself to contain the declaration

[04:17:16.0142] <Redfire>
I was trying to get it to hold the native JS Object

[04:17:57.0745] <Redfire>
> I think people have tried hacks by having a wrapper .mjs file that has the export list and in the body calls some helper method that populates those bindings. I don't recall if that plan worked though..

I'm basically trying this right now, but the only way I've gotten it to work so far pollutes the global scope

[04:18:22.0674] <Redfire>
```rs
rooted!(in(cx) let fs_module = JS_NewPlainObject(cx));
		rooted!(in(cx) let undefined = UndefinedValue());
		rooted!(in(cx) let rglobal = global);
		if JS_DefineFunctionsWithHelp(cx, fs_module.handle().into(), METHODS.as_ptr()) {
			rooted!(in(cx) let fs_module_obj = ObjectValue(fs_module.get()));
			if JS_DefineProperty(cx, rglobal.handle().into(), "fsInternal\0".as_ptr() as *const i8, fs_module_obj.handle().into(), 0) {
				return register_module(cx, &String::from("fs"), compile_module(cx, &String::from("fs"), &String::from(FS_SOURCE)));
					// && JS_SetProperty(cx, rglobal.handle().into(), "fsInternal\0".as_ptr() as *const i8, undefined.handle().into());
			}
		}
		false
```

[04:18:47.0915] <Redfire>
 * ```rs
                rooted!(in(cx) let fs_module = JS_NewPlainObject(cx));
		rooted!(in(cx) let undefined = UndefinedValue());
		rooted!(in(cx) let rglobal = global);
		if JS_DefineFunctionsWithHelp(cx, fs_module.handle().into(), METHODS.as_ptr()) {
			rooted!(in(cx) let fs_module_obj = ObjectValue(fs_module.get()));
			if JS_DefineProperty(cx, rglobal.handle().into(), "fsInternal\0".as_ptr() as *const i8, fs_module_obj.handle().into(), 0) {
				return register_module(cx, &String::from("fs"), compile_module(cx, &String::from("fs"), &String::from(FS_SOURCE)));
					// && JS_SetProperty(cx, rglobal.handle().into(), "fsInternal\0".as_ptr() as *const i8, undefined.handle().into());
			}
		}
		false
```

[04:22:40.0111] <arai>
maybe I misunderstood the question

[04:26:21.0746] <arai>
what does "locally" mean?

[04:26:39.0211] <Redfire>
local as in only accessible from the helper script

[04:27:03.0235] <Redfire>
like how if you have a `let x = thing` in a module, you can't access `x` from other scripts

[04:27:08.0684] <Redfire>
 * like how if you have a `let x = thing` in a module, you can't access `x` from other scripts/modules

[04:32:18.0821] <Redfire>
 * local as in only accessible from the helper module

[04:34:10.0577] <arai>
let me check how module environment works

[04:38:37.0648] <arai>
so, it cannot be global object, right?

[04:41:57.0527] <Redfire>
it cannot be on th eglobal object, yes

[04:42:02.0374] <Redfire>
 * it cannot be on the global object, yes

[04:43:14.0925] <arai>
 * if "after", adding extra binding won't work in term of ES spec (<- nvm, I was thinking wrong thing)

[04:58:16.0367] <arai>
I cannot find any way so far

[06:25:29.0083] <nbp>
18f: This is how DFS is made possible on a graph, by rejecting loops: https://github.com/mozilla/gecko-dev/blob/cfffcfb4c03737d963945c2025bbbe75beef45c6/js/src/jit/IonAnalysis.cpp#L106-L110 Thus a directed graph without loops is a DAG, on which you can use DFS safely.

[06:47:47.0766] <evilpie>
jonco thanks for the review. I am going to merge after the soft freeze

[06:54:47.0031] <nbp>
confession: Try to locate the best file to add a global variable … js/xpconnect it sounds like it would be, as been the closest thing to JS while being able to rely on IPC features …

[06:54:48.0820] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[06:55:04.0504] <nbp>
 * confession: Try to locate the best file to add a global variable … js/xpconnect it sounds like it would be, as being the closest thing to JS while being able to rely on IPC features …

[14:45:26.0748] <mgaudet>
confession: Rapidly approaching the point where I can put Jason's private methods patch stack out for review. Still a little bit of work left to do, but not enough energy to do it. Debug.frame.eval needs new bytecode to work properly though, so I'm going to punt there for now.


2021-03-20
[18:21:46.0038] <18f>
> <@nbp:mozilla.org> 18f: This is how DFS is made possible on a graph, by rejecting loops: https://github.com/mozilla/gecko-dev/blob/cfffcfb4c03737d963945c2025bbbe75beef45c6/js/src/jit/IonAnalysis.cpp#L106-L110 Thus a directed graph without loops is a DAG, on which you can use DFS safely.

Thanks, yesterday. I spent sometime understand the code. I think I fully understand it now(maybe 🤔 ), I think the basic idea is. when I decide search, I will search the child fully, include child's child , child's child's child(shame of my English). If I found child has child, I will push the root's other child in to the worklist, so when I finish the all element of the child, I will search the root's another child. I understand the DFS algorithm in this way.

[18:22:51.0709] <18f>
By the way, I know the DFS means Deep first search, But what is DAG means? "direct ? graph?"(I guess...)

[18:23:04.0069] <iain>
18f: Directed Acyclic Graph

[18:23:51.0028] <18f>
cool

[18:23:52.0618] <iain>
Acyclic == no loops

[18:24:03.0157] <18f>
without tree

[18:24:06.0604] <18f>
sry

[18:24:09.0769] <18f>
without loop

[18:24:15.0367] <18f>
like "tree"?

[18:25:10.0946] <iain>
Trees are DAGs, but not all DAGs are trees, because DAGs can merge back together.

[18:25:23.0812] <iain>
A->B, A->C, B->D, C->D

[18:25:36.0599] <18f>
I know what u means

[18:25:42.0039] <18f>
seems, maybe...

[18:25:52.0510] <18f>
B and C share same child

[18:25:57.0936] <iain>
Yes

[18:26:05.0325] <18f>
By the way

[18:26:43.0233] <18f>
https://github.com/mozilla/gecko-dev/blob/cfffcfb4c03737d963945c2025bbbe75beef45c6/js/src/jit/IonAnalysis.cpp#L112

[18:26:50.0744] <18f>
here is unsafe part.

[18:27:06.0300] <18f>
and here https://github.com/mozilla/gecko-dev/blob/cfffcfb4c03737d963945c2025bbbe75beef45c6/js/src/jit/IonAnalysis.cpp#L106

[18:27:17.0781] <18f>
the could merge to be together 

[18:27:54.0010] <18f>
I means we could do something like "if (cphi->isInWorklist() || cphi == producer || cphi->getUsageAnalysis() == PhiUsage::Unused){continue}"

[18:28:12.0809] <18f>
right?

[18:29:38.0580] <iain>
Yes. The compiler will generate the same code either way we write it, though

[18:31:03.0009] <18f>
cool, Thank u, just want to ensure this part. 🤔.

[18:31:24.0340] <18f>
cheers! and have a good day.

[18:31:30.0454] <18f>
😃

[18:32:26.0946] <iain>
You too!

[18:33:18.0231] <iain>
(By the way, I am very impressed at how you are managing to read a complicated codebase in a language that isn't your first language)

[18:34:25.0906] <18f>
hhh

[18:34:32.0635] <18f>
I can't 

[18:34:39.0588] <18f>
let me use google translate

[18:34:59.0007] <18f>
I can't avoid this.

[18:35:15.0292] <18f>
when I want to find some useful code to read.

[18:35:32.0912] <18f>
Then will found the comment always be in English...

[18:35:56.0249] <18f>
I just can't speak, but I could understand most of word... so It's not too hard..

[18:36:22.0068] <18f>
But the jit compiler is so complicated , so it's not easy part...

[18:37:35.0733] <18f>
WIth your gays help it will be  more  easy and intersting, thanks this part so much!

[07:16:05.0289] <18f>
hey

[07:16:09.0418] <18f>
    // Eliminates redundant or unobservable phis from the graph.  A
    // redundant phi is something like b = phi(a, a) or b = phi(a, b),
    // both of which can be replaced with a.  An unobservable phi is
    // one that whose value is never used in the program.

[07:16:17.0936] <18f>
anybody know this part?

[07:16:29.0065] <18f>
phi(a, a) is esay understand

[07:16:52.0533] <18f>
but why "b = phi(a, b)" is redundant?

[07:16:55.0288] <18f>
thanks

[07:18:30.0838] <18f>
I could understand in this way(maybe it is wrong)... 

[07:18:52.0776] <18f>
If the phi just has one input , it will be redundant

[07:19:17.0865] <18f>
like phi(a, a) // a. == a, so I think it just have one input. 

[07:20:06.0420] <18f>
for b = phi(a, b). use graph way, I think b point to a, then b point to b itself. so it just have one input...

[07:20:43.0460] <18f>
But I haven't any idea about "real code" to suffient this graph...

[07:33:00.0539] <evilpie>
18f: pretty sure your understanding is correct. If one input of the phi points to itself the other input must be real

[07:33:34.0874] <18f>
thanks.

[07:33:39.0264] <evilpie>
See also https://searchfox.org/mozilla-central/rev/b3b6a9b1d0f54b8a432f11ced9283bd43b434bb0/js/src/jit/MIR.cpp#1831

[07:33:56.0973] <18f>
But I can't image one real code which phi will point to itself...

[07:37:12.0373] <evilpie>
18f: I am not sure either. A trick I like to do is to add an assertion that would catch `op == this` and then running the test suite. You will probably find some test case that crashes

[07:37:33.0002] <18f>
hhhh

[07:37:47.0157] <18f>
I don't know how to run test file.

[07:37:58.0282] <18f>
but u give me a good idea... maybe it work.

[07:39:47.0424] <18f>
seems It can't work...

[07:40:09.0387] <18f>
I think the secret maybe in "loop", but I can't find useful idea...

[07:40:25.0200] <18f>
because it is a backage... maybe..

[07:40:37.0615] <18f>
backedge

[08:48:59.0892] <iain>
18f: Yes, a phi can have itself as an operand if there is a loop. One operand of a loop phi is the value coming into the loop (`b`), and the other operand is the value along the back edge (`a`). If the value along the back edge is the phi itself, then the value doesn't change in the loop, and we can replace `phi(a,b)` with just `b`.

[16:40:51.0754] <18f>
> <@iain:mozilla.org> 18f: Yes, a phi can have itself as an operand if there is a loop. One operand of a loop phi is the value coming into the loop (`b`), and the other operand is the value along the back edge (`a`). If the value along the back edge is the phi itself, then the value doesn't change in the loop, and we can replace `phi(a,b)` with just `b`.

would u mind give me a example in "C" or in "js". thanks.


2021-03-21
[18:11:23.0368] <iain>
18f: This example does not quite work in SpiderMonkey because WarpBuilder is smart enough to decide it doesn't need to create a phi, but maybe it will help you understand. 
```
var x = 3; 
for (var i = 0; i < 10; i++) {
     if (condition) {}
}
```
We can 

[18:13:05.0411] <iain>
 * 18f: This example does not quite work in SpiderMonkey because WarpBuilder is smart enough to decide it doesn't need to create a phi, but maybe it will help you understand.
```
var x = 3; // x1
for (var i = 0; i < 10; i++) {
     if (condition) {
       var a = x; // a1
     } else {
       var a = x; // a2
     }
     x = a; // x2 = phi(a1,a2)
}
```


[18:13:54.0917] <iain>
 * 18f: This example does not quite work in SpiderMonkey because WarpBuilder is smart enough to decide it doesn't need to create a phi, but maybe it will help you understand.
```
var x = 3; // x1
for (var i = 0; i < 10; i++) {
     if (condition) {
       // x3 = phi(x1, x2);
       var a = x; // a1 = x3
     } else {
       var a = x; // a2 = x3
     }
     x = a; // x2 = phi(a1,a2)
}
```

[18:14:55.0494] <iain>
We can see that `x2` on line 9 is actually `phi(x3, x3)` and simplify it to `phi(x3)`

[18:15:24.0692] <iain>
And then `x3` on line 4 is actually `phi(x1, x3)`, and we can simplify it to `x1`.

[18:16:01.0724] <iain>
 * We can see that `x2` on line 9 is actually `phi(x3, x3)` and simplify it to `x3`

[18:16:34.0350] <iain>
 * 18f: This example does not quite work in SpiderMonkey because WarpBuilder is smart enough to decide it doesn't need to create a phi, but maybe it will help you understand.
```
var x = 3; // x1
for (var i = 0; i < 10; i++) {
     // x3 = phi(x1, x2);
     if (condition) {
       var a = x; // a1 = x3
     } else {
       var a = x; // a2 = x3
     }
     x = a; // x2 = phi(a1,a2)
}
```

[18:16:41.0136] <iain>
 * And then `x3` on line 3 is actually `phi(x1, x3)`, and we can simplify it to `x1`.

[00:56:15.0723] <18f>
cool enough! I will read it carefully!

[00:56:24.0862] <18f>
> <@iain:mozilla.org> 18f: This example does not quite work in SpiderMonkey because WarpBuilder is smart enough to decide it doesn't need to create a phi, but maybe it will help you understand.
> ```
> var x = 3; // x1
> for (var i = 0; i < 10; i++) {
>      // x3 = phi(x1, x2);
>      if (condition) {
>        var a = x; // a1 = x3
>      } else {
>        var a = x; // a2 = x3
>      }
>      x = a; // x2 = phi(a1,a2)
> }
> ```

😊


2021-03-22
[20:13:17.0406] <18f>
Hey

[20:13:30.0199] <18f>
I think at here maybe we should change our commit?

[20:14:39.0092] <18f>
The case just include two case "phi(a, a), b = phi(a, b)", lack of one case "b = phi(a)"?

[20:15:44.0547] <18f>
> <@iain:mozilla.org> 18f: This example does not quite work in SpiderMonkey because WarpBuilder is smart enough to decide it doesn't need to create a phi, but maybe it will help you understand.
> ```
> var x = 3; // x1
> for (var i = 0; i < 10; i++) {
>      // x3 = phi(x1, x2);
>      if (condition) {
>        var a = x; // a1 = x3
>      } else {
>        var a = x; // a2 = x3
>      }
>      x = a; // x2 = phi(a1,a2)
> }
> ```

phi(a) != phi(a,a), because the input count is not same, do u agree with this?

[20:16:53.0463] <18f>
It's not a bug. just I think if we changed... maybe it will be better...

[20:17:44.0992] <iain>
18f: We can't list all the possible cases, because it also includes `phi(a,a,a)`, `phi(a,a,a,a)`, etc..

[20:18:37.0869] <18f>
That's right...

[20:18:45.0984] <18f>
but let me use other way..

[20:18:56.0596] <18f>
to explain what I want to express

[20:19:37.0860] <18f>
at here , we have a for loop

[20:20:20.0889] <18f>
If we jump to the loop, and we can prove the "input 1 == input 2 == input 3..." and we could think it is redundant

[20:20:35.0999] <18f>
I think this is the commit want to express.

[20:20:57.0661] <18f>
But the another way, if the numOperands() == 1. 

[20:21:10.0155] <18f>
Then we won't jump into the commit.

[20:21:31.0501] <18f>
this case it is redundant because of it just have one "input".

[20:21:51.0565] <18f>
I think this case not mentioned it at the commit... 

[20:22:53.0923] <18f>
Generally, It's not a bug, just my personal views... lol...

[20:27:23.0184] <iain>
The most important part of the comment is "returns the operand that it will always be equal to"

[20:28:40.0514] <iain>
"e.g." means "for example"

[20:28:59.0769] <iain>
So it is not saying those are the only two cases

[20:35:33.0836] <iain>
But I can see how it could be confusing if English is not your first language

[21:14:32.0911] <18f>
> <@iain:mozilla.org> But I can see how it could be confusing if English is not your first language

Yes, I agree with u, Thanks for your patient explain for this stupid question.

[21:14:37.0231] <18f>
best wishes!

[02:05:33.0869] <dbezhetskov>
I've just noticed that SM still support WIN XP, this is intentional?

[02:06:49.0744] <dbezhetskov>
 * I've just noticed that SM still supports WIN XP, this is intentional?

[02:36:49.0695] <jandem>
dbezhetskov: not intentional. We've already removed XP support code elsewhere, for example bug 1312085

[02:36:51.0389] <botzilla>
https://bugzil.la/1312085 — RESOLVED (froydnj) — drop support for XP in JS's platform-independent locks and condvars

[02:37:55.0741] <jandem>
if you find similar things, feel free to remove or file a bug

[03:40:10.0448] <dbezhetskov>
> <@jandem:mozilla.org> if you find similar things, feel free to remove or file a bug

but CI runs win 7 builds

[03:41:11.0044] <jandem>
Windows XP is older than Windows 7 though

[03:41:57.0380] <dbezhetskov>
> <@jandem:mozilla.org> Windows XP is older than Windows 7 though

ah, I see

[03:43:42.0150] <dbezhetskov>
jandem: a stupid question, these all occurrences of `XP_WIN` should be deleted, right? https://searchfox.org/mozilla-central/search?q=defined%28XP_WIN%29&path=&case=false&regexp=false

[03:45:40.0277] <jandem>
dbezhetskov: ah no, `XP_WIN` [is set](https://wiki.mozilla.org/Platform/Platform-specific_build_defines) for all Windows builds (it stands for "cross-platform" I think?)

[03:46:12.0081] <Ms2ger>
Yeah

[06:48:12.0173] <yulia>
jonco: would you be around to review the recent change to tla?

[08:15:07.0315] <jonco>
yulia: sure

[08:19:58.0487] <Lcf.vs>
oh, the yulia is here 🙃 (@decoder dixit `you might want to checkout spidermonkey , maybe they have some good input for you, in particular yulia`), about the idea to run the console terminal scripts as modules

[08:20:42.0136] <yulia>
Ah, hi -- console terminal scripts as modules... what exactly do you want to do? 

[08:22:03.0752] <Lcf.vs>
to offer a way to statically import some modules, e.g. to test a libray, to acquire a concept from a readme, etc.)

[08:22:57.0845] <yulia>
ok, and this isn't about how to run modules in the SM shell right?

[08:23:13.0911] <yulia>
as in, to run a script as a modules you would do jsshell -m <filename>

[08:23:27.0985] <yulia>
but you want to do something more is that right?

[08:25:34.0295] <yulia>
(or, if it is the former, i can help with setting that up as well)

[08:26:04.0939] <Lcf.vs>
hum, I'm speaking about to be able to copy/paste a readme example like this
```js

import * as etched from 'https://unpkg.com/@etchedjs/etched@latest/etched.min.js'


console.log(etched)
```
like in my temporary extension terminal https://addons.mozilla.org/fr/firefox/addon/esmb/

[08:26:19.0707] <Lcf.vs>
 * hum, I'm speaking about to be able to copy/paste a readme example like this
```js

import * as etched from 'https://unpkg.com/@etchedjs/etched@latest/etched.min.js'


console.log(etched)
```

like in my temporary extension terminal https://addons.mozilla.org/en/firefox/addon/esmb/

[08:26:36.0980] <Lcf.vs>
but directly in the devtools console

[08:26:54.0323] <Lcf.vs>
 * hum, I'm speaking about to be able to copy/paste a readme example like this
```js
import * as etched from 'https://unpkg.com/@etchedjs/etched@latest/etched.min.js'

console.log(etched)
```

like in my temporary extension terminal https://addons.mozilla.org/en/firefox/addon/esmb/

[08:26:56.0039] <yulia>
ah, so running in devtools, rather than in the sm shell

[08:27:05.0121] <Lcf.vs>
yeah, sorry

[08:27:10.0186] <yulia>
no problem!

[08:27:32.0024] <yulia>
hm, if I recall correctly, devtools is using eval? which is a different script type than modules

[08:27:51.0182] <yulia>
so it has different abilities and behaviors

[08:28:34.0212] <Lcf.vs>
yep but it isn't a very convenient feature to test a concept/library?

[08:29:09.0876] <yulia>
i think it would be, that would need to probably be prioritized with devtools though...

[08:29:29.0403] <Lcf.vs>
🤗

[08:30:06.0360] <yulia>
i am just thinking it through.. whether a module goal mode in devtools would make sense..

[08:30:35.0189] <Lcf.vs>
my extension is only to have a solution during that waiting but certainly not optimal

[08:31:43.0643] <Lcf.vs>
it's a few a polyfill lol

[08:32:07.0769] <yulia>
ok, i can't see why it wouldn't work off the top of my head. it would be a feature request for devtools and would require a little bit of wiring up and UI

[08:33:00.0921] <Lcf.vs>
nice, should I post that request, then?

[08:33:18.0369] <yulia>
you might want to drop by #devtools

[08:33:25.0852] <yulia>
honza and nchevobbe are the people to talk to 

[08:34:08.0930] <Lcf.vs>
ok, thanks

[08:34:11.0565] <yulia>
but it might take a little while, they have a large project they are working on right now

[08:34:24.0267] <yulia>
but if you are interested in trying to do the implementation yourself, the devtools team is really friendly

[08:34:41.0604] <Lcf.vs>
yeah, no worries, I'm a dev too, I understand that :) 

[08:35:30.0410] <Lcf.vs>
I can be interested but I know nothing about Firefox internals

[08:35:41.0031] <Lcf.vs>
☺️

[08:37:56.0519] <yulia>
the devtools is mostly JS!

[08:38:16.0823] <yulia>
so if you are familiar with React or other JS frameworks, it is a pretty nice start at looking at how the browser works.

[08:38:39.0809] <yulia>
this task would be a biiiit more complex because you would need to do a bit of cpp, but I can help here

[08:41:15.0658] <Lcf.vs>
hum, I don't know cpp &  I didn't use any frameworks on client-side, because I have my own (very light & fast) solution... but I know JS as my pocket (if not more) x)

[08:42:37.0041] <yulia>
but, first devtools would need to sign on to it -- there are likely some UI considerations. We used to have a scratchpad where you could write and execute code snippets

[08:42:38.0669] <yulia>
they recently removed that

[08:42:39.0157] <yulia>
so... planning first I think

[08:45:13.0627] <yulia>
(some lag on my matrix client looks like)

[08:45:36.0034] <Lcf.vs>
👍️

[08:46:11.0488] <Lcf.vs>
I asked them on #devtools:mozilla.org ;)

[11:09:00.0226] <CosminS|sheriffduty>
hi, could someone have a look over these failures? https://treeherder.mozilla.org/logviewer?job_id=334009311&repo=autoland

[11:09:44.0511] <CosminS|sheriffduty>
https://treeherder.mozilla.org/jobs?repo=autoland&resultStatus=pending%2Crunning%2Csuccess%2Ctestfailed%2Cbusted%2Cexception&classifiedState=unclassified&searchStr=valgrind&fromchange=2dc4b168d50379bfdda379fd9db9d0da3e1f4b7f&tochange=0d612680ffc455d340c0d637bfff5f592a011ca1&selectedTaskRun=ZQSsXBJGTYizetkSiWVsHA.0

[11:10:08.0143] <bogdant|sheriffduty>
evilpie:  ^^

[11:21:04.0566] <evilpie>
CosminS|sheriffduty: did the previous runs not finish?

[11:21:56.0429] <CosminS|sheriffduty>
the jobs are running but they take about 60mins

[11:22:28.0857] <CosminS|sheriffduty>
also, that patch has some wpt issues: https://treeherder.mozilla.org/jobs?repo=autoland&selectedTaskRun=NrLBMhbLQ0K0S_RtY4zxrw.0&resultStatus=testfailed%2Cbusted%2Cexception%2Cretry%2Cusercancel&revision=92185c466b6d22706dc57ab83abc344ae023c529

[11:22:47.0042] <CosminS|sheriffduty>
 * also, those patches have some wpt issues: https://treeherder.mozilla.org/jobs?repo=autoland&selectedTaskRun=NrLBMhbLQ0K0S_RtY4zxrw.0&resultStatus=testfailed%2Cbusted%2Cexception%2Cretry%2Cusercancel&revision=92185c466b6d22706dc57ab83abc344ae023c529

[11:25:08.0922] <evilpie>
CosminS|sheriffduty: okay that at least is just an unexpected-pass that is easy to fix

[11:26:58.0323] <CosminS|sheriffduty>
evilpie: wanna fix the wpt's?

[11:27:02.0799] <evilpie>
yeah

[11:28:13.0686] <CosminS|sheriffduty>
ok, and a correction, the valgrind might be from https://treeherder.mozilla.org/jobs?repo=autoland&searchStr=linux%2Cx64%2Copt%2Cvalgrind-linux64-valgrind%2Fopt%2Cv&revision=dfe051a9c91a9da6a31282928bc5ce001f60f4ee

[11:28:48.0177] <evilpie>
yeah. I guess we can back it out. Not sure what the problem is

[11:30:35.0888] <CosminS|sheriffduty>
ok, please leave the fix for the wpts so I can land it, thanks

[11:30:51.0209] <CosminS|sheriffduty>
 * ok, please leave here the fix for the wpts so I can land it, thanks

[11:31:21.0804] <evilpie>
https://phabricator.services.mozilla.com/D109387

[11:45:41.0903] <evilpie>
CosminS|sheriffduty: I think I might have been blameless after all? https://treeherder.mozilla.org/jobs?repo=autoland&resultStatus=pending%2Crunning%2Csuccess%2Ctestfailed%2Cbusted%2Cexception&classifiedState=unclassified&searchStr=valgrind&revision=d864e55afeadd9527351008fd5f5fa54378f8765

[11:46:13.0523] <CosminS|sheriffduty>
ok, I'll reland and take care of that, sorry for the trouble

[11:46:21.0937] <evilpie>
no maybe wait a moment

[11:46:41.0016] <evilpie>
okay https://treeherder.mozilla.org/jobs?repo=autoland&resultStatus=pending%2Crunning%2Csuccess%2Ctestfailed%2Cbusted%2Cexception&classifiedState=unclassified&searchStr=valgrind&revision=1bd16d8959e5450ed6fa84f56bca4c14a3befa27 is the problem

[11:46:42.0817] <evilpie>
back it out

[11:46:50.0968] <evilpie>
jandem: ^

[11:46:59.0876] <evilpie>
> <@cosmin:mozilla.org> ok, I'll reland and take care of that, sorry for the trouble

no problem

[12:30:15.0498] <jandem>
evilpie: curious, will take a look tomorrow

[12:39:16.0558] <jandem>
oh nvm, it's a Valgrind false positive. There was a workaround that I removed, I'll add it back with a comment

[15:34:56.0336] <CosminS|sheriffduty>
evilpie: still around?

[15:37:05.0050] <evilpie>
CosminS|sheriffduty: barely

[15:38:01.0324] <CosminS|sheriffduty>
unfortunately this has come up: https://treeherder.mozilla.org/logviewer?job_id=334048156&repo=autoland

[15:38:28.0048] <CosminS|sheriffduty>
https://treeherder.mozilla.org/jobs?repo=autoland&fromchange=dfe051a9c91a9da6a31282928bc5ce001f60f4ee&searchStr=linux%2Cx64%2Cdebug%2Chazard-linux64-haz%2Fdebug%2Ch&tochange=e41fd0c1f3923c9aba964ab099a1b0a145ca4991&selectedTaskRun=IjPZb7BGRq6ufHnB9mXuVg.0

[15:39:01.0411] <evilpie>
ah I see

[15:40:17.0349] <evilpie>
can't fix it right now

[15:41:14.0531] <CosminS|sheriffduty>
no worries, will back it out and you can have a look later on

[15:41:29.0138] <evilpie>
thanks.


2021-03-23
[02:33:22.0832] <leveryd>
how to parse javascript code and walk the "ast" using embed spidermonkey? i try to find some document,it seems "reflect.parse" can do parser job，but it is javascript api，not "c++" api.

[02:38:51.0258] <yulia>
what is the outcome you are aiming for? do you have an embedded application in cpp that would process the ast?

[02:39:21.0283] <yulia>
and are you trying to get an ast representation of the code, or are you looking to get what spidermonkey outputs?

[02:54:20.0132] <arai>
Unfortunately classes around parser/AST are private (they're inside lowercase `js` namespace), and there's no C++ public API

[02:55:15.0694] <arai>
internal documentation and definitions are in https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.h and https://searchfox.org/mozilla-central/source/js/src/frontend/ParseNode.h 

[02:55:47.0080] <arai>
leveryd: ^

[03:09:08.0705] <leveryd>
i want to get all function call names in "javascript code snippet".

[03:14:22.0148] <leveryd>
will you plan to make some C++ public API to parse javascript code?

[03:34:07.0381] <arai>
I'm not aware of such plan for C++ code.  In the long term plan, we're going to rewrite the frontend (parser/bytecode compiler) in Rust, and the rust crate will have public API for parser/AST

[04:06:20.0427] <leveryd>
the rust project is "https://github.com/mozilla-spidermonkey/jsparagus" ?

[04:13:30.0965] <arai>
yes

[04:15:34.0197] <leveryd>
nice

[05:40:09.0360] <18f>
> <@arai:mozilla.org> I'm not aware of such plan for C++ code.  In the long term plan, we're going to rewrite the frontend (parser/bytecode compiler) in Rust, and the rust crate will have public API for parser/AST

https://hacks.mozilla.org/2020/11/warp-improved-js-performance-in-firefox-83/ seems I Had seen this...

[05:50:28.0331] <arai>
JIT compiler is different part than bytecode compiler

[05:50:40.0473] <yulia>
I think there might be some confusion about what is being discussed above. Warp and the parser are two separate parts of the engine. The initial question was about a c++ api that exposes the parser, this doesn't exist and there are no such plans. As for Warp and the Parser: the parsere is part of the frontend, warp is part of the backend. 

The work on Warp is more modular, Jan's comment says it makes a refactoring such as rust possible, not that we have plans to do such a refactoring for the JITs.

[05:50:48.0927] <yulia>
or, basically what arai said

[05:51:12.0750] <18f>
I am sorry

[05:51:20.0689] <18f>
I don't want to express this...

[05:51:36.0095] <18f>
But it's not important... ignore this plz...

[05:51:43.0328] <yulia>
oh, don't worry! 

[05:52:00.0892] <yulia>
there are a lot of moving parts and it can be hard to orient yourself. 

[05:52:35.0460] <18f>
No...

[05:53:20.0054] <18f>
I send this message just because arai say will rewritten in rust..

[05:53:46.0232] <18f>
I have seen this paper, it also mentioned about "rust"...

[05:53:58.0074] <18f>
so I think it is interersting...

[05:53:58.0612] <yulia>
ah, i see

[05:54:38.0916] <yulia>
well, it absolutely is interesting :) the frontend rust project is currently paused, but if you are interested in rust you should check it out

[05:55:16.0187] <18f>
ok, ☺️ 

[05:55:19.0890] <18f>
thx

[05:56:39.0911] <yulia>
from what I understand, it doesn't look like the engine will be fully ported to rust any time soon, due to the safety semantics the language currently has which make implementing a garbage collector difficult. That might change in the future as rust evolves, but there will likely be cpp in the codebase going forward. I think its nice to think of the two languages as a balance allowing us to do different things!

[05:57:00.0017] <yulia>
that, and a few other issues, including the scale of the undertaking

[05:57:09.0214] <yulia>
However, the parser is a really interesting exploration

[14:58:19.0744] <tcampbell>
confession: My nemesis, Bug 1461724, strikes again..

[14:58:22.0114] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:58:23.0315] <botzilla>
https://bugzil.la/1461724 — NEW (nobody) — [ARM/ARM64] Crash in js::jit::MaybeEnterJit (SIGILL/SIGSEG on Xperia X/Xperia Z5/Galaxy S6/Galaxy S2 Tab)

[14:59:48.0144] <tcampbell>
I-Cache coherency issues on a specific Linux kernel, on asymmetric big.little processors, on 2015-era Qualcomm chips...

[15:24:57.0082] <iain>
Roughly 2/3 of all baseline ICs we create are NewObject ICs that we [don't share](https://searchfox.org/mozilla-central/rev/1758450798ae14492ba28b695f48143840ad6c5b/js/src/jit/CacheIR.cpp#11015-11020) because `createGCObject` is a bad interface

[15:25:08.0219] <iain>
Fun fact


2021-03-24
[17:28:29.0105] <tcampbell>
confession: Just discovered that the `ip` register on ARM is _not_ the instruction pointer but just a normal scratch register

[23:07:32.0632] <jandem>
what do you mean by pa0 and pa1?

[23:08:28.0953] <18f>
sry, seems I am wrong...

[23:09:06.0000] <18f>
any way to Withdraw my message

[23:09:10.0193] <18f>
?

[23:10:54.0807] <18f>
> <@jandem:mozilla.org> what do you mean by pa0 and pa1?

Thank u , I will read it carefully again, try to understand it...

[23:24:00.0353] <jandem>
18f: I think that means another range is already using that spill slot, so it can't be reused or it would conflict

[23:25:35.0257] <jandem>
 * 18f: I think that means another range is already using that spill slot, and they overlap, so the spill slot can't be reused or it would conflict

[23:31:20.0950] <jandem>
the SpillSet has bundles, each bundle has ranges. The code is trying to figure out: "does any of the ranges in the SpillSet overlap with the spill slot we found?" If yes, we can't reuse the slot

[23:31:41.0705] <jandem>
if no, the slot is available 

[23:32:36.0128] <18f>
A bundle has ranges_, they should allocate in same location, right?

[23:32:41.0841] <jandem>
 * the SpillSet has bundles, each bundle has ranges. The code is trying to figure out: "do the ranges in the SpillSet overlap with the spill slot we found?" If yes, we can't reuse the slot

[23:33:23.0042] <jandem>
yes. So we need to find a SpillSlot that's available for every bundle/range

[23:34:01.0905] <jandem>
that's why it's checking all of them

[23:41:02.0181] <18f>
> <@18f:mozilla.org> so bundle 2 and bundle 3's location will be "bogus" too.

This part, my understanding is wrong?

[23:45:13.0174] <18f>
two

[23:49:01.0811] <jandem>
18f: it can be true if the range (with "from, to") overlaps with a range from another SpillSet

[23:49:22.0286] <jandem>
 * 18f: it can be true if the range (based on "from, to") overlaps with a range from another SpillSet

[23:50:01.0328] <18f>
> <@jandem:mozilla.org> 18f: it can be true if the range (based on "from, to") overlaps with a range from another SpillSet

oh thanks god, I will think about there case.

[23:50:08.0113] <18f>
thank u.

[23:51:07.0345] <jandem>
but good question, it is confusing

[23:54:29.0272] <18f>
does u mean this way?

[23:54:33.0369] <18f>
this case?

[23:55:52.0053] <18f>
b include a...

[23:56:08.0544] <jandem>
yes exactly!

[00:01:20.0572] <18f>
ok, I will think about this, good week 😊

[00:28:33.0132] <18f>
I removed my some wrong message, aware it will confused another man...

[00:31:52.0368] <jandem>
it's also fine to keep them, maybe someone else has the same question 🙂

[00:52:46.0175] <18f>
ok, next time i will care about this

[00:55:09.0151] <18f>
I am so curious about....

[00:55:30.0326] <18f>
whether u could understand me? In my bad English...

[00:55:57.0229] <18f>
🤔

[01:04:40.0571] <jandem>
18f: yes I could understand what you meant, no problem. The pictures help too

[01:05:03.0706] <jandem>
 * 18f: yes I could understand you, no problem. The pictures help too

[01:06:00.0473] <18f>
ok, thanks, I won't worry about this again.

[02:23:18.0970] <decoder>
jandem: did we enable in-process symbolizing for jsshells at some point?

[02:23:32.0072] <decoder>
I see (useless) backtraces in our jsshells

[02:31:30.0047] <jandem>
decoder: not sure if this helps, but sfink added a --dll mechanism that we [use in automation](https://searchfox.org/mozilla-central/rev/cc4a17cea338fe236626d838ca96e9bf6a775675/js/src/devtools/automation/autospider.py#597-601) to load the breakpad injector library (it requires a JS shell with NSPR enabled)

[02:33:25.0925] <decoder>
yea, we are not using breakpad in fuzzing

[02:33:42.0441] <decoder>
right now, with the standard jsshell without any extra args, you get potentially huge stacks

[02:33:45.0514] <decoder>
that all look like this:

[02:34:00.0191] <decoder>
`#9499: ??? (???:???)`

[02:34:40.0817] <decoder>
maybe this should only be active when --dll is actually passed?

[02:36:34.0238] <jandem>
decoder: I don't know where those stack traces are coming from?

[02:37:02.0819] <decoder>
it looks like the break handler that we use in firefox

[02:38:43.0744] <decoder>
`python3 -mfuzzfetch --target js --debug -n jsshell-test && jsshell-test/dist/bin/js -e 'crash()'`

[02:38:45.0213] <decoder>
shows it

[02:39:00.0906] <decoder>
this is using the jsshell from the TC firefox debug build

[02:40:20.0424] <jandem>
I don't see that locally. I wonder if it's an NSPR thing

[02:41:44.0490] <decoder>
locally you mean with a shell-only build?

[02:43:48.0468] <jandem>
decoder: yeah. Is this a new thing or did you notice this before?

[02:43:55.0045] <decoder>
this is new

[02:44:14.0359] <decoder>
let me try checking when this started...

[02:46:37.0974] <decoder>
jandem: started 2021-03-23

[02:46:40.0767] <decoder>
(on central)

[02:48:29.0451] <jandem>
decoder: ah bug 1699375 looks related

[02:48:31.0055] <botzilla>
https://bugzil.la/1699375 — RESOLVED (glandium) — Stack traces are not printed in all cases one would expect they would

[02:48:53.0419] <jandem>
it moved code to mozglue

[02:50:50.0320] <decoder>
yea that might be it..

[02:50:53.0513] <decoder>
checking how we can disable this

[06:46:38.0846] <yulia>
jonco: i have an interesting problem that is impacting two different projects: top level await and esmification. for top level await it isn't a priority, but for esmification it is

[06:47:01.0705] <yulia>
basically, I need a way to determine the module specifier's absolute path

[06:47:23.0598] <yulia>
for top level await, it is for throwing errors: https://phabricator.services.mozilla.com/D105466

[06:48:05.0240] <yulia>
this is because the spec allows an infinite loop with awaiting a dynamic import, and there is no detection if you have created such a loop. We can throw here, its a bit messy but possible. i am just sketching it out for now

[06:48:39.0738] <yulia>
on the other hand, for esmification, we need a set of import hooks for importing modules

[06:49:11.0317] <yulia>
right now, the mozComponentLoader will try to use the script loader and fail. The hooks are the most natural place to intervene

[06:50:28.0809] <yulia>
So, the question: we have a module specifier resolver in the ScriptLoader (used by the DOM) -> https://searchfox.org/mozilla-central/rev/cc4a17cea338fe236626d838ca96e9bf6a775675/dom/script/ScriptLoader.cpp#1051
and a specifier resolver in the ModuleLoader, used by the shell -> https://phabricator.services.mozilla.com/D105466

[06:50:40.0779] <yulia>
could we make a general utility for this?

[06:51:16.0497] <jonco>
yulia: what the specifier means is dependent on the host, and these are different between the browser and the shell

[06:51:34.0617] <yulia>
 * right now, the mozComponentLoader will try to use the script loader and fail. The hooks are the most natural place to intervene. The worst part of this is the specifier resolution. I have hacked something together

[06:51:36.0712] <jonco>
yulia: for reporting errors we could have a hook to produce a string for error reporting, if that would help?

[06:51:58.0280] <yulia>
yes, I was thinking about that -- we an introduce a hook that, when in the shell resolves one way, when in the dom resolves another

[06:52:04.0109] <jonco>
I'm not following what the issue is for esmificiation

[06:53:01.0150] <yulia>
my memory is a bit hazy there but because we don't have a document for cu.import, we can't use the script loader directly

[06:53:18.0335] <yulia>
the appropriate scriptloader is found via the document

[06:53:43.0049] <yulia>
and it looks like we are somewhat haphazardly selecting one, so I wrote the hooks specificly for cu.import

[06:54:16.0789] <yulia>
this was pretty easy to do, except for the specifier resolution

[06:54:22.0174] <jonco>
do we have a document in this case?

[06:54:33.0850] <jonco>
I'm not sure what the semantics of this are supposed to be

[06:54:58.0215] <yulia>
afaik we don't have a document. I might be wrong though

[06:55:18.0113] <jonco>
yeah that would make sense

[06:55:30.0080] <jonco>
but then where do we get the ScriptLoader from?

[06:55:36.0993] <jonco>
or is that what you're asking?

[06:56:06.0632] <yulia>
the original sketch was doing something i no longer remember.. but we were falling back on the script loader

[06:56:44.0122] <jonco>
ok, but the ScriptLoader is associated with a document, so there must be a document somewhere... 

[06:56:53.0399] <yulia>
the question is more "what risks exist in generalizing specifier resolution"

[06:57:01.0835] <yulia>
you mentioned that this is specific to the host, that makes sense

[06:57:41.0504] <jonco>
yeah, the behaviour is defined for html, and for the shell loader we made up something sensible

[06:58:02.0156] <jonco>
I don't know what the correct behaviour for cu import is

[06:58:35.0292] <yulia>
ok, it sounds like then probably we do want something custom, and i should just clean up what i have into something sensible

[06:58:56.0730] <yulia>
and for the error case, i add a new hook which will rely on the host it finds itself in

[06:59:04.0400] <yulia>
(darn, i was hoping it would be simpler)

[06:59:10.0591] <yulia>
but that makes sense, thanks for the feedback

[06:59:22.0509] <jonco>
np!

[10:31:54.0599] <jonco>
sfink: ping

[15:18:20.0620] <Lcf.vs>
jonco: since you're waiting `import` in `Worker` too... 
is there any reason to have a `non-standard` marker on the French Doc about the `type` option but no type on English version? 

[15:21:20.0908] <Lcf.vs>
(I can't find the `navigator.serviceWorker.register()` definition on WHATWG... but the `type` seems standardized for basic `Worker`)

[15:22:19.0075] <Lcf.vs>
it seems very long, 5 years for a very important feature like that


2021-03-25
[23:26:43.0458] <18f>
@jandem, hey I read the code again, find you are right definitely. The code tries to use splay tree to compare "roginal LiverangeSet" with "new add LiveRange". Try to decide whether they are intersect(overlap). Thank u. 

[23:31:52.0083] <18f>
Yesterday I misunderstand this because I am not familar with splay tree... Then I ignore the "compare" function....now everything is ok. 👌  

[23:32:03.0039] <18f>
cool code.

[23:33:32.0113] <jandem>
yeah, how the compare function is used there can be confusing 

[01:11:02.0409] <jonco>
Lcf.vs: Hi! I don't know anything about this... Can you ask you question over in #mdn?

[01:12:09.0206] <Lcf.vs>
jonco: oh, not that jonco? https://bugzilla.mozilla.org/show_bug.cgi?id=1247687

[01:13:10.0783] <jonco>
Lcf.vs: yes, that was me, but I don't know about the documentation side

[01:14:09.0287] <Lcf.vs>
hum, ok... but my question doesn't really about the doc but the implementation

[01:15:35.0906] <Lcf.vs>
that misses a lot, it seems crasy to declare anything global :|

[01:16:23.0961] <Lcf.vs>
 * that misses a lot, it seems crasy to declare anything global :| (using `importScripts`)

[01:16:38.0261] <jonco>
Lcf.vs: maybe I misunderstood your question

[01:17:27.0503] <jonco>
It would be great to support module import in workers, but it needs someone to work on it

[01:18:08.0954] <Lcf.vs>
yeah!

[01:19:40.0508] <Lcf.vs>
some cpp skills are needed, I presume, for that feature?

[01:20:23.0418] <jonco>
yes indeed

[01:21:41.0001] <Lcf.vs>
hum... so bad, I can't try to help, then 

[01:21:46.0330] <Lcf.vs>
:|

[01:23:40.0015] <Lcf.vs>
I just discovered cpp around 5-6 days, 8-9 years ago x)

[01:24:58.0761] <Lcf.vs>
not really fan, I prefer JS

[04:49:33.0686] <nbp>
```
$ ls /home/nicolas/mozilla/wksp-5/js/xpconnect/src/XPCSelfHostedShmem.h
ls: cannot access '/home/nicolas/mozilla/wksp-5/js/xpconnect/src/XPCSelfHostedShmem.h': No such file or directory
$ ls /home/nicolas/mozilla/wksp-5/js/xpconnect/src/XPCSelfHostedShmen.h
/home/nicolas/mozilla/wksp-5/js/xpconnect/src/XPCSelfHostedShmen.h
```

I had to use `echo … | hexdump -C` to finally find the difference … :/

[06:39:42.0789] <tcampbell>
smaug: Who are the recommended dom::ScriptLoader reviewers these days?

[06:41:56.0758] <smaug>
tcampbell: perhaps me, hsivonen or denispal 

[06:42:10.0338] <tcampbell>
thanks

[10:34:56.0506] <zbraniecki>
jandem: do you plan to review https://phabricator.services.mozilla.com/D107223 ?

[10:36:55.0304] <nbp>
zbraniecki: the trick with such question is to add "when" in front ;) , this way nobody can answer "no".

[10:41:03.0044] <zbraniecki>
haha, my thinking was more along the lines "do you want to be on a blocking path of that landing" first.

[10:41:35.0264] <zbraniecki>
but `when` would show up in a follow up. I first lure my victim into a non-commital communication and then escalate commital part :)

[10:52:36.0689] <tcampbell>
zbraniecki: the "when" I heard from Jan was "this week" and that was only 8 hrs ago, so probably can wrap this up tomorrow

[10:53:12.0536] <zbraniecki>
Oh, awesome, thank you!

[11:35:10.0782] <jandem>
zbraniecki: will get to it first thing tomorrow, sorry for the delay

[11:38:30.0098] <zbraniecki>
no worries! I failed to ask you if you want to review it before I suggested you as a reviewer, so wanted to confirm the interest! Thank you!

[12:25:26.0328] <mgaudet>
PSA: if you submit patches to phabricator with `moz-phab` and it updated earlier this week (rather than in the last 2-3 hours), please run `moz-phab self-update` or the pip3/pip update equivalent, so you get the fix for https://bugzilla.mozilla.org/show_bug.cgi?id=1700485 so that you don't keep requesting review on approved patches after rebases / nits-fixed. (It'll self-update automatically every 3 days, but your reviewers will thank you for updating from 0.1.96 to 0.1.97 sooner rather than later)

[12:25:37.0558] <mgaudet>
(Forwarded from #developers) 

[12:26:09.0126] <mgaudet>
I just did a dumb thing around this while dealing with a [different moz-phab bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1701063) 

[12:27:08.0490] <mgaudet>
(Apologies to you arai; it reset all the review flags on that stack. And further apologies, there's another bunch of patches on that stack that didn't properly get assigned to you. Thanks for the reviews you've already done!) 


2021-03-26
[19:56:32.0628] <18f>
Hey

[19:56:52.0058] <18f>
If I want to know a function when bugid add it

[19:57:04.0573] <18f>
which bugid add it

[19:57:12.0653] <18f>
are there any good ways?

[20:02:43.0743] <18f>
resolve by this |git log -L :FunctionName:FilePath --reverse|

[20:03:00.0575] <iain>
18f: If you look at code on searchfox, if you hover over the grey bar on the left side, you can see which patch most recently changed that line

[20:03:39.0698] <18f>
cool, seems a more convenient way?

[20:03:56.0977] <18f>
which is the url of searchfox website?

[20:04:12.0909] <iain>
https://searchfox.org

[20:05:26.0061] <18f>
cool!

[20:05:31.0707] <18f>
thank u

[22:42:05.0228] <18f>
Hey, what's "lazy argument"? any document about this?

[22:47:59.0136] <iain>
18f: Constructing the `arguments` object is expensive, so we wrote an optimization to avoid allocating it

[22:48:16.0022] <iain>
We just replaced that optimization, but we have not removed the old code

[22:48:32.0311] <18f>
have any bug id about this?

[22:48:32.0823] <iain>
The new version uses alias analysis and scalar replacement

[22:49:16.0705] <iain>
Bug 1688033 is the replacement

[22:49:19.0091] <botzilla>
https://bugzil.la/1688033 — RESOLVED (iain) — Use scalar replacement to optimize the arguments object in Warp

[22:49:21.0152] <18f>
> <@iain:mozilla.org> We just replaced that optimization, but we have not removed the old code

which bug id implement the optimization? I think maybe I could understand this better by read related commit

[22:49:27.0035] <18f>
ok

[22:49:32.0697] <18f>
Thank u so much

[22:50:06.0207] <18f>
Interersting... seems u know everything....

[22:51:22.0485] <iain>
Nope! There is a lot of code in SM I know almost nothing about

[22:52:22.0291] <18f>
haha, I know we can't know every thing, but I think if one can know most of thing which he is good at.

[22:52:32.0198] <18f>
It's also awesome.

[22:53:25.0066] <18f>
just personal view...

[22:54:07.0842] <iain>
It feels good to understand things 🙂

[22:54:28.0877] <18f>
> <@iain:mozilla.org> It feels good to understand things 🙂

agree with this

[22:54:41.0072] <18f>
I continue my study, good week to u!

[22:54:50.0510] <18f>
continue to.. maybe...

[22:55:13.0861] <18f>
> <@18f:mozilla.org> I continue my study, good week to u!

I continue to my study.

[00:29:39.0424] <18f>
> <@iain:mozilla.org> We just replaced that optimization, but we have not removed the old code

https://searchfox.org/mozilla-central/source/js/src/vm/StencilEnums.h#68 

[00:29:59.0715] <18f>
Hey I found this, I think it will help me understand some question I am confused

[08:15:18.0730] <iain>
18f: See also [here](https://searchfox.org/mozilla-central/source/js/src/vm/JSScript.h#1999-2009)


2021-03-27
[17:53:32.0503] <iain>
confession: Trying out a new masm interface for object allocation that can allocate simple objects without having to pass in a template object, which lets us share baseline IC code. Eliminates almost 2/3 of the *total* number of baseline ICs we compile.

[17:53:34.0469] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[17:54:45.0293] <iain>
(NewObject ICs go from ~2/3 of all baseline ICs to ~5%)

[20:36:39.0423] <zbraniecki>
Waldo: friendly ping. You and anba are the last remaining reviewers on https://bugzilla.mozilla.org/show_bug.cgi?id=1695937 - lmk if you want to be kept on the blocking path :)

[07:41:42.0287] <Redfire>
Finally figured out how to make `JSString`s from rust
https://doc.servo.org/mozjs/conversions/trait.ToJSValConvertible.html


2021-03-28
[00:34:12.0776] <18f>
https://bugzilla.mozilla.org/show_bug.cgi?id=1189117

[00:34:29.0392] <18f>
Hey, I want to know "ObjectState" instruction has been discard?

[00:34:58.0482] <18f>
I haven't seen any code like MArrayState::new...

[00:52:28.0147] <18f>
I want to know how can I generate a IR names MObjectState.... 

[00:54:19.0461] <jandem>
18f: if you type in "MArrayState::New" on searchfox, you get [these results](https://searchfox.org/mozilla-central/search?q=MArrayState%3A%3ANew&path=&case=false&regexp=false)

[00:54:43.0932] <jandem>
note that there is a caller but it uses `BlockState::New`

[00:55:06.0369] <jandem>
because there's a `using BlockState = MArrayState;`

[01:20:23.0959] <jandem>
 * it shows there is a caller but it uses `BlockState::New`

[01:24:39.0315] <18f>
Thanks for your explain

[01:25:12.0427] <18f>
I got this. originally I don't see "BlockState = MArrayState"

[01:25:18.0220] <18f>
best wishes

[01:55:56.0887] <18f>
> <@jandem:mozilla.org> 18f: if you type in "MArrayState::New" on searchfox, you get [these results](https://searchfox.org/mozilla-central/search?q=MArrayState%3A%3ANew&path=&case=false&regexp=false)

cool ! I got this , thanks. 🙏 


2021-03-29
[23:19:24.0934] <18f>
Hey, Can I declare that if I run x64, this will be JS_PUNBOX64

[23:19:47.0593] <18f>
and If I run spidermonkey on x86, It will be JS_NUNBOX32?

[23:41:34.0224] <iain>
18f: Yes

[23:41:59.0251] <iain>
Similarly, arm32 is JS_NUNBOX32 and arm64 is JS_PUNBOX64

[00:04:21.0989] <18f>
ok

[00:04:23.0827] <18f>
thanks

[00:18:30.0770] <iain>
(18f: if you are trying to understand our Value representation, [this comment](https://searchfox.org/mozilla-central/rev/d58860eb739af613774c942c3bb61754123e449b/js/src/gdb/mozilla/jsval.py#16-74) might be the best introduction)

[00:19:18.0877] <18f>
> <@iain:mozilla.org> (18f: if you are trying to understand our Value representation, [this comment](https://searchfox.org/mozilla-central/rev/d58860eb739af613774c942c3bb61754123e449b/js/src/gdb/mozilla/jsval.py#16-74) might be the best introduction)

cool

[00:19:26.0802] <18f>
I try to understand another thing

[00:19:36.0177] <18f>
like MInterruptCheck How work

[00:22:24.0124] <iain>
18f: [This comment may help](https://searchfox.org/mozilla-central/source/js/src/vm/JSContext.h#856-874)

[00:23:13.0820] <18f>
Thanks, It's so interesting.

[04:46:15.0567] <leveryd>
where is the latest documention? i see below url is old and not actively maintained.

[05:08:42.0889] <nbp>
doesn't this message appear automatically if the page did not received any modification in a year?

[05:17:09.0095] <leveryd>
> <@nbp:mozilla.org> doesn't this message appear automatically if the page did not received any modification in a year?

JS::AutoValueArray  class does not exist in source code really, firefox-78.1.0. is it discard ?

[05:17:27.0848] <leveryd>
> <@nbp:mozilla.org> doesn't this message appear automatically if the page did not received any modification in a year?

 * JS::AutoValueArray  class does not exist in source code really (firefox-78.1.0). is it discard ?

[05:18:55.0099] <nbp>
Looking at the commit log ;. `Bug 1634435 - Rename AutoValueArray to RootedValueArray`

[05:18:56.0476] <botzilla>
https://bugzil.la/1634435 — RESOLVED (jonco) — Remove some AutoGCRooter kinds

[05:22:20.0868] <nbp>
 * Looking at the commit log … `Bug 1634435 - Rename AutoValueArray to RootedValueArray`

[05:48:54.0321] <evilpie>
also mentioned on https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/docs/Migration%20Guide.md

[05:53:00.0742] <leveryd>
thanks for your guide.maybe add those information about "rename AutoValueArray to RootedValueArray" on the mozilla.net page is good, i think it will help other beginner like me.

[06:22:38.0331] <tcampbell>
If you are looking for information about SpiderMonkey, the recommended starting point is `https://spidermonkey.dev/` The pages on MDN will be removed at some point since MDN intends to focus on the web for everyone instead of mozilla implementation details.

[06:23:14.0797] <tcampbell>
(we probably should like the migration guide directly from spidermonkey.dev since it is a common question..)

[07:16:15.0340] <chaircrusher>
Good morning!

[07:17:14.0433] <chaircrusher>
My boss seems to think that there's a more direct/efficient way to call a JS function defined in the current interpreter context than building a script as a straing and evaluating it.

[07:18:40.0466] <chaircrusher>
I've been trolling through JSAPI (we still build with 1.8.5) because the online pages are spotty.  But I also support a newer version of Spidermonkey (JS60 for now) and it doesn't look like that's possible.

[07:23:36.0081] <wingo>
afaiu string is the best option -- AST osm

[07:23:43.0184] <wingo>
 * afaiu string is the best option -- AST isn't public api

[07:23:46.0545] <nbp>
chaircrusher: Would any of these work for you? https://searchfox.org/mozilla-central/source/js/src/jsapi.h#1420-1438

[07:24:11.0292] <wingo>
aah call, not define

[07:24:22.0915] <chaircrusher>
I just found JS_CallFunction.

[07:24:34.0586] <chaircrusher>
It looks like that might work

[07:24:38.0374] <wingo>
good thing nbp is here to read properly :)

[07:25:06.0800] <nbp>
wingo: the odds are low, but sometime I manage to pick the right words.

[07:26:44.0233] <chaircrusher>
SO - How would someone query an interpreter instance for a JSFunction * object corresponding to an already defined/compiled function? 

[07:29:10.0710] <nbp>
Would these tests help? https://searchfox.org/mozilla-central/source/js/src/jsapi-tests/testProfileStrings.cpp#89

[07:29:47.0625] <chaircrusher>
The use case is that we have stuff implemented in JS, and we want to call it the most efficient way possible.  That JS_CallFunction stuff looks like something I could do but it needs  a JSFunction *

[07:30:04.0590] <chaircrusher>
@nbp thanks will look at that.

[07:31:25.0726] <chaircrusher>
those tests appear to do exactly what we'd like.

[07:32:21.0329] <chaircrusher>
Is there a way to get the JSFunction *, given the name of the function?

[07:32:26.0551] <nbp>
https://searchfox.org/mozilla-central/source/js/src/jsapi-tests/testChromeBuffer.cpp#108-116 This one uses `JS_CallFunction` after compiling the function.

[07:33:42.0343] <nbp>
I suggest to look how `JS_CallFunctionName` is implemented, and factor everything before the `Call`

[07:33:58.0397] <chaircrusher>
OK

[07:34:20.0784] <chaircrusher>
This forum is as helpful as the online documentation is confusing and incomplete ;-)

[07:36:52.0062] <nbp>
/me always read the code, even if there is some documentation.

[07:51:06.0561] <chaircrusher>
JS_CallFunctionName finds the function with private functions (js_Atomize, js_GetMethod, ExternalInvoke in 1.8.5) - is there anything exposed in JSAPI for that?

[08:18:20.0667] <nbp>
(JS_GetProperty)[https://searchfox.org/mozilla-central/source/js/src/jsapi.h#1248-1250], maybe?

[08:18:32.0587] <nbp>
 * [JS_GetProperty](https://searchfox.org/mozilla-central/source/js/src/jsapi.h#1248-1250), maybe?

[08:20:06.0215] <chaircrusher>
Worth a try

[08:20:57.0834] <chaircrusher>
All globals are properties of global, right?

[08:23:09.0011] <nbp>
yes

[08:52:51.0900] <pingu>
Anyone know if it would be possible to intercept the result of a Call or FunCall opcode in interpreter.cpp, was considering attempting to intercept Return but that could be triggered by a function before the one I need

[09:11:23.0993] <tcampbell>
The handling of call is either a [slow-path](https://searchfox.org/mozilla-central/rev/d58860eb739af613774c942c3bb61754123e449b/js/src/vm/Interpreter.cpp#3229-3247) that would be straightforward to catch, otherwise it will reuse the C++ function call, so you'd need to check Return

[09:14:32.0416] <tcampbell>
If you are doing this in a debugger you might be able to set a memory watch on the stack memory where the return value will be written to

[09:15:18.0552] <tcampbell>
`InterpreterFrame::rval_`

[09:15:56.0488] <tcampbell>
 * `InterpreterFrame::rval_`. Doing this would avoid being mislead by the other function calls that happen. pingu 

[09:36:49.0251] <pingu>
not a slow-pathy unfourtanetly but hooking the stack memory is a great idea, thanks for the help tcampbell 😃

[09:37:34.0778] <tcampbell>
If you are on linux, we also recommend [rr](https://rr-project.org/) as debugger for this sort of stuff because you can go backwards or forwards in time.

[09:44:45.0070] <nalexander>
Folks, I would like to know if I can interrogate the JS engine to find "pending" things, i.e., Promises that have not yet settled/resolved, tasks in the task queue, etc.

[09:45:36.0077] <tcampbell>
nalexander: that currently all lives in DOM land

[09:45:41.0187] <nalexander>
My use case is pretty standard: I think there's some asynchronous activity that's not being waited on, and I'd like to get the engine to tell me things that it knows about.  I expect my final solution will be to actually wait for those things, not to wait until the engine reaches quiescence.

[09:45:49.0102] <nalexander>
tcampbell: oh.  That's not what I expected.

[09:46:15.0616] <tcampbell>
(which isn't to say they own the problem, just the queues..)

[09:46:25.0963] <nalexander>
tcampbell: my use case is a bunch of privileged (chrome) JS, i.e., JSMs.  That's probably below the level the DOM knows about, yes?

[09:46:49.0649] <nalexander>
tcampbell: but for my own education, can you suggest some keywords to start searching/reading?

[09:47:08.0743] <tcampbell>
just trying to work through searchfox myselft now..

[09:47:12.0186] <tcampbell>
 * just trying to work through searchfox myself now..

[09:48:14.0039] <tcampbell>
by "DOM", I mostly mean `/dom` which is where things like ScriptLoader live

[09:48:19.0922] <tcampbell>
nalexander: I am starting here.. https://searchfox.org/mozilla-central/source/xpcom/base/CycleCollectedJSContext.cpp#383

[09:49:01.0792] <tcampbell>
I'm trying to remember where something like an unresolved promise lives..

[09:49:09.0850] <tcampbell>
/me hopes someone jumps in with a smarter answer..

[09:49:44.0322] <mgaudet>
I was going to suggest looking at subclasses of JS::JobQueue (and [runJobs implementations](https://searchfox.org/mozilla-central/search?q=symbol:_ZN2JS8JobQueue7runJobsEP9JSContext&redirect=false) 

[09:49:44.0574] <nalexander>
tcampbell: hmm, JSMs are loaded with https://searchfox.org/mozilla-central/source/js/xpconnect/loader/mozJSComponentLoader.cpp; that's below `ScriptLoader`, I think.

[09:49:46.0928] <mgaudet>
 * I was going to suggest looking at subclasses of JS::JobQueue (and [runJobs implementations](https://searchfox.org/mozilla-central/search?q=symbol:_ZN2JS8JobQueue7runJobsEP9JSContext&redirect=false)) 

[09:50:07.0904] <tcampbell>
yeah, JSMs use a different scriptloader

[09:50:29.0777] <tcampbell>
 * yeah, JSMs use a different scriptloader. (beside, rather than below)

[09:50:41.0105] <nalexander>
tcampbell: re: beside, duly noted.

[09:50:54.0830] <sfink>
the only related thing I know of is [where the microtask queue is processed](https://searchfox.org/mozilla-central/source/xpcom/base/CycleCollectedJSContext.cpp#456-470)

[09:51:09.0197] <tcampbell>
(I make the distinction because there is unfortunately no single source of truth)

[09:53:00.0260] <tcampbell>
We aspire to have better answers here, but you'll need to have some patience with our clunky digging around since historically dom::ScriptLoader and xpconnect were other groups (which is silly and we are improving situation)

[09:53:21.0963] <nalexander>
Mmm, I can tell this is going to be an interesting and enlightening goose chase :)

[09:53:32.0197] <wraitii>
Hello everyone, quick question to make sure I'm not misunderstanding something: SpiderMonkey has one JS-executing thread per JSRuntime. Inside a given runtime (& context), there can be several Compartments. Inside these compartments can be several Realms. (am ignoring zones here).
Is this correct:
- Passing data between runtimes needs structured clones
- Passing data between compartments is OK/transparent to the code, but crosscompartmentwrappers are created (not sure what those do?)
- Passing data between realms is OK/transparent, and needs no wrappers? 

[09:53:36.0836] <nalexander>
tcampbell: I have nothing but patience!  (And appreciation for being able to ask the experts.)

[09:54:15.0813] <tcampbell>
team: how does the unhandled-rejections logic work?

[09:54:51.0082] <sfink>
that's the stuff that arai implemented?

[09:55:00.0674] <tcampbell>
I think so?

[09:56:29.0803] <sfink>
wraitii: yes, that's all correct, with minor caveats. The cross-compartment wrappers are because compartments are a security boundary, and so *all* cross-compartment access has to be done in a way that can be checked and revoked according to the permissions model. They form a membrane between compartments.

[09:56:58.0307] <sfink>
or at least, it's correct if by "transparent to the code", you mean JS code. Things need to be manually wrapped in C++.

[09:57:58.0093] <sfink>
and I guess structured clone is one way of transmitting data between runtimes. You could also serialize to JSON. Or for very limited data types, use `SharedArrayBuffer`.

[09:58:03.0845] <tcampbell>
`JS_WrapObject` needs to be called, yes.

[09:58:47.0411] <arai>
tcampbell: when any rejection happens on promises that doesn't have associated rejection handler (.then or .catch), the runtime records them, and when rejection handler is associated to those promises, the runtime removes them from the list.  at some point, embedder reports remaining promises as unhandled

[09:59:12.0031] <tcampbell>
arai: do we have any tracking of a promise that is still pending?

[09:59:19.0118] <tcampbell>
I would expect not, since it is just an object.

[10:00:16.0951] <arai>
afaik, we don't track the list of pending promises

[10:00:30.0632] <arai>
(it might be in other place tho

[10:02:44.0706] <tcampbell>
nalexander I think the promises would need to be tracked at their source. 

[10:02:45.0968] <wraitii>
sfink: yes my question is from the JS code's perspective. We have code living in the same runtime but in different compartments, I'd like to get them to communicate in more 'real time'. They're in different zones though, I'm not sure if that matters with regards to what I wrote above

[10:03:44.0052] <nalexander>
tcampbell: okay, I think that will not be possible, since my goal is to understand the "unknown unknowns".

[10:04:25.0476] <nalexander>
tcampbell: leaving aside "interrogating the engine", what if I just wanted to "printf debug" the engine.  Like, could I get the engine to print (the length of) the various queues, say?

[10:05:19.0108] <arai>
oh, just realized there are some more contexts before the question

[10:05:26.0108] <arai>
/me reads backlog

[10:06:10.0588] <nalexander>
arai: for my discussion, yes, first message is 9:44am Pacifici.

[10:06:13.0082] <tcampbell>
(back in 10)

[10:06:13.0462] <nalexander>
 * arai: for my discussion, yes, first message is 9:44am Pacific.

[10:06:20.0118] <nalexander>
tcampbell: thanks for your help.

[10:11:41.0958] <iain>
nalexander: I think the problem with printf debugging the queues is that they contain promises that have already resolved and need handling

[10:12:31.0619] <iain>
And it sounds like you're looking for things that haven't resolved?

[10:12:33.0531] <nalexander>
iain: need handling by the JS runtime, you mean, in a way that wouldn't necessarily be visible to the consumign code?

[10:12:53.0468] <nalexander>
iain: I'm not really sure what I'm looking for, 'cuz I don't understand all the things that are in play.

[10:17:39.0499] <iain>
nalexander: Sorry, maybe I was misreading "I think there's some asynchronous activity that's not being waited on"

[10:18:10.0795] <iain>
What are the symptoms of your problem?

[10:18:47.0147] <nalexander>
iain: hmm, I'm not sure I want to waste your time, but:

[10:18:54.0561] <nalexander>
https://bugzilla.mozilla.org/show_bug.cgi?id=1700846

[10:19:51.0095] <nalexander>
As a lazy substitute while we "green this up" I've landed with a wait to let some things happen/resolve: https://searchfox.org/mozilla-central/rev/d58860eb739af613774c942c3bb61754123e449b/toolkit/mozapps/update/BackgroundTask_backgroundupdate.jsm#181

[10:20:19.0647] <nalexander>
This code is very old and mostly-synchronous; it might be as easy as needing to wait a tick/cycle to let some other notifications process.

[10:20:45.0689] <nalexander>
I just wanted to start with "what can the engine/tooling" tell me about the world before trying to trace the many threads at work.

[10:20:56.0989] <nalexander>
(threads in the sense of fabric, not in a technical sense)

[10:22:57.0702] <iain>
(Don't worry too much about wasting my time; I am just about to start digging into our promise resolution / event handling code for my own reasons, so this is helpful for ramping up)

[10:24:14.0160] <tcampbell>
iain: I'll leave to you then, since I agree we should know how to answer this question regardless

[10:24:36.0848] <iain>
The big problem with waiting for all pending promises to resolve is that we don't have a centralized place that stores pending promises

[10:25:10.0672] <iain>
Pending promises are just objects with callback functions

[10:25:22.0440] <tcampbell>
iain: there is also that existential "what is a promise" question since I don't think we require them to all use PromiseObject

[10:25:24.0788] <iain>
And when the callback fires, they get put into a queue for handling

[10:25:33.0551] <tcampbell>
 * iain: there is also that existential "what is a promise" question since I don't think we require them to all use PromiseObject (eg dom promises are fun, I think?)

[10:26:03.0543] <arai>
for reaction jobs for already-resolved promises, waiting for the end of a microtask checkpoint would work  (if such reactions resolves promises and enqueues more reactions, those will also be performed in the same checkpoint).  for promises that's not yet resolved, there's no easy way, given that completely depends on the consumer who resolves the promise, that exists outside of the engine

[10:27:19.0772] <nalexander>
arai: what's the way to wait for the microtask checkpoints from consumer-side?  Something like scheduling on the next tick?

[10:27:27.0933] <iain>
The secondary problem with waiting for all pending promises is that it could be really slow for, say, network access

[10:27:49.0509] <iain>
nalexander: The microtask queue is flushed on the way out of JS

[10:27:51.0518] <nalexander>
Which is `Services.tm.dispatchToMainThread` in Gecko, IIRC?

[10:28:50.0223] <nbp>
Note, do not touch `jsapi.h` while working on Firefox. (rediscover this by mistake)

[10:29:03.0349] <nalexander>
nbp: duly noted :)

[10:29:12.0342] <nalexander>
nbp: may I ask why?

[10:29:20.0011] <nalexander>
(Presumably, rebuild the universe?)

[10:29:25.0383] <iain>
(So you shouldn't have to do anything special to wait for the end of a microtask checkpoint; it will just happen)

[10:29:32.0378] <arai>
https://searchfox.org/mozilla-central/rev/d58860eb739af613774c942c3bb61754123e449b/xpcom/base/CycleCollectedJSContext.cpp#472

[10:29:36.0887] <nbp>
nalexander: it is included everywhere, and is equivalent to a clobber build.

[10:29:44.0697] <nalexander>
nbp: roger.

[10:29:50.0629] <arai>
that method is called after performing microtask

[10:30:32.0659] <nbp>
unless you are building firefox in 4 minutes instead of 40.

[10:36:05.0408] <wraitii>
sfink: So for different compartments, all I need to do is get the JS::Value from realm A in compartment A, enter the realm B in compartment B via autorealm, call JS_WrapValue, and the send the value to my JS code ?

[10:38:08.0021] <wraitii>
(not entirely clear how to create a compartment wrapper from C++)

[10:40:24.0093] <evilpie>
JS_WrapValue creates the wrapper for you

[10:40:39.0010] <evilpie>
Are you sure you need compartments? These wrappers are no free

[10:40:43.0786] <evilpie>
 * Are you sure you need compartments? These wrappers are not free

[10:45:41.0532] <sfink>
(my responses will be much delayed; it's homeschooling math hour over here)

[10:46:04.0223] <sfink>
I would echo evilpie's question. If you don't have a security boundary, then you probably don't want compartments.

[10:46:20.0275] <sfink>
they're slow and very easy to get wrong from C++

[10:46:31.0694] <sfink>
any semantic separation can be done with Realms

[10:55:13.0882] <wraitii>
right

[10:55:28.0538] <wraitii>
I probably don't need them, just need to change more code to have different realms in the same compartment ::p 

[10:55:34.0260] <wraitii>
 * I probably don't need them, just need to change more code to have different realms in the same compartment :p 

[10:56:02.0005] <wraitii>
Given that I'm doing that change for performance reasons, it probably makes sense anyways

[10:56:05.0312] <wraitii>
Thanks for the answers

[11:11:45.0349] <sfink>
wraitii: you mentioned that currently they're in different zones. Putting them in the same compartment does mean they'll be in the same zone, and you won't be able to GC them independently anymore. But it would be pretty hard to construct a scenario where that's a bad tradeoff.

[11:13:11.0544] <jandem>
wraitii: if you happen to see performance improvements we'd love to hear about them. (The realm/compartment split happened just a few years ago.)

[11:14:14.0825] <wraitii>
The change will be part of a greater philosophy change I'm trying, if it succeeds the performance improvements are liable to mostly from that, so I doubt I'll be able to easily measure the impact of the SM changes

[11:15:04.0899] <wraitii>
(Basically right now our AI is setup to run threaded, but we didn't actually thread it, so it's just in another compartment. The issue is that we lose a lot of time copying data over to the other compartment, so not doing that is liable to be faster)

[11:15:25.0922] <jandem>
that makes sense

[11:23:14.0322] <wraitii>
(and I'll probably implement pseudo-web-workers to do some things asynchronously, since there is still value in that)

[13:55:12.0383] <evilpie>
design question: how should we represent "undefined" PropertyDescriptor?

[13:55:35.0721] <evilpie>
Maybe<PropertyDescriptor>? or just have some method on PropertyDescriptor like "isUndefined()" ?

[14:02:41.0986] <tcampbell>
like a hole? I think I like the "Maybe" version since "isUndefined" is a little close to {value:undefined}

[14:02:49.0876] <tcampbell>
 * like a hole? I think I like the "Maybe" version since "isUndefined" is a little close to `{value:undefined}`

[14:08:22.0873] <evilpie>
tcampbell: the spec does something like this https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable

[14:09:10.0327] <tcampbell>
hmm right

[14:09:36.0357] <evilpie>
Currently we use desc.object(), which is like the worst possible solution

[14:12:08.0662] <evilpie>
I am going to try Maybe<PropertyDescriptor> in a few places and see how it feels

[14:12:50.0674] <tcampbell>
I think that is clearest (and clearer than the spec..)

[14:20:32.0148] <evilpie>
tcampbell: sounds good to me. cheers

[14:58:44.0716] <mgaudet>
confession: Trying to sort through a bytecode emission gap in private method/field patches; hoist on my own petard for not writing a sufficiently comprehensive set of private field patches when I did it originally 

[14:58:46.0925] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:59:28.0722] <mgaudet>
(side note: boy trying to share emission functionality makes reasoning about bytecode emission hard. Out of juice for today )\

[14:59:31.0006] <mgaudet>
 * (side note: boy trying to share emission functionality makes reasoning about bytecode emission hard. Out of juice for today )


2021-03-30
[22:44:04.0038] <18f>
Hey, If I understand is right. it's means resume point will saved the IR which is side-effect?

[22:44:30.0763] <18f>
originally I think it saved IR which is lived....

[22:46:58.0798] <iain>
18f: We have to be able to recreate a baseline stack frame from the resume point. So *after* every side-effect (and at the beginning of every block) we have a resume point that captures all of the values that might be needed in the baseline frame

[22:48:11.0612] <iain>
If we bail out, then we will use the most recent resume point to recreate the state of the baseline frame

[22:50:24.0048] <18f>
wait me a moment

[22:50:30.0591] <18f>
sry

[22:50:40.0719] <iain>
In general, the baseline frame contains arguments, locals, and the current contents of the operand stack

[22:52:09.0476] <18f>
originally , I thought the implementation likes osr exit...

[22:52:19.0462] <18f>
but seems It's not,

[22:52:45.0131] <iain>
These days we usually say "bailout" instead of "OSR exit"

[22:53:03.0941] <iain>
If we say OSR, we normally mean baseline->Ion

[22:53:26.0212] <iain>
 * If we say OSR, we normally mean baseline->(Ion/Warp)

[22:53:57.0015] <18f>
function jit(){let a = 1; for(let i = 0; i < 0x1000000; i++) // osr at here{}}

[22:53:59.0252] <18f>
like this?

[22:54:30.0697] <18f>
when we found the for loop, we decide we compile this function

[22:54:42.0213] <iain>
Yes, we OSR at loop heads when the warmup counter reaches a threshold

[22:54:49.0171] <18f>
cool

[22:54:57.0773] <18f>
With your explain

[22:55:56.0683] <iain>
Oh, your second screenshot is from JSC

[22:55:58.0763] <iain>
That makes sense

[22:57:18.0824] <18f>
here is wrong code...

[22:57:39.0558] <18f>
But If I decide implement resume mechiansm by myself

[22:57:55.0523] <18f>
I will use similar code like this...

[22:58:37.0225] <18f>
I want to know are there any flags set in MIR to point it is side-effect or not?

[23:00:10.0440] <18f>
like this, it collect 34

[23:01:11.0591] <18f>
I think rp decide join it because of add

[23:01:28.0097] <18f>
so how rp know add is side-effect...

[23:01:33.0744] <iain>
Oh, I think I see where you are confused

[23:01:34.0695] <18f>
I just curious about this part

[23:01:47.0218] <iain>
The resume point does not capture everything that has a side effect

[23:02:14.0543] <18f>
yeah?

[23:02:23.0471] <iain>
We attach a resume point to instructions that have a side effect

[23:03:01.0519] <iain>
So that if we bail out after that instruction, but before the next instruction with a side effect, we know where to find the values for the baseline frame 

[23:03:36.0947] <iain>
In `resumepoint 34 33 28 16 0 1 1`, we are saying that there are 7 values that we need for the baseline frame

[23:04:06.0608] <18f>
I have two question .

[23:04:39.0182] <18f>
> <@iain:mozilla.org> In `resumepoint 34 33 28 16 0 1 1`, we are saying that there are 7 values that we need for the baseline frame

"resumepoint 34 33 28 16 0 1 1" == "resumepoint 34 33 28 16 0 1 "?

[23:04:53.0463] <iain>
Nope! I was just about to explain that part

[23:05:05.0812] <18f>
ok, I will listen

[23:05:05.0934] <iain>
Each of those operands corresponds to a specific value in the baseline frame

[23:05:21.0483] <iain>
The first one is the top of the operand stack

[23:05:33.0548] <iain>
The second one is the next value on the operand stack

[23:05:41.0845] <iain>
After the operand stack are the locals

[23:06:56.0968] <iain>
And after that are `this` and `callee` and maybe `arguments`

[23:09:11.0499] <18f>
like this?

[23:09:25.0509] <18f>
emmm

[23:09:35.0472] <iain>
Mostly like that

[23:09:35.0920] <18f>
just similar...

[23:09:49.0456] <18f>
uh!

[23:09:54.0810] <iain>
Maybe not exactly, because that's an Ion frame, not a baseline frame

[23:09:58.0503] <iain>
But close

[23:10:02.0387] <18f>
seems I know what u means.

[23:10:19.0876] <18f>
I guess

[23:10:44.0893] <18f>
at baseline,  If bailout occurs, to recover a value

[23:11:08.0044] <18f>
maybe here are some code like this "recoverValue = getStack(7)"

[23:11:32.0918] <18f>
So If I changed it to resumepoint 34 33 28 16 0 1 

[23:11:45.0937] <18f>
It will be a wild value

[23:11:57.0525] <18f>
Just assume getStack(0) = 34

[23:12:05.0088] <18f>
GetStack(1) = 33

[23:12:15.0007] <iain>
Yep!

[23:12:27.0695] <iain>
We encode the state as a snapshot

[23:12:33.0797] <18f>
cool!

[23:12:42.0389] <iain>
And the bailout code uses snapshot iterator to read each value

[23:12:59.0171] <iain>
And if we did not encode the right number of values, then probably everything will crash

[23:13:24.0168] <18f>
yeah

[23:13:27.0415] <iain>
 * And the bailout code uses [SnapshotIterator](https://searchfox.org/mozilla-central/source/js/src/jit/JSJitFrameIter.h#402) to read each value

[23:13:29.0143] <18f>
I agree with this

[23:13:39.0390] <18f>
and seems I understand other part

[23:13:44.0104] <iain>
The code that builds the frames is in BaselineBailouts.cpp

[23:14:21.0623] <18f>
If we have a value in resume point, we don't capture it, it will caused execute twice.

[23:14:32.0911] <18f>
> <@iain:mozilla.org> The code that builds the frames is in BaselineBailouts.cpp

I will see this, thx!

[23:14:35.0787] <iain>
Not quite

[23:15:48.0381] <iain>
We would execute twice if we had an instruction with side effects but no resume point / snapshot

[23:16:13.0242] <18f>
> <@iain:mozilla.org> We would execute twice if we had an instruction with side effects but no resume point / snapshot

Yes, I want to express this...

[23:16:32.0086] <iain>
Okay, cool

[23:16:36.0054] <iain>
It sounds like you understand

[23:16:45.0781] <18f>
In my personal views, "capture" means give it to resume point.

[23:17:00.0906] <18f>
> <@18f:mozilla.org> In my personal views, "capture" means give it to resume point.

nope ,  attach a resume point.

[23:17:42.0411] <18f>
> <@iain:mozilla.org> We attach a resume point to instructions that have a side effect

And My final question is, can I read any code about this part?

[23:18:01.0437] <18f>
like MAdd how to attach a resume point, which phase implement this.

[23:19:06.0284] <iain>
We attach the resume point in WarpBuilder / WarpCacheIRTranspiler

[23:19:12.0549] <iain>
With `resumeAfter`

[23:19:35.0886] <18f>
ok! I will see this!

[23:20:21.0412] <18f>
And I don't know I am right or not, seems I have seen we have some phase could eliminate some resume point? (Maybe I see this in some comment, I forgot...)

[23:21:13.0122] <iain>
If we remove an unreachable block in branch pruning, we can eliminate the resume points in that block

[23:22:13.0763] <18f>
ok, seems I know something which I am curious(maybe I need read WarpBuilder.cpp to confirm this)

[23:22:19.0192] <18f>
Thanks for your explain!

[23:22:21.0679] <iain>
PS: You asked about effectful instructions: https://searchfox.org/mozilla-central/source/js/src/jit/MIR.h#865-872

[23:22:29.0256] <iain>
We can tell by looking at their alias sets

[23:23:05.0294] <18f>
hhhhh

[23:23:10.0021] <18f>
cool idea.

[23:23:30.0617] <iain>
(I can't think of any cases where we remove resume points without removing the instruction it's attached to) 

[23:23:35.0543] <iain>
(But maybe I am forgetting something)

[23:24:52.0026] <iain>
 * (I can't think of any cases where we remove a resume point without removing the instruction it's attached to) 

[23:24:52.0972] <18f>
> <@iain:mozilla.org> (I can't think of any cases where we remove resume points without removing the instruction it's attached to)

no...

[23:25:05.0581] <18f>
I think like this. I just guess.

[23:25:15.0176] <18f>
resumepoint 1 2 3 4 5 6 7

[23:25:30.0280] <18f>
and 3 4 at bailout path

[23:25:46.0557] <18f>
so we remove 3 4 and rp...

[23:26:04.0081] <18f>
But we won't remove 1 2 ,

[23:27:31.0017] <iain>
We can't completely remove 3 or 4, because we need them to fill in the baseline frame

[23:28:19.0840] <18f>
> <@iain:mozilla.org> We can't completely remove 3 or 4, because we need them to fill in the baseline frame

ummm. stupid am I.

[23:28:51.0522] <iain>
Sometimes if we're 100% sure that even the baseline code can never use them, we will replace them with a magic optimized-out value so that we don't have to record how to recover them

[23:29:30.0690] <iain>
But for any point in the code, the size of the resume point is fixed

[23:29:52.0142] <iain>
Have you seen the `dis` function in the shell?

[23:30:27.0870] <18f>
Yeap!

[23:30:28.0870] <iain>
 ```function foo(a,b) { return a + b; }
dis(foo)```

[23:30:55.0200] <iain>
 * ```
function foo(a,b) { return x + y; }
dis(foo)```
```

[23:31:01.0579] <iain>
 * ```
function foo(a,b) { return x + y; }
dis(foo)
```

[23:31:26.0255] <iain>
Every resume point jumps to a specific opcode in the bytecode for the script

[23:32:11.0253] <iain>
And the contents of the resume point correspond to the current operand stack, plus the locals, plus `this`/`callee`/etc

[23:33:22.0152] <18f>
lol～

[23:33:29.0464] <18f>
emmm

[23:33:35.0134] <18f>
rp is used for baseline

[23:34:10.0339] <18f>
so the final target is to recover the variable in baseline.

[23:34:29.0745] <iain>
Yeah

[23:34:45.0706] <18f>
oh! I know what u want to express.

[23:35:01.0112] <18f>
even if I can't express it in English... haha

[23:35:53.0663] <iain>
If you try `function foo(a,b) { return a + b + bar(); }`, then there will be a resume point after the call

[23:36:17.0562] <iain>
And it should match up with the state of the stack next to the `Call` opcode

[23:37:00.0766] <18f>
> <@iain:mozilla.org> And it should match up with the state of the stack next to the `Call` opcode

To be honest, this is not easy to understand ,I will spend some time understanding this.

[23:37:09.0148] <18f>
And another this I think....

[23:37:19.0256] <18f>
> <@iain:mozilla.org> PS: You asked about effectful instructions: https://searchfox.org/mozilla-central/source/js/src/jit/MIR.h#865-872

Here

[23:37:32.0572] <iain>
Yes, this is one of the most complicated parts of the engine

[23:37:35.0488] <18f>
I think sometimes will failed?

[23:37:43.0498] <18f>
like this

[23:38:30.0911] <18f>
Lsh seems is side-effect

[23:38:50.0340] <18f>
But I read the MIR code, found it's GetAliasSet is none.

[23:39:07.0658] <iain>
No, `lsh` is left-shift

[23:39:42.0969] <iain>
The operands to the resume point aren't side effects

[23:40:19.0233] <iain>
If an instruction has a side effect, then there will be a resume point immediately following that instruction

[23:40:34.0610] <iain>
And it will capture some set of values

[23:41:00.0107] <iain>
 * And it will have some values as operands

[23:41:05.0582] <iain>
Which you can see in the ionlog

[23:41:14.0862] <iain>
But those operands don't have to have side effects

[23:41:44.0029] <iain>
A side effect is something like "o.x = 1", where we are changing the value of a property

[23:42:07.0853] <iain>
Or `console.log("I am a side effect")`

[23:43:05.0178] <18f>
> <@iain:mozilla.org> And it will have some values as operands

Yeah

[23:43:18.0898] <18f>
I think lhs is no-side-effect too

[23:43:29.0196] <18f>
But originally, I think

[23:43:49.0444] <18f>
If a instruction in resumepoint, It means it is side-effect.

[23:43:57.0080] <18f>
But absolutely I am wrong

[23:45:03.0315] <18f>
With your explain, If a is side effect, we  will push it to resume point, and with some case, we will push it's operand in resume point, I guess like this...

[23:45:17.0115] <18f>
and It's operand maybe not side-effect...

[23:45:45.0857] <18f>
> <@18f:mozilla.org> With your explain, If a is side effect, we  will push it to resume point, and with some case, we will push it's operand in resume point, I guess like this...

Here is "A", means a side-effect instruction.

[23:45:52.0475] <iain>
Here's an example:
```
function bar() {
    return 1;
}

function foo(a,b) {
    return a + b + bar();
}

for (var i = 0; i < 100; i++) {
    foo(i,i)
}
```
If you compile this with `--fast-warmup --ion-inlining=off --ion-offthread-compile=off`, then you will see a resume point after the call

[23:46:40.0209] <iain>
 * Here's an example:
```
function bar() {
    return 1;
}

function foo(a,b) {
    return a + b + bar();
}

for (var i = 0; i < 100; i++) {
    foo(i,i)
}
```

If you compile this with `IONFLAGS=logs` and `--fast-warmup --ion-inlining=off --ion-offthread-compile=off`, then you will see a resume point after the call to `bar` in `foo`

[23:47:00.0824] <iain>
`resumepoint 20 8 2 1 0 3 3`

[23:47:31.0303] <iain>
We have `20 call`, which means that the result of the call is on top of the stack

[23:47:51.0972] <iain>
And `8 add`, which means that the result of `a + b` is also still on the stack

[23:48:09.0521] <iain>
Which is what you can see in the output of `dis`

[23:48:28.0207] <iain>
`00017:  Call 0                          # (a + b) bar()`

[23:49:14.0513] <iain>
And then after that, 2, 1, and 0 are parameter 1 (b), parameter 0 (a), and the `this` parameter

[23:50:49.0957] <iain>
 * We have `call20`, which means that the result of the call is on top of the stack

[23:50:57.0717] <iain>
 * And `add8`, which means that the result of `a + b` is also still on the stack

[23:51:44.0964] <iain>
(And the other two slots are the environment chain and the `arguments` object, which you can ignore for now)

[23:53:01.0123] <18f>
sry, I just think it now.

[23:53:10.0933] <18f>
wait me a minute

[23:54:01.0177] <18f>
oh

[23:54:04.0268] <18f>
I know!

[23:56:04.0704] <18f>
Let me give my conclusion...

[23:56:18.0426] <18f>
hope this time I am not wrong.

[23:56:26.0367] <18f>
For resume execute on baseline

[23:56:30.0818] <18f>
(bailout)

[23:56:56.0648] <18f>
spidermonkey use resume point to recover the value

[23:56:59.0951] <18f>
which value is we need .

[23:57:17.0046] <18f>
> <@18f:mozilla.org> which value is we need .

We could see this by dis(func)

[23:58:00.0948] <18f>
basicaly, we need recover locals, call, argument, this... and etc(maybe Another this)

[23:58:26.0974] <18f>
> <@18f:mozilla.org> basicaly, we need recover locals, call, argument, this... and etc(maybe Another this)

This part we could put some instruction on resume point. which maybe not side-effect.

[23:58:53.0717] <18f>
The another part is side-effect part, becuase If we don't put is to resume point, it will execute twice...

[23:59:35.0811] <18f>
> <@18f:mozilla.org> The another part is side-effect part, becuase If we don't put is to resume point, it will execute twice...

I guess here I am wrong. let me express it more in details.

[00:00:06.0157] <iain>
Yes. The first half of what you said is correct, and it explains what the operands to the resume point must be

[00:00:46.0677] <iain>
The second half is: where do we insert resume points? And the answer is: after instructions that have side effects, and at the beginning of basic blocks.

[00:00:59.0287] <18f>
> <@iain:mozilla.org> The second half is: where do we insert resume points? And the answer is: after instructions that have side effects, and at the beginning of basic blocks.

Yes

[00:01:08.0014] <18f>
I just want to express this.

[00:01:17.0649] <18f>
because I think this is becuase

[00:01:41.0396] <18f>
We just need to insert a resumepoint to a location which maybe will be bailout.

[00:01:58.0887] <18f>
> <@18f:mozilla.org> We just need to insert a resumepoint to a location which maybe will be bailout.

But I  just think about this is right or not...

[00:02:33.0300] <iain>
Not exactly. Instructions that don't have resume points can still bail out.

[00:02:40.0841] <iain>
If they do, we use the most recent resume point

[00:03:13.0726] <iain>
It's like we rewind back to the last side effect

[00:03:24.0216] <iain>
And recreate the baseline frame

[00:03:32.0552] <iain>
And execute the code again

[00:03:38.0960] <18f>
I express it unclear.

[00:04:05.0407] <18f>
use |block| not single |instruction|

[00:04:18.0102] <18f>
> <@18f:mozilla.org> use |block| not single |instruction|

Here is still wrong...

[00:05:00.0189] <18f>
Becuase I don't know can we insert a resume point at the middle of the block!

[00:05:27.0727] <iain>
Yes, there can be a resume point in the middle of the block

[00:06:19.0001] <18f>
> <@iain:mozilla.org> If they do, we use the most recent resume point

personnaly, I think I know what u means, But I can't express it clearly.

[00:06:47.0858] <iain>
Here, we have a resume point after a call

[00:07:07.0778] <iain>
The unbox and the add can both bail out

[00:07:18.0731] <iain>
The unbox will bail out if the value returned from the call is not an int32

[00:07:35.0956] <iain>
The add will bail out if the result overflows int32

[00:07:55.0362] <iain>
If either of those instructions bail out, then we need to resume in baseline

[00:07:58.0604] <18f>
cool

[00:08:19.0872] <iain>
So we will take the latest resume point, which is the one after the call

[00:08:46.0561] <iain>
It says that the top value on the stack is the result of the call, and so on

[00:09:14.0088] <iain>
This is all encoded in a snapshot

[00:09:50.0547] <iain>
We will use the snapshot to create a baseline frame

[00:10:17.0905] <iain>
And then we will start executing in baseline, right after the call

[00:10:54.0924] <iain>
(Technically we resume in the baseline interpreter, but it doesn't matter for this conversation.)

[00:11:21.0230] <18f>
right! I know!

[00:11:21.0878] <18f>
we reexecute add in baseline 

[00:11:22.0667] <18f>
use the value which is recovered from ION(resumepoint). 

[00:12:20.0687] <18f>
> <@iain:mozilla.org> Here's an example:
> ```
> function bar() {
>     return 1;
> }
> 
> function foo(a,b) {
>     return a + b + bar();
> }
> 
> for (var i = 0; i < 100; i++) {
>     foo(i,i)
> }
> ```
> 
> If you compile this with `IONFLAGS=logs` and `--fast-warmup --ion-inlining=off --ion-offthread-compile=off`, then you will see a resume point after the call to `bar` in `foo`

By the way, --ion-inlining=off == with({}){}; ?

[00:13:03.0800] <iain>
`with ({}) {}` is an ancient JS feature: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with

[00:13:10.0339] <18f>
I always use with({}){} to compile a js file, even if I don't know why...

[00:13:15.0160] <iain>
Nobody uses it, so we don't support it in Ion

[00:13:45.0291] <iain>
 * Nobody uses it, so we don't support it in Ion/Warp

[00:14:27.0948] <iain>
So if you want to prevent a function from being inlined, you can add `with` to stop it from being compiled

[00:14:51.0045] <iain>
`--ion-inlining=off` turns off inlining completely

[00:15:06.0677] <18f>
> <@iain:mozilla.org> Nobody uses it, so we don't support it in Ion/Warp

cool

[00:15:15.0142] <18f>
Thank u very much!

[00:15:28.0863] <18f>
I learn more thing which I orginally need.

[00:15:33.0679] <18f>
hhhhhh

[00:15:48.0091] <18f>
It's interesting.

[00:16:48.0729] <iain>
Of all the parts of the compiler that I've worked with, this is probably the most complicated

[00:17:25.0365] <18f>
> <@iain:mozilla.org> Of all the parts of the compiler that I've worked with, this is probably the most complicated

can't agree with more...

[00:17:37.0274] <iain>
You are learning it very quickly!

[00:18:26.0145] <18f>
> <@iain:mozilla.org> You are learning it very quickly!

Thank u 

[00:18:32.0875] <18f>
I think u have a skill

[00:18:45.0306] <18f>
explain something clear

[00:19:02.0129] <18f>
It's awesome. feel good about this.

[00:19:20.0126] <iain>
I try! It is the best way to make sure that I understand something.

[00:20:03.0465] <iain>
Okay. It is time for me to sleep now.

[00:20:07.0235] <iain>
Good night!

[00:21:00.0653] <18f>
good night, have a good sleep!

[05:46:47.0128] <dbezhetskov>
Hi SpiderMonkey hackers! I were adding a new target for SM https://phabricator.services.mozilla.com/D110067, nothing special, just a few constants and if's, and suddenly I discovered that `./mach bootstrap` (for x64 arch not wasi) with my changes was broken because it couldn't download `linux64-minidump-stackwalk`

[05:47:58.0522] <dbezhetskov>
I've investigated into this and found that the address of minidump_stackwalk for master is `gecko.cache.level-3.toolchains.v3.linux64-minidump-stackwalk.hash.08627fb60f691ed71ed4fa9e9a5c1c0976c32d8b468d84f9a9ae56afa8e13cc8` 

[05:48:24.0184] <dbezhetskov>
and with my changes it becomes - `gecko.cache.level-3.toolchains.v3.linux64-minidump-stackwalk.hash.2cf57c2ad39daae448693cf76ae0679a46c1458018db33a397e7295d6846817e`

[05:49:23.0514] <dbezhetskov>
the hashes are different and this is mysterious a little bit for me

[05:53:38.0351] <dbezhetskov>
all codes for my custom architecture isn't satisfied but hashes already are different, maybe someone has a clue why is it like that?

[05:53:56.0370] <dbezhetskov>
 * all conditions for my custom architecture isn't satisfied but hashes are already  different, maybe someone has a clue why is it like that?

[05:54:01.0494] <dbezhetskov>
 * all conditions for my custom architecture isn't satisfied but hashes are already different, maybe someone has a clue why is it like that?

[05:58:32.0503] <tcampbell>
that is very strange..

[06:01:18.0393] <dbezhetskov>
node and fix stack downloading properly

[06:01:23.0481] <dbezhetskov>
 * node and fix_stack downloading properly

[06:01:25.0756] <tcampbell>
I see the same error

[06:01:38.0915] <dbezhetskov>
 * node and fix_stack downloaded properly

[06:01:53.0838] <tcampbell>
I wonder if we need the build team to trigger a toolchain update there

[06:02:06.0975] <dbezhetskov>
I see the bug about the same issue - https://bugzilla.mozilla.org/show_bug.cgi?id=1636797

[06:02:38.0336] <tcampbell>
I see a detailed errror:
```
 0:01.59 ERROR!!!!!! Could not find artifacts for a toolchain build named `linux64-minidump-stackwalk`. Local commits, dirty/stale files, and other changes in your checkout may cause this error. Make sure you are on a fresh, current checkout of mozilla-central. Beware that commands like `mach bootstrap` and `mach artifact` are unlikely to work on any versions of the code besides recent revisions of mozilla-central.
 0:01.92 Hint: consider reverting your local changes to the following files: ['build/moz.configure/init.configure', 'build/moz.configure/toolchain.configure', 'js/src/old-configure.in', 'mfbt/double-conversion/double-conversion/utils.h', 'python/mozbuild/mozbuild/configure/constants.py']
```

[06:02:53.0261] <dbezhetskov>
I expect that hash should stay unchanged 

[06:03:44.0362] <dbezhetskov>
> <@tcampbell:mozilla.org> I see a detailed errror:
> ```
>  0:01.59 ERROR!!!!!! Could not find artifacts for a toolchain build named `linux64-minidump-stackwalk`. Local commits, dirty/stale files, and other changes in your checkout may cause this error. Make sure you are on a fresh, current checkout of mozilla-central. Beware that commands like `mach bootstrap` and `mach artifact` are unlikely to work on any versions of the code besides recent revisions of mozilla-central.
>  0:01.92 Hint: consider reverting your local changes to the following files: ['build/moz.configure/init.configure', 'build/moz.configure/toolchain.configure', 'js/src/old-configure.in', 'mfbt/double-conversion/double-conversion/utils.h', 'python/mozbuild/mozbuild/configure/constants.py']
> ```

yep, thanks for the reproduction

[06:04:39.0406] <tcampbell>
I think it is hashing specific source files because they are used when building the minidump-stackwalk package

[06:06:49.0455] <tcampbell>
/me will ask in #developers:mozilla.org 

[06:09:13.0295] <tcampbell>
(we probably also need a build-peer as a reviewer eventually)

[07:02:24.0827] <dbezhetskov>
> * <@tcampbell:mozilla.org> will ask in #developers:mozilla.org

great thanks!

[13:01:53.0822] <tcampbell>
*sigh* CPU bugs are the worst

[13:02:55.0562] <tcampbell>
even more so when they break XPCOM dark magic

[13:03:05.0124] <tcampbell>
https://bugzilla.mozilla.org/show_bug.cgi?id=1702019

[13:32:50.0207] <tcampbell>
weird.. chrome also got a spike recently. I wonder if intel broke some microcode update..

[13:37:06.0455] <sfink>
iain: ping

[13:51:00.0614] <mehaboob_shariff>
hello everyone

[13:51:14.0686] <mehaboob_shariff>
is this chatroom for the spidermonkey part in outreachy

[13:54:35.0040] <mgaudet>
This is indeed the Spidermonkey chat room

[13:54:36.0689] <mgaudet>
Welcome :) 

[14:01:50.0856] <mehaboob_shariff>
can you suggest if I finish compiling spidermonkey because I might have joined late compared to others and there is a lot I missed I guess

[14:02:19.0994] <mgaudet>
mehaboob_shariff: you've not joined late at all

[14:02:42.0450] <mgaudet>
The contribution period is open all the way till April 30th, so don't feel rushed. 

[14:08:28.0685] <mehaboob_shariff>
okay :)

[14:10:33.0214] <mgaudet>
confession: Landed Jason's patch stack for Private Method storage after some very patient review from arai (Thank you!) 

[14:10:35.0034] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[15:00:24.0610] <tcampbell>
The Windows KB4589212 update (from this month) talks about rolling back microcode for this processor =\


2021-03-31
[23:36:26.0893] <jandem>
/me is really glad we're moving away from mailman. This js-internals list receives so much spam; it then sends emails every day to nag about moderating these messages...

[00:59:56.0711] <18f>
Hey, I want to know this?

[01:01:50.0161] <18f>
original case is: If I have tow point. "let p0 = {}; p0.x = 0x4141; p1 = 0x4242; let p1 = {}; p1.y = 0x4343; p1.x = 0x4444;"

[01:02:11.0566] <18f>
I think I should got two shape? right? one shape has been deprecated?

[01:10:51.0796] <yulia>
erm i might not fully understand the question or the answer. But i think what is going on is you have two distinct shapes. Shapes are lists, and which variable is instantiated first matters. the first list will have () <- x, the second will be () <- y <- x. the first list will not be deprecated, it will simply be different than the second one due to the ordering

[01:11:06.0127] <yulia>
this is why in js, when you instantiate objects with the same fields, you always want to do them in the same order

[01:11:42.0076] <yulia>
i am not too confident because i haven't worked with our shapes implementation, i just know the idea behind it

[01:11:43.0173] <18f>
Yes

[01:11:49.0156] <18f>
I know I am wrong.

[01:11:58.0231] <18f>
I forgot when we got shape

[01:12:13.0810] <18f>
always use "lastproperty"

[01:12:50.0914] <18f>
which part I am wrong... But now I realize this...

[01:13:55.0333] <18f>
Originally, I forgot this part, It should be called transition tree. I think it point to the header.

[01:14:17.0260] <18f>
so I don't know at the join point, how can we decide go to where...

[01:14:28.0438] <18f>
But now I know this...

[01:44:54.0280] <yulia>
I am about to turn top level await on by default.. there is quite a bit of backing code for having the two versions

[01:45:07.0364] <yulia>
should i just turn the pref on by default, wait a month, then remove the backing code?

[01:45:16.0531] <yulia>
or remove the backing code right away?

[01:45:39.0019] <yulia>
 * I am about to turn top level await on by default and let it ride the trains.. there is quite a bit of backing code for having the two versions

[01:57:28.0419] <jandem>
maybe wait three weeks until Nightly 90 in case something blows up on release

[01:57:37.0499] <yulia>
ok

[01:57:52.0305] <yulia>
so, just flipping the pref for now

[02:00:21.0033] <jandem>
exciting we're shipping this

[02:57:24.0561] <mehaboob_shariff>
mgaudet: I am following the instructions given in the doc

[02:58:24.0289] <mehaboob_shariff>
and for building firefox it suggested to leave the default directory but can I change the directory 

[03:01:04.0835] <yulia>
which directory are you changing ? mozilla-central?

[03:03:57.0121] <mehaboob_shariff>
 local directory for building firefox on windows

[03:09:49.0578] <arai>
do you mean `MOZ_OBJDIR` ?

[03:10:25.0286] <arai>
if so, you can change it by adding `mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/obj-....` line to mozconfig

[03:30:30.0676] <nbp>
emilio: making early

[03:30:34.0280] <nbp>
press on enter?

[03:33:22.0432] <emilio>
nbp: hmm, form restoration working too well :-)

[03:33:35.0781] <emilio>
nbp: (I didn't mean to write any comment hah)

[03:33:53.0438] <emilio>
I probably half-wrote that yesterday and then saw you already asked for crash reports

[03:55:15.0880] <evilpie>
yulia: congrats!

[03:57:54.0214] <evilpie>
I think that feature deserves an intent to ship

[04:05:41.0745] <yulia>
yes, was just sending it out

[05:40:45.0183] <padenot>
Hi all, I'm seeing https://searchfox.org/mozilla-central/source/js/xpconnect/src/nsXPConnect.cpp#1043-1056 (` DumpCompleteHeap`) calls in a profile (a native windows profile, not a Firefox profile). This doesn't make sense and mean the symbol resolution is off, right ?

[05:40:57.0390] <padenot>
as in, it's not called by anybody, it seems like

[05:41:10.0704] <padenot>
https://bugzilla.mozilla.org/show_bug.cgi?id=1616184#c26 is the context

[05:44:57.0503] <jandem>
yes that stack doesn't make sense

[08:43:27.0993] <iain>
padenot: I think I've seen a similar issue before. If you look at the offset on your symbols, many of them have ridiculous offsets like `0x5b67c`, which presumably means that the actual function doesn't have symbol information available, so the stack walker just kept looking backwards until it found *something*

[08:45:13.0331] <iain>
For example, I guarantee we did not generate 375K of code for [RegExpBytecodeGenerator::length](https://searchfox.org/mozilla-central/source/js/src/irregexp/imported/regexp-bytecode-generator.cc#389)

[08:46:44.0820] <padenot>
heh

[08:47:24.0962] <padenot>
I've ran the same program on my windows box, and the symbols are completely off. Also the Firefox profiler unfortunately can't profile all threads (but has good symbols)

[08:47:35.0438] <padenot>
so I'm trying to find a way to diagnose this

[08:48:26.0091] <padenot>
thanks for confirming though, really surprising at first sight

[09:50:11.0980] <tcampbell>
I sent a question to our [discourse](https://discourse.mozilla.org/c/spidermonkey/551) to see if any of our embedders want to tell us where they are using it. Partly out of idle curiousity, partly to make the discourse less empty as we discontinue the old mailing list this weekend.

[10:06:12.0789] <sfink>
though the survey answers almost want to be a wiki. I'd be tempted to add in linking difficulties to your complaint.

[10:08:09.0520] <tcampbell>
yeah, I think wiki-fy it at some point for sure

[10:08:52.0592] <tcampbell>
linking is good point

[10:10:21.0323] <tcampbell>
okay, will try wiki-mode

[10:29:35.0997] <nbp>
tcampbell: un autre sondage à faire est: Which version of SpiderMonkey are you using?

[10:29:44.0043] <nbp>
 * tcampbell: uanother poll would be: Which version of SpiderMonkey are you using?

[10:29:49.0443] <nbp>
 * tcampbell: another poll would be: Which version of SpiderMonkey are you using?

[10:30:11.0993] <nbp>
 * <del>tcampbell: another poll would be: Which version of SpiderMonkey are you using?</del> Already asked!

[10:32:53.0346] <nbp>
Whoa … I did not recall gdb taking multiple minutes to load symbols for Firefox …

[10:33:23.0653] <tcampbell>
I think our symbol files are 1-2GB these days

[10:33:45.0469] <tcampbell>
It is slow, but usually not minutes for me

[10:34:07.0347] <nbp>
this might also be caused by the fact that I always compile with `--enable-debug-symbols=-ggdb3`

[10:34:17.0949] <tcampbell>
ah, that would do it

[11:05:31.0535] <tcampbell>
I'm going to break the `spidermonkey.dev` website for a few hours. Trying to work with netops on getting rid of the redirect url

[12:40:49.0019] <wes>
@tca

[12:41:10.0309] <wes>
 * tcampbell: does that there are actually spidermonkey embedders these days?  Once upon a time, I was pretty sure I was the last one.

[12:42:33.0345] <tcampbell>
wes: Gnome continues to use spidermonkey for scripting widgets; 0.AD game project uses spidermonkey; there are at least two corporate project that I'm aware of

[12:43:02.0930] <tcampbell>
wes: How do you use spidermonkey? I've seen your name around but I'm not sure I knew the proejct

[12:43:22.0647] <wes>
@tcamp

[12:44:30.0829] <tcampbell>
also, one or both of couchdb and mongodb have used spidermonkey at some point (and maybe one still does?)

[12:46:35.0898] <evilpie>
we recently looked at https://github.com/apache/couchdb/pull/3421

[12:47:23.0841] <wes>
 * tcampbell: My old project is https://github.com/wesgarland/gpsee -- a precursor to NodeJS, it's a SSJS / CommonJS environment geared to the same types of workload as Perl, Shell and friends.  It has an FFI that is more capable than js-ctypes, and exposes the entirety of the SUSv3 (POSIX) specification to script -- portably for any UNIX<tm> on any architecture.  I've implemented a few major projects in GPSEE now, but got left behind because I couldn't keep up with the JSAPI changes around the time fatvals landed.  I'm currently using (and hating) NodeJS for my day-to-day work.  My current company does distributed computing in JavaScript; I am looking at building a SpiderMonkey-based sandbox.  We are currently embedding v8, and our v8 embedding has a NAPI layer that is capable of running Google's WebGPU backend.

[12:47:33.0122] <wes>
@tcam

[12:49:13.0290] <wes>
Jeez I gotta remember this isn't slack. (see my message way up there)
tcampbell Last I looked (long time ago) Couch had moved away from JSAPI but I've heard rumours they were coming back. I helped (via #jsapi irc) them sort out their embedding the first time around.  I completely forgot about the GNome project.    There also used to be YellowPages running JS 1.6 ... dunno if that's still the case or not, Brendan mentioned it to me a long time ago but I've forgotten the details. 

[12:49:52.0618] <tcampbell>
hah, wow

[12:49:53.0821] <wes>
janl - that's the guy I helped with couch IIRC.  (ca 2012 ... oh man the calendar is merciless)

[12:50:18.0333] <evilpie>
Bloomberg, not sure if they ever updated

[12:51:09.0864] <ewlsh>
Mongo uses it and the entire GNOME desktop frontend is based on it as well as many applications ☺️

[12:51:27.0899] <tcampbell>
I've got to give a lot of credit to ptomato these days for putting together examples with me (https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples ) and continue to write the upgrade guides: https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/docs/Migration%20Guide.md

[12:51:31.0269] <ewlsh>
Also cinnamon on Linux Mint

[12:52:06.0339] <wes>
This is fantastic!!!! I'm so excited to hear that it is coming around again. 

[12:52:54.0257] <wes>
And those docs are, wow, like so much better than the stuff that was available in 2007 when I started.  And I've been AFK long enough now that I suspect I'll be starting from scratch in some regards.

[12:53:08.0741] <wes>
ptomato++

[12:53:11.0926] <wes>
tcampbell++

[12:53:15.0854] <wes>
I guess that doesn't work anymore

[12:53:34.0450] <tcampbell>
good question. I don't know what bot features got ported over

[12:53:39.0229] <tcampbell>
 * good question. I don't know what bot features got ported over from IRC

[12:54:53.0173] <wes>
As long as you ported gavin... lol

[12:55:52.0753] <ewlsh>
I would hazard a guess GNOME is one of the most complicated use cases, though the DBs are probably close and larger in scale.

This is all built on SM -

https://github.com/GNOME/gnome-shell

With...

https://github.com/GNOME/gjs

[12:55:57.0362] <tcampbell>
That might be before my time..

[12:56:02.0132] <tcampbell>
I only know mrgiggles

[12:56:17.0639] <tcampbell>
 * gavin.. that might be before my time..

[12:56:53.0018] <tcampbell>
ewlsh: oh that is neat! I hadn't realized how extensively used gjs was

[12:58:08.0224] <ewlsh>
It's the basis of both Ubuntu and Fedora's default desktops so yeah 😅 if you use Linux and aren't using KDE odds are you're using spidermonkey constantly

[13:00:36.0523] <wes>
tcampbell: once upon a time, Gavin Sharp never slept and fixed everything @moz basically immediately. The running joke was that he wasn't human, but was in fact a bot. http://quotes.burntelectrons.org/5533

[13:01:23.0236] <tcampbell>
ewlsh: I had mistakenly thought it was only used for option widgets like calendars or weather.. oops

[13:02:29.0727] <ewlsh>
tcampbell: the UI framework is written in C, but all the frontend logic is in JS

Our Weather and eBook Reader apps among others are also written in JS though

[13:03:22.0425] <tcampbell>
cool

[13:03:53.0965] <ewlsh>
And we just finished our ESM implementation 😏

[13:05:47.0479] <tcampbell>
Sweet. We are going to be looking at our ESM functionality a bit in the next few months, so feel free to point out difficulties

[13:06:02.0758] <chaircrusher>
hey all

[13:07:32.0737] <chaircrusher>
have to ask a dumb question: If JS_CompileScript returns 0, how do you get more information about why the compile failed?

[13:07:50.0092] <chaircrusher>
and to make matters worse I'm stuck on 1.8.5

[13:08:42.0008] <chaircrusher>
for this project

[13:09:39.0041] <wes>
ewlsh: are they using custom builds or using OS packages?  I was the release manager for mozjs185 and jeepers creepers did we ever have a hard time trying to figure out a way of getting os vendors to cooperate due to ABI stability wishes.

[13:09:56.0439] <wes>
chaircrusher: you need an error reporter

[13:10:05.0179] <chaircrusher>
I have an error reporter

[13:10:10.0018] <chaircrusher>
it's not getting tripped

[13:10:27.0682] <chaircrusher>
It's 1.8.5 we build from source.

[13:10:44.0882] <chaircrusher>
an upgrade to a modern version is in the works but, not yet

[13:10:47.0096] <tcampbell>
wes: gnome has been maintaining the ospackage ;)

[13:10:51.0705] <tcampbell>
 * wes: gnome has been maintaining the os package ;)

[13:11:16.0475] <iain>
chaircrusher: Have you seen https://searchfox.org/mozilla-central/source/js/src/jsapi.cpp#4873

[13:11:39.0381] <tcampbell>
 * wes: gnome has been maintaining the os package ;) (this might be an oversimplification..)

[13:12:27.0643] <ptomato>
wes: now that mozjs libraries and pkgconfig files have different API/sonames for each release, the ABI stability is not really a problem for OS vendors anymore

[13:14:41.0574] <wes>
ptomato: Thank God. That was a major barrier to adoption. The OS vendors' to have JavaScript version numbers line up with semver ABI was an irreconcilable difference.

[13:14:59.0293] <evilpie>
fun fact. 1.8.5 was released almost exactly 10 years ago (~ -9 days)

[13:15:16.0573] <ewlsh>
I have js52, js60, js68, js78, and js89a all installed at once ☺️

[13:15:41.0909] <ptomato>
yes, it was the parallel installability that was the issue more than semver

[13:16:39.0174] <wes>
chaircrusher: reviewing my old code, https://github.com/wesgarland/gpsee/blob/master/gpsee_compile.cpp#L301

Compilation failure returns NULL .......... I don't see any extra handling in there, but I *know* I got compilation errors in my product. I also supported strict mode errors. This implies that my error reporter was firing in this case.


[13:17:51.0672] <wes>
ptomato: once upon a time.... -DJS_DEBUG even introduced ABI incompatibilites 😖

[13:18:03.0975] <ptomato>
it still does, sadly

[13:18:19.0845] <ptomato>
well no, JS_DEBUG was fixed, but -DDEBUG still does

[13:18:50.0769] <wes>
evilpie: WOW, ten years. That was such an important release. Glad to see you're still here, Tom.

[13:19:03.0845] <wes>
@ptomato

[13:19:26.0759] <wes>
 * ptomato: YIKES. That's a real problem for embedders IMO.

[13:25:20.0431] <ptomato>
we have stuff like https://gitlab.gnome.org/GNOME/gjs/-/blob/master/meson.build#L210-225 to guard against it, but yes, it is

[13:41:44.0193] <ewlsh>
tcampbell: 78 fixed most of the issues in 68 with embedding modules, though we have a fairly limited API for them. I'd say the biggest thing for us would be synthetic module support, I don't know how y'all plan to implement JSON modules and such.

[13:47:41.0650] <ewlsh>
wes: I use Arch's packaged versions of mozjs except for alpha versions and I also maintain installs in different prefixes for the current development versions.

[13:48:03.0657] <ewlsh>
Though Arch dropped 52/60/68 so I continue using them as orphaned local packages

[13:52:20.0287] <tcampbell>
Synthetic modules will _eventually_ be needed for WASM modules, but I don't think that spec is ready yet. We'll keep it in mind though

[13:52:41.0513] <chaircrusher>
ok I'm getting no joy

[13:54:25.0250] <chaircrusher>
the JSErrorReport object has jschar *ucmessage.  I need to encode it to utf8, but JSEncodeCharacters seems to think I know the length of the message.
How do I get the length of the error message?  I've spent a 1/2 hour reading jsapi.h with no joy.

[13:54:52.0814] <tcampbell>
strlen probably?

[13:55:35.0337] <chaircrusher>
jschar * is pointer to 16 bit characters

[13:56:44.0990] <tcampbell>
Today we seem to have https://searchfox.org/mozilla-central/rev/a1e81094c7c6dc5e39143caeb39cc46f36980d3e/js/public/ErrorReport.h#225 for the length on the error report

[13:57:23.0322] <evilpie>
chaircrusher: looks like it's null-terminated as well

[13:57:33.0304] <iain>
tcampbell: I think that's the source line, not the error message

[13:57:38.0557] <evilpie>
https://github.com/dtebbs/spidermonkey-1.8.5/blob/cb4c9f52edf8eb54d82790c2908597ba4696f962/js/src/jsstr.cpp#L3964

[13:57:46.0870] <evilpie>
https://github.com/dtebbs/spidermonkey-1.8.5/blob/cb4c9f52edf8eb54d82790c2908597ba4696f962/js/src/jscntxt.cpp#L1440

[13:57:53.0939] <tcampbell>
and the code suggests the char16_t* is null terminated. (`std::string_traits<char16_t>::length(s)` is what I use today, but your types might be older..)

[13:59:06.0727] <tcampbell>
 * <del>and the code suggests the char16_t* is null terminated. (`std::string_traits<char16_t>::length(s)` is what I use today, but your types might be older..)</del>

[14:03:48.0646] <chaircrusher>
The Error Report in 1.8.5 unfortunately doesn't include the ucmessage length

[14:09:04.0500] <chaircrusher>
and everywhere in jsapi.h it uses jschar * it also passes a length with it.

[14:13:50.0531] <evilpie>
chaircrusher: try using js_strlen

[14:15:01.0580] <chaircrusher>
haha that isn't in js_api

[14:15:06.0841] <chaircrusher>
but I'll look at the source.

[14:21:28.0206] <chaircrusher>
that looks like the ticket. Thanks all!

[14:36:17.0581] <mehaboob_shariff>
> <@yulia:mozilla.org> which directory are you changing ? mozilla-central?

I followed the instructions but there is mozilla-unified instead of central. Do I continue with the build

[14:38:18.0012] <iain>
mehaboob_shariff: mozilla-unified is a larger version of the repository that contains mozilla-central plus beta and release branches

[14:39:08.0054] <iain>
It is more than you need, but it will work

[14:39:16.0249] <mehaboob_shariff>
thank you

