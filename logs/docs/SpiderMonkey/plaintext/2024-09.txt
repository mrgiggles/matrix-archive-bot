2024-09-01
[12:16:15.0777] <kbrecordzz>
Hey! I have a question about how Spidermonkey handles Javascript objects and class. I can imagine two scenarios: objects and classes are language abstraction that have nothing to do with how things are stored in hardware memory, exaggerated example of this would be that 100 objects of a class with 3 variables in it would be stored as 3 arrays of values in memory and nothing more. OR, objects and classes are stored in memory similarly to how they're described in code. Exaggerated example of this would be that the class exists somewhere in memory and its name exists in memory as a string, and the data is stored per object in memory with all overhead that comes with it. Which one of these is it?

[12:16:22.0912] <kbrecordzz>
 * Hey! I have a question about how Spidermonkey handles Javascript objects and classes. I can imagine two scenarios: objects and classes are language abstraction that have nothing to do with how things are stored in hardware memory, exaggerated example of this would be that 100 objects of a class with 3 variables in it would be stored as 3 arrays of values in memory and nothing more. OR, objects and classes are stored in memory similarly to how they're described in code. Exaggerated example of this would be that the class exists somewhere in memory and its name exists in memory as a string, and the data is stored per object in memory with all overhead that comes with it. Which one of these is it?

[12:17:37.0356] <kbrecordzz>
 * Hey! I have a question about how Spidermonkey handles Javascript objects and classes. I can imagine two scenarios: objects and classes are language abstraction that have nothing to do with how things are stored in hardware memory, exaggerated example of this would be that 100 objects of a class with 3 variables in it would be stored as 3 arrays of raw values in memory and nothing more. OR, objects and classes are stored in memory similarly to how they're described in code. Exaggerated example of this would be that the class exists somewhere in memory and its name exists in memory as a string, and the data is stored per object in memory with all overhead that comes with it. Which one of these is it?

[12:17:49.0029] <kbrecordzz>
 * Hey! I have a question about how Spidermonkey handles Javascript objects and classes. I can imagine two scenarios: objects and classes are language abstraction that have nothing to do with how things are stored in hardware memory, exaggerated example of this would be that 100 objects of a class with 3 variables in it would be stored as 3 arrays of raw values in memory and nothing more. OR, objects and classes are stored in memory similarly to how they're described in Javascript code. Exaggerated example of this would be that the class exists somewhere in memory and its name exists in memory as a string, and the data is stored per object in memory with all overhead that comes with it. Which one of these is it?

[12:18:26.0610] <kbrecordzz>
 * Hey! I have a question about how Spidermonkey handles Javascript objects and classes. I can imagine two scenarios: objects and classes are language abstraction that have nothing to do with how things are stored in hardware memory, exaggerated example of this would be that 100 objects of a class with 3 variables in it would be stored as 3 arrays of raw values in memory and nothing more. OR, objects and classes are stored in memory similarly to how they're described in Javascript code. Exaggerated example of this would be that the class exists somewhere in memory and its name exists in memory as a string (which is totally unnecessary overhead), and the data is stored per object in memory with all overhead that comes with it. Which one of these is it?

[12:19:06.0136] <kbrecordzz>
 * Hey! I have a question about how Spidermonkey handles Javascript objects and classes. I can imagine two scenarios: Objects and classes are language abstractions that have nothing to do with how things are stored in hardware memory, exaggerated example of this would be that 100 objects of a class with 3 variables in it would be stored as 3 arrays of raw values in memory and nothing more. OR, objects and classes are stored in memory similarly to how they're described in Javascript code. Exaggerated example of this would be that the class exists somewhere in memory and its name exists in memory as a string (which is totally unnecessary overhead), and the data is stored per object in memory with all overhead that comes with it. Which one of these is it?

[12:20:04.0810] <kbrecordzz>
 * Hey! I have a question about how Spidermonkey handles Javascript objects and classes. I can imagine two scenarios: Objects and classes are language abstractions that have nothing to do with how things are stored in hardware memory, exaggerated example of this would be that 100 objects of a class with 3 variables in it would be stored as 3 arrays with 100 raw values each in memory and nothing more. OR, objects and classes are stored in memory similarly to how they're described in Javascript code. Exaggerated example of this would be that the class exists somewhere in memory and its name exists in memory as a string (which is totally unnecessary overhead), and the data is stored per object in memory with all overhead that comes with it. Which one of these is it?

[12:20:41.0270] <kbrecordzz>
 * Hey! I have a question about how Spidermonkey handles Javascript objects and classes. I can imagine two scenarios: Objects and classes are language abstractions that have nothing to do with how things are stored in hardware memory, exaggerated example of this would be that 100 objects of a class with 3 variables in it would be stored as 3 arrays with 100 raw values each in memory and nothing more. OR, objects and classes are stored in memory similarly to how they're described in Javascript code. Exaggerated example of this would be that the class exists somewhere in memory and its name exists in memory as a string (which would be totally unnecessary overhead), and the data is stored per object in memory with all overhead that comes with it. Which one of these is it?

[12:53:37.0475] <iain>
Roughly speaking, objects in SpiderMonkey are three pointers: a shape pointer, a slots pointer, and an elements pointer. The representation of shapes is complicated, but roughly speaking an object's shape describes the mapping between its property names and the slots in which they are stored. The slots array contains the properties of the object with a string key. The elements array stores the integer-indexed properties (eg `obj[10]`).

[12:55:03.0717] <iain>
A class is just a normal object that is used as a prototype by another object (with some special syntax for creating it). The prototype pointer is stored in the shape.

[12:56:48.0939] <iain>
To speed up access, we often allocate objects with a trailing array of fixed slots. The first N properties on an object are stored as part of the object itself (fixed slots), and then subsequent properties are accessed via the slots pointer (dynamic slots).

[12:57:07.0386] <iain>
There are lots and lots of additional details, but that's the big picture.

[12:57:34.0470] <iain>
 * kbrecordzz: Roughly speaking, objects in SpiderMonkey are three pointers: a shape pointer, a slots pointer, and an elements pointer. The representation of shapes is complicated, but roughly speaking an object's shape describes the mapping between its property names and the slots in which they are stored. The slots array contains the properties of the object with a string key. The elements array stores the integer-indexed properties (eg `obj[10]`).


2024-09-02
[01:38:19.0198] <debadree25>
what does this [assertion](https://searchfox.org/mozilla-central/source/js/src/vm/SelfHosting.cpp#2910) imply? where can i find these canonical names?

[01:41:41.0609] <evilpie>
> <@debadree25:mozilla.org> what does this [assertion](https://searchfox.org/mozilla-central/source/js/src/vm/SelfHosting.cpp#2910) imply? where can i find these canonical names?

https://searchfox.org/mozilla-central/search?q=SetCanonicalName&path=&case=true&regexp=false

[01:45:47.0585] <debadree25>
oh! got it let me check it out thank you!!

[02:23:30.0875] <kbrecordzz>
> <@iain:mozilla.org> kbrecordzz: Roughly speaking, objects in SpiderMonkey are three pointers: a shape pointer, a slots pointer, and an elements pointer. The representation of shapes is complicated, but roughly speaking an object's shape describes the mapping between its property names and the slots in which they are stored. The slots array contains the properties of the object with a string key. The elements array stores the integer-indexed properties (eg `obj[10]`).

Thanks! In your example "obj[10]", is obj an object or a property?
So, I guess that storing things in variables or arrays is more efficient than in objects then, since the same values would be stored in less space (no "shape" needs to be stored, for example)?

[02:25:35.0631] <kbrecordzz>
> <@iain:mozilla.org> kbrecordzz: Roughly speaking, objects in SpiderMonkey are three pointers: a shape pointer, a slots pointer, and an elements pointer. The representation of shapes is complicated, but roughly speaking an object's shape describes the mapping between its property names and the slots in which they are stored. The slots array contains the properties of the object with a string key. The elements array stores the integer-indexed properties (eg `obj[10]`).

 * Thanks! In your example "obj\[10\]", is obj an object or a property?
So, from a Javascript programmer's viewpoint, I guess storing things in variables or arrays is more efficient than in objects then, since the same values could be stored in less space (no "shape" needs to be stored, for example)?

[02:27:09.0844] <kbrecordzz>
 * Thanks! In your example "obj\[10\]", is obj an object or a property?
So, from a Javascript programmer's viewpoint, I guess storing things in variables or arrays is more efficient than in objects then, since the same values could be stored in less space (no "shape" needs to be stored, for example)? And I suppose code would run faster also since the management of shapes, element pointers etc takes some time?

[02:28:00.0505] <kbrecordzz>
 * Thanks! In your example "obj\[10\]", is obj an object or a property?
So, from a Javascript programmer's viewpoint, I guess storing things in variables or arrays is more efficient than in objects then, since the same values could be stored in less space (no "shape" needs to be stored, for example)? And I suppose code would run faster too since the management of shapes, element pointers etc takes some time?

[04:06:14.0494] <jandem>
kbrecordzz: if you create many objects with the same property names, they can share the same shape so it's still pretty efficient

[04:07:37.0858] <jandem>
`obj[10]` is an example of an indexed property that can be stored in the elements array of an object

[04:09:09.0626] <jandem>
 * `obj[10]` is an example of an indexed property of `obj` that can be stored in the elements array of an object

[04:09:26.0374] <jandem>
 * `obj[10]` is an example of an indexed property of `obj` that can be stored in the elements array of the object

[04:24:47.0765] <jandem>
 * kbrecordzz: if you create many objects with the same property names, they can share the same shape so it's quite efficient

[04:26:37.0021] <jandem>
also the engine is pretty good at optimizing operations on objects/arrays. What helps is to make sure objects you create have a similar structure (same property names added in the same order) and arrays don't have "holes" in the elements (`[1, 2, , , 3]` has some holes, missing elements)


2024-09-03
[03:15:55.0977] <Tarek>
Hi folks. I am working on intergrating the newest version of the onnx runtime that runs in WASM, and it works but I have something that gets nuts in the JS JIT, eats GBs of ram and locks `about:memory` so I can't inspect. I can profile though: https://share.firefox.dev/4g6ZrQh -- seems to be a backtracking issue in `js::wasm::IonCompileFunctions` -- I have no idea how to investigate further...

[03:26:44.0371] <nbp>
The profile looks like a loop in our register allocator, would you be able to bisect if this is a recent issue?

[03:28:50.0779] <nbp>
https://searchfox.org/mozilla-central/rev/3cb31675aeffd10f1f6ae7c40e24b254da7798e5/js/src/jit/BacktrackingAllocator.cpp#3713-3723

[03:30:42.0698] <nbp>
Tarek: Do you have a link to the newwest version of the onnx runtime? Also jseward might be the best person to figure out quickly what is going wrong.

[03:36:23.0062] <Tarek>
I will try to bisect thanks. I have a patch where I move to that lib and steps to reproduce.

[03:38:11.0655] <jandem>
you could try a debug build to see if it fails any assertions

[03:43:52.0327] <Tarek>
I did run it in debug and had the same problem and no assertion happened. Just a deadlock warning when I ran about:memory report 

[03:44:10.0415] <Tarek>
I will add an issue to track all the info 

[04:21:03.0014] <jseward>
Tarek: are you sure it's really an infinite loop?  could it be just that the RA takes a long time -- it is known to do that sometimes

[04:21:15.0398] <jseward>
Anyways, if you can file a bug i'll take a look

[04:24:41.0299] <Tarek>
> <@jseward:mozilla.org> Tarek: are you sure it's really an infinite loop?  could it be just that the RA takes a long time -- it is known to do that sometimes

I don't know if it's infinite, but it was running for 5 minutes at 100% until my callback to kill the worker kicks in. 

[04:25:02.0753] <jseward>
Mhm that's ungood

[04:25:31.0991] <Tarek>
But the code still works… so I am confused 

[04:26:30.0581] <jseward>
That's probably because it got compiled by the wasm baseline compiler no problem, and runs; and you're seeing the Ion (optimised) compilation in the background

[04:27:02.0965] <Tarek>
Makes sense. Is there an option to deactivate ion ?

[04:27:38.0367] <jseward>
javascript.options.wasm_optimizingjit; set that to false

[04:28:05.0666] <Tarek>
Ok will try just curious to see what happens. Will also file the bug. Thx

[06:34:38.0986] <Tarek>
jseward: added https://bugzilla.mozilla.org/show_bug.cgi?id=1916442

[06:35:47.0245] <Tarek>
`javascript.options.wasm_optimizingjit` to `false` fixes the issue

[08:16:55.0062] <bvisness>
Within the jit-test system, how can we restrict the parallelism of certain tests? I'm particularly looking at the slew of memory64 resource exhaustion failures: https://bugzilla.mozilla.org/show_bug.cgi?id=1914577

[08:17:21.0034] <bvisness>
I think it's reasonable to run these tests sequentially, since there's not that many, and several of them will indeed want to chew up address space

[08:18:13.0137] <bvisness>
(in fact, running them on my linux machine used to cause processes to randomly die, until Julian helped me set up zram)

[08:33:38.0077] <jseward>
when you say "restrict the parallelism of certain tests", do you mean "stop the jit_tests script running some many threads in parallel at certain times" ?

[08:35:15.0559] <mgaudet|ooo-back-tuesday>
bvisness: Yes: https://searchfox.org/mozilla-central/source/js/src/tests/lib/tasks_unix.py#215 is the routine to start editing 

[08:35:15.0719] <jseward>
I wonder if we could make it so that the JS directives line at the start of each test could say "I am a big-resource test", and have the jit_tests script wait for all running test processes to terminate before starting the test

[08:35:44.0998] <mgaudet|ooo-back-tuesday>
and yeah, I think a `sequential` directive makes sense

[08:40:50.0681] <jseward>
Tarek: can you make available the .wasm file it was trying to compile at the time?  We can just profile the shell compiling it, which will be easier that dealing with the whole browser.

[08:56:56.0184] <mgaudet>
> <@mgaudet:mozilla.org> bvisness: Yes: https://searchfox.org/mozilla-central/source/js/src/tests/lib/tasks_unix.py#215 is the routine to start editing

Side note, there' a windows version of this too that will also need editing. 

On the plus side, if you can pipe things through enough, this will be shared between jstests and jit-tests. 

Probably need parsing in each harness though to set the appropriate bits on tasks -- I have most of this paged out at the moment, but if you want some help here feel free to ask because I think this is good and we should do it

[09:04:05.0893] <Tarek>
for sure

[09:06:00.0195] <Tarek>
added links to the issue

[09:49:32.0051] <mgaudet>
jandem: Once upon a time we used to only do off-thread compilation if bodies crossed a certain size threshold, but we got rid of that (as near as I can tell by the code) -- We came to the conclusion that this was too finicky and prone to main-thread jank? 

[09:55:32.0762] <jandem>
mgaudet: I don't remember that change but it sounds plausible. Even for small compilations we do quite a lot of work but it could be interesting to measure this

[09:56:18.0946] <mgaudet>
jandem: Yeah, the only predicate now is 

[09:56:20.0484] <mgaudet>
https://searchfox.org/mozilla-central/source/js/src/jit/Ion.cpp#1729-1756

[09:56:30.0803] <mgaudet>
which is whether or not it's enabled (sorry multiline accidental enter :P) 

[09:59:53.0000] <mgaudet>
Congratulations to jon4t4n for getting the JSON Modules browser integration merged. It's been a huge long road! 

[10:00:51.0468] <jandem>
 * mgaudet: I don't remember this was different before but it sounds plausible. Even for small compilations we do quite a lot of work but it could be interesting to measure this

[14:17:29.0339] <kfjvj>
Are there any code examples for the use of frontent::Stencil ?

[14:18:04.0866] <kfjvj>
Or maybe I should say the various Stencil classes


2024-09-04
[17:00:14.0976] <arai>
kfjvj: what kind of example are you looking for?  or, what are you going to use it for?

[17:20:54.0033] <arai>
given `frontend::*Stencil` are all internal classes, only the actual consumers (parser, bytecode compiler, instantiation, and XDR) are the existing examples

[01:44:14.0049] <Tarek>
jseward: thanks for your tests and insights. those wasm are produced by the onnx project, not us. stupid question: since it takes 10 minutes to compile the wasm, is it possible to provide a compiled version to our users so they don't have to do that?

[01:46:06.0710] <Tarek>
also: is it possible as a temporary fix to bypass ion for this specific wasm in case the right fix takes time to happen

[02:13:57.0385] <jseward>
Tarek: not a stupid question.  But no, we have no (simple, at least) way to pre-compile wasm

[02:14:22.0426] <jseward>
We could introduce some logic to cause it to not get Ion compiled; that's imaginable

[02:15:18.0977] <jseward>
Tarek: as a meta-point, would it be possible to keep the discussion on the bug?  That way other participants (and future ones) will be able to see the discussion

[02:16:37.0150] <jseward>
oh, I see you did

[02:22:37.0605] <mbrodesser (offline on Fridays)>
`JS_ExecuteScript` \[1\] is not annotated as `MOZ_CAN_RUN_SCRIPT`. Is that intended? \[1\] https://searchfox.org/mozilla-central/rev/82ce14a9dc278584b868b2b9c252ba0871a7782b/js/public/CompilationAndEvaluation.h#74

[02:29:52.0506] <jandem>
`MOZ_CAN_RUN_SCRIPT` is currently not used at all in SpiderMonkey. I'm not sure if that should be changed. A lot of JSAPIs can run script (through getters/setters for example)

[02:30:57.0853] <mbrodesser (offline on Fridays)>
jandem: it could help to correct callers of Gecko

[02:33:12.0989] <arai>
it might be better just tweak the clang plugin to treat all JSAPIs (`JS`/`js` namespaces and `JS_` prefix) as "can run script" by default

[02:33:52.0427] <jandem>
we've also discussed using the static hazard analysis to do something similar without having to annotate explicitly

[02:34:36.0288] <mbrodesser (offline on Fridays)>
Ok.. leaving that topic to you, was just wondering

[02:39:46.0584] <jandem>
oh wow, bugzilla now supports emoji reactions for comments

[02:47:39.0395] <mbrodesser (offline on Fridays)>
Are `javascript:someCode` executions more limited than other script executions? Wondering if `MOZ_CAN_RUN_SCRIPT` annotations makes sense there

[02:53:25.0371] <arai>
according to [the comment](https://searchfox.org/mozilla-central/source/mfbt/Attributes.h#556-561), the purpose of the annotation is to enforce the strong reference.  I don't see any notable difference between `javascript:someCode` vs others in term of it

[03:08:15.0570] <peterv>
mbrodesser (offline on Fridays): fyi, adding `MOZ_CAN_RUN_SCRIPT`-type annotations often balloons very quickly. I have WIP patches to add it to various things that can load URIs (amongst others because of `javascript:`), but they're adding a lot of annotations

[03:49:36.0572] <jseward>
Tarek: re  https://bugzilla.mozilla.org/show_bug.cgi?id=1916442#c13, did you also want instructions for building `/path/to/dist/bin/js`?  I can add those easily

[03:50:01.0408] <Tarek>
yeah for sure thanks

[03:50:20.0697] <Tarek>
I wonder how chrome deals with this

[03:50:52.0962] <Tarek>
also a bit worried if we need to wait for upstream to fix it :/

[03:53:41.0554] <jseward>
> <@tarek:mozilla.org> also a bit worried if we need to wait for upstream to fix it :/

Yes, exactly.  That's why I wanted this stuff to get written down in the bug, so others can look at it too.

[03:57:31.0528] <Tarek>
in the meantime maybe we can add a workaround to deactivate ion for those. even if it's 70% it's still better than the current state I guess

[03:57:58.0521] <jseward>
I added to the bug, build instructions.

[03:58:50.0352] <jseward>
Can you write down in the bug (if you are happy for it to be public), what sort of timelines / constraints you have for shipping this feature?  So that we have some reference point for discussion in the wasm team.

[03:58:59.0379] <jseward>
But only if you are happy for that info to be public

[03:59:48.0079] <Tarek>
yeah I will for sure. Everything is public

[04:00:52.0451] <jseward>
Also, if you get perf stats for chrome/d8 compiling it, please add those too

[06:26:30.0849] <yury>
Tarek: last time I looked into this library, there is a way to change backends, e.g. SIMD, Float32, Int8, etc. Is it available for Transformers.js lib?

[06:27:31.0147] <yury>
if this is the case, my question will be: is the issue exist for one or all backends?

[06:59:58.0685] <Tarek>
yury: float32, int8 etc is the quantization level for the model you are loading, it's unrelated to the wasm runtime. The new version now assumes simd support for all browsers, they don't provide non-simd builds anymore. Transformers.js is the JS wrapper on the top of onnx-runtime so it just uses the backend that works in your environment. For us it's JSEP or non-JSEP. So the issue is going to be the same in both cases

[07:03:43.0595] <yury>
> <@tarek:mozilla.org> yury: float32, int8 etc is the quantization level for the model you are loading, it's unrelated to the wasm runtime. The new version now assumes simd support for all browsers, they don't provide non-simd builds anymore. Transformers.js is the JS wrapper on the top of onnx-runtime so it just uses the backend that works in your environment. For us it's JSEP or non-JSEP. So the issue is going to be the same in both cases

I'm looking at https://huggingface.co/spaces/Xenova/webgpu-embedding-benchmark and it says WASM + choices of int8,fp16,fp32

[07:04:27.0122] <Tarek>
yes, so if you picjk int8, it gets the model that was quantized at int8 level, fp32: no quantization, fp16: half precision etc

[07:04:42.0573] <Tarek>
which is unrelated to the wasm runtime it runs

[07:05:25.0242] <yury>
> <@tarek:mozilla.org> yes, so if you picjk int8, it gets the model that was quantized at int8 level, fp32: no quantization, fp16: half precision etc

correct, my question is if you tried other quantization model (context is bug https://bugzilla.mozilla.org/show_bug.cgi?id=1887312)

[07:05:28.0662] <Tarek>
for example, it picks one of them here https://huggingface.co/Mozilla/distilvit/tree/main/onnx using the suffix

[07:06:58.0060] <Tarek>
I tried q8, q4, fp16 and fp32 and had the same issue for the JS stuff

[07:07:19.0895] <Tarek>
that does not occur for earlier versions (ONNX 1.14) in our current nightly

[07:07:55.0494] <Tarek>
thanks for pointing that bug though, that's interesting to know!

[07:08:50.0721] <yury>
> <@tarek:mozilla.org> that does not occur for earlier versions (ONNX 1.14) in our current nightly

that's interesting, maybe when onnx wasm is compiled it inlined too much (thus creating huge functions). I wonder if we will rebuild runtime with our options

[07:10:00.0573] <Tarek>
yeah I use the wasm they provide in their dist

[07:10:16.0502] <Tarek>
I pinged someone at microsoft to get some feedbacl

[07:10:33.0961] <yury>
You completely rebuild transformers/onnx lib yourself -- just as experiment

[07:10:54.0800] <yury>
 * Can you completely rebuild transformers/onnx lib yourself -- just as experiment

[07:13:29.0445] <Tarek>
I can try to build the onnx lib but I have no idea how to avoid agressive inlining. 

[07:14:54.0038] <yury>
> <@tarek:mozilla.org> I can try to build the onnx lib but I have no idea how to avoid agressive inlining.

it they use clang, there are options you can play with (and jseward can tell all about them :) ). clang is part of emscripten

[07:15:36.0171] <Tarek>
I think thing happen here https://github.com/microsoft/onnxruntime/blob/main/cmake/onnxruntime_webassembly.cmake

[07:18:11.0281] <mbrodesser (offline on Fridays)>
> <@pvanderbeken:mozilla.org> mbrodesser (offline on Fridays): fyi, adding `MOZ_CAN_RUN_SCRIPT`-type annotations often balloons very quickly. I have WIP patches to add it to various things that can load URIs (amongst others because of `javascript:`), but they're adding a lot of annotations

peterv: is it clear when those patches will land?

[07:33:09.0828] <mbrodesser (offline on Fridays)>
peterv: https://bugzilla.mozilla.org/show_bug.cgi?id=1745214#c3 would allow smaller steps forward.

[13:16:46.0984] <davidj361>
I'm running 
```c++
    JS::SourceText<mozilla::Utf8Unit> source;
    if (!source.init(ctx, scriptSource.c_str(), scriptSource.size(), JS::SourceOwnership::Borrowed)) {
        return nullptr;
    }
    RefPtr<JS::Stencil> stencil = JS::CompileGlobalScriptToStencil(ctx, opts, source);
```
on botched JS code like `{ asdf; }}`, it seems to be crashing mozjs. Shouldn't it at the very most just return a `nullptr`?

[13:21:28.0176] <sfink>
That's what I would expect, unless `scriptSource` or `scriptSource.c_str()` were nullptr, maybe? Do you have a crash stack?

[13:21:46.0358] <davidj361>
I'll have to check the coredump

[13:25:16.0322] <sfink>
really, I would expect `stencil` to be a nullptr `RefPtr`. Do you bool-check `if (!stencil)` after the above code?

[13:26:39.0626] <davidj361>
yes

[14:01:11.0999] <davidj361>
> <@sfink:mozilla.org> That's what I would expect, unless `scriptSource` or `scriptSource.c_str()` were nullptr, maybe? Do you have a crash stack?

found the stack trace
```
#0  0x00007f965c76048e in JSLinearString* JSLinearString::newValidLength<(js::AllowGC)1, unsigned char>(JSContext*, mozilla::UniquePtr<unsigned char [], JS::FreePolicy>, unsigned long, js::gc::InitialHeap) () from /tmp/lib/libmozjs-102.so
#1  0x00007f965c7603b2 in JSLinearString* js::NewStringCopyNDontDeflateNonStaticValidLength<(js::AllowGC)1, unsigned char>(JSContext*, unsigned char const*, unsigned long, js::gc::InitialHeap) () from /tmp/lib/libmozjs-102.so
#2  0x00007f965c762285 in js::NewStringCopyUTF8N(JSContext*, JS::UTF8Chars, js::gc::InitialHeap) () from /tmp/lib/libmozjs-102.so
#3  0x00007f965c8f5a95 in JS_NewStringCopyUTF8Z(JSContext*, JS::ConstUTF8CharsZ) () from /tmp/lib/libmozjs-102.so
#4  0x00007f965c909128 in js::ErrorToException(JSContext*, JSErrorReport*, JSErrorFormatString const* (*)(void*, unsigned int), void*)
    () from /tmp/lib/libmozjs-102.so
#5  0x00007f965c53b59d in ReportCompileErrorImpl(JSContext*, js::ErrorMetadata&&, mozilla::UniquePtr<JSErrorNotes, JS::DeletePolicy<JSErrorNotes> >, unsigned int, __va_list_tag (*) [1], js::ErrorArgumentsType) () from /tmp/lib/libmozjs-102.so
#6  0x00007f965c53b393 in js::ReportCompileErrorLatin1(JSContext*, js::ErrorMetadata&&, mozilla::UniquePtr<JSErrorNotes, JS::DeletePolicy<JSErrorNotes> >, unsigned int, __va_list_tag (*) [1]) () from /tmp/lib/libmozjs-102.so
#7  0x00007f965ca3b107 in js::frontend::ErrorReportMixin::error(unsigned int, ...) () from /tmp/lib/libmozjs-102.so
#8  0x00007f965caa7b84 in js::frontend::Parser<js::frontend::FullParseHandler, mozilla::Utf8Unit>::globalBody(js::frontend::GlobalSharedContext*) () from /tmp/lib/libmozjs-102.so
#9  0x00007f965caf3593 in ScriptCompiler<mozilla::Utf8Unit>::compile(JSContext*, js::frontend::SharedContext*) ()
   from /tmp/lib/libmozjs-102.so
#10 0x00007f965caf3024 in bool CompileGlobalScriptToStencilAndMaybeInstantiate<mozilla::Utf8Unit>(JSContext*, js::frontend::CompilationInput&, JS::SourceText<mozilla::Utf8Unit>&, js::ScopeKind, mozilla::Variant<mozilla::UniquePtr<js::frontend::ExtensibleCompilationStencil, JS::DeletePolicy<js::frontend::ExtensibleCompilationStencil> >, RefPtr<js::frontend::CompilationStencil>, js::frontend::CompilationGCOutput*>&) () from /tmp/lib/libmozjs-102.so
#11 0x00007f965cabc8e9 in js::frontend::CompileGlobalScriptToStencil(JSContext*, js::frontend::CompilationInput&, JS::SourceText<mozilla::Utf8Unit>&, js::ScopeKind) () from /tmp/lib/libmozjs-102.so
#12 0x00007f965cb52320 in JS::CompileGlobalScriptToStencil(JSContext*, JS::ReadOnlyCompileOptions const&, JS::SourceText<mozilla::Utf8Unit>&) () from /tmp/lib/libmozjs-102.so
```

[15:33:48.0293] <sfink>
is the [filename not set](https://searchfox.org/mozilla-esr102/source/js/src/jsexn.cpp#326), I wonder?

[15:54:20.0064] <davidj361>
I set it via source.init, even tried with a hardcoded "noname". it works on JS code with no syntax errors etc

[15:54:47.0711] <davidj361>
 * I set it via setFileAndLine, even tried with a hardcoded "noname". it works on JS code with no syntax errors etc

[15:54:55.0468] <davidj361>
 * I set it via `setFileAndLine`, even tried with a hardcoded "noname". it works on JS code with no syntax errors etc

[15:55:03.0120] <davidj361>
 * I set it via `setFileAndLine`, even tried with a hardcoded `"noname"`. it works on JS code with no syntax errors etc

[15:55:17.0395] <davidj361>
 * I set it via `setFileAndLine`, even tried with a hardcoded `"noname"`. stencil compilation works on JS code with no syntax errors etc

[15:55:29.0243] <davidj361>
 * I set it via `setFileAndLine`, even tried with a hardcoded `"noname"`. stencil compilation works on JS code with no syntax errors, just segfaults on badly formatted JS code

[16:03:23.0787] <davidj361>
```c++
    JS::CompileOptions opts(ctx);
    opts.setFileAndLine("noname", 1);

    JS::SourceText<mozilla::Utf8Unit> source;
    if (!source.init(ctx, scriptSource.c_str(), scriptSource.length(), JS::SourceOwnership::Borrowed)) {
        return nullptr;
    }

    RefPtr<JS::Stencil> stencil = JS::CompileGlobalScriptToStencil(ctx, opts, source);
    return stencil;
```

[16:03:31.0812] <davidj361>
 * ```c++
    JS::CompileOptions opts(ctx);
    opts.setFileAndLine("noname", 1);
    JS::SourceText<mozilla::Utf8Unit> source;
    if (!source.init(ctx, scriptSource.c_str(), scriptSource.length(), JS::SourceOwnership::Borrowed)) {
        return nullptr;
    }
    RefPtr<JS::Stencil> stencil = JS::CompileGlobalScriptToStencil(ctx, opts, source);
    return stencil;
```


2024-09-05
[20:07:01.0961] <arai>
perhaps you haven't entered any realm?

[20:07:38.0315] <davidj361>
but it works when there're no JS syntax errors?

[20:08:42.0590] <arai>
yeah, if there's no syntax error, it just creates `JS::Stencil`, which is GC-free struct.  but if there's error, it reports an error to the current global

[20:09:14.0203] <arai>
err, just to make sure, what is `ctx` ?

[20:09:22.0112] <davidj361>
`JSContext*`

[20:09:22.0292] <arai>
if it's `JSContext*`, then the above applies

[20:09:48.0649] <arai>
if you use `JS::FrontendContext*`, the error is also GC-free struct

[20:10:27.0862] <davidj361>
I see

[20:10:46.0532] <davidj361>
Thank you, I'll have to double check some things

[20:11:29.0865] <arai>
so, if you've already entered a realm, you can use the `JSContext*`-variant, so the error is immediately reported to the global.   if you're outside of realm, you can use `JS::FrontendContext*` variant, and report it to a global later by [JS::ConvertFrontendErrorsToRuntimeErrors](https://searchfox.org/mozilla-central/rev/5959ec6b84d66592a77a3e5e2d2aedc1b3e7d4c5/js/public/experimental/CompileScript.h#63)

[20:13:10.0660] <davidj361>
How would you create `JS::FrontendContext*`? Can it be on the same thread as the `JSContext*`?

[20:13:26.0637] <arai>
[JS::NewFrontendContext](https://searchfox.org/mozilla-central/rev/5959ec6b84d66592a77a3e5e2d2aedc1b3e7d4c5/js/public/experimental/CompileScript.h#32)

[20:13:50.0531] <arai>
FrontendContext-based APIs can be used on any thread

[20:14:02.0029] <davidj361>
and you can easily swap `JSContext*` with with `FrontendContext*`?

[20:14:11.0434] <davidj361>
 * and you can easily swap `JSContext*` with `FrontendContext*`?

[20:14:14.0977] <arai>
what do you mean?

[20:14:48.0666] <davidj361>
if I compiled and encoded a stencil with a `FrontendContext*`, can I then decode and run that stencil with a `JSContext*` Or extra calls are needed to transfer stuff?

[20:15:47.0944] <arai>
yeah, no transfer is necessary.  the resulting `JS::Stencil` is compatible between them

[20:50:05.0786] <davidj361>
I assume `FrontendContext*` isn't in esr102

[20:54:52.0747] <arai>
oh, that's unfortunate.  it's added in 110

[22:42:59.0959] <liam_g>
Each time I write `typeof x === "object"`, does Spidermonkey 1. allocate a new R-value string called "object" and 2. perform a string comparison? Or are these optimized away somehow?

[22:43:43.0415] <liam_g>
I know that this doesn't amount to very much, I'm mostly just asking out of cur

[22:43:50.0042] <liam_g>
 * I know that this doesn't amount to very much, I'm mostly just asking out of curiosity

[22:46:14.0576] <arai>
string is allocated only once when instantiating the script, and the string is associated with the script, and that string is pushed to the stack for each time ([JSOp::String](https://searchfox.org/mozilla-central/rev/5959ec6b84d66592a77a3e5e2d2aedc1b3e7d4c5/js/src/vm/Opcodes.h#353-360))

[22:47:09.0357] <arai>
the type strings are atomized, and the comparison is done by simple pointer comparison

[22:48:39.0776] <arai>
err, the above seems to be slightly old

[22:49:35.0646] <arai>
the comparison expression is compiled into single opcode [JSOp::TypeofEq](https://searchfox.org/mozilla-central/rev/5959ec6b84d66592a77a3e5e2d2aedc1b3e7d4c5/js/src/vm/Opcodes.h#414-426), which optimizes away the string and string comparison

[22:52:06.0896] <arai>
the `TypeofEq` is introduced from 127 ([bug 1862273](https://bugzilla.mozilla.org/show_bug.cgi?id=1862273)).  until then, the above atom comparison explanation applies

[01:10:19.0447] <smaug>
yulia | out sick: jonco yoav was asking if we have feedback to https://github.com/whatwg/html/pull/10528  (at least it needs non-chromium review)

[01:42:34.0667] <jonco>
smaug: I'll try and take a look today

[01:45:38.0450] <Tarek>
I am trying to do it with d8. I used this script:

```
let wasm = "ort-wasm-simd-threaded.wasm";
const wasmCode = read(wasm, "binary");
const wasmModule = new WebAssembly.Module(wasmCode);
print(wasmModule);
```

and ran `d8 --wasm-tier-up --liftoff testCompileWasm.js`

that returns the module instantly. I am not sure if that's how to do it though? I don't understand what would be the "equivalent" of using ion in v8

[01:58:22.0849] <Tarek>
`--wasm-tier-up` seems to be the turbo fan thing

[02:23:42.0442] <smaug>
jonco: you might understand https://bugzilla.mozilla.org/show_bug.cgi?id=1892764 Is the idea that after a minor GC we've learnt about the call site that the return value should be probably tenured?

[02:24:34.0110] <jonco>
smaug: yes, that's right

[02:26:02.0111] <smaug>
ok, and that is why it can't probably help too much with sp3, since there we try hard to not do a minorgc during a subtest run, and I guess the next time the same subtest runs, we don't have the information from the previous run

[02:27:19.0354] <jonco>
yes, because the nursery size is so large we rarely collect

[02:27:40.0531] <jonco>
with better support for pretenuring it could become viable to reduce this

[02:36:16.0276] <smaug>
but it would mean we'd still need minorGC during a subtest run... hmm, perhaps if we can store the data about previous pages using the same functions or so (like jit hints), then this could reduce need for minorGC quite dramatically 

[02:37:36.0198] <jonco>
yes, it would be interesting to store some of this data in jithints somehow

[03:45:24.0517] <liam_g>
> <@arai:mozilla.org> the comparison expression is compiled into single opcode [JSOp::TypeofEq](https://searchfox.org/mozilla-central/rev/5959ec6b84d66592a77a3e5e2d2aedc1b3e7d4c5/js/src/vm/Opcodes.h#414-426), which optimizes away the string and string comparison

Thanks for the detailed explanation. The micro-optimizer in me will sleep well tonight!

[05:14:08.0883] <debadree25>
Hello [this bytecode flag](https://searchfox.org/mozilla-central/source/js/src/vm/BytecodeFormatFlags.h#55) when should a bytecode have this flag? anytime it requires access to the env chain? context i have added [two new opcodes](https://searchfox.org/mozilla-central/source/js/src/vm/Opcodes.h#3416,3431) which use the env chain but realise i forgot to add this flag

[05:14:18.0963] <debadree25>
 * Hello [this bytecode flag](https://searchfox.org/mozilla-central/source/js/src/vm/BytecodeFormatFlags.h#55) when should a bytecode have this flag? anytime it requires access to the env chain? context: i have added [two new opcodes](https://searchfox.org/mozilla-central/source/js/src/vm/Opcodes.h#3416,3431) which use the env chain but realise i forgot to add this flag

[05:26:45.0721] <davidj361>
> <@arai:mozilla.org> perhaps you haven't entered any realm?

I believe this was 100% the problem
Why doesn't mozjs have proper error messages about this kind of stuff 😩

[05:27:14.0591] <davidj361>
the segfault without a descriptive error message destroys me

[05:27:19.0033] <davidj361>
 * segfaults without a descriptive error message destroys me

[05:28:00.0105] <arai>
are you using a debug build?  I would expect there be some assertion

[05:42:11.0264] <debadree25>
> <@debadree25:mozilla.org> Hello [this bytecode flag](https://searchfox.org/mozilla-central/source/js/src/vm/BytecodeFormatFlags.h#55) when should a bytecode have this flag? anytime it requires access to the env chain? context: i have added [two new opcodes](https://searchfox.org/mozilla-central/source/js/src/vm/Opcodes.h#3416,3431) which use the env chain but realise i forgot to add this flag

iiuc only the jit uses this info for some kind of caching [here](https://searchfox.org/mozilla-central/source/js/src/jit/JitScript.cpp#596) 

[05:54:58.0708] <arai>
jandem: ^ can you take a look?

[06:07:57.0566] <jandem>
debadree25: the WarpBuilder code for these ops uses the block's environment chain so the bytecode ops should have the flag. The code is asserting the flag is set (through `MOZ_ASSERT(usesEnvironmentChain())`) so what probably happens is that they're always used with other bytecode ops that ensure it's set?

[06:08:20.0405] <jandem>
 * debadree25: the WarpBuilder code for these ops uses the block's environment chain so the bytecode ops should have the flag. The code is asserting the flag is set (through `MOZ_ASSERT(usesEnvironmentChain())`) so what probably happens is that they're always used with other bytecode env-chain ops that ensure it's set?

[06:08:37.0111] <jandem>
 * debadree25: the WarpBuilder code for these ops uses the block's environment chain so the bytecode ops should have the flag. The code is asserting the flag is set (through `MOZ_ASSERT(usesEnvironmentChain())`) so what probably happens is that they're always used with other env-chain bytecode ops that ensure it's set?

[06:16:09.0652] <debadree25>
> <@jandem:mozilla.org> debadree25: the WarpBuilder code for these ops uses the block's environment chain so the bytecode ops should have the flag. The code is asserting the flag is set (through `MOZ_ASSERT(usesEnvironmentChain())`) so what probably happens is that they're always used with other env-chain bytecode ops that ensure it's set?

indeed PushLexicalEnv is always pushed before these so i guess that saves it!

[06:25:36.0914] <debadree25>
but i guess would be good to add the annotation in case something changes in the future

[06:27:24.0966] <jandem>
agreed

[07:04:02.0897] <yury>
Tarek: Tiering up is a little bit different between v8 and sm. I'm not sure we can compare apples and oranges here. Maybe knowing `--no-liftoff` stats vs `--liftoff --no-turbofan` might help with comparison?

[07:20:20.0922] <jonco>
Bryan Thrall [:bthrall]: the testing functions I was thinking of were addMarkObservers and getMarks: https://searchfox.org/mozilla-central/source/js/src/shell/js.cpp#9962-9979

[07:20:44.0015] <jonco>
you can use this to check whether some GC thing you expect to die has in fact died

[08:33:22.0782] <mgaudet>
jonco: Regarding your alloc site comment -- The reason I'm passing a punned `gc::Heap` is because when we do [WarpTranspilation we intentionally censor the actual alloc site](https://searchfox.org/mozilla-central/source/js/src/jit/WarpOracle.cpp#1332-1338), so I can't use a localAllocSite with a heap. Having said that... creating a default allocSite that is "tenured" another which is "default" does simplify that code a bit... though I'm not sure what that would look like in practice. 

(I'm still trying to figure out why the mismatched zones happen though) 

[08:38:54.0402] <jonco>
Yes, we already have optimizedAllocSite which we use when we need a site in optimized JIT code. This one is in the unknown state but it would be possible to have another per-zone site for use in optimized JIT code that was in the long lived state which could be used here.

[08:51:29.0273] <mgaudet>
Interesting. Ok. I'll look into that in a bit :) 

[11:00:43.0950] <debadree25>
what does JS_NUNBOX32 and JS_PUNBOX64 mean?

[11:01:02.0052] <debadree25>
just whether 32 bit or 64 bit?

[11:04:54.0940] <mccr8>
> <@debadree25:mozilla.org> just whether 32 bit or 64 bit?

nunboxing and punboxing are about how JS values are represented, though it sounds like it does coincide with the architecture. See a reply from Luke here about what the names mean. https://wingolog.org/archives/2011/05/18/value-representation-in-javascript-implementations

[11:05:24.0090] <mccr8>
That's from 2011 so I don't know how current all of the details are but presumably the basic idea is the same.

[11:06:06.0946] <debadree25>
oh i see! thanks for the article checking it out!

[11:08:04.0539] <sfink>
you can also ready the [docs in the source](https://searchfox.org/mozilla-central/source/js/public/Value.h#100-114)

[11:19:52.0265] <sfink>
 * you can also read the [docs in the source](https://searchfox.org/mozilla-central/source/js/public/Value.h#100-114)

[13:38:52.0836] <davidj361>
I'm a bit confused about encoding stenciles because when I `cat` it, I see plaintext JS and then weird encoded characters below the plaintext

[13:38:58.0173] <davidj361>
 * I'm a bit confused about encoding stencils because when I `cat` it, I see plaintext JS and then weird encoded characters below the plaintext

[13:43:56.0488] <davidj361>
 * I'm a bit confused about encoding compiled stencils because when I `cat` it, I see plaintext JS and then weird encoded characters below the plaintext

[13:44:03.0439] <davidj361>
 * I'm a bit confused about encoding compiled stencils because when I `cat` it, I see plaintext JS and then weird encoded characters below the plaintext in the output buffer.

[13:49:29.0928] <davidj361>
shouldn't plaintext not be in there?

[13:49:41.0311] <sfink>
I would assume that's the stencil, and it contains the source text. It looks like you can create a stencil in a way where you [promise you'll never need the source text](https://searchfox.org/mozilla-central/rev/f09e3f9603a08b5b51bf504846091579bc2ff531/js/src/frontend/CompilationStencil.h#1179-1182), and it won't include it.

[13:50:42.0262] <davidj361>
I see

[13:51:12.0281] <sfink>
I'm guessing it's there by default to support [toSource](https://devdoc.net/web/developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toSource.html)

[14:02:13.0333] <davidj361>
Is it possible to cache JIT compilation?

[14:08:30.0131] <sfink>
For the most part, no. The JIT compiles in various pointers. There are periodic attempts at caching various things, sometimes to skip part of parsing and/or compilation, sometimes to hint at how to JIT compile certain code (the same JS code can produce very different machine code from compilation to compilation, at least in the faster tiers). I don't know what things are currently possible. But the answer to the basic question of "can I save out JIT-compiled code and load it in to use later without recompiling?" is no.

[14:12:41.0018] <nordzilla>
Hey everyone! I asked the following [question](https://mozilla.slack.com/archives/C028P1R5X/p1725058913510629) in the [mdn Slack channel](https://mozilla.enterprise.slack.com/archives/C028P1R5X) earlier, and was told I should try asking here.

---

**Original Question**

Hey MDN folks! I had some questions about the pages for the [RegExp.prototype.dotAll](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll) and [RegExp.prototype.unicode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#description) flags.

Both pages seem to suggest that JS regex by default won't match all unicode characters.

But I've tried using the dotAll flag without the unicode flag and `.` seems to match non-BMP characters such as emojis just fine.

And I've also tried matching a basic regex without the unicode flag and it also matches non-BMP characters.

I wonder if the docs are out of date and perhaps JS changed the default behavior? Or maybe I'm misunderstanding the docs and there is room to improve the clarity here.

[14:13:23.0585] <nordzilla>
 * Hey everyone! I asked the following [question](https://mozilla.slack.com/archives/C028P1R5X/p1725058913510629) in the [mdn Slack channel](https://mozilla.enterprise.slack.com/archives/C028P1R5X) earlier, and was told I should try asking here.

---

**Original Question**

Hey MDN folks! I had some questions about the pages for the [RegExp.prototype.dotAll](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll) and [RegExp.prototype.unicode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#description) flags.

Both pages seem to suggest that JS regex by default won't match all unicode characters.

But I've tried using the dotAll flag **_without_** the unicode flag and `.` seems to match non-BMP characters such as emojis just fine.

And I've also tried matching a basic regex without the unicode flag and it also matches non-BMP characters.

I wonder if the docs are out of date and perhaps JS changed the default behavior? Or maybe I'm misunderstanding the docs and there is room to improve the clarity here.

[14:17:08.0646] <nordzilla>
 * Hey everyone! I asked the following [question](https://mozilla.slack.com/archives/C028P1R5X/p1725058913510629) in the [mdn Slack channel](https://mozilla.enterprise.slack.com/archives/C028P1R5X) earlier, and was told I should try asking here.

---

**Original Question**

Hey MDN folks! I had some questions about the pages for the [RegExp.prototype.dotAll](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll) and [RegExp.prototype.unicode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#description) flags.

Both pages seem to suggest that JS regex by default won't match all unicode characters.

But I've tried using the dotAll flag **_without_** the unicode flag and `.` seems to match non-BMP characters such as emojis just fine.

And I've also tried matching a basic regex without the unicode flag and it also matches non-BMP characters.

I wonder if the docs are out of date and perhaps JS changed the default behavior? Or maybe I'm misunderstanding the docs and there is room to improve the clarity here.

In either case, I'm a little bit confused, and I'm hoping maybe a positive change to the docs may come for this, or at the very least someone could help explain to me what I'm misunderstanding.

[14:19:32.0134] <nordzilla>
 * Hey everyone! I asked the following [question](https://mozilla.slack.com/archives/C028P1R5X/p1725058913510629) in the [mdn Slack channel](https://mozilla.enterprise.slack.com/archives/C028P1R5X) earlier, and was told I should try asking here.

---

**Original Question**

Hey MDN folks! I had some questions about the pages for the [RegExp.prototype.dotAll](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll) and [RegExp.prototype.unicode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#description) flags.

Both pages seem to suggest that JS regex by default won't match all unicode characters.

But I've tried using the dotAll flag **_without_** the unicode flag and `.` seems to match non-BMP characters such as emojis just fine.

And I've also tried matching a basic regex without the unicode flag and it also matches non-BMP characters.

I wonder if the docs are out of date and perhaps JS changed the default behavior? Or maybe I'm misunderstanding the docs and there is room to improve the clarity here.

In either case, I'm a little bit confused, and I'm hoping maybe a positive change to the docs may come from this, or at the very least someone could help explain to me what I'm misunderstanding.

[14:21:47.0472] <sfink>
I wouldn't expect dotAll to affect matching of random unicode characters. It should really only be about whether or not to match newlines and newline-like things.

[14:22:23.0913] <nordzilla>
Definitely! Sorry for the confusion. It's just that the dotall MDN page says:

> "This effectively means the dot will match any character on the Unicode Basic Multilingual Plane (BMP). To allow it to match astral characters, the u (unicode) flag should be used. Using both flags in conjunction allows the dot to match any Unicode character, without exceptions."

Which doesn't seem to be true.

[14:22:35.0780] <sfink>
according to a [comment in the source](https://searchfox.org/mozilla-central/rev/f09e3f9603a08b5b51bf504846091579bc2ff531/js/src/irregexp/imported/regexp-parser.cc#1009), it makes a difference for exactly 4 things: \x0A, \x0D, \u2028 and \u2029.

[14:23:26.0499] <iain|parental-leave>
nordzilla: Right above that, it says "The s flag indicates that the dot special character (.) should additionally match the following line terminator ("newline") characters in a string, which it would not match otherwise" (and then lists the four characters sfink pointed at)

[14:23:26.0720] <nordzilla>
Maybe I'm misunderstanding, but I thought emojis _were_ astral characters.

[14:23:46.0213] <iain|parental-leave>
Oh, sorry, misunderstood the question

[14:23:53.0753] <iain|parental-leave>
Will disappear back to parental leave now

[14:24:28.0534] <sfink>
darn, 'cause I'm going to be totally lost here. I can't even keep straight codepoints vs code units vs characters vs graphemes vs entire borg cubes.

[14:26:22.0853] <sfink>
so you're sure . matches the *whole* astral character without the u flag?

[14:26:24.0003] <nordzilla>
You an me both! I'd just like to get a better understanding of all this.

The tl;dr is:

While the dotall flag itself is concerned matching newlines, the MDN page for dotall suggests that a regex without the `u` flag won't match astral characters, but I've found (perhaps mistakenly?) that it does.

[14:27:17.0307] <nordzilla>
 * You an me both! I'd just like to get a better understanding of all this.

The tl;dr is:

While the dotall flag itself is concerned with matching newlines, the MDN page for dotall suggests that a regex without the `u` (Unicode) flag won't match astral characters, but I've found (perhaps mistakenly?) that it does.

[14:29:12.0810] <nordzilla>
 * You and me both! I'd just like to get a better understanding of all this.

The tl;dr is:

While the dotall flag itself is concerned with matching newlines, the MDN page for dotall suggests that a regex without the `u` (Unicode) flag won't match astral characters, but I've found (perhaps mistakenly?) that it does.

[14:29:13.0261] <sfink>
```
js> "😄".match(/(.)(.)/)
["\uD83D\uDE04", "\uD83D", "\uDE04"]
```

[14:31:00.0438] <sfink>
I think the idea is that `/./` doesn't understand surrogate pairs as forming a single matchable "character", but `/./u` does.

[14:31:11.0785] <sfink>
so it's more about how much it matches than whether it matches

[14:31:25.0340] <nordzilla>
Ah, I think you've just uncovered my misunderstanding? 

In my tests, I've been using `.*`, and it seemed to power through all of the characters I threw at it.

But the reality is that it still matches the individual components without the `u` flag, and in the case of `.*`, that is no different.

[14:33:51.0879] <nordzilla>
Now I see the difference:

**Different**
```
"😄".match(/./)

Array [ "\ud83d" ]



"😄".match(/./u)

Array [ "😄" ]
```

---

**Not Different**
```
"😄".match(/.*/)

Array [ "😄" ]



"😄".match(/.*/u)

Array [ "😄" ]
```

[14:34:35.0384] <nordzilla>
I had misunderstood the docs to mean that my `.*` would stop at a non-BMP character. And I was confused why it seemed to be matching everything.

[14:35:08.0686] <sfink>
hah, right, I guess it "puts the pieces back together" with .*

[14:36:17.0291] <sfink>
but I think there's still a valid mdn doc update to be done here, because I totally see your reading of the text you quoted. It's not wrong, but it's sort of deceptive that it's not saying what *does* happen without the u flag. It's a totally valid reading to assume that it doesn't match at all.

[14:39:32.0300] <nordzilla>
I agree! I suppose the next step is to just file an issue here?
https://github.com/mdn/content/issues

Happy to do that if so. I've never contributed to MDN before.

[14:41:23.0127] <nordzilla>
 * Ah, I think you've just uncovered my misunderstanding!

In my tests, I've been using `.*`, and it seemed to power through all of the characters I threw at it.

But the reality is that it still matches the individual components without the `u` flag, and in the case of `.*`, that is no different.

[14:42:42.0542] <sfink>
the last time I contributed to MDN, it was just a wiki and it was straightforward. Now it looks like it's a github thing and you have to read a [giant page](https://github.com/mdn/content/blob/main/CONTRIBUTING.md) to figure out how to contribute.

[14:42:56.0177] <sfink>
if filing an issue works, that seems easiest to me, not having read the giant page.

[14:42:59.0531] <nordzilla>
I saw that page 😂

[14:43:28.0539] <nordzilla>
I'll do what needs to be done! Thanks for your help in uncovering what I wasn't understanding!

[14:43:38.0437] <sfink>
thanks for contributing!


2024-09-06
[17:46:07.0641] <sfink>
I don't have the extreme hatred of Element's thread UX, but I've been thinking that the way I'd kind of like them to work is that messages in threads are by default shown to the entire room, but with a marker indicating that they are part of a thread (and you can view only that thread if you wish). But all thread messages would have a "collapse thread" control that would remove all but the first message from the main room display.

[17:47:14.0844] <sfink>
so, if you hate it when people use threads, you can just never collapse any. And if you're worried about spamming the channel, use a thread and readers can decide for themselves whether it's spam. And if you really really care about staying up to date with everything in a channel, don't collapse any threads.

[17:48:21.0909] <sfink>
I guess there's still the in-between state, where you collapse threads but when coming back after an absence, you want to see everything. In which case, you'd still be stuck listing out all collapsed threads and looking at all the ones with new changes. (In my hypothetical happy world, the new changes indicators WOULD ACTUALLY F'ING WORK!)

[17:48:47.0489] <sfink>
come to think of that, is that fixed? I haven't run into the problem for a while.

[20:28:27.0274] <sfink>
(https://github.com/element-hq/element-web/issues/24392 says it is not fixed)

[20:30:43.0145] <sfink>
I probably haven't seen it because people are avoiding using threads or something, at least in the small handful of rooms I pay attention to

[21:07:01.0833] <Redfire>
Is a link to the [tech tree](https://spidermonkey.dev/tech_tree/) ever going to be added to the main page? It looks pretty interesting but I didn't even know it existed until I went to make a PR.

[04:04:26.0814] <wes>
Hey, folks!  We are reading memory allocated by the JS engine for strings with cached pointers.  Properly going through the jsval before every access is not practical, but invalidating the cache is no problem.

Is there a way to have a callback invoked reliably for 100% JS GCs where the the string's memory being moved? JS_SetGCCallback() seems to only get called on major GCs.  We are on m-c tip.

[04:32:43.0379] <arai>
is it performance critical?  the only option I can think of is to abuse the profiler and look for [the compact phase's label](https://searchfox.org/mozilla-central/source/js/src/gc/Compacting.cpp#67,73), but it can affect the performance too much

[05:11:22.0369] <jonco>
> <@wes:mozilla.org> Hey, folks!  We are reading memory allocated by the JS engine for strings with cached pointers.  Properly going through the jsval before every access is not practical, but invalidating the cache is no problem.
> 
> Is there a way to have a callback invoked reliably for 100% JS GCs where the the string's memory being moved? JS_SetGCCallback() seems to only get called on major GCs.  We are on m-c tip.

There is JS::AddGCNurseryCollectionCallback for nursery collections if that helps

[05:52:46.0274] <wesgarland>
arai: definitely performance critical, but even more correctness critical. :)
jonco Thanks - that API had escaped my notice. I'm not sure it covers all the remaining cases, though?  I don't know enough about spidermonkey's current GC I guess, it's changed a lot since I was doing this stuff every day. 

I wonder if there's a way we can just mark specific strings with a "do not move" attribute. Does that happen when they are interned?  If we can't figure this out, we're going wind up strduping everything (often > 1GB) just keep the GC from moving them, which seems nuts. And I'm convinced we can find a solution. 🤔

[05:54:38.0938] <arai>
where does the string content come from?  I wonder external string or something helps

[06:02:51.0498] <wesgarland>
arai: this particular situation - strings can theoretically come from anywhere, most frequently generated in JS code. This is why have to play super-nice with Spidermonkey. :)  We do use external strings for other strings that we hand to the JS engine and manage the memory for ourselves. (Does something like the old JS_InternString even still exist? jsapi docs are hard to find these days)

[06:22:21.0991] <arai>
what characteristics of "intern" are you looking for?  is it something that the current atom doesn't have?

[06:22:49.0213] <arai>
(I mean [JS_AtomizeString](https://searchfox.org/mozilla-central/rev/cc01f11adfacca9cd44a75fd140d2fdd8f9a48d4/js/public/String.h#74-88) and variants)

[06:23:16.0433] <jonco>
wesgarland: those two callbacks cover all cases where the GC will move a string

[06:24:11.0404] <jonco>
there's no way of marking a string as do not move

[06:24:27.0350] <jonco>
intered strings (atoms) will never be moved however

[06:26:45.0501] <wesgarland>
jonco: it used to be possible to mark a string as intern, but I just realized - that will make it uncollectable.  (atoms are interned strings? that makes sense!)

[06:27:27.0644] <wesgarland>
jonco: but if those two call backs will cover all cases where the GC will move a string - I think this enough to get us to a stable product... thank you!

[06:27:51.0119] <jonco>
 * interned strings (atoms) will never be moved however

[06:28:25.0958] <jonco>
atoms do get collected eventually, but it may take longer for that to happen

[06:28:32.0220] <jonco>
if that works then great!

[06:32:05.0387] <wesgarland>
jonco: I'm going to run this up the flag pole today and see this closes the last bug blocking our 1.0 release (pythonmonkey).  Some test runs with zealous GC will hopefully let me give the nod. :)     I guess we can also try atomizing strings.  We were expecting GC challenges but never figured out until a couple of days ago that it was possible for spidermonkey to move strings without calling the GC callback.

[08:02:25.0753] <sfink>
wesgarland: there's another way to go about this, though it's sketchy and I'm not sure whether it'll be doable. Although the GC moves strings quite a bit, that's mostly the JSString structs themselves. The `char*` (or `char16_t*`) pointing to the string data is mostly not moved unless it points within the JSString struct, which it will do for short strings. Or if a string is deduplicated during a minor GC.

[08:03:26.0376] <sfink>
The semi-principled way to deal with this is to have a `JS::AutoStableStringChars` for every string whose chars you need to access, and only access those chars through that struct. If you're compiling with our checks, it is labeled as `MOZ_STACK_CLASS` and will error if you heap-allocate it. But it'll probably work with your own build system. ;-)

[08:04:20.0498] <sfink>
The unprincipled approach would be to mimic what that class is doing: detect whether a string is inline, and strdup if so. And then globally disable nursery string deduplication. And hope we don't break it in the future.

[08:08:31.0673] <sfink>
Given that you'd probably have to make a `JS::AutoStableStringChars` early for lots and lots of strings, whether you eventually access them or not, you'd be defeating optimizations like ropes (it'll force all strings to be linear).

[08:29:07.0802] <wesgarland>
sfink: Thanks. That's a pretty excellent tip, and your observation about the underlying memory not moving is really helpful ... and explains why we're only having trouble this late in the game. We implemented XHR for our stack, and then wired socket.io up to it, and then started seeing weird little string corruptions issues.  We were worried about BIG strings in unit testing, but I bet HTTP headers fall into short string threshold.

Adding an AutoStableStringChars for JS string that escapes 

[08:29:32.0924] <wesgarland>
 * sfink: Thanks. That's a pretty excellent tip, and your observation about the underlying memory not moving is really helpful ... and explains why we're only having trouble this late in the game. We implemented XHR for our stack, and then wired socket.io up to it, and then started seeing weird little string corruptions issues.  We were worried about BIG strings in unit testing, but I bet HTTP headers fall into short string threshold.

Adding an AutoStableStringChars for JS string that escapes is actually not bad. We already have to flatten ropes.

[09:12:06.0027] <sfink>
oh, and for completeness: fairly large strings (up to 1KB, I think?) can now be allocated in the nursery, so they will also be moved during a minor GC even though they aren't inline. `AutoStableStringChars` will handle everything, if you can live with its restrictions.

[09:57:52.0334] <mgaudet>
> <@sfink:mozilla.org> come to think of that, is that fixed? I haven't run into the problem for a while.

It's been a lot better for me last little bit too 

[09:59:05.0747] <mgaudet>
> <@redfire75369:mozilla.org> Is a link to the [tech tree](https://spidermonkey.dev/tech_tree/) ever going to be added to the main page? It looks pretty interesting but I didn't even know it existed until I went to make a PR.

Unsure. My feeling is no -- it's a tool for thought and team planning more than anything else. I worry that making it too official would confuse people despite the big "**These are not plans**" at the top.

[10:16:42.0989] <mgaudet>
jonco: Do you know if we have an existing bug for trying to store allocation site info in an in-memory cache ala-JIT-hints ([context](https://bugzilla.mozilla.org/show_bug.cgi?id=1917031#c1))

[10:36:57.0462] <denispal>
mgaudet: I wrote a [patch](https://hg.mozilla.org/try/rev/bb34bc3a124236eb3a6d1a1de0f6587db74aa23d) to prototype something like this a while ago, but didn't see any impact on sp3.  It might be worth to revisit though.

[10:40:35.0628] <jonco>
I do not know if there is a bug open - please feel free to file one. This is probably a queueing worthwhile improvement even if it doesn't help sp3

[10:40:51.0482] <jonco>
* I do not know if there is a bug open - please feel free to file one. This is probably a worthwhile improvement even if it doesn't help sp3

[12:05:36.0709] <mgaudet>
> <@jonco:mozilla.org> I do not know if there is a bug open - please feel free to file one. This is probably a worthwhile improvement even if it doesn't help sp3

OK, Will do :) 

[12:05:59.0394] <mgaudet>
> <@denispal:mozilla.org> mgaudet: I wrote a [patch](https://hg.mozilla.org/try/rev/bb34bc3a124236eb3a6d1a1de0f6587db74aa23d) to prototype something like this a while ago, but didn't see any impact on sp3.  It might be worth to revisit though.

Yeah -- I'll read the patch in more detail but I suspect we potentially want this sort of thing even beyond SP3 

[14:03:21.0777] <nordzilla>
sfink: Thanks for your help yesterday! The changes to the MDN `dotAll` page have been merged.

**Before**
> This effectively means the dot will match any character on the Unicode Basic Multilingual Plane (BMP). To allow it to match astral characters, the u (unicode) flag should be used. Using both flags in conjunction allows the dot to match any Unicode character, without exceptions.

**After**


[14:06:56.0866] <mgaudet>
confession: Boy this code is finicky. I have managed to refactor my performance win away... again 

[14:11:01.0302] <sfink>
Hmf. botzilla should have caught that, but it looks like it crashed a while back because it wasn't allowed to post to a room. Oh, so *now* it's going to detect errors and throw an exception? My biggest beef with it is how it drops errors on the floor most of the time...

[14:12:14.0565] <mgaudet>
/me is human fuzzer today 

[15:39:41.0290] <bvisness>
what is this doing and how could it possibly work https://searchfox.org/mozilla-central/source/js/src/tests/lib/tasks_unix.py#263

[15:39:52.0230] <bvisness>
given that `test` is just some random test popped from the list in the loop above

[15:53:42.0498] <sfink>
it's not a random test, though. It's the first test, because when wait_for_encoding is True only a single test is allowed to run. Once that one test makes it through (and produces an XDR encoding), then the floodgates are opened.

[15:54:07.0609] <sfink>
yes, I had to stare at that for a long time to figure it out

[15:55:04.0639] <sfink>
or rather, it's the first test that isn't skipped

[15:55:16.0258] <sfink>
which I guess is why this isn't done in a simpler way

[15:55:26.0936] <bvisness>
ah


2024-09-09
[07:24:26.0324] <mayankleoboy1>
is there a bug to track improving Array.prototype.slice to which I can block bug 1141471 ?

[07:24:28.0256] <botzilla>
https://bugzil.la/1141471 — NEW (nobody) — Array.prototype.slice() needs to be optimized

[07:38:44.0940] <mgaudet>
> <@mayankleoboy1:mozilla.org> is there a bug to track improving Array.prototype.slice to which I can block bug 1141471 ?

I don't know that we have much more specific than sm-js-perf tbh 

[07:43:16.0120] <jonco>
interesting, bug 1911537 could help here

[07:43:16.0932] <botzilla>
https://bugzil.la/1911537 — NEW (jonco) — Write a memory allocator for JSObject slots/elements buffers

[08:28:35.0224] <debadree25>
is it possible to inspect mir using iongraph using lldb like mentioned [here](https://searchfox.org/mozilla-central/source/js/src/doc/hacking_tips.md#295) ? I tried using lldb but running `js/src/devtools/iongraph/iongraph mir` at the frame results in: 
```
error: <user expression 0>:1:1: use of undeclared identifier 'DumpJSStack'
    1 | DumpJSStack() --gdb-format=src/devtools/iongraph/iongraph -- mir
      | ^
error: <user expression 0>:1:17: expected ';' after expression
    1 | DumpJSStack() --gdb-format=src/devtools/iongraph/iongraph -- mir
      |                 ^
      |                 ;
error: <user expression 0>:1:17: use of undeclared identifier 'gdb'
error: <user expression 0>:1:21: reference to 'format' is ambiguous
    1 | DumpJSStack() --gdb-format=src/devtools/iongraph/iongraph -- mir
      |                     ^
note: candidate found by name lookup is 'format'

note: candidate found by name lookup is 'alloc::fmt::format'

error: <user expression 0>:1:28: use of undeclared identifier 'src'
    1 | DumpJSStack() --gdb-format=src/devtools/iongraph/iongraph -- mir
      |                            ^
error: fatal too many errors emitted, stopping now
```
 

[08:28:58.0491] <debadree25>
 * is it possible to inspect mir using iongraph using lldb like mentioned [here](https://searchfox.org/mozilla-central/source/js/src/doc/hacking_tips.md#295) ? I tried using lldb but running `js/src/devtools/iongraph/iongraph mir` at the selected frame results in:

```
error: <user expression 0>:1:1: use of undeclared identifier 'DumpJSStack'
    1 | DumpJSStack() --gdb-format=src/devtools/iongraph/iongraph -- mir
      | ^
error: <user expression 0>:1:17: expected ';' after expression
    1 | DumpJSStack() --gdb-format=src/devtools/iongraph/iongraph -- mir
      |                 ^
      |                 ;
error: <user expression 0>:1:17: use of undeclared identifier 'gdb'
error: <user expression 0>:1:21: reference to 'format' is ambiguous
    1 | DumpJSStack() --gdb-format=src/devtools/iongraph/iongraph -- mir
      |                     ^
note: candidate found by name lookup is 'format'

note: candidate found by name lookup is 'alloc::fmt::format'

error: <user expression 0>:1:28: use of undeclared identifier 'src'
    1 | DumpJSStack() --gdb-format=src/devtools/iongraph/iongraph -- mir
      |                            ^
error: fatal too many errors emitted, stopping now
```

[08:31:08.0852] <debadree25>
oh no i think i am missing some flags thats why

[08:33:08.0332] <debadree25>
 * oh no i think i am missing the --enable-jitspew flag maybe thats why

[09:10:22.0243] <nbp>
I  never tried it in lldb, the hacking tips (as I recall writing) were all about gdb.

[09:11:37.0876] <nbp>
This relies on the GDB scripts which are in the js/src/gdb directory, and which might be autoloaded. If they are not autoloaded, then you might have to load them yourself or allow loading the path.

[09:12:18.0696] <nbp>
such as `add-auto-load-safe-path ~/mozilla` in your ~/.gdbinit

[09:22:22.0455] <debadree25>
aah but i guess gdb is not usable on m series macs

[09:23:03.0393] <debadree25>
 * aah but i guess gdb is not usable on m series macs?

[09:42:38.0969] <sebbu>
it should be, i know it supports arm, maybe not specifically darwin-arm though

[09:46:14.0838] <padenot>
it been a while, but last time I did it, it wasn't just a matter of compiling it, it also needs to be signed properly, so that it is allowed to use the usual system calls to implement a debugger

[09:46:31.0939] <padenot>
(it wasn't on aarch64 at the time)

[09:51:45.0912] <padenot>
and apparently aarch64-darwin isn't upstream. maybe a simple linux vm is an option? that runs extremely fast on those machines, from experience

[09:51:54.0056] <padenot>
 * and apparently aarch64-darwin isn't in gdb upstream. maybe a simple linux vm is an option? that runs extremely fast on those machines, from experience

[09:52:30.0758] <debadree25>
> <@padenot:mozilla.org> and apparently aarch64-darwin isn't in gdb upstream. maybe a simple linux vm is an option? that runs extremely fast on those machines, from experience

hmm will try this if no other way found!

[09:52:55.0052] <padenot>
https://github.com/utmapp/UTM is neat if you go that route, you could be up and running in a few minutes (it does everything for you)

[10:12:30.0717] <nbp>
Why does the same code SEGV on x86 but not on x64 …
x64: `vmovsd_ripr`, x86: `vmovsd_mr` 🤦


2024-09-10
[01:44:23.0654] <debadree25>
what is this assert over [here](https://searchfox.org/mozilla-central/source/js/src/jit/IonAnalysis.cpp#3359) to imply? iiuc it means that some operand of a MResumePoint op is situated after the resume point instruction? is that correct?

[02:37:24.0664] <nbp>
debadree25: Basic blocks have an entry resume point, which is basically specifying where to resume to as soon as we fail within the block. However, instructions such as Phi node, Beta nodes, Constants, Parameters and InterruptCheck can also be inserted at the top of basic block without changing the meaning of the resume point. These are "safe" to be captured and referenced by the entry resume point of the basic block.
This function asserts that any references made the entry resume points of instructions within the block are made to instructions which are at the top of the block, and safe to encode in the entry resume point as no effectful instruction have to be executed before.

[02:46:48.0581] <debadree25>
> <@nbp:mozilla.org> debadree25: Basic blocks have an entry resume point, which is basically specifying where to resume to as soon as we fail within the block. However, instructions such as Phi node, Beta nodes, Constants, Parameters and InterruptCheck can also be inserted at the top of basic block without changing the meaning of the resume point. These are "safe" to be captured and referenced by the entry resume point of the basic block.
> This function asserts that any references made the entry resume points of instructions within the block are made to instructions which are at the top of the block, and safe to encode in the entry resume point as no effectful instruction have to be executed before.

ahh okay thank you so much for explaining! so basically before the start instruction of a block we can have these "Phi node, Beta nodes, Constants, Parameters and InterruptCheck" but no effectful instruction

[02:48:16.0521] <nbp>
not before the start: instructions: [begin, …, safeTopInsert, …, end[

[02:48:35.0861] <nbp>
 * not before the start: instructions: \[begin, …, safeInsertTop, …, end\[

[02:49:32.0013] <nbp>
If one is looking to move effectful toward the beginning of a basic block, they should go after `safeInsertTop`, to keep the entry resume point valid.


2024-09-11
[01:15:14.0631] <liam_g>
Is there a way of finding the hash value of a `JSString` or `PropertyKey` from within C++?

[01:17:24.0771] <arai>
liam_g: if the `JSString` is `JSAtom“, [JSAtom::hash](https://searchfox.org/mozilla-central/rev/3b59c739df66574d94022a684596845cd05e7c65/js/src/vm/StringType.h#1568) works.  Same for `PropertyKey`

[01:17:35.0574] <arai>
 * liam_g: if the `JSString` is `JSAtom`, [JSAtom::hash](https://searchfox.org/mozilla-central/rev/3b59c739df66574d94022a684596845cd05e7c65/js/src/vm/StringType.h#1568) works.  Same for `PropertyKey`

[01:19:42.0409] <liam_g>
Can I force a JSString to be a JSAtom? 

[01:19:52.0386] <liam_g>
 * Can I force a `JSString` to be a `JSAtom`? 

[01:19:55.0466] <arai>
for `PropertyKey`, [js::HashPropertyKey](https://searchfox.org/mozilla-central/rev/3b59c739df66574d94022a684596845cd05e7c65/js/src/vm/PropertyKey.h#21) would work for all cases

[01:20:49.0803] <arai>
err, maybe I'm misunderstanding your question.   do you want to get a hash of arbitrary JSString?

[01:21:26.0607] <arai>
JSString can be atomized, but that will be overfill if you just want a hash

[01:22:42.0749] <liam_g>
I don't think that you are misunderstanding, it's me who doesn't understand `JSAtom` very well.

[01:24:11.0338] <arai>
[js::HashStringChars](https://searchfox.org/mozilla-central/rev/3b59c739df66574d94022a684596845cd05e7c65/js/src/vm/StringType.h#2037) works for all linear strings.  it's still a subset tho, [JSLinearString::ensureLinear](https://searchfox.org/mozilla-central/rev/3b59c739df66574d94022a684596845cd05e7c65/js/src/vm/StringType.h#1071) is more lightweight than atomizing

[01:27:13.0021] <liam_g>
OK, so if I want to hash a `PropertyKey`, I can use `js::HashPropertyKey`, and if I want to hash a `JSString` I can run `JSLinearString::ensureLinear` followed by `js::HashStringChars`. Is that right?

[01:29:51.0777] <arai>
for `PropertyKey`, yes.  For `JSString`, it depends.  you might want to handle `JSAtom` case before that for performance reason

[01:30:25.0282] <arai>
also, looks like rope has `hash` function, according to [MemoryMetrics.cpp](https://searchfox.org/mozilla-central/rev/3b59c739df66574d94022a684596845cd05e7c65/js/src/vm/MemoryMetrics.cpp#55-59)

[01:31:00.0716] <liam_g>
OK, I understand. Am I right in thinking that mostly keywords will already be atomized, and mostly other words won't be?

[01:31:20.0656] <arai>
oh, I think I should've asked this first.  are you looking for public API, or are you modifying the SpiderMonkey internal?  the most of the above is available only in internal

[01:31:52.0082] <liam_g>
I was just about to ask about this. I'm working in the public API. Is it safe to include those files? 

[01:31:59.0732] <liam_g>
 * I was just about to ask about this. I'm working in the public API. Is it safe to include those header files? 

[01:32:46.0700] <arai>
All keywords are atomized.  https://searchfox.org/mozilla-central/source/js/src/vm/CommonPropertyNames.h and built-in classes, type names, symbols are also atomized

[01:33:07.0716] <arai>
uh, I'm not aware of any way to directly get the hash with public API

[01:34:55.0081] <arai>
what are you going to use the hash for?

[01:37:09.0307] <liam_g>
I was looking to create a `std::unordered_map` or something similar so that I could speed up conversions between `JSString`, `PropertyKey` and a 3rd party type that I'm using, `juce::Identifier`.

[01:38:33.0796] <liam_g>
If the API doesn't support this then I'll find another way around. I could probably use a normal `JSObject` as a container.

[01:38:53.0971] <liam_g>
 * If the API doesn't support this then I'll find another way around. I could probably use a normal `JSObject` as a container, or a Map.

[01:39:03.0165] <liam_g>
 * If the API doesn't support this then I'll find another way around. I could probably use a normal `JSObject` as a container, or a JS Map.

[01:42:27.0629] <arai>
For identifiers, atomizing those strings and using the pointer value can be an option

[01:43:18.0829] <arai>
If the PropertyKey is known to be string, then it's actually an atom, and you can use the same technique

[01:44:48.0774] <liam_g>
Oh, that's interesting. Pointers to atoms remain constant, do they?

[01:44:50.0781] <liam_g>
 Can I atomize a string from within the API?

[01:47:02.0708] <liam_g>
> <@liam_g:mozilla.org> Can I atomize a string from within the API?

I found `JS_AtomizeString` in the String.h header. Looks like that's the right one.

[01:50:11.0620] <liam_g>
I am assuming that atomizing a string is a heavy one-time operation, and you don't want to atomize everything. But in a program which repeatedly uses the same strings or IDs over and over again, it might make sense to pay this cost of atomizing once and then use the caching technique to speed things up. Is this correct?

[01:54:43.0241] <arai>
iiuc, Atom's pointer is constant as long as it doesn't get collected.  maybe I'm misunderstanding around permanent flag vs pinned flag etc.  let's wait for others who knows better

[02:01:34.0315] <arai>
then, yes, atomization is slightly heavy operation.  it calculates hash and it's added to a map, in order to get unique instance.  Atoms can be compared by pointers.  So, for identifiers usage, where the same identifier can appear multiple times and also comparisons can frequently happen, this would fit very well.

[02:02:14.0923] <arai>
identifiers appears in JS code are all atomized

[02:16:21.0909] <liam_g>
This makes sense. Does it follow that any time I write x.prop or x[

[02:16:44.0949] <liam_g>
 * This makes sense. Does it follow that any time I write x.prop or x["prop"] in Javascript, "prop" is going to be atomized by the compiler?

[02:17:01.0416] <liam_g>
 * This makes sense. Does it follow that any time I write `x.prop` or `x["prop"]` in Javascript, "prop" is going to be atomized by the compiler?

[02:22:05.0831] <arai>
for properties, it's not guaranteed.  for simple cases, they're atomized, but if it's a long strong appears outside of the property context, it's not atomized

[02:22:47.0367] <arai>
e.g. `const key = "some long string"; x[key];`

[02:24:24.0034] <arai>
err, that applies only inside the compiler.  in runtime, string property keys are atomized

[02:26:43.0816] <liam_g>
Thanks for the clarification. It looks like this should be a good way for me to optimize my code. Unless there are any doubts about atoms being garbage collected, as you mentioned above?

[02:27:14.0011] <liam_g>
(In any case, even if this happens, it just means a bit more construction time and a bit more memory, not undefined behavior).

[02:29:11.0577] <jandem>
yes atoms can be garbage collected if they're no longer used anywhere. Exception are pinned atoms that aren't collected, but it's probably better to not rely on that

[02:29:28.0783] <jandem>
 * yes atoms can be garbage collected if they're no longer used anywhere. Exception are pinned atoms, these are kept alive, but it's probably better to not rely on that

[02:32:22.0597] <liam_g>
This makes things a bit more complicated. But if I were to store raw pointers to `PropertyKey` and then trace them somehow, I would then prevent those atoms from being garbage collected. I could then use the raw pointers in a `std::unordered_map`. Does this seem right?

[02:51:27.0318] <gkw>
jonco: Both bug 1851579 and bug 1917561 involve `enqueueMark("set-color-gray");` - are they related?

[02:51:28.0513] <botzilla>
https://bugzil.la/1851579 — NEW (nobody) — Assertion failure: ok (Incremental marking verification failed), at js/src/gc/Verifier.cpp:759

[02:51:28.0693] <botzilla>
https://bugzil.la/1917561 — NEW (jonco) — Assertion failure: ok (Incremental marking verification failed), at js/src/gc/Verifier.cpp:768

[03:05:31.0741] <jonco>
gkw: I'm not sure that the testcase in that bug calls enqueueMark after we've started incremental GC which is the problem here.

[03:15:52.0049] <gkw>
I see, well just fyi

[04:01:45.0667] <wes>
liam_g: If you're just atomizing one set of strings, like common API parameters or something, you could do them all at program start and just create GC roots for the atomized strings so that they are never GCd.  Another trick I used years ago was to store my pre-computed strings in a JS Array and then I would just keep the Array referenced with a GC root.

The advantage I sought from atomized strings years ago was similar to yours, I wanted to compare them by address instead of JS strcmp().

[07:14:21.0365] <bvisness>
I've got a `pbl` [try failure](https://treeherder.mozilla.org/jobs?repo=try&author=bvisness%40mozilla.com&selectedTaskRun=baDq02jcRi-8zP96_rmRXA.0), how do I build and run that locally? (Also why would changing only the test runner cause a failure there...?)

[07:14:53.0259] <bvisness>
ha, just saw the message about the same in our internal channel

[07:15:12.0134] <bvisness>
never mind

[08:05:47.0487] <denispal>
jonco: There are some [significant improvements](https://glam.telemetry.mozilla.org/firefox/probe/gc_ms/explore?normalizationType=non_normalized&os=Windows&ref=20240827213859&visiblePercentiles=%5B99%2C95%2C50%5D) in `gc_ms` over the past week.  (-30-40%).  Do you happen to know changes could have caused them?

[08:57:21.0016] <sfink>
https://firefox-source-docs.mozilla.org/performance/memory/gc_and_cc_logs.html

[09:16:37.0728] <sfink>
https://searchfox.org/mozilla-central/rev/3b59c739df66574d94022a684596845cd05e7c65/dom/base/CCGCScheduler.cpp#860-863

[09:26:32.0155] <jonco>
> <@denispal:mozilla.org> jonco: There are some [significant improvements](https://glam.telemetry.mozilla.org/firefox/probe/gc_ms/explore?normalizationType=non_normalized&os=Windows&ref=20240827213859&visiblePercentiles=%5B99%2C95%2C50%5D) in `gc_ms` over the past week.  (-30-40%).  Do you happen to know changes could have caused them?

There have been a couple of minor changes but nothing I would have expected to make a large improvement. It sometimes takes a while for telemetry to settle down as people update their nightlies so this may change. 

[09:27:49.0996] <sfink>
tcampbell: when a CC is "started", it'll do some number of ForgetSkippable slices, but then it [checks to see if the CC is still needed](https://searchfox.org/mozilla-central/rev/3b59c739df66574d94022a684596845cd05e7c65/dom/base/CCGCScheduler.cpp#836-841) and cancels it if not.

[09:28:12.0906] <tcampbell>
ah thanks. that makes sense

[09:28:24.0065] <sfink>
(though I think there's a synchronous CC path as well, and I'm not sure it does the same thing)

[09:37:57.0882] <mccr8>
> <@denispal:mozilla.org> jonco: There are some [significant improvements](https://glam.telemetry.mozilla.org/firefox/probe/gc_ms/explore?normalizationType=non_normalized&os=Windows&ref=20240827213859&visiblePercentiles=%5B99%2C95%2C50%5D) in `gc_ms` over the past week.  (-30-40%).  Do you happen to know changes could have caused them?

Like Jon said, newer build IDs always have better GC times. Their sessions are not as long, so you have to keep that in mind.

[09:38:14.0207] <mccr8>
(So they have less stuff loaded, usually.)

[09:40:29.0771] <denispal>
Ah ok, makes sense.  Thanks

[09:41:42.0245] <mccr8>
We probably have telemetry for JS heap size and I'd expect that'll be correlated. 

[09:44:50.0122] <denispal>
mccr8: Yes, it [does seem to be correlated](https://glam.telemetry.mozilla.org/firefox/probe/memory_js_gc_heap/explore?normalizationType=non_normalized&os=Windows&visiblePercentiles=%5B99%2C95%2C50%5D).

[09:45:47.0707] <mccr8>
Also I think generally max pause is more important than the difference in time between when we  finish a GC and when we start it, and I think this is the latter.

[09:47:50.0743] <denispal>
mccr8: Actually, I think I don't fully understand the build id argument though.  What makes the build id's between Sept. 6th-9th special here?

[09:48:27.0525] <denispal>
or is it just a coincidence that it's this low at the moment

[09:49:42.0212] <denispal>
oh might be weekend effect too

[09:50:11.0110] <mccr8>
> <@denispal:mozilla.org> mccr8: Actually, I think I don't fully understand the build id argument though.  What makes the build id's between Sept. 6th-9th special here?

The basic idea is that the older your session is, the more tabs you tend to have open. The more tabs you have, the larger the GC heap will be (though with Fission maybe that's less of a thing now.) The serious tab hoarders might only update their browser every week or two. So only some percentage of tab hoarders can possibly have builds from the last few days.

[09:50:49.0629] <mccr8>
With a Sept 9th build, none of them can have a session longer than 3 days because it has only been 3 days. Vs an older build.

[09:50:52.0540] <denispal>
Ok, that makes sense

[09:51:02.0688] <denispal>
thanks!

[09:51:39.0043] <mccr8>
Definitely a weird effect, but it has been pretty consistent, going back two or three cycles of different telemetry systems.

[10:07:49.0564] <davidj361>
Is this even okay to do? Because I'm not sure if this even allocates space for `TranscodeBuffer`
```c++
    JS::TranscodeBuffer buffer;
    // Determine the file size
    fb.pubseekoff(0, std::ios::end);
    std::streamsize size = fb.pubseekoff(0, std::ios::beg);
    // Read the data
    fb.sgetn(static_cast<char*>(static_cast<void*>(buffer.begin())), size);
    fb.close();
```

[10:11:05.0422] <davidj361>
guess I need to call `buffer.growBy(size)`

[10:14:54.0694] <arai>
yeah, you need [growBy](https://searchfox.org/mozilla-central/rev/3b59c739df66574d94022a684596845cd05e7c65/mfbt/Vector.h#713) or [resize](https://searchfox.org/mozilla-central/rev/3b59c739df66574d94022a684596845cd05e7c65/mfbt/Vector.h#716)

[10:35:47.0659] <davidj361>
And a stencil has to be decoded to run? Can it not just run while being encoded already?

[11:03:28.0965] <arai>
the buffer first needs to be decoded to `JS::Stencil`, and then instantiated into `JSScript`, and then you can run it

[14:32:11.0158] <tcampbell>
When calling DecodeStencil, you can set options.borrowBuffer if the memory you decode from will live as long as the JS::Stencil does. This will make the decode process mostly just point to the existing data instead of allocating a copy. As arai says though, you still need to instantiate it to convert to a format that the js engine can run. The conversions are all pretty fast and largely the formats differ between if something is a pointer vs an index into an array you would have to know about


2024-09-12
[08:39:08.0123] <mgaudet>
Bryan Thrall [:bthrall]: Thanks for prompting me (though I suspect you didn't realize you did it) to finally install https://atuin.sh/ -- while I still trip over things every once and a while, it's been a clear upgrade

[09:00:31.0436] <jandem>
the improved Ctrl+R UI looks great

[09:12:09.0864] <mgaudet>
Yeah, it's quite nice. And you can filter by host (if you have sync), workspace and session just by hitting ctrl-r again

[09:45:04.0095] <tcampbell>
[misc discussion] The `js::CollatorObject` type feels off to me since while we use in our standard library, its JSAPI needs should be satisfied by normal embedder APIs. My issue is that we use the concrete JSObject as a base class which is not available to embedders. Do we need improvements to the ergnomics of JSAPI so that things like CollatorObject are implemented similar to how an embedder would?

[09:45:31.0355] <tcampbell>
 * \[misc discussion\] The `js::CollatorObject` type feels off to me since while we use in our standard library, its JSAPI needs should be satisfied by normal embedder APIs. My issue is that we use the concrete `NativeObject` as a base class which is not available to embedders. Do we need improvements to the ergnomics of JSAPI so that things like CollatorObject are implemented similar to how an embedder would?

[09:45:39.0400] <tcampbell>
 * \[misc discussion\] The `js::CollatorObject` type feels off to me since while we use in our standard library, its JSAPI needs should be satisfied by normal embedder APIs. My issue is that we use the concrete `js::NativeObject` as a base class which is not available to embedders. Do we need improvements to the ergnomics of JSAPI so that things like CollatorObject are implemented similar to how an embedder would?

[09:45:56.0837] <tcampbell>
(we have wayyyy too many ways to define new object types)

[10:42:52.0865] <mgaudet>
tcampbell: So just rewrite it to use JS_NewObject with a JSClass? (Since proto class is already plain object?) 

[10:43:03.0319] <mgaudet>
I don't disagree, curious why this stands out to you tho

[10:44:54.0756] <tcampbell>
We use the CollectorObject as a namespace for the various tables to call JS_NewObject as well as helpers and stuff

[10:45:31.0902] <tcampbell>
if we still have such a class as a namespace, what does it make sense to call it? (factory, etc?)

[10:46:21.0151] <tcampbell>
what stands out is extraneous use of internal-to-spidermonkey-apis for things like builtins which _generally_ can be outside the firewall

[10:47:24.0916] <tcampbell>
(I've been doing a deep dive on our various gecko object definitions and I don't like how many different flags and tricks we use in adhoc ways...)

[10:59:29.0016] <mgaudet>
Yeah, I'm not sure we have a good answer. Collator object largely looks... normalish to me, but I take your point that it could certainly be done using pretty much straight up the public API 

[12:07:08.0976] <mgaudet>
PS: Now that https://bugzilla.mozilla.org/show_bug.cgi?id=1917020 has landed, anything using straight JS_LOG should work on releases :D Exciting times 

[14:11:41.0911] <mgaudet>
OK: Here's a stupid question that I promise, if we can come to a good answer, I will write up as a doc and check in (unless there is something better): What are the lifetimes of various engine objects, and how do they relate to the lifecycle of the browser?

e.g. On browser startup we start with a fresh runtime, context, zone, realm, global... but as I navigate through sites, some of these will get reset, but presumably not everything? (ie. is a runtime alive for the duration of a tab? Process? ) 

[14:12:29.0504] <mgaudet>
Once upon a time, I seem to recall having it impressed upon me that a "zone" was roughly a tab... but I have no idea if that's still the case? 

[14:27:04.0549] <mccr8>
I don't have a good unified answer. I do remember zones changed somehow when we ended up with multiple realms in a compartment. Also with Fission, we won't store the global for multiple webpages that aren't same site in the same process, which of course precludes them being in the same anything JS runtimewise.

[14:28:37.0452] <mgaudet>
Yeah... A lot has changed which makes me wonder what the state of play is. Probably the best people to answer are in europe though, so may have to wait till tomorrow :) 

[14:40:45.0675] <mccr8>
mgaudet: I guess I can answer some of it. A runtime is per thread we run JS on. So, the main thread in processes we run JS, plus another one for DOM workers, though the main and worker threads can share some data. A realm is the same thing as a global, I think, and we have one per inner window, plus additional ones for various browser JS things. I think a context is 1:1 with a runtime. In a tab, you have a top level window, and it can contain iframes. These iframes may be in the same process or another process. If they are same origin, they'll be in the same compartment, because no security barrier is needed. If they are "same site" but not same origin, they'll be in the same process, in the same runtime, but in a different compartment. If they are neither, they'll be in another process entirely.

[14:45:26.0413] <mgaudet>
Ok. So if you have a same-site iframe, it would use the same JSRuntime as the outer window. Ok. That scans reasonably well to me. What about page navigations; my mental model is that the JSRuntime is long lived and only destroyed at process shutdown... but if I navigate to another origin, do we reuse the same process, or do we tear the current one down and rebuild a new one? 

[14:46:34.0996] <mccr8>
> <@mgaudet:mozilla.org> Ok. So if you have a same-site iframe, it would use the same JSRuntime as the outer window. Ok. That scans reasonably well to me. What about page navigations; my mental model is that the JSRuntime is long lived and only destroyed at process shutdown... but if I navigate to another origin, do we reuse the same process, or do we tear the current one down and rebuild a new one?

A process can be reused for a different unrelated page, but only one that is same site, for security reasons.

[14:46:49.0387] <mccr8>
We create and destroy a LOT of processes with Fission.

[14:46:59.0814] <mgaudet>
Heh. I'm getting that impression! 

[14:47:40.0670] <mccr8>
In Nightly (I think by default?) you can hover over a tab and see how many PIDs are in the page. For your standard ad-ridden local news site, it can be like a dozen.

[14:47:57.0040] <mccr8>
 * In Nightly (I think by default?) you can hover over a tab and see how many processes are in the page. For your standard ad-ridden local news site, it can be like a dozen.

[14:48:01.0040] <mgaudet>
So in a real way, a JSRuntime is actually locked to a single site... interesting 

[14:48:40.0349] <mccr8>
> <@mgaudet:mozilla.org> So in a real way, a JSRuntime is actually locked to a single site... interesting

Yes, due to Spectre that's basically a requirement. Plus the browser JS, of course.

[14:48:44.0220] <mgaudet>
This isn't equally true on Android tho? ISTR full fission isn't there? 

[14:50:13.0463] <mccr8>
> <@mgaudet:mozilla.org> This isn't equally true on Android tho? ISTR full fission isn't there?

Yes Android does not have Fission yet. I'm not sure how exactly it works there, but in the pre-Fission world in desktop, a single JS runtime could contain any number of tabs worth of pages. All of the pages from a single tab would be in the same runtime. (Excluding things like COOP or something where a site could effective opt-in to a Fission like isolation...)

[14:50:21.0693] <mccr8>
> <@mgaudet:mozilla.org> This isn't equally true on Android tho? ISTR full fission isn't there?

 * Yes Android does not have Fission yet. I'm not sure how exactly it works there, but in the pre-Fission world in desktop, a single JS runtime could contain any number of tabs worth of pages. All of the pages from a single tab would be in the same runtime. (Excluding things like COOP or something where a site could effectively opt-in to a Fission like isolation...)

[14:51:54.0513] <mccr8>
Also for Fission, in the same way we have cross compartment wrappers for references from one compartment to another, we have cross process proxies, for the limited set of objects that can be referred to across sites.

[14:52:35.0229] <mccr8>
which gets fun when an iframe navigates from out of process to in process, or vice versa.

[14:52:52.0152] <mgaudet>
Right... I knew they existed. I wasn't always clear on what restrictions existed for cross-site reference. 

Ooof. Yeah that must be knarly

[14:54:06.0255] <mgaudet>
Ok. The next pieces I want to figure out is same-origin navigation (tho I'm almost at EOD here, so will disapperar shortly) -- Here my mental model is that we must essentially throw away all the zones related to the loaded page (and dom, document etc), and start with a fresh world. 

Part of my reason for asking is trying to understand the actual scope of JitHints as I think about building something similar for pretenuring (based on a patch denis wrote already :) ) 

[14:55:22.0240] <mccr8>
> <@mgaudet:mozilla.org> Ok. The next pieces I want to figure out is same-origin navigation (tho I'm almost at EOD here, so will disapperar shortly) -- Here my mental model is that we must essentially throw away all the zones related to the loaded page (and dom, document etc), and start with a fresh world. 
> 
> Part of my reason for asking is trying to understand the actual scope of JitHints as I think about building something similar for pretenuring (based on a patch denis wrote already :) )

Zones are kind of an "optimization" and invisible to the web, so we can do whatever we want. But yes, I think (and Jan would have to confirm) that on a same site navigation we get a new zone. Generally you want things in a zone to have a similar lifetime, to minimize fragmentation.

[14:55:47.0265] <mccr8>
IIRC zones were introduced because content and chrome had very different lifetimes, but they were being stored all jumbled together and it caused bad fragmentation.

[14:57:18.0446] <mgaudet>
Ok -- this is all enormously helpful context, and I do intend to try to turn this into something. However, I have to scoot :) EOD 

[14:57:41.0527] <sfink>
That, and we can collect a subset of Zones, so we don't need to keep re-tracing live memory that belongs to long-living JS.

[14:57:55.0657] <mccr8>
There's some documents around, eg: https://searchfox.org/mozilla-central/source/js/public/Zone.h Dunno if there's no comment prose though.

[14:58:04.0163] <mccr8>
 * There's some documents around, eg: https://searchfox.org/mozilla-central/source/js/public/Zone.h Dunno if there's non-comment prose though.


2024-09-13
[23:58:34.0017] <padenot>
Hi folks, we got https://bugzilla.mozilla.org/show_bug.cgi?id=1918506 filed, and I have no idea how to fix it. In a sentence: recursive calls in an AudioWorkletGlobalScope don't do the "too much recursion" error, they crash instead. What are we doing wrong, or not doing?

[00:32:50.0273] <jandem>
padenot: looks like worklets set the JS stack quota [here](https://searchfox.org/mozilla-central/rev/ab8043ccefe85c30ef78b97193918934d6aa93d1/dom/worklet/WorkletThread.cpp#383-384)

[00:33:22.0032] <jandem>
what's the actual stack size passed when the thread is created?

[00:33:34.0702] <padenot>
let me check

[00:34:25.0873] <padenot>
https://searchfox.org/mozilla-central/source/__GENERATED__/dist/include/nsIThreadManager.h#83

[00:34:56.0977] <padenot>
we're using the default for this thread

[00:35:34.0849] <jandem>
hm did that change at some point? I thought it was higher before when we added that set-native-stack-quota call

[00:35:56.0780] <padenot>
I haven't kept track, but based on those number I can see there's a problem

[00:35:59.0761] <padenot>
 * I haven't kept track, but based on those numbers I can see there's a problem

[00:36:24.0108] <jandem>
yeah it should be much higher. I suggest following the stack size we use for JS worker threads

[00:36:35.0499] <padenot>
yeah for sure, thanks a lot for the quick answer!

[00:36:44.0808] <jandem>
 * yeah it should be much higher. I suggest using the same stack size we use for JS worker threads

[10:01:34.0625] <mgaudet>
Sorry, I meant to follow up on this: jonco / jandem -- How is the lifetime of a zone related to the lifetime of a runtime, and the navigation of a tab? 

[10:15:10.0789] <jonco>
The runtime lives longer than a zone. I'm not sure exactly what a zone corresponds to in the browser. 

[10:16:12.0672] <mccr8>
I think a zone is a "web page" or at least the same site parts of it. Or all of Chrome JS is a zone, maybe.

[10:16:16.0378] <mgaudet>
Cool :) I have a research project then :P 

[10:17:01.0188] <mccr8>
IIRC Jan is the one who changed how zones work most recently, as part of his effort to get rid of CCWs on gdocs.

[10:17:03.0777] <mgaudet>
jonco: One other Q: Do we do a full trace only for a major GC, or do we end up calling all the tracing functions even on minor GC? (my ental odel says no, but wanted to touch in too) 

[10:17:43.0143] <mccr8>
minor vs major is about nursery vs heap. There's also zonal vs full GC. I think is the nomenclature.

[10:18:24.0074] <mccr8>
Kinda less relevant in the Fission world, but very important before that.

[10:19:48.0862] <jonco>
yeah we only do a full trace for major GC

[10:20:17.0353] <jonco>
minor GC relies on store buffer buffer entries, except for the stack which is traced

[10:20:38.0400] <mgaudet>
(to stop asking XY questions: Thinking about https://bugzilla.mozilla.org/show_bug.cgi?id=1894940, I wonder if whenever we walk the stack we ought to mark a bit on jit code to say it's been used recently. Then, the heuristic would be 
1. So long as we're not compacting (because it asserts we are preserving no jit code) only toss jit code that has not been marked)
2. On a heursitically determined full GC, clear all the "touched" bits
3)

[10:20:43.0060] <mgaudet>
 * (to stop asking XY questions: Thinking about https://bugzilla.mozilla.org/show\_bug.cgi?id=1894940, I wonder if whenever we walk the stack we ought to mark a bit on jit code to say it's been used recently. Then, the heuristic would be

1. So long as we're not compacting (because it asserts we are preserving no jit code) only toss jit code that has not been marked)
2. On a heursitically determined full GC, clear all the "touched" bits


[10:21:32.0852] <mgaudet>
The idea is that over the course of a number of stack walks, we largely will populate the set of 'active' jit codes, which allows us to relatively cleanly separate the set of jit code we want gone from the set we want to preserve) 

[10:21:59.0244] <mgaudet>
If we tweak FrameIter, we'd also capture at points like error stack captures, etc

[10:22:20.0042] <mgaudet>
 * If we tweak FrameIter, we'd also <del>capture</del> set bits at points like error stack captures, etc

[10:24:24.0267] <jonco>
the drawback is that GC is relatively infrequent so you may not mark all your active code

[10:25:16.0181] <jonco>
another way of saying that is that it's very biased against code that does not cause GC

[10:25:19.0336] <mgaudet>
100% (hence me verifying minor GC doesn't help here) 

[10:25:46.0447] <mgaudet>
But if we're not running code that's causing GC then we should just be keeping it in general shouldn't we?

[10:26:16.0438] <mgaudet>
Like we need to have enough allocation pressure to want to toss JIT code... or are there other reasons we want to toss all jit code I'm not thinking of?

[10:28:08.0528] <mgaudet>
(Bear with me -- I've been rolling this problem around in my head for less than an hour so far :P ) 

[10:30:44.0805] <jonco>
I mean that looking at what's on the stack when we GC is going to bias you to code that allocates; code that doesn't allocate may not be seen on the stack no matter how hot it is

[10:33:24.0950] <mgaudet>
Oh that's true. Ok. 

it seems like maybe we don't need a trampoline? Like, can't we just set a bit on the IonScript/JitScript as part of the generated code prologue, then similarly unset the bits on a regular basis to describe the set of invoked code? 

I think we could bake all the addresses in so it would be ~1 store per call. I suppose that could be impactful on hot hot hot code... but I don't get the impression we'd notice this in general

[10:34:57.0177] <jonco>
yes it sounds like that would work - I don't know enough to say whether that performance impact would be

[10:35:12.0033] <jonco>
 * yes it sounds like that would work - I don't know enough to say what that performance impact would be

[10:35:17.0748] <jonco>
 * yes it sounds like that would work - I don't know enough to say what the performance impact would be

[10:36:41.0083] <mgaudet>
I can probably prototype that part not too slowly; I see the big "preservingJitCode" switch on GC -- we'd have to add another mechanism to make sure JitCode is incrementally cleaned up too right? 

[10:41:41.0501] <jonco>
I guess preservingJitCode would get set in a more restricted set of circumstances and we'd rely on this usage instead if it was not

[10:45:04.0857] <mgaudet>
Ok. I'll see what I can do :) 

[12:00:34.0696] <tcampbell>
Generally we have three main zones in a process: System, Content, Atoms. Certain navigations will create little orphan zones that are not interesting (eg start a tab at about:blank before navigating to a real site will make an about:blank zone that is different than the content zone)

[12:02:07.0283] <mccr8>
oh no, don't bring up about:blank. 😄

[12:02:59.0945] <mccr8>
> <@tcampbell:mozilla.org> Generally we have three main zones in a process: System, Content, Atoms. Certain navigations will create little orphan zones that are not interesting (eg start a tab at about:blank before navigating to a real site will make an about:blank zone that is different than the content zone)

If windows from multiple tabs are in a single process, do they all get put in the same Content zone?

[12:05:29.0976] <tcampbell>
Good point, different tabs in same process get different zones. I guess it is each "top level" (which I don't know the precise definiton of)


[12:06:05.0269] <tcampbell>
Workers get zones too by their different runtime (as stated above somewhere)

[12:07:31.0998] <tcampbell>
yeah.. I don't have a simple intuitive explaination for when they happen, but generally seems to happen in very reasonable cases

[12:08:29.0348] <tcampbell>
This seems to be the primary logic
https://searchfox.org/mozilla-central/rev/ab8043ccefe85c30ef78b97193918934d6aa93d1/dom/base/nsGlobalWindowOuter.cpp#1968-2008

[12:08:56.0628] <mccr8>
Ah, nice! It is that simple.

[12:10:24.0882] <tcampbell>
Each content tab gets a zone per unique site in its iframe-nesting-horror-show

[12:11:27.0389] <mccr8>
In addition to same tab, maybe things with an opener relationship get put in the same zone if they are same site? I'm not sure how exactly that goes.

[12:14:10.0541] <tcampbell>
Is BC::mParentWindow set in an opener relationship? I'm not quite clear on what that is define as

[12:14:20.0675] <tcampbell>
 * Is BC::mParentWindow set in an opener relationship? I'm not quite clear on how that field is defined

[12:14:54.0685] <mccr8>
I'm not sure.

[12:17:41.0787] <tcampbell>
Looks like new tabs still get different zones even in opener relationship

[12:18:05.0551] <mccr8>
Ah, cool.

[12:18:23.0053] <tcampbell>
/me feels like he slept through some Fission lectures over the years...

[12:18:50.0384] <mccr8>
I guess they have to be same process, but are likely to have different lifetimes so we want them in separate zones?

[12:19:14.0131] <tcampbell>
and I guess navigate differently too which seems to be a common motivation

[12:21:30.0653] <mgaudet>
Lemme tell you: Googling opener relationship -does not help you- here :P 

[12:21:46.0135] <mgaudet>
This is `window.open` right?

[12:22:02.0676] <mgaudet>
and how same-origin windows can communicate

[12:23:50.0650] <mgaudet>
One of the comments on that SelectZone function implies navigations get different zones too... which makes sense to me at least 

[12:31:57.0378] <ptomato>
hey, there's just one open question on the embedders migration guide for esr128, that I could use some help with: https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/pull/85/files#r1694013596
is it intentional that `GCPolicy<Heap<T>>` now doesn't implement `needsSweep` or is that an oversight that I should send a patch for?

[12:48:12.0999] <tcampbell>
sfink:  ^

[13:00:12.0495] <mgaudet>
Speaking of docs: https://firefox-source-docs.mozilla.org/dom/scriptSecurity/index.html needs updating because transparent wrappers are no longer a thing I think

[13:20:33.0534] <sfink>
Hm. This is confusing. We mostly switched over from `needsSweep` -> `traceWeak`, but `needsSweep` was left in place for maps and sets, except that the current implementation of `WeakCache<Map|Set>` looks to me like it uses `traceWeak`. I think I may have to delete a bunch of `needsSweep` declarations and see what breaks.

[13:38:21.0815] <tcampbell>
> <@mgaudet:mozilla.org> Speaking of docs: https://firefox-source-docs.mozilla.org/dom/scriptSecurity/index.html needs updating because transparent wrappers are no longer a thing I think

I don't see many uses of that term, but I think they are just plain CCWs. https://searchfox.org/mozilla-central/rev/181e5bb2645236a617d42e3740420098097f7a0f/js/xpconnect/wrappers/WrapperFactory.cpp#423
This would come up in that same-origin window-opener case we talked about earlier where there are different zones and so different compartmnets

[13:38:33.0428] <tcampbell>
/me is only 70% confident in that..

[13:57:33.0953] <davidj361>
Would it be ok to return a `std::shared_ptr<JS::PersistentRootedObject>`?

[13:58:46.0501] <davidj361>
I don't see a lot of mention of smart pointers for JS structures

[13:58:55.0334] <davidj361>
 * I don't see a lot of mention of smart pointers for JS types

[13:58:59.0170] <ptomato>
`WeakCache<GCHashMap<..., Heap<T>>>` is definitely broken in esr128

[14:01:28.0461] <ptomato>
so the use case would be to hold on to a JSObject from C++, but when no owners of the shared_ptr are left, go back to behaving like a normal JSObject, collected when it's not reachable from JS?

[14:02:40.0833] <davidj361>
it's meant to hold the Global and it's mostly C++ interacting with it

[14:11:34.0330] <arai>
we don't use the standard library's smart pointers.  there are similar things in https://searchfox.org/mozilla-central/source/mfbt , such as [mozilla::UniquePtr](https://searchfox.org/mozilla-central/rev/181e5bb2645236a617d42e3740420098097f7a0f/mfbt/UniquePtr.h#190) and [RefPtr](https://searchfox.org/mozilla-central/rev/181e5bb2645236a617d42e3740420098097f7a0f/mfbt/RefPtr.h#55), and there are some examples that holds `PersistentRooted` field in a struct and using it with RefPtr

[14:12:51.0499] <arai>
e.g. [mozilla::dom::ReadableStreamDefaultTeeReadRequest::ChunkSteps::ReadableStreamDefaultTeeReadRequestChunkSteps::mChunk](https://searchfox.org/mozilla-central/rev/181e5bb2645236a617d42e3740420098097f7a0f/dom/streams/ReadableStreamTee.cpp#77) field is `PersistentRooted`, where the struct is used with RefPtr (https://searchfox.org/mozilla-central/search?q=symbol:T_ReadableStreamDefaultTeeReadRequestChunkSteps&redirect=false)

[15:52:39.0224] <sfink>
`JS::WeakCache<GCHashMap<JS::Heap<Value>, JS::Heap<JSObject*>>>` compiles on central. I'll try esr128.

[15:56:14.0865] <sfink>
I would guess that `shared_ptr<PersistentRooted>` would work fine. `shared_ptr<Rooted>` would not. (But yeah, you won't find examples in the firefox code because as arai says we mostly don't use the standard library containers.)

[15:56:38.0716] <sfink>
er, wait, it compiled there too. Maybe I need to do something with it?

[15:57:46.0452] <sfink>
or is there an internal header that provides something needed? I guess I should try it with mozjs.

[16:04:40.0324] <sfink>
well, it works with my mozjs-115. Which proves nothing, it's just what I had lying around. On to mozjs-128...

[16:24:09.0873] <sfink>
Ok, me no unnerstand. It still seems to be compiling with esr128. My test is:
```
diff --git a/examples/tracing.cpp b/examples/tracing.cpp
--- a/examples/tracing.cpp
+++ b/examples/tracing.cpp
@@ -1,7 +1,9 @@
 #include <memory>
 #include <vector>
 
+#include <js/GCHashTable.h>
 #include <js/Object.h>
+#include <js/SweepingAPI.h>
 #include <jsapi.h>
 
 #include "boilerplate.h"
@@ -50,6 +52,9 @@
   // rooting bare non-GC pointers then both JS::MapTypeToRootKind and
   // JS::GCPolicy need to be defined for SafeBox*. This should be avoided in
   // favor of using a smart-pointer when possible.
+  JS::WeakCache<JS::GCHashMap<JS::Heap<JS::Value>, JS::Heap<JSObject*>>> cache(
+      JS_GetRuntime(cx), cx);
+  
 
   return true;
 }
```

[16:38:41.0097] <ptomato>
huh! what about `JS::WeakCache<JS::GCHashMap<void*, JS::Heap<JSObject*>, js::DefaultHasher<void*>, js::SystemAllocPolicy>`? that is specifically what broke in GJS when we migrated to esr128

[16:40:51.0210] <ptomato>
also, try calling `lookup()` on the hash table? the compile error happens when instantiating the templated `lookup()` method

[16:52:56.0863] <sfink>
yes, I'm getting an error now when I call `put`, though the error is on not having a specialization of `mozilla::DefaultHasher` for `Heap`.

[16:53:49.0061] <ptomato>
I guess we didn't need that because the `Heap` was the value, not the key

[16:54:10.0324] <sfink>
I guess Gecko doesn't use `JS::Heap` in hash-based containers anywhere. SpiderMonkey always uses `HeapPtr` instead.

[16:54:53.0015] <sfink>
but I'll switch to getting the one you need to work first.

[16:54:54.0607] <ptomato>
I guess that explains why it didn't get migrated to `needsSweep`

[16:59:45.0756] <sfink>
do you have a `GCPolicy<void*>` specialization? That's where it barfs for me. 


2024-09-14
[17:00:58.0022] <ptomato>
yes we do. `struct GCPolicy<void*> : public IgnoreGCPolicy<void*> {};`

[17:03:17.0029] <sfink>
oh that's simpler than mine, ok.

[17:03:27.0935] <sfink>
`put` compiles. Let me try a `lookup`.

[17:03:53.0234] <sfink>
aha! It's asking for `needsSweep`!

[17:04:42.0478] <ptomato>
it occurs to me I should've had the foresight to make a minimal example and saved you the time. sorry about that 😬

[17:26:45.0496] <sfink>
meh, I should have this set up so I can create simple ones like this

[18:14:46.0236] <sfink>
ok, after all that exploration, I've arrived at your original conclusion that `needsSweep` should be added for `Heap<T>`. I tried to get it to use `traceWeak`, like `WeakCache<GCHashSet>` does, but that restricts it to only copyable keys and values, and that's not going to fly. (We use it with `UniquePtr`, for example.)

[11:36:39.0083] <ptomato>
sounds good, and thanks! should I make a patch

[11:36:43.0632] <ptomato>
 * sounds good, and thanks! should I make a patch?


2024-09-16
[01:21:41.0210] <jonco>
denispal: There has indeed been a reduction in GC_MS around 7th September with median GC time reduced by ~15%. This could be due to one of the patches in bug 1850746 which skips the decommit phase in shutdown GCs.

[01:21:43.0378] <botzilla>
https://bugzil.la/1850746 — ASSIGNED (jonco) — Investigate whether poison and decommit on chunk creation is optimal

[05:59:07.0417] <denispal>
> <@jonco:mozilla.org> denispal: There has indeed been a reduction in GC_MS around 7th September with median GC time reduced by ~15%. This could be due to one of the patches in bug 1850746 which skips the decommit phase in shutdown GCs.

Nice, those are pretty good improvements.

[08:12:45.0759] <mstange>
jonco: Very nice! But I can't help pointing out that having a separate bug for each landed chunk would make tracking of improvements and regressions (which may need uplifts) much easier.

[08:15:44.0541] <jonco>
I didn't expect there to be any large changes from this

[08:16:13.0848] <jonco>
 * I didn't expect there to be any large changes from this, otherwise I would have split it up

[08:18:38.0023] <jonco>
That is a good point though

[09:19:43.0589] <mgaudet>
uh. A contributor's stack has somehow ended up targeting rBETA on phabricator... 

[09:19:52.0902] <mgaudet>
which I have never seen before. https://phabricator.services.mozilla.com/D220381

[09:21:00.0475] <mgaudet>
I'm going to change this manually, but has anyone seen this before / know what guidance to provide to top it from  happening again?

[09:21:05.0153] <mgaudet>
 * I'm going to change this manually, but has anyone seen this before / know what guidance to provide to stop it from  happening again?

[09:26:38.0210] <arai>
mgaudet: given the revision's parent is 57ee80ddee3f, it's actually based on mozilla-beta.  so I suppose they're working on top of the beta branch

[09:30:22.0567] <arai>
The "Revision Contents" table's "Commits" tab shows it

[09:31:29.0972] <mgaudet>
Oh, Ok. I'll leave a comment to that effect on the rev 

[09:31:45.0738] <mgaudet>
manually retargeting it seems to have worked though


2024-09-17
[08:37:44.0473] <davidj361>
How can I initialize a JS::TranscodeBuffer off another existing C string? Or even JS::TranscodeRange? Can't seem to get it working via .begin() and .length or directly passing it in

[08:40:58.0089] <arai>
TranscodeBuffer is vector, and it doesn't have an ability to borrow buffer from random memory block.  So you'll need to manually copy the content after resizing the buffer.  TranscodeRange is a range that points existing memory block and you can create it from random memory block, as long as it lives longer than the TranscodeRange

[08:41:17.0543] <davidj361>
I see

[08:41:20.0631] <arai>
are you trying to use it for decode?

[08:41:31.0299] <davidj361>
Just doing some manual testing

[08:41:36.0241] <arai>
if so, you just need to create TrancodeRange, pointing the buffer you have

[08:41:39.0779] <davidj361>
 * Just doing some manual testing with preset encoded strings

[08:43:05.0894] <arai>
if you're hitting some error, can you post the code and the error message?

[08:43:50.0143] <arai>
fwiw, here's example: [nsXULElement.cpp](https://searchfox.org/mozilla-central/rev/26a98a7ba56f315df146512c43449412f0592942/dom/xul/nsXULElement.cpp#1568-1573)

[08:50:21.0372] <tcampbell>
jonco:  what are "implicit edges"?

[08:55:10.0467] <sfink>
tcampbell: my weird terminology for ephemeron edges that are "discovered" by tracing a WeakMap.

[08:55:40.0791] <sfink>
although I was hoping they would show up for other scenarios

[08:55:57.0257] <tcampbell>
also, is CC gray marking effectively the same thing as ephemeron marking?

[08:56:11.0568] <tcampbell>
(and do we do those at same or different passes)

[08:56:37.0992] <sfink>
when you have a weakmap M with a key K mapping to value V, once you trace M, you can treat it as a regular (strong) edge from K -> V.

[08:56:43.0444] <sfink>
uh...

[08:58:00.0380] <sfink>
if it's the CC gray marking I'm thinking of, then no. CC gray marking is pretty much the same tracing as black marking from Gecko roots, except now you're marking from Gecko gray roots.

[08:59:48.0744] <tcampbell>
but like ephemeron marking, black takes priority over gray? so you start with a set of grays and trace through with black marks overriding gray marks and see what is still gray at the end of the pass?

[09:00:32.0439] <mccr8>
Black marking runs, then gray marking runs. Gray does not overwrite black.

[09:01:06.0183] <tcampbell>
hmm.. but if something is black already, we don't mark as gray, right?

[09:01:23.0636] <sfink>
gray marking starts from a different set of roots, so that gray marking phase will encounter unmarked cells as well.

[09:01:38.0367] <sfink>
> <@tcampbell:mozilla.org> hmm.. but if something is black already, we don't mark as gray, right?

That's the "Gray does not overwrite black." part

[09:01:47.0677] <sfink>
oh shoot, meeting

[09:02:07.0614] <tcampbell>
right. I guess that looks the same as ephemeron marking to me

[09:02:45.0480] <mccr8>
It is the same with black marking. If you are doing black marking and encounter a black object, you don't continue marking.

[09:02:49.0069] <mccr8>
Likewise with gray marking.

[09:03:37.0306] <mccr8>
(There's also "unmark grey" which is related.)

[09:03:43.0047] <sfink>
ephemeron marking also follows those same rules, but it's a weird enough thing that has to do a different sort of traversal, so I normally think of it as being handled differently. But yes, it's doing the same basic marking. (And at the same time.)

[09:04:15.0658] <mccr8>
The invariant we need to maintain is that there's no edge from a black object to a gray object.

[09:59:11.0477] <sfink>
(back) I like mccr8's way of putting it. We have black roots and gray roots. Regular (non-ephemeron) tracing can be described as finding a minimal (lightest-colored, between white/gray/black) solution where there is no edge from a darker color to a lighter color.

[10:01:33.0919] <sfink>
the weirdness with ephemerons is that you have an edge with two sources and one target. That means now you want a minimal solution where there is no edge where min(source colors) is darker than the target color: in an ephemeron edge (M,K)->V, you can have (black,gray)->gray and you're fine. (black,black)->gray would not be fine.

[10:04:59.0266] <sfink>
I guess "min" is ambiguous. Find the lightest overall graph coloring where target color >= lightest(source colors), and black > gray > white.

[10:05:47.0623] <tcampbell>
thanks. those are useful ways to look at it

[14:20:25.0690] <kfjvj>
I'm encountering an assertion error that is checking for `!IsForwarded` (https://searchfox.org/mozilla-central/source/js/src/gc/Marking.cpp#2601)

Does anyone know wher this might mean?


[14:25:27.0862] <kfjvj>
 * I'm encountering an assertion error that is checking for `!IsForwarded` (https://searchfox.org/mozilla-central/source/js/src/gc/Marking.cpp#2601)

It happens during a call to JS_SetProperty, if that helps.

Does anyone know wher this might mean?


2024-09-18
[00:34:46.0040] <arai>
kfjvj: what's the backtrace for the assertion failure? and how does your code look like?

[07:01:20.0016] <debadree25>
is there a shell command or something to run speedometer3 (like say `./mach run speedometer3`)? or do i have to like build the browser and run https://browserbench.org/Speedometer3.0/ ?

[07:02:04.0534] <arai>
I thought `./mach raptor --browsertime --test speedometer3` would do

[07:02:13.0928] <arai>
with a browser build

[07:03:18.0293] <jandem>
debadree25: starting the browser and going to the website is what I'd do in this case

[07:06:14.0080] <debadree25>
understood thank you!

[07:56:45.0356] <kfjvj>
> <@arai:mozilla.org> kfjvj: what's the backtrace for the assertion failure? and how does your code look like?

The backtrace is pretty complex and it involves a lot of our code.  I was wondering if someone knew what it means for a gc thing to be "forwarded", and under what conditions something may or may not be forwarded.  I thought it would shed some light on my investigation.

[07:58:30.0478] <kfjvj>
> <@kfjvj:matrix.org> The backtrace is pretty complex and it involves a lot of our code.  I was wondering if someone knew what it means for a gc thing to be "forwarded", and under what conditions something may or may not be forwarded.  I thought it would shed some light on my investigation.

However, here is a portion of the trace that doesn't involve our code.

```
#0  0x00007f8fd8215eb9 in bool js::gc::IsAboutToBeFinalizedInternal<JSObject>(JSObject*) () from /home/dpetro17/host_workspace/dcp/build/deployStage/usr/lib/libmozjs-102.so
#1  0x00007f8fd79a8518 in js::ContextChecks::check(JSObject*, int) () from /home/dpetro17/host_workspace/dcp/build/deployStage/usr/lib/libmozjs-102.so
#2  0x00007f8fd7ca1c00 in void JSContext::checkImpl<JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value> >(JS::Handle<JSObject*> const&, JS::Handle<JS::PropertyKey> const&, JS::Handle<JS::Value> const&) () from /home/dpetro17/host_workspace/dcp/build/deployStage/usr/lib/libmozjs-102.so
#3  0x00007f8fd7cb7858 in JS_SetPropertyById(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>) () from /home/dpetro17/host_workspace/dcp/build/deployStage/usr/lib/libmozjs-102.so
#4  0x00007f8fd7cb7af0 in JS_SetProperty(JSContext*, JS::Handle<JSObject*>, char const*, JS::Handle<JS::Value>) () from /home/dpetro17/host_workspace/dcp/build/deployStage/usr/lib/libmozjs-102.so
```

[07:59:41.0784] <jandem>
kfjvj: looks like a problem with your rooting or tracing of the object you pass to `JS_SetProperty`

[08:00:08.0878] <arai>
can you share the caller of `JS_SetProperty` ?  where do the parameters come from?

[08:02:11.0489] <kfjvj>
> <@arai:mozilla.org> can you share the caller of `JS_SetProperty` ?  where do the parameters come from?

```
static constexpr char kQfField[] = "qf";
static constexpr char kMsField[] = "ms";
static constexpr char kValueField[] = "value";

JS::Value toJsHelper(JSContext* ctx, const vsp::os::dcp::AlphaNumericDataBase& data, const JS::Value& valueField) {
    JS::RootedObject obj{ctx, JS_NewPlainObject(ctx)};
    if (!JS_SetProperty(ctx, obj, kQfField, JS::RootedValue(ctx, vs::scripting::conversions::ToJs(ctx, data.qf)))) {
        return JS::NullValue();
    }

    if (!JS_SetProperty(ctx, obj, kMsField, JS::RootedValue(ctx, vs::scripting::conversions::ToJs(ctx, data.ms)))) {
        return JS::NullValue();
    }

    if (!JS_SetProperty(ctx, obj, kValueField, JS::RootedValue(ctx, valueField))) {
        return JS::NullValue();
    }

    return JS::ObjectOrNullValue(obj.get());
}
```

[08:02:21.0010] <kfjvj>
And now that I'm typing that, I think I see the problem.

[08:02:48.0281] <arai>
RootedValue should be allocated on stack

[08:03:16.0505] <kfjvj>
Yep... I was looking way too closely in the wrong place.

[08:03:21.0854] <kfjvj>
Thanks for your help.

[08:04:10.0812] <jandem>
also, use a `Handle` for the `valueField` argument

[08:04:49.0019] <kfjvj>
> <@jandem:mozilla.org> also, use a `Handle` for the `valueField` argument

I thought valueField was supposed to be a char*

[08:05:38.0037] <arai>
just to be clear, I mean, RootedValue should be a local variable there, and the local variable should live acorss the JS_SetProperty call.  otherwise it's destructed before calling JS_SetProperty

[08:06:04.0103] <jandem>
> <@kfjvj:matrix.org> I thought valueField was supposed to be a char*

I meant the `JS::Value& valueField` argument

[08:06:37.0652] <kfjvj>
> <@arai:mozilla.org> just to be clear, I mean, RootedValue should be a local variable there, and the local variable should live acorss the JS_SetProperty call.  otherwise it's destructed before calling JS_SetProperty

Oh yes, I understand precisely what you mean.  As soon as I copied that code I saw the issue.  Not everyone on my team knows the proper use of the rooting API, and I had missed it before.

[08:06:41.0761] <jandem>
> <@kfjvj:matrix.org> I thought valueField was supposed to be a char*

 * I meant the `JS::Value& valueField` argument should be a `Handle`

[08:11:38.0647] <arai>
I wonder if our clang plugin works on embeddings.  we have annotations for those classes ([MOZ_RAII](https://searchfox.org/mozilla-central/rev/a13db27562f9237db97e2ea5b01dc879d5b55b74/js/public/RootingAPI.h#1164) in this case) to prevent that kind of misuse.

[08:12:45.0026] <arai>
 * I wonder if [our clang plugin](https://searchfox.org/mozilla-central/source/build/clang-plugin) works on embeddings.  we have annotations for those classes ([MOZ\_RAII](https://searchfox.org/mozilla-central/rev/a13db27562f9237db97e2ea5b01dc879d5b55b74/js/public/RootingAPI.h#1164) in this case) to prevent that kind of misuse.

[08:18:50.0234] <kfjvj>
As a side note to the above discussion, I'm surprised our code compiled at all.  I thought that JS::Rooted had deleted move-constructors.

[08:21:05.0797] <kfjvj>
Although I suppose that the if the function in question is converting from Rooted to Handle, that would bypass any need for a move constructor.

[10:04:07.0521] <debadree25>
is there any additional installation of libraries etc required if i am building with `--with-temporal-api` I get this linker error whenever i try:
```
06.51 ld64.lld: error: undefined symbol: ICU4XCalendar_destroy
 1:06.51 >>> referenced by Calendar.cpp:1228 (/Users/debadreechatterjee/Documents/personal/mozilla-unified/js/src/builtin/temporal/Calendar.cpp:1228)
 1:06.51 >>>               ../builtin/temporal/Unified_cpp_builtin_temporal0.o:(symbol BuiltinCalendarDay(JSContext*, js::temporal::CalendarId, js::temporal::PlainDate const&, JS::MutableHandle<JS::Value>)+0xe4)
 1:06.51 >>> referenced by Calendar.cpp:1228 (/Users/debadreechatterjee/Documents/personal/mozilla-unified/js/src/builtin/temporal/Calendar.cpp:1228)
```
 1:06.51 >>>               ../builtin/temporal/Unified_cpp_builtin_temporal0.o:(symbol BuiltinCalendarEra(JSContext*, js::temporal::CalendarId, js::temporal::PlainDate const&, JS::MutableHandle<JS::Value>)+0x150)
 1:06.51 >>> referenced by Calendar.cpp:1228 (/Users/debadreechatterjee/Documents/personal/mozilla-unified/js/src/builtin/temporal/Calendar.cpp:1228)
 1:06.51 >>>               ../builtin/temporal/Unified_cpp_builtin_temporal0.o:(symbol BuiltinCalendarEraYear(JSContext*, js::temporal::CalendarId, js::temporal::PlainDate const&, JS::MutableHandle<JS::Value>)+0x138)
 1:06.52 >>> referenced 14 more times
 1:06.54 ld64.lld: error: undefined symbol: ICU4XDate_destroy
 1:06.54 >>> referenced by Calendar.cpp:1248 (/Users/debadreechatterjee/Documents/personal/mozilla-unified/js/src/builtin/temporal/Calendar.cpp:1248)
 1:06.54 >>>               ../builtin/temporal/Unified_cpp_builtin_temporal0.o:(symbol BuiltinCalendarDay(JSContext*, js::temporal::CalendarId, js::temporal::PlainDate const&, JS::MutableHandle<JS::Value>)+0xd0)....

[10:04:29.0687] <debadree25>
 * is there any additional installation of libraries etc required if i am building with `--with-temporal-api` I get this linker error whenever i try:

```
06.51 ld64.lld: error: undefined symbol: ICU4XCalendar_destroy
 1:06.51 >>> referenced by Calendar.cpp:1228 (/Users/debadreechatterjee/Documents/personal/mozilla-unified/js/src/builtin/temporal/Calendar.cpp:1228)
 1:06.51 >>>               ../builtin/temporal/Unified_cpp_builtin_temporal0.o:(symbol BuiltinCalendarDay(JSContext*, js::temporal::CalendarId, js::temporal::PlainDate const&, JS::MutableHandle<JS::Value>)+0xe4)
 1:06.51 >>> referenced by Calendar.cpp:1228 (/Users/debadreechatterjee/Documents/personal/mozilla-unified/js/src/builtin/temporal/Calendar.cpp:1228)
```

[10:04:51.0423] <arai>
any chance you're using the same obj directory as different configuration?

[10:05:26.0049] <arai>
if that's the case, using different obj directory, or `./mach clobber` to remove the obj directory can solve that kind of linker issue sometimes

[10:06:25.0179] <debadree25>
ohh yes i am ah! trying

[10:18:06.0200] <mgaudet|sick>
debadree25: Something you'll see in all my mozconfigs is that each configuration gets its own object directory: https://github.com/mgaudet/mozconfigs/blob/master/debug_shell.mozconfig#L15 

It's pretty wasteful from a disk-space usage perspective (though cleanup is easy... `rm -rf obj-*`), but it's nice for avoiding these sorts of config-change issues 

[10:23:17.0314] <mgaudet>
Hrm... the problem of having too many source directories is you can lose a patch :P 

[10:29:34.0895] <mgaudet>
Bryan Thrall [:bthrall]: I forgot to mention my number one pain point! Python. I literally cannot with python these days. It seems like literally any time I have to do anything with python it's wrong, broken, or yells at me .

[10:30:08.0551] <mgaudet>
I truly loathe how much mozilla development relies on python as a result of this pain 

[10:31:20.0644] <mgaudet>
https://gist.github.com/mgaudet/b42b078859b26d1f8ddb0f4c2a344564 is the latest

[10:31:54.0819] <mgaudet>
And the problem with all this python stuff is that I can't get into a reliable state where I understand how all the pieces work and everything can be managed smoothly. Instead, I just live in this space where everything is gently broken at all times 

[10:32:59.0722] <debadree25>
> <@mgaudet:mozilla.org> debadree25: Something you'll see in all my mozconfigs is that each configuration gets its own object directory: https://github.com/mgaudet/mozconfigs/blob/master/debug_shell.mozconfig#L15 
> 
> It's pretty wasteful from a disk-space usage perspective (though cleanup is easy... `rm -rf obj-*`), but it's nice for avoiding these sorts of config-change issues

Ah i see got it! its normally ok my laptop has lot of space and i have nothing else on it hehe :-)

[10:33:30.0516] <mgaudet>
> <@debadree25:mozilla.org> Ah i see got it! its normally ok my laptop has lot of space and i have nothing else on it hehe :-)

Excellent. Hopefully that trick will give you a little more enjoyment during development 

[10:35:22.0183] <mgaudet>
> <@mgaudet:mozilla.org> And the problem with all this python stuff is that I can't get into a reliable state where I understand how all the pieces work and everything can be managed smoothly. Instead, I just live in this space where everything is gently broken at all times

Oh right https://bugzilla.mozilla.org/show_bug.cgi?id=1876182

[10:38:20.0260] <padenot>
mgaudet: do it like me, install `pipx`, and pretend the rest never existed

[10:39:26.0913] <mgaudet>
I even have pipx installed! I just don't know how to get my environments all sane and pipx'd 

[10:39:45.0047] <mgaudet>
/me wishes bootstrap would aid here :) 

[10:51:06.0254] <bvisness>
> <@mgaudet:mozilla.org> https://gist.github.com/mgaudet/b42b078859b26d1f8ddb0f4c2a344564 is the latest

oh yeah I encountered that the other day and it just went away when I restarted my terminal

[10:52:56.0542] <mgaudet>
MADDENING

[10:53:22.0737] <mgaudet>
Seriously. I lay 90% of this at the feet of python, but it's legit my number one pain point 

[11:02:05.0250] <tcampbell>
> <@mgaudet:mozilla.org> Hrm... the problem of having too many source directories is you can lose a patch :P

I occasionally will use git worktrees for that. The branch state is shared directly for the different source directories

[11:03:38.0865] <mgaudet>
> <@tcampbell:mozilla.org> I occasionally will use git worktrees for that. The branch state is shared directly for the different source directories

Yeah, I've used that, and mercurial equivalent. In my case, the issue is I have build-machine:{mercurial, git, sapling}, laptop:{mercurial, git, sapling} -- none of which share backing stores 

[11:04:15.0456] <mgaudet>
90% of recent work has been in build-machine:git, but occasionally I've had reason to look for patches elsewhere, and so that's a log of hunting. 

[11:04:52.0523] <mgaudet>
(Also bizarrely `git log | grep BugNum` didn't find the patch that was right freaking there? Until after I did `moz-phab patch rev` and then I spotted it.) 

[11:05:28.0719] <tcampbell>
I was trying to find a way to sync reflogs somehow. What I was going to do whenever my replacement laptop ever arrives is set `git maintence` to auto fetch from build machine to laptop since most patches originate from build machine, but sometimes I read them from laptop offline

[11:05:45.0961] <arai>
`git reflog` might find it?

[13:27:33.0480] <arai>
Bryan Thrall [:bthrall]: am I correct that the special case in https://phabricator.services.mozilla.com/D221206 is removed?

[13:57:33.0818] <Bryan Thrall [:bthrall]>
arai: the case where `lineEnd` could be zero when `line` is not zero is now gone, because of the change on js/src/debugger/Debugger.cpp:5411, and checked by the assertion on lines 5804-5805.
That is the one you mean, right?

[13:58:23.0787] <arai>
yeah, that one.  and if that's gone, the assertion in `scriptIsLineMatch` looks unnecessary

[14:04:04.0877] <Bryan Thrall [:bthrall]>
Yes, I think you're right


2024-09-19
[09:32:50.0310] <mgaudet>
bvisness: Haystack is cool... but the choice to steal tab as 'focus next container' in editor context is truly a chaotic one

[09:33:14.0514] <mgaudet>
Doubly so since the keystroke help seems to suggest it's an uneditable choice? 

[09:38:14.0907] <bvisness>
I think keystrokes are different if you actually have a cursor in a window vs. just having a window selected

[09:38:19.0299] <bvisness>
I haven't had issues with tab

[09:41:23.0826] <mgaudet>
It says that... but yeah, I can't insert a tab -- just changes editors

[09:41:55.0293] <mgaudet>
I will try turning it off and on again -- maybe it got confused when it reconnected the remote

[09:42:19.0276] <mgaudet>
Ah yes. Rebooting fixed it 

[10:40:04.0841] <mgaudet>
tcampbell: (low priority) What ever happened to your task controller patches you had been poking at in Dublin? 

[10:41:10.0438] <tcampbell>
they are in a merge conflict I still need to resolve. In classic fashion though, Pixel6 got much faster and other things got slower so more tuning is needed

[10:49:26.0220] <mgaudet>
oh fun :) Ok. Just realized I had lost track of it 


2024-09-20
[07:02:35.0075] <davidj361>
Does mozilla::Vector<T> have a `typename` data member saying what T is? tbh I can't find the real actual definition file of Vector.

[07:02:48.0889] <davidj361>
 * Does mozilla::Vector\<T> have a `typename` data member saying what T is? tbh I can't find the real actual definition file of Vector as there are multiple definition files?

[07:03:22.0970] <padenot>
davidj361: https://searchfox.org/mozilla-central/source/mfbt/Vector.h#342, you can use this site to search for anything

[07:03:40.0571] <davidj361>
> <@padenot:mozilla.org> davidj361: https://searchfox.org/mozilla-central/source/mfbt/Vector.h#342, you can use this site to search for anything

I was looking at https://searchfox.org/mozilla-esr102/source/js/src/irregexp/util/VectorShim.h#49

[07:04:21.0110] <padenot>
davidj361: https://searchfox.org/mozilla-central/source/mfbt/Vector.h#540 is what you're after

[07:04:26.0756] <padenot>
you link isn't mozilla::Vector

[07:05:27.0481] <davidj361>
ah true...different namespace...

[10:37:49.0874] <debadree25>
how do i run just the js shell when i have a browser build? i did have `--enable-js-shell` in my mozconfig

[10:46:25.0546] <arai>
directly run it with `./OBJDIR/dist/bin/js` maybe?  I don't know if there's `mach` wrapper

[13:10:40.0640] <sfink>
yeah, there probably ought to be some general thing that runs an arbitrary executable in `$OBJDIR/dist/bin`, with `LD_LIBRARY_PATH` etc. set appropriately.

[13:11:08.0426] <sfink>
I was going to say it would be partly redundant with eg `mach xpcshell`... except I just tried that, and it wasn't able to find `libxul.so`!

[13:12:40.0310] <mgaudet>
re: xpcshell I swear once upon a time there was a `run-mozilla.sh` script that dealt with this, but I tried finding it recently and was totally flummoxed when I could no longer find it .

[13:13:02.0250] <mgaudet>
> <@sfink:mozilla.org> I was going to say it would be partly redundant with eg `mach xpcshell`... except I just tried that, and it wasn't able to find `libxul.so`!

I guess that should be a bug opened? 

[13:13:55.0919] <sfink>
yeah, I thought at some point `firefox` would use `run-mozilla.sh firefox-bin` or something. But I was never sure of the exact setup.

[13:14:29.0245] <sfink>
oh, open a bug, right. That would be smarter than running off and looking at how hard it would be to implement `mach exec` or whatever. Ok, fine.

[13:14:34.0881] <mgaudet>
(I am so happy to hear you say that... it makes me feel like less of a crazy person) 

[13:19:54.0477] <sfink>
filed bug 1920227

[13:20:14.0770] <sfink>
ugh, time to go wake up botzilla again. I should probably set it up as a service.

[13:36:40.0073] <debadree25>
BaaS -> Botzilla as a Service?

[13:40:46.0240] <sfink>
something like that. Except I'm lazy, have to run for a bit, and am bad at ops, so for the time being I just stuck it in a while true restart loop.


2024-09-22
[01:22:37.0416] <kbrecordzz>
Hey! I have a question about Spidermonkey's parser. When it comes to the "scanning" part of the parser (the one that removes whitespace and creates tokens), is it a very simple or a more complex process? I could imagine that the time spent in the scanner is proportional to the number of characters in the code, like, the scanner goes through each character and does pretty much the same job for each one. Or does it spend more time on examining the semantic meaning of the whole code? If it's the latter, the amount spent in the scanner should depend more on the code's complexity than the code's length, and I'm not sure which way Spidermonkey's parser works.

[01:40:12.0016] <arai>
kbrecordzz: in most case the parsing is done in single-pass, with a lookahead buffer with 2 tokens, so it's mostly proportional to the code length.  There are some case where the parser rewinds the tokenizer's state.  One is the arrow function, where the parameter part is re-parsed once it hits the arrow token (`=>`)

[01:41:58.0010] <arai>
[this part handles the rewind for the arrow function](https://searchfox.org/mozilla-central/rev/f4c888365156e2a4fd08c7b3591857e9cb439087/js/src/frontend/Parser.cpp#10335-10344)

[01:44:48.0029] <arai>
the other case happens in the optimization to skip generating the AST for inner functions.  When an inner function is found, the parser tries to skip compiling the inner function but instead just apply syntacitc-validation (called syntax-parsing), and defer the compilation until the function gets called.  then, the syntax-parsing is not supported in some cases (e.g. new-ish syntax), and in that case the syntax-parsing is aborted and full-parsing is performed.  that also rewinds the tokenizer's state.  that happens [here](https://searchfox.org/mozilla-central/rev/f4c888365156e2a4fd08c7b3591857e9cb439087/js/src/frontend/Parser.cpp#3217-3227)

[01:46:28.0888] <arai>
the last case is where the function body has a different directive (e.g. "use strict") than the enclosing context, where the parameters need to be re-parsed to apply different early-error rules.  that happens [here](https://searchfox.org/mozilla-central/rev/f4c888365156e2a4fd08c7b3591857e9cb439087/js/src/frontend/Parser.cpp#3138-3140)

[01:51:36.0399] <arai>
also, in term of tokenizer, the syntax-parsed inner functions will be re-tokenized when the function is compiled later.  At this point the inner-inner functions are simply skipped with the pre-computed source position, and not re-tokenized.

[01:53:36.0639] <arai>
 * also, in term of tokenizer, the syntax-parsed inner functions will be re-tokenized when the function is compiled later.  At this point the inner-inner functions are simply skipped with the pre-computed source position, and not re-tokenized. (happens [here](https://searchfox.org/mozilla-central/rev/f4c888365156e2a4fd08c7b3591857e9cb439087/js/src/frontend/Parser.cpp#3082-3086))

[01:54:05.0642] <kbrecordzz>
> <@arai:mozilla.org> kbrecordzz: in most case the parsing is done in single-pass, with a lookahead buffer with 2 tokens, so it's mostly proportional to the code length.  There are some case where the parser rewinds the tokenizer's state.  One is the arrow function, where the parameter part is re-parsed once it hits the arrow token (`=>`)

Thanks for a great explanation. What does this lookahead buffer contain? If parsing is done before tokens are created, how can it have a lookahead buffer containing tokens already?

[01:55:16.0993] <arai>
err, my explanation was obsolete. the lookahead buffer contains 3 tokens

[01:56:29.0115] <arai>
the lookahead buffer contains the tokens that are once gotten and then ungotten when the code doesn't match certain syntax

[01:57:23.0473] <arai>
 * err, my explanation was obsolete. the lookahead buffer contains 2 or 3 tokens, depending on the build configuration

[01:57:40.0089] <arai>
 * err, my explanation was obsolete. the lookahead buffer contains 2 or 3 tokens, depending on the build configuration ([ref](https://searchfox.org/mozilla-central/rev/f4c888365156e2a4fd08c7b3591857e9cb439087/js/src/frontend/TokenStream.h#282-285))

[01:58:28.0880] <arai>
what do you mean with "parsing is done before tokens are created" ?

[01:59:37.0648] <arai>
parsing and tokenization are done at the same time.  the parser asks tokenizer ([TokenStream](https://searchfox.org/mozilla-central/rev/f4c888365156e2a4fd08c7b3591857e9cb439087/js/src/frontend/TokenStream.h) to get the next token, and branch based on it and the parser's state

[01:59:49.0167] <arai>
 * parsing and tokenization are done at the same time.  the parser asks tokenizer ([TokenStream](https://searchfox.org/mozilla-central/rev/f4c888365156e2a4fd08c7b3591857e9cb439087/js/src/frontend/TokenStream.h)) to get the next token, and branch based on it and the parser's state

[02:00:32.0963] <kbrecordzz>
Okay, I wrongly assumed parsing and tokenization were two completely separate steps.

[02:01:23.0443] <arai>
err, maybe I should've clarified this first.  SpiderMonkey's parser is recursive descent parser.  the parser has methods that mostly corresponds to each AST node, or similar unit

[02:04:38.0794] <arai>
the tokenization needs to be done depending on each state, given a certain character sequence can have different meaning depending on the state.  for example, `/a/g` sequence is a single regexp token if that appears in the context where a literal can appear, but if it appears in the context where only operator can appear, it should be tokenized as "division operator, identifier, division operator, and identifier" tokens

[02:08:14.0139] <arai>
and also the tokenizer need to insert a semicolon token (see https://tc39.es/ecma262/#sec-automatic-semicolon-insertion for more details) depending on the context.  So, the tokenization cannot be performed as a completely separate step than parsing (or at least some kind of semantic analysis)

[02:20:21.0617] <arai>
the comment for [js::frontend::Token::Modifier](https://searchfox.org/mozilla-central/rev/f4c888365156e2a4fd08c7b3591857e9cb439087/js/src/frontend/Token.h#74-128) explains about the behavior around slash.  parser passes one of those modifiers when getting tokens


2024-09-25
[21:58:51.0395] <mayankleoboy1>
There is a ~[40ms improvement](https://treeherder.mozilla.org/perfherder/graphs?highlightAlerts=1&highlightChangelogData=1&highlightCommonAlerts=0&replicates=0&series=mozilla-central,86614,1,13&timerange=5184000) (660ms -> 620ms)  on AWFY-WASM-Godot-wasm-instantiate since 14Sep2024 on mozilla-central. 
I dont know how to pinpoint this further, but I suspect the improvement to the lazy-tiering and/or the recent ONNX improvement work could be the reasons.

[21:59:45.0497] <mayankleoboy1>
 * There is a ~[40ms improvement](https://treeherder.mozilla.org/perfherder/graphs?highlightAlerts=1&highlightChangelogData=1&highlightCommonAlerts=0&replicates=0&series=mozilla-central,86614,1,13&timerange=5184000) (660ms -> 620ms)  on AWFY-WASM-Godot-wasm-instantiate (Firefox (wasm-optimizing)) since 14Sep2024 on mozilla-central.
I dont know how to pinpoint this further, but I suspect the improvement to the lazy-tiering and/or the recent ONNX improvement work could be the reasons.

[22:09:50.0123] <mayankleoboy1>
* There is a ~
40ms improvement (660ms -> 620ms)  on AWFY-WASM-Godot-wasm-instantiate (Firefox (wasm-optimizing)) since 14Sep2024 on mozilla-central.
I dont know how to pinpoint this further. (The recent work on lazy-tiering and ONNX perf work come to mind)

[23:20:42.0856] <jandem>
mayankleoboy1: the mac chart is less noisy and points to 1918970?

[00:00:52.0095] <mayankleoboy1>
> <@jandem:mozilla.org> mayankleoboy1: the mac chart is less noisy and points to 1918970?

Correct. Macos has very clear improvements in all the webasswmbly-godot-* numbers in that range.
The range does include both bug 1918970 and bug 1911071, which is where i am not certain what caused it.
In any case, i just wanted to point out improvements (that may/may not be captured in automated perf-sheriffing) 

[00:00:53.0852] <botzilla>
https://bugzil.la/1918970 — RESOLVED (jandem) — Use a vector instead of linked list for VirtualRegister ranges

[00:00:53.0926] <botzilla>
https://bugzil.la/1911071 — RESOLVED (jseward) — Initial tunables and heuristics for wasm lazy tiering and speculative inlining

[00:02:35.0769] <jseward>
mayankleoboy1: I would be surprised if this improvement was caused by lazy tiering, since it is not enabled by default yet.

[00:19:46.0867] <jandem>
mayankleoboy1: thanks. We often wouldn't know about perf improvements/regressions on subtests if not for your comments

[00:20:10.0965] <jandem>
 * mayankleoboy1: thanks. We often wouldn't know about perf improvements/regressions on subtests if not for your (bug) comments

[03:49:59.0541] <mayankleoboy1>
Also 25% improvement on jetstream2 - float-mm but *only* on mac (which is surprising to me) 

[04:17:01.0684] <jandem>
that is curious but I think many of these wasm tests are micro-benchmarks so they might be more sensitive to relatively small changes

[04:18:59.0829] <jandem>
 * that is curious but I think many of these wasm tests in JetStream are micro-benchmarks so they might be more sensitive to relatively small changes

[04:19:40.0122] <jandem>
if Godot is the 9.4 MB godot.wasm file we have in tree, it might benefit from some of the other changes I have in flight because that's pretty large. Fingers crossed

[06:55:36.0861] <davidj361>
I'm noticing issues where I cannot execute a stencil that's decoded from text where the encoded stencil variable isn't carried over from encoding as I don't want to carry it over.

[06:56:11.0276] <davidj361>
 * I'm noticing issues where I cannot execute a stencil that's decoded from a given given `JS::TranscodeBuffer` where the encoded stencil variable isn't carried over from encoding as I don't want to carry it over.

[07:01:19.0432] <arai>
can you describe more about what you observe?  what do you observe with "cannot execute" ?  what do you mean by "isn't carried over" ?

[07:04:02.0567] <davidj361>
```cpp
void StencilProcessor::execute(JSContext* ctx, RefPtr<JS::Stencil>& stencil) const {
    if (stencil == nullptr) {
        LOG("Given stencil is a nullptr");
        return;
    }

    JS::InstantiateOptions opts;
    JS::RootedScript script(ctx, JS::InstantiateGlobalStencil(ctx, opts, stencil));
    if (!script) {
        LOG("RootedScript is invalid");
        return;
    }

    JS::RootedValue rval(ctx);
    if (!JS_ExecuteScript(ctx, script, &rval)) {
        LOG("Unable to execute stencil");
        return;
    }
    return;
}

```

[07:04:46.0905] <davidj361>
 * Calling this class function where I just pass in the stencil after it has been decoded in a separate function.
```cpp
void StencilProcessor::execute(JSContext* ctx, RefPtr<JS::Stencil>& stencil) const {
    if (stencil == nullptr) {
        LOG("Given stencil is a nullptr");
        return;
    }

    JS::InstantiateOptions opts;
    JS::RootedScript script(ctx, JS::InstantiateGlobalStencil(ctx, opts, stencil));
    if (!script) {
        LOG("RootedScript is invalid");
        return;
    }

    JS::RootedValue rval(ctx);
    if (!JS_ExecuteScript(ctx, script, &rval)) {
        LOG("Unable to execute stencil");
        return;
    }
    return;
}

```

[07:05:07.0251] <davidj361>
 * Calling this class function where I just pass in the stencil after it has been decoded in a separate function. The JSContext, global, and autorealm is all made and working way above the stack.

```cpp
void StencilProcessor::execute(JSContext* ctx, RefPtr<JS::Stencil>& stencil) const {
    if (stencil == nullptr) {
        LOG("Given stencil is a nullptr");
        return;
    }

    JS::InstantiateOptions opts;
    JS::RootedScript script(ctx, JS::InstantiateGlobalStencil(ctx, opts, stencil));
    if (!script) {
        LOG("RootedScript is invalid");
        return;
    }

    JS::RootedValue rval(ctx);
    if (!JS_ExecuteScript(ctx, script, &rval)) {
        LOG("Unable to execute stencil");
        return;
    }
    return;
}

```

[07:05:17.0674] <davidj361>
 * Calling this class function where I just pass in the stencil after it has been decoded in a separate function. The JSContext, global, and autorealm is all made and working way above in the stack.

```cpp
void StencilProcessor::execute(JSContext* ctx, RefPtr<JS::Stencil>& stencil) const {
    if (stencil == nullptr) {
        LOG("Given stencil is a nullptr");
        return;
    }

    JS::InstantiateOptions opts;
    JS::RootedScript script(ctx, JS::InstantiateGlobalStencil(ctx, opts, stencil));
    if (!script) {
        LOG("RootedScript is invalid");
        return;
    }

    JS::RootedValue rval(ctx);
    if (!JS_ExecuteScript(ctx, script, &rval)) {
        LOG("Unable to execute stencil");
        return;
    }
    return;
}

```

[07:05:21.0998] <davidj361>
 * Calling this class function where I just pass in the stencil after it has been decoded in a separate function. The JSContext, global, and autorealm is all made and working way above in the call stack.

```cpp
void StencilProcessor::execute(JSContext* ctx, RefPtr<JS::Stencil>& stencil) const {
    if (stencil == nullptr) {
        LOG("Given stencil is a nullptr");
        return;
    }

    JS::InstantiateOptions opts;
    JS::RootedScript script(ctx, JS::InstantiateGlobalStencil(ctx, opts, stencil));
    if (!script) {
        LOG("RootedScript is invalid");
        return;
    }

    JS::RootedValue rval(ctx);
    if (!JS_ExecuteScript(ctx, script, &rval)) {
        LOG("Unable to execute stencil");
        return;
    }
    return;
}

```

[07:06:54.0018] <davidj361>
 * Calling this class function where I just pass in the stencil after it has been decoded in a separate function. The JSContext, global, and autorealm is all made and working way above in the call stack.

```cpp
void StencilProcessor::execute(JSContext* ctx, RefPtr<JS::Stencil>& stencil) const {
    if (stencil == nullptr) {
        LOG("Given stencil is a nullptr");
        return;
    }

    JS::InstantiateOptions opts;
    JS::RootedScript script(ctx, JS::InstantiateGlobalStencil(ctx, opts, stencil));
    if (!script) {
        LOG("RootedScript is invalid");
        return;
    }

    JS::RootedValue rval(ctx);
    if (!JS_ExecuteScript(ctx, script, &rval)) {
        LOG("Unable to execute stencil");
        return;
    }
    return;
}
```

[07:07:29.0876] <davidj361>
```cpp
void StencilProcessor::decode(JSContext* ctx, const JS::TranscodeBuffer& buffer,
                                                 RefPtr<JS::Stencil>& stencil) const {
    if (buffer.empty()) {
        LOG("Given JS::TranscodeBuffer is empty");
        return;
    }
    JS::TranscodeRange range(buffer.begin(), buffer.length());
    JS::DecodeOptions decodeOptions;

    if (JS::DecodeStencil(ctx, decodeOptions, range, getter_AddRefs(stencil)) != JS::TranscodeResult::Ok) {
        LOG("Unable to decode Stencil");
        return;
    }

    if (stencil == nullptr) {
        LOG("Decoded Stencil is a nullptr");
        return;
    }
    return;
}}
```

[07:08:28.0655] <davidj361>
 * Where the `RefPtr<JS::Stencil>` is initialized above this call as new variable. And `JS::TranscodeBuffer` was manually read into from a file.
```cpp
void StencilProcessor::decode(JSContext* ctx, const JS::TranscodeBuffer& buffer,
                                                 RefPtr<JS::Stencil>& stencil) const {
    if (buffer.empty()) {
        LOG("Given JS::TranscodeBuffer is empty");
        return;
    }
    JS::TranscodeRange range(buffer.begin(), buffer.length());
    JS::DecodeOptions decodeOptions;

    if (JS::DecodeStencil(ctx, decodeOptions, range, getter_AddRefs(stencil)) != JS::TranscodeResult::Ok) {
        LOG("Unable to decode Stencil");
        return;
    }

    if (stencil == nullptr) {
        LOG("Decoded Stencil is a nullptr");
        return;
    }
    return;
}}
```

[07:08:55.0460] <davidj361>
 * Where the `RefPtr<JS::Stencil>` is initialized above this call as new variable. And `JS::TranscodeBuffer` was manually initialized from reading a binary file.

```cpp
void StencilProcessor::decode(JSContext* ctx, const JS::TranscodeBuffer& buffer,
                                                 RefPtr<JS::Stencil>& stencil) const {
    if (buffer.empty()) {
        LOG("Given JS::TranscodeBuffer is empty");
        return;
    }
    JS::TranscodeRange range(buffer.begin(), buffer.length());
    JS::DecodeOptions decodeOptions;

    if (JS::DecodeStencil(ctx, decodeOptions, range, getter_AddRefs(stencil)) != JS::TranscodeResult::Ok) {
        LOG("Unable to decode Stencil");
        return;
    }

    if (stencil == nullptr) {
        LOG("Decoded Stencil is a nullptr");
        return;
    }
    return;
}}
```

[07:09:50.0026] <davidj361>
it fails on `if (!JS_ExecuteScript(ctx, script, &rval)) {` in `execute(..)`

[07:11:20.0248] <davidj361>
 * it fails on `JS_ExecuteScript(ctx, script, &rval)` in `execute(..)`

[07:11:34.0469] <davidj361>
 * Where the `RefPtr<JS::Stencil>` is initialized above this call as a fresh variable. And `JS::TranscodeBuffer` was manually initialized from reading a binary file.

```cpp
void StencilProcessor::decode(JSContext* ctx, const JS::TranscodeBuffer& buffer,
                                                 RefPtr<JS::Stencil>& stencil) const {
    if (buffer.empty()) {
        LOG("Given JS::TranscodeBuffer is empty");
        return;
    }
    JS::TranscodeRange range(buffer.begin(), buffer.length());
    JS::DecodeOptions decodeOptions;

    if (JS::DecodeStencil(ctx, decodeOptions, range, getter_AddRefs(stencil)) != JS::TranscodeResult::Ok) {
        LOG("Unable to decode Stencil");
        return;
    }

    if (stencil == nullptr) {
        LOG("Decoded Stencil is a nullptr");
        return;
    }
    return;
}}
```

[07:12:53.0703] <arai>
okay. and what do you mean with "carried over" part?

[07:13:51.0056] <arai>
also, have you checked the pending exception when `execute` fails?

[07:13:57.0323] <davidj361>
like this is thrown away `RefPtr<JS::Stencil> stencil = JS::CompileGlobalScriptToStencil(ctx, opts, source);`

[07:14:08.0173] <davidj361>
 * like this is thrown away `RefPtr<JS::Stencil> stencil = JS::CompileGlobalScriptToStencil(ctx, opts, source);` from encoding and compilation

[07:14:47.0398] <davidj361>
 * like this is thrown away `RefPtr<JS::Stencil> stencil = JS::CompileGlobalScriptToStencil(ctx, opts, source);` from encoding and compilation and not given to decoding and execution as I want it purely reliant on the binary files.

[07:15:55.0362] <arai>
okay, so you don't observe the issue when you instantiate the stencil from `JS::CompileGlobalScriptToStencil`, but you observe when you instantiate the decoded stencil?

[07:16:10.0456] <arai>
the pending exception would have some hint what's going on

[07:16:15.0225] <arai>
try checking the error message

[07:22:53.0171] <davidj361>
oh wow, i overlooked something...

[07:23:02.0934] <davidj361>
Yeah that exception explains things now...

[07:26:26.0492] <arai>
good to hear that you've figured it out :)  feel free to ping me when you hit any other issue with stencil or transcoding

[07:27:36.0479] <davidj361>
it was a very dumb issue where obviously I assumed something to have existed in the JS code but wasn't defined 🤦‍♂️

[07:31:48.0392] <arai>
haha

[07:38:26.0641] <davidj361>
Also I wasn't sure to use `RefPtr<JS::Stencil>` as a reference, but I noticed it wasn't modifying the original variable without it. I assumed it was some implied pointer where I didn't need to use `&`.

[07:43:05.0868] <arai>
the `Ref` is for reference count, where it manages incrementing/decrementing the reference count of the target object when adding new reference or removing reference.  if you want an out parameter, you indeed need `&`.  you can also return `already_AddRefed<JS::Stencil>` as return value (see [AlreadyAddRefed.h](https://searchfox.org/mozilla-central/rev/af3eccb4999427e42fdcea558297f1cec70dc4db/mfbt/AlreadyAddRefed.h) for more details) if out parameter doesn't fit

[07:43:24.0310] <arai>
 * the `Ref` is for reference count, where `RefPtr` manages incrementing/decrementing the reference count of the target object when adding new reference or removing reference.  if you want an out parameter, you indeed need `&`.  you can also return `already_AddRefed<JS::Stencil>` as return value (see [AlreadyAddRefed.h](https://searchfox.org/mozilla-central/rev/af3eccb4999427e42fdcea558297f1cec70dc4db/mfbt/AlreadyAddRefed.h) for more details) if out parameter doesn't fit

[08:47:32.0218] <jonco>
sfink: ping


2024-09-26
[09:32:14.0617] <mgaudet>
jandem: Can we inline function calls across realms? Or do we avoid taht? 

[09:32:23.0605] <mgaudet>
 * jandem: Can we inline function calls across realms? Or do we avoid that

[09:34:35.0355] <jandem>
mgaudet: we avoid it. Checked [here](https://searchfox.org/mozilla-central/rev/6b6c3965d0a79880493b8ae44a92389b72d90636/js/src/jit/TrialInlining.cpp#511-512)

[09:34:58.0789] <mgaudet>
Perfect. That rules out a potential issue

[13:39:57.0481] <mgaudet>
Interesting blog post; https://bytecodealliance.org/articles/new-stack-maps-for-wasmtime 

[13:40:38.0320] <mgaudet>
"represent your safe points & Stack maps directly in your IR so your compiler can just be a dumb simple compiler with less special case magic" 

[15:15:58.0847] <sfink>
fitzgen is a great writer

[15:16:11.0732] <sfink>
(a great engineer too)


2024-09-27
[02:25:43.0463] <Ms2ger>
A case of "if you put it like this, how could you ever think of doing it the other way"

[07:06:16.0676] <bvisness>
I am seeking JS spec opinions from whoever knows about such things

[07:06:18.0825] <bvisness>
https://github.com/WebAssembly/memory64/issues/85

[07:07:09.0969] <bvisness>
So, for memory64's JS API, we basically want to accept `[EnforceRange] unsigned long` for i32 memories, and `bigint` for i64 memories

[07:07:34.0225] <bvisness>
both of these are somewhat forgiving about what they accept, e.g. with strings

[07:08:09.0289] <bvisness>
but the way it's currently specified, we can't actually use string values for `bigint` params the way you'd expect

[09:25:06.0174] <yury>
Trying to see some machine code of mozjs generated for Android's ARM7 (from try server). Which artifact I want to pull and objdump?

[09:27:06.0750] <mgaudet>
target.jsshell.zip seems to have the shell for dumping... would that suffice?

[09:27:37.0418] <yury>
> <@mgaudet:mozilla.org> target.jsshell.zip seems to have the shell for dumping... would that suffice?

did that but I don't see anything related to js or wasm

[09:29:11.0685] <yury>
I'm searching for particular instructions in text generated by objdump: not finding. Does it make it thumb or something like that?

[09:29:52.0408] <mgaudet>
Yeah, unfortunately on my mac it seems not to have symbols so I can't even tell if my objdump can read it....

[09:30:20.0617] <yury>
I'm doing it on ubuntu for arm7 on rpi

[09:30:52.0340] <yury>
/me has failures on try but it is good on rpi

[09:33:31.0167] <mgaudet>
boo. 

[09:33:58.0601] <mgaudet>
Unfortunately, I run aground a bit in my understanding of how all the pieces fit together here.

[10:51:40.0422] <debadree25>
what does [CanAttachNativeGetProp](https://searchfox.org/mozilla-central/source/js/src/jit/CacheIR.cpp#627) do? seeing from its usage it seems it can get us the native implementation of some property like the C++ non overridden version? is that correct or very very wrong 😅😅

[10:58:18.0601] <tcampbell>
> <@debadree25:mozilla.org> what does [CanAttachNativeGetProp](https://searchfox.org/mozilla-central/source/js/src/jit/CacheIR.cpp#627) do? seeing from its usage it seems it can get us the native implementation of some property like the C++ non overridden version? is that correct or very very wrong 😅😅

In this case, "native" refers to `js::NativeObject` which is actually means behaves like a normal JS object (instead of proxies or other exotic things). A "native property" in this case is a normal names js property (that isn't an array index).

[10:59:42.0458] <tcampbell>
(Elsewhere in the code base when we talke about functions we have things like `JSNative` that mean C++ function, as opposed to "scripted" for JS implemented functions)

[11:01:56.0714] <tcampbell>
> <@debadree25:mozilla.org> what does [CanAttachNativeGetProp](https://searchfox.org/mozilla-central/source/js/src/jit/CacheIR.cpp#627) do? seeing from its usage it seems it can get us the native implementation of some property like the C++ non overridden version? is that correct or very very wrong 😅😅

 * In this case, "native" refers to `js::NativeObject` which is actually means behaves like a normal JS object (instead of proxies or other exotic things). A "native property" in this case is a normal named js property (that isn't an array index).

[11:03:06.0076] <tcampbell>
If the property was overridden in JS, the CanAttachNativeGetProp would use the overridden one. Whatever JS code would see if it did `foo.x`

[11:03:54.0794] <debadree25>
so its like get prop x of native object foo

[11:05:00.0556] <tcampbell>
if the bytecode said JSOp::GetProp, but at runtime you then passed some thing exotic for foo (like a proxy), then the `CanAttachNativeGetProp` would be false


2024-09-29
[21:29:59.0738] <mayankleoboy1>
https://blog.couchdb.org/2024/09/27/3-4-1/ 

[21:31:12.0871] <mayankleoboy1>
IMHO the comparison with SM is too eyeball-catching/markety/gimmicky.

[21:32:09.0880] <mayankleoboy1>
 * It is using QuickJS for their js engine. IMHO the comparison with SM is too eyeball-catching/markety/gimmicky.

[21:32:30.0655] <mayankleoboy1>
FWIW, amazon is using quickjs [here](https://github.com/awslabs/llrt)


2024-09-30
[09:43:53.0128] <sfink>
yeah, I suspect those "performance improvements" are only looking at one-shot tasks, and so are really talking about startup time. I would expect quickjs to be much better at that, and much worse at anything that runs long enough to trigger the JIT.

