2020-05-01
[19:44:51.0187] <Waldo>
confession: Updated https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl a bunch for locales now supporting `Intl.Locale` objects and using Unicode BCP 47 locale identifiers, not BCP 47 language tags more broadly.

[03:18:30.0190] <arai>
looks like the last consumer of lazy evaluation of RegExp statics gets removed in bug 1627356 ?

[03:18:31.0619] <botzilla>
https://bugzil.la/1627356 ‚Äî RESOLVED (iain) ‚Äî Remove MatchOnly regexps

[03:19:19.0754] <arai>
err, maybe I'm overlooking JIT code

[03:19:52.0979] <arai>
there is https://searchfox.org/mozilla-central/rev/7fd1c1c34923ece7ad8c822bee062dd0491d64dc/js/src/jit/CodeGenerator.cpp#2031-2033

[05:40:00.0882] <tcampbell>
What do people think about removing windows and OSX builds from `sm-shell` try preset?

[05:40:48.0300] <tcampbell>
We do have the larger `sm-all` preset that contains them still

[05:43:03.0928] <tcampbell>
I don't find the windows builds fast enough or providing more info, so we could reduce our CI load for basic testing

[05:59:46.0810] <mgaudet>
tcampbell: https://bugzilla.mozilla.org/show_bug.cgi?id=1628343 We talked about it, the rough consensus was it made sense; I have been procrastinating on actually doing it for... 23 days

[06:00:27.0582] <mgaudet>
(the plan I pitched being broadly the same, slightly different in execution_ 

[06:00:30.0192] <mgaudet>
 * (the plan I pitched being broadly the same, slightly different in execution) 

[06:09:28.0580] <mgaudet>
tcampbell: patch inbound

[06:18:03.0734] <tcampbell>
excellent, thanks!

[06:37:05.0948] <jorendorff>
I've asked this before, but I forgot. Where do the ECMA spec experts hang out?

[06:37:12.0599] <jorendorff>
 * I've asked this before, but I forgot. Where do the ECMA-262 spec experts hang out?

[06:37:23.0347] <jorendorff>
i.e. where do i ask a stupid question

[06:38:01.0453] <jorendorff>
FWIW the question is, what is the meaning of the assertion in step 15 in https://tc39.es/ecma262/#sec-script-semantics-runtime-semantics-evaluation

[06:38:24.0697] <iain>
arai: Yeah, I originally hoped to eliminate lazy updates in that bug, but the JIT case is hard

[06:38:32.0523] <tcampbell>
There is something on freenode https://chat.mozilla.org/#/room/#freenode_#tc39:matrix.org

[06:38:42.0155] <tcampbell>
 * jorendorff: There is something on freenode https://chat.mozilla.org/#/room/#freenode_#tc39:matrix.org

[06:39:42.0977] <arai>
iain: I was thinking if we can utilize the lazy update for optimizing split, for bug 1633932. but I guess we cannot

[06:39:44.0296] <botzilla>
https://bugzil.la/1633932 ‚Äî NEW (nobody) ‚Äî RegExpSplit optimized path incorrectly updates RegExpStatics for end-of-string match

[06:40:00.0297] <tcampbell>
jorendorff: doesn't step 16 say take the top of execution stack? so it needs to be not empty

[06:40:42.0231] <jorendorff>
tcampbell: OK, maybe that's why it's there. I don't understand that either though. Do you?

[06:40:43.0293] <jorendorff>
I mean 

[06:40:54.0843] <jorendorff>
ScriptEvaluation is not called anywhere in this spec (!)

[06:41:01.0444] <jorendorff>
and it's the only way scripts ever run

[06:41:06.0378] <tcampbell>
(it is pushed in step 9. I guess they want to explain that it hasn't gone anywhere in sub steps?)

[06:41:09.0264] <jorendorff>
so it must be the entry point. Maybe I need to be looking in another spec

[06:41:25.0000] <jorendorff>
tcampbell: the one pushed in step 9 is popped in step 14, is my reading

[06:41:52.0958] <jorendorff>
anyway, i'll take it to #tc39. Thanks for the link, again

[06:42:05.0997] <tcampbell>
https://html.spec.whatwg.org/#calling-scripts

[06:42:12.0198] <iain>
arai: I didn't look at it in detail, but I wonder if we could define a new entry point for RegExpMatcher that doesn't update at the end of the input

[06:42:22.0249] <tcampbell>
jorendorff: that is an entry point

[06:43:04.0432] <iain>
Basically this code but with an extra check before calling createMatchResult: https://searchfox.org/mozilla-central/source/js/src/builtin/RegExp.cpp#1029-1050

[06:43:59.0091] <arai>
iain: yeah, that's possible, but we'll need the equivalent for JIT stub code as well...

[06:44:28.0511] <jorendorff>
tcampbell: ooh https://html.spec.whatwg.org/#realm-execution-context

[06:46:15.0806] <iain>
arai: Ah, yeah, right

[06:46:44.0723] <arai>
iain: I'll check how easy/difficult it is

[06:48:43.0411] <jorendorff>
arai: Please ping me as soon as you have patches to update m-c to the latest jsparagus. I can review them immediately.

[06:49:41.0268] <arai>
okay

[07:15:38.0459] <jandem>
confession: Warp codegen for simple loops now matches Ion also in the OSR case

[07:15:40.0828] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[07:15:58.0737] <tcampbell>
`Backed out 283  changesets` .. wut.. https://hg.mozilla.org/integration/autoland/rev/8b5cece2146a

[07:16:44.0259] <jandem>
hm wpt-sync bugs

[07:42:30.0281] <sfink>
Waldo: posted long screed weakly supporting my approach, and coming to a stronger dislike of AutoSetNewObjectMetadata. ;-)

[07:42:41.0271] <sfink>
 * Waldo: posted long screed weakly supporting my approach, and coming to a stronger dislike of `AutoSetNewObjectMetadata`. ;-)

[07:49:39.0106] <mgaudet>
Does anyone have #tc39 logged in on an IRC bouncer? I ask because while **I** can see Jason's messages in #tc39, I note that freenode's logbot of the channel does not; which makes me wonder if there's something funky happening in the bridging there (explaining his lack of responses) 

[07:49:57.0919] <jorendorff>
oh, makes sense

[07:51:02.0047] <jorendorff>
Yeah, my messages did not make it there

[07:52:20.0640] <mgaudet>
That's... suboptimal. I wonder if it's a known issue? perhaps you should poke #synchronicity and see what they say?-

[07:52:22.0232] <mgaudet>
 * That's... suboptimal. I wonder if it's a known issue? perhaps you should poke #synchronicity and see what they say?

[07:52:51.0443] <jandem>
I do see a message here: https://freenode.logbot.info/tc39/20200501

[07:52:53.0210] <mgaudet>
oh -- logbot has it now! 

[07:53:01.0703] <jandem>
ah :)

[07:53:02.0997] <mgaudet>
whatever Jason did fixed it :P 

[07:54:26.0523] <jorendorff>
...I logged into irccloud and posted there

[10:29:16.0256] <iain>
tcampbell: ping

[10:30:43.0600] <tcampbell>
iain: pong

[10:30:51.0677] <iain>
I'm looking at your TrailingArray code and trying to figure out if it makes sense to use it to rewrite the regexp code where we need variable length arrays

[10:31:15.0371] <iain>
In particular, I'm about to add a `namedCaptureIndices` member to RegExpShared

[10:31:47.0876] <iain>
Which is a conceptually just an array of uint32_t of some length

[10:33:01.0425] <iain>
99% of the time it will be empty, so right now I am storing the number of entries as the first element to avoid wasting memory for every RegExpShared

[10:33:33.0495] <tcampbell>
well, `RegExpShared` is a `Cell` so it can't be variable?

[10:33:46.0480] <iain>
It would be a pointer to a variable-length struct

[10:34:07.0444] <tcampbell>
I'd probably lean away for now

[10:34:37.0677] <tcampbell>
since they are probably not excessively common

[10:34:42.0926] <iain>
The easy implementation is a pointer to a regular array and a length member, the more-efficient-but-slightly-gross way is a pointer to a regular array with the length as the first element

[10:35:01.0988] <tcampbell>
`TrailingArray` was for when someone was already determined to have a single allocation of too much stuff

[10:38:00.0112] <iain>
And since I also implemented variable length arrays to shim V8's ByteArray, I'm trying to figure out if we should have an implementation of VariableLengthArray<T> based on TrailingArray

[10:38:00.0682] <iain>
Or whether it would be simpler to write it on its own

[10:51:43.0938] <sfink>
uh... I have a very strange bug here: https://paste.mozilla.org/W8QQ2i8t

[10:52:09.0224] <sfink>
at least in my JS shell, that does not complain about me re-assigning `s1`, a `const` variable

[10:52:17.0462] <sfink>
if I delete just about any line, it does complain

[10:52:46.0350] <sfink>
I'll file it

[10:53:15.0771] <sfink>
hm, the other shells I have lying around all complain properly

[10:53:31.0364] <sfink>
darn, I may have to look at it here then

[10:54:54.0174] <iain>
It complains about the const in my local build, too

[10:55:29.0635] <sfink>
it complains in my opt build from the same source. Just not this single debug build.

[10:55:43.0959] <sfink>
which has one funky patch in it, but nothing that should affect this at all.

[10:57:18.0189] <iain>
Is it maybe crashing before it gets to the point of the reassignment?

[10:57:57.0559] <sfink>
ah! you're brilliant!

[10:58:26.0035] <sfink>
thank you, that is indeed what is happening. This is a stripped-down test case that I just got to crash.

[10:58:46.0214] <sfink>
somehow I thought that error would be a compile-time thing

[11:00:14.0399] <sfink>
heh. But that does mean that my elaborate, oh so carefully constructed test case is 99% unnecessary, given that it's still crashing after randomly deleting lines to minimize!

[11:00:37.0774] <sfink>
(minimize the wrong bug, that is)

[11:05:26.0689] <tcampbell>
jorendorff: ping?

[11:05:33.0795] <jorendorff>
tcampbell: !

[11:05:36.0192] <jorendorff>
omw

[11:18:21.0201] <soniasingla>
https://phabricator.services.mozilla.com/D73436

[11:18:45.0554] <soniasingla>
> <@soniasingla:mozilla.org> https://phabricator.services.mozilla.com/D73436

hey jorendorff review this patch whenever you get time :)

[12:24:42.0861] <Waldo>
Where's firebot when you need him to review something?  üòÅ

[12:26:44.0387] <soniasingla>
Agh, point to be noted 

[12:27:20.0040] <Waldo>
soniasingla: That was a joke, see http://quotes.burntelectrons.org/3689

[12:28:09.0896] <jorendorff>
soniasingla: r=me. Thanks!

[12:30:17.0950] <soniasingla>
> <@waldo:mozilla.org> soniasingla: That was a joke, see http://quotes.burntelectrons.org/3689

*mind cheered up* 

[12:31:36.0754] <soniasingla>
Oh it was quick, revision accepted !

[12:31:59.0560] <Waldo>
...there's a fries emoji?  Will wonders never cease

[12:33:26.0099] <soniasingla>
> <@waldo:mozilla.org> ...there's a fries emoji?  Will wonders never cease

haha i use random :P

[12:34:04.0598] <Waldo>
jorendorff: I need a lawn emoji now.

[12:37:52.0816] <soniasingla>
> <@waldo:mozilla.org> jorendorff: I need a lawn emoji now.

and i need real fries now.

[12:38:01.0396] <jorendorff>
same

[14:09:45.0404] <Waldo>
sfink: Yeah, something like `return completeInitialization(obj)` feels like exactly what I want, if it can be done in fashion enforced by the type system.

[14:10:39.0289] <Waldo>
sfink: Maybe the allocation functions could return `Incomplete<JSObject*>` or something, with `operator->` to expose the internal value, but in order to get out the actual raw pointer `completeInitialization(obj)` has to be used.  Or something.

[14:10:49.0076] <Waldo>
/me gesticulates inarticulately

[14:11:06.0282] <sfink>
I guess it would be `return completeInitiailzation(cx, obj)` to handle the optional rooting.

[14:11:24.0823] <sfink>
even without fancy type system support, it seems like it's better than AutoSetBlah

[14:11:32.0822] <Waldo>
Or `obj, cx` if it's infallible, which I don't know if it is or isn't.

[14:11:42.0558] <sfink>
ooh, right

[14:39:45.0692] <ptomato>
evilpie: what try jobs would you suggest for bug 16129293 to make sure to get all current consumers of js::PrintError and js::ErrorReport?

[14:53:17.0327] <Waldo>
"The js::AutoSetNewObjectMetadata RAII class provides an ergonomic way"  üßê

[15:05:05.0218] <jorendorff>
soniasingla: It looks like there are some tests that depend on the exact error message. :(

[15:05:33.0925] <jorendorff>
You can change those too: js/src/jit-test/tests/debug/Object-forceLexicalInitializationByName.js and friends

[15:05:35.0999] <jorendorff>
see the log here https://treeherder.mozilla.org/logviewer.html#/jobs?job_id=300423614&repo=autoland&lineNumber=24773

[15:09:07.0125] <soniasingla>
jorendorff: Sure, i'll look into this tomorrow. It's 3:38 AM for me üòõ

[15:09:21.0264] <jorendorff>
OK! I'll leave a message in the bug

[15:09:25.0079] <Waldo>
...surely you mean today?

[15:09:27.0906] <Waldo>
/me runs

[15:09:45.0526] <soniasingla>
> <@waldo:mozilla.org> ...surely you mean today?

yes yes mr. waldo 

[15:10:04.0058] <Waldo>
Also I would probably throw stones if my sleep schedule were not similarly shot to pieces.  üòÅ

[15:10:41.0568] <Waldo>
I plan to bike up Mt. Hamilton tomorrow morning with an early start, tho, so hopefully tomorrow I can get to righting that ship.  Hopefully.

[15:11:42.0677] <soniasingla>
How can you go for biking? *Seems no lockdown in your country*

[15:11:55.0175] <soniasingla>
*Waldo runs

[15:13:00.0917] <Waldo>
County orders here let you go outside to exercise.  They also don't want you leaving the county.  Turns out Mt Hamilton is at the eastern county border, so despite it being ~37mi from me, it is not leaving the county.  üôå

[15:14:08.0224] <jorendorff>
my lifehack: I run instead of biking, so things seem 10x farther apart

[15:14:13.0071] <jorendorff>
next i'll try crawling

[15:14:41.0294] <soniasingla>
> <@waldo:mozilla.org> County orders here let you go outside to exercise.  They also don't want you leaving the county.  Turns out Mt Hamilton is at the eastern county border, so despite it being ~37mi from me, it is not leaving the county.  üôå

Oh we are sealed inside our houses :( 39th day today

[15:16:17.0908] <Waldo>
Ala{s,ck}.

[15:18:40.0457] <Waldo>
If the contagion were drastically more prevalent, actually forbidding people from getting out to exercise would perhaps be reasonable -- maybe -- but we're not at those levels, and exercise is necessary to remain reasonably healthy, and Santa Clara is suburbs-dense at best, so there's plenty of room for people to get out, as long as they don't choose to then do close-contact-requiring activities.

[15:19:35.0500] <Waldo>
/me is still holding off on running a bit longer -- foot feels up to it sometimes, but also it dully aches a fair bit of the time, so seems better to be cautious a bit longer.

[15:19:55.0748] <jorendorff>
yeah, it sucks having to be careful about things

[15:20:02.0104] <Waldo>
Last time a doc told me it was okay to start running, it was after three months of not doing so, so I'm probably going to reevaluate when I hit three months since last running.

[15:20:25.0533] <jorendorff>
I run near my house and typically don't see another person, except in their cars (nobody is really going anywhere, except grocery stores)

[15:21:11.0245] <Waldo>
Last run I did was February 22, so a few more weeks at least, I figure.

[15:22:20.0224] <Waldo>
jorendorff: You rural, semi-rural, suburban?  There seem more people out and about (driving around) than can be explained by just grocery stores here, or by getting food and meals, but there's no real way to know, as far as I can tell...

[15:22:43.0502] <Waldo>
jorendorff: Also I just realized what/when your picture was from...

[15:22:52.0037] <jorendorff>
semi-rural. i'm sure some people are working, but traffic is markedly down

[15:23:09.0345] <Waldo>
Shouldn't have taken me so long to musee about where it might have been taken!

[15:23:25.0563] <jorendorff>
or say so, if you figured it out earlier

[16:28:58.0504] <Waldo>
sfink: The more I read your comment and ponder how best to react to it, the more my hate for `AutoSetNewObjectMetadata` escalates from being equivalent to the passion of ten thousand undying suns, to being equivalent to the passion of ten million undying supernovae.


2020-05-02
[01:25:16.0501] <sergeykish>
Hello, I've been playing recently with changing javascript (what would it take it fix WAT) on https://code.google.com/archive/p/quad-wheel/ and it was fun, so I checked out spidermonkey and it is 10000 bigger (at least), yet interpreter is nice and clear https://searchfox.org/mozilla-central/source/js/src/vm/Interpreter.cpp
My build platform is WSL1 alpine (looks like a wrong choice), rustc 1.44.0-beta allows proc-macro, I use clang and I'm stuck
> fatal error: 'type_traits' file not found
https://gist.github.com/sergeykish/fa230478da4c15880eac33b6ca2cc326
Could you please help?

[01:42:28.0001] <sergeykish>
It builds if I added "-I/usr/include/c++/9.2.0" "-I/usr/include/c++/9.2.0/x86_64-alpine-linux-musl" - for <type_traits> and "bits/c++config.h"

[01:55:23.0184] <sergeykish>
 * It builds if I added "-I/usr/include/c++/9.2.0" "-I/usr/include/c++/9.2.0/x86_64-alpine-linux-musl" - for <type_traits> and "bits/c++config.h" (fixed)

[02:02:41.0361] <sergeykish>
And now I've got
error: failed to run custom build command for `baldrdash v0.1.0 (/home/sergeykish/spidermonkey/js/src/wasm/cranelift)`
thread 'main' panicked at 'Unable to find libclang: "the `libclang` shared library at /usr/lib/libclang.so.9 could not be opened: Dynamic loading not supported"'
Well, it is musl, no dynamic loading here...

[02:03:12.0304] <sergeykish>
though it somehow builds https://git.alpinelinux.org/aports/tree/community/firefox

[02:07:24.0170] <sergeykish>
Can I disable cranelift?

[02:10:29.0401] <evilpie>
sure --disable-cranelift

[02:12:36.0409] <sergeykish>
evilpie: sorry, I don't know where to apply flag, it's not `./configure` and not `./mach`,

[02:13:25.0224] <evilpie>
cd js/src; autoconf2.13; mkdir dbg-obj; cd dbg-obj; ../configure --disable-cranelift; make

[02:14:39.0125] <sergeykish>
aha, thank you

[02:15:34.0573] <sergeykish>
I see
 0:02.64 Adding configure options from /home/sergeykish/.mozconfig-debug
 0:02.64   --enable-application=js
 0:02.64   --disable-optimize
 0:02.64   --enable-debug
It should work too, right?
ac_add_options --disable-cranelift

[02:16:04.0269] <sergeykish>
 * In `./mach build` I see
 0:02.64 Adding configure options from /home/sergeykish/.mozconfig-debug
 0:02.64   --enable-application=js
 0:02.64   --disable-optimize
 0:02.64   --enable-debug
It should work too, right?
ac_add_options --disable-cranelift

[02:16:16.0446] <evilpie>
ah yes probably

[02:17:00.0804] <sergeykish>
worked! thank you

[02:18:06.0119] <sergeykish>
evilpie: I'm a little bit afraid to move further from official steps, will check your way later

[02:18:30.0476] <evilpie>
no that is fine, keep doing that

[02:19:15.0439] <fscheidl>
Hi there! I am trying to build the JS shell from source on macOS 10.14.6 and am following the instructions on https://firefox-source-docs.mozilla.org/js/build.html Unfortunately, I seem to be facing some issues here at the linking stage. I have icu4c version 66 installed (via homebrew), if that's in any case relevant. Could someone direct me to get a successful build out of that?

[02:19:38.0491] <fscheidl>
 * Hi there! I am trying to build the JS shell from source on macOS 10.14.6 and am following the instructions on https://firefox-source-docs.mozilla.org/js/build.html Unfortunately, I seem to be facing some issues here at the linking stage. I have icu4c version 66 installed (via homebrew), if that's in any way relevant. Could someone direct me to get a successful build out of that?

[02:36:28.0722] <evilpie>
Did you run mach bootstrap?

[02:36:50.0316] <evilpie>
Otherwise I don't know anything about macos to really help

[02:41:11.0787] <fscheidl>
Yep, didn't change anything unfortunately. Thanks for the answer though!

[03:03:54.0806] <jandem>
fscheidl: what's your mozconfig?

[03:06:39.0223] <fscheidl>
jandem:

"ac_add_options --enable-application=js
ac_add_options --enable-optimize
ac_add_options --disable-debug

# Use a separate objdir for optimized builds to allow easy
# switching between optimized and debug builds while developing.
mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/obj-opt-@CONFIG_GUESS@"

[03:06:48.0585] <fscheidl>
 * jandem:

"ac_add_options --enable-application=js
ac_add_options --enable-optimize
ac_add_options --disable-debug

mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/obj-opt-@CONFIG_GUESS@"

[03:11:03.0333] <sergeykish>
fscheidl: my build finished and I have no "icu" package installed. I see `intl/icu` in tree, is it same as `icu4c`?

[03:11:36.0261] <fscheidl>
sergeykish: icu4c was just a guess by me, probably not needed.

[03:11:54.0544] <jandem>
yeah icu is in tree

[03:14:08.0568] <fscheidl>
Just removed the last line k_add_options MOZ_OBJDIR=@TOPSRCDIR@/obj-opt-@CONFIG_GUESS@". Build finished successfully. Huh!

[03:14:35.0541] <fscheidl>
 * Just removed the last line mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/obj-opt-@CONFIG_GUESS@". Build finished successfully. Huh!

[03:14:48.0083] <jandem>
did you do a build before? maybe some stale files in the object dir

[03:14:55.0801] <jandem>
good it works now though

[03:15:10.0321] <fscheidl>
the one before was the first and failed attempt

[03:23:18.0724] <sergeykish>
We know it took a while, but your build finally finished successfully!
To take your build for a test drive, run: |mach run|
$ ./mach run
 0:01.08 /home/sergeykish/spidermonkey/obj-x86_64-pc-linux-musl/dist/bin/js
$ ./obj-x86_64-pc-linux-musl/dist/bin/js
Segmentation fault (core dumped)
$ gdb ./obj-x86_64-pc-linux-musl/dist/bin/js
...
bt
#0  0x00007fffff66d54e in __once_proxy () from /usr/lib/libstdc++.so.6
#1  0x0000000009e45c84 in __pthread_once_full ()
#2  0xaaaaaaaaaaaaaaaa in ?? ()
#3  0x0000000009e45c03 in pthread_mutexattr_settype ()
#4  0x000000000b3352f8 in icu_66::(anonymous namespace)::initCondition ()
#5  0x0000000000000000 in ?? ()
that's unexpected, any ideas?

[03:25:11.0789] <sergeykish>
 * We know it took a while, but your build finally finished successfully!
To take your build for a test drive, run: |mach run|
$ ./mach run
 0:01.08 /home/sergeykish/spidermonkey/obj-x86_64-pc-linux-musl/dist/bin/js
$ ./obj-x86_64-pc-linux-musl/dist/bin/js
Segmentation fault (core dumped)
$ gdb ./obj-x86_64-pc-linux-musl/dist/bin/js
...
run
bt
#0  0x00007fffff66d54e in __once_proxy () from /usr/lib/libstdc++.so.6
#1  0x0000000009e45c84 in __pthread_once_full ()
#2  0xaaaaaaaaaaaaaaaa in ?? ()
#3  0x0000000009e45c03 in pthread_mutexattr_settype ()
#4  0x000000000b3352f8 in icu_66::(anonymous namespace)::initCondition ()
#5  0x0000000000000000 in ?? ()
that's unexpected, any ideas?

[03:49:03.0577] <evilpie>
sergeykish: not really. Maybe try --without-intl-api for now?

[03:55:52.0081] <sergeykish>
Just traced to
js/src/vm/Initialization.cpp, line 174
  // Explicitly set the data directory to its default value, but only when we're
  // sure that we use our in-tree ICU copy. See bug 1527879 and ICU bug
  // report <https://unicode-org.atlassian.net/browse/ICU-20491>.
u_setDataDirectory("")

[03:55:54.0188] <botzilla>
https://bugzil.la/1527879 ‚Äî RESOLVED (anba) ‚Äî localeCompare is very slow due to a lot of main thread I/O

[03:56:11.0660] <sergeykish>
evilpie: I'll try

[03:56:38.0851] <evilpie>
so you aren't using in tree ICU?

[03:59:37.0272] <sergeykish>
yes, in tree

[03:59:50.0409] <sergeykish>
 * in tree

[04:34:44.0003] <sergeykish>
evilpie: thank you! it works now

[04:40:30.0738] <evilpie>
ptomato: ++

[05:19:12.0547] <sergeykish>
ah, ./mach build faster

[05:28:05.0400] <sergeykish>
How can I force execution in interpreter?
(gdb) b js/src/vm/Interpreter.cpp:1416
(gdb) run
js> {} + []
0
And nothing...
Where is it executed? JIT?

[05:29:06.0944] <sergeykish>
I'll try --disable-jit

[05:37:56.0544] <sergeykish>
And a lot of errors https://gist.github.com/sergeykish/b46e7bb66411f42d5826b534928494e2
js/src/jit/LIR.h:1961:17: error: static_cast from 'js::jit::LNode *' to 'js::jit::LDivOrModConstantI *', which are not related by inheritance, is not allowed
 0:26.75 LIR_OPCODE_LIST(LIROP)
 0:26.78 ~~~~~~~~~~~~~~~~^~~~~~

[05:44:55.0833] <evilpie>
mhm --disable-jit might be broken

[05:46:33.0495] <sergeykish>
Should I add to tracker? Fix or remove...

[05:46:52.0346] <evilpie>
I can test it later

[05:47:45.0411] <sergeykish>
At least I have not seen https://bugzilla.mozilla.org/show_bug.cgi?id=1257185

[05:48:38.0969] <evilpie>
There are some shell flags when running like --no-blintp --no-baseline --no-ion

[05:51:12.0937] <sergeykish>
I don't get, but if you can look it would be awesome

[05:53:13.0403] <sergeykish>
Meantime, am I correct that code executed by JIT? Is there an easy way to disable it (temporary)

[05:54:29.0076] <sergeykish>
I mean it was hit one time

[05:54:35.0281] <evilpie>
 * There are some shell flags when running like --no-blinterp --no-baseline --no-ion

[05:54:57.0842] <evilpie>
sergeykish: see my previous message for flags for disabling the baseline interpreter etc.

[05:55:48.0091] <sergeykish>
oh

[05:57:02.0216] <sergeykish>
there are no such keywords in js/moz.configure... I'll add them all and see

[05:58:03.0113] <evilpie>
sergeykish: shell flag! not build flag

[05:58:23.0128] <evilpie>
i.e ./js --no-blinterp

[05:59:48.0337] <sergeykish>
evilpie: now I got it

[06:01:38.0131] <sergeykish>
no changes

[06:03:19.0799] <sergeykish>
I've got a list
obj-x86_64-pc-linux-musl/dist/bin/js --help

[06:47:00.0093] <sergeykish>
Ok, it is kind of strange
"" + [] hits
"" + 1 does not
flags --no-ion --no-asmjs --no-baseline --no-blinterp changes nothing

[06:49:32.0838] <sergeykish>
On top of that `return false` from AddOperation makes it return 0

[06:51:34.0936] <sergeykish>
It is constant expansion!
`foo = ""; foo + 1` hits

[06:51:44.0619] <sergeykish>
 * Ok, it is kind of strange
`"" + []` hits
`"" + 1` does not
flags --no-ion --no-asmjs --no-baseline --no-blinterp changes nothing

[07:09:21.0125] <evilpie>
Oh yeah we do constant folding for some very simple expressions in the parser

[07:18:08.0353] <sergeykish>
That, and `./mach build faster` does not update `./obj-x86_64-pc-linux-musl/dist/bin/js`

[07:26:57.0192] <tcampbell>
`build faster` is only for firefox frontend/UI work. It doesn't build C++.

[07:27:07.0223] <tcampbell>
 * `build faster` is only for firefox frontend/UI work. It doesn't build C++. Only the js/css, etc

[07:30:52.0636] <sergeykish>
ah, thanks

[07:32:02.0228] <sergeykish>
how can I skip these?
 1:03.64 js/src/gdb/gdb-tests
 1:03.75 js/src/jsapi-tests/jsapi-tests
 1:55.51 js/src/build/spidermonkey_checks.stub
 2:13.13 TEST-PASS | check_spidermonkey_style.py | ok
 2:13.49 TEST-PASS | check_macroassembler_style.py | ok
 2:13.66 TEST-PASS | check_js_opcode.py | ok

[07:32:50.0641] <tcampbell>
`ac_add_options --disable-tests`

[07:33:34.0185] <tcampbell>
also throw in `ac_add_options --disable-cranelift` `ac_add_options --disable-binast` for faster builds

[07:35:11.0804] <sergeykish>
I'll try, `cranelift` already disabled - build failed on musl

[07:35:26.0291] <tcampbell>
ha. strange

[07:35:52.0803] <tcampbell>
evilpie: looks like non-unified no-jit builds fail, but unified no-jit is fine

[08:39:20.0141] <sergeykish>
 0:18.80   JS_ReportError(cx, "is not a number");
 0:18.80   ^~~~~~~~~~~~~~
 0:18.80   JS_ReportErrorUTF8
MDN outdated? https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/JSAPI_reference/JS_ReportError

[08:42:39.0739] <ptomato>
yes, JSAPI reference on MDN is years out of date ... unfortunately, the best available documentation is to search JS header files on searchfox.org

[08:44:39.0582] <ptomato>
there's also a cookbook here: https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr68/examples/cookbook.cpp

[08:46:24.0413] <sergeykish>
that's helpful

[08:49:35.0268] <ptomato>
(note that the cookbook is based on the ESR version so may still be slightly out of date)

[08:50:34.0487] <sergeykish>
ok, it's 100% better than working through code trying to find examples

[08:52:41.0881] <sergeykish>
I've just painfully got through ReportInNotObjectError > JS_ReportErrorNumberASCII > JS_ReportErrorUTF8

[08:54:20.0113] <sergeykish>
Yet, I've dreamed about these results so long
js> [] + {}
typein:1:1 Error: \1 + \2 is not allowed
js> [] - 1
typein:2:1 Error: is not a number
These should have been in "use strict"

[08:54:28.0959] <sergeykish>
 * Yet, I've dreamed about these results for so long
js> [] + {}
typein:1:1 Error: \1 + \2 is not allowed
js> [] - 1
typein:2:1 Error: is not a number
These should have been in "use strict"

[08:59:43.0109] <sergeykish>
Is it possible to put updated library into Firefox distribution? So I can skip building it

[09:00:57.0743] <tcampbell>
Unfortunately no. Spidermonkey is statically linked into `xul.dll` and that is the slow part to recompile.

[09:02:26.0012] <sergeykish>
ok

[10:33:52.0220] <denispal>
Are there any other places the JS shell can create a new runtime other than https://searchfox.org/mozilla-central/source/js/src/shell/js.cpp#4145,11725 ?

[10:43:27.0861] <jandem>
that should cover it. Main thread and evalInWorker 

[10:47:20.0593] <denispal>
jandem: ty

[12:47:57.0878] <sergeykish>
I have not mentioned - to build spidermonkey on Alpine I had to patch
diff -r 0f9c5a59e45d memory/build/Mutex.h
--- a/memory/build/Mutex.h      Fri May 01 14:28:41 2020 +0000
+++ b/memory/build/Mutex.h      Sat May 02 22:45:33 2020 +0300
@@ -42,7 +42,7 @@
     if (pthread_mutexattr_init(&attr) != 0) {
       return false;
     }
-    pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_ADAPTIVE_NP);
+    pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_NORMAL);
     if (pthread_mutex_init(&mMutex, &attr) != 0) {
       pthread_mutexattr_destroy(&attr);
       return false;
@@ -102,8 +102,6 @@

 #  if defined(XP_DARWIN)
 #    define STATIC_MUTEX_INIT OS_SPINLOCK_INIT
-#  elif defined(XP_LINUX) && !defined(ANDROID)
-#    define STATIC_MUTEX_INIT PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 #  else
 #    define STATIC_MUTEX_INIT PTHREAD_MUTEX_INITIALIZER
 #  endif

[12:48:44.0880] <sergeykish>
 * I have not mentioned - to build spidermonkey on Alpine I had to patch

    diff -r 0f9c5a59e45d memory/build/Mutex.h
    --- a/memory/build/Mutex.h      Fri May 01 14:28:41 2020 +0000
    +++ b/memory/build/Mutex.h      Sat May 02 22:45:33 2020 +0300
    @@ -42,7 +42,7 @@
         if (pthread_mutexattr_init(&attr) != 0) {
           return false;
         }
    -    pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_ADAPTIVE_NP);
    +    pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_NORMAL);
         if (pthread_mutex_init(&mMutex, &attr) != 0) {
           pthread_mutexattr_destroy(&attr);
           return false;
    @@ -102,8 +102,6 @@

     #  if defined(XP_DARWIN)
     #    define STATIC_MUTEX_INIT OS_SPINLOCK_INIT
    -#  elif defined(XP_LINUX) && !defined(ANDROID)
    -#    define STATIC_MUTEX_INIT PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
     #  else
     #    define STATIC_MUTEX_INIT PTHREAD_MUTEX_INITIALIZER
     #  endif
 

[12:49:13.0345] <sergeykish>
 * I have not mentioned - to build spidermonkey on Alpine (musl) I had to patch
```
diff -r 0f9c5a59e45d memory/build/Mutex.h
--- a/memory/build/Mutex.h      Fri May 01 14:28:41 2020 +0000
+++ b/memory/build/Mutex.h      Sat May 02 22:45:33 2020 +0300
@@ -42,7 +42,7 @@
     if (pthread_mutexattr_init(&attr) != 0) {
       return false;
     }
-    pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_ADAPTIVE_NP);
+    pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_NORMAL);
     if (pthread_mutex_init(&mMutex, &attr) != 0) {
       pthread_mutexattr_destroy(&attr);
       return false;
@@ -102,8 +102,6 @@

 #  if defined(XP_DARWIN)
 #    define STATIC_MUTEX_INIT OS_SPINLOCK_INIT
-#  elif defined(XP_LINUX) && !defined(ANDROID)
-#    define STATIC_MUTEX_INIT PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 #  else
 #    define STATIC_MUTEX_INIT PTHREAD_MUTEX_INITIALIZER
 #  endif
```

[12:51:21.0637] <sergeykish>
Is it broken on android or it can be `elif defined(PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP)`?

[12:52:27.0636] <sergeykish>
 * Is it broken on android or it can be

    elif defined(PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP)
      define STATIC_MUTEX_INIT PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP


2020-05-04
[00:31:12.0296] <lth>
general question about moz.configure

[00:31:15.0046] <lth>
context is https://bugzilla.mozilla.org/show_bug.cgi?id=1634850

[00:31:46.0649] <lth>
here a missing dependency (wasm-gc depends on typedobjects) was caught by an #error in the code

[00:32:29.0970] <lth>
but this could also have been caught (?) or at least encoded by a dependency in moz.configure, where --enable-wasm-gc would depend on --enable-typed-objects

[00:33:21.0808] <lth>
in the latter case, wasm-gc without typed-objects would have just silently not enabled wasm-gc, i guess?

[00:33:34.0225] <lth>
curious about what people think might be the best approach here

[00:53:21.0746] <jandem>
IMO the least surprising option is for wasm-gc without typedobjects to `die(...)` in moz.configure

[00:55:15.0636] <lth>
mkay

[01:24:04.0478] <Ms2ger [~half-time dedication]>
‚ûï

[06:16:01.0555] <soniasingla>
jorendorff: you around?

[06:16:10.0459] <jorendorff>
soniasingla: Yes

[06:18:41.0069] <soniasingla>
jorendorff: I made some changes and saved them locally, after that i did clean up and downloaded the patch too. It's showing the changes saved but no changes while i run hg status
Also, the changes have not been committed

[06:18:56.0152] <soniasingla>
i know it's totally mess, sorry for it :(

[06:24:28.0894] <jorendorff>
soniasingla: OK, let's figure this out

[06:25:45.0698] <jorendorff>
soniasingla: I wonder how the patch got uploaded without changes being committed...

[06:26:07.0524] <jorendorff>
Does your working directory contain all the changes?

[06:29:25.0390] <jorendorff>
soniasingla: Did you upload the new patch using `moz-phab submit`, or some other way?

[06:32:06.0846] <soniasingla>
jorendorff: when the tests failed for the first revision, remember, i made second revision and then using `hg strip -r id` i deleted the patch locally on my machine. After that, 2 tests failed again, so i was looking at the files for which the tests failed and i made changes but i forgot that i have deleted the patch. 

[06:32:24.0114] <soniasingla>
Then, i did clean up and downloaded the patch

[06:33:00.0070] <soniasingla>
now the changes aren't committed to the moz repo but they don't show anything changed when i do `hg status`

[06:33:12.0338] <jorendorff>
The way I usually do this is using `hg amend`. Do you have that command? (You can check using `hg amend --help`)

[06:33:42.0750] <jorendorff>
there are multiple things to figure out here

[06:34:35.0686] <jorendorff>
 I think `mach bootstrap` installs `hg amend` for you, if you let it. It's part of an extension called "changeset evolution" or something like that

[06:35:21.0259] <soniasingla>
i have this installed 

[06:36:01.0333] <jorendorff>
OK, good. `hg amend` is like `git commit --amend`. It modifies the most recent commit instead of creating a new one.

[06:36:31.0067] <jorendorff>
But the other mystery is why `hg status` does not show your most recent changes. ...I think they must have gotten committed, at some point

[06:37:06.0306] <soniasingla>
> <@jorendorff:mozilla.org> But the other mystery is why `hg status` does not show your most recent changes. ...I think they must have gotten committed, at some point

then it must show the changes in moz-central or somewhere in the revision

[06:37:12.0697] <soniasingla>
that's not there 

[06:38:22.0778] <jorendorff>
soniasingla: OK, which files have uncommitted changes in your directory? `js/src/tests/non262/extensions/regress-465443.js` and `js/src/tests/non262/regress/regress-452498-112.js`?

[06:39:26.0614] <soniasingla>
> <@jorendorff:mozilla.org> soniasingla: OK, which files have uncommitted changes in your directory? `js/src/tests/non262/extensions/regress-465443.js` and `js/src/tests/non262/regress/regress-452498-112.js`?

yes

[06:39:29.0545] <soniasingla>
these files

[06:39:42.0111] <jorendorff>
soniasingla: How familiar are you with git, or other version control tools?

[06:40:23.0809] <soniasingla>
i am well familiar but never faced or seen such problem

[06:42:15.0156] <jorendorff>
soniasingla: great - hg is just different enough to cause all kinds of confusion at first, but once you're used to it it's a lot like git

[06:42:17.0077] <jorendorff>
OK - Try `hg diff js/src/tests/non262/extensions/regress-465443.js` to see if there are uncommitted changes to that file.

[06:42:46.0746] <jorendorff>
If there are not, use `hg annotate js/src/tests/non262/extensions/regress-465443.js` to see which commit contains the changes.

[06:44:06.0825] <soniasingla>
> <@jorendorff:mozilla.org> OK - Try `hg diff js/src/tests/non262/extensions/regress-465443.js` to see if there are uncommitted changes to that file.

no, there are not

[06:44:43.0598] <soniasingla>
wait sharing snippet

[06:44:55.0343] <soniasingla>
https://paste.mozilla.org/GYgpggUM

[06:46:41.0281] <jorendorff>
OK, it looks like the last commit that changed this file is `527797`. Do `hg log --rev .` to see what the latest commit is. Is it number `527797`?

[06:49:18.0281] <soniasingla>
`changeset:   527797:4136e2a2fa35`
`bookmark:    D73436_1`

[06:49:33.0392] <jorendorff>
( `.` in hg == `HEAD` in git)

[06:49:37.0927] <jorendorff>
hey, that's good news

[06:50:06.0403] <jorendorff>
ok, so whether you committed them or not, somehow your changes are in this commit `527797:4136e2a2fa35`

[06:50:50.0635] <jorendorff>
to confirm, you can do `hg log --rev 4136e2a2fa35 --patch` (== `git show 4136e2a`)

[06:52:49.0224] <soniasingla>
hey, i don't think so

[06:52:52.0680] <soniasingla>
https://paste.mozilla.org/oqWj7tm9

[06:52:53.0425] <soniasingla>
:(

[06:56:27.0749] <jorendorff>
soniasingla: Huh. I'm confused. That looks like the beginning of the patch, but not the whole patch.

[06:56:39.0214] <jandem>
maybe due to the pager?

[06:58:04.0068] <soniasingla>
> <@jorendorff:mozilla.org> soniasingla: Huh. I'm confused. That looks like the beginning of the patch, but not the whole patch.

same :( 

[06:58:52.0764] <jorendorff>
The ager was my guess too. soniasingla, `hg log` might be using `less`, so, showing only one page of the patch at a time. is that what's happening?

[06:59:15.0684] <jorendorff>
 * The pager was my guess too. soniasingla, `hg log` might be using `less`, so, showing only one page of the patch at a time. is that what's happening?

[06:59:38.0699] <jorendorff>
if so, you could hit the space bar to show another page

[07:00:53.0557] <soniasingla>
https://paste.mozilla.org/J5FPBBmt

[07:00:55.0382] <soniasingla>
ugh yes

[07:00:59.0406] <soniasingla>
it's here now

[07:01:57.0715] <jorendorff>
ok good! so now

[07:02:03.0155] <jorendorff>
soniasingla: Did you already update those two tests to add backslashes?

[07:02:31.0155] <soniasingla>
> <@jorendorff:mozilla.org> soniasingla: Did you already update those two tests to add backslashes?

yes, i have made changes but not added to moz-phab

[07:03:19.0080] <jorendorff>
ok, this is also mysterious because `hg diff` did not show the changes.

[07:03:47.0316] <jorendorff>
first thing to check, are the changes saved in the same directory where you're running `hg` commands? 

[07:05:19.0844] <jorendorff>
The question is, are the backslashes really in the files. (if they are, `hg diff` should have showed them.)

[07:07:12.0660] <jorendorff>
This kind of thing does happen to me sometimes, and usually it turns out I made the changes in some other copy of the directory

[07:08:06.0772] <jorendorff>
/me is away -- I'll be back in 20 minutes

[07:16:22.0843] <soniasingla>
> <@jorendorff:mozilla.org> The question is, are the backslashes really in the files. (if they are, `hg diff` should have showed them.)

hey jorendorff they are in the same directory, anything else that could cause this error? 

[07:29:54.0021] <jorendorff>
ugh bizarre

[07:30:04.0017] <jorendorff>
anyone have any clues?

[07:30:24.0031] <jorendorff>
I would say a seriously messed up hgignore file somewhere, but it doesn't seem likely

[07:31:57.0604] <soniasingla>
hey jorendorff : i just see the revision again, seems that changes have been committed

[07:32:18.0037] <soniasingla>
don't you think so?

[07:32:35.0813] <soniasingla>
that's why they are not showing up in terminal

[07:33:20.0304] <jorendorff>
ok, hold on one second

[07:37:04.0762] <jorendorff>
soniasingla: The last dpaste link you posted shows:
`+  expect = 'TypeError: invalid assignment to const 'b\'';`

[07:38:21.0347] <jorendorff>
This doesn't work, because a string that starts with `'` ends at the next `'` that doesn't have a backslash

[07:38:25.0991] <jorendorff>
it has to be

[07:38:36.0242] <jorendorff>
`expect = 'TypeError: invalid assignment to const \'b\'';`

[07:38:40.0310] <jorendorff>
note the extra backslash

[07:39:38.0431] <soniasingla>
> <@jorendorff:mozilla.org> `expect = 'TypeError: invalid assignment to const \'b\'';`

hey, yes i know i noticed this lately. i am adding the new revision into the latest commit

[07:39:59.0433] <jorendorff>
OK, great

[07:40:07.0856] <jorendorff>
Then I think everything makes sense now

[07:40:12.0086] <soniasingla>
and how can i test locally before pushing to avoid the test failures

[07:40:23.0449] <soniasingla>
using `./mach jittest` right?

[07:41:19.0705] <jorendorff>
soniasingla: `./mach check-spidermonkey`

[07:41:27.0882] <jorendorff>
I think jittest doesn't run these particular tests.

[07:42:21.0715] <soniasingla>
okay let me check !

[07:42:52.0186] <Ms2ger [~half-time dedication]>
Or `./mach jstests`; I think `./mach jstests js/src/tests/non262/extensions/regress-465443.js` will also work

[07:59:06.0458] <denispal>
hello,  I need to reproduce a jsreftest failure on aarch64 but not really sure how to do that.  Can I build the shell for aarch64 and somehow run it on a device?

[08:05:51.0380] <tcampbell>
denispal: I'd start with `--enable-simulator=arm64` on the shell

[08:06:23.0240] <tcampbell>
running the shell directly on a device is unfortunately a bad experience right now

[08:06:49.0199] <denispal>
tcampbell: thanks,  I did try that but the test passed :(

[08:07:00.0798] <tcampbell>
link to failure?

[08:07:21.0529] <denispal>
tcampbell: bug 1634780

[08:07:23.0132] <botzilla>
https://bugzil.la/1634780 ‚Äî NEW (denispal) ‚Äî Perma Tier 2 js/src/tests/test262/language/expressions/dynamic-import/namespace/<test name>;async | No test results reported. (SCRIPT)

[08:07:46.0919] <denispal>
tcampbell: actually,  do you  know if that ;async suffix indicates a flag or something I need to use?

[08:08:52.0408] <tcampbell>
denispal: those are not actually shell builds

[08:09:04.0671] <tcampbell>
but a running the jstests in a browser

[08:09:56.0982] <denispal>
tcampbell: I see.  I've been using '$ ./mach jstests --shell=~/js/dist/bin/js await-ns-define-own-property.js'  guessing that's not right then?

[08:10:50.0476] <tcampbell>
there is a `./mach jstestbrowser`

[08:11:36.0261] <tcampbell>
denispal: this is what the `async` is about https://searchfox.org/mozilla-central/source/js/src/tests/browser.js#570-574

[08:12:47.0087] <denispal>
tcampbell: oof, never have good luck running that command

[08:13:07.0944] <denispal>
okay thanks! I'll try to figure it out from here

[08:13:52.0316] <tcampbell>
I haven't tried it with mobile. I wonder if you can just launch a `python -m SimpleHTTPServer js/src/tests` and then use the browser apk from automation and see if you can trigger by visiting url manually

[08:15:24.0885] <tcampbell>
all those failures seem to be with dynamic import()

[08:16:57.0921] <tcampbell>
shell will definitely not repro those

[08:26:54.0433] <denispal>
tcampbell: probably naive question, but why wouldn't dynamic import work in the shell?

[08:27:32.0734] <iain>
confession: RegExp try build is not as green as I thought it was. I was mistakenly reporting "this regexp is too big" errors as OOM, and fixing that requires pushing some code around to avoid allocating an exception in an unsafe region. Also I broke the no-jit build. Happy Monday, everybody!

[08:27:35.0901] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[08:29:40.0026] <tcampbell>
denispal: it works in the shell using a vastly different loader

[08:30:09.0885] <tcampbell>
and since you patches touch scriptloader, you will care about the browsers version of module importing

[08:31:09.0862] <tcampbell>
(my dumb experiment of just running jsreftest.hml on phone did not work. The harness needs SpecialPowers)

[08:31:33.0701] <denispal>
ah I understand, okay thanks

[08:31:51.0462] <tcampbell>
/me reads the patch in detail

[08:34:52.0806] <tcampbell>
I can't think of why arm64 would be different other than maybe this was a race condition that just loses on mobile

[08:36:15.0515] <denispal>
me neither.  I don't think I've actually changed anything with module importing in this patch either.  only how the element for that module is accessed

[08:37:26.0353] <denispal>
I did change the module info object in the shell though that's saved in the sso, thought it could be related to that but doesn't sound like it after what you said above

[08:38:24.0116] <tcampbell>
aha! it is on desktop too

[08:38:26.0091] <tcampbell>
one sec

[08:39:23.0749] <tcampbell>
denispal: https://treeherder.mozilla.org/logviewer.html#/jobs?job_id=300403032&repo=mozilla-central&lineNumber=18455-18462

[08:39:39.0361] <tcampbell>
so, the error is on all platforms, but the harness doesn't report it!

[08:41:04.0434] <tcampbell>
 * so, the error is on all platforms, but the harness doesn't report it! Edit: nope, I'm wrong that is expected errors and a different test

[08:43:47.0347] <denispal>
tcampbell: awesome, that should be easier to reproduce.  ty!

[08:44:08.0870] <tcampbell>
denispal: I was wrong unfortunately

[08:44:23.0643] <tcampbell>
was looking at expected errors in a different test

[08:51:27.0581] <denispal>
oh haha

[10:53:19.0097] <Waldo>
Good news, everyone!  SCOTUS heard oral argument today _over the phone_, _and_ they did it live for anyone who wanted to listen!  It was AWESOME.  https://www.supremecourt.gov/oral_arguments/audio/2019/19-46 (audio) https://www.supremecourt.gov/oral_arguments/argument_transcripts/2019/19-46_6647.pdf (transcript)  We even got a "(Laughter.)" out of it!

[11:08:10.0551] <denispal>
tcampbell: do you happen to know how to run those tier2 jsreftests on try?  can't seem to find them under ./mach try fuzzy or chooser

[11:09:50.0854] <tcampbell>
denispal: `/mach try fuzzy --full`

[11:14:59.0211] <denispal>
tcampbell: ty

[12:31:44.0037] <iain>
The new test262 coverage for unicode property escapes involves a number of tests that are very slow, especially when run in the simulator. V8 has turned them off for non-default, non-x86 builds. I'm seeing timeouts in arm64 builds.

[12:32:32.0747] <iain>
I have a patch to disable them for the arm64 sim. Should I also disable them elsewhere?

[12:32:51.0379] <iain>
(V8's take: https://github.com/v8/v8/blob/master/test/test262/test262.status#L778-L781)

[12:34:06.0774] <iain>
Locally, the simulator times out after 150 seconds on tests that complete in <2 seconds in non-opt native builds

[12:34:31.0564] <tcampbell>
iain: you know about tthese? https://searchfox.org/mozilla-central/source/js/src/devtools/automation

[12:35:32.0242] <iain>
Oh, I was using jstests.list, but that is better

[12:35:50.0481] <iain>
Is the arm64 simulator known to be slower than the arm simulator?

[12:38:01.0337] <tcampbell>
The arm64 simulator is the vixl code. They might have gone crazy with asserts

[12:38:17.0923] <iain>
Aha

[12:52:01.0587] <Waldo>
sfink: Added a user of `JS::CopyArrayBuffer` like I should have added in the earlier patches -- feel free to tag someone DOM with a review on it if you want (tho I might get to doing so myself anyway).


2020-05-05
[19:26:36.0213] <Waldo>
froydnj: Did we remove all ~all use of `u8""` at some point from the tree for C++20 compatibility reasons?  I could have sworn we had a bunch in the tree, at least in tests if nowhere else, but I'm not finding any right now...

[19:27:03.0061] <froydnj>
Waldo: I don't remember us ever having u8"" in the tree...

[19:27:08.0231] <froydnj>
maybe some mfbt tests?

[19:27:27.0207] <Waldo>
Hmm, that might be it.

[19:27:59.0747] <Waldo>
`u8"foo"` was a convenient way to compel UTF-8 encoding of stuff even if it didn't have a distinct type, and I'm sure I used it at some point or other...

[19:28:49.0889] <Waldo>
Ah, yes, https://hg.mozilla.org/mozilla-central/annotate/tip/mfbt/tests/TestUtf8.cpp

[19:32:36.0589] <Waldo>
Also I wasn't really expecting you to actually be around this time of day...

[19:35:56.0811] <Waldo>
froydnj: Oh, bug 1509926 apparently.  (And I guess that was the only salient file.)

[19:35:58.0347] <botzilla>
https://bugzil.la/1509926 ‚Äî RESOLVED (Sylvestre) ‚Äî clang warns about UTF-8 arrays having changed type to char8_t ("warning: type of UTF-8 string literal will change from array of const char to array of const char8_t in C++2a [-Wc++2a-compat]" and "note: remove 'u8' prefix to avoid a change of behavior")

[19:36:35.0203] <Waldo>
I wonder if we can `decltype` or `auto` our way around that problem and start being more forward-thinking...

[21:12:43.0315] <Waldo>
Evidently not, if you use `u8""` _at all_ and haven't specified either `-std=c++20`/`-std=c++2a` or `-fchar8_t`, you'll get the warning -- and no matter the context, regardless how the UTF-8 string literal is used.

[05:53:32.0816] <tcampbell>
ahaha.. jonco who was originally responsible for `CanaryMagicValue = 0xDEADB15D`

[05:53:40.0690] <tcampbell>
 * ahaha.. jonco who was originally responsible for `CanaryMagicValue = 0xDEADB15D`?

[06:09:24.0992] <jonco>
tcampbell: twas I

[07:02:17.0360] <Ms2ger [~half-time dedication]>
Oh, bird

[07:06:04.0250] <yulia>
don't know if everyone heard, but springer nature has made a number of cs textbooks free online : https://link.springer.com/search/page/1?facet-discipline=%22Computer+Science%22&facet-content-type=%22Book%22&package=mat-covid19_textbooks

[08:21:28.0367] <yulia>
(will try apt-get update first)

[10:48:00.0288] <iain>
Do we only ever do object creation in masm using a template object?

[10:51:31.0403] <iain>
I ask because named captures involve creating a new object to hang off the side of the match result with a property per captured name, so the shape depends on the particular regexp

[10:59:24.0068] <tcampbell>
iain: I believe we do so that we know what group to use

[11:01:15.0094] <iain>
Actually, let me rephrase my question: do we always monomorphize masm code for a single template object?

[11:01:45.0265] <evilpie>
AFAIK yes?

[11:01:58.0899] <evilpie>
MacroAssembler::createGCObject has a const TemplateObject parameter

[11:02:05.0652] <iain>
It's a bit weird here because the RegExpShared has a template object hanging off of it, which we could examine dynamically, but we don't generate Ion code for a particular regexp

[11:02:45.0660] <iain>
I guess normally we use ICs for this kind of thing

[11:02:50.0334] <tcampbell>
there isn't a general mechanism because we don't always document all the constraints. eg should things be tenured, etc

[11:04:01.0987] <tcampbell>
you could have a general template object you feed to masm, and then patch up the shape from the regexpshared

[11:05:18.0304] <iain>
I think I would also have to patch up the group

[11:05:34.0892] <iain>
And the number of slots would be different

[11:06:39.0557] <tcampbell>
sounds like you need an ic

[11:07:49.0224] <iain>
Blech

[11:08:22.0210] <evilpie>
I think in theory you could handcode your own object allocation, but probably tricky

[11:08:23.0291] <iain>
I think the short term solution is just to use the existing VM call fallback whenever there is a named capture

[11:08:38.0590] <evilpie>
and you need a reference to a valid shape and group anyway

[11:08:47.0888] <evilpie>
unless you plan on creating those dynamically as well

[11:09:02.0730] <iain>
Those are created when we parse the regexp

[11:09:38.0652] <jorendorff>
I would love to understand literally any object allocation path

[11:09:56.0911] <Waldo>
You and me both, pal.

[11:10:57.0651] <Waldo>
This is something I have somewhat been working on solving/cleaning up lately...but I have a few other things higher priority, so I'm only stealing small bits of time for object allocation cleanup.

[11:11:14.0606] <jorendorff>
"evolution made a really strange thing"

[11:14:57.0497] <Waldo>
Actually half-seriously, tho, I think I can somewhat claim to understand some of the object allocation path these days.

[11:16:36.0399] <Waldo>
Some futzing around initial heap and alloc-kind computations (to shove stuff into background finalizable), then a cache to optimize object creation, then if that fails actually allocate it from the right arena based on allockind, then fill in stuff.

[11:17:37.0946] <Waldo>
The sad thing is there are three separate functions to allocate an object -- one for "given" proto, one for "class" proto, one for from a group.  Each with its own separate cache goo.

[11:18:14.0754] <Waldo>
We've designed stuff around `JSClass*` so long, and it's kind of a cancer.

[11:19:57.0115] <jorendorff>
interesting point

[11:20:14.0418] <iain>
Meanwhile I am staring at the inline masm allocation code, and it is starting to make some sense

[11:20:19.0603] <iain>
Which fills me with profound ambivalence

[11:23:51.0055] <ptomato>
Waldo: I'd be insanely curious to read a blog post (hint, hint) about why `JSClass*` and particularly `JS_InitClass` is so broken üòÉ

[11:26:41.0114] <Waldo>
`JS_InitClass` in particular is broken because the set of things it can set up and create is old and artificial, mostly.  Its idea of what's a property on an instance versus what's on a prototype is pretty creaky.  Plus it's rooted in a pre-ES6 understanding of classes.

[11:27:31.0315] <Waldo>
`JSClass` the idea of a vtable of operations is roughly reasonable, but it's got barnacles like `JSClass::name`, plus the ops that are duplicative between it and classops for hysterical raisins.

[11:33:35.0304] <iain>
Oh, interesting. If we fail to allocate the match object inline, then we jump to a fallback that calls AllocateObject to get some memory and then initGCThing to fill it in

[11:34:43.0016] <iain>
If I used the same approach for allocation, then I would only have to fill in the object's fields by hand, which doesn't seem that bad

[11:35:12.0605] <iain>
I'll try it out

[13:30:40.0277] <Ricky>
Sigh... rebased and now a different set of spidermonkey tests are failing in some inscrutable way. Does anyone know what [these failures](https://treeherder.mozilla.org/#/jobs?repo=try&author=rstewart%40mozilla.com&selectedTaskRun=FRxgcg8wTQSpcPN8Mf8XqA-0) are indicative of?

```
MOZ_CRASH(Cannot test assertRecoveredOnBailout)
```

The error message would be traced to [here](https://searchfox.org/mozilla-central/source/js/src/jit-test/tests/self-test/assertRecoveredOnBailout-1.js#11) but it's unclear to me what that means and my patches only touch the Python code, and not any of this configuration stuff (to my knowledge).

[13:32:29.0579] <denispal>
spent half the day rooting my pixel 2 to run ./mach jstestbrowser and then hit some manifest error üò¢

[13:32:59.0259] <denispal>
plan B I guess

[13:33:10.0207] <jorendorff>
Ricky: hmm ... I thought this was not supposed to be considered a failure

[13:33:13.0057] <jorendorff>
`|jit-test| crash`

[13:35:51.0055] <Ricky>
jorendorff: Is `|jit-test| crash` supposed to mean that that it doesn't trigger a failure if the code crashes? If so, where is that handled in the test harness code (if you know)?

[13:36:09.0608] <jorendorff>
looking

[13:37:29.0963] <jorendorff>
Ricky: when i run it locally, it does crash, and is considered passing; and when i remove `crash;` from the comment, it still crashes, and is considered failing

[13:39:36.0333] <jorendorff>
Parsed here: https://searchfox.org/mozilla-central/source/js/src/tests/lib/jittests.py#324-325

[13:40:08.0374] <jorendorff>
Ricky: But you're probably looking for this. https://searchfox.org/mozilla-central/source/js/src/tests/lib/jittests.py#523-539

[13:46:25.0027] <Ricky>
jorendorff: Does the return code depending on the Python version of the harness or something? According to this log the exit code of the JS test is 2147483651, which clearly is not equal to -11, 3 - 2 ** 31, 1, or 139 

[13:47:48.0800] <Ricky>
(I don't know how to reproduce on my local Windows machine, so I can't play with it myself)

[13:50:49.0406] <iain>
2147483651 is `2 ** 31 + 3`

[13:50:56.0397] <jorendorff>
Ricky: The difference between that value and `3 - 2 ** 31` is exactly 2^32

[13:51:24.0213] <jorendorff>
so could it be there is some Python version that interprets windows exit codes differently...?

[13:54:33.0454] <jorendorff>
Ricky: ok, looking at your patches, I have no clue how this could possibly even

[13:58:33.0682] <jorendorff>
oh, no, wait, is this a python 2 to python 3 patch

[13:59:18.0735] <jorendorff>
yeah

[14:02:36.0639] <Ricky>
what are these return codes? a unix return code is only a byte long, so i assume it's some different, bespoke concept

[14:03:43.0562] <Ricky>
i think the difference is explained by parsing a string of 4 bytes as an unsigned integer rather than a signed one, but I don't know where or why in the test harness this would occur

[14:05:38.0831] <jorendorff>
Hmm. That doesn't sound right to me, looking

[14:07:37.0610] <jorendorff>
Ricky: OK, I am not sure but I think they're coming from here? https://searchfox.org/mozilla-central/source/js/src/tests/lib/tasks_unix.py#187-204

[14:08:23.0404] <jorendorff>
oh, wait

[14:08:44.0286] <jorendorff>
very wrong file

[14:09:11.0530] <jorendorff>
https://searchfox.org/mozilla-central/source/js/src/tests/lib/tasks_win.py#42-56

[14:09:26.0191] <Ricky>
haha, yes, i was going to suggest tasks_win as the likely alternative

[14:11:01.0216] <jorendorff>
Python documentation is inadequate :( https://docs.python.org/3.8/library/subprocess.html?highlight=subprocess#subprocess.Popen.returncode

[14:11:07.0729] <jorendorff>
 * the Python stdlib documentation is inadequate :( https://docs.python.org/3.8/library/subprocess.html?highlight=subprocess#subprocess.Popen.returncode

[14:11:45.0998] <Ricky>
Yeah so this is a Python 2->3 quirk

[14:12:17.0307] <Ricky>
```
import subprocess, sys
p = subprocess.Popen([sys.executable, '-c', 'import sys; sys.exit(3 - 2 ** 31)'])
p.wait()
```

[14:12:36.0167] <Ricky>
This returns -214743645 in Python 2 and 2147483651 in Python 3

[14:12:51.0943] <jorendorff>
tableflip

[14:13:35.0038] <jorendorff>
that just seems gratuitous

[14:15:46.0355] <Ricky>
only on windows though, since as i mentioned, on unix this gets truncated to the lowest byte (i.e. 0x03)

[14:15:55.0933] <Ricky>
good stuff

[14:18:55.0502] <Ricky>
jorendorff: Can I send a patch your way to address this? Alternatively someone more acquainted with the code can take a stab at it if there's a cleaner way to solve the same problem, I would just be updating this one branch to allow either of the two magic numbers

[14:19:21.0156] <jorendorff>
go ahead -- ping me as soon as it's posted and i'll stamp

[14:19:28.0090] <jorendorff>
easier for you to patch and me to review

[14:22:20.0503] <jorendorff>
Ricky: fwiw, even on unix, legit exit codes are 1 byte, but the result of `waitpid`, which is what `subprocess.Popen.wait` is doing, is more complicated:

```
>>> p = subprocess.Popen([sys.executable, '-c', 'import os; os.abort()'])
>>> p.wait()
-6
```

[14:29:05.0116] <jorendorff>
ok, afk for an hour but i'll check back

[14:36:54.0020] <Ricky>
jorendorff: https://phabricator.services.mozilla.com/D73944

[14:37:21.0558] <Ricky>
Thanks for helping out, by the way

[15:00:26.0298] <evilpie>
\o/ We are so class to fixing Object.prototype.toString

[15:00:33.0208] <evilpie>
 * \o/ We are so close to fixing Object.prototype.toString

[15:14:15.0705] <evilpie>
So I am trying to fix a test issue in test_xrayToJS and I am not sure what to do

[15:14:47.0537] <evilpie>
We currently use Object.prototype.toString to find out if something is an opaque wrapper because that used to return [object Opaque]

[15:15:06.0677] <evilpie>
If we only depend on @@toStringTag that obviously doesn't work

[15:15:18.0462] <evilpie>
https://searchfox.org/mozilla-central/source/js/xpconnect/tests/chrome/test_xrayToJS.xhtml#386-395

[15:16:23.0077] <evilpie>
I am not sure what the best fix is? Should we define a @@toStringTag on Opaque wrappers? (I haven't looked how much work that is)


2020-05-06
[22:47:23.0885] <jandem>
evilpie: maybe we can define a helper function on Cu to test for opaque wrappers?

[07:59:37.0851] <sfink>
wow, our phabricator-based VCS-ignorant landing workflow is pretty awful for long patch series that modify files more than once

[08:00:20.0984] <sfink>
if you land a portion of a stack, pull changes, and rebase, you get a massive number of conflicts to sort through

[08:00:41.0089] <sfink>
I guess if I did the rebase with `--tool :other`, it would probably do the right thing

[08:01:04.0314] <iain>
Can you just rebase the part you haven't landed?

[08:01:29.0557] <jorendorff>
that's the thing to do

[08:01:34.0199] <sfink>
(even though :local and :other always seem backwards to me)

[08:01:42.0755] <sfink>
yeah, that's what I ended up doing, but it made me nervous

[08:01:51.0962] <jorendorff>
hg has `hg rebase -b BASE -d central`

[08:02:18.0254] <jorendorff>
or `hg rebase -r START..STOP -d central`

[08:02:42.0331] <sfink>
wouldn't that do the same problematic thing? -b BASE ought to see the common ancestor, which would still scoop in both versions of the landed patches

[08:02:47.0744] <sfink>
`-s BASE` works

[08:02:50.0743] <jorendorff>
you're right

[08:02:50.0943] <iain>
Or `hg rebase -s START -d central`

[08:02:54.0689] <jorendorff>
dang

[08:02:57.0467] <sfink>
yeah, that

[08:03:38.0217] <jorendorff>
 * <del>hg has `hg rebase -b BASE -d central`</del>

[08:03:41.0356] <sfink>
then I'll have to manually prune, which means I won't get the "right" obsolescence markers, but I guess I won't be needing them

[08:03:59.0750] <jorendorff>
how do you usually prune?

[08:04:17.0877] <jorendorff>
oh, by rebasing, i see

[08:04:26.0056] <sfink>
usually I just blindly rebase `-d central` after landing, and it works out that it can delete stuff

[08:04:28.0268] <jorendorff>
yeah

[08:04:34.0716] <sfink>
but now I'll do `hg prune -r ...`

[08:04:48.0294] <jorendorff>
‚ú®

[08:05:35.0707] <sfink>
I have been known to edit patches after landing, usually because I neglected to upload the most recent one after addressing review comments, and it's nice to have the remnants still around after rebasing

[08:05:58.0483] <sfink>
as in, it's nice that hg can yell at me. "Yo, idiot! You landed the wrong version again!"

[08:06:23.0983] <jorendorff>
oh

[08:09:02.0094] <sfink>
it makes me speculate about smuggling an hg rev hash through phabricator that is tagged onto an extra field when landing, so rebase could know that it's the successor of a local patch and do the right thing

[08:09:23.0598] <sfink>
because the whole system needs more complexity

[08:10:15.0082] <sfink>
I miss the data model of mozreview, even though I don't miss the UX

[08:12:19.0796] <mgaudet>
 (IIRC you can manually specify a successor; in theory you could do that by hand and then aim evolve at it. 

[08:12:32.0083] <mgaudet>
but last time I tried, I got caught up in something, and haven't done it again) 

[08:12:58.0319] <jorendorff>
you can, `--succ` and `--biject`, but it's a pain and doesn't really help much

[08:13:07.0149] <jorendorff>
 * you can, `hg prune --succ` and `--biject`, but it's a pain and doesn't really help much

[08:13:24.0585] <sfink>
yeah, I was looking at how yucky that would be. With --pair, it seems like I ought to be able to do it in one shot.

[08:13:33.0680] <sfink>
I think --biject is gone.

[08:14:28.0252] <jorendorff>
it should have a `--dwim` flag that fuzzy matches the content and commit message, because the whole system needs more nondeterminism

[08:14:48.0523] <sfink>
yup

[08:16:23.0239] <sfink>
ok, just ran the scary `prune --pair` command (after manually finding the landed changesets.) Nothing has exploded yet.

[08:16:56.0859] <jorendorff>
I have done a ton of `prune -r A..B --succ C..D --biject` and it never caused problems, it was just kind of a waste of time :-\

[08:17:19.0963] <sfink>
yeah

[08:18:19.0672] <sfink>
I definitely want them pruned. The obsolescence markers are just a security blanket. A security blanket spiked with rusty nails and with a faint whiff of smoke coming from somewhere, but a security blanket nonetheless.

[08:28:36.0769] <jonco>
anba: sorry I missed your phabricator comment, taking a look now

[08:33:04.0307] <mgaudet>
I definitely have wished many times for evolve-aware landings. 

[08:47:29.0835] <@allstarschh|afk>
jonco: sfink :ping

[08:48:53.0834] <sfink>
 sorry, coming in

[08:48:55.0042] <jonco>
@allstarschh|afk: sorry!  there in a min

[09:01:04.0752] <jandem>
iain: woo, congrats üéâ

[09:38:39.0570] <iain>
jandem: Got a backout from some reftests that I didn't know about, but nothing particularly serious

[09:39:49.0367] <jandem>
those pesky tests

[09:48:32.0794] <Waldo>
sfink: I individually rebase each lando'd patch in my tree onto its landed form in central.  That either results in no change remaining, or (in my experience) an empty rev I have to obsolete manually.  It's a fugly mess, but it does avoid horrific conflict rebasing...

[09:49:53.0610] <sfink>
Ouch. That makes sense, but seems inordinately painful.

[09:50:18.0219] <sfink>
I may have to write my own fuzzy matching tool to do that automatically.

[09:51:11.0485] <Waldo>
The set of patches is a least a linear sequence of numbers by rev to rebase onto, so in principle it should be relatively scriptable.  I've still been doing it manually so far, because of the random appearance or disappearance of an empty rev.

[09:51:27.0117] <Waldo>
Yeah, I should probably tool up at this point.

[09:51:43.0060] <froydnj>
tcampbell: do you have a reference for how you set up vscode to compile/test/whatever remotely?

[09:55:08.0896] <tcampbell>
`ac_add_options --build-backend=CompileDB`
Install the VSCode SSH Remote plugin
Install C++ extension on the remote
Open your work directory and do a `mach configure`
Wait a few minutes for vscode to ask if you want to use `compile_commands.json`

[09:55:13.0446] <sfink>
and you're right, I treat whether it's going to remove the patch or make it empty as random. I guess it must be based on metadata exact matches or something? I haven't wanted to think too hard about it.

[09:56:17.0377] <froydnj>
tcampbell: step 4 was on the local machine?  no `--target` magic or anything?

[09:56:18.0960] <tcampbell>
froydnj: My crude steps above. Don't have much written up. I use the terminal in vscode for my source control / build / debug operations

[09:56:40.0451] <tcampbell>
step 4 is in the terminal on the remote machine

[09:56:54.0429] <tcampbell>
the C++ plugin should be installed on the remote and it will start snooping

[09:57:17.0839] <froydnj>
oh, so it magically discovers `compile_commands.json` and vscode understands how to build individual files or whatnot

[09:57:43.0712] <tcampbell>
the other thing I add is `export VISUAL=code --wait` in order to get my git commit messages to pop the editor

[09:58:10.0792] <tcampbell>
vscode uses that for intellisense / completions. Then I use `./mach build` in the terminal for my normal builds

[09:59:05.0470] <tcampbell>
I was coming in from a vim workflow, so I just started doing most stuff in the vscode terminal, and then progressively using the editor more and more

[10:00:34.0201] <Waldo>
sfink: My _guess_ which I haven't verified is that it's something about whether my local patch contains "r=foo" or "r=foo!", possibly as rewritten by a moz-phab submission setting.

[10:00:44.0583] <Waldo>
This is all just generally terrible.

[10:01:04.0150] <Waldo>
GIVE ME BACK MAH SPLINTER

[10:02:06.0675] <mgaudet>
froydnj: Because I have lots of objdirs hanging around, I blessed a particular `compile_commands.json` by setting it explicitly; that's me tho. 

[10:02:27.0666] <mgaudet>
My `c_cpp_properties.json`
```
{
    "configurations": [
        {
            "name": "Linux",
            "includePath": [
                "${workspaceFolder}/**"
            ],
            "defines": [],
            "compilerPath": "/usr/bin/gcc",
            "cStandard": "c11",
            "cppStandard": "c++17",
            "compileCommands": "/home/matthew/unified/obj-x86_64-pc-linux-gnu/compile_commands.json"
        }
    ],
    "version": 4
}
```

[10:26:24.0401] <Benjamin Bouvier>
pro tip: use a symbolic link for `compile_commands.json`, so you can switch it quickly from one ISA to another

[10:52:43.0942] <mgaudet>
Interesting; I sort of figured it was best to keep the compile_commands.json as stable as possible to minimize indexing costs; but I'm also not building a separate platform! 

[11:09:36.0147] <theqwertiest>
hello everyone!

[11:09:50.0837] <theqwertiest>
a small question about building SM

[11:11:34.0653] <theqwertiest>
src version: esr 68.8.0
clang version: 10.0

build steps:
```
./mach bootstrap
cd js/src
mkdir _build
cd _build
JS_STANDALONE=1 ../configure --enable-nspr-build --target=i686-pc-mingw32 --host=i686-pc-mingw32 --with-libclang-path="C:/Program Files/LLVM/bin" --with-clang-path="C:/Program Files/LLVM/bin/clang.exe" --enable-debug
````

[11:12:12.0668] <theqwertiest>
when I built SM with the steps above I get the following error: 
```
lld-link: warning: ignoring unknown argument '-RELEASE'
lld-link: error: undefined symbol: public: bool __thiscall js::BytecodeLocation::isValid(class JSScript const *) const
>>> referenced by x:\moz\firefox-68.8.0\js\src\vm\JSScript.h:2114
>>>               ..\RegExp.obj:(public: class js::BytecodeLocation __thiscall JSScript::location(void))
>>> referenced by x:\moz\firefox-68.8.0\js\src\vm\JSScript.h:2716
>>>               ..\RegExp.obj:(public: class js::BytecodeLocation __thiscall JSScript::mainLocation(void) const)
>>> referenced by x:\moz\firefox-68.8.0\js\src\vm\JSScript.h:2720
>>>               ..\RegExp.obj:(public: class js::BytecodeLocation __thiscall JSScript::endLocation(void) const)
>>> referenced by ..\jsmath.obj
>>> referenced by ..\jsutil.obj
>>> referenced by ..\Interpreter.obj
>>> referenced by ..\Unified_cpp_js_src0.obj
>>> referenced by ..\Unified_cpp_js_src1.obj
>>> referenced by ..\Unified_cpp_js_src10.obj
>>> referenced by ..\Unified_cpp_js_src11.obj
>>> referenced 47 more times
```

[11:12:54.0836] <theqwertiest>
Is there smth that I'm doing wrong?

[11:14:08.0544] <theqwertiest>
a lot of `configure` options has changed since the last build that I've tried (esr 68.5), so maybe I'm missing some of them?

[11:15:26.0825] <theqwertiest>
ps: a small off-topic rant - spent 3 hours to log-in here... because for some reason matrix and/or SSO hates my e-mail...

[11:15:38.0869] <theqwertiest>
 * ps: a small off-topic rant - spent 3 hours trying to log-in here... because for some reason matrix and/or SSO hates my e-mail...

[11:16:38.0519] <theqwertiest>
 * when I build SM with the steps above I get the following error:
```
lld-link: warning: ignoring unknown argument '-RELEASE'
lld-link: error: undefined symbol: public: bool __thiscall js::BytecodeLocation::isValid(class JSScript const *) const
>>> referenced by x:\moz\firefox-68.8.0\js\src\vm\JSScript.h:2114
>>>               ..\RegExp.obj:(public: class js::BytecodeLocation __thiscall JSScript::location(void))
>>> referenced by x:\moz\firefox-68.8.0\js\src\vm\JSScript.h:2716
>>>               ..\RegExp.obj:(public: class js::BytecodeLocation __thiscall JSScript::mainLocation(void) const)
>>> referenced by x:\moz\firefox-68.8.0\js\src\vm\JSScript.h:2720
>>>               ..\RegExp.obj:(public: class js::BytecodeLocation __thiscall JSScript::endLocation(void) const)
>>> referenced by ..\jsmath.obj
>>> referenced by ..\jsutil.obj
>>> referenced by ..\Interpreter.obj
>>> referenced by ..\Unified_cpp_js_src0.obj
>>> referenced by ..\Unified_cpp_js_src1.obj
>>> referenced by ..\Unified_cpp_js_src10.obj
>>> referenced by ..\Unified_cpp_js_src11.obj
>>> referenced 47 more times
```

[11:19:01.0455] <iain>
theqwertiest: #synchronicity is the place to go for matrix / SSO problems

[11:19:26.0176] <froydnj>
tcampbell: mgaudet: thanks for the pointers!

[11:19:51.0055] <theqwertiest>
iain: yeah, I've left a message there, but just couldn't stop myself from ranting a bit, sorry...

[11:19:54.0243] <jandem>
try changing [this line](https://searchfox.org/mozilla-central/rev/dc4560dcaafd79375b9411fdbbaaebb0a59a93ac/js/src/vm/BytecodeLocation.h#75) to `inline bool isValid(const JSScript* script) const;` (it's missing the 'inline')

[11:20:47.0142] <theqwertiest>
jandem: thanks, I'll try it in a bit

[11:25:36.0019] <jandem>
and probably also remove the JS_PUBLIC_API [here](https://searchfox.org/mozilla-central/rev/dc4560dcaafd79375b9411fdbbaaebb0a59a93ac/js/src/vm/BytecodeLocation-inl.h#19), it doesn't really make sense

[11:28:21.0527] <theqwertiest>
jandem: nope, does not compile (with `inline` only change)

[11:28:35.0687] <theqwertiest>
there are a lot of `inline function 'js::BytecodeLocation::isValid' is
      not defined` warnings tho

[11:29:33.0906] <jandem>
theqwertiest: what if you just remove the JS_PUBLIC_API from both places?

[11:30:07.0167] <jandem>
the code is definitely 'wrong' in that it calls an inline function defined in the -inl.h file from the header file

[11:30:12.0827] <theqwertiest>
there is no such code in esr 68.6

[11:30:19.0230] <theqwertiest>
 * there is no such code in esr 68.8

[11:30:37.0512] <theqwertiest>
I mean `JS_PUBLIC_API`

[11:30:51.0935] <jandem>
ok makes sense

[11:32:49.0029] <jandem>
theqwertiest: just to make sure this is the only issue, does it compile if you make [this line](https://searchfox.org/mozilla-central/rev/dc4560dcaafd79375b9411fdbbaaebb0a59a93ac/js/src/vm/BytecodeLocation.h#321) `return true;` instead of `return isValid(debugOnlyScript_);`?

[11:35:08.0256] <theqwertiest>
it takes time to compile :D

[11:35:44.0100] <theqwertiest>
i.e. launched the compialtion, waiting for results...

[11:40:36.0676] <theqwertiest>
jandem: yup, it compiles

[11:41:21.0818] <jandem>
ok great. I don't know why it affects you and nobody else but `BytecodeLocation::isValid` needs to be fixed

[11:41:35.0753] <jandem>
I have to run, please file a bug? 

[11:41:36.0726] <theqwertiest>
different clang version may be?

[11:41:43.0833] <jandem>
maybe yeah

[11:41:47.0563] <theqwertiest>
 * different clang version maybe?

[11:42:43.0686] <theqwertiest>
ok thanks, I will file it. Now I need to think of a workaround, so that it would compile on local machine...

[11:43:20.0984] <theqwertiest>
 * ok thanks, I will file it. Now I need to think of a workaround, so that it would compile on a local machine at least...

[12:58:14.0766] <iain>
I have a question about CheckRecursionLimit

[12:58:23.0169] <jorendorff>
ok

[12:58:24.0095] <iain>
What are our invariants wrt being called from outside SM?

[12:59:07.0026] <jorendorff>
I think if cx is that thread's JSContext, it should be ok.

[12:59:24.0985] <iain>
That is to say: what happens when somebody calls into SM and we are already past the recursion limit?

[13:00:51.0388] <iain>
Context: The regexp parser calls CheckRecursionLimit internally. There is code in nsContentUtils that tries to compile a regexp, then wraps it in "^(?: ... )$" and compiles it again 

[13:00:52.0795] <iain>
https://searchfox.org/mozilla-central/source/dom/base/nsContentUtils.cpp#6453-6475

[13:01:10.0930] <iain>
And asserts that we can't get an error the second time if we parsed correctly the first time

[13:01:23.0396] <iain>
But the regexp in this particular case is the empty string

[13:01:32.0491] <iain>
Which we manage to parse without ever checking the recursion limit

[13:01:43.0625] <Waldo>
iain: I have a question about CheckRecursionLimit

[13:01:46.0162] <jorendorff>
hilarious

[13:02:33.0111] <jorendorff>
iain: I think that code must be wrong before your question is reached

[13:03:00.0866] <jorendorff>
right? i mean ... jsapi reserves the right to fall over for any reason whatsoever

[13:03:07.0920] <jorendorff>
timeout

[13:04:20.0108] <jorendorff>
iain: If the question is, should jsapi promise to check recursion on entry, in order to make this code correct, I think no

[13:05:00.0249] <jorendorff>
because ... we don't control what Clang does. it could decide to pass a different SP on the second call

[13:05:18.0883] <iain>
Hmm, it looks like that code was added quite recently

[13:06:04.0520] <iain>
It does seem like it could trigger breakage on timeouts

[13:07:18.0358] <iain>
Given that we are parsing the entire regexp twice, it seems quite silly to use an assertion to avoid, you know, just checking the return value

[13:58:38.0599] <iain>
mccr8: Want to rubberstamp a change in `test_xrayToJS`? I am adding support for a new RegExp flag, and `test_xrayToJS` is *very* clear about getting an xpconnect peer to review

[14:46:51.0409] <mconca>
Waldo: I'm wondering if any of the recent work you've done on streams addressed https://bugzilla.mozilla.org/show_bug.cgi?id=1454655

[14:48:38.0249] <Waldo>
mconca: No.  I have the absolute briefest start on readable byte streams in a WIP patch, but it's really basically nothing at all, dating to a time when I thought "maybe it makes sense to do this along the way", which quickly turned out not the case especially when I learned the spec was not really implementable yet.

[15:07:12.0798] <mconca>
Waldo: Understood. I knew you'd been collecting paper cuts to streams along they way.  Didn't know if this was a paper cut, or major surgery.  üôÇ 

[15:07:14.0578] <mconca>
Thanks

[15:12:53.0675] <Waldo>
It's a non-trivial feature for sure.

[15:26:28.0964] <mccr8>
iain: you should flag bholley. I don't know anything about that file, sorry.

[15:27:10.0776] <bholley>
iain: link?

[15:27:32.0728] <iain>
https://phabricator.services.mozilla.com/D74149

[15:29:08.0017] <bholley>
iain: so this is a boolean property, isomorphic API-wise to ignoreCase?

[15:29:45.0820] <bholley>
r+ assuming that's the case.

[15:29:50.0878] <bholley>
Thanks for getting review.

[15:30:40.0325] <iain>
bholley: Yep, API-wise it's the same as ignoreCase, global, multiline, sticky, and unicode.

[15:30:47.0034] <bholley>
:+1

[15:30:56.0029] <iain>
Thanks for the review!

[15:31:04.0760] <bholley>
 * üëçÔ∏è

[15:31:10.0248] <bholley>
np

[16:36:31.0627] <Waldo>
jandem, evilpie: It would be really nice if CacheIR in bug 1635878 managed to fix bug 1027846 in passing, wink wink, nudge nudge

[16:36:35.0527] <botzilla>
https://bugzil.la/1635878 ‚Äî NEW (evilpie) ‚Äî CacheIR: Optimize TypedArray length

[16:36:36.0102] <botzilla>
https://bugzil.la/1027846 ‚Äî ASSIGNED (Waldo) ‚Äî Differential Testing: Different output message involving length

[16:38:21.0164] <evilpie>
That code hasn't existed for a few years now

[16:38:32.0757] <Waldo>
o rly

[16:39:43.0843] <Waldo>
I've been sitting on that bug for years, obviously, with not good ideas about how to do anything about it without perf intruding, at minimum based on FUD perpetrated in that bug that seemed to be paralyzing to everyone as far as fixing went.


2020-05-07
[18:37:05.0335] <Waldo>
How many firstborns has W3Schools sacrificed to have top placement on Google still for obvious searches like "string split javascript" ü§î

[22:14:00.0907] <jandem>
Waldo: evilpie is right, I think we can just close that bug. See also [this comment](https://bugzilla.mozilla.org/show_bug.cgi?id=1322093#c4) and the next

[22:25:21.0306] <Waldo>
Hmm. 

[02:29:52.0451] <yulia>
for people interested in the "design" bit of language design, I have been thinking a _lot_ about cognitive dimensions, and it might be interesting for you too https://en.wikipedia.org/wiki/Cognitive_dimensions_of_notations

[02:45:57.0265] <theqwertiest>
does anyone know if there's a way to open some sort of a ticket for chat.mozilla.org login issues? Synchronicity keeps radio silence =(

[02:57:01.0334] <theqwertiest>
jandem: filed https://bugzilla.mozilla.org/show_bug.cgi?id=1636064

[03:13:38.0366] <theqwertiest>
 * does anyone know if there's a way to open some sort of a ticket for chat.mozilla.org login issues? Synchronicity channel keeps radio silence =(

[03:47:08.0206] <TheQwertiest>
jandem: another thing that might've masked this issue is that the code using `IsValid` is hidden under `#ifdef DEBUG`. So it won't ever show up in release builds.

[03:47:22.0302] <TheQwertiest>
 * jandem: another thing that might've masked this issue is that the code that uses inline `IsValid` is hidden under `#ifdef DEBUG`. So it won't ever show up in release builds.

[03:51:31.0170] <TheQwertiest>
another issue that I've found is that clang-cl produces msvc incompatible code when using inherited constructors (notably `js\public\Wrapper.h : class ForwardingProxyHandler`)

[03:52:11.0015] <TheQwertiest>
https://bugs.llvm.org/show_bug.cgi?id=43954

[03:55:39.0134] <TheQwertiest>
and the headers needs to be patched as well (because it uses non-standard C++ code, i.e. compiler extension) to become usable with msvc: https://github.com/TheQwertiest/foo_spider_monkey_panel/blob/master/scripts/patches/mozjs.patch

[03:56:11.0029] <TheQwertiest>
 * another issue that I've found is that clang-cl produces msvc incompatible code when using inherited constructors (notably `js\public\Wrapper.h : class ForwardingProxyHandler`), so it has to be patched...

[03:56:26.0277] <TheQwertiest>
 * another issue that I've found is that clang-cl produces msvc incompatible code when using inherited constructors (notably `js\public\Wrapper.h : class ForwardingProxyHandler`), so SM has to be patched before building...

[04:24:40.0090] <jandem>
TheQwertiest: yeah that one was fixed in m-c a while ago, bug 1614243

[04:24:41.0538] <botzilla>
https://bugzil.la/1614243 ‚Äî RESOLVED (Waldo) ‚Äî Have SpiderMonkey public Headers work on Visual Studio too

[04:25:56.0065] <jandem>
(I don't know for how long it will be possible to maintain compatibility with MSVC though)

[04:26:15.0111] <TheQwertiest>
the problem is not msvc compatibility (for headers issue)

[04:26:19.0693] <TheQwertiest>
but C++ conformance

[04:26:43.0615] <TheQwertiest>
that macro was not C++ conformant, since it relied on compiler extension

[04:27:30.0264] <jandem>
true but next time it could be a new language feature or so that msvc doesn't support yet..

[04:28:24.0949] <TheQwertiest>
that's a weird argument

[04:28:55.0096] <TheQwertiest>
either msvc is C++ compliant and if it's not then it's not a problem for SM

[04:29:04.0140] <jandem>
all I'm saying is that the code base officially doesn't support MSVC anymore so things could break at any time (as you ran into already)

[04:29:32.0210] <TheQwertiest>
all I'm saying is that headers should be kept C++ compliant

[04:29:59.0788] <TheQwertiest>
public headers that is

[04:30:16.0769] <jandem>
well we try, see those recent bug fixes

[04:32:46.0104] <TheQwertiest>
and I really appreciate that =)

[04:33:03.0953] <TheQwertiest>
too bad I'm on ESR, so I'm stuck with the old code base

[04:33:05.0708] <TheQwertiest>
 * too bad I'm on ESR, so I'm stuck with the old code base...

[04:33:27.0882] <froydnj>
"C++ compliant" and "compliant with how various compilers implement C++" are not necessarily the same thing

[04:35:17.0145] <TheQwertiest>
froydnj: not sure what you mean. Either compiler is C++ compliant, then it should work with corresponding compliant code, or compiler is not compliant

[04:35:59.0357] <TheQwertiest>
bugs aside, obviously

[04:38:06.0342] <TheQwertiest>
ps: am I correct to assume that next FF release (76) will be a new ESR release?

[04:39:02.0225] <TheQwertiest>
oh wait, it was actually released few days ago

[04:39:34.0883] <padenot>
78 is going to be the next ESR

[04:39:47.0333] <padenot>
https://wiki.mozilla.org/Release_Management/Calendar always has up to date information

[04:40:09.0581] <TheQwertiest>
oh, ok. Thx for the link!

[04:40:57.0744] <TheQwertiest>
previously it was 8-version cycle

[04:41:00.0600] <froydnj>
TheQwertiest: I'm talking about the code, not the compiler

[04:43:53.0863] <TheQwertiest>
froydnj: well yes, that's what I was talking about: public headers should be C++ standard compliant and not just clang-compliant, since not all clang-compliant code is C++ standard compliant.

[04:45:00.0250] <TheQwertiest>
if MSVC is not C++ compliant and it does not compile the proper compliant code, then that's on them =)

[04:45:11.0887] <TheQwertiest>
 * if MSVC is not C++ compliant in some cases and it does not compile the proper compliant code, then that's on them =)

[04:45:38.0931] <TheQwertiest>
 * if MSVC is not C++ standard compliant in some cases and it does not compile the proper compliant code, then that's on them =)

[04:59:10.0646] <Ms2ger [~half-time dedication]>
The question is not so much about "should", but about what guarantees a project can provide given its resource constraints

[04:59:49.0285] <Ms2ger [~half-time dedication]>
I understand that to be closer to "works with llvm" than "fully standards compliant"

[05:02:31.0536] <froydnj>
indeed, although the former is typically a good proxy for the latter

[05:03:29.0454] <froydnj>
and historically, "standards compliant" has not been a good proxy for "works with msvc"

[05:25:39.0628] <TheQwertiest>
Ms2ger [~half-time dedication]: there is a difference between "we don't care about compatibility with other compilers" and "we try to maintain C++ standard compliant code"

[05:28:06.0319] <TheQwertiest>
obviously, no one can give a 100% guarantee that code is 100% compliant (no such tool exists)

[05:30:43.0174] <TheQwertiest>
froydnj: regarding MSVC C++ compliance - that preconception is quite dated. msvc team made great strides in achieving c++ compliance in recent years. I've even encountered several cases when gcc is much less compliant than msvc :D

[05:31:08.0150] <Ms2ger [~half-time dedication]>
> "historically"

[05:31:17.0154] <TheQwertiest>
fair enough =)

[05:31:41.0728] <froydnj>
TheQwertiest: indeed, ms's renewed interest in improving their compiler has been great to watch

[05:33:16.0046] <TheQwertiest>
they even fixed their windows sdk headers to be compliant (which made it possible to build them with clang)

[05:33:43.0235] <TheQwertiest>
anyways, sorry for the offtopic >_<

[06:34:42.0860] <tcampbell>
jorendorff: when we disable syntax parser, it is from that point on for the rest of the file? really üòÆ
https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.h#639-640

[06:35:20.0824] <jorendorff>
Wow! That is a surprise to me too.

[06:36:22.0309] <tcampbell>
I throw a field in a class, and the rest of the file is no longer lazy

[06:36:36.0925] <jorendorff>
exciting

[06:36:43.0930] <jorendorff>
that's madness

[06:39:54.0362] <tcampbell>
Looks like all of ES modules do not syntax parse?

[06:40:24.0968] <jorendorff>
Right.

[07:56:09.0251] <mgaudet>
That behaviour definitely doesn't seem to match that comment 

[07:56:44.0532] <mgaudet>
Sounds like it broke at some point, and it was never noticed because AFAICT we don't have tests that try to expose syntax parsing.. 

[08:04:09.0449] <jorendorff>
nbp: sdetar: I'm in a meeting with Yulia, so if it's OK I'll be another 20 minutes before I get to the triage meeting

[08:32:58.0353] <tcampbell>
jonco: how does a `CustomAutoRooter` compare with a Rooted<T>?

[08:34:11.0616] <jonco>
tcampbell: Rooted<T> contains a T internally, which must be a GC pointer or struct that defines a trace method()

[08:34:49.0218] <jonco>
tcampbell: CustomAutoRooter is a base class where subclasses define a virtual trace method (and add the traceable data)

[08:35:02.0272] <jonco>
ideally everything would use a single mechanism

[08:35:13.0351] <tcampbell>
context is that `Parser` is a `CustomAutoRooter` and I wonder how that compares with `Rooted<Parser>`

[08:35:24.0248] <jonco>
I've been getting rid of AutoGCRooter uses and making them use Rooted<>

[08:36:04.0826] <jonco>
Rooted<Parser> doesn't have any of the parser methods for you to call, so you need to call root.get().foo rather than parser.foo as currently

[08:36:20.0083] <tcampbell>
ah

[08:36:43.0015] <tcampbell>
I'm trying to remove tracing from parser and put it on `CompilationInfo`

[08:37:35.0348] <tcampbell>
which is our new dumping ground for gc-thing state in the frontend to have a single instance for the two parser and one bce instance we usually spin up.

[08:38:42.0356] <tcampbell>
I might just make it a `CustomAutoRooter` for now, and then in a follow-up try and get rid of the interior roots and normalize it

[08:39:11.0695] <jonco>
that sounds good

[08:59:26.0291] <jorendorff>
decoder: Can you see bug 1634738?

[08:59:31.0888] <botzilla>
https://bugzil.la/1634738

[09:04:45.0688] <decoder>
jorendorff: yes, I can

[09:06:05.0821] <jorendorff>
decoder: Mentioning it because it looks like the sort of thing our existing fuzzers are unlikely to trigger. Not requesting any change.

[09:06:26.0705] <decoder>
yea, still wonder why we didnt find this ourselves

[09:06:44.0377] <jorendorff>
it's ancient, too

[10:18:32.0464] <Waldo>
Hrm.

[10:45:58.0266] <decoder>
nbp and I did some tests. this repros in ASan with length 32 too, but not with 31 or 33. with a new libFuzzer target this could be found maybe

[10:47:36.0103] <Waldo>
The easiest guess is something like allocation buckets, probably.

[10:47:45.0074] <Waldo>
Will look into shortly.

[11:26:52.0222] <evilpie>
iain: so did you figure out all the oranges on your regexp landing?

[11:29:22.0391] <iain>
Almost all

[11:31:39.0082] <iain>
nsContentUtils::isPatternMatching does weird things if we have a stack overflow while parsing the regexp

[11:32:24.0353] <iain>
I fixed one bug there, but there was another failure hiding behind it

[11:33:05.0937] <evilpie>
I noticed that it never clears the pending exception. I wonder how that works

[11:33:49.0450] <evilpie>
I suspect we should be clearing it

[11:33:57.0360] <iain>
Poorly

[12:17:37.0802] <iain>
evilpie: Actually, I think the answer is that AutoJSAPI clears the pending exception

[12:17:58.0543] <evilpie>
sure, but it will also report it right?

[12:18:55.0950] <iain>
It uses this variant of Init: https://searchfox.org/mozilla-central/source/dom/script/ScriptSettings.h#200-207

[12:19:09.0628] <iain>
Not sure what "report it right" means in this context

[12:21:56.0772] <evilpie>
I mean it will at least create a console message, not sure but it might even create a webpage observable event

[12:22:12.0178] <iain>
I can confirm the console message

[12:22:21.0649] <iain>
I have been testing this locally

[13:01:58.0353] <iain>
Does anybody know anything about web platform tests?

[13:03:40.0337] <iain>
Specifically: it looks like some / all of the structured clone tests are expected to fail

[13:03:59.0202] <iain>
At least in part because they are written to clone a regexp with the dotAll flag set

[13:04:04.0451] <evilpie>
there are ini files that describe the expected outcome

[13:04:21.0298] <jorendorff>
it's surprising how this works

[13:04:32.0240] <jorendorff>
there's a separate directory tree of config files

[13:04:35.0794] <iain>
It looks like those ini files are auto-generated?

[13:04:43.0795] <evilpie>
depends

[13:04:54.0577] <iain>
https://hg.mozilla.org/mozilla-central/log/tip/testing/web-platform/meta/IndexedDB/structured-clone.any.js.ini

[13:05:00.0402] <evilpie>
wpt are automatically imported, so based on the current state those inis are created

[13:05:18.0261] <evilpie>
but we also manually modify them for intermittent failures

[13:05:27.0044] <evilpie>
and of course if we ever fix them ;)

[13:37:25.0662] <djvj>
Waldo: did you want to steal the review for bug 1636183?

[13:37:39.0367] <botzilla>
https://bugzil.la/1636183 ‚Äî ASSIGNED (djvj) ‚Äî Expose QuoteString internals via public interface.

[13:40:40.0323] <Waldo>
djvj: "want" is strong, I was just drivebying.  It's hard for me to see how there's anything wrong with the patch, tho, if you set aside quasi-stylistic things that are debatable.

[13:41:32.0971] <djvj>
well that "static" vs "extern" thing is wrong, but yeah cool.  I'll get ted to stamp it.

[14:41:56.0495] <iain>
Turns out that supporting all regexps flags takes us from "all of the wpt IndexedDB structured cloning tests fail" to "many of the pass, and the ones that still fail do so in more specific ways"

[14:42:18.0925] <iain>
 * Turns out that supporting all regexps flags takes us from "all of the wpt IndexedDB structured cloning tests fail" to "many of them pass, and the ones that still fail do so in more specific ways"

[14:42:23.0427] <iain>
So that's good

[15:02:56.0481] <sfink>
uh oh, that may mean I have bugs incoming

[15:06:53.0428] <iain>
Speaking of the wpt tests: who do I get to review my changes to the .ini file?

[15:11:08.0946] <evilpie>
for indexedDB r?dom-workers-and-storage-reviewers would be good

[15:14:13.0859] <iain>
Cool, thanks

[16:40:46.0111] <Waldo>
I have discovered that external strings are entirely unused in our tree.  I'm sure there are embedders who use them, still.  Probably.  Given they can only be initialized from `char16_t` data -- and who has their strings in that encoding any more? -- it seems at least worth _floating_ the idea of removing them and all their complexity.

[16:45:21.0513] <evilpie>
really? https://searchfox.org/mozilla-central/search?q=JS_NewMaybeExternalString&path=

[16:46:22.0772] <Waldo>
...we have two different functions that will create external strings?  ‚òπÔ∏é

[16:46:30.0691] <Waldo>
I want to go home and rethink my life.


2020-05-08
[17:05:49.0061] <Waldo>
Well, https://treeherder.mozilla.org/#/jobs?repo=try&revision=45f7f8a83fe8155b6c92c0d4a259d87e0d153e2a at least was good before, so if something fails now...

[20:40:10.0953] <sfink>
confession: I normally post patches for review with `hg yeet ...`, a command that maps to multiple layers of bespoke eldritch horrors (though no PHP!) before actually posting the data to phabricator. As my brother often asserted when I was around, "that boy ain't right."

[20:40:13.0121] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[22:41:08.0500] <Waldo>
Not sure that confession is supposed to be for actual confessions...

[01:31:28.0732] <Ms2ger [~half-time dedication]>
iain: did you solve your wpt issues?

[06:06:33.0616] <jdm>
> <@waldo:mozilla.org> I have discovered that external strings are entirely unused in our tree.  I'm sure there are embedders who use them, still.  Probably.  Given they can only be initialized from `char16_t` data -- and who has their strings in that encoding any more? -- it seems at least worth _floating_ the idea of removing them and all their complexity.

Servo does not use them

[06:11:56.0035] <Ms2ger [~half-time dedication]>
ptomato: are you aware of any? ^

[06:16:06.0764] <iain>
Ms2ger [~half-time dedication]: Yep!

[06:17:07.0336] <Ms2ger [~half-time dedication]>
üëçÔ∏è

[06:50:58.0538] <iain>
We have JS_IsThrowingOutOfMemory, but not JS_IsThrowingOverRecursed. Is there a reason for that, beyond "we never needed it"?

[06:51:41.0242] <iain>
The JSContext tracks it as a separate flag, but we don't currently expose it to the embedder

[06:54:53.0256] <iain>
nsContentUtils::IsPatternMatching assumes that any error when parsing a regexp is due to invalid regexp syntax

[06:56:11.0142] <iain>
This already wasn't true for OOM, which I think has probably been the cause of some unreproducible crashes

[06:56:36.0329] <iain>
But now the new regexp engine will also check for over recursion while parsing

[06:57:04.0751] <evilpie>
I would suggest you introduce a new API for pattern matching that handles that internally instead of doing that in the caller

[06:57:36.0703] <jorendorff>
hey, nice idea

[06:58:06.0858] <jorendorff>
unless... is it a silly thing to be doing in the first place?

[06:58:42.0134] <iain>
Pattern matching?

[06:58:57.0805] <jorendorff>
the particular sequence of things nsContentUtils is doing

[06:59:57.0982] <iain>
The logic is somewhat distributed

[07:00:10.0159] <jorendorff>
anyway, wouldn't kill us to offer that as a service

[07:00:47.0928] <jorendorff>
even if compiling twice is silly, seems better for us to do something silly internally, as a mere implementation detail, than to require a downstream user to do something silly

[07:00:58.0040] <iain>
This is slightly different

[07:01:03.0964] <iain>
I fixed the compiling twice bug

[07:01:30.0839] <evilpie>
Maybe<bool> reminds me of https://thedailywtf.com/articles/What_Is_Truth_0x3f_

[07:02:05.0604] <iain>
The new crash happens here: https://searchfox.org/mozilla-central/source/layout/base/RestyleManager.cpp#3160

[07:03:45.0561] <iain>
Which I believe implicitly assumes that if the pattern was valid before, then it is still valid

[07:03:53.0257] <iain>
I don't know why / how often they are recompiling

[07:04:32.0624] <iain>
But anyway, I think evilpie's suggestion is a good solution

[08:02:37.0320] <sfink>
> <@ms2ger:igalia.com> ptomato: are you aware of any? ^

As Waldo figured out a bit later, external strings are used pretty commonly in Gecko. It's just that there is a now-unused `JS_NewExternalString` entrypoint in addition to the `JS_NewMaybeExternalString` function that *is* used.

[08:03:15.0905] <Ms2ger [~half-time dedication]>
ü§∑

[08:51:35.0059] <ptomato>
we don't use external strings in GNOME currently (but now that I looked up those APIs I can see where I _could_ use them üòÉ)

[09:21:06.0391] <evilpie>
should we do something about https://bugzilla.mozilla.org/show_bug.cgi?id=1628719 ?

[09:49:25.0413] <jandem>
evilpie: I talked to ryanvm about it earlier today.. unfortunately it missed the 76 release and then also the 76.0.1 dot release from yesterday...

[09:51:36.0607] <tcampbell>
sfink: Is root marking ever incremental?

[09:52:23.0423] <sfink>
to a first approximation, no

[09:52:47.0924] <tcampbell>
I guess my question is actually if I have a rooted vector, and pop tenured pointers from it are their any barriers that are required?

[09:53:56.0778] <sfink>
seems like that would require a pre barrier?

[09:54:06.0651] <sfink>
oh, wait

[09:54:11.0063] <tcampbell>
the targets are all new objects. yeah, I rpobably should fix this for sanity

[09:54:25.0100] <tcampbell>
I don't think it is a "bug" though

[09:55:14.0527] <sfink>
I think you're right, though, if it's really rooted then no barriers are needed to pop

[09:56:06.0889] <tcampbell>
also, at this point there are only atoms in the vector, and this is under an AutoKeepAtoms

[09:56:14.0972] <tcampbell>
so many spiders

[09:56:15.0963] <sfink>
but I guess normally you'd be using a GCVector<HeapPtr<T>> or something

[09:56:36.0743] <sfink>
oh, heh

[09:56:37.0011] <tcampbell>
yeah, this is actually a linked list in the frontend

[09:56:59.0911] <tcampbell>
historical fun

[09:57:59.0355] <tcampbell>
I think I need to through in a `ClearEdgesTracers` when I drop the tail of the list

[09:58:48.0362] <sfink>
do you, if they're all atoms? Isn't that for tenured -> nursery edges?

[09:59:57.0865] <tcampbell>
hmm.. actually there may be a scope here too

[10:01:01.0529] <tcampbell>
I think of ClearEdgesTracer as manually doing `HeapPtr` destuctor, but that may not be right..

[10:08:35.0827] <tcampbell>
actually.. The `Rooted` destructor doesn't fire barriers, so this should all be fine as is

[10:09:18.0021] <tcampbell>
which I think makes sense

[12:27:02.0074] <mgaudet>
Do we have a description of rules about when parse nodes can be used again inside the parse tree vs. when they must be created anew? (jorendorff ?) I have a [patch Andr√© wrote](https://hg.mozilla.org/try/rev/586b7ed6128083cc9096ecd48d0306946761d14e#l3.63) which had implemented `privateNameReference`, which creates a new NameNode, and `noteUsedName`'s the name -- but it's not clear what would make reusing the original node correct or incorrect.

[12:30:27.0764] <jorendorff>
Looking. Generally it does not matter; def/use was once tracked by chaining linked lists through parse nodes, but it hasn't been like that for a long time

[12:32:32.0426] <mgaudet>
Ok; that's pretty good to hear

[12:34:17.0953] <jorendorff>
mgaudet: I can't tell if he's saying: can we get away with using a node in more than one place in the tree (not 100% sure, there is still some mutable state in each node); or can we get away with simply not adding an extra "privateNameReference" node and node type

[12:35:02.0093] <mgaudet>
jorendorff: So, I have a local version of this patch that doesn't use the privateNameReference, and instead does as suggested `noteUsedName` 

[12:35:05.0626] <mgaudet>
it... seems to work? 

[12:35:25.0144] <jorendorff>
without that, can you delete privateNameReference from the handler entirely?

[12:35:46.0247] <mgaudet>
I believe I will be able to yes; that was the only connsumer

[12:36:20.0215] <jorendorff>
just making sure I understand the motivation. ok, looking at noteUsedName...

[12:37:07.0587] <jorendorff>
mgaudet: Ah. To clarify, noteUsedName is being used in a ... nonobvious way here, right? The binding we are using is the secret internal binding

[12:37:22.0959] <jorendorff>
where the secret symbol is stored

[12:37:39.0437] <mgaudet>
(I am still in üêïÔ∏è @ ‚å®Ô∏é phase here... so trying to catch up for sure!) 

[12:37:49.0367] <jorendorff>
:D :D :D

[12:38:02.0619] <jorendorff>
Either way, I think the actual TODO issue here ends up being a shallow plumbing question

[12:38:09.0012] <jorendorff>
and I think the answer is, yeah, just delete it

[12:39:00.0954] <jorendorff>
(shallow, because the `noteUsedName()` call, which is the more mysterious part, ends up being the same either way)

[12:39:11.0666] <mgaudet>
So the thing that's non-obvious about note-used name is that we're saying we're using `#foo`, but the actual bytecode that will be emitted will acutally use `PrivateSymbol(#foo)` right? 

[12:40:00.0474] <jorendorff>
I can't see enough context. where are we?

[12:40:22.0371] <mgaudet>
fieldInitializerOpt

[12:40:49.0253] <mgaudet>
~ https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.cpp#7685 

[12:40:58.0305] <jorendorff>
that really is 200 lines long, isn't it

[12:41:02.0990] <jorendorff>
ok, let's see

[12:42:47.0044] <jorendorff>
OK, we're synthesizing code for the field initializer lambda.

[12:43:11.0192] <jorendorff>
The source code looks like

```
class C {
  #f = blah();
}
```

[12:43:29.0560] <jorendorff>
from that `#f = blah();` we are synthesizing a lambda that does `function () { this.#f = blah(); }`

[12:44:17.0615] <jorendorff>
which will actually be implemented as something like `function () { this[__$classEnvPrivateSymbol_f] = blah(); }`

[12:44:34.0069] <mgaudet>
following along so far yes :) 

[12:45:02.0949] <jorendorff>
mgaudet: so, long story short, the NoteUsedName is for the part inside the brackets of `this[]`

[12:45:24.0207] <jorendorff>
we'll be doing a GetAliasedVar or something

[12:45:40.0237] <jorendorff>
and the frontend wants this "read barrier" every time we parse code that's going to access a binding that way

[12:48:33.0437] <mgaudet>
OK. I think this reads OK then. I appreciate this! I'll probably put it up for review once I've done a little more cleaning, but I'm glad I can -mostly- follow what's going on so far! 

[12:49:12.0786] <mgaudet>
I may have to get you to explain how you see noteUsedName as akin to a read barrier one day tho :) 

[12:50:22.0141] <sfink>
before you use a variable, you have to do a magic dance. Doing a magic dance before something is pretty much the definition of a barrier.

[12:50:52.0630] <mgaudet>
üíÉ

[12:50:57.0897] <mgaudet>
Hahah. Fair enough

[12:51:25.0407] <jorendorff>
yeah, that's about the limit of how useful that metaphor is

[12:51:42.0482] <froydnj>
has to be a ballet dance, though

[12:52:27.0583] <mgaudet>
ü©∞

[12:52:58.0547] <froydnj>
it requires a barre-ier!

[12:53:14.0218] <jorendorff>
we didn't ask nathan

[12:53:26.0294] <jorendorff>
i think we were all pretty clear on that point

[12:54:04.0257] <sfink>
ugh, 2 attempts to /kick froydnj failed so far. Lemme go for a 3rd...

[12:54:04.0612] <froydnj>
I never know if the "these seem pretty close" in my head corresponds to reality

[13:05:25.0626] <RyanVM>
evilpie: a no-context NI on me isn't particularly helpful

[13:09:31.0298] <evilpie>
I thought there is enough context in the bug

[13:09:58.0427] <RyanVM>
looks like the same context that was there when Jan pinged earlier about it

[13:10:04.0919] <RyanVM>
has something changed since?

[13:10:33.0956] <evilpie>
well yet another person? we just shipped a dot release. And no-one actually updated the bug

[13:12:28.0357] <RyanVM>
We asked about uplift on April 15 - nobody replied after a week. We wontfixed for 76 and nobody complained. I emailed release-drivers two days ago about the upcoming dot release and said to please tell me ASAP if there were any other bugs needed in it and nobody replied.

[13:12:44.0197] <RyanVM>
Dot releases have a cost

[13:12:51.0278] <jorendorff>
what bug is this?

[13:13:09.0422] <evilpie>
https://bugzilla.mozilla.org/show_bug.cgi?id=1628719

[13:13:11.0857] <RyanVM>
bug 1628719

[13:13:14.0906] <botzilla>
https://bugzil.la/1628719 ‚Äî RESOLVED (anba) ‚Äî Wrong inherited static methods called

[13:13:37.0471] <RyanVM>
(and mind you, this has been broken since 75)

[13:13:52.0969] <evilpie>
oh you are right

[13:13:59.0786] <RyanVM>
so we knew a month ago this was broken and nobody escalated then

[13:14:01.0574] <evilpie>
I though this was a new regression d'uh

[13:14:44.0464] <evilpie>
maybe some popular library updated or something like that? 3 reports in less than 24hours is surprising

[13:15:09.0313] <RyanVM>
 * We asked about uplift on April 17 - nobody replied after nearly a week. We wontfixed for 76 and nobody complained. I emailed release-drivers two days ago about the upcoming dot release and said to please tell me ASAP if there were any other bugs needed in it and nobody replied.

[13:15:34.0229] <RyanVM>
I wish we would have gotten it into beta in mid-April when it would have had some time to bake

[13:16:43.0765] <jorendorff>
...yes

[13:16:54.0481] <jorendorff>
yes, we dropped this one

[13:16:59.0067] <RyanVM>
If people feel super-strongly about it being something to include in a dot release, I'm open to the argument should there be another one in the works. But I'm having a hard time seeing it as a driver based on what I know.

[13:18:17.0844] <RyanVM>
on the bright side, 77 ships in less than 4 weeks üôÇ

[13:22:02.0550] <jorendorff>
Ryan, if there's another one, we should definitely uplift. This is a severe bug.

[13:22:13.0615] <jorendorff>
I mean, calling the wrong method. :-|

[13:23:42.0689] <RyanVM>
jorendorff: is there any workaround we can advise in the mean time?

[13:24:01.0551] <RyanVM>
(also, why was the severity downgraded from critical to normal?)

[13:27:38.0729] <jorendorff>
RyanVM: The workaround would be something like adding a distinct expando property to every class you have that uses `extends`. 

[13:28:11.0941] <jorendorff>
if any base class has any static methods

[13:31:02.0089] <jorendorff>
or just don't use static methods

[13:32:11.0878] <RyanVM>
Can you please add a comment to the bug offering that advice? Also, please adjust the severity assuming normal isn't correct (sounds like an S1 or S2 with the new nomenclature).

[13:32:28.0004] <jorendorff>
will do

[13:32:30.0577] <RyanVM>
thanks

[13:34:43.0458] <RyanVM>
I've added it to my spreadsheet for any possible 76.0.2 bugs. If you think this is something that needs to drive a dot release, I'd suggest starting a release-drivers thread though.

[13:38:09.0124] <jorendorff>
RyanVM: I don't know what the cost of a point release is... if we would ever consider a very late point release for an S2 bug, this would be the one. But even I don't think it's S1 "Catastrophic".

[14:32:38.0968] <iain>
Can I get somebody to double-check my reading of the spec?

[14:33:28.0100] <Waldo>
iain: You rang

[14:33:34.0556] <aholm>
I'll can try if you'd trust my reading :laug

[14:33:35.0274] <iain>
https://tc39.es/ecma262/#sec-getsubstitution

[14:33:48.0556] <aholm>
 * I'll can try if you'd trust my reading

[14:34:05.0187] <aholm>
 * I'll can try if you'd trust my reading :amused:

[14:34:21.0007] <aholm>
 * I'll can try if you'd trust my reading üòÜ

[14:34:31.0937] <Waldo>
> <@jorendorff:mozilla.org> i think we were all pretty clear on that point

pointe (froydnj: ^)

[14:34:44.0562] <iain>
If you scroll down to the named capture case ("$<") in the table, it calls Get on namedCaptures

[14:35:24.0249] <iain>
namedCaptures is passed in from here: https://tc39.es/ecma262/#sec-regexp.prototype-@@replace

[14:35:54.0097] <iain>
It is set in step j

[14:36:18.0506] <iain>
And we grab it off of the result of RegExpExec

[14:36:40.0745] <Waldo>
I am starting to regret having asked ;-)

[14:36:55.0705] <jorendorff>
Waldo: who could have foreseen

[14:37:30.0181] <iain>
And the result of RegExpExec can be anything it wants to be (step 4 here: https://tc39.es/ecma262/#sec-regexpexec)

[14:38:03.0933] <iain>
So in theory all those Gets in the named capture case are user-visible and we need to make sure to do them right, etc? 

[14:38:53.0279] <jorendorff>
sounds like yes

[14:38:56.0190] <Waldo>
If `groupName` can be an arbitrary user-controlled string, then yes.

[14:39:36.0861] <evilpie>
even if not, namedCaptures can be user defined

[14:40:02.0748] <jorendorff>
*groupName* can definitely be anything, it's part of this replacement string, which can be anything

[14:40:08.0757] <iain>
Yep, groupName is just `foo` in `"abc".replace(..., "$<foo>"

[14:40:17.0018] <iain>
 * Yep, groupName is just `foo` in `"abc".replace(..., "$<foo>")

[14:40:17.0988] <jorendorff>
well, it can't contain `>`. but apart from that.

[14:40:34.0151] <iain>
 * Yep, groupName is just `foo` in `"abc".replace(..., "$<foo>")`

[14:41:24.0349] <iain>
Ugh, and I bet we should only do the Get once

[15:01:40.0778] <mgaudet>
confession: Headed off the well beaten path initially laid by Andr√©; starting to do my own implementation work (taking an extremely incremental approach) for private fields. Alas though, it's friday, and I'm at EOD. So working on basic basic bytecode emission will have to wait until Monday. Toodles all. 

[15:01:42.0996] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[15:35:07.0285] <iain>
Confession: went down a rabbit hole looking at weird games you can play with proxies and replacing named captures, and ended up filing a bug against V8

[15:35:54.0360] <iain>
 * confession: went down a rabbit hole looking at weird games you can play with proxies and replacing named captures, and ended up filing a bug against V8

[15:53:18.0592] <evilpie>
Does anyone here understand promises and especially job queues?

[15:55:13.0021] <Waldo>
"can any of us truly say they know promises"

[15:55:30.0461] <Waldo>
evilpie: I can be a blind man leading you as well as anyone, maybe.

[15:56:06.0842] <evilpie>
could we detect uncaught rejections in the shell?

[15:57:19.0481] <Waldo>
I think we could.  If this is with an aim of counting those tests as failing, apparently vast swaths of test262 leave around unhandled rejected promises regularly, so there'd be a backlog of tests to alter for it.

[15:57:32.0858] <Waldo>
Someone definitely investigated doing that at some distant point...

[15:57:51.0618] <evilpie>
oh we already do this: https://searchfox.org/mozilla-central/source/js/src/shell/js.cpp#1240

[15:57:59.0017] <evilpie>
but we don't report them to the console

[16:17:12.0739] <arai>
evilpie: uncaught rejection should be reported to terminal when exiting the shell

[16:18:02.0899] <arai>
if it's not reported, it's most likely a bug

[16:18:20.0840] <evilpie>
arai: you need to call quit()

[16:18:23.0479] <evilpie>
thanks for the hint!

[16:53:09.0589] <evilpie>
arai: I was curious how much work it would be to get correct stacks in a few more cases in Promise.cpp, but seems like that would require quite a bit of refactoring


2020-05-09
[17:40:18.0379] <froydnj>
Waldo: touche

[19:05:42.0950] <jaisoone>
On Windows 10, if I first "export MOZ_FORCE_DISABLE_E10S=1", and then run firefox, it doesn't seem to run any Temporay Add-ons I've created. In fact they don't show up in the JS debugger either. Any idea about what is happening? Was working two or more weeks ago, but not on the latest stuff from mozilla-central.

[22:40:05.0545] <kbrosnan>
Sounds like something for mozregression.  

[00:24:42.0776] <jaisoone>
Thanks


2020-05-11
[06:45:51.0173] <tcampbell>
avandolder: welcome!

[06:46:11.0584] <jorendorff>
\o/ welcome!

[06:47:44.0898] <avandolder>
Hello! I'm going to be interning on the SpiderMonkey team this summer. I'm looking forward to working with everyone!

[06:48:26.0068] <iain>
Hello! 

[06:48:40.0589] <yulia>
welcome!

[06:57:48.0353] <jandem>
welcome! just curious, do you know whether you have Dutch roots? (based on the name)

[06:58:11.0448] <avandolder>
Yeah, my dad's parents are from the Netherlands

[06:58:34.0446] <jandem>
ah cool 

[07:17:55.0526] <sanketh_>
I am working on Bug 1621433, and tripped the hazard analysis by inserting a function call right after [here](https://searchfox.org/mozilla-central/source/dom/canvas/CanvasRenderingContext2D.cpp#5098). However, it's not apparent to me (or tjr ) why the function I added might cause a GC, so he suspects it might be a false positive. [Here](https://paste.mozilla.org/huzLLftr) is the function, it calls just two real functions `do_GetService` and `GenerateRandomBytes`. [Here](https://phabricator.services.mozilla.com/differential/changeset/?ref=2512474) is my patch that tripped the hazard analysis. Our questions are (1) Is this a true or false positive? (2) If it's a false positive, how should I avoid it?

[07:18:10.0775] <botzilla>
https://bugzil.la/1621433 ‚Äî ASSIGNED (tjr) ‚Äî In RFP mode, turn the all-white canvas into a fully random 'poison pill'

[07:22:08.0942] <Ms2ger [~half-time dedication]>
Well, do_GetService can call arbitrary code, so why couldn't it GC?

[07:24:14.0556] <Ms2ger [~half-time dedication]>
Also, returning non-random data from GeneratePlaceholderCanvasData if it fails seems like a pretty bad idea

[07:27:17.0533] <tcampbell>
yeah, the reason for that no-gc check, is that the underlying data buffer can be moved by the GC in the general typedarray case

[07:27:33.0183] <jandem>
yeah I'd suggest splitting GeneratePlaceholderCanvasData in two. Have a function that returns GenerateRandomBytes, then do the rest in the nogc scope

[07:27:56.0277] <tcampbell>
 * The reason for that no-gc check, is that the underlying data buffer can be moved by the GC in the general typedarray case

[07:29:53.0345] <sanketh_>
Ms2ger [~half-time dedication] tcampbell jandem Thanks so much!! üôÇ

[07:32:18.0725] <sanketh_>
> <@ms2ger:igalia.com> Also, returning non-random data from GeneratePlaceholderCanvasData if it fails seems like a pretty bad idea

Could you elaborate?

[07:46:41.0905] <tcampbell>
Ah nice, mozilla-unified has an autoland bookmark now!

[07:51:46.0605] <evilpie>
tcampbell: nice, I think I am going to switch now

[07:52:00.0050] <evilpie>
I wonder how I best transfer my commits though

[07:53:20.0724] <tcampbell>
I'm on cinnabar and and my unified/autoland and autoland/default point at some thing so nothing changed

[07:53:49.0598] <evilpie>
mhm maybe I should also switch to git 

[07:55:28.0900] <tcampbell>
I'm a damaged git user so stick with it. I don't know that I'd _encourage_ people to switch if they can get around on hg just fine

[08:01:08.0859] <evilpie>
Waldo: please review Bug 1277801

[08:01:10.0454] <botzilla>
https://bugzil.la/1277801 ‚Äî NEW (evilpie) ‚Äî Remove Object.prototype.toString classname fallback

[09:07:19.0807] <tcampbell>
jandem+++ for doing the newsletter again! https://mozilla-spidermonkey.github.io/blog/2020/05/11/newsletter-4.html

[09:09:15.0289] <jandem>
thanks to everyone for their input

[09:15:51.0895] <evilpie>
YES! https://bugzilla.mozilla.org/show_bug.cgi?id=1595046 finally merged

[09:21:53.0823] <ptomato>
Waldo: if you get a chance, feedback/review on https://phabricator.services.mozilla.com/D73520 appreciated! this is the last part of a larger patch stack

[09:24:38.0529] <yulia>
avandolder: if you want an "easy on the eyes" overview of all the proposals in stage 3 plus their code samples, we have this webpage now: https://tc39.es/

[10:53:15.0349] <Waldo>
evilpie, ptomato: They're both high on the priority list today.  :-)

[10:53:58.0140] <ptomato>
thanks!

[10:58:06.0852] <evilpie>
jandem: should we tweet the blogpost?

[13:24:41.0315] <iain>
confession: The new regexp engine has landed in nightly again. Hopefully it sticks this time.

[13:24:43.0670] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2020-05-12
[18:40:12.0560] <Waldo>
jandem: I am actually coming to understand this code, sort of, which is a scary prospect.  Technically only that last patch is needed, but I think I may do some broader cleaning here in the future, so...

[22:20:43.0983] <jandem>
evilpie: yeah I think so

[22:20:58.0505] <jandem>
Waldo: great, we're all counting on you

[22:21:08.0503] <jandem>
(minor pun intended)

[03:50:02.0879] <nbp>
Waldo: Sounds like you are up to date, now ;)

[06:12:59.0647] <mgaudet>
Looks like regexp has stuck! @iain+++++++++!

[06:14:24.0498] <jorendorff>
üí•

[06:14:45.0090] <froydnj>
except for breaking os x for people, yes :)

[06:54:15.0005] <RyanVM>
and a new Nightly crash when pasting URLs into Slack

[06:54:19.0701] <RyanVM>
(bug coming shortly)

[06:54:30.0106] <RyanVM>
https://crash-stats.mozilla.org/signature/?product=Firefox&signature=StringMatch

[06:58:14.0197] <RyanVM>
bug 1637243

[06:58:15.0884] <botzilla>
https://bugzil.la/1637243 ‚Äî NEW (nobody) ‚Äî Crash in [@ StringMatch] e.g. when a url gets pasted into Slack

[07:01:35.0421] <iain>
We jinxed it, everybody

[07:03:54.0458] <RyanVM>
Riot needs more Slack emojis so I can send you a :sad-trombone:

[07:14:04.0469] <mgaudet>
üò¨

[07:14:07.0936] <mgaudet>
Sorry @iain

[07:14:17.0677] <mgaudet>
 * Sorry iain 

[07:14:52.0141] <evilpie>
:/ maybe reland bug 1636495 immediately so at least one more thing out of the way

[07:14:53.0832] <botzilla>
https://bugzil.la/1636495 ‚Äî REOPENED (iain) ‚Äî Fix error handling in nsContentUtils::IsPatternMatching

[08:43:17.0179] <iain>
Anybody around who builds the shell on Windows?

[08:43:28.0277] <iain>
tcampbell?

[08:44:22.0164] <Benjamin Bouvier>
i did in the past, and the answer to your next question may be "you need to use mozmake instead of make"

[08:44:53.0858] <iain>
I'm hoping to avoid having to build it

[08:45:12.0982] <iain>
I think I might have figured out the root of the slack crashing regexp bug

[08:45:24.0589] <iain>
But it depends on the calling convention

[08:45:52.0799] <sfink>
does it work these days to just do `./mach bootstrap; ./mach build` with a mozconfig that does `--enable-application=js` ?

[08:47:33.0540] <iain>
Probably fastest for me to just push to try

[08:47:57.0060] <sfink>
yes, probably

[08:59:55.0470] <tcampbell>
try is easiest. My windows build has some dust on it

[09:00:25.0284] <sfink>
yeah, every time I need to do a windows build, I spend at least half a day reviving the windows environment

[09:04:28.0584] <iain>
Try builds are running

[09:04:41.0150] <iain>
Hoping for a failure in the first, and a success in the second

[09:19:47.0500] <jonco>
sfink: hey, could I get a quick review for https://phabricator.services.mozilla.com/D74836 please? I promise I've stopped changing it...

[09:30:48.0570] <sfink>
ok, one sec. I was trying to come up with suggested text for the description, but now I have to run, so I'll just r+ 

[09:31:14.0553] <evilpie>
This is kind of surprising: https://bugzilla.mozilla.org/show_bug.cgi?id=1635878#c5 is facebook really using typed arrays? 

[09:31:53.0574] <sfink>
oh, heh, you already updated the one thing I commented on

[09:41:17.0681] <jonco>
sfink: thanks!

[09:43:11.0562] <jonco>
next step is to work out how to get the data out

[09:57:46.0380] <RyanVM>
iain: if it helps, I run my own local Windows builds. Happy to test drive a patch if you want

[09:58:31.0119] <froydnj>
RyanVM: release managers are very confident in our nightly builds :p

[09:59:01.0629] <RyanVM>
old habits die hard ü§ì

[09:59:10.0314] <tcampbell>
I've gotten my win build unborked too

[10:01:52.0301] <iain>
RyanVM: I am pretty confident I have fixed *a* bug, and tentatively optimistic that it's the bug that was crashing slack

[10:02:23.0606] <iain>
The patch is here: https://hg.mozilla.org/try/rev/c565d8d7368952df0988008e94a7db20fe7c1ea8

[10:07:22.0889] <RyanVM>
iain: running a build with that patch now, I'll let you know :)

[10:07:30.0687] <RyanVM>
I was able to reproduce the Slack crashes pretty easily

[10:07:38.0943] <iain>
RyanVM: Great, thanks!

[10:07:45.0475] <iain>
I will keep my fingers crossed

[10:08:02.0001] <iain>
If this works, thank decoder

[10:09:34.0915] <tcampbell>
iain: seems to work for me

[10:10:11.0332] <iain>
And that's with the new engine enabled?

[10:10:11.0943] <tcampbell>
I downloaded the M-C build from initial landing and repro'd crash. Using the Win 64-bit opt build from your try link I don't crash

[10:13:11.0003] <tcampbell>
TIL: ctrl+v with a link in clipboard while selecting text in slack makes it a link with title

[10:26:17.0698] <Waldo>
evilpie: Some of the Facebook image editor stuff was on asm.js at one point, I assume they use typed arrays for that functionality still.  Probably other places too, that I don't know about.

[10:28:15.0540] <jorendorff>
avandolder: ok, `?` in the JS spec

[10:28:58.0512] <jorendorff>
errors in the JS spec don't automatically "unwind the stack" of standard algorithms

[10:29:42.0701] <jorendorff>
instead, an error is represented as a kind of spec-internal value, a Completion Record https://tc39.es/ecma262/#sec-completion-record-specification-type

[10:30:56.0404] <jorendorff>
‚òùÔ∏éthis is what's _actually_ going on in the spec. Algorithms can return Completion Records. If the [[Type]] of a Completion Record is *error* then we know something went wrong.

[10:31:03.0868] <jorendorff>
 * ‚òùÔ∏éthis is what's _actually_ going on in the spec. Algorithms can return Completion Records. If the [[Type]] of a Completion Record is **error** then we know something went wrong.

[10:31:45.0088] <jorendorff>
And JS exceptions are implemented this way -- eeeevvvverything in the spec actually checks the return value after every little step

[10:31:51.0502] <jorendorff>
to see if it's an error Completion Record

[10:32:14.0850] <jorendorff>
however, to reduce boilerplate, there's this `?` shorthand

[10:32:50.0194] <jorendorff>
`?` is shorthand for ReturnIfAbrupt https://tc39.es/ecma262/#sec-returnifabrupt-shorthands

[10:33:11.0551] <jorendorff>
and ReturnIfAbrupt is shorthand for checking return values https://tc39.es/ecma262/#sec-returnifabrupt-shorthands

[10:34:51.0643] <avandolder>
Okay, I realize what I had misinterpreted now

[10:35:11.0071] <jorendorff>
avandolder: In situations where the spec wants to "catch" an exception and e.g. perform some cleanup before bailing out, it does not use "?"

[10:36:40.0988] <iain>
I wonder which way the influence flows between `?` in the JS spec and `?` in Rust

[10:38:23.0865] <jorendorff>
dunno. it's used in the HTML spec too

[10:39:19.0409] <RyanVM>
iain: looking good here too üëçÔ∏è

[10:42:56.0357] <iain>
decoder++ for finding a fuzzbug that was a lot easier to investigate than "Slack is borked"

[10:43:19.0679] <jorendorff>
heck yeah fuzzers

[10:45:27.0143] <iain>
People who know more about our string representation than I do: what would break if we had a mode where we never used latin1 strings?

[10:45:54.0082] <Waldo>
iain: What do you mean?

[10:46:05.0175] <denispal>
jonco: I had to make one final change in bug 1501608 to fix another problem I found.  Just wanted to check with you if you wanted to take a quick look first before I try to land it again (anytime, no rush).  Sorry for the hassle!

[10:46:06.0667] <botzilla>
https://bugzil.la/1501608 ‚Äî REOPENED (denispal) ‚Äî Investigate reducing size of ScriptSourceObject by moving DOM related fields outside the engine

[10:46:34.0832] <iain>
Waldo: Even if a string is only latin1 characters, always store it as two-byte

[10:47:09.0882] <Waldo>
I mean, that's what SpiderMonkey used to do, it's certainly technically feasible, probably not _terribly_ many chokepoints would have to be changed to revert to it...but why?

[10:47:22.0184] <Waldo>
And to channel Aaron Patterson, "But at what cost?"

[10:48:39.0449] <iain>
The slack-crashing bug was in a two-byte-only codepath that didn't have test coverage

[10:49:02.0504] <Waldo>
https://twitter.com/tenderlove/status/1106282468993187841

[10:49:18.0759] <iain>
Because we don't generally write two copies of every test to append a useless non-latin1 char at the end

[10:49:48.0167] <Waldo>
I think we have generally sucked up the extra bugs as worth the tradeoff for a whole lot less memory consumption for lots of strings.

[10:49:48.0902] <iain>
Maybe there's less special-casing outside of regexps?

[10:50:10.0142] <iain>
I'm envisioning this as, like, the moral equivalent of a cgc build

[10:50:36.0054] <Waldo>
Hrm.  It seems like it would be plausible.

[10:50:44.0551] <iain>
Not something that would ever be turned on in production

[10:50:45.0253] <iain>
But a good way of flushing out bugs

[11:04:01.0873] <sfink>
we could have a --fat-strings shell flag and add it to the various flag combinations like --ion-eager

[11:04:19.0464] <sfink>
or --randomize-string-storage or whatever

[11:04:37.0784] <Waldo>
We probably don't want a "should strings be fat" check on every string allocation, tho.

[11:04:50.0398] <Waldo>
Even if well-predicted, etc.

[11:05:06.0886] <jorendorff>
yeah, it sounds like a lot

[11:05:29.0456] <Waldo>
Also you're going to need those checks in JIT code too, most likely...

[11:06:18.0235] <jorendorff>
i'd be surprised

[11:06:22.0645] <jandem>
could restrict to debug builds 

[11:06:24.0626] <jorendorff>
more worried about the hard-coded stuff. are unit strings 8-bit?

[11:06:34.0250] <jandem>
yes

[11:06:44.0598] <jorendorff>
and the common property names and such?

[11:08:15.0247] <jandem>
I think it's not too hard to fix, it probably goes through the atomize path 

[11:08:41.0632] <jonco>
denispal: oh right, what does it use it for exactly?

[11:09:22.0562] <jorendorff>
it could all be done.

[11:12:26.0271] <denispal>
jonco:  actually not entirely sure.  I can dig into that part a bit further, but I know I've hit it before with the compilations from the event listener manager as well.  I should have probably anticipated it here too.

[11:19:22.0255] <jonco>
denispal: I'm mainly curious

[11:19:27.0551] <jonco>
the changes look good to me

[11:20:42.0308] <denispal>
jonco: fwiw, it was this simple test that was failing in case something is obvious https://searchfox.org/mozilla-central/source/devtools/client/debugger/test/mochitest/browser_dbg-inline-script-offset.js

[11:21:55.0995] <jonco>
uh not obvious to me :)

[12:40:01.0229] <Waldo>
!summon mrgiggles

[12:52:05.0066] <sfink>
Mr G is on freenode in #mrgiggles if you really need him. 

[12:53:26.0672] <jorendorff>
pretty sure waldo just needs a pun

[12:53:48.0584] <Waldo>
Yes a thousand times yes, I am jonesing.

[12:54:04.0844] <Waldo>
I guess I could federate over...

[12:54:15.0416] <Waldo>
It's not the same üòø

[12:58:16.0250] <mgaudet>
Whelp, I managed to get help out of mrgiggles via matrix here: `/join #freenode_#mrgiggles:matrix.org` 

[12:58:57.0251] <mgaudet>
But not much else. Maybe lagging in the bridge

[13:00:15.0126] <mgaudet>
oh wait; that mrgiggles claims not to have puns enabled. 

[13:04:37.0019] <mgaudet>
confession: `./mach run --enable-private-fields -e 'class A { #x = 20; g() { return this.#x; } }; var a = new A; print(a.g())' ` => `20`... so that's a first private field reference happening. Long way to go, but it's something

[13:04:40.0034] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[13:07:15.0542] <jorendorff>
mgaudet: I know I owe you some more reviews

[13:07:42.0141] <jorendorff>
will get to 'em

[13:07:50.0420] <jorendorff>
thinking right now about the following problem:

[13:08:54.0010] <jorendorff>
if you add a generator to self-hosted code, `JS::InitSelfHostedCode` asserts and dies under `js::frontend::CompilationInfo::publishDeferredFunctions`

[13:09:43.0931] <jorendorff>
It's trying to publish the generator, which requires `Iterator.prototype` to exist, which requires self-hosted code already to have run.

[13:10:07.0723] <jorendorff>
so, how to fix this

[13:10:21.0680] <jorendorff>
- maybe `Iterator.prototype` should have a... resolve hook :-\

[13:11:23.0206] <mgaudet>
urk. 

[13:11:36.0605] <jorendorff>
- or, maybe publishing a generator shouldn't require `Iterator.prototype`.

[13:12:00.0310] <mgaudet>
paging tcampbell (mostly because, while I am responsible for publishDeferredFunctions.... he's got a better view of the bizarro land that is self-hosted code)

[13:13:33.0770] <Waldo>
jorendorff: What spec operation wants to use/expose generators?

[13:14:16.0659] <jorendorff>
Waldo: avandolder is working on https://tc39.es/proposal-iterator-helpers/#sec-iteratorprototype.map

[13:14:22.0402] <jorendorff>
stage 2 proposal

[13:14:31.0339] <Waldo>
Ah.

[13:14:47.0031] <jorendorff>
> %Iterator.prototype%.map is a built-in generator function which, when called, [...]

[13:24:08.0168] <tcampbell>
jorendorff: what is the assert?

[13:24:25.0725] <tcampbell>
oh, I didnt read the later part

[13:24:58.0598] <tcampbell>
this sounds like it would happen in the old world too?

[13:25:25.0845] <jorendorff>
tcampbell: yeah, sooner even

[13:25:43.0013] <jorendorff>
tcampbell: it's not an objection to stencil, far from it, just thinking about what to do

[13:26:05.0216] <tcampbell>
cool.. catching up. so the question is "What would be involved to support self-hosted generators?"

[13:26:11.0479] <jorendorff>
yes

[13:26:39.0609] <tcampbell>
well that relaxes me a little

[13:26:45.0377] <tcampbell>
:)

[13:28:16.0232] <jorendorff>
I wonder what would happen if `FunctionBox::createFunction` always used `nullptr` as the proto if we're in self-hosted code

[13:28:26.0818] <jorendorff>
extremely hackish but i'm going to try it real quick

[13:28:53.0199] <tcampbell>
that seems reasonable for the self-hosted world

[13:32:40.0182] <jorendorff>
seems to get further, at least

[13:36:13.0348] <jorendorff>
@tcampbell https://searchfox.org/mozilla-central/source/js/src/vm/SelfHosting.cpp#3052-3054

[13:37:59.0463] <tcampbell>
hah. I guess we stored those bits on the `BaseScript`

[13:46:26.0978] <tcampbell>
jorendorff: is this generator exposed or internal?

[13:48:07.0986] <jorendorff>
tcampbell: Exposed, is what the spec says.

[13:48:37.0614] <jorendorff>
If internal is easy to get working, we could do that for the short-term

[13:49:07.0877] <tcampbell>
makes sense. I'm curious if having the `generatorKind` do the lookup on the canoncial script works

[13:49:23.0553] <tcampbell>
I think that is infallible

[13:49:29.0540] <jorendorff>
I was just wondering that

[13:49:42.0446] <tcampbell>
(probably not a good idea, but worth trying)

[13:50:43.0726] <tcampbell>
https://searchfox.org/mozilla-central/source/js/src/vm/SelfHosting.cpp#2762-2766

[13:51:27.0152] <tcampbell>
flag is never read by JITs either, so this would actually work

[13:51:39.0416] <jorendorff>
ok! i'll try it

[14:29:12.0695] <mgaudet>
So private fields has a little quirk compared to public fields, which seems to cause a bunch of complexity. I'm trying to understand -why- the restriction exists, before implementing: 

The quirk: 

```
class N extends class {
  constructor(o) {
    return o;
  }
}
{ a = 1; };
var obj = {};
new N(obj);
new N(obj);
````

This is fine, with a public field. But if you change that to a private field, by going `a` => `#a`, then the second constructor call is supposed to issue a type error (https://tc39.es/proposal-class-fields/#sec-privatefieldadd, step 4). What I don't really understand is... why this change in semantics relative to public fields? I can't seem to find a good motivation 

[14:30:42.0236] <mgaudet>
Aside from being a potential refactoring footgun should someone want to make a field private, I also just am not sure what it buys you other than trying to encourage people not to be dumb and stamp private fields into joe-random objects (which is fair, but... confusing)

[14:33:51.0590] <jorendorff>
mgaudet: You might want to ask in a github issue. There might be a reason for it.

[14:33:58.0544] <jorendorff>
search closed issues first

[14:34:17.0101] <mgaudet>
Yeah, I was trying

[14:34:21.0231] <mgaudet>
unfortunately that repo got... heated

[14:34:25.0721] <mgaudet>
and so it's difficult to find things

[14:34:26.0571] <jorendorff>
?

[14:34:36.0508] <mgaudet>
I will open a new issue tho; that's a good point.

[14:34:54.0063] <mgaudet>
/me is being a bit selfish, because if we drop that requirement, a whole bunch of complexity needn't be added. 

[14:35:50.0472] <jorendorff>
mgaudet: you can re-use the existing `InitElem` opcode? or something else?

[14:36:40.0327] <mgaudet>
I think we get to then use pretty much exactly the machinery for public fields, just with the target being the private field symbol name. 

[14:37:06.0025] <mgaudet>
bear in mind, üêïÔ∏è‚å®Ô∏é still

[14:37:45.0782] <jorendorff>
as opposed to what if there has to be an extra TypeError check here?

[14:37:58.0266] <jorendorff>
(parallel things having parallel behavior is the kind of argument that i'd think would have some traction at tc39)

[14:40:27.0414] <mgaudet>
well, whatever the public fields is doing works if you try to stamp a public field on an object multiple times; which means derived classes will need to generate different bytecode that includes hasown checks 

[14:44:53.0295] <mgaudet>
Issue fired! https://github.com/tc39/proposal-class-fields/issues/308 

[14:46:22.0053] <jorendorff>
mgaudet: oh this is so great, it's possible (even if PrivateFieldAdd is changed as you suggest) for objects to exist and be observed to have some of a class's private fields and not others

[14:46:30.0152] <jorendorff>
because that's what happens if a field initializer throws

[14:46:35.0583] <jorendorff>
‚ú®

[14:46:58.0270] <mgaudet>
confession: Mostly finished some patches for stencil, snapshotting information from the scope chain before parse. 

[14:47:00.0298] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:47:16.0174] <mgaudet>
jorendorff: Oh... that too! Did you want to post that keen insight on the issue?

[14:48:04.0467] <mgaudet>
I'm at EOD tho, so I will revisit tomorrow :) 

[14:48:28.0217] <jorendorff>
no need to muddy it, I think

[14:48:30.0022] <jorendorff>
it sucks though

[14:48:44.0324] <jorendorff>
should be the official mozilla position

[14:49:11.0938] <mgaudet>
üòÑ

[14:51:46.0842] <jorendorff>
mgaudet: wow, `Object.preventExtensions(obj)` does not affect the ability to extend it with private fields. I guess that is because it is meant to behave like an object-keyed WeakMap.

[14:51:50.0380] <jorendorff>
but like

[14:51:53.0588] <jorendorff>
that sucks too for us

[14:52:11.0010] <jorendorff>
frozen objects can change shape ‚ú®

[15:12:48.0496] <zbraniecki>
ouch. Intentional?

[15:13:04.0849] <jorendorff>
Yes, intentional

[15:13:07.0584] <jorendorff>
avandolder: I'm going to have to finish this tomorrow... 

[15:13:13.0977] <jorendorff>
see you tomorrow morning

[15:13:39.0826] <zbraniecki>
that's surprising.  I can't imagine any implementer being excited about that approach

[16:19:31.0548] <iain>
confession: Got named capture replacement working. All the test262 named capture tests are now passing.


2020-05-13
[06:02:11.0607] <sanketh_>
I tripped hazard analysis again. If I use two functions, one to generate a random buffer and one to accept a random buffer and `data` to write to, and put the `nogc` in between these function calls to get `data`, then hazard analysis works fine [[change](https://hg.mozilla.org/try/rev/caba70433bf275baa5cfd71aa90c58ad5c914fbb#l2.35), [try run](https://treeherder.mozilla.org/#/jobs?repo=try&revision=6c5f5b5aa79efeaa1e7f732608d89cbf8511a988)]. But, keeping everything else the same, if I modify the second function to `Maybe` take random data, and use an RNG if it was given `Nothing` then I trip hazard analysis [[change](https://hg.mozilla.org/try/rev/6bdb5685d84e4f2bd11d36f77b3e897951741292#l3.44), [try run](https://treeherder.mozilla.org/#/jobs?repo=try&revision=5d25106cfa5563ea0247796112f02304c288d42c)]. Is this a false positive? If so, how can I fix it?

[06:05:47.0717] <jandem>
that makes sense, the static analysis doesn't know you're not passing a `Nothing`

[06:06:38.0228] <jandem>
instead of the Maybe, you could have a version that takes the random data + one that doesn't and forwards to the other one after getting the buffer?

[06:08:26.0485] <sanketh_>
Cool. Thanks for clarifying, I am going to split it up then.

[06:09:14.0473] <jandem>
I think that should work. I wonder if you could do something with templates but that probably gets more complicated fast

[06:11:11.0006] <sanketh_>
/me hears templates, and runs away. üòõ

[06:12:45.0893] <jandem>
haha

[06:20:27.0989] <wes>
iain: slack-crashing bug, do you mean bug 1637425? 

[06:20:29.0300] <botzilla>
https://bugzil.la/1637425 ‚Äî NEW (nobody) ‚Äî Slow script warning with Slack

[06:21:23.0275] <wes>
Guess no since it's unassigned....you got a link? Mostly curious, although Slack has been ridiculously astable for me this week.

[06:21:25.0213] <jandem>
no, bug 1637243

[06:21:27.0447] <botzilla>
https://bugzil.la/1637243 ‚Äî RESOLVED (nobody) ‚Äî Crash in [@ StringMatch] e.g. when a url gets pasted into Slack

[06:21:47.0892] <wes>
Thanks.

[06:31:54.0715] <RyanVM>
New Slack seems pretty terrible overall

[06:35:10.0289] <Ms2ger [~half-time dedication]>
s/New//

[06:44:09.0998] <wes>
ms2ger++ - they broke it when they dropped irc support imo :) 

[06:51:44.0419] <nbp>
jandem: can you give me access to https://github.com/mozilla-spidermonkey/mozilla-spidermonkey.github.io , as well as Jason / Yulia / Arai? Such that I can make pull request and merge them, and such that they can enjoy reviewing my broken english ;)

[07:00:24.0514] <jandem>
nbp: woo more blog authors \o/ I'll look into it after the meeting

[07:01:20.0865] <nbp>
Thanks.

[07:30:48.0616] <jandem>
should work now

[07:30:59.0802] <jorendorff>
"boot to stencil"

[08:23:29.0772] <mgaudet>
confession: Starting to understand why it's important we try to implement proposals earlier rather than later! 

[08:23:32.0376] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[08:26:25.0574] <mgaudet>
(To elaborate: I have questions and concerns about private fields, but the proposal has gone through so much attack that I will bet my questions have answers, and well throught out design rationale: I just can't find it because the repo is such a mess these days) 

[08:39:10.0771] <Ms2ger [~half-time dedication]>
mgaudet: lemme know if you wanna chat with the people who have worked on them from our side

[08:40:29.0975] <mgaudet>
Ms2ger [~half-time dedication]:  Will do -- my questions of late are more design questions; but that will almost certainly change over time

[08:42:01.0267] <Ms2ger [~half-time dedication]>
littledan may have context on those as well

[08:42:18.0283] <Ms2ger [~half-time dedication]>
/me managed to avoid wading into controversy on this one

[08:43:15.0333] <mgaudet>
That's part of the problem; I'm coming into this so late, but there's so much controversy here -- I definitely don't want to poke people's sore points from fights that were already fought.

[08:46:25.0768] <nbp>
@jandem do you have a good way to copy gdoc to markdown?

[08:46:48.0592] <nbp>
 * jandem: do you have a good way to copy gdoc to markdown?

[08:47:01.0854] <Waldo>
ECMA-402 calls are just written down in Markdown in a gdoc, then copied into the repository.

[08:48:12.0027] <mgaudet>
nbp: if you can get it into rendered html, `pandoc` can do conversion to markdown

[08:48:59.0153] <nbp>
hum ‚Ä¶ interesting, I will try.

[08:50:55.0514] <mgaudet>
nbp: this is the doc for importing mdn stuff, which has an example for rst: https://firefox-source-docs.mozilla.org/tools/moztreedocs/mdn-import.html 

[08:51:20.0904] <jandem>
nbp : there's an addon for gdocs that I use. It's not possible to install addons for my Mozilla account so I copy it to my personal gdocs first 

[08:51:50.0119] <padenot>
nbp, appending `export?format=html` instead of `edit` will get you a good HTML file and then I also recommend pandoc

[08:52:02.0247] <padenot>
 * nbp: appending `export?format=html` instead of `edit` will get you a good HTML file and then I also recommend pandoc

[08:52:14.0177] <padenot>
 * nbp: appending `export?format=html` instead of `edit` in the URL will get you a good HTML file and then I also recommend pandoc

[08:52:40.0058] <jonco>
sfink: https://telemetry.mozilla.org/new-pipeline/dist.html#!cumulative=0&end_date=2020-05-10&include_spill=0&keys=__none__!__none__!__none__&max_channel_version=nightly%252F78&measure=GC_MARK_ROOTS_MS&min_channel_version=nightly%252F75&processType=*&product=Firefox&sanitize=1&sort_by_value=0&sort_keys=submissions&start_date=2020-05-04&table=0&trim=1&use_submission_date=0

[08:52:40.0509] <littledan>
mgaudet: Sure, what's up with motivation?

[08:52:53.0256] <littledan>
Apologies for the messy state of the repo...

[08:53:22.0727] <mgaudet>
littledan: given the level of vitriol there... not really your fault

[08:53:31.0960] <nbp>
mgaudet:  testing pandoc gives a non editable output. I will try something else.

[08:53:34.0177] <nbp>
Thanks

[08:53:57.0215] <jandem>
the gdocs addon is called docs to markdown or so, it works pretty well 

[08:54:02.0953] <mgaudet>
littledan: So, I think I need to start from the highest of levels: field syntax is just short hand for creating properties on objects. 

[08:54:11.0706] <mgaudet>
littledan: Except... not for private fields

[08:54:24.0363] <mgaudet>
because the mental model for private fields should not be that they're properties?

[08:54:50.0374] <mgaudet>
but a hidden world parallel but not intersecting with properties? 

[08:55:15.0103] <littledan>
so... private fields and methods are designed to be really analogous to the public ones

[08:55:16.0024] <padenot>
nbp: works nicely here, what did you do? I simply do `pandoc input.html output.md`

[08:55:43.0221] <littledan>
however, we can't call them "properties" because that would indicate that meta-object protocol things would happen with them

[08:55:52.0337] <littledan>
I don't care if you call them properties in the names in the spidermonkey source, but the docs have to be strict about the separation

[08:56:36.0288] <littledan>
I like to work with the intuition that private fields are just like public ones, except they have less visibility or higher integrity in certain cases

[08:56:37.0292] <littledan>
so this leads to the various cases where exceptions are thrown or they're out of scope

[08:56:56.0106] <jorendorff>
that makes sense for fields

[08:57:07.0570] <mgaudet>
Forgive me: I'm still new to this stuff: When you say meta-object protocol things... what are you talking about? (I'm trying to think through an example jorendorff mentioned yesterday, which is that you can add a private field to an object after you've called Object.preventExtensions)

[08:57:21.0158] <mgaudet>
is that a meta-object protocol?

[08:57:47.0749] <jorendorff>
"the meta-object protocol" means the internal methods

[08:57:51.0608] <mgaudet>
(And to be clear: Not trying to relitigate issues ... I think, but trying to make sure I understand) 

[08:57:56.0546] <jorendorff>
how the spec interacts with unknown objects to tell them to do something

[08:57:56.0718] <Waldo>
Meta-object protocol are all the [[GetOwnProperty]] sorts of operations.

[08:58:02.0290] <nbp>
padenot: Thanks that is indeed better with `pandoc input.html -o output.md`

[08:58:12.0683] <Waldo>
See the chapter on ordinary and exotic objects, etc. in the spec.

[08:58:14.0441] <nbp>
I will give a try to Jan suggestion.

[08:58:39.0145] <jorendorff>
@mgaudet this table, basically https://tc39.es/ecma262/#table-5

[08:58:46.0510] <jorendorff>
that's what people call "the meta-object protocol"

[08:59:12.0144] <jorendorff>
= what's hooked by proxies = what's exposed by all those static methods on `Reflect`

[08:59:33.0510] <littledan>
ah sorry it's using kinda Lisp/TC39 insider jargon...

[08:59:51.0912] <littledan>
you could think about them as, the things that Proxy traps for

[09:00:14.0586] <littledan>
in the logic of the spec, all objects are sort of Proxies, and properties go through Proxy methods to be interpreted

[09:00:45.0279] <littledan>
but, private fields and methods never go through these traps; they're off to the side, represented directly on that object (even Proxies!)

[09:01:42.0157] <jorendorff>
there was a lot of discussion, 5-7 years ago, about how to make private stuff go through these traps,

[09:02:14.0519] <jorendorff>
without accidentally exposing a sort of attack vector

[09:02:50.0472] <jorendorff>
where an evil Proxy passed as `this` to an unsuspecting method could get its hands on private field names :-P

[09:03:07.0854] <jorendorff>
ultimately the decision was, ugh screw it

[09:03:11.0430] <jorendorff>
let's just not

[09:03:57.0252] <jandem>
nbp let me know if it works. By default it adds a comment with the name of the addon but you can turn that off or delete 

[09:04:12.0454] <jorendorff>
it does simplify the current design, somewhat: private names are not exposed to scripts at all

[09:04:14.0119] <nbp>
jandem: Perfect it works!

[09:04:41.0907] <nbp>
That would simplify a lot the making and review of these blogs posts.

[09:05:47.0703] <mgaudet>
littledan: I appreciate that -- it helps thinking that way a bit. So the next question is: Integrity is brought up a lot, but it's not clear always what's meant by that. Is it merely that as a *class author* I'm able to know that if I have an object with a private field, only my class has touched those fields? 

[09:06:58.0154] <mgaudet>
Or is there also some hiding aspects -- ie; should it be possible to test whether or not an object has private fields outside of the class; or is it sufficient that they can't be accessed or enumerated

[09:08:43.0783] <jorendorff>
mgaudet: not even test

[09:08:53.0158] <jorendorff>
and the integrity there buys you something boring and practical, which is

[09:09:41.0350] <jorendorff>
that it's possible to evolve your code to change where private fields are defined within a JS class hierarchy, as an implementation detail, without affecting users

[09:10:49.0522] <littledan>
mgaudet: there are a lot of different integrity constraints being juggled. The most important one is, you shouldn't be able to read, write or detect private fields from code outside the class; it has to be code within the class which grants access to this ( jorendorff describes this accurately).

[09:11:32.0534] <littledan>
The integrity goals we're discussing in https://github.com/tc39/proposal-class-fields/issues/308 are of a lower order

[09:12:13.0271] <littledan>
they're like, "as long as we're adding privacy, we might as well make it nice"

[09:13:12.0553] <littledan>
I believe it was somewhat annoying for V8, also, to implement the double-define-means-TypeError part; it required a bunch more IC work than the rest of the feature

[09:13:14.0729] <mgaudet>
nice but different -- which is what I find surprising; it's like a stricter strict mode

[09:13:44.0118] <littledan>
so, I didn't realize it would have that implication, and I'm a little bit sorry about that, but to change it at this point, we should have a very good reason

[09:13:50.0129] <mgaudet>
(but, as you may guess: not a JS programmer, so really trying to interrogate the thinking more than anything else)

[09:14:29.0690] <jorendorff>
trying to think through cases where users will see this

[09:14:59.0183] <mgaudet>
(If you have a library that lets you provide an object which gets stamped with private functionality, you can't double or re-init an object) 

[09:15:01.0911] <littledan>
jorendorff: it's hard to imagine, since it only comes up with the return override trick...

[09:15:32.0520] <littledan>
I believe JS is gradually going through a cultural change and strictness is increasingly appreciated, especially if you're making a library or component that's built for reuse and correctness, which I think is our "market" for private fields and methods

[09:16:58.0187] <littledan>
(that's not a scientific claim...)

[09:17:16.0605] <littledan>
> <@mgaudet:mozilla.org> (If you have a library that lets you provide an object which gets stamped with private functionality, you can't double or re-init an object)

I don't think most JS programmers know that double/re-init'ing is a thing

[09:17:20.0588] <jorendorff>
a lot of stuff in JS has evolved to get stricter

[09:17:31.0942] <mgaudet>
:D I sure didn't until recently!

[09:17:56.0079] <littledan>
the Temporal proposal is a lot about this strictness culture

[09:17:59.0030] <littledan>
BigInt is stricter

[09:18:00.0651] <jorendorff>
to indulge in a little random griping: another kind of integrity is not having weird cases that most JS programmers don't know about

[09:18:18.0274] <jorendorff>
conformance to the mental model

[09:19:28.0355] <jorendorff>
I couldn't come up with anything better, back when this was more of an open issue

[09:20:07.0367] <jorendorff>
so, no fault

[09:21:15.0332] <littledan>
Yeah, i don't really know what the general solution is. The edge cases exist, and we have to define semantics for them--we could sort of prohibit them somehow "earlier" (by calculating the private field set from the definition-time class hierarchy), or omit the TypeError here, but it's not clear which way would avoid weird edge cases...

[09:21:45.0887] <littledan>
prohibiting the return-override trick would prevent a superclass constructor from returning a subclass instance, but arguably that's better solved by static methods, I dunno...

[09:22:51.0134] <littledan>
 * prohibiting the return-override trick way back in ES6 would prevent a superclass constructor from returning a subclass instance, but arguably that's better solved by static methods, I dunno...

[09:23:13.0958] <mgaudet>
I mean, if omitting the type error was acceptable, to me that at least means the implementation parallels public fields, which to me, novice, is easier to reason about. 

[09:23:29.0592] <mgaudet>
but I take your point about increasing strictness, and cultural change

[09:23:36.0844] <jorendorff>
it's so hard to find a constructive way to argue points like this

[09:23:45.0912] <jorendorff>
where users will encounter the feature. we hope, very rarely

[09:23:51.0323] <jorendorff>
 * where users will encounter the feature, we hope, very rarely

[09:25:28.0785] <mgaudet>
Yeah -- I also think it's reasonable that there's a tension between improving the future, while also maintaining the past 

[09:25:40.0393] <mgaudet>
 * Yeah -- I also think it's reasonable that there's a tension between improving the future, while also maintaining continuity with the past 

[09:25:50.0324] <Waldo>
"Preservation and Progress", as the CMU t-shirt puts it

[09:26:39.0886] <littledan>
yes, there's definitely tension of various kinds, and the design tries to find a midpoint amid all that

[09:30:27.0487] <mgaudet>
Alright: I appreciate your answers littledan. I've got to context switch about now, and will be coming back to this later. Hopefully the rest will go smoothish!

[09:34:39.0325] <jorendorff>
Hey everyone ‚Äî who else develops on Mac?

[09:35:09.0889] <caroline>
jorendorff:  i do!

[09:35:35.0523] <jorendorff>
caroline: Do you build with `mach build` and a mozconfig with `--enable-application=js`?

[09:36:52.0308] <jorendorff>
caroline: and, does `mach run` work for you? this is the real question. it's been broken for me, forever

[09:37:05.0812] <jorendorff>
now i'm filing a bug, but I want to make sure it's not just me

[09:37:13.0123] <caroline>
i dont use --enable-application=js actually

[09:37:18.0403] <jorendorff>
aha

[09:39:32.0898] <sfink>
I'm not on osx, but recently I've been doing full-browser builds via mach with --enable-js-shell. Autobuilding via cronjob every night, and rebuilding with `mach build binaries`. But I guess I'm not touching public headers.

[09:40:35.0765] <sfink>
I have a shell-only mozconfig that I was using that has both --enable-project=js and --with-project=js. The former is an alias of --enable-application, and the latter looks to be something I made up because I couldn't remember which to use.

[09:40:58.0678] <sfink>
are you running into a problem?

[09:41:54.0422] <jorendorff>
```
$ ./mach run
Error running mach:

    ['run']

The error occurred in code that was called by the mach command. This is either
a bug in the called code itself or in the way that mach is calling it.
You can invoke |./mach busted| to check if this issue is already on file. If it
isn't, please use |./mach busted file| to report it. If |./mach busted| is
misbehaving, you can also inspect the dependencies of bug 1543241.

If filing a bug, please include the full output of mach, including this error
message.

The details of the failure are as follows:

KeyError: 'MOZ_MACBUNDLE_NAME'

  File "/Users/jorendorff/work/mozilla-central/python/mozbuild/mozbuild/mach_commands.py", line 867, in run
    return self._run_jsshell(**kwargs)
  File "/Users/jorendorff/work/mozilla-central/python/mozbuild/mozbuild/mach_commands.py", line 952, in _run_jsshell
    binpath = self.get_binary_path('app')
  File "/Users/jorendorff/work/mozilla-central/python/mozbuild/mozbuild/base.py", line 561, in get_binary_path
    stem = os.path.join(stem, substs['MOZ_MACBUNDLE_NAME'], 'Contents',
```

[09:41:56.0447] <botzilla>
https://bugzil.la/1543241 ‚Äî NEW (nobody) ‚Äî [meta] Tracking bug for known breakage in Firefox developer tooling

[09:43:16.0334] <sfink>
ah. But I didn't think `./mach run` ever knew to run the JS shell with --enable-application=js? Or at least, it didn't when I tried it a day or two ago.

[09:43:30.0296] <jorendorff>
that's what I thought too

[09:43:35.0983] <froydnj>
it should not be that hard to give `mach run` that knowledge

[09:43:36.0027] <jorendorff>
but it works for tcampbell 

[09:43:50.0540] <jorendorff>
who develops on linux

[09:43:52.0092] <tcampbell>
./mach run, jit-test, jstests should all work

[09:43:57.0632] <sfink>
tcampbell is a liar and a cheat

[09:44:07.0070] <tcampbell>
They do on Linux and now windows again

[09:44:32.0895] <jorendorff>
`mach jit-test` works for me

[09:44:34.0059] <froydnj>
mac is a special snowflake as far as running the browser goes, I think?

[09:44:43.0230] <jorendorff>
oh, interesting

[09:44:47.0626] <jorendorff>
maybe this is an easy fix

[09:44:49.0744] <sfink>
I guess I don't have a shell-only build to try on atm

[09:44:58.0878] <jorendorff>
just needs less specialness when running the shell

[09:45:52.0317] <froydnj>
yeah, this should be an easy fix

[09:46:17.0164] <froydnj>
hilariously, that code specially checks for xulrunner on mac

[09:47:43.0695] <jorendorff>
yeah, i don't really know what to do here

[09:49:43.0958] <jorendorff>
i see `MozbuildObject.get_binary_path`, but if I replace that line with `pass`, the path it comes up with is `/Users/jorendorff/work/mozilla-central/build_DBG.OBJ/dist/js` which is still wrong

[09:49:47.0251] <jorendorff>
should be `dist/bin/js` at the end

[09:50:07.0160] <froydnj>
jorendorff: does https://paste.mozilla.org/7pC5FFwA fix your problem?

[09:50:51.0690] <jorendorff>
aw heck

[09:50:58.0754] <jorendorff>
froydnj: yes, it does

[09:51:08.0366] <froydnj>
\o/

[09:51:33.0962] <jorendorff>
froydnj: filed bug 1637665. do you want me to do anything further?

[09:51:36.0096] <botzilla>
https://bugzil.la/1637665 ‚Äî NEW (nobody) ‚Äî ./mach run doesn't work on Mac with --enable-application=js

[09:51:53.0878] <froydnj>
jorendorff: nope, I will post that and let `#build` review

[09:52:02.0189] <tcampbell>
\o/

[09:52:04.0056] <jorendorff>
Thanks!

[09:52:32.0567] <tcampbell>
does `./mach run --debug` work properly?

[09:54:11.0031] <jorendorff>
hmmm, oodles of error messages from Python, but it does work

[09:54:56.0814] <jorendorff>
```
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Applications/Xcode.app/Contents/SharedFrameworks/LLDB.framework/Resources/Python3/lldb/__init__.py", line 101, in <module>
    import six
ModuleNotFoundError: No module named 'six'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
NameError: name 'run_one_line' is not defined
Traceback (most recent call last):
  File "<string>", line 1, in <module>
NameError: name 'run_one_line' is not defined
Traceback (most recent call last):
  File "<string>", line 1, in <module>
NameError: name 'run_one_line' is not defined
Traceback (most recent call last):
  File "<string>", line 1, in <module>
NameError: name 'run_one_line' is not defined
Traceback (most recent call last):
  File "<string>", line 1, in <module>
NameError: name 'run_one_line' is not defined
Traceback (most recent call last):
  File "<string>", line 1, in <module>
NameError: name 'run_one_line' is not defined
error: python failed attempting to evaluate 'import os, sys'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
NameError: name 'run_one_line' is not defined
error: python failed attempting to evaluate 'fallbacktopsrcdir = "/Users/jorendorff/work/gecko"'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
NameError: name 'run_one_line' is not defined
error: python failed attempting to evaluate 'istopsrcdir = os.path.exists("mozilla-config.h.in")'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
NameError: name 'run_one_line' is not defined
error: python failed attempting to evaluate 'topsrcdir = os.getcwd() if istopsrcdir else fallbacktopsrcdir'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
NameError: name 'run_one_line' is not defined
error: python failed attempting to evaluate 'ignored = istopsrcdir or lldb.debugger.HandleCommand("command source -s true " + os.path.join(topsrcdir, ".lldbinit"))'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
NameError: name 'run_one_line' is not defined
error: python failed attempting to evaluate 'topsrcdir = topsrcdir if "topsrcdir" in locals() else os.getcwd()'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
NameError: name 'run_one_line' is not defined
error: python failed attempting to evaluate 'sys.path.append(os.path.join(topsrcdir, "python/lldbutils"))'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
NameError: name 'run_one_line' is not defined
error: python failed attempting to evaluate 'import lldbutils'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
NameError: name 'run_one_line' is not defined
error: python failed attempting to evaluate 'lldbutils.init()'
```

[09:55:33.0014] <sfink>
froydnj: this reminds me, would it make sense for `mach build binaries` to be cwd-independent? If not, what do you think of something like `mach build @binaries` or similar?

[09:56:10.0665] <froydnj>
sfink: I'm fuzzy on what "cwd-independent" means there

[09:56:36.0007] <sfink>
if you run `mach build binaries` from `js/src`, it looks for a subdir named `binaries` and fails

[09:56:57.0398] <froydnj>
hahaha

[09:57:15.0058] <froydnj>
that seems like a legitimate bug

[09:57:50.0841] <sfink>
well, it also seems a little odd for `mach build` to have magic keywords that could collide with directory names

[09:58:12.0801] <sfink>
though I don't know if people pass directory names to `mach build` in the first place

[09:58:42.0300] <sfink>
I guess I assumed it was intentional

[09:59:04.0152] <jandem>
one thing to be aware of is that if the shell crashes with 'mach run' you don't see the "segmentation fault" or whatever, it just exits. I've been meaning to fix that.. 

[09:59:22.0250] <sfink>
ouch

[09:59:27.0631] <froydnj>
`binaries` is a top-level makefile target

[09:59:43.0021] <sfink>
ah, I see

[10:01:00.0362] <sfink>
ok, that makes more sense. So is the right fix to make a `binaries` target in js/src/Makefile, or to make `binaries` and `faster` extra-speshul?

[10:03:19.0564] <froydnj>
I am not sure; it would probably be easiest to introduce `js-binaries`, but I could see that causing issues

[10:04:43.0418] <sfink>
I guess that would have the advantage of only rebuilding the JS shell instead of the whole tree like `binaries` does?

[10:05:34.0898] <froydnj>
yes, although I think `mach build binaries` from inside `js/src` would only build things relevant to the JS shell

[10:06:58.0072] <froydnj>
sfink: file a bug on this, please, and ni glandium; `binaries` is a little weird insofar as it's only defined at toplevel, and I think it requires some thought on how to make it work for gecko and js simultaneously

[10:07:12.0046] <sfink>
ok, will do. Thanks!

[11:11:35.0664] <gijs>
Is there an overview of what prefs I could ask someone to flip to approximate the JS engine config in safe mode? It looks like we turn off the jit in safemode, and some wasm stuff - I assume there are prefs that would have the same effect?

[11:40:51.0602] <iain>
Is jstests.py supposed to run with python2 or python3?

[11:41:01.0139] <Waldo>
Probably.

[11:41:11.0230] <Waldo>
I believe python3 support is still a little nascent.

[11:41:54.0062] <iain>
There's a named captures testcase that throws a syntax error with a non-BMP character

[11:42:23.0889] <iain>
And it breaks jstests.py if I don't run with python3

[11:42:28.0069] <Waldo>
How so?  We can have jstests with non-BMP code points in them, I'm fairly sure.

[11:42:48.0946] <Waldo>
I'm pretty sure we have some burritos in our tests, at a minimum.

[11:42:56.0042] <iain>
Which is weird, because it worked yesterday before I pulled in a new mc

[11:43:14.0427] <iain>
I mean the syntax error contains a non-BMP char

[11:43:43.0783] <iain>
`/(?<$êí§>a)/`

[11:44:01.0809] <Waldo>
Oh, there.  Um.

[11:44:17.0572] <iain>
That's not a valid named capture, and we report it, and jstests explodes because it thinks the error message should be ascii

[11:44:36.0803] <Waldo>
Gak.

[11:44:37.0569] <iain>
But it was fine yesterday, so something must have changed, and I have no idea what or where

[11:45:05.0359] <Waldo>
Bug 1557307 for making jstests.py fully Python 3-compatible.

[11:45:06.0882] <botzilla>
https://bugzil.la/1557307 ‚Äî UNCONFIRMED (nobody) ‚Äî Convert the JS tests suites to Python 3. (/js/src/tests/jstests.py )

[11:45:32.0342] <Waldo>
Tho, maybe that bug is not actually the latest and greatest on that front, I thought sfink had some work somewhere on this.

[11:46:03.0289] <iain>
By "yesterday" I mean "on a version of mc that was maybe a couple weeks old"

[11:46:49.0542] <jorendorff>
Use python 3 first, for everything

[11:47:45.0810] <jorendorff>
i think we're about at peak python2/python3 nightmare, it has to recede at some point

[11:48:50.0961] <iain>
Waldo: There was bug 1620846, but that landed a while ago

[11:48:52.0471] <botzilla>
https://bugzil.la/1620846 ‚Äî RESOLVED (sfink) ‚Äî ./mach jit-test --debug no longer works

[11:53:45.0362] <iain>
Hmm, it appears to be the same problem as here: https://bugzilla.mozilla.org/show_bug.cgi?id=1620837

[11:54:15.0783] <Waldo>
That might be the bug I remember seeing in mail.

[12:20:56.0888] <tcampbell>
gijs: I didn't realize we did that. Looks like only WASM is turned off. The prefs are `javascript.options.asmjs` and `javascript.options.wasm` to false

[12:21:45.0105] <tcampbell>
https://searchfox.org/mozilla-central/rev/9f074fab9bf905fad62e7cc32faf121195f4ba46/js/public/ContextOptions.h#219-227

[12:23:03.0771] <tcampbell>
which is kind of surprising since I thought parts of the browser use WASM these days

[12:25:54.0327] <gijs>
tcampbell: there's also https://searchfox.org/mozilla-central/rev/9f074fab9bf905fad62e7cc32faf121195f4ba46/js/xpconnect/src/XPCJSContext.cpp#835-841 right?

[12:27:03.0784] <tcampbell>
oh bleh

[12:27:46.0999] <tcampbell>
gijs: add `javascript.options.blinterp` = false, `javascript.options.native_regexp` = false

[12:28:02.0725] <gijs>
tcampbell: and baseline + ion?

[12:28:18.0024] <tcampbell>
blinterp is required for the rest

[12:30:25.0919] <gijs>
ah right

[12:30:27.0371] <gijs>
thanks!

[12:30:50.0558] <tcampbell>
gijs: also `javascript.options.jit_trustedprincipals` = false. That seems to be hidden pref though

[12:31:04.0336] <gijs>
yeah, and looks like it's only read after the other ones

[12:31:12.0532] <gijs>
the issue I'm seeing is in trusted code so I guess I'll just ignore it

[12:31:54.0502] <tcampbell>
it overrides the other ones

[12:33:04.0423] <tcampbell>
 * gijs:  it overrides the other ones. so I think you want to check it too

[12:33:13.0906] <gijs>
oh?

[12:34:43.0919] <tcampbell>
the use case was turning off jit in content for paranoia, while still having trusted browser code run fast

[13:25:41.0601] <jorendorff>
did y'all get email from me on the js-engine.internals mailing list?

[13:26:16.0224] <mgaudet>
yes

[13:26:22.0424] <jorendorff>
ok thanks

[13:53:56.0952] <mgaudet>
jorendorff: If I wanted to synthesize a check for a private name on an object, what's the direction you'd point me? Current plan is to hand generate a CallExpr that does `.this.hasOwnProperty(privateNameSymbol)` but I'm checking in the make sure there's not a shortcut or something I ought to know about

[13:55:03.0285] <jorendorff>
mgaudet: You can't rely on the `.hasOwnProperty` method existing. I think this basically has to be an opcode

[13:55:39.0149] <jorendorff>
wait, no

[13:55:39.0999] <mgaudet>
(I saw we have JSop::HasOwn, but it's pretty specific to self-hosted it seems?) 

[13:55:41.0402] <jorendorff>
there's `HasOwn`

[13:56:16.0378] <jorendorff>
I think that comment is meant to be informative, not ... normative

[13:56:46.0711] <mgaudet>
Ok, fair; but from the AST perspective I'd want to plumb a new node type through to support emitting HasOwn?

[13:57:45.0436] <jorendorff>
We're talking about the check when stamping private fields onto objects after `super()`, right?

[13:57:54.0067] <jorendorff>
(just making sure we're talking about the same thing)

[14:00:22.0130] <mgaudet>
yes

[14:00:45.0179] <mgaudet>
Or, more specifically, the TypeError that emits if you stamp the same object twice

[14:02:21.0327] <mgaudet>
so, my thinking was to change the lambdas emitted into the intializer array to be instead of just `this[.privateSymbol("#x")) = <>`, to be `if (this.hasInstanceOf(.privateSymbol)) { throw}; ...`

[14:02:42.0463] <jorendorff>
oh

[14:02:56.0426] <jorendorff>
that's fine

[14:02:59.0801] <mgaudet>
With the next obvious extension being to only emit the check on the -first- initializer, because subsequent ones will pass

[14:03:07.0898] <mgaudet>
if the first does

[14:04:12.0677] <jorendorff>
/me feels vaguely uncertain

[14:04:21.0842] <mgaudet>
heh 

[14:04:37.0517] <mgaudet>
the answer could be ¬Ø\_(„ÉÑ)_/¬Ø, go forth and experiment :P 

[14:04:53.0059] <mgaudet>
Which could be fine... I need to experiement to help get a gut feeling for this

[14:05:05.0361] <jorendorff>
it is definitely right though

[14:06:13.0654] <jorendorff>
maybe we should be emitting only one initializer method

[14:07:44.0052] <mgaudet>
Maybe? The scoping with initializer == method seems... nice to me? But I suppose that's not a real barrier when we have control over scoping ourselves

[14:15:41.0731] <mgaudet>
to clarify jorendorff When you said that's fine -- did you mean "That's a fine plan, do that", or "calling .hasInstanceOf is totally cool in that context" -- I suspect the former, but should make sure

[14:17:21.0923] <jorendorff>
Changing the lambdas sounds like the right thing. As for what bytecode to emit,

[14:18:15.0346] <jorendorff>
it depends. Do you think we can avoid adding new bytecode instructions for all three operations?

[14:19:10.0220] <jorendorff>
I'm thinking of: {Get,Set,Init}PrivateField but we should also worry about private methods now, not later

[14:19:55.0665] <mgaudet>
Uhhh... I'd need to reread the private methods proposal with a much closer eye to implementation

[14:20:28.0713] <mgaudet>
Current feeling is that it's totally possible to do private fields with our current bytecode set, assuming JSop::HasOwn serves the appropriate purpose 

[14:20:42.0884] <jorendorff>
it's definitely _possible_

[14:22:25.0700] <mgaudet>
now, whether we'd be better served by having new bytecode... maybe? adding InitPrivateName and disambiguating from SetPrivateName with our current intializer lambda story in fieldInitialzerOpt seems more complicated

[14:22:43.0208] <mgaudet>
but that's with minutes of thought, and not too much FE experience

[14:23:37.0507] <jorendorff>
but each of the operations involves a brand check‚Äîeach private field access would be about 3 bytecodes, right?

[14:23:58.0890] <jorendorff>
 * but each of the operations involves a brand check‚Äîeach private field access would be <del>about 3 bytecode instructions, right? </del> let's math it out

[14:25:12.0511] <jorendorff>
with custom opcodes, for `this.#x`, I think we'd go for something like,  `<this>; GetAliasedVar "#x"; GetPrivateField`

[14:28:01.0596] <jorendorff>
with the current opcodes, `<this>; GetAliasedVar "#x"; Dup2; HasOwn; JumpIfTrue ok; ThrowMissingPrivateField; ok: GetProp`?

[14:28:16.0754] <jorendorff>
mgaudet: is that fair?

[14:29:24.0753] <jorendorff>
Looking at it only from this perspective, gee, it looks kinda bad

[14:29:43.0129] <jorendorff>
but the other perspective is, how hard is it to add whole new suites of ICs...

[14:30:13.0664] <mgaudet>
Oh... right. Because private fields will throw on access. Because they're different. And I *cannot seem to get that in my head* 

[14:30:25.0095] <mgaudet>
(c.f. conversation earlier re: mental models) 

[14:30:40.0581] <mgaudet>
I think you're right, and I'd rather build ICs 

[14:31:20.0615] <mgaudet>
and we'll get warp for free(*) 

[14:32:28.0085] <mgaudet>
(*) not actually free, but free-ish compared to ion

[14:32:58.0282] <jorendorff>
OK, coool...

[14:33:11.0049] <iain>
From a performance perspective, I think ICs make a lot of sense

[14:33:36.0894] <iain>
Since you can check for the private field when you attach, and then from then on it's just like any other get prop, right?

[14:33:52.0315] <jorendorff>
Right.

[14:34:34.0804] <jorendorff>
The hope was that the relevant parts of the IC goop can be shared, since it's otherwise mostly like any own data property

[14:35:13.0584] <mgaudet>
Yeah, I think it works out fairly nicely there. 

[14:36:14.0113] <mgaudet>
So looking at that patch stack you have right now, I'll pop 9/10 off 

[14:36:23.0021] <mgaudet>
and start going down the new bytecode road

[14:36:29.0751] <jorendorff>
:(

[14:36:30.0954] <jorendorff>
ok

[14:37:52.0408] <mgaudet>
C'est la vie! 

[14:38:10.0042] <mgaudet>
but, that's tomorrow. I'm done here alas. 

[14:38:18.0002] <mgaudet>
TTYL all! 

[14:38:48.0615] <iain>
Unless I'm missing something, we end up emitting the same cacheir, and the only difference is in the tryAttach logic

[14:39:31.0898] <mgaudet>
(That sounds correct; it'll just be a shape guard) 

[15:06:12.0159] <jorendorff>
Wow `JSFunction`, you beautiful horrifying monster

[15:12:49.0773] <jorendorff>
for `JSString`, we at least have a comment that acts very confident

[15:14:59.0877] <jorendorff>
it's super reassuring

[15:21:53.0307] <Waldo>
That comment is confident, but with justification.  It's not just cocky.

[15:22:38.0857] <Waldo>
Granted, it would be better if we used C++ properly, in a Rust-y sort of way, and had constructors to fully initialize strings as the only way to get strings.  But still, `JSString` is in pretty good shape.

[15:23:03.0549] <jorendorff>
Heh, I had the same thought about proper constructor use. `JSFunction` though.

[15:23:24.0466] <jorendorff>
all the multifariousness, no class comment at all

[15:23:30.0262] <Waldo>
We need to do proper constructor use at some point if we are to purport to use C++ without UB.

[15:23:47.0599] <jorendorff>
there is a function at the top of the header, though. it says,

[15:23:51.0019] <jorendorff>
```
/*
 * JS function definitions.
 */
```

[15:24:19.0884] <jorendorff>
"Free the lizard" yup, called it

[15:24:23.0017] <Waldo>
Yep, and it's older than interns.  https://dxr.mozilla.org/classic/source/js/src/jsfun.h#21

[15:24:30.0792] <Waldo>
(mind meld is strong)

[15:24:41.0296] <Waldo>
Tho I guess I went back further.

[15:30:26.0200] <Waldo>
/me sees the intern typing üòâ

[15:30:51.0489] <avandolder>
Yeah the file's copyright year is the year I was born

[15:33:48.0884] <iain>
Worth pointing out that SM was still C at that point, not C++

[15:34:50.0287] <jorendorff>
year of the spider monkey, auspicious

[15:35:01.0317] <jorendorff>
...or something

[15:35:23.0589] <tcampbell>
jorendorff: any reason I shouldn't make `new.target` work in the debugger console?

[15:35:40.0300] <tcampbell>
It makes the underlying code more consistent

[15:35:45.0190] <jorendorff>
tcampbell: good grief what

[15:36:04.0511] <jorendorff>
oh, it doesn't work because you'd have to pipe a flag through?

[15:36:08.0371] <tcampbell>
if you pause in a function and type `new.target` it is an error

[15:36:19.0381] <tcampbell>
chrome doesn't do any better

[15:36:29.0827] <jorendorff>
no, you're right, it should work, in theory

[15:36:29.0996] <Waldo>
Both jorendorff and I worked on SpiderMonkey when it was still C, tho not for more than a year or two for each of us.  (I think I only churned out a dozen or so patches in the C days, it became C++ fairly shortly after.)

[15:36:52.0600] <jorendorff>
look at that header file though

[15:37:14.0390] <tcampbell>
so many inconsistencies.. the no-arguments-in-fields check doesn't work, but functions super-this checks do, and super properties do not!

[15:37:26.0828] <Waldo>
I think the full C++ transition was spring 2008, first SpiderMonkey patch I wrote was about late summer 2006, and I think jorendorff started beginning of summer 2007.

[15:38:15.0792] <Waldo>
You gotta like how `jsfun.h` wasn't even 150 lines then, tho.

[15:39:52.0691] <jorendorff>
that's what i'm screaming

[15:40:21.0789] <tcampbell>
Yeah, JSFunction is fun.. `wasmJitEntry_`, `script_`, and `selfHostedLazy_` all overlap and are blindly accessed by the JIT without care

[15:41:47.0964] <tcampbell>
even better, the JITs just read off the first word of whatever type they are, assume it is a code pointer, and jump into it

[15:42:22.0966] <tcampbell>
ain't nobody got time for type checks

[15:44:31.0273] <jorendorff>
`atom_` is, anyone would guess, the simplest thing in JSFunction

[15:45:03.0408] <jorendorff>
it is also the only thing with a comment, which is there because I begged for mercy in a code review one time

[15:45:13.0834] <tcampbell>
haha

[15:45:36.0846] <jorendorff>
```
  // The |atom_| field can have different meanings depending on the function
  // type and flags. It is used for diagnostics, decompiling, and
```
and what, spidermonkey?

* <spidermonkey> stares out over the slate-gray sea

[15:45:38.0709] <tcampbell>
"displayAtom" is such a confusing helepr

[15:45:55.0601] <jorendorff>
 * ```
  // The |atom_| field can have different meanings depending on the function
  // type and flags. It is used for diagnostics, decompiling, and
  //
```

and what, spidermonkey?
- <spidermonkey> stares out over the slate-gray sea

[15:46:11.0096] <jorendorff>
 * ```
  // The |atom_| field can have different meanings depending on the function
  // type and flags. It is used for diagnostics, decompiling, and
  //
```

and what, spidermonkey?
\* spidermonkey stares out over the slate-gray sea

[15:46:31.0246] <tcampbell>
ugh.. I really need to start the removal of guessed atoms

[15:47:28.0445] <tcampbell>
unrelated javascript in your file changes the guess

[15:48:07.0641] <tcampbell>
throw a class-field in somewhere else in the file, and suddenly all the guesses change!

[15:49:11.0299] <tcampbell>
maybe that is  enough reason for me to just remove and not worry too much about error stacks

[15:49:26.0242] <jorendorff>
what is `--warp --warp`?

[15:49:39.0525] <jorendorff>
```
FAILURES:
    collections/iterator-proto-surfaces.js
    --warp warp/force-warp.js
    --warp --warp warp/force-warp.js
```

[15:50:57.0930] <tcampbell>
probably a mistake

[16:56:10.0072] <sfink>
to circle back: `mach build` should be within a second of `mach build binaries`, so feel free to call `mach build` from within `js/src`. And `mach build shell` appears to work from within `js/src` for only building the JS shell.


2020-05-14
[18:54:00.0332] <wes>
Waldo: I think the C++ transition was later than that.  Spring 2008 by my recollection had jorendorff working on Tamarin. 

[18:55:06.0570] <wes>
https://bugzilla.mozilla.org/show_bug.cgi?id=604782  Sweet mother, was that really 10 years ago?  *tears*     Was the conservative collect excised before the C++ beginnings?  I remember some funny stuff with local roots changing right after the C++ port got seriously underway.

[18:55:36.0869] <wes>
 * https://bugzilla.mozilla.org/show_bug.cgi?id=604782  Sweet mother, was that really 10 years ago?  _tears_     Was the conservative collector excised before the C++ beginnings?  I remember some funny stuff with local roots changing right after the C++ port got seriously underway.

[20:32:33.0474] <Waldo>
wes: Looks like mid-2007, per bug 357016.  (I was going off the memory of the transition having been started in part because of TraceMonkey coming into existence, but I guess it came into existence _after_ the C++ compilability was added, and I'm not sure when the precise point was that it became only C++-compilable.)

[20:32:35.0105] <botzilla>
https://bugzil.la/357016 ‚Äî RESOLVED (jorendorff) ‚Äî spidermonkey should be buildable by a C++ compiler

[22:32:07.0027] <jandem>
tcampbell: for `new.target` in debugger eval, I added [this comment](https://searchfox.org/mozilla-central/rev/9f074fab9bf905fad62e7cc32faf121195f4ba46/js/src/debugger/Frame.cpp#1035-1037) recently. Shouldn't be too hard to fix that code

[23:57:34.0351] <jandem>
Waldo: hm for that Date bug, I now have all patches stuck in my "Waiting on Authors" queue on phabricator :p 

[23:59:45.0747] <jandem>
I can resign manually from all 16 but maybe better if you close them so they disappear on your end too

[00:15:52.0523] <jandem>
actually I can also close them myself. I'll do that

[01:49:00.0173] <Waldo>
jandem: I'll figure out something, thanks for reminding me.  (scumbag phabricator)

[01:49:11.0863] <Waldo>
...or you if you got there first, I guess.

[01:49:49.0155] <jandem>
yeah at first I thought only the author could close revisions but that's not true

[02:58:51.0231] <evilpie>
ptomato: \o/ nice to have that fixed

[03:36:42.0270] <wes>
Waldo: Wow - I guess it's a question of degree here - "would be nice to compile with a C++ compiler" vs. "growing  a C++ API".   I know the C API was supported until at least JS 1.8.5.  I'm trying to remember when I had to switch to g++, it might have been transparent due to autoconf, but whoo boy, I had a lot of autoconf grief in those days, being stuck on Solaris/sparc. I found every bug lol.

[06:40:29.0122] <nbp>
@jandem, if you do not rely on type policy, then you will have issues with the type of Phi instructions.

[06:40:38.0231] <nbp>
 * jandem , if you do not rely on type policy, then you will have issues with the type of Phi instructions.

[06:41:14.0462] <nbp>
I will recommend you to revive what I previously did for SIMD instruction unboxing, and add it to Warp then.

[06:41:21.0230] <jandem>
we do use the type policies, it's just that with guards we lower CacheIR guards to MIR nodes

[06:41:34.0953] <jandem>
so that's why we can get these Unbox instructions

[06:41:55.0957] <jandem>
I'm hoping in the future this will allow us to simplify type policies

[06:44:23.0753] <nbp>
Our code for `foldsTo` only walks one instruction at a time, and does not know about loops. I doubt we want to inquiry how to Unbox the operands of Phi instructions in case of loops.

[06:44:40.0836] <nbp>
At least not within GVN.

[06:46:11.0112] <nbp>
https://bugzilla.mozilla.org/show_bug.cgi?id=1137688

[06:46:32.0452] <jandem>
I'm not sure I understand the concern, Warp is beginning to work reasonably well. If you have a concrete example where it's suboptimal...

[06:48:34.0618] <nbp>
`if (‚Ä¶) i = ‚Ä¶; else i = ‚Ä¶;  <CacheIR Guard unbox i>`  <-- example without loops

[06:49:38.0050] <jandem>
in that case the phi is specialized to int32 so there's no overhead compared to Ion today

[06:50:25.0792] <jandem>
we do have some box/unbox issues with loop phis still.. I'm not sure how to fix that, thanks for the pointer

[08:28:35.0279] <jorendorff>
The README for moz-phab contains this amazing sentence:
> The first argument is interpreted differently in Mercurial (as inclusive) and Git (exclusive).

[08:29:25.0218] <jorendorff>
That is, in Mercurial, `moz-phab submit . .` uploads the latest commit.But `moz-phab submit HEAD HEAD`

[08:30:25.0369] <jandem>
to channel waldo, wcgr

[08:30:28.0241] <jorendorff>
 * That is, in Mercurial, `moz-phab submit . .` uploads the latest commit.
But in git, `moz-phab submit HEAD HEAD` does not do the same thing

[08:31:34.0799] <froydnj>
/me always disappointed that you can't say `moz-phab submit $rev` or `moz-phab submit $r1..$r2` for git

[08:32:04.0651] <jandem>
that doesn't work? I use `moz-phab .` all the time

[08:32:14.0172] <jandem>
 * that doesn't work? I use `moz-phab .` all the time with hg

[08:33:33.0573] <jorendorff>
I guess this is because in Git, `rev1..rev2` includes rev2 but not rev1.

[08:34:00.0146] <tcampbell>
On git I end up doing `moz-phab submit mozilla/central` for the most part

[08:34:07.0388] <jorendorff>
that's good

[08:34:54.0116] <jandem>
to submit the top N patches I've found incantations like `moz-phab .^^ .` useful

[08:35:27.0637] <jorendorff>
`moz-phab submit` generally does what I want, too

[08:35:56.0628] <tcampbell>
jorendorff: unrelated. I'm thinking of adding a `FunctionSyntaxKind` for field-initializers since they have the special `arguments` rule. Does this offend any sensibilities?

[08:36:45.0902] <jorendorff>
No, that sounds great.

[08:38:37.0705] <jorendorff>
tcampbell: on hg, `moz-phab submit` automatically sets the review flag and updates Bugzilla to point to the patch.

[08:38:44.0930] <jorendorff>
tcampbell: Is that supposed to work on git too?

[08:38:52.0914] <jorendorff>
For me it just uploaded the patch and created a phabricator thing

[08:39:31.0468] <jorendorff>
But phabricator considers the thing a "Draft"

[08:40:26.0722] <tcampbell>
if I do `moz-phab submit HEAD^` on git, it reads the reviewer and bug-number out of first line and does the right thing

[08:40:53.0709] <tcampbell>
for updates, if the commit message has a D???? in the body, it will update existing patches

[08:41:08.0688] <jorendorff>
ok, i'll ask in the appropriate channel

[08:41:11.0152] <tcampbell>
reordering doesn't seem to work on git though. I need to manually fix in the webui

[08:41:35.0828] <jandem>
sometimes there's a delay (all patches are posted as Draft initially and then changed later)

[08:44:30.0778] <jorendorff>
oh, how odd

[08:54:23.0858] <yulia>
hm, i am getting this error when i try to run jstests -> `AttributeError: 'module' object has no attribute 'sha1'`

[08:54:27.0372] <yulia>
have people seen that beforer?

[08:55:51.0823] <iain>
yulia: I haven't seen that one, but I was seeing other weirdness with jstests yesterday. What happens if you run with python3?

[08:56:21.0190] <yulia>
iain: right, how would i get it to use python 3 instead of 2.7?

[08:56:34.0340] <jorendorff>
yulia: how are you running them? using mach?

[08:56:39.0183] <yulia>
jorendorff: yes

[08:56:45.0546] <yulia>
./mach jstest ...

[08:57:19.0968] <jorendorff>
I wonder if you just happen to have a bad revision, and it's been fixed since then. The scripts were quite recently updated to python3

[08:57:34.0963] <jorendorff>
so it is possible that mach was broken for a bit before anybody noticed

[08:58:06.0668] <yulia>
i just pulled from central, _but_ i am running it with my local smoosh

[08:58:11.0291] <iain>
I should really use mach more

[08:58:19.0141] <yulia>
i will try without smoosh

[08:59:17.0489] <iain>
The easiest way to force python3 with mach is probably to just edit the #! in js/src/tests/jstests.py to be `#!/usr/bin/env python3`

[08:59:26.0645] <iain>
 * The easiest way to force python3 with mach is probably to just edit the #! in `js/src/tests/jstests.py` to be `#!/usr/bin/env python3`

[09:00:05.0147] <jorendorff>
...why is it not like that already argh

[09:00:24.0997] <iain>
An excellent question

[09:00:47.0623] <yulia>
ohhh nice

[09:00:49.0608] <yulia>
i will try that

[09:00:58.0352] <froydnj>
is `jstests.py` being imported by something else in `mach`?

[09:01:19.0118] <iain>
Oh, that's a good question

[09:01:40.0729] <iain>
Looks like no: https://searchfox.org/mozilla-central/source/testing/mach_commands.py#514

[09:02:17.0744] <yulia>
hm it falls back on python 2.7 anyway

[09:02:21.0137] <tcampbell>
delete your obj dir

[09:02:29.0494] <tcampbell>
there were some upgrade issues I think

[09:03:03.0170] <jandem>
hm there's definitely something weird with bugzilla going on. Patches I see in bugmail but don't see in the bug...

[09:03:39.0945] <yulia>
i see

[09:03:50.0981] <yulia>
ok if i run jstests.py with python 3 i get something

[09:05:20.0139] <iain>
Something good?

[09:05:32.0542] <yulia>
it seems to run the test suitee

[09:05:39.0082] <yulia>
so, i just need to run it with smoosh now

[09:06:21.0887] <jorendorff>
`--args --smoosh`

[09:06:47.0689] <yulia>
deleting the obj dir didn't work though.. :curious:

[09:06:56.0170] <yulia>
im revendoring now

[09:27:41.0668] <nbp>
jorendorff: https://github.com/mystor/phlay

[09:37:49.0904] <sfink>
jorendorff: yulia : mach still forces python2 for jstests because the wpt test harness still had python3 compatibility issues. Everything else more or less works with python3 (as in, I fixed all issues I knew about, but it looks like people are uncovering a few more?).

[09:38:08.0142] <sfink>
people have been fixing the wpt py3 problems, so I'm not sure what the state is there

[09:38:48.0521] <sfink>
if you run jstests.py manually with python3, it'll work if you give it any arguments, since that will make it skip wpt

[09:58:24.0309] <yulia>
ok

[10:12:33.0917] <sfink>
I'm so proud. I've started committing JS crimes too. Latest example: `sequence.push(...[...tests.keys()].filter(t => t.includes(mut)));`

[10:17:37.0838] <yulia>
:D js crimes is a good term

[10:27:49.0015] <jorendorff>
good twitter account name

[10:27:58.0766] <yulia>
oh my god.

[10:28:19.0924] <yulia>
dang

[10:32:04.0242] <yulia>
doesn't let me register it..

[10:32:05.0082] <yulia>
dang

[10:32:28.0410] <yulia>
would have been a good shadow account

[10:32:36.0404] <yulia>
i now have crimes_js

[10:32:45.0212] <yulia>
and Crimesjs because twitter did that for some reason?

[10:32:54.0507] <yulia>
this is why there are so many dead accounts

[10:57:42.0301] <tcampbell>
all the test cases I write are JS crimes

[11:13:19.0479] <tcampbell>
yes bugzilla, something _is_ very wrong

[11:14:05.0150] <jorendorff>
"Unrecognized command: /unsee"

[11:15:28.0632] <tcampbell>
hmm.. cannot create bugs

[11:18:31.0151] <tcampbell>
On attempt 5 it seems to have gone through

[12:27:48.0744] <evilpie>
iain: Congratulations for real this time!

[12:27:58.0686] <evilpie>
You get the honors of closing some of those blocked bugs

[13:37:53.0572] <tcampbell>
/me tries add a new `ThisBinding` value for TDZ this

[13:38:02.0213] <tcampbell>
/me  * tries add a new `ThisBinding` kind for TDZ this

[13:38:38.0620] <tcampbell>
the distinct `needsThisTDZChecks` seems like it could be cleaner

[13:49:25.0020] <Waldo>
/me mutters

[13:50:31.0125] <Waldo>
Wifi seems down and while there's a wifi box down here I can power-cycle, I think it's a repeater and the master router is in the owners' room. 

[14:37:08.0930] <mgaudet>
confession: Sometimes the best way to figure out how to do something is to just start... so you can figure out why your first pass is wrong. Much learning today, and a little code thrown out for good measure

[14:37:11.0293] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:39:47.0706] <iain>
mgaudet: Sounds like my process of adding named capture replacement support

[14:39:59.0980] <iain>
Step 1: Refactor the code to make it easier to add support

[14:40:04.0239] <iain>
Step 2: Add support

[14:40:14.0426] <iain>
Step 3: Undo my refactor, because it didn't actually make anything easier

[15:18:08.0643] <Waldo>
> <@wes:mozilla.org> Waldo: Wow - I guess it's a question of degree here - "would be nice to compile with a C++ compiler" vs. "growing  a C++ API".   I know the C API was supported until at least JS 1.8.5.  I'm trying to remember when I had to switch to g++, it might have been transparent due to autoconf, but whoo boy, I had a lot of autoconf grief in those days, being stuck on Solaris/sparc. I found every bug lol.

Oh sure, yeah -- the *public* API only turned into requiring C++ much later.  As I understood the prior discussion, we were talking about when C++ first appeared in SpiderMonkey _anywhere_, not just in API.


2020-05-15
[21:34:57.0597] <annevk>
Could a JS peer please review https://phabricator.services.mozilla.com/D66777?

[21:38:12.0632] <Waldo>
annevk: Why is that patch removing the early-beta-or-earlier bits?  Seems like just changing the Atomics and SharedArrayBuffer entries is the minimal thing you actually need, and I wouldn't be certain we might never want such a test again.

[21:38:40.0372] <Waldo>
confession: Still grunging through thinking through state transitions in piping.

[21:50:14.0126] <Waldo>
Requested changes on the patch, with a comment to that effect.

[22:41:28.0080] <annevk>
thanks

[04:05:40.0183] <miles>
Hi. I'm posting a question here instead of using the dev-tech-js-engine-internals mailing list. I hope that's the right thing to do but please let me know if I should post there instead...
I'm trying to upgrade our empedding so have downloaded and build ESR 76 and trying to make the modifications to make our source code compile with it. The last time I looked at this was ESR 59. I'm a bit stuck on how to handle errors. I have used JS::SetWarningReporter and in the function I have used JSREPORT_IS_WARNING(report->flags) and JSREPORT_IS_STRICT(report->flags) but this no longer compiles in ESR 76. I presume they have been removed. I can see there is now a isWarning method so presumably I can use that instead of JSREPORT_IS_WARNING but what about strict errors? Do they no longer exist? It looks like the JSREPORT_xxxx macros still existed in ESR 68 looking at https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr68/examples/repl.cpp.
Can anybody help?
Many thanks...
Miles

[04:13:08.0945] <jorendorff>
miles: this is a fine place to ask.

[04:13:21.0267] <jorendorff>
Yes,  I think it's gone, see https://bugzilla.mozilla.org/show_bug.cgi?id=1275508

[04:15:43.0263] <miles>
Thanks. Does that mean there is no such thing as a 'strict warning/error' anymore then? Are there just warnings and errors that you can distinguish by using the isWarning() method?

[04:17:25.0628] <jorendorff>
I'm sure strict warnings are gone. I don't see the bug that removed them right now, though

[04:17:45.0229] <jorendorff>
got it, https://bugzilla.mozilla.org/show_bug.cgi?id=1619177

[04:19:49.0779] <miles>
Ah, OK. I'll just remove JSREPORT_IS_STRICT then... Thanks very much for the help :-)

[04:20:01.0357] <jorendorff>
Welcome!

[04:22:21.0842] <miles>
Just out of interest, I'm in the UK to it's about lunchtime here... What's the best time to ask questions here? Are most people in the US or are there people all over the world (currently working from home...!) ?

[04:23:18.0443] <jorendorff>
People who work on the JS engine are all over the world, mostly Europe, Canada, and the US

[04:24:19.0863] <jorendorff>
but also Tokyo and Melbourne :)

[04:26:19.0976] <miles>
Sounds like there will always be someone to chat with then :-)
Thanks again for the help. Now it *is* lunchtime!

[05:04:42.0891] <froydnj>
Waldo: only you would write a 16-part patch series for a security bug :D

[05:19:58.0944] <Ms2ger [~half-time dedication]>
/me is now curious about Waldo's patch stack

[05:20:20.0696] <jorendorff>
16 patches, no commit messages

[05:23:49.0688] <Ms2ger [~half-time dedication]>
gps would've written 16 patches, each with two changes lines of code and 150 lines of commit message

[05:23:57.0929] <Ms2ger [~half-time dedication]>
 * gps would've written 16 patches, each with two changed lines of code and 150 lines of commit message

[05:24:11.0283] <froydnj>
Ms2ger [~half-time dedication]: it landed as a single patch (which I guess technically it should be a 15-part patch series, then)

[05:45:02.0644] <yulia>
for anyone who had my weird build error from yesterday: the problem is openssl

[05:45:19.0419] <yulia>
the error i had looks like this: https://stackoverflow.com/questions/59269208/errorrootcode-for-hash-md5-was-not-found-when-using-any-hg-mercurial-command

[05:45:43.0037] <jorendorff>
sorry for all the bad advice

[05:46:00.0202] <yulia>
oh no problem! those were all good things to try

[06:09:57.0655] <tcampbell>
Survey: When you draw out scope-chains, is the Global scope at the top or the bottom?

[06:11:32.0883] <tcampbell>
 * Survey: When you draw out scope-chains, is the Global scope at the top or the bottom? Edit: I guess left/right are real options too.

[06:13:33.0032] <jandem>
scope chains can be extended and I think that's more natural to happen to the bottom / right, so global at the top :) 

[06:29:26.0809] <wingo>
also mirrors nesting in source code

[06:29:37.0505] <wingo>
which extends down and to the right

[06:39:39.0765] <yulia>
in about 1hr and 20 minutes i will do a test twitch stream. It isn't public yet because i just want to see how the setup works and if this is a good idea _at all_. please keep the link internal for now (don't post to twitter or share yet) -> https://www.twitch.tv/codehag

[06:39:52.0175] <yulia>
this is just a test, it will go for an hour on one bug

[07:11:44.0439] <yulia>
 * in about 2 hours i will do a test twitch stream. It isn't public yet because i just want to see how the setup works and if this is a good idea _at all_. please keep the link internal for now (don't post to twitter or share yet) -> https://www.twitch.tv/codehag

[07:13:22.0992] <yulia>
_i can't do time_ its in 2 hours üòÖ

[07:19:09.0207] <Ms2ger [~half-time dedication]>
Who can, really

[07:20:24.0787] <yulia>
i am trying to think of bad metaphors for what a grammar is... the most recent thought is -> nested css classes

[07:20:47.0696] <yulia>
i also have regexp, and matryoshka dolls 

[07:31:47.0006] <jorendorff>
yulia: it's regexp, but you can name individual parts and reuse them

[07:32:40.0301] <jorendorff>
also: it's kinda like jinja2 templates...

[07:33:14.0109] <jorendorff>
of course jinja2 is intended for _generating_ output that follows patterns, rather than _parsing_ input that follows patterns, but a grammar is all the information you need for both

[07:33:42.0655] <yulia>
i am wondering if there is some physical object that can help get the idea across, like with stacks

[07:34:36.0756] <jorendorff>
it's kind of like an actual physical dictionary

[07:34:48.0605] <jorendorff>
you don't know what x is, so you look it up, and oh no the definition is MORE WORDS

[07:35:01.0202] <yulia>
jinja templates sound interesting... i will look into those

[07:35:03.0178] <yulia>
it can also be a really bad metaphor

[07:35:26.0212] <yulia>
oh right! that works

[07:35:31.0622] <yulia>
a dictionary where it is all more words

[07:35:45.0283] <yulia>
(sorry i have a delay)

[07:36:22.0751] <jorendorff>
it's words all the way down :-\ but in a grammar like the javascript grammar, it's as if you finally go to look up "comma" and they just show a picture of a comma `,` -- it does actually bottom out somewhere

[07:37:10.0794] <jorendorff>
it occurs to me that, for any dictionary, there must be strongly connected components of which words are defined in terms of each other

[07:37:32.0832] <yulia>
that would be an interesting graph

[07:38:40.0918] <iain>
I'm trying to figure out a Bad Metaphor involving plugging power adapters / power bars / etc into each other

[07:39:22.0756] <iain>
Where you have a power bar, and it has a spot for plugging in a particular kind of plug, but there are all sorts of options for things that could plug in there, some of which are also power bars...

[07:39:37.0413] <jorendorff>
a bad metaphor should be more entertaining than the dictionary example, though

[07:39:46.0242] <yulia>
right, and terminals would be lamps at the end

[07:39:57.0004] <jorendorff>
that's cool :)

[07:40:05.0473] <yulia>
that works pretty well!

[07:40:18.0829] <yulia>
so you have european plugs, american plugs etc

[07:40:51.0423] <yulia>
and then it goes into micro usb, usb c ...

[07:41:29.0120] <jorendorff>
an actual powerstrip is like StatementList

[07:43:08.0804] <jorendorff>
yulia: not a metaphor, but entertaining use of grammars https://github.com/galaxykate/tracery

[07:43:43.0467] <iain>
The most important part of the metaphor is that plugging hundreds of electrical devices into each other is clearly a Bad Idea

[07:43:43.0469] <yulia>
oh is this the story telling thing you mentioned at all hands??

[07:43:48.0123] <iain>
Much like trying to parse JS

[07:43:52.0894] <yulia>
lol

[07:43:55.0702] <jorendorff>
did i? i don't remember

[07:44:16.0201] <yulia>
we were talking about a language for writing text based adventures

[07:44:22.0517] <yulia>
you and caroline both knew it

[07:44:30.0746] <jorendorff>
ah, that's Inform7

[07:44:53.0498] <jorendorff>
it has some kind of parser generator in it too

[07:45:59.0300] <sfink>
ooh, I've been meaning to try that out. A friend recommended it to me.

[07:46:15.0590] <jorendorff>
Inform7 is one of my favorite things in existence

[07:46:31.0589] <jorendorff>
It is such a stupendously unlikely object

[07:48:54.0676] <jorendorff>
British mathematician-poet spends decades writing a compiler is already unlikely

[07:50:01.0785] <jorendorff>
but the source language it compiles is even weirder, delightfully fractally weird

[07:51:34.0455] <yulia>
i really want to spend some time with it..

[07:54:38.0764] <jorendorff>
Yulia, you seem pretty busy Monday, i'll send an invite for Tuesday about top-level await

[07:55:05.0099] <yulia>
oh sorry that might be german classes jorendorff 

[07:55:30.0043] <yulia>
that should be a bit less cluttered

[07:55:40.0876] <yulia>
but tuesday works too

[07:55:56.0226] <jorendorff>
yulia: sent an invite. feel free to move it to monday if you want, you have permission to edit

[08:01:48.0818] <jorendorff>
twice today firefox randomly opened a tab and visited facebook.com

[08:02:34.0696] <jorendorff>
and once it randomly opened a tab pointing to some NPR article or something like that

[08:02:37.0475] <jorendorff>
both times it happened while I was typing, so ...maybe a new keyboard shortcut?

[08:02:41.0911] <jorendorff>
 * all three times it happened while I was typing, so ...maybe a new keyboard shortcut?

[08:03:06.0966] <Ms2ger [~half-time dedication]>
No, that's part of the new sponsorship agreement with FB

[08:03:31.0314] <jorendorff>
oh, i found it. accidentally cmd-tabbing to an entry MacOS helpfully inserted into my cmd-tab list that's "whatever the nearby ipad is doing"

[08:03:43.0102] <Ms2ger [~half-time dedication]>
ha

[08:51:47.0897] <jorendorff>
tcampbell: We came up with this plan to have generatorKind infallibly look up the answer on the self-hosting builtin

[08:52:00.0883] <jorendorff>
and i implemented it, and it works, but I don't understand why

[08:52:35.0706] <tcampbell>
the generatorKind is a `BaseScript` flag

[08:52:52.0713] <jorendorff>
does the original in the SH realm always have a BaseScript?

[08:52:59.0268] <tcampbell>
yep

[08:53:06.0488] <tcampbell>
never lazy in self-host realm

[08:53:21.0923] <jorendorff>
ok, i'll try to verify that now

[08:53:41.0885] <jorendorff>
I can simplify to ignore the self-host case and add some more asserts

[08:54:38.0690] <jorendorff>
 * I can simplify to ignore the self-hosting realm case and add some more asserts

[08:55:15.0405] <tcampbell>
a SelfHostedLazyScript onlly exists in normal realms

[08:55:22.0731] <tcampbell>
and it is just a placeholder token

[08:56:15.0907] <tcampbell>
(there is one per runtime. It contains a single jit-trampoline pointer so the JIT can jump without looking at a script)

[08:57:04.0313] <jorendorff>
OK. I think I was seeing a counterexample Wednesday, but if so, then it happens in the test suite and will be easy enough to reproduce...

[08:57:59.0762] <jorendorff>
don't worry about it -- probably the thing I was thinking of was some other special case, a self-hosting intrinsic or something

[08:58:59.0084] <tcampbell>
it is possible you directly queried on the self-hosted Function

[08:59:34.0628] <jorendorff>
right, but it was getting past the test for `hasBaseScript()`

[08:59:53.0721] <tcampbell>
oh

[09:00:11.0599] <yulia>
_starting the test stream if anyone wants to join_

[09:00:26.0288] <tcampbell>
probably need to guard `hasSelfHostedLazy()`

[10:00:22.0931] <yulia>
iain: jorendorff thank you sooo much for joining!

[10:03:42.0030] <jorendorff>
good test

[10:32:47.0137] <jorendorff>
hmm. ok, `getOrCreateGeneratorFunctionPrototype` is (or at least _can_ be) called pretty early, inside `initSelfHosting` even, which means `Iterator.prototype` is set up pretty early, which is a pain

[10:32:51.0348] <jorendorff>
/me thinks

[10:35:18.0188] <tcampbell>
oh, Function drags in Iterator?

[10:35:27.0609] <tcampbell>
does it need special handling like Function?

[10:35:56.0439] <tcampbell>
(maybe I'm not remembering how the Object/Function bootstrap works)

[10:36:05.0061] <jorendorff>
Function doesn't.

[10:36:30.0688] <jorendorff>
But if I actually add a generator to Iterator.js, it initialies %GeneratorFunction%

[10:36:44.0098] <tcampbell>
ah, right

[10:36:53.0781] <jorendorff>
I think this is happening when actually running the JSOp::Lambda instruction to create that generator

[10:37:44.0584] <jorendorff>
`Interpret()` -> `js::Lambda()` -> `js::CloneFunctionReuseScript()`

[10:38:08.0620] <tcampbell>
sounds right

[10:38:24.0824] <jorendorff>
-> `js::GetFunctionPrototype` -> `GlobalObject::getOrCreateGeneratorFunctionPrototype` -> loop

[10:40:47.0309] <tcampbell>
do we need a Iterator `ClassSpec` and something like `CreateFunctionPrototype`?

[10:41:06.0233] <tcampbell>
/me is throw darts at the source code and making this all up

[10:43:15.0422] <tcampbell>
https://searchfox.org/mozilla-central/source/js/public/ProtoKey.h#137

[10:43:16.0385] <jorendorff>
still trying to avoid that

[10:49:34.0994] <jorendorff>
OK, so clear picture of the dependency cycle now

[10:55:41.0493] <jorendorff>
1. creating a generator. its [[Prototype]] will be %Generator%, which doesn't exist yet, so
2. create %Generator% first. but its [[Prototype]] is %Generator.prototype%, which doesn't exist yet, so
3. create %Generator.prototype% first. its [[Prototype]] is %IteratorPrototype%, which doesn't exist yet, so
4. create %IteratorPrototype% first. it has a method %IteratorPrototype%.map that's a generator, so goto 1


[10:56:36.0106] <jorendorff>
Waldo: ^?

[10:57:38.0025] <jorendorff>
I don't think we need to be as careful here as we are with Function and Object; instead, consider filling in the global.%IteratorPrototype% slot after creating the object at the beginning of step 4, and then the loop won't go

[10:58:05.0185] <tcampbell>
seems reasonable

[10:58:27.0346] <tcampbell>
(why doesn't Iterator have a ProtoKey?)

[10:58:50.0810] <jorendorff>
‚ú® who knows ‚ú®

[10:59:12.0054] <jorendorff>
there is no Iterator object, per spec

[10:59:19.0622] <jorendorff>
just a common proto; but then

[11:00:17.0969] <jorendorff>
there really should be _something_, so that people can do `class MyFancyIterator extends Iterator`, even if maybe they shouldn't

[11:00:20.0546] <tcampbell>
isn't that true of GeneratorFunction, etc?

[11:00:32.0411] <jorendorff>
no, there really is a GeneratorFunction constructor

[11:00:47.0738] <jorendorff>
with specified semantics

[11:00:53.0359] <jorendorff>
even though it isn't `global.GeneratorFunction`

[11:01:03.0700] <jorendorff>
avandolder: as you can see: my bug came back

[11:01:06.0386] <tcampbell>
oh, I see what you mean

[11:01:09.0381] <avandolder>
Part of the iterator helper proposal is actually to add Iterator as a constructor on the global object

[11:01:28.0890] <tcampbell>
yeah, I thought you had to smuggle it off a normal generator

[11:01:39.0432] <jorendorff>
avandolder: good! I didn't see that part

[11:02:39.0319] <jorendorff>
all of them should just be given names, it's ... absurd

[11:05:05.0909] <tcampbell>
indeed

[13:03:40.0061] <tcampbell>
I call `markAtom` when crossing... Zones?

[13:05:25.0626] <tcampbell>
looks like yes. https://searchfox.org/mozilla-central/rev/3ce874dc2703831af3e5ef3a1d216ffd08057fa5/js/src/vm/JSScript.cpp#4854-4856

[13:20:42.0817] <mgaudet>
confession: Early experience with using new ops to do private fields is good, though I need to tweak a bit of my hookup strategy to avoid blowing up certain combinations. 

[13:20:45.0111] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:08:16.0045] <Waldo>
> <@froydnj:mozilla.org> Waldo: only you would write a 16-part patch series for a security bug :D

It's more a down payment than a 16-part patch, to be honest.

[14:18:11.0884] <jorendorff>
avandolder: Have a good weekend!

[14:18:44.0289] <jorendorff>
I just figured out something that was bugging me‚ÄîI had a working patch even though the Iterator Helpers proposal creates a new reference cycle, which should be causing me problems

[14:19:17.0125] <jorendorff>
it turns out that when we make selfhosted functions, we unconditionally give them %FunctionPrototype% as their [[Prototype]]

[14:20:31.0875] <jorendorff>
This is right for all self-hosted functions so far, but wrong for generators, which should have %GeneratorFunction% instead.

[14:24:21.0824] <Waldo>
jorendorff: I think your four steps, with setting the global reserved slot after the first part of step 4, sounds sane.

[14:24:34.0219] <jorendorff>
ok, thanks.

[14:25:05.0775] <Waldo>
None of that prototype/constructor hierarchy was paged into memory when I first read those steps.  (And it's probably going to be flushed in an hour or so.)

[14:26:00.0182] <avandolder>
I hope everyone has a good weekend too!

[16:22:25.0510] <deian>
hey ya'll, we added a few MIR, LIR, and ARM codegen validators (on top of a new runtime validator framework); can I bug someone for some pointers to how to best fuzz Ion? (I've been fighting Fuzzilli a bit.)


2020-05-16
[08:03:29.0943] <sfink>
uh, has anyone seen working crash stacks for SM jobs? I have 4 seg faults, the log says there were 17 dump files, but I see no stacks.

[08:04:28.0670] <sfink>
oh

[08:04:50.0841] <sfink>
the log file *also* contains `TypeError: a bytes-like object is required, not 'str'` when processing the dumps.

[08:05:05.0575] <sfink>
that answers my question ‚òπÔ∏é

[08:05:20.0677] <jorendorff>
ü§¶

[09:11:54.0514] <evilpie>
who needs crash dumps if you can have python3

[16:59:25.0070] <deian>
 * hey ya'll, we added a few MIR, LIR, and ARM codegen validators (on top of a new runtime validator framework); can I bug someone for some pointers to how to best fuzz Ion? (I've been fighting Fuzzilli a bit.) [edit: never mind! got fuzzilli working!]


2020-05-17
[17:00:59.0174] <jorendorff>
deian: have you talked with decoder already?

[17:03:06.0299] <deian>
I haven't! After a bit of fighting the build system and clang on ARM, managed to get fuzilli working though

[17:06:19.0539] <jorendorff>
great! talk to decoder anyway about machines, reducing test cases, and other fuzzers that can run with your validators enabled

[17:07:45.0862] <deian>
that would be fantastic! thanks for the pointer, will ping during the work week (we should have at least a regalloc/snapshop test case to chat about too)

[06:21:27.0557] <decoder>
deian: please let me know about any additional runtime shell flags that we should use. it is really easy for us to deploy these in automation and scale them up


2020-05-18
[09:17:12.0906] <yulia>
does "JOF_" stand for "javascript Operator Format"?

[09:17:26.0007] <jorendorff>
let's go with yes

[09:17:41.0637] <yulia>
excellent.

[09:17:47.0305] <yulia>
or... is it your name...

[09:17:50.0555] <jorendorff>
yulia: fair question; and those constants are older than time, we wouldn't use cryptic prefixes if we wrote it today

[09:18:19.0151] <yulia>
i am screenshotting your response

[09:18:39.0002] <yulia>
because its good

[09:18:42.0182] <jorendorff>
that's always ok. imagine i'm wearing a green lanyard

[09:19:04.0877] <yulia>
what is the reference to the green lanyard?

[09:19:13.0542] <yulia>
"photos allowed"?

[09:19:19.0308] <jorendorff>
yes

[09:19:22.0713] <yulia>
haha

[09:19:23.0773] <yulia>
gooood

[09:20:17.0575] <jorendorff>
(for others lurking: sometimes at tech conferences, you're offered a choice of lanyards to hold your conference badge, with a green lanyard meaning "it's ok to take a picture with me in it".)

[09:30:23.0352] <yulia>
huh, i found a bug in searchfox

[09:30:23.0990] <nbp>
(it is not ok to take picture of me, but I am tired of answering everybody's question on why I have a red lanyards and not them ‚Ä¶)

[09:31:05.0737] <decoder>
jorendorff: a friend of mine is learning rust. https://twitter.com/G33KatWork/status/1262142272910626817 ;D

[09:38:38.0705] <yulia>
Waldo: brendan eich is getting credit for your comments btw https://searchfox.org/mozilla-central/rev/265e6721798a455604328ed5262f430cfcc37c2f/js/src/vm/StringType.h#824

[09:39:42.0713] <yulia>
blast from 2011: https://searchfox.org/mozilla-central/rev/fe3fa7f53037d4e869858fef4ff9310dfa795c41/js/src/vm/StringType.h#831

[09:39:54.0903] <denispal>
nbp: jorendorff:  would either of you happen to have a rough idea of how much parsing time would be worth off-threading the compile?  Looking at some profiles (e.g. https://perfht.ml/3dXEyGh) if you look at the marker table we off-thread compile many scripts that only take 2-3ms.  I'm wondering if we should do those main thread instead

[09:40:48.0508] <denispal>
sorry, marker chart*

[09:44:20.0502] <denispal>
This is on a pretty fast machine, however.  It might be a totally different story on something slower which I can check today

[09:45:01.0649] <nbp>
denispal: I see 320ms under `CompileLazyFunction`, at the moment this function is only executed on the main thread. (and 39ms of other `js::frontend::`)

[09:45:39.0234] <nbp>
The only way to use the main thread for these, would be to parse them eagerly off-thread.

[09:46:26.0899] <nbp>
However, I do not think we have any mechanism in place to do that. The only thing available is the heuristic to move this cost to the first parse.

[09:47:01.0658] <nbp>
^ These results are the main thread results.

[09:47:21.0507] <denispal>
nbp: I added some markers "ScriptCompileOffThread" in scriptloader to measure the time it takes to off-thread some scripts

[09:48:32.0244] <nbp>
Currently the OffThread switch is based on the size.

[09:50:09.0376] <denispal>
yeah, I think we can probably increase it a bit.  hopefully size is roughly linear with time here?

[09:50:49.0429] <nbp>
I would expect so. however I will note that all scripts which are parsed in sub-2ms add up to ~8ms.

[09:51:12.0197] <nbp>
Which is half of a frame, so I am not sure whether it would be worth it.

[09:52:26.0727] <nbp>
Maybe batching them off-thread might be a better option.

[09:52:36.0913] <denispal>
This time doesn't include the round trip back on the event loop once parsing it done also

[09:53:04.0688] <nbp>
Also, I note that there is a single main-thread script compilation which takes 14ms, with an inlined script, do we know why?

[09:54:02.0787] <denispal>
nbp: which script?

[09:54:37.0505] <nbp>
`ScriptCompileMainThread ‚Äî <script> inline at line 665 of https://www.reddit.com/`

[09:55:24.0935] <denispal>
oh we don't current omt inline scripts

[09:55:54.0033] <denispal>
certainly a todo for the future, but I think we need more data on how big most of them are

[09:57:07.0375] <nbp>
I see that these scripts are `async`, maybe we could append `Finished` parser to the existing event as long as it is not popped out of the event loop?

[10:00:03.0630] <nbp>
I think we execute/parse inline scripts on the main thread because they might access what is already loaded from the DOM. However, if we pre-load pages, it might be worth parsing them off-thread as long as we block when actually loading the page.

[10:04:13.0635] <denispal>
yeah I agree.  I think it would be valuable to omt parse inline scripts as well.  I can look into it after bug 1606652, hopefully it won't be too complicated as a followup task

[10:04:15.0040] <botzilla>
https://bugzil.la/1606652 ‚Äî NEW (denispal) ‚Äî Off thread parse scripts as soon as they are fetched

[10:04:43.0811] <denispal>
for the parsing heuristics, I'll play around with them a bit to see if maybe we can get some wins by increasing the threshold

[10:15:02.0504] <nbp>
denispal: https://searchfox.org/mozilla-central/source/js/src/vm/OffThreadScriptCompilation.cpp#32-65

[10:18:57.0562] <denispal>
nbp: thanks!

[10:28:03.0871] <tcampbell>
With Stencil, it should be a lot easier to offthread smaller scripts. We should be able to directly fire the parse at end of network recv without hitting the event loop.

[10:33:06.0853] <nbp>
And with SmooshMonkey (unless we change parser type), we should be able to start parsing off-thread and resume on the main thread.

[10:34:41.0335] <evilpie>
Turns out Firefox is a lot better for analyzing huge JSON files, python is just too slow

[10:34:54.0501] <evilpie>
maybe I should write this in Rust :)

[10:39:32.0064] <Waldo>
> <@yulia:mozilla.org> Waldo: brendan eich is getting credit for your comments btw https://searchfox.org/mozilla-central/rev/265e6721798a455604328ed5262f430cfcc37c2f/js/src/vm/StringType.h#824

I'm idly curious what the context is where that would be happening, but also https://www.brainyquote.com/quotes/harry_s_truman_109615

[13:48:32.0593] <jorendorff>
Quick poll. Do we overuse `inline`? I'm talking about functions that are 20+ lines of code, like `CloneFunctionObjectIfNotSingleton`: https://searchfox.org/mozilla-central/source/js/src/vm/JSFunction-inl.h#44

[13:51:37.0137] <evilpie>
looks like this function should be inlined into the three callers, yes

[13:53:16.0130] <evilpie>
 * looks like this function should be inlined into the three callers

[13:57:31.0835] <Waldo>
...that all reside in a single file anyway, so no reason for it to be an inline in a header when it could be a `static` in that single file and then the compiler could decide how much to credit the "inline" claim.

[13:57:52.0681] <Waldo>
As to the _general_ question, boy howdy, I have no idea.  :-)

[13:58:12.0806] <jorendorff>
Can you explain a bit more why this is a good idea? I don't think there's a path through this function that doesn't call another non-inline-able function

[13:58:14.0138] <Waldo>
That said, that verb looks distinctly dodgy.

[13:59:03.0802] <jorendorff>
Is the verb in question "should"? i'm a bit lost

[13:59:15.0727] <Waldo>
"clone if not singleton"

[14:00:03.0554] <evilpie>
At least `js::Lambda` is directly called from JIT code, it would be  unfortunate if there was an unnecessary call to `CloneFunctionObjectIfNotSingleton`

[14:01:04.0568] <jorendorff>
I assumed all three callers exist in order to be called both from the interpreter and from jit code

[14:02:58.0996] <jorendorff>
(for those following along at home, they are `js::Lambda`, `js::LambdaArrow`, and `js::FunWithProtoOperation`, all of which directly implement particular JS opcodes; the last one is used for derived classes)

[14:08:02.0138] <jorendorff>
but in particular, are we inlining it
- to avoid the function argument setup costs and use of the stack,
- to avoid a possible CPU stall at `ret`,
- because we think there will be useful constant propagation at each call site (I doubt it), or
- something else?

[14:08:33.0927] <jorendorff>
 * but in particular, are we inlining it
- to avoid the function argument setup costs and use of the stack,
- to avoid a possible CPU stall at `ret`,
- because we think branch prediction will work differently in each of the three cases, so it's good to have copies of the code (I doubt it),
- because we think there will be useful constant propagation at each call site (I doubt it), or
- something else?

[14:09:31.0868] <jorendorff>
(thank you for answering my dumb question, my C++ perf instincts are really terrible)

[14:11:37.0199] <evilpie>
Probably the first? I don't think I usually spend time think about branch prediction too much, and constant propagation doesn't really apply in that case anyway

[14:13:05.0875] <evilpie>
(I do think we mark too many trivial things as inline, but in this case we probably really want that inlining)

[14:13:21.0633] <evilpie>
calling from jit code to c++ is slow  enough, don't need to make it worse

[14:13:43.0781] <evilpie>
so this probably wasn't a good example, I bet we have a lot of other big functions that shouldn't be marked inline

[16:27:48.0555] <froydnj>
emilio: why does bindgen have https://docs.rs/bindgen/0.53.2/bindgen/callbacks/trait.ParseCallbacks.html ?  isn't at least the type of enum variants determined by the compiler (integer macros are context-dependent, I guess)

[16:35:00.0629] <emilio>
froydnj yeah, bindgen doesn't have the expansion context, so allows the user to customize it. Also people want to do stuff with string macros, for some reason

[16:35:50.0674] <emilio>
froydnj include_file is useful to collect all the header dependencies and such for example


2020-05-19
[17:01:59.0746] <froydnj>
emilio: yeah, I can see `include_file`...but I am puzzled about `enum_variant_behavior`, because enums have a definite type according to the language

[17:02:31.0084] <froydnj>
oh, wait, `EnumVariantCustomBehavior`, ok, I see that

[17:02:36.0100] <froydnj>
nm, I was just confused :)

[05:55:33.0462] <nbp>
tcampbell: I just realized that the fix made in Bug 1502090 is still unused because Bug 1493903 quick-fix is still in place!

[05:55:34.0880] <botzilla>
https://bugzil.la/1502090 ‚Äî RESOLVED (tcampbell) ‚Äî Fixup Ion array.push inside fun.call

[05:55:35.0489] <botzilla>
https://bugzil.la/1493903 ‚Äî VERIFIED (jandem) ‚Äî Infoleak bug from Hack2Win

[06:02:38.0786] <tcampbell>
It looks like we were waiting until we used a real inline IonBuilder. I'm not sure there is a rush to change this until WarpBuilder lands

[06:11:34.0577] <nbp>
I do not think there is any rush either. I was just wondering earlier how WarpBuilder could handle it.

[06:12:09.0837] <nbp>
I do not think we have CacheIR with variadic arguments yet.

[06:35:44.0761] <tcampbell>
baseline CallICs fall into that category, right?

[06:36:11.0112] <tcampbell>
I think jandem and evilpie are looking into call optimizations in Warp this week

[06:52:57.0432] <iain>
"Variadic" is a tricky word when it comes to call ICs

[06:53:10.0644] <iain>
Every IC chain has a fixed argc

[06:53:45.0081] <iain>
Spread calls always have 1 argument, which is the array containing the actual args

[06:55:07.0189] <iain>
But for stubcode-sharing reasons, the CacheIR we generate for many call ICs is variadic in the sense that it doesn't have argc baked in

[06:56:56.0970] <iain>
Currently the only thing CacheIR does with funapply and funcall is jump straight to the callee instead of calling apply or call

[06:57:12.0861] <iain>
We don't inline applied/called natives

[07:03:56.0416] <littledan>
sfink: I'm curious, is anything blocking turning on WeakRefs in Nightly?

[07:52:45.0641] <mconca>
 iain: Did RegExp named groups (https://bugzilla.mozilla.org/show_bug.cgi?id=1362154) come along with the update to the RegExp engine?

[07:55:26.0986] <nbp>
So we might have to support N versions of fixed sized array push then ‚Ä¶

[08:11:54.0255] <iain>
mconca: The engine gives us all the information we need, but we have to put it together ourselves.

[08:12:32.0763] <iain>
I have a stack of patches that will be going up later today

[08:14:06.0933] <iain>
nbp: I don't think we need N versions. CacheIR can probably just add `ArrayPushN`, allocate room for N new elements at once, and then read them all off the stack

[08:14:13.0561] <iain>
I'm not sure how well that plays with Ion

[08:15:15.0721] <mconca>
iain: Thanks.  Sounds like you are hoping to make Fx78?

[08:15:22.0821] <iain>
mconca: Absolutely

[08:16:17.0309] <iain>
nbp: Alternatively, if it's only the array extension that can fail, and the pushes are infallible, then we could split it into two ops: ArrayExtendN, and then a sequence of ArrayPush

[08:33:34.0128] <jonco>
littledan: I don't think so (although I'll check)

[08:33:42.0779] <jonco>
We could enable this by default in nightly only

[09:18:27.0772] <sfink>
littledan: uhhh... they're not on?

[09:19:57.0692] <sfink>
sure enough

[09:20:00.0053] <sfink>
jonco: ^

[09:20:39.0185] <jonco>
sfink: it's preffed off by default 

[09:20:39.0972] <jorendorff>
/me looks surprised

[09:21:01.0644] <sfink>
oh, sorry

[09:21:11.0115] <sfink>
I totally didn't read the message immediately before mine

[09:22:13.0803] <sfink>
 * I totally didn't read the messages immediately before mine

[09:42:25.0462] <littledan>
(FWIW I guess the incumbent Realm thing is still an open spec issue; V8 decided to ship without, and IMO this is a small enough corner that it could be changed after shipping without risking compat https://github.com/whatwg/html/pull/4571#discussion_r427328430)

[09:42:39.0244] <littledan>
anyway I'll be really happy if it's preffed on soon!

[09:43:33.0849] <littledan>
TC39 is coming up in a couple weeks; I'd be happy to propose WeakRefs to Stage 4 if SpiderMonkey ships it

[09:45:21.0754] <littledan>
(well, if you consider Nightly "shipping"--that's up to you I guess. I'm not sure if there are any issues that you see as  blocking WeakRefs from the train to Stable, such as the one I linked above.)

[09:46:10.0501] <jorendorff>
Shipping in Nightly is not "shipping".

[09:46:52.0273] <littledan>
is it, for you, sufficient for Stage 4, or do you prefer to wait for stable?

[09:47:03.0136] <littledan>
I'm in no rush, I just want to move it along at the point where it's ready

[09:47:44.0312] <jorendorff>
I prefer to wait for beta at least,

[09:48:12.0230] <jorendorff>
in general across all TC39 proposals

[09:49:24.0530] <jorendorff>
There's also a difference between putting something in Nightly with/without an `#ifdef MOZ_NIGHTLY_BUILD`

[09:51:05.0337] <jorendorff>
If our source code explicitly marks the feature as something we do not want to ship to all our users, I don't think it makes sense for TC39 to count it as shipping

[09:52:57.0471] <jonco>
littledan: I filed bug 1639246 for enabling this in nightly; I don't see any issue with doing that at least

[09:52:58.0873] <botzilla>
https://bugzil.la/1639246 ‚Äî NEW (nobody) ‚Äî Consider enabling weak refs by default in nightly

[09:53:44.0115] <jonco>
I think we'd want to wait a few cycles before thinking about turning this on in release

[09:54:05.0418] <littledan>
jorendorff: makes sense, thanks for explaining

[09:54:12.0359] <jorendorff>
jonco: OK. Why wait?

[09:54:59.0702] <jonco>
jorendorff: in case people find bugs

[09:55:12.0255] <jonco>
jorendorff: as long as there's no urgent need to support this right away

[09:56:06.0769] <jorendorff>
Well, the reason I ask is that this is quite different from how we ordinarily ship features

[09:56:37.0790] <jonco>
jorendorff: how does this normally work?

[09:57:30.0575] <jorendorff>
Well -- normally when the implementation is done, even if the feature is moderately risky, if there's a pref, it rides the trains. If a serious problem turns up in beta, we can pref the thing off for that release

[09:58:19.0135] <jorendorff>
jonco:  People do find bugs in all channels, but I think it's rare for people to find bugs in a second or third Nightly version, and (typically) not worth the extra wait

[09:59:18.0280] <jorendorff>
However this process is entirely customizable to the feature in question

[09:59:28.0096] <jonco>
jorendorff: OK, that sounds fine

[09:59:54.0940] <littledan>
(FWIW I like to think that this is not an especially risky feature; it's not SharedArrayBuffer or something)

[10:00:27.0674] <jorendorff>
littledan: since our implementation has no bugs, you're right, there's no risk

[10:00:53.0938] <jorendorff>
but if we had, then it would be risky, the potential downside is high

[10:01:12.0433] <littledan>
sorry, of course I'm not suggesting skipping the nightly step...

[10:01:29.0020] <jonco>
littledan: I think of this as a fairly complex feature

[10:01:30.0521] <jorendorff>
littledan: i know, just kidding :)

[10:01:51.0531] <littledan>
I just mean, I could see sitting in nightly for several releases for some other features which are especially risky

[10:04:27.0742] <jorendorff>
jonco: maybe flip the pref after FF78 departs on June 1, so it gets a full cycle in Nightly, then let it ride the trains to FF79

[10:07:10.0717] <jonco>
jorendorff: sure

[10:54:02.0736] <jrmuizel>
does anyone recall a mechanism that we have for storing specific data on the stack so that it shows up in minidumps of crash reprorts?

[10:55:06.0831] <jorendorff>
I remember there is something

[10:55:19.0517] <jorendorff>
I don't know about crash reports‚Äîthe thing I'm thinking about affects profiles

[10:55:32.0376] <jorendorff>
sorry for the noise

[11:16:30.0934] <tcampbell>
jrmuizel: we have done hacky things like https://searchfox.org/mozilla-central/rev/61fceb7c0729773f544a9656f474e36cd636e5ea/js/src/jit/x86-shared/Assembler-x86-shared.cpp#119-126

[11:20:17.0076] <jrmuizel>
tcampbell: ah yeah, that's the kind of thing that I was thinking of

[11:20:35.0255] <jrmuizel>
I wasn't sure if someone had made a less hacky version

[11:43:04.0579] <iain>
TypedObjects are nightly-only, right? They aren't used in any browser code?

[11:47:58.0413] <jandem>
correct

[11:50:25.0667] <tcampbell>
confession: Moved script-atom pointers into gcthings array. Simpler and ends up saving memory. (Bug 1638470)

[11:50:28.0340] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[11:50:29.0641] <botzilla>
https://bugzil.la/1638470 ‚Äî NEW (tcampbell) ‚Äî Move script-atoms from RuntimeScriptData to PrivateScriptData

[12:44:10.0744] <tcampbell>
jdm: I presume Servo has it's own sort of ScriptLoader that turns `<script>` tags into some sort of `JS::Compile` call. Where can I find that?

[12:45:32.0835] <tcampbell>
I'm gonna need to add/rework APIs for the result of off-thread compilation (Stencil) and am hoping this can also make speculation and caching easier for Servo

[12:45:57.0185] <tcampbell>
thread-safe/gc-free-parsing for all!

[12:46:49.0688] <jdm>
tcampbell: that's https://github.com/servo/servo/blob/9cbebe29077efbb8b22631f27facc0b548faf5a3/components/script/script_module.rs#L348, and our non-module <script> elements use Evaluate at https://github.com/servo/servo/blob/9cbebe29077efbb8b22631f27facc0b548faf5a3/components/script/dom/globalscope.rs#L2172

[12:48:46.0559] <tcampbell>
thanks

[12:49:17.0420] <jdm>
hmm, I guess gecko compiles non-inline non-module scripts off the main thread so the page can stay responsive even when evaluating a large script?

[12:49:37.0947] <jdm>
and just waits to do any more script stuff until the compilation is finished, then executes it?

[12:49:59.0063] <tcampbell>
roughly. the set of things that works now is nuanced.

[12:50:57.0423] <tcampbell>
In the new world, we will parse to a Stencil format without touching the GC or global state. The result of this has a fast translation to GC structures and then executes

[12:52:10.0745] <tcampbell>
so we can have self-contained parsing tasks. They can be off-thread/parallel. This will also form the basis of the bytecode caching going forward

[13:09:45.0324] <loganfsmyth>
would someone be able to help me understand the usecase for https://searchfox.org/mozilla-central/source/js/src/builtin/Promise.cpp#5083? I'm trying to understand which retval this is referring to and how the debugger ends up observing these values. 

[13:11:03.0912] <jorendorff>
loganfsmyth: Looks like an optimization.

[13:15:55.0121] <loganfsmyth>
yeah it seems that way. It sounds like the question is if you do like `promise.then(() => { /* ... */ })` and don't use the promise that is returned, whether to optimize out the result object?

[13:16:07.0446] <jorendorff>
Right

[13:16:22.0536] <loganfsmyth>
trying to get a sense of how you'd observe that object in devtools, as the comment implies

[13:17:11.0851] <jorendorff>
Hmm. Does devtools do things that are effectively the same as the async stacks option?

[13:18:08.0500] <loganfsmyth>
I'm not sure what you mean by that

[13:18:48.0389] <jorendorff>
loganfsmyth: well, this code also tests for async stacks being enabled

[13:19:32.0887] <jorendorff>
and I think the reason is, if this `.catch` or `.then` handler fails, the error and async stack are supposed to be logged as a warning

[13:20:13.0543] <jorendorff>
but we only get that warning (and/or have the async stack to attach) if we create the actual Promise object there? this is a guess but I don't see how else this would make sense

[13:30:15.0667] <loganfsmyth>
yeah that makes sense

[13:31:35.0482] <jorendorff>
loganfsmyth: OK, bottom line, I agree with your intution that it's not obvious how changing this will break anything, and maybe it should be killed

[13:32:26.0321] <loganfsmyth>
I _think_ for now I'd like to opt to leave it as-is, but it's definitely an interesting case to consider

[13:35:31.0133] <loganfsmyth>
I do think the conditions for it are slightly different from the other "should capture trace" check because it's about observability specifically for in-memory objects rather than about runtime behavior of the JS itself

[13:47:48.0387] <tcampbell>
loganfsmyth: while you are here.. I noticed that the devtools stack for something like:
```js
function F(fn) { fn(); }
function G() { F(function() { throw new Error; })}
G()
```
will show the anonymous function as `G`. Previously it was the `G/<` stuff. It seems like chrome just calls it anonymous and seems to use guessed names for only the less bizarre cases like `o.x = function() {}`.

[13:48:39.0859] <tcampbell>
I know you recently stripped off the trailing punctuation, but I'm not sure that `G` is a clearer name here

[13:49:37.0737] <tcampbell>
(I've realized I can't remove all the guessed name stuff because it is still powering things like `o.x = function() {}` which is of more than zero value in devtools, but isn't an ES2017 name)

[13:50:30.0919] <loganfsmyth>
I think we've actually been stripping the `/<` part for a long time, the reason I was asking about it the other week is because I think on the devtools side we're in agreement that showing the function as anonymous would be better

[13:50:49.0735] <tcampbell>
oh, is it just not landed yet?

[13:51:02.0374] <loganfsmyth>
https://bugzilla.mozilla.org/show_bug.cgi?id=1616196

[13:51:45.0571] <tcampbell>
ah, that makes sense. I had thought a change was landed and so was confused by behaviour. Cool

[13:52:05.0849] <loganfsmyth>
unless someone is particularly attached to the `/<` stuff showing up in stack traces, it seems like fully removing it could be an option

[13:52:20.0099] <jorendorff>
please fully remove it

[13:52:57.0433] <tcampbell>
I tried to figure out how to remove the `/` stuff without breaking `o.x` and that code is scary

[13:53:38.0532] <jorendorff>
haha - it's not that bad. at least it's all in one place!

[13:53:52.0553] <tcampbell>
one case we have that is really complex (and chrome does not) is 
```js
let M = (function() {
   ...
   return function() { ... }
})();
```

[13:53:55.0858] <loganfsmyth>
Do you think keeping the `o.x` behavior as is worth it?

[13:54:34.0109] <loganfsmyth>
I think for me I expect the stack trace to show the spec-defined inferred name, or treat it as anonymous

[13:55:06.0507] <tcampbell>
it is nice for old-school proto-chain methods
```
function F() {}
F.prototype.x = function() {};
``

[13:55:07.0928] <tcampbell>
 * it is nice for old-school proto-chain methods
```
function F() {}
F.prototype.x = function() {};
``
````

[13:55:10.0415] <tcampbell>
 * it is nice for old-school proto-chain methods
```
function F() {}
F.prototype.x = function() {};
```

[13:55:20.0470] <sfink>
is it expected that if you are using requestAnimationFrame and get an error in the 100th frame, the devtools debugger will show a stack with 100 instances of your rAf callback function (I guess since the handler triggers the next rAF, and something's doing fancy async stacks)?

[13:55:20.0694] <tcampbell>
 * it is nice for old-school proto-chain methods
```javascript
function F() {}
F.prototype.x = function() {};
```

[13:56:42.0330] <loganfsmyth>
tcampbell: fair enough, I guess it's mostly a question of how aggressive we are about it. I don't mind if the name is still a simple identifier, but once it goes beyond that I think it's just adding complexity

[13:57:06.0506] <loganfsmyth>
sfink: That doesn't sound like what I'd expect

[13:57:30.0865] <tcampbell>
I think dropping everything that isn't an lval-refence

[13:57:31.0218] <loganfsmyth>
or hmm, maybe it is actually

[13:57:34.0509] <tcampbell>
 * I think dropping everything that isn't an lval-reference

[13:57:44.0481] <tcampbell>
 * I think dropping everything that isn't an lval-reference is a good start.

[13:59:05.0642] <loganfsmyth>
sfink: I guess due to `requestAnimationFrame` being something you constantly call, you would end up with a pretty long async trace. I forget at the moment how long we allow the trace to get, there is some limit on it

[13:59:30.0984] <loganfsmyth>
> <@tcampbell:mozilla.org> I think dropping everything that isn't an lval-reference is a good start.

that makes sense to me

[14:00:12.0961] <sfink>
hm, I attempted to write a minimal test case, and it's only showing 2 frames. My actual case shows about 30.

[14:04:44.0733] <tcampbell>
I'm adding a function called `SetGroupForExposedLazyFunctions`. Something has gone very wrong in this design..

[14:06:39.0443] <tcampbell>
this is a terrible collision of TI and the frontend

[14:14:55.0686] <jorendorff>
good luck, we're all counting on you

[14:44:02.0439] <mgaudet>
confession: Have a preliminary patch which adds interpreter support for initializing, reading and writing private fields on classes (with the appropriate type errors thrown) using new opcodes. Working on ensuring baseline / blinterp work properly.

[14:44:09.0155] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:45:08.0935] <sfink>
mgaudet++

[14:46:36.0842] <mgaudet>
Lots of hard parts remain tho (early errors, evals, frozen objects... each of which is going to be a big hill) 

[14:46:51.0421] <mgaudet>
But: They are Tomorrow Matt's problem! 

[14:47:31.0219] <jorendorff>
wooo!

[14:48:15.0650] <sfink>
you're awfully abusive of this "Tomorrow Matt" person

[14:48:34.0134] <jorendorff>
it's ok, Tomorrow Matt deserves it

[15:24:21.0271] <jorendorff>
he's done some things in his past

[15:30:03.0193] <cfallin>
will have had done, perhaps? I am not well-versed on my non-linear-timeline verb conjugation


2020-05-20
[01:00:26.0709] <nbp>
> <@loganfsmyth:mozilla.org> I think we've actually been stripping the `/<` part for a long time, the reason I was asking about it the other week is because I think on the devtools side we're in agreement that showing the function as anonymous would be better

would `name.(anonymous)` be simpler and less issues than simply removing it?

[01:01:00.0806] <nbp>
Where `name` would be the name of the outer function.

[03:17:04.0399] <Waldo>
jonco: If you're around quickly before I drop off, https://phabricator.services.mozilla.com/D75274 could stand a look to verify I'm not off my rocker.

[03:25:09.0797] <Ms2ger [~half-time dedication]>
Waldo: you definitely are :)

[03:41:01.0504] <jonco>
Waldo: yes, TraceListVisitor was passing nullptr because it just wanted to get the offsets 

[03:41:45.0042] <jonco>
I'll add that assertion

[03:48:21.0696] <yulia>
jonco i am looking at top level await

[03:48:28.0025] <yulia>
do you know when the last time our module code was updated?

[03:49:12.0145] <yulia>
or when the last major project on modules was

[03:49:40.0675] <jonco>
yulia: last major thing was support for dynamic include

[03:50:09.0545] <yulia>
ok, will take a look

[03:50:26.0474] <jonco>
yulia: looks like Jan 2019

[03:50:45.0618] <jonco>
bug 1342012

[03:50:46.0998] <botzilla>
https://bugzil.la/1342012 ‚Äî RESOLVED (jonco) ‚Äî Implement the dynamic import() proposal

[03:52:16.0967] <evilpie>
When we enable SharedArrayBuffer for a specific process because of COEP, shouldn't we also disable othe rspectre mitigations at the same time?

[03:52:29.0727] <evilpie>
 * When we enable SharedArrayBuffer for a specific process because of COEP, shouldn't we also disable other Spectre mitigations at the same time?

[03:57:51.0795] <littledan>
yulia: To understand how to implement top-level await in a browser, it's important to look at the HTML side, at https://github.com/whatwg/html/pull/4352

[03:58:11.0777] <littledan>
Ms2ger [~half-time dedication] and I are here to answer any questions about this feature

[04:11:41.0661] <yulia>
ok thank you littledan 

[04:14:03.0546] <yulia>
littledan: wrt the spec side -- there is a missing piece that will need to be filled in

[04:14:19.0099] <yulia>
(in the patch that I made)

[04:15:13.0825] <yulia>
also, is there a rendered version of this pr?

[04:17:08.0321] <littledan>
yulia: Yes, you can see various rendered versions linked from the bottom of the description in the top post

[04:17:33.0518] <yulia>
oh i understand, thanks

[05:14:34.0642] <yulia>
jonco it looks like we are a little behind the spec in terms of naming and certain constructs. for example https://github.com/linclark/ecma262/commit/4f13bc90439f7199a47861a15197b40db55222f5 -- how worth while is it to bring everything up to date?

[05:15:28.0639] <yulia>
I was thinking of this as a step before going ahead with top level await, mostly to get more comfortable with this part of the code

[05:18:21.0627] <jonco>
yulia: sounds like a good idea

[05:18:39.0145] <jonco>
I tried to name things the same as the spec where possible

[05:19:17.0217] <yulia>
what i can do is add commit hashes where it isn't trivial to updatee

[05:49:30.0751] <nbp>
jorendorff: starting tomorrow, I would be on Holiday/PTO until the end of next week, so I would not join for triage meetings, nor jsparagus meetings.

[05:50:42.0524] <jorendorff>
nbp: ok, thanks for the ping

[05:50:52.0531] <jorendorff>
have a good holiday!

[06:08:55.0833] <yulia>
does the update script not update checked in tests?

[06:09:03.0391] <yulia>
for test262 tests

[06:51:09.0204] <jorendorff>
yulia: Are you running the update script?

[06:53:35.0983] <jorendorff>
yulia: I remember having to do `hg addremove` the whole directory

[06:54:10.0493] <jorendorff>
yulia: but it does regenerate them all

[06:55:38.0375] <yulia>
jorendorff: sorry i was wrong about it, turns out test262 is out of date: https://github.com/tc39/test262/blob/master/test/language/module-code/instn-once.js

[06:55:48.0833] <yulia>
i didn't update here sorry about that

[06:56:02.0176] <iain>
I was going to say, I a couple of times for 

[06:56:11.0882] <yulia>
minor stuff, naming, was just surprised and dug into it

[06:56:18.0929] <iain>
 * I was going to say, I ran the script for regexps a couple of times and it was fine

[06:56:33.0741] <yulia>
i feel like a lot more of this should be automated...

[06:56:59.0043] <yulia>
not on our side btw

[07:45:03.0263] <cybai>
Just saw this question on Twitter üëÄ 
https://twitter.com/rauschma/status/1263117595416330240

[07:46:47.0052] <jorendorff>
lth: Do you have a moment to talk 1h15m from now? (not urgent, another day would be fine)

[07:48:43.0916] <jandem>
confession: optimizing more Math natives in CacheIR and Warp. Baseline ICs now optimize them like Ion

[07:48:45.0963] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[08:30:49.0366] <froydnj>
sfink: ah, jemalloc, thank you for pointing that out

[08:36:08.0926] <sfink>
yeah, we really ought to flip the default for the standalone packages

[08:40:32.0725] <mgaudet>
Ooof. Yeah, didn't expect that

[08:41:04.0129] <sfink>
it's incredibly cryptic and seemingly unrelated to the observed behavior

[08:41:23.0169] <sfink>
especially since once you find it, you can't believe we would release something that defaults to broken ;-/

[08:46:21.0447] <@allstarschh|afk>
joncosfink : will join in a few minutes, my zoom keeps crashing

[09:06:46.0094] <loganfsmyth>
> <@nbp:mozilla.org> would `name.(anonymous)` be simpler and less issues than simply removing it?

To me that looks like it's saying it's a property of a binding named `name`, not a function nested inside of `name`. I personally think that trying to describe a function based on its parent nodes just isn't very intuitive. I suppose the other question why the current `Error` `.stack` doesn't include column numbers, since that's really the only thing stopping the error trace from pointing directly at the function anyway

[09:09:12.0949] <nbp>
How would you describe "nested inside of", CSS should have a syntax for that, maybe we could get some inspiration.

[09:12:29.0804] <Ms2ger [~half-time dedication]>
`foo bar` in CSS, or maybe `foo > bar`

[09:13:48.0416] <jorendorff>
I kind of like that `>` with a space ... I think we do something like that for eval code?

[09:13:55.0996] <jorendorff>
in stacks only, probably

[09:14:09.0275] <jorendorff>
vague recollection. it's for the filename, not a function name

[09:16:50.0956] <loganfsmyth>
For what it's worth I also hate the `>` in eval filenames :P

[09:19:23.0882] <jorendorff>
hahahaha

[09:21:21.0836] <loganfsmyth>
it just gets confusing because then whenever we process a URL we need to check whether the source was something eval-like and then ignore the URL in that case

[09:21:58.0135] <jorendorff>
well, but what should the URL be instead, for eval code?

[09:22:09.0627] <loganfsmyth>
otherwise we end up trying to resolve a sourcemap relative to `foo.js > eval line 5` or something

[09:22:19.0051] <loganfsmyth>
the URL should be empty

[09:23:36.0080] <loganfsmyth>
`//# sourceURL=` comments already exist for people that want to give an eval string a URL

[09:26:40.0154] <loganfsmyth>
giving the `eval` Source a URL based on the location of the eval always surprised me because that location may well have nothing to do with the source itself unless we're talking about an eval that is directly passed a string literal, but most of the time that happens it's an small snippet of code, or it's something like Webpack that uses eval explicitly because then it can use `//#` comments on the evalled snippet

[09:32:19.0792] <nbp>
Having only `(anonymous)` as a function name would be a regression from my point of view, as we are loosing context. This is only for reporting errors, so could we report "being an inner function of another" be reported differently, such as on another line of context?

[09:34:21.0414] <jorendorff>
loganfsmyth: ok, this is coming back to me slowly - we have other properties on the Source object that we can use to convey these details, it's not like `.url` is all we got

[09:34:54.0802] <nbp>
oh, it seems that we already do that in the debugger.

[09:37:24.0129] <sfink>
bug 1639404 - C++ weirdness

[09:37:25.0452] <botzilla>
https://bugzil.la/1639404 ‚Äî NEW (nobody) ‚Äî error: no matching member function for call to 'rootLists' when trying to define something like AutoJSContext

[09:41:49.0944] <loganfsmyth>
> <@jorendorff:mozilla.org> loganfsmyth: ok, this is coming back to me slowly - we have other properties on the Source object that we can use to convey these details, it's not like `.url` is all we got

the Source knows its `introductionScript` so we can get the parent URL and line number at least, but I also don't think it really shows up in many places anyway since the devtools ignores the URL most of the time for eval. Any time we don't is probably a bug, so the only place I'd expect the devtools UI to still surface it is in stack traces

[09:43:52.0889] <loganfsmyth>
> <@nbp:mozilla.org> oh, it seems that we already do that in the debugger.

the devtools UI currently surfaces whatever name the SpiderMonkey gives us, but since the `/<` is hard too complex to really present to users, we currently trim stuff off, and I'd expect us to at some point change to showing `(anonymous)`. You're right that it's technically a loss of information, but I think you're overestimating how useful "being an inner function of another" is as a signal for people reading stack traces

[09:45:15.0503] <nbp>
The console does report the outer function, what is present in the Console sounds perfect to me.

[09:45:49.0810] <jorendorff>
If a user wants to know something, devtools can present it, we mainly need to stop making it harder

[09:46:44.0615] <loganfsmyth>
> <@nbp:mozilla.org> The console does report the outer function, what is present in the Console sounds perfect to me.

could you maybe post a screenshot? I'm not quite sure which part of the console you're referring to

[09:47:50.0917] <nbp>
```js
$ function foo(a) { "use strict"; return function () { return a.b.c.d; } }
undefined
$ var x = foo(1)
undefined
$ x()
Uncaught TypeError: can't access property "c", a.b is undefined
    foo debugger eval code:1
    <anonymous> debugger eval code:1
```

[09:49:49.0647] <nbp>
By console, I mean this one: https://developer.mozilla.org/en-US/docs/Tools/Web_Console/Opening_the_Web_Console

[09:56:08.0632] <loganfsmyth>
@nbp If you look at `err.stack` there, you can see that SpiderMonkey's trace has `foo/<@debugger eval code:4:5` with `foo/<` being the indication that it is "a function nested inside 'foo'". The issue is that what the console shows ("foo") is wrong because it makes it seem like it's the _outer_ "foo" in the trace, not the anonymous one inside, but we don't want to show "foo/<" because it's super obtuse and I don't see the average user being able to make any sense of it

[09:57:01.0508] <nbp>
I agree, `foo` should be mentioned, but not at the same indentation depth as the anonymous function.

[09:58:38.0180] <loganfsmyth>
I would argue that a given function outer could have any number nested anonymous functions, and the name of the parent function may or may not have anything to do with the name of the inner function, so line/column numbers are the only useful way to refer to a specific function that doesn't have a well-specified name

[09:58:48.0825] <loganfsmyth>
 * I would argue that a given outer function could have any number nested anonymous functions, and the name of the parent function may or may not have anything to do with the name of the inner function, so line/column numbers are the only useful way to refer to a specific function that doesn't have a well-specified name

[10:01:07.0287] <nbp>
I would argue that line and column are not content which is in any way familliar with the author of the javascript code, and that the error message should refer to the code with the same wording that the user know. line & column being shortcuts to visit the interesting place when found from the stack trace, not to understand the stack trace.

[10:02:13.0467] <nbp>
If line & column were to understand the stack trace, then the user would do some back-and-forth between the Web Console and the Debugger/Editor to understand the error message printed.

[10:03:37.0641] <loganfsmyth>
I think having to look at the original code to fully follow a stack trace is absolutely expected anyway, how often is someone really looking at an error without having the code that produced the error alongside it?

[10:04:24.0391] <sfink>
when it's posted in a pastebin or stackoverflow question

[10:05:11.0637] <loganfsmyth>
if you have no idea what the original code is, how is `foo/<` any more useful than `(anonymous)`?

[10:05:45.0192] <nbp>
It tells you that this is within `foo`. `<anonymous>` alone is highly ambiguous.

[10:06:35.0088] <sfink>
I wonder if there's a way to do just "anonymous somewhere foo", without trying to make it a precise description. eg "(within foo)".

[10:06:36.0743] <nbp>
Also, if you have no idea what the original code is, then a function name will maybe give you a hint. `add_5/(anonymous)`

[10:07:22.0990] <sfink>
 * I wonder if there's a way to do just "anonymous somewhere within foo", without trying to make it a precise description. eg "(within foo)".

[10:07:46.0886] <jorendorff>
y'all

[10:15:05.0436] <loganfsmyth>
yeah probably time for a breather haha. Seems like we're just gonna disagree. I see what you're going for nbp , I do. For me, if having a name for debugability is important, it should be up to the user to write their code in a style that explicitly names functions. I don't think SpiderMonkey should attempt to take on that responsibility. Happy to leave there topic for now though

[10:15:42.0507] <loganfsmyth>
 * yeah probably time for a breather haha. Seems like we're just gonna disagree. I see what you're going for nbp , I do. For me, if having a name for debugability is important, it should be up to the user to write their code in a style that explicitly names functions. I don't think SpiderMonkey should attempt to take on that responsibility. Happy to leave the topic there for now though

[10:18:38.0797] <nbp>
I would add one last argument which is, we are in a competition for having the best developer experience, not in a competition against the user for having the best written source.

[10:19:11.0555] <nbp>
So definitely, we should have column numbers!

[12:58:33.0736] <lth>
jorendorff: i'm out until monday

[13:00:39.0483] <jorendorff>
lth: ok, I was only going to ask questions about Atomics.asyncWait and I can wait. it won't block me. har har.

[13:02:03.0370] <lth>
(that was low)

[14:08:25.0505] <Waldo>
lth: Why the disdain?  You should be more relaxed about these things.

[14:44:20.0903] <mgaudet>
confession: Writing detailed test cases intended to stress and reveal any flaws in the inline cache bits I did has revealed a problem which shows up in the interpreter instead. Chasing that down, but out of steam for the day. 

[14:44:26.0751] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:45:02.0676] <jorendorff>
confession: thought i was going to get a lot done today, but pulled a loose thread on an ES proposal instead

[16:38:24.0825] <Waldo>
confession: Making progress through the pipe-to state graph.

[16:39:00.0641] <Waldo>
confession: Wrote some patches to fix warnings in NSS as a palate cleanser.


2020-05-21
[03:04:23.0964] <froydnj>
a "palate cleanser"?

[04:30:00.0687] <yulia>
littledan: jandem i have been speaking with you both separately about https://github.com/syg/proposal-rm-builtin-subclassing/issues/1, and it would be more efficient if I just put you in touch directly. The proposed mitigation, using `this.constructor[@@species]` to only determine `new.target`, might not help with our performance cliffs or security issues (as mentioned by jan), but the issue might night have been communicated clearly. littledan you wanna take it from here?

[04:31:32.0668] <littledan>
Yeah, so my thought is, if instead of doing Construct(speciesConstructor), we do Construct(originalClass, <args>, speciesConstructor) (as new.target), and then take advantage of internal slots (like [[OriginalFlags]]) and algorithms (like RegExpBuiltinExec instead of the exec method), then we'd solve most of the performance and security issues

[04:32:13.0786] <littledan>
I think I might've explained this idea in an ambiguous way, or wondering if I'm missing something about where exactly these issues come up

[04:33:54.0311] <littledan>
(if it's a day off some places, I'm fine chatting about this later)

[04:35:09.0566] <jandem>
littledan: my main concern is that it still keeps the @@species lookup itself, is that right? that's where we had security issues in the past (define a getter property on the prototype chain, your array.slice call now has arbitrary side-effects)

[04:35:33.0232] <littledan>
yes, it does leave those in place

[04:35:52.0907] <littledan>
at least what you have after that is an original array, but yeah, I can see how that's still problematic

[04:36:44.0432] <jandem>
true, it would fix the always-an-array part

[04:38:18.0602] <jandem>
it'd be good to double check with the v8 folks if the complexity/security issues they faced were also around the @@species lookup or if it was around the Construct call

[04:38:42.0008] <jandem>
 * it'd be good to double check with the v8 folks whether the complexity/security issues they faced were also around the @@species lookup or if it was around the Construct call

[04:39:38.0259] <littledan>
so, when I was doing the original implementation, I felt like there was performance cost around the @@species lookup (and had to make a "protector" to avoid the normal gets), but the security issues I remember seeing were more around doing things with the Array or TypedArray afterwards

[04:40:05.0332] <littledan>
however, the code has been rewritten multiple times since then, and I think others would have a more accurate perspective on how that's all been going

[04:41:00.0689] <littledan>
I guess my suggestion might be biased by the particular memory I had of a subset of issues...

[04:41:48.0262] <jandem>
ah that makes sense

[04:48:00.0732] <jandem>
(I'm off today but I'll look at the code more tomorrow)

[05:28:06.0555] <littledan>
(FWIW looking through past V8 bugs, I find both kinds of issues, from side effects in doing the two Get's at all, as well as processing the Array or TypedArray afterwards)

[09:05:52.0659] <syg>
ah i missed some conversation here, reading backlog

[09:08:37.0896] <syg>
having to keep the @@species protector around in V8 is pretty unfortunate for both the performance cliff and the complexity, i think

[09:09:35.0991] <syg>
the main issue with the protector is that it's this monotonic bit that penalizes the entire page that gets tripped by old shims

[09:09:52.0502] <syg>
there might still be significant wins in the complexity department if the @@species paths are simpler somehow

[09:10:01.0603] <syg>
but would have to dig deeper for that

[10:03:45.0648] <jorendorff>
tcampbell: I'm going to move this meeting to next week, way too many little things in flight right now

[10:03:58.0083] <tcampbell>
works for me

[10:04:22.0727] <jorendorff>
ok, bumped to next Thursday

[10:49:50.0680] <jknr>
hello hello there! Anyone who can remember whether Firefox ever had fuzzy timers? https://bugzilla.mozilla.org/show_bug.cgi?id=1425462 suggests it wasnt added until version 60. However this paper seems to hint towards that ff 59 does have jittered timers https://www.usenix.org/system/files/sec19fall_shusterman_prepub.pdf cheers :)

[10:50:35.0883] <jknr>
 * hello hello there! Anyone who can remember whether Firefox 59 ever had fuzzy timers? https://bugzilla.mozilla.org/show_bug.cgi?id=1425462 suggests it wasnt added until version 60. However this paper seems to hint towards that ff 59 does have jittered timers https://www.usenix.org/system/files/sec19fall_shusterman_prepub.pdf cheers :)

[10:57:02.0893] <jknr>
I guess strictly logically speaking this quote: " Similarly, as
this work demonstrates, timer-based defenses that reduce the
timer frequency or add jitter are not effective" only necessarily need to fulfill one of lower precision (true) and jitter (seemingly false)

[10:58:06.0992] <jorendorff>
Hmm. Don't know, and the first person I would think to ask happens to be on vacation

[10:59:37.0004] <jorendorff>
make that the first two people

[11:16:45.0952] <loganfsmyth>
This may be mean of me to even ask, but is there anyone that would be willing/able to talk with me about SavedFrame objects and how they work now that Jim has moved on? jorendorff you I assume? anyone else?

[11:17:19.0241] <jorendorff>
it's me

[11:17:26.0803] <jorendorff>
loganfsmyth: apologies in advance

[11:17:39.0087] <loganfsmyth>
yeah that part I figured hahah

[11:21:44.0760] <Waldo>
> <@froydnj:mozilla.org> a "palate cleanser"?

Fixing warnings requires rather different brain cells from fixing other bugs.  üôÇ

[11:41:30.0324] <jorendorff>
loganfsmyth: i'm in the same situation today as I happen to need a review for a patch in Debugger.Frame

[11:43:33.0516] <jorendorff>
caroline: how would you like to learn about a whole new exciting area of the JS engine? ‚ú® the debugger ‚ú®

[11:44:01.0634] <Waldo>
lol

[11:46:02.0246] <jorendorff>
Debugger's core competencies:
- revealing things that are otherwise unobservablecache invalidation, and extremely complex reference counting

[11:46:16.0544] <jorendorff>
 * Debugger's core competencies:
- revealing things that are otherwise unobservable
- cache invalidation
- extremely complex reference counting
- weak maps

[11:46:48.0772] <jorendorff>
 * Debugger's core competencies:
- revealing things that are otherwise unobservable
- cache invalidation
- extremely complex reference counting
- finding corner cases of how weak maps work

[11:47:14.0815] <Waldo>
* making a royal pain of itself üòâ

[11:48:32.0338] <caroline>
jorendorff:  sure! 

[12:03:36.0438] <tcampbell>
jorendorff: I'm trying to wrap my head around these function prototypes still..

[12:03:44.0844] <jorendorff>
caroline: Probably makes more sense for me to ask Waldo to do it.

[12:03:50.0550] <jorendorff>
`Debugger` is not for everyone, but I think it's fun and would you believe *there is documentation for it*

[12:04:03.0878] <jorendorff>
 * `Debugger` is not everyone's idea of a good time, but I think it's fun and would you believe _there is documentation for it_

[12:04:14.0443] <tcampbell>
whenever we clone, we need to get the new prototype for the realm anyways

[12:04:16.0618] <Waldo>
Oh look at the time

[12:04:29.0933] <jorendorff>
tcampbell: yes

[12:04:40.0124] <jorendorff>
tcampbell: this is w.r.t. the other bug, I assume?

[12:05:06.0071] <tcampbell>
generator stuff, yeah

[12:05:55.0582] <tcampbell>
I guess I'm lost in the maze of, `NewFunction` picks a prototype for us, but also we sometimes override it

[12:06:08.0560] <tcampbell>
is the default always %FunctionPrototype% and that is problem?

[12:06:33.0497] <caroline>
ü§£ fair. Waldo seems very excited about it soooo 

[12:06:53.0428] <caroline>
Wouldnt want to take that away from him

[12:06:54.0825] <jorendorff>
tcampbell: right, because all functions have `JSFunction::class_` or whatever, that default is wrong for anything but the usual kind of function

[12:06:55.0206] <mgaudet>
oh, are we gonna have an impromptu teaching session about the debugger, 'cause i'd listen in on that if it's not already happened

[12:07:11.0730] <jorendorff>
tcampbell: hence lots of places using GetFunctionPrototype

[12:07:26.0184] <tcampbell>
ah

[12:08:10.0634] <tcampbell>
I was thinking from your patch that self-hosted realm just had null prototype (which didn't seem the worst) , but they get %FunctionPrototype% actually?

[12:08:44.0401] <tcampbell>
/me wishes there was a growing doc comment explaining each way in which self-hosting is not ecmascript

[12:10:26.0949] <jorendorff>
tcampbell: my patch was meant to change it to have null prototype, though now that you mention it, it's possible it does something else. anyway there _is_ a whole separate hack w.r.t. globals in the self-hosting realm, I believe

[12:10:31.0208] <jorendorff>
not touched by this stack

[12:10:38.0292] <Waldo>
The typical incantation for allocating functions is going to use `%FunctionPrototype%`, and it's not always simple to cleanly change _only that_ about allocating a function.

[12:11:00.0916] <Waldo>
> * <@tcampbell:mozilla.org> wishes there was a growing doc comment explaining each way in which self-hosting is not ecmascript

I would subscribe to this newsletter, and/or contribute to it.

[12:12:11.0150] <jorendorff>
tcampbell: https://searchfox.org/mozilla-central/source/js/src/vm/GlobalObject.cpp#333-335 is the whole 'nother hack

[12:12:49.0828] <tcampbell>
ha

[12:12:57.0828] <jorendorff>
like ... sure

[12:13:31.0821] <Waldo>
ü§Æ

[12:18:35.0879] <mgaudet>
jorendorff: Would you have time today to talk a little bit about your thoughts on trying to implement early-errors for private fields? That's the dominant cause of test262 failures right now (and will be complicated enough methinks that talking about it ahead of time makes sense). 

If you wanted to wait until you'd reviewed the initial stack, I'd also be OK with that. I have other things that I'm going need to work on as well.

[12:19:35.0486] <jorendorff>
ugggggh

[12:19:39.0840] <jorendorff>
sorry

[12:19:45.0761] <mgaudet>
Hahaha. 

[12:19:53.0770] <jorendorff>
um, i really do want to talk about this, let's se

[12:19:55.0305] <jorendorff>
 * um, i really do want to talk about this, let's see

[12:20:15.0097] <mgaudet>
I'm ok with delaying for a bit, and w.r.t reviews spreading the load a bit

[12:20:23.0482] <mgaudet>
(maybe toss some of it at Yulia?) 

[12:22:55.0079] <jorendorff>
ok, leave the reviews where they are for now, and let's talk tomorrow or Tuesday

[12:23:54.0307] <jorendorff>
tomorrow's good

[12:24:43.0595] <mgaudet>
üëçÔ∏è (Did you want me to rope anyone else in) 

[12:26:15.0486] <jorendorff>
Sure, make yulia optional?

[12:26:49.0219] <mgaudet>
K. I'll try to coordinate timezone then. Will prep invite

[12:29:09.0128] <jorendorff>
Does anyone remember the browser test that checks that all the public builtins are exactly the expected ones/

[12:29:12.0205] <jorendorff>
 * Does anyone remember the browser test that checks that all the public builtins are exactly the expected ones?

[12:29:25.0174] <jorendorff>
a.k.a. the one i always fail

[12:29:43.0899] <Waldo>
There are a few of them, but https://searchfox.org/mozilla-central/source/dom/tests/mochitest/general/test_interfaces.js maybe?

[12:29:59.0700] <Waldo>
I think there are separate tests/lists for normal page, workers, and...whatever the third one is.

[12:30:00.0200] <jorendorff>
that's the one

[12:30:55.0237] <Waldo>
https://phabricator.services.mozilla.com/D66777 touched three separate lists.

[12:30:55.0256] <mgaudet>
There's also this one (test_xrayToJS) which bit Iain on landing regexps with a new property -- may or may not be applicable

[12:44:03.0699] <evilpie>
Now that everyone is looking thinking about the debugger I have a question as well

[12:44:12.0076] <jorendorff>
shoot

[12:44:41.0981] <evilpie>
can referent be a CCW or not? https://searchfox.org/mozilla-central/source/js/src/debugger/Object.cpp#1698

[12:44:54.0125] <evilpie>
it seems like sometime we assume it's a straight object and sometimes we try to unwrap

[12:44:58.0682] <evilpie>
or even enter realm?

[12:45:19.0411] <jorendorff>
evilpie: A referent can be a CCW.

[12:45:26.0098] <evilpie>
the level of abstractions for this code are somewhat surprising

[12:46:01.0273] <jorendorff>
Yes, it's surprising. The idea is, when debugging realm X, try to show what the objects in realm X actually look like, from realm X's perspective

[12:46:44.0075] <evilpie>
there are a lot of functions with a single caller like DebuggerObject::displayName

[12:47:26.0766] <evilpie>
I think if we enter the realm of the referent we can replace GetObjectClassName, which also handles proxies and wrappers, with getClass->name

[12:48:37.0144] <evilpie>
(The real goal here is to finally remove the non standard BaseProxyHandler::className trap)

[12:49:34.0625] <jorendorff>
That makes sense, actually ‚Äî I think this API was designed back when class names existed in the spec

[12:49:51.0215] <jorendorff>
if the concept is going away from spidermonkey entirely, the debugger thing can be best-effort

[12:50:51.0273] <jorendorff>
unwrapping wrappers to get information is ok, it's just not done silently

[12:50:51.0574] <evilpie>
:actually we can now fix JSClass::name to be better again instead of using "Object", because it's unboservable now üéâ

[12:50:59.0159] <jorendorff>
for everything all the time

[12:52:02.0350] <jorendorff>
in cases like this, it can be good to ask loganfsmyth what the debugger _wants_ to see ... or if the thing is even used

[12:52:52.0896] <jorendorff>
if it's not used, kill it for sure; but even if it's used, maybe people don't want to see Object all the time in the devtools

[13:00:21.0528] <evilpie>
Thanks. Removing the deprecated usage of class name would of course be even better

[13:30:54.0402] <loganfsmyth>
not totally clear what the question is here, but happy to answer debugger questions wherever I can

[13:33:14.0846] <jorendorff>
loganfsmyth: What is `Debugger.Object.get className` used for? How bad is it if we want to delete it?

[13:35:05.0555] <jorendorff>
evilpie: oh by the way ... would you happen to know where someone should start looking to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1639565 ?

[13:35:38.0077] <evilpie>
jorendorff: probably good startingpoint is to break on js::ErrorReportBuilder::init

[13:35:56.0330] <evilpie>
I thought I had fixed most of these issues actually

[13:36:15.0690] <evilpie>
but maybe this comes from XPConnect or promises

[13:38:54.0617] <jorendorff>
evilpie: can you give me an example of the kind of bug you fixed?

[13:40:05.0844] <evilpie>
I think the biggest improvement was probably https://bugzilla.mozilla.org/show_bug.cgi?id=1623226

[13:40:33.0335] <evilpie>
which made us use to exception stack for getting filenames and line-numbers if those are otherwise unavailable

[13:43:40.0051] <evilpie>
jorendorff: I will look into it

[13:44:04.0349] <evilpie>
unless it's really hard to reproduce. I am currently building a browser to check

[13:44:37.0372] <jorendorff>
evilpie: Thank you.

[13:50:21.0137] <loganfsmyth>
`getClassName` is used pretty often to differentiate things like `obj.class === "CSSImportRule"`, but maybe we can explore alternative ways to do that like if we could directly say `obj.isNativeIntance(CSSImportRule)`?

[14:09:48.0764] <jorendorff>
loganfsmyth:  Thanks, that all makes sense. Tom might have more specific changes in mind, but I don't know.

[14:14:19.0912] <tcampbell>
/me is in the StructuredClone code and realized he made poor decisions today

[14:14:56.0001] <avandolder>
Just checking my understanding, for GenericCreateConstructor, the length template argument is the largest number of arguments the constructor takes, not including the case where it takes variable arguments right?

[14:16:57.0125] <tcampbell>
avandolder: hah. You've run into the difference between `nargs` and `fun.length`..

[14:17:04.0067] <jorendorff>
yes

[14:17:09.0943] <jorendorff>
i should have mentioned that

[14:17:23.0754] <jorendorff>
It is destined for this field https://searchfox.org/mozilla-central/source/js/src/vm/JSFunction.h#43-47

[14:18:03.0055] <tcampbell>
ah, that is a succinct explanation of it

[14:18:37.0973] <tcampbell>
`nargs` correspond to minimum stack arguments in the VM, while `fun.length` is defined by the spec and has no real engine use

[14:18:38.0365] <jorendorff>
tcampbell avandolder: but I don't know why it matters for native functions

[14:18:44.0180] <tcampbell>
 * `nargs` correspond to minimum stack arguments in the VM, while `fun.length` is defined by the spec and has no real engine use, but is exposed to users

[14:19:11.0224] <tcampbell>
good point. we just get a vp/argc for them..

[14:19:33.0183] <avandolder>
Alright. with that I think I have the Iterator global constructor working then. Now to just add all the methods...

[14:19:41.0894] <jorendorff>
tcampbell: the thought that some JSNative somewhere expects to get at least `nargs` slots and then 

[14:19:54.0795] <jorendorff>
 * tcampbell: the thought that some JSNative somewhere expects to get at least `nargs` slots and then uses for its own purposes makes my skin crawl

[14:20:00.0490] <tcampbell>
https://searchfox.org/mozilla-central/source/js/src/vm/JSFunction.cpp#1255-1258

[14:20:07.0508] <jorendorff>
 * tcampbell: the thought that some JSNative somewhere expects to get at least `nargs` slots and then uses them for its own purposes makes my skin crawl

[14:20:15.0570] <tcampbell>
it is the fallback value for `fun.length`

[14:20:40.0526] <tcampbell>
since we normally only store that in script that a native does not have

[14:20:41.0731] <jorendorff>
wtf

[14:20:52.0473] <tcampbell>
avandolder: guess you get to update the comment too

[14:21:05.0705] <jorendorff>
please do so! good grief

[14:21:41.0479] <jorendorff>
It appears length and nargs mean exactly the same thing for JSNatives (functions exposed to JS but implemented in C++)

[14:23:52.0709] <tcampbell>
being we are bad people, a "native" function means C++, while a "native" object means not C++

[14:26:34.0299] <avandolder>
Makes sense

[14:36:36.0055] <mgaudet>
confession: An act of violence against the codebase allows implemnting one more strange private field semantics... though, less violence than I foresaw 

[14:36:40.0819] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:36:47.0208] <mgaudet>
 * confession: An act of violence against the codebase allows implemnting one more strange private field semantic... though, less violence than I foresaw 

[14:43:16.0766] <tcampbell>
confession: Got nerd-sniped by a MIPS patch ended up changing Value.h and StructuredCloning..

[14:43:50.0488] <evilpie>
tcampbell: btw I think we should finally think about canonicalizing NaNs at the Value::setDouble boundary 

[14:44:10.0577] <evilpie>
it's a huge footgun

[14:44:15.0112] <tcampbell>
yeah, I saw that even 10 years ago, it was considered to be only 1% on sunspider

[14:44:30.0069] <evilpie>
dom bindings use JS::Value::set(JS_NumberValue()) explicitly anyway

[14:44:53.0781] <tcampbell>
if you can get Jan on board, I'm fine with changing it

[14:53:48.0586] <evilpie>
tcampbell: you know about function flags, can any of these even change: https://searchfox.org/mozilla-central/source/js/src/jit/MIR.h#2627 ?

[14:54:22.0555] <evilpie>
the jit entry one I guess?

[14:57:44.0319] <tcampbell>
evilpie: we should just snapshot the flags_ word..

[14:57:53.0414] <tcampbell>
would be easier to read

[14:58:25.0323] <evilpie>
yeah, I think that is a good idea

[14:58:33.0232] <tcampbell>
I think those are all immutable once they are exposed to script

[14:58:40.0032] <evilpie>
a lof of these flags aren't even used though

[14:59:52.0302] <tcampbell>
snapshotting `FunctionFlags` makes sense, and then only expose accessors for what JIT needs makes sense

[15:01:05.0907] <evilpie>
nice

[15:02:20.0245] <tcampbell>
getting rid off all these bit field copies helps a lot with sanity

[15:19:29.0774] <tcampbell>
interesting.. our NaN representation is user-visible to `DataView.setFloat64` .. fun

[16:02:36.0350] <caroline>
confession: Got a prototype working that creates a CacheIR health report for a script üòÅ


2020-05-22
[20:14:24.0684] <djrenren>
Hey folks, I'm working with some other researchers on some changes in Spidermonkey (specifically in Ion) and am having trouble getting a good perf trace when running raptor tests. Any tips?

[20:14:55.0177] <djrenren>
Specifically I'm worried about the performance of some native functions not the JIT'd JS 

[23:45:40.0934] <wingo>
perf like linux perf?

[03:42:19.0644] <wulf>
Hello!

[03:43:05.0307] <wulf>
https://github.com/mozilla/python-spidermonkey/ is deprecated. What else should I use to embed javascript in python?

[05:10:05.0590] <yulia>
is monday a US holiday?

[05:42:40.0822] <yulia>
oh no the early errors meeting got moved

[05:42:57.0938] <yulia>
mgaudet: will there be a chance it could be earlier?

[06:13:09.0236] <mgaudet>
yulia: hi, this is my fault. I promised to do childcare in that original slot, and forgot. 

[06:13:39.0509] <mgaudet>
yulia: I could potentially do it in the next hour (8am local), if you were free and Jason was too. 

[06:33:58.0940] <yulia>
mgaudet: jorendorff next hour would work... I just asked jason

[06:34:53.0221] <mgaudet>
Ok! If it works for both of you, let‚Äôs do it. 

[06:36:56.0733] <jorendorff>
thanks matt

[06:38:06.0520] <jorendorff>
mconca: My notes from our Wednesday meeting say that I was supposed to file bugs to ship two Stage 3 features, but it says "Promise.any" and "the other thing"

[06:38:34.0380] <jorendorff>
mconca: Promise.any is https://bugzilla.mozilla.org/show_bug.cgi?id=1599769

[06:38:51.0101] <jorendorff>
Do you remember what the other thing is? yulia?

[06:39:42.0231] <jorendorff>
Found it, it was `??=` https://bugzilla.mozilla.org/show_bug.cgi?id=1639591

[06:42:39.0685] <yulia>
there was another i think... maybe i am remembering wrong, let me check my notes

[06:43:41.0932] <yulia>
oh no, that is right

[06:43:49.0798] <yulia>
the only other one is weakrefs, do we need to do anything there?

[06:43:59.0480] <yulia>
i guess i should post about it for tc39 before tomorrow

[06:44:12.0878] <yulia>
to see if we need to split out cleanupSome

[06:44:25.0662] <jorendorff>
oh, weakrefs aren't going into FF78 regardless

[06:44:31.0835] <yulia>
right right

[06:44:37.0720] <yulia>
i forgot, that should be 79

[06:44:53.0800] <jorendorff>
but yes, it would help to figure out how TC39 is going to stage it

[06:45:10.0946] <yulia>
ok, i will make that proposal

[07:22:36.0773] <iain>
confession: Sent intent-to-ship for named captures

[07:22:39.0205] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[10:39:50.0354] <avandolder>
jorendorff: the proposed form of Iterator.from seems to involve adding a new [[Iterated]] internal slot on to the returned iterator. Can that be in self-hosted code?

[10:41:05.0325] <jorendorff>
Ah. You can just pass arguments to the generator.

[10:41:31.0570] <jorendorff>
oh wait

[10:43:43.0887] <jorendorff>
It doesn't return a generator, does it? Then you'll need to look at existing things that do the same. There are several

[10:44:24.0937] <jorendorff>
avandolder: see uses of UnsafeGetReservedSlot and UnsafeSetReservedSlot in our self-hosted code

[10:44:40.0856] <jorendorff>
avandolder: This will mean writing a C++ class! Exciting!

[10:45:06.0755] <jorendorff>
I don't know another way around it offhand. If only private fields were done!

[10:47:19.0444] <jorendorff>
avandolder: I can't think of a reason to have a configure-time flag `--enable-js-iterator-helpers` ...seems like it can be always on

[10:47:32.0722] <jorendorff>
^ anyone else have thoughts about this?

[10:48:37.0493] <jorendorff>
avandolder: for now, proceed with a run-time preference and run-time command-line flag only. no changes to the build system

[10:49:03.0961] <avandolder>
ok

[10:49:35.0487] <jorendorff>
avandolder: `RealmCreationOptions` is the way to go

[10:50:11.0267] <jorendorff>
because this feature affects built-ins. this is a bit tricky: prefs can change at run time, so we have to consider how that should affect existing things. a web page may have running code using a feature at the time the user flips the pref off.

[10:50:49.0543] <jorendorff>
we just punt: existing globals still have the feature (or not) based on the pref at the time they were created.

[10:51:21.0693] <jorendorff>
(I use "Realm" and "global" interchangeably; a realm is just a global and all associated builtins, %SpecialObjects%, and hangers-on)

[11:38:31.0209] <avandolder>
Should the pref be under experimental?

[11:38:44.0129] <jorendorff>
avandolder: Yes please.

[12:21:49.0150] <avandolder>
Should it be under NIGHTLY_BUILD as well?

[12:22:09.0459] <avandolder>
I found https://bugzilla.mozilla.org/show_bug.cgi?id=1593698 and https://bugzilla.mozilla.org/show_bug.cgi?id=1587098 which seem helpful

[12:23:21.0749] <jorendorff>
avandolder: The only extra caveat with that is that it's easy to forget and break the non-NIGHTLY build

[12:23:49.0807] <jorendorff>
avandolder: Go ahead and put it under NIGHTLY_BUILD, we'll deal with it

[13:10:02.0457] <Mossop>
Is it valid to call an AsyncIterator's next method before the promise to a previous call has settled?

[13:18:55.0882] <tcampbell>
I don't see anything suggesting you can't

[13:27:00.0769] <tcampbell>
https://tc39.es/ecma262/#table-async-iterator-required

[13:27:12.0233] <tcampbell>
 * https://tc39.es/ecma262/#table-async-iterator-required is pretty light on requirements

[13:38:25.0121] <jorendorff>
Mossop: yeah, I think it's kind of weird how those things work if you actually look at them

[13:38:37.0187] <tcampbell>
confession: gc-free bytecode emission seems to finally work and patches aren't even horrific

[13:38:39.0250] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[13:41:07.0849] <jorendorff>
Mossop: each async generator has a request queue inside it

[13:41:10.0077] <jorendorff>
it's wild

[13:41:25.0696] <Mossop>
That makes implementing an async iterator kind of crazy in some cases. Maybe since it's all my own code I'll just assume that the caller is sane

[13:41:49.0062] <jorendorff>
oh no

[13:42:11.0710] <Waldo>
"we're all mad here"

[13:42:17.0465] <jorendorff>
Mossop: what is this?  an async iterator implemented in C++?

[13:42:34.0779] <Mossop>
jorendorff: No, in JS

[13:43:08.0312] <jorendorff>
hmm. can you implement it as an async generator? that's what they're for :)

[13:43:47.0532] <jorendorff>
next you're going to tell me it has to be faster than that, which, touche

[13:43:58.0147] <Mossop>
Unfortunately not, or at least I can't spot an obvious way to

[13:46:13.0218] <jorendorff>
Mossop: even if you do write your own `next()` method, I thiiiiiink you can wrap it with an async generator by doing something like `async *publicMethodName() { yield* this.privateMethodName(); }`

[13:46:35.0319] <Mossop>
Oooh that's a good point

[13:47:02.0310] <jorendorff>
that may not be the exact right syntax. but it would give you the queue for free

[13:47:16.0119] <jorendorff>
if it works. üê∂

[13:47:47.0469] <Mossop>
I was almost considering something crazy like `return previouslyReturnedPromise.then(() => { // actualNextImplementation });`

[14:05:43.0470] <mgaudet>
jorendorff: Thanks for making me look at the UsedNameTracker. It absolutely should do the job. I think I'm going to rework that comment a bit though. Having hand run the algorithm a few times now, the names are _awful_. 

[14:05:59.0056] <mgaudet>
(Run by hand I mean) 

[14:06:06.0963] <jorendorff>
great!

[14:06:39.0597] <mgaudet>
There will likely be a couple of tricksy bits, but I have very high hopes right now

[14:07:13.0122] <mgaudet>
(I still need to think through eval and delazification a bit tho)

[14:09:41.0820] <jorendorff>
always good to go into a weekend with high hopes

[14:10:44.0864] <mgaudet>
Let's just hope this algorithm sticks 

[14:11:07.0414] <mgaudet>
I think I could rederive my understanding pretty easily

[14:12:27.0889] <mgaudet>
jorendorff: Actually, what would you think of including a worked example into the docs? Pretty much this let's say: https://gist.github.com/mgaudet/29faaf171cf9afb6f3492b039b70b543 

[14:12:57.0281] <mgaudet>
modulo a couple brace changes

[14:13:13.0555] <jorendorff>
That sounds like a good idea.

[14:14:46.0769] <mgaudet>
Ok; will work on a patch

[14:15:07.0797] <tcampbell>
mgaudet: if you want to see fun try it on `(a = (b = () => c) => d) => e`

[14:15:29.0416] <mgaudet>
sssssh you :P 

[14:15:43.0231] <tcampbell>
we end up with some junk Uses

[14:15:52.0801] <tcampbell>
and a lot of dead ScopeId

[14:16:37.0706] <tcampbell>
this case is also annoying for stencil because it make a bunch of discarded `FunctionBox`

[14:16:39.0919] <mgaudet>
I can totally imagine that this turns out to be sub-optimal in weird situations. Though, as I ran this by hand, I was surprised at how clever it felt. 

[14:17:13.0172] <tcampbell>
yeah, it seems to work pretty will, I was just confused by the ghost uses

[14:17:18.0623] <tcampbell>
 * yeah, it seems to work pretty well, I was just confused by the ghost uses

[14:39:13.0611] <jorendorff>
things one mustn't do if one is a firefox: https://searchfox.org/mozilla-central/search?q=mustn%27t&path=

[14:40:35.0143] <jorendorff>
- be mixed with intelligent wrapping without clearing
- be part of an SVG document fragment that is attached to the document tree
- muck with frames from self-hosted scripts
- do anything that can't be done twice
- do anything that can't be done twice

[14:42:15.0330] <iain>
Adding things to lists is, sadly, not idempotent

[14:54:06.0620] <mgaudet>
confession: Talked about early errors, worked out how UsedNameTracker works by running the algorithm on examples with figurative-pen-and-paper, and then tried (oh, I tried) to improve the documentation around it. 

[14:54:08.0856] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[15:38:43.0690] <jorendorff>
@mgaudet: OK, did some reviews, stopped at the point where it looked like things were incomplete

[15:38:49.0769] <jorendorff>
mgaudet: ^

[15:39:50.0860] <mgaudet>
jorendorff: ok! Thanks!

[15:40:03.0994] <jorendorff>
confession: did some getting ready for next week's TC39 stuff, since we actually want some stuff to get done; some code reviews for private fields \o/; some snarking on pipeline operator


2020-05-23
[02:38:46.0469] <jandem>
now with named capture groups implemented, we support everything on http://kangax.github.io/compat-table/es2016plus/ \o/ (we get 98% due to SAB being disabled)

[03:28:49.0772] <evilpie>
iain congratulations. This is fantastic

[03:45:58.0876] <jandem>
* now with named capture groups implemented, we support everything on https://kangax.github.io/compat-table/es2016plus/ \o/ (we get 98% due to SAB being disabled)

[05:45:09.0706] <yulia>
\o/

[06:06:04.0438] <iain>
\o/


2020-05-25
[02:46:53.0041] <Benjamin Bouvier>
good day! is the aarch64 build using warnings-as-errors in automation?

[02:47:18.0974] <Benjamin Bouvier>
from a fresh m-c, i get a build warning-as-error about an implicit int to float conversion that modifies the value

[02:48:58.0406] <arai>
it isn't  https://searchfox.org/mozilla-central/rev/501eb4718d73870892d28f31a99b46f4783efaa0/js/src/devtools/automation/variants/arm64-sim#2

[02:49:12.0936] <Benjamin Bouvier>
i see, thank you!

[10:26:50.0082] <mgaudet>
uuuuurk; python3 is the worst. 

[10:27:13.0761] <mgaudet>
somehow jstests has broken since my last rebase, and of course, it's unicode related

[11:37:48.0261] <avandolder>
how would one go about getting the active function object? the [proposal I'm working on implementing](https://tc39.es/proposal-iterator-helpers/#sec-iterator) adds a constructor that wants to throw a TypeError if NewTarget is the active function object

[11:38:29.0656] <iain>
GC question: when a compacting GC moves a GC thing that contains a GCPtr that is also being moved, how do we update that pointer?

[11:38:46.0084] <littledan>
avandolder: just curious, how did you decide to implement iterator helpers while it's at Stage 3?

[11:39:03.0307] <avandolder>
littledan: 

[11:39:10.0801] <avandolder>
 * littledan: it's my internship project

[11:39:14.0546] <littledan>
I mean, before it's at Stage 3

[11:39:17.0415] <littledan>
currently at Stage 2

[11:39:31.0703] <littledan>
I just wanted to mention it because, I've heard a lot of people raise concerns about some design aspects; I'm not sure if it will go to Stage 3 in its current form

[11:40:02.0818] <littledan>
 maybe this can be a good project to learn anyway

[11:46:40.0644] <iain>
avandolder: Not my area of expertise, but I think you can probably grab the currentScript from the context, and then call `function` on that

[11:46:47.0521] <iain>
https://searchfox.org/mozilla-central/source/js/src/vm/JSContext.h#774

[11:46:53.0497] <iain>
https://searchfox.org/mozilla-central/source/js/src/vm/JSScript.h#1779

[11:48:18.0537] <evilpie>
That doesn't seem like something a spec should be asking for anyway

[11:48:43.0049] <evilpie>
wouldn't the active function object just be Iterator?

[11:49:52.0954] <iain>
I think they might be trying to prevent people from calling the Iterator constructor directly vs subclassing it

[11:52:49.0081] <evilpie>
oh I see

[11:53:03.0040] <avandolder>
would  `args.callee() == args.newTarget().toObject()` accomplish this too?

[11:55:24.0811] <iain>
I think `newTarget` can be undefined, so you probably want to check `args.newTarget().isObject()` first

[11:55:34.0233] <iain>
But otherwise it seems like that should work?

[11:55:46.0994] <iain>
Confidence: low

[11:56:16.0029] <evilpie>
yeah. I think the question is if "active function context" includes builtins. But I don't see why not

[11:57:41.0416] <avandolder>
alright, thanks

[12:29:55.0213] <tcampbell>
iain: GC uses `Cell::isForwarded` to move the graph of things

[12:32:01.0092] <tcampbell>
also, the moving is in a single slice https://searchfox.org/mozilla-central/rev/ea7f70dac1c5fd18400f6d2a92679777d4b21492/js/src/gc/GC.cpp#172

[12:33:09.0913] <tcampbell>
actually, maybe that is out of date..

[13:21:24.0850] <djvj>
What's the general approach to making runtime-wide read-only tables that get initialized at startup time?  I'm using a mozilla::HashSet for my purposes, and initializing the table on main thread during Runtime init.  However, it's throwing a re-entrancy error when I try to query it from a helper thread.

[13:31:20.0191] <tcampbell>
djvj: how did you add to the Runtime? Try using ` WriteOnceData` instead of `MainThreadData`

[13:32:21.0551] <djvj>
tcampbell: I'm using WriteOnceData, but I'm also allocating with the main-thread cx->new_, not sure if that's the problem?

[13:33:05.0052] <tcampbell>
are you mutating the data after it is created?

[13:33:44.0185] <tcampbell>
(what is the re-entrency error?)

[13:37:31.0480] <djvj>
I shouldn't be.  The crash is also consistent suggesting that it's not a race.  

[13:38:30.0235] <djvj>
tcampbell: https://searchfox.org/mozilla-central/source/mfbt/HashTable.h#2050

[13:40:06.0660] <djvj>
I create the wellknowns struct, and then hook it in.  It's shared between runtimes, but the init code is the only one that mutates it.

[13:41:26.0931] <tcampbell>
oh, ha. I guess the guard is checked on reads so we can't have multiple threads reading it

[13:42:21.0589] <tcampbell>
djvj: https://searchfox.org/mozilla-central/source/mfbt/HashTable.h#2041

[13:42:25.0663] <tcampbell>
looks like you want that

[13:42:49.0409] <Waldo>
All you people working for some reason. üôÑ Meanwhile I'm on a hillside about a mile and a half from the top of Mount Hamilton chilling and avoiding overheating in the shade.

[13:45:15.0058] <djvj>
I honestly should get out of this shoebox for an extended thing away.

[14:12:02.0075] <mgaudet>
confession: Earliest success at using UsedNameTracker to catch references to private fields as-of-yet undeclared. Still oodles of work there, but the concept is proved sound. 

[14:12:14.0884] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[15:51:06.0721] <tcampbell>
confession: Finally have a reasonable stack to finish batching JSFunction/BaseScript allocations until end of BCE. (Bug 1599858)

[15:51:11.0667] <botzilla>
https://bugzil.la/1599858 ‚Äî NEW (tcampbell) ‚Äî Batch all script initialization for a parse tree into a single operation


2020-05-26
[02:23:49.0781] <yulia>
jonco: the spec how now split the idea of a "module" into a group of object inheriting from one another. Is it worthwhile maintaining the same structure as the spec?

[02:26:39.0095] <yulia>
The fields are now split between abstract module record, cyclic module record, and source module record (https://searchfox.org/ecma262/rev/fe9b81af43fbfe6fef9967a577fcda0a094e4661/spec.html#21592), before they were split between abstract module record and source module record: https://searchfox.org/ecma262/rev/fe9b81af43fbfe6fef9967a577fcda0a094e4661/spec.html#21474-21727

[02:29:14.0827] <jonco>
yulia: it depends how many kinds of module record we're going to support

[02:29:28.0584] <jonco>
at the moment we only support source text module records

[02:29:52.0902] <jonco>
(I don't remember how this is supposed to work with wasm - does that get it's own kind of module record?)

[02:30:29.0922] <yulia>
i think this change was introduced in order to make things more consistent with wasm... but i don't know the details. I will take a look

[02:31:02.0309] <jonco>
ok cool

[02:31:41.0070] <jonco>
mostly I don't think it's worth introducing this structure unless we need it to represent different kinds of modules

[02:32:02.0242] <yulia>
ok cool

[02:32:42.0126] <yulia>
I have another question, related to how self hosted code works

[02:33:09.0948] <yulia>
in the self hosted code we do this: https://searchfox.org/mozilla-central/source/js/src/builtin/Module.js#513

[02:34:09.0399] <yulia>
my question is, how does `this` function in self hosted code? is this always pointing to the `ModuleObject` defined in ModuleObject.cpp?

[02:34:24.0594] <yulia>
this is different from what i know in regular js land

[02:35:16.0073] <jonco>
good question

[02:35:26.0706] <yulia>
it could be that we always call these functions from the context of that object? 

[02:35:40.0645] <jonco>
that function is always called with this set to a ModuleObject

[02:36:09.0197] <jonco>
well, it's exposed to test code which could do whatever

[02:36:20.0483] <jonco>
but in normal use it's called from ModuleObject::Evaluate

[02:37:16.0339] <yulia>
ok, i see

[02:38:35.0550] <yulia>
so, that means that `this` is not also the global, but a contextual this...

[02:40:16.0019] <yulia>
i was wondering because this line changed from https://searchfox.org/ecma262/rev/fe9b81af43fbfe6fef9967a577fcda0a094e4661/spec.html#22275 to https://searchfox.org/ecma262/source/spec.html#23187

[02:40:20.0885] <jonco>
yes! this function is used as a method of the module object

[02:40:38.0683] <yulia>
would i be able to `module.initializeEnvironment`?

[02:40:54.0187] <yulia>
in other words, can i think of `this` as `global` here?

[02:41:19.0802] <yulia>
(i am a little unsure how to test all of my questions, sorry for bombarding you with this)

[02:41:38.0164] <jonco>
no problem

[02:42:05.0736] <yulia>
idk if this needs to be routed through the cpp or if it just will rely on the module.js file

[02:43:14.0830] <jonco>
I'm not sure what you mean

[02:43:38.0149] <jonco>
it looks like the spec changed to using 'method calls' on module objects

[02:44:03.0561] <jonco>
we in fact implement module records using JS objects but that's an implementation detail

[02:45:23.0729] <yulia>
i guess i can just try it out and see what breaks

[02:45:55.0972] <yulia>
üò¨

[02:46:41.0061] <yulia>
what i mean by routing via cpp --> i don't know if it would look for the method on the moduleObject, and it might not be present if `this` is not the same as `global`

[02:47:44.0564] <jonco>
we don't have an initializeEnvironment method so you won't be able to call that

[02:48:07.0949] <yulia>
its ModuleDeclarationEnvironmentSetup but renamed

[02:48:53.0556] <jonco>
ok

[02:48:59.0230] <jonco>
only some methods are wired up in GlobalObject::initModuleProto

[02:49:13.0588] <jonco>
this is only really done so test code can poke at them

[02:49:22.0452] <jonco>
otherwise functions are called directly in Module.js

[02:50:00.0538] <yulia>
ok, that is what i suspected... in that case i can probably do ModuleDeclarationEnvironmentSetup() and do `module = this`?

[02:52:04.0050] <jonco>
sorry I still don't follow about 'this'

[02:52:23.0661] <jonco>
you can call ModuleDeclarationEnvironmentSetup(module) and that should work

[02:54:28.0341] <yulia>
hm ok. so the problem i have is i am trying ultimately to implement top level await

[02:54:28.0827] <yulia>
https://tc39.es/proposal-top-level-await/

[02:54:40.0179] <yulia>
which, compared to the current spec, is out of date

[02:54:53.0648] <yulia>
but its based on a spec that is more update than our spec

[02:55:17.0573] <yulia>
so i have 3 different versions of the spec i am looking at. I was thinking to update everything so that it reflects the latest spec

[02:55:36.0522] <yulia>
which means, updating some of the names in our implementation, but not too much. the main problem is that they switched to method calls

[02:55:38.0027] <jonco>
ugh! yes that sounds like a good idea

[02:55:55.0825] <yulia>
and i am not too sure how self hosted code _really_ works

[02:56:30.0236] <jonco>
I'm not really that happy with the self-hosted module stuff; I'd like to rewrite it in C++ 

[02:57:03.0817] <yulia>
would there be any ill effects in doing that? do you think it is something i could reasonably do?

[02:57:12.0120] <yulia>
(i need to learn this code anyway..)

[02:57:33.0984] <yulia>
i can post the renaming patch so far

[02:57:39.0473] <jonco>
I don't think there'd be any ill effects and I think it would be clearer how things work

[02:58:07.0101] <jonco>
at the moment we try and make assertions about state, but OOM handling in the engine means we can't always be sure, which is annoying

[02:58:19.0447] <jonco>
and we also have this calling from C++ into JS and back again

[02:58:37.0014] <jonco>
if you feel like it then go for it :)

[02:59:05.0110] <jonco>
I'm happy to review

[02:59:49.0847] <yulia>
ok, i might give it a go

[03:00:02.0647] <yulia>
might -> will (success optional)

[03:00:24.0875] <jonco>
great, I'm here if you have any questions

[03:00:38.0457] <yulia>
thanks!

[03:00:55.0377] <jonco>
no problem

[05:30:33.0279] <yulia>
jonco: I have a working partial update in the js version here: https://phabricator.services.mozilla.com/D76833 I added some questions inline. this is still a wip

[05:33:35.0044] <jonco>
yulia: ok, I'll take a look

[05:34:02.0001] <tcampbell>
yulia: maybe I'm misunderstanding, but generally we return bool in the C++ when there are completion values, because false means we've squirrelled away the error on the Context

[05:34:43.0696] <tcampbell>
/me is interested in understanding our module implementation and will be following along on this bug :)

[05:35:04.0507] <yulia>
tcampbell: thanks! i was wondering there, i was expecting a special value

[05:35:37.0488] <yulia>
im not sure yet how we do completion values in the code... where would I look? I might need to update them

[05:36:25.0750] <yulia>
(at least, this is something chrome was working on... i think)

[05:37:10.0617] <tcampbell>
so if the options are normal/exception then our usual signature is something like `bool Foo(JSContext* cx, MutableValue outV);`

[05:37:16.0988] <yulia>
they created a module evaluation result.. https://chromium.googlesource.com/chromium/src.git/+/2f6aec14ed5c90ca25ccbfd034e95614c32cd566

[05:37:20.0434] <yulia>
so not completion values

[05:37:35.0515] <yulia>
ok good to know

[05:38:27.0484] <tcampbell>
this sounds like it will be closer to the debugger shenanigans

[05:38:28.0713] <yulia>
i might have gotten the original reference wrong then, it could be this one: https://searchfox.org/ecma262/rev/fe9b81af43fbfe6fef9967a577fcda0a094e4661/spec.html#22318-22337

[05:39:14.0747] <yulia>
which would mean we are basically at the same point as the update i was trying to do : https://searchfox.org/ecma262/rev/b012019fea18f29737a67c36911340a3e25bfc63/spec.html#22487-22506

[05:39:38.0356] <yulia>
which would be great

[05:40:35.0095] <yulia>
i don't know how much i actually should change to get us to this point, which is the ultimate goal -> https://searchfox.org/ecma262/rev/b23239f86039291ee9c92d1c2ba7d089bdb4b60e/spec.html#23967-23996

[05:42:40.0079] <tcampbell>
yulia: here is the debugger Completion stuff https://searchfox.org/mozilla-central/rev/ea7f70dac1c5fd18400f6d2a92679777d4b21492/js/src/debugger/Debugger.h#136-287

[05:43:05.0139] <tcampbell>
generally the rest of the engine doesn't actually need fancy completions and gets away with Normal or Throw

[05:43:46.0324] <tcampbell>
For the last version of spec you posted, we do have the `ScriptOrModule` stuff but it is in a totally different place right now

[05:44:35.0904] <yulia>
in compile options?

[05:45:04.0762] <tcampbell>
yeah

[05:45:51.0883] <tcampbell>
one question to keep track of here is what part is static and what is dynamic. We want a clear line for where the parser is done with a module and hands it off

[05:45:59.0626] <yulia>
this is going to be the expected change: https://tc39.es/proposal-top-level-await/#sec-source-text-module-record-execute-module

[05:46:10.0086] <tcampbell>
(presumably before linking?)

[05:46:44.0999] <yulia>
 * this is going to be the expected change ( ithink anyway): https://tc39.es/proposal-top-level-await/#sec-source-text-module-record-execute-module

[05:47:27.0242] <yulia>
right this is the other problem

[05:47:37.0095] <yulia>
the top level await spec is out of date with the main spec

[05:47:47.0658] <yulia>
i have a patch to update it but it still needs to be reviewed

[05:48:37.0092] <tcampbell>
wanna hop on a quick call?

[05:48:45.0530] <yulia>
sure

[05:48:50.0075] <tcampbell>
quick might be a lie..

[05:49:00.0636] <yulia>
i have time until 5 pm!

[08:17:30.0120] <Ms2ger [~half-time dedication]>
yulia: started reviewing your spec PR, hope you like it :)

[08:50:54.0374] <lth>
mrgiggles: are you here?

[08:51:03.0149] <lth>
hm

[09:10:29.0099] <yulia>
Ms2ger [~half-time dedication]: oh exciting! 

[10:37:49.0913] <sfink>
lth: I don't know how to link to it properly, but there's a #freenode_#mrgiggles:matrix.org channel here that is a gateway to #mrgiggles on freenode. It's temporary until I (or someone) get around to porting Mr. G functionality over to botzilla

[12:12:42.0265] <Waldo>
confession: Updating to latest Fedora, sitting around doing mostly nothing waiting... 

[12:12:44.0626] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[13:34:16.0890] <jorendorff>
hmm. does anyone know if `pref(javascript.options.whatever,true)` would work on a `|reftest|` line in a jsreftest?

[13:39:27.0296] <Waldo>
I don't think we have a mechanism to compel that a test be run with a particular preference set.

[13:39:35.0599] <Waldo>
At least not for jsreftests.

[13:41:21.0114] <jorendorff>
ok, tests/user.js it is, then. thanks

[13:41:53.0050] <jorendorff>
WeakRefs definitely have a rather scattered approach to this.

[14:58:21.0169] <mgaudet>
confession: Yesterday's early-errors hack has me down to 47 test262 failures for private fields. The long tail of this feature rapidly approaches. 

[15:20:06.0174] <mgaudet>
jorendorff: ping?

[15:20:43.0488] <mgaudet>
(unping: will file an issue instead) 

[15:37:39.0118] <mgaudet>
Ended up not filing bug, I misread the original test case

[15:39:35.0485] <iain>
^ A story in three acts

[15:43:11.0757] <mgaudet>
Yep. Act four is tomorrow, wherein I figure out how the lambda in  `x = () => 32;` gets the `.name` property set to `x`.

[15:52:23.0547] <Waldo>
mgaudet: See step 1c here.  https://tc39.es/ecma262/#sec-assignment-operators-runtime-semantics-evaluation


2020-05-27
[18:12:18.0224] <tcampbell>
> <@mgaudet:mozilla.org> Yep. Act four is tomorrow, wherein I figure out how the lambda in  `x = () => 32;` gets the `.name` property set to `x`.

These are called Inferred names in spidermonkey and correspond to the spec stuff that Waldo mentioned.

[18:14:02.0515] <loganfsmyth>
How do people feel about "introductionScript" on ScriptSourceObject? It always surprised me that it existed because then any JSScript using `eval` or `Function` can't be GCed. I guess for direct eval it probably can't be either way, but hard to say otherwise. I ask mostly because I think I could get us to a place where it is unused.

[18:21:55.0599] <mgaudet>
I have a sneaking suspicion you'd find no objections to removing it :) 

[18:22:07.0706] <mgaudet>
> <@tcampbell:mozilla.org> These are called Inferred names in spidermonkey and correspond to the spec stuff that Waldo mentioned.

Thanks! Saves me time tomorrow! 

[18:23:01.0995] <Waldo>
Note also that "guessed atom" goo is a different concept (if it still exists, I think we were discussing removing it, recently) that is much more powerful than just making sure function expressions assigned to identifiers get named.  However, that mechanism isn't visible to scripts.

[18:23:22.0657] <tcampbell>
still there. And it is visible through Error.stack unfortunately

[18:24:06.0965] <tcampbell>
`var a = {}; a.o = function() { throw new Error; }; a.o()` still shows a guessed name

[04:36:03.0134] <yulia>
Ms2ger [~half-time dedication]: üí™comments addressed üí™ commits split, looking forward to further feedback!

[04:36:40.0438] <yulia>
:muscle: first spec text pr like heck :muscle:

[04:36:56.0451] <yulia>
 * :muscle: first spec text pr like heck üí™

[04:37:06.0790] <yulia>
 * first spec text pr like heck üí™

[04:51:20.0960] <Ms2ger [~half-time dedication]>
yulia: thanks! Not working today, but will try to take a look tomorrow

[04:57:27.0180] <yulia>
sure :)

[06:14:43.0695] <yulia>
jonco: I am trying to figure out how we are doing steps 9-15 described here: https://searchfox.org/ecma262/rev/b012019fea18f29737a67c36911340a3e25bfc63/spec.html#22487-22505

I think most of this is done behind the scenes aside from the function declarations. Do the other bindings get handled in this object? https://searchfox.org/mozilla-central/source/js/src/builtin/ModuleObject.h#161

[06:14:59.0728] <yulia>
I am trying to write a comment that explains how those steps are handled

[06:15:13.0169] <yulia>
 * jonco: I'm looking at steps 9-15 described here: https://searchfox.org/ecma262/rev/b012019fea18f29737a67c36911340a3e25bfc63/spec.html#22487-22505

I think most of this is done behind the scenes aside from the function declarations. Do the other bindings get handled in this object? https://searchfox.org/mozilla-central/source/js/src/builtin/ModuleObject.h#161

[06:16:36.0958] <jonco>
yulia: as I remember they are handled similarly to non-module scripts

[06:17:12.0774] <jonco>
they are handled by ModuleScope and ModuleEnvironment

[06:17:39.0251] <yulia>
oh, great that makes sense

[06:19:29.0915] <yulia>
 * jonco: I'm looking at steps 9-15 described here: https://searchfox.org/ecma262/rev/b012019fea18f29737a67c36911340a3e25bfc63/spec.html#22487-22505

I think most of this is done behind the scenes aside from the function declarations. Do the other bindings get handled in the module object?

[06:22:19.0613] <yulia>
jonco: Why are function declarations handled separately, exactly? Is it because they need to be hoisted?

[06:23:55.0637] <jonco>
yulia: I'm trying to remember the exact reason... I think it was to do with hoisting

[06:24:10.0040] <yulia>
ok, i will write a comment to that effect

[07:47:21.0880] <RyanVM>
iain: are we going to land the testcases for those recently-fixed regexp bugs?

[07:50:37.0417] <tcampbell>
jandem yulia looks like we need to make a PR to update the links on codetribute https://github.com/mozilla-frontend-infra/codetribute/blob/master/src/data/jseng.yaml

[07:56:44.0039] <jandem>
would be nice to link only to https://spidermonkey.dev/docs

[07:57:58.0466] <iain>
RyanVM: Yeah, I probably should

[07:58:11.0494] <iain>
I've already got a patch up for the one that I'm confident is useful

[07:58:43.0483] <iain>
But I might as well land the other two

[08:47:09.0187] <@allstarschh|afk>
jonco: https://searchfox.org/mozilla-central/source/js/src/vm/HelperThreads.cpp#2281

[08:48:04.0396] <@allstarschh|afk>
jonco: https://searchfox.org/mozilla-central/source/js/src/vm/HelperThreads.cpp#2360

[08:48:25.0055] <@allstarschh|afk>
jonco: try to call complete() on the helper thread has some TSan failure

[08:49:54.0718] <jonco>
sfink: ping

[11:12:04.0113] <Waldo>
Modest proposal: we could trivially fix bug 1641272 by making object creation idempotent, as it once was long ago in the SpiderMonkey JIT.  Who's with me?

[11:12:10.0126] <botzilla>
https://bugzil.la/1641272 ‚Äî NEW (nobody) ‚Äî `new Object` in tight loop much slower than in v8 shell

[11:12:28.0346] <sfink>
heh

[11:12:49.0850] <sfink>
I do wonder if v8 is doing some escape analysis or something...

[11:13:21.0300] <evilpie>
I don't think `new Object` is that important. It's mostly useless in JavaScript

[11:13:48.0473] <sfink>
you're right, I was even getting a console warning saying "don't do that"

[11:14:02.0811] <jorendorff>
Waldo: review ping in bug 1634847

[11:14:04.0171] <botzilla>
https://bugzil.la/1634847 ‚Äî ASSIGNED (jorendorff) ‚Äî Crash [@ js::DebuggerFrame::setGenerator] or Assertion failure: isObject(), at js/Value.h:721

[11:14:07.0720] <evilpie>
weird

[11:14:26.0597] <Waldo>
jorendorff: Working through Intl reviews now, hopefully to get stuff landed this cycle.  :-|

[11:16:08.0621] <jorendorff>
Waldo: understood

[13:04:04.0057] <jandem>
anyone else watching the SpaceX launch? Less than 30 min

[13:05:57.0900] <iain>
Watching, although I'm not optimistic about the weather

[13:06:26.0856] <jandem>
yeah..

[13:17:36.0394] <iain>
We will not go to space today

[13:17:54.0812] <jandem>
better luck on Saturday I hope 

[13:26:49.0309] <Waldo>
Meanwhile on the PCT,

[13:28:19.0408] <Waldo>
(I wish Matrix had a way to tie text to an image, not have two separate messages.)

[13:36:23.0654] <Waldo>
It's the "third", not even "second", that gets me about that sticker.  üòÇ

[13:39:45.0791] <jandem>
encouraging.. You hiked that trail? 

[13:52:31.0573] <Waldo>
jandem: Yeah.  2017 not 2017, tho.  (And I missed ~400mi of it that was on fire, sometime I'll go back to cover all those shuttled-around stretches.)

[14:00:52.0168] <mgaudet>
confession: Kool-aid manning my way through Private Field walls has me at 10 failing test262 tests. Definitely lots of 'proof-of-concept' ideas which will need further munging. 

[14:00:55.0858] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:09:15.0994] <iain>
confession: Upstreamed an irregexp patch to add a nice tidy interface for checking regexp syntax without allocating GC things, only to realize that the new interface didn't actually give us the info we needed to print errors if the check failed

[14:09:23.0777] <iain>
Back to the drawing board...

[14:15:09.0745] <avandolder>
when adding a new slot onto GlobalObject, it is correct to just increment the `JSCLASS_GLOBAL_SLOT_COUNT` by 1?

[14:18:32.0535] <tcampbell>
avandolder: also looks like here https://searchfox.org/mozilla-central/source/js/src/vm/GlobalObject.h#97

[14:18:40.0427] <Waldo>
 * jandem: Yeah.  2017 not 2016, tho.  (And I missed ~400mi of it that was on fire, sometime I'll go back to cover all those shuttled-around stretches.)

[14:19:06.0813] <tcampbell>
the `25` is just so that external places don't need full header file access

[14:19:33.0059] <avandolder>
Right, I had added another ITERATOR_PROTO into that enum and wasn't sure what else had to be done

[14:19:36.0090] <Waldo>
If you only change one place, you'll hit a `static_assert` telling you to change the other.

[14:20:38.0036] <tcampbell>
yeah, that should cover you. Slots are default initialized to undefined (.. I'm pretty sure..)

[14:27:52.0509] <Waldo>
Yes.

[14:28:16.0157] <Waldo>
And somewhat unfortunately, they're even so initialized if they're immediately overwritten with other stuff, in many cases.

[15:22:27.0371] <sfink>
it'd be better to double-init, first with undefined then undefined xor -1, so that the new value can overwrite evenly aged bits

[15:32:36.0129] <tcampbell>
sfink: let me introduce you to our spectre mitigations..

[15:33:02.0486] <Waldo>
Anyone around to do a six-character review?

[15:33:04.0892] <sfink>
hah!

[15:33:12.0782] <Waldo>
I promise you don't need to know anything about anything.

[15:33:37.0514] <sfink>
I'm good at being dumb.

[15:33:44.0422] <tcampbell>
are these characters even latin-1?

[15:33:50.0153] <sfink>
and this debugging session is kicking my ass

[15:34:27.0679] <sfink>
no joking about latin1, I can't count the number of times I've typed d.s.u2.nonInlineCharsLatin1 in the last 2 days

[15:38:55.0259] <Waldo>
sfink: Review incoming once I figure out how to make moz-phab work again, post-OS update.

[15:39:16.0598] <Waldo>
Or I could pastebin it and you could review and then I could Leeroy Jenkins it in.

[15:39:20.0518] <sfink>
ooh, that took me a while on my last update

[15:39:28.0356] <sfink>
WFM

[15:39:42.0270] <Waldo>
I probably should just upgrade moz-phab, I need to sooner or later.  :-)

[15:39:45.0220] <sfink>
(I think that might have been the trigger that made me abandon moz-phab)

[15:39:59.0710] <Waldo>
I...thought it was the new hotness?

[15:41:07.0666] <sfink>
I use... uh... I think it's called phabsend-moz? It's Kwan's Mozilla adaptation of shipped-with-mercurial phabricator.py

[15:42:00.0410] <sfink>
except mine is a bizarro version that I ripped apart and put back together, mostly. I *think* you can still use the real one, though.

[15:42:12.0249] <Waldo>
Mm.  Welp, moz-phab is working again, so another year.

[15:42:44.0328] <sfink>
https://hg.sr.ht/~kwan/phabsend-moz

[15:42:50.0813] <Waldo>
sfink: Context is I.DN patches were written when that function took two arguments, it was later updated to take three, then I.DN landed within the last week but its patch still only supplied two arguments.

[15:42:58.0116] <sfink>
yeah, if you have something working, don't bother

[15:43:49.0478] <Waldo>
sfink: There probably ought be a test for that, of course, but I should submit it upstream in test262.

[15:44:55.0007] <Waldo>
And technically this is maybe a sec bug, albeit the sort we expect to find and fix quickly because it's just dumb thinko-land easily discovered, nothing complicated to it.

[15:46:24.0426] <sfink>
I dunno what a unicode key might be, but sure

[15:49:08.0634] <sfink>
ok, I cheated and just marked it r+

[15:50:59.0497] <sfink>
ah, I found it

[15:51:14.0133] <sfink>
"ca" means calendar

[15:51:16.0239] <sfink>
of course it does

[15:56:12.0645] <tcampbell>
sfink's love of customizing tools makes me think it is best he works with computers where the risk of maiming is slightly lower

[15:57:36.0356] <sfink>
oh, yes. I have occasionally thought it would be fun to program for those toy fighting robot things. Then realized what a bad, bad idea that would be.

[15:59:01.0048] <Waldo>
sfink: Yeah -- the full named things are for the property names that appear in the options object, like `new Intl.Locale("ar", { calendar: "islamicc" })`, the two-letter versions are for if it appears in a language tag directly, like `new Intl.Locale("ar-u-ca-islamicc")`.  For interchange purposes, in-tag representation is desirable.  For working with stuff in JavaScript, putting it in the options bag is more JS-y.

[16:50:05.0282] <Waldo>
/me sighs

[16:50:13.0442] <Waldo>
This spec algorithm is gnarl.


2020-05-28
[07:24:55.0468] <jorendorff>
style q: is it OK in C++ to use `a == b` to see if a and b are the same object, when their type is `JSObject&`?

[07:25:37.0932] <jorendorff>
I believe it works, and that being the case, don't know any reason we would avoid it

[07:27:12.0277] <Ms2ger [~half-time dedication]>
jorendorff: since we explicitly add support for it here: https://searchfox.org/mozilla-central/rev/bc3600def806859c31b2c7ac06e3d69271052a89/js/src/vm/JSObject.h#685

[07:27:18.0653] <Ms2ger [~half-time dedication]>
I think it's likely fine

[07:32:51.0337] <sfink>
I guess I've always done `&a == &b`. I didn't know we had the overload.

[07:38:37.0970] <Ms2ger [~half-time dedication]>
It's only been there for 9 years :)

[08:34:45.0443] <jonco>
sdetar: ping

[08:55:33.0435] <mgaudet>
confession: Only proxy related test262 test cases to look at. Saving the best for last. 

[08:55:35.0610] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[09:23:01.0514] <padenot>
Hi, does anybody know if it's possible to _not_ define compileStreaming and instantiantiateStreaming on a particular Scope ? We have this issue https://github.com/WebAudio/web-audio-api-v2/issues/79 on the Web Audio API. I'm taking in terms of spec and also in terms of gecko impl

[09:51:38.0807] <Benjamin Bouvier>
(note for readers: `WebAssembly.`compileStreaming/instantiateStreaming)

[09:51:50.0055] <Benjamin Bouvier>
this would be a question for Luke

[10:00:13.0352] <padenot>
is he reachable ?

[10:00:46.0220] <padenot>
I don't think this is particularly urgent

[10:08:36.0568] <tcampbell>
jorendorff: ping?

[10:22:19.0834] <evilpie>
padenot: it's definitely possible. You would have to do something like jonco is currently working on in https://bugzilla.mozilla.org/show_bug.cgi?id=1641517

[10:28:56.0233] <padenot>
nice, thanks!

[10:44:09.0173] <mgaudet>
Looking for people's preferences regarding formatting of `js.msg` in https://bugzilla.mozilla.org/show_bug.cgi?id=1641632 if anyone has opinions

[10:53:47.0434] <tcampbell>
mgaudet: Opcode.h ended up removing extra whitespace

[10:53:52.0492] <tcampbell>
 * mgaudet: Opcodes.h ended up removing extra whitespace

[10:54:15.0322] <tcampbell>
 * mgaudet: Opcodes.h ended up removing extra whitespace. (And I think it is a reasonable approach).

[10:54:51.0846] <mgaudet>
it's still got clang-format disabled too tho. 

[10:55:16.0035] <tcampbell>
correct, but it used to have semi-tabular data

[10:56:06.0174] <tcampbell>
oh, I thought your question was what format to use inside the clang-off

[10:56:31.0246] <tcampbell>
I vote for clang-format-off and removing extra whitespace

[10:57:46.0146] <mgaudet>
Heh. I mean, if we're considering invasive changes, I'd swap the order of count and exception type

[10:58:03.0991] <mgaudet>
then just let clang-format do its thing

[11:00:36.0962] <tcampbell>
The current layout goes back over 20 years

[11:03:28.0021] <mgaudet>
:D Perhaps time to change things up 

[11:04:20.0954] <mgaudet>
but, not right now. Right now. Lunch. 

[11:08:00.0771] <sfink>
confession: *finally* tracked down the string deduplication bug, which turned out to be a more subtle form of the previous string deduplication bug, which makes me feel a *little* better about how long it took me to figure it out. But only a little.

[11:08:03.0387] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[12:14:13.0665] <cfallin>
Has anyone recently cross-compiled SpiderMonkey for aarch64 (arm64) from x86? I'm running into issues with bindgen (it uses a local clang and I think needs it to be clang, not gcc) and am wondering if this means I need (i) a clang-based cross toolchain and/or (ii) modifications to bindgen

[12:24:00.0332] <cfallin>
Nevermind! Note to self of 8 minutes ago: set `CPATH` to sysroot's includes, in addition to `CC`, `CXX` and `AR`. Perhaps this should be added to the docs on dev.m.o?

[12:34:11.0638] <cfallin>
Related question: is there a canonical way to use `jit_test.py` to run a cross-binary under userspace `qemu`? Right now I'm doing this with a little shell-script wrapper...

[12:38:05.0972] <mgaudet>
cfallin: I'd encourage you to write this down and land it in https://searchfox.org/mozilla-central/source/js/src/doc/build.rst

[12:38:31.0444] <mgaudet>
(which after landing would end up here: https://firefox-source-docs.mozilla.org/js/build.html) 

[12:48:39.0979] <jorendorff>
super dumb question, is it bad that I got a red x here? https://phabricator.services.mozilla.com/harbormaster/build/289738/

[12:49:16.0936] <jorendorff>
When I click through to https://treeherder.mozilla.org/#/jobs?repo=try&revision=a737378b6ae61ed0fc854756c996c264cf09b5a1 everything is green

[12:50:05.0467] <iain>
jorendorff: If you check #developers, Treeherder is apparently having problems with log parsing

[12:50:44.0532] <iain>
I mean, I guess that's also true if you don't check #developers

[12:53:15.0418] <jorendorff>
ah, thanks.

[14:07:46.0747] <iain>
Waldo: ping

[14:08:19.0780] <iain>
 * Waldo: ping

[14:14:18.0889] <Waldo>
iain: You rang

[14:15:23.0551] <mgaudet>
confession: Trying to tidy my patch stack into something reviewable; discovered a whoops with my inline cache implementations tho, so that'll be tomorrow's first-at-bat. Then onward to proxies! 

[14:15:25.0171] <iain>
Waldo: question about error reporting

[14:15:56.0605] <iain>
We have some fancy code when printing regexp syntax errors to capture a line of context and report an offset relative to the beginning of the regexp and so on

[14:16:33.0966] <iain>
Which you wrote, and I copy-pasted into the new regexp implementation

[14:17:25.0460] <iain>
But it turns out (bug 1635724) that devtools can actually give better errors if we report the location relative to the script, like everything else

[14:17:28.0639] <botzilla>
https://bugzil.la/1635724 ‚Äî REOPENED (nobody) ‚Äî Invalid regexp group error could be more useful

[14:18:05.0412] <iain>
And I sat down to fix this, and found myself lost in a twisty maze of little passages

[14:19:42.0222] <iain>
This is where we report the error now: https://searchfox.org/mozilla-central/source/js/src/new-regexp/RegExpAPI.cpp#154

[14:20:11.0694] <iain>
I'm trying to make it behave more like other error reporting

[14:20:25.0030] <iain>
Any advice on where I should be cribbing from?

[14:20:26.0699] <Waldo>
iain: Hrm.  I remember there being problems with doing it the old way, because escapes within literals would result in columns being thrown off in various ways.

[14:21:03.0521] <Waldo>
iain: But then I look again now, and I'm not seeing that obviously in place, escape sequences get appended code point by code point, as they are written out.

[14:23:01.0462] <Waldo>
iain: Unfortunately, having a little sub-parser for regular expressions rather than just tokenizing them in the normal flow of things makes the integration...tricky.

[14:23:34.0820] <Waldo>
iain: I'm not sure there are exactly good options.  You could always pull up the code before I patched it, that might be mildly informative...maybe.

[14:24:01.0306] <iain>
We get an offset back from the engine, which I believe is the codepoint offset inside the regexp pattern

[14:24:37.0339] <iain>
I was hoping that we could just add that to the current token offset to get the error offset

[14:24:37.0371] <Waldo>
If I remember the code I wrote, it's a unit offset, and we have to convert it back to code point offset.

[14:31:01.0747] <iain>
Waldo: Is there anywhere else that we report syntax errors without actually being inside the parser? This whole setup is kind of awkward

[14:31:40.0072] <Waldo>
iain: If you mean inside the parser or tokenizer, I don't really think so.  I could be wrong about that, tho.

[14:31:51.0760] <iain>
Hmm

[14:32:04.0189] <iain>
Okay, I'll keep poking at this

[14:33:04.0971] <iain>
Although I'm starting to wonder if it would be better to have CheckPatternSyntax return an error number and a unit offset, and let the caller handle the reporting

[14:34:12.0055] <Waldo>
Worth remembering, the unit offset would be in 16-bit units, but the token stream may have UTF-8 on hand...

[14:34:33.0088] <Waldo>
Because of it accumulating into a 16-bit buffer and then passing that along to be interpreted.

[14:34:45.0349] <Waldo>
This would be easier if irregexp had a UTF-8 mode.

[14:35:27.0288] <iain>
Sadly, just latin-1 and two-byte

[14:35:59.0408] <Waldo>
Yeah.  And...we don't even invoke the Latin-1 mode, do we?  Not with this charbuffer accumulation trick, I think.

[14:36:38.0793] <iain>
Maybe not when doing the syntax check

[14:36:51.0875] <iain>
Later on we parse from atoms, and those can easily be latin-1

[14:37:32.0867] <Waldo>
Oh, right.

[14:38:57.0783] <iain>
But the idea is that all the errors get reported during the syntax check


2020-05-29
[17:32:54.0022] <Waldo>
/me despairs

[17:33:11.0147] <Waldo>
How long have I been staring at these patches and this spec, and still the corners are inscrutable...

[17:33:35.0276] <Waldo>
And I don't even want to be reviewing right now, I wanted to write some docs today.  ‚òπÔ∏é

[20:44:51.0623] <Waldo>
confession: Did some Intl patch reviewing, still have more to go.

[20:44:53.0749] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[20:45:29.0335] <Waldo>
confession: Also working on some Intl/ICU documentation, to scratch an itch to write some docs today.

[21:22:35.0417] <arai>
Can anyone point me to the spec step that throws SyntaxError for redeclaration for the following code? (it's about Annex B.3.3.2)
```
<script>
let f;
</script>
<script>
{
  function f() {}
}
</script>
```


[21:23:02.0053] <arai>
now looking https://tc39.es/ecma262/#sec-web-compat-globaldeclarationinstantiation

[21:23:44.0100] <arai>
I'm not sure why Annex B is applied there.  Step 2.d.ii.1 says "If env.HasLexicalDeclaration(F) is false, then"

[21:24:19.0698] <arai>
and even if it's applied, I cannot locate any step that throws SyntaxError

[21:25:25.0507] <arai>
(maybe the `env` there doesn't point `env` for the first script?

[21:27:30.0926] <arai>
to my understanding, the place that detects reclaration across multiple scripts are GlobalDeclarationInstantiation steps 4-5 https://tc39.es/ecma262/#sec-globaldeclarationinstantiation

[21:27:50.0554] <arai>
and that's before Annex B, that's step 13

[21:45:35.0513] <arai>
hm, all engines agree with throw SyntaxError for redeclaration

[22:30:29.0716] <Waldo>
arai: I looked some but couldn't quickly determine the answer.  üòêÔ∏è  It is at least possible that this restriction is described _only_ in prose, and there are no algorithm steps to explicitly enforce the restriction.

[22:45:21.0325] <arai>
thanks :)   I'll open a spec issue to make sure

[22:52:22.0040] <Waldo>
FWIW I didn't look at the prose at all for this, only at algorithm steps.

[23:01:51.0723] <arai>
filed https://github.com/tc39/ecma262/issues/2019

[10:03:29.0181] <gregtatum>
yulia: two things I was curious about from the proposals:

1: Have the "no-semicolon" folks weighed in on do expressions? This makes semi-colons much more meaningful in these situations.
2: On the immutability, one thing I wanted to bring up is that you can achieve pretty good immutable guarantees on your own code using a type system, like typescript and flow, without any realtime cost. I still think it's worth it though for the collections support. As was stated in the meeting, keying off of multiple values is... painful.

[10:05:26.0219] <yulia>
gregtatum: thanks for the feedback! let me check about point 1. point 2 is good to keep in mind

[10:19:06.0566] <yulia>
im confused by matrix... but 

[10:19:09.0781] <yulia>
iain: thank you for being such a hero in the chats during the stream! 

[10:19:55.0024] <iain>
yulia: You were doing the hard part!

[10:20:04.0525] <iain>
 * yulia: You were doing the hard part!

[10:22:00.0287] <evilpie>
I was really sure iframes could be synchronous in the same origin case. Need to test that

[11:20:30.0357] <syg>
annex b!!!!

[12:03:44.0156] <jorendorff>
evilpie: I thought so too

[12:12:40.0395] <mgaudet>
What's the expected semantics behind an IonIC being marked as `idempotent` -- curiously this corresponds with the IR Generator being provided a `nullptr` for `GetProp` IC, and I'm wondering how much these two facts are crosslinked, or if it's simply duplexing of information

[12:13:50.0104] <tcampbell>
mgaudet: idempotent ICs can be hoisted so much be infallible so we don't need exceptions to have a valid pc location

[12:14:00.0278] <tcampbell>
 * mgaudet: idempotent ICs can be hoisted so must be infallible so we don't need exceptions to have a valid pc location

[12:14:11.0893] <mgaudet>
üò¨

[12:14:18.0620] <mgaudet>
I was concerned it would be something like that. 

[12:14:29.0494] <mgaudet>
Time to slip something in the stack underneath this patch. 

[12:14:42.0502] <tcampbell>
if your case is weird, just make sure it is not marked idempotent

[12:16:18.0112] <tcampbell>
mgaudet: https://searchfox.org/mozilla-central/source/js/src/jit/IonBuilder.cpp#11234

[12:16:44.0329] <tcampbell>
so I think what happens is we hoist and if the property access might trigger side-effects we get a bailout

[12:17:23.0911] <tcampbell>
if at runtime, it remains a pure data read, then hoisting/duplicating/etc it is not observable

[12:18:17.0161] <tcampbell>
and if we bailout too much for idempotent failures, we disable the optimization in next jit compile. Which prevents hoisting and other optimizations

[12:21:03.0824] <mgaudet>
hrm. Ok. Will need to track backwards to the creation of the MGetPropertyCache to figure out if it's a private element op or not that generated it. 

[12:21:13.0940] <mgaudet>
and then make sure they're not set as idempotent. 

[12:21:31.0562] <tcampbell>
```js
for (...) {
  var a = o.x;
  ...
}
```
becomes
```
if (!isPlainObj(o))
  bailout();
if (!isDataProperty(o, "x"))
  bailout();
var _a = o.x;
for (...) {
  var a = _a;
  ..
}
```
var _a 

[12:21:37.0333] <tcampbell>
 * ```js
for (...) {
  var a = o.x;
  ...
}
```

becomes
```js
if (!isPlainObj(o))
  bailout();
if (!isDataProperty(o, "x"))
  bailout();
var _a = o.x;
for (...) {
  var a = _a;
  ..
}
```

var _a

[12:22:00.0107] <tcampbell>
(with a huge amount of hand waving..)

[12:22:24.0650] <mgaudet>
Hrm. Or I could just use the property name and disable it in `PropertyReadIsIdempotent`

[12:22:51.0267] <tcampbell>
mgaudet: what is the property?

[12:23:02.0247] <evilpie>
mgaudet: can't you just check for `idempotent()` in your CacheIR stub?

[12:23:23.0514] <evilpie>
stub => tryAttachSomething

[12:23:27.0702] <tcampbell>
ooh, evilpie probably know more of the practical details here

[12:24:05.0528] <evilpie>
or make sure the method isn't called from GetPropIRGenerator::tryAttachIdempotentStub, but I suspected you extended tryAttachNative

[12:24:49.0582] <tcampbell>
 * ```js
for (...) {
  var a = o.x;
  ...
}
```

becomes
```js
if (!isPlainObj(o))
  bailout();
if (!isDataProperty(o, "x"))
  bailout();
var _a = o.x;
for (...) {
  var a = _a;
  ..
}
```

[12:26:07.0412] <mgaudet>
Right

[12:26:09.0809] <mgaudet>
I did. 

[12:26:43.0355] <mgaudet>
This feels like an Ion problem though: Accesses to private fields ought not to be labelled idempotent -- because they're not. 

[12:27:29.0419] <mgaudet>
(or they're at least not side-effect-free for hoisting purposes)

[12:28:03.0418] <evilpie>
you can extend jit::PropertyReadIsIdempotent if you want

[12:28:12.0664] <tcampbell>
what are the side-effects after parsing?

[12:28:18.0925] <evilpie>
as far as I can tell this is a best effort kind of thing

[12:28:37.0802] <evilpie>
"Determine if reading a property from obj is **likely** to be idempotent"

[12:29:20.0878] <mgaudet>
now having said that, what I have works.. in my test case... but feels loose and dangerous in light of this. Though, if tcampbell's transformation is right, and we attach an IC to the -hoisted- load, then... I guess it works out? 

[12:29:25.0253] <tcampbell>
the risk off too much idempotent is: unnecessary bailouts
the risk off too little idempotent is: no hoisting

[12:30:05.0735] <tcampbell>
an idempotent IC must not invoke proxies/getters. I think that is hard rule

[12:30:15.0954] <tcampbell>
 * the risk of too much idempotent is: unnecessary bailouts
the risk of too little idempotent is: no hoisting

[12:33:00.0595] <mgaudet>
I think  I definitely need to fix this -- I think I can even write a test case. But first I will make a pot of coffee. 

[12:35:25.0131] <mgaudet>
The issue I fear is potentially attaching a no-such-property stub, throwing, then on another iteration coming through and returning undefined from that stub. I had that problem in baselineICs the first time. 

[12:36:29.0991] <mgaudet>
the way I disabled that in baseline was saying "hey -- GetPrivateElem throws, return false from   if `IsCacheableNoProperty`" 


[12:37:08.0187] <mgaudet>
but the way that idempotency is communicated to GetPropIRGenerator is by passing in nullptr for the `pc`, removing the ability to check -what- op the IC is associated with

[12:37:31.0014] <tcampbell>
can you add another param to the generator?

[12:38:12.0822] <tcampbell>
I guess just telling Ion not to use idemopotent for private fields probably makes sense too

[12:39:34.0143] <evilpie>
I see something weird in some CacheIR logs. ThisVal for function calls is a *magic* value?

[12:40:06.0816] <tcampbell>
evilpie: isn't that what we pass on constructor calls?

[12:40:21.0732] <evilpie>
Oh d'uh yeah that makes sense

[12:40:44.0475] <tcampbell>
https://searchfox.org/mozilla-central/source/js/src/vm/Interpreter.cpp#4512

[12:41:57.0572] <evilpie>
thanks you are right. There is a |new| at the corresponding PC

[12:41:59.0857] <mgaudet>
tcampbell: yeah, it's just a question of where to stick the lever; i lean towards changing the representation of idempotent to still allow the hoisting

[12:42:21.0414] <tcampbell>
mgaudet: so you would bail on missing?

[12:42:24.0813] <evilpie>
we fail to attach a stub 1053 times, something is definitely off

[12:42:29.0560] <tcampbell>
 * mgaudet: so you would bail on missing, if it is a field?

[12:43:07.0179] <mgaudet>
tcampbell: well, you're in the middle of throwing a type error which seems fine to me? 

[12:43:22.0666] <tcampbell>
yep

[12:43:58.0523] <tcampbell>
mgaudet: the counter-example is when we hoist out of a `if` that would not actually run

[12:44:16.0673] <tcampbell>
so we bailout unecessarily

[12:44:59.0945] <tcampbell>
I can't tell you what the best answer on average, but I'd lean towards what you propose

[12:46:00.0547] <tcampbell>
it is always the risk with hoisting. Ideally we'd have super fast and precision bailout tracking and would recompile the right answer. In practice, not so much

[12:47:06.0080] <tcampbell>
such is the price of speculation

[13:04:56.0939] <jorendorff>
feature gating is too complex, we should streamline. sigh

[13:05:10.0658] <jorendorff>
(apropos of nothing)

[13:05:36.0109] <jorendorff>
tests shouldn't have to declare anything more than `// |reftest| uses(private-fields)`

[13:06:39.0157] <jorendorff>
...and we shouldn't use `NIGHTLY_BUILD` directly

[13:06:53.0400] <jorendorff>
...and adding a new option, pref, and ifdef should be easy

[13:06:55.0596] <jorendorff>
...and a pony

[13:07:22.0343] <tcampbell>
üêé

[13:24:45.0832] <jorendorff>
also, everyone, i discovered a reason we might prefer accessors and internal slots for stuff like .errors, as opposed to data properties: https://searchfox.org/mozilla-central/source/js/xpconnect/wrappers/XrayWrapper.cpp#638-645

[13:32:36.0302] <evilpie>
JSXray being annoying is not a good reason

[13:34:05.0627] <evilpie>
btw you probably want use getOwnPropertyFromWrapperIfSafe for |errors|

[13:40:07.0513] <jorendorff>
I agree it's not a good reason

[13:40:14.0704] <jorendorff>
thanks for the tip

[15:22:50.0302] <mgaudet>
confession: Combing through my patch stack, trying to make each piece as easily reviewable and self contained as possible. Still ignoring Proxies at the moment. Opened a GitHub issue on private fields, which I really-really-really hope isn't poking old wounds, but bothers me: https://github.com/tc39/proposal-class-fields/issues/309 

[15:22:54.0982] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2020-05-30
[18:28:52.0342] <Waldo>
confession: Discovering that the ICU update script (more precisely, the Python scripts it invokes) isn't Python 3-ready.  It _probably_ isn't a ton of work to fix this, but the precise depth of the problem is still unclear.  At minimum, this will require making `pymake` Python 3-safe, tho, so it's not wholly trivial.  Will probably do some hard-coding of Python 2 in it in the short run, so I can finish documenting the precise commands that must be run to update ICU, tzdata, and related files (knowledge that is about 30% in my head and that I can resurrect/reconstruct with time, but in practice depends significantly upon anba swooping in to save the day).

[14:45:23.0926] <timvde>
Question from #firefox on Freenode, but I have honestly no idea what to reply:
> there seem to be plenty of javascript optimization guides written for V8 (chrome's javascript engine). Do the same tips generally apply to firefox's engine (spidermonkey) as well?

[14:50:43.0895] <iain>
timvde: The big picture ideas should apply

[14:50:48.0911] <immibis>
That was me who asked that btw

[14:51:34.0463] <iain>
immibis: Do you have a particular optimization guide in mind?

[14:52:03.0148] <iain>
I think most advice should apply to both engines

[14:56:10.0074] <iain>
All modern javascript engines use shapes (although they might call them something else, like maps): https://benediktmeurer.de/2018/08/16/javascript-engine-fundamentals-optimizing-prototypes

[14:58:03.0929] <immibis>
Not a specific one, no. But almost any information I find via web search appears tailored to V8.
I can't find the specific example I was thinking of, which was about initial object shapes being based on trivial assignments at the beginning of the constructor.
e.g. allegedly, in v8,
```
function f() {
    // initial object shape at this line is {x: int, y: string}
    this.x = 5;
    this.y = "str";
    doSomethingComplicated();
    this.z = 7.5;
}
```

[14:59:20.0661] <immibis>
that's actually irrelevant to me right now since the problem I'm looking at is excessive GC pauses; I thought it would be good to get some background on Javascript performance practices before I jump right into reducing allocations

[15:01:32.0300] <iain>
If the V8 advice was to change the order of `this.z` and `doSomethingComplicated()`, that particular bit of advice might be less relevant in SM

[15:02:07.0405] <iain>
But depending on when the guide was written, it's worth noting that it might also be less relevant in a different version of V8

[15:04:56.0842] <iain>
(Similarly, the details of how SM would optimize your example are likely to change in the semi-near-ish future)

