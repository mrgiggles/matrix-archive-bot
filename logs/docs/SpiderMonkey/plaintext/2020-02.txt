2020-02-01
[04:53:46.0897] <anba>
zbraniecki: I don't actually know what exactly removing these collation resources would mean for us. 

[04:54:12.0231] <anba>
The implicithan option is described in more detail at https://github.com/unicode-org/icu/blob/master/docs/userguide/icu_data/buildtool.md#collation-ucadata

[04:55:20.0284] <anba>
But I guess someone with more background needs to make the call for which collation option (unihan or implicithan) is more useful for us resp. for users

[04:56:24.0804] <anba>
zbraniecki: And I found some annyoing 

[04:57:29.0046] <anba>
err... . And I found some annoying spec issues in the day-period PR w.r.t to pattern12 and am/pm markers. These issues may require more spec work for Frank. :-/ 

[05:13:37.0194] <zbraniecki>
thank you! 

[08:19:15.0453] <Waldo>
Anyone in town still feel like dinner? I pretty much just checked into the Airbnb and then  napped, but I ought get food sometime in the next couple hours but don't have any particular plans.

[08:20:06.0380] <Waldo>
I'm in the rough area of the office, FWIW but wouldn't mind heading elsewhere.

[08:43:41.0856] <iain>
Matt and I are going to be going out for Turkish food at Hasir (near the Intercon) around 7/7:30, if you want to join us.

[08:43:57.0018] <iain>
And then going out to see some jazz afterwards.

[08:45:51.0325] <iain>
Waldo: ^

[08:47:27.0515] <Waldo>
Jazz is good. I do love me some jazz.

[08:50:35.0860] <iain>
Waldo: Does 7 work for you?

[08:53:58.0760] <Waldo>
@iain:mozilla.org: Yeah, that works. It's about .5h over by transit, looks like. Plenty of time.

[09:02:36.0867] <iain>
Okay, cool. Dinner at Hasir (N√ºrnberger Str. 46, Berlin, BE 10789) at 7.

[10:17:17.0079] <zombie>
@iain Where might one find said jazz

[10:18:26.0718] <zombie>
@iain:mozilla.org:

[11:38:05.0326] <Waldo>
A-trane, @zombie:mozilla.org

[11:59:16.0069] <mgaudet>
zombie: (lesson learned: arrive early. Place is pretty jammed)

[12:01:16.0635] <Waldo>
And there'll be even more jamming when they start playing.

[12:02:03.0191] <Waldo>
We think we'll return - early - Monday night.

[12:02:30.0955] <zombie>
ah, thanks, looks like it's already late

[15:01:11.0358] <Waldo>
Well that was fun. Just spent a good twenty minutes or so figuring out how to work both door keys into the Airbnb to open two doors, without actually poking a host who might or might not be responsive this late in the evening. At least I succeeded, eventually...


2020-02-02
[21:26:45.0265] <jorendorff>
kind of the opposite of an escape room

[21:28:17.0984] <jorendorff>
airbnb should have a checkbox for "puzzly"

[23:18:21.0733] <iain>
There's an entire missing axis on their ratings chart: "how hard is it to turn on the shower?"

[23:29:54.0833] <jorendorff>
yeah, I have a dumb tweet in queue about that

[02:03:49.0535] <zombie>
Easy+working hot water & shower head is something even most hotels struggle with


2020-02-03
[01:21:32.0582] <Waldo>
hallo Welt

[01:30:47.0710] <Waldo>
I'm currently in the kitchen area in the Berlin office, if anyone has some reason to look for me üòÅ

[01:32:53.0606] <yulia>
waldo, ill come say hi :D

[04:37:54.0892] <Waldo>
Nice view from the Berlin balcony.

[04:38:12.0936] <yulia>
the pylon doesn't count as a boat

[04:38:16.0498] <Waldo>
Pleasant spot to sit outside-ish for a bit.

[04:38:50.0849] <yulia>
you can also take over the bluetooth speakers i think

[04:39:11.0385] <Waldo>
Could use slightly better-placed outlets, but I have enough power strip cord to get to one comfortably.

[04:39:45.0873] <yulia>
yeah thats true

[04:40:24.0648] <nbp>
Waldo: That's only because you have not yet been to the new Paris office.

[04:41:22.0864] <Waldo>
You remember the name of the Bluetooth speakers?  I am somewhat disinclined to attempt to connect to something that is not guaranteed to be these speakers and muchly-surprise someone.  üòõ

[04:41:44.0880] <Waldo>
nbp: New Paris office has a view?

[04:41:51.0512] <yulia>
i do not... but it could be funny

[04:42:13.0357] <yulia>
depends on the track of course

[04:42:51.0920] <Waldo>
Purty.

[04:44:31.0997] <nbp>
and there is also a canal, if this is the kind of things you are interested in ;)

[04:50:30.0504] <Waldo>
I ran by a canal this morning here.  Also hmm, Matrix does not seem to handle JPEGs with rotations in them well.  (Took it at a run, the default rotation wasn't right, had to ImageMagick it to the correct rotation.)

[04:50:59.0274] <Waldo>
Also I saw someone had a one-man tent by the river one place, if I'd known I could have stayed here cheaper.  üòÇ

[08:31:26.0163] <jorendorff>
tcampbell: Does Baseline (really asking about the Baseline Interpreter) generally try to implement all the assertions that the C++ interpreter has? (I would be stunned if the answer was yes)

[08:33:49.0131] <jandem>
we're trying to be better about emitting assertions in generated code, for things we depend on. It's a lot harder than asserting in C++ code though, so I don't expect them to match 100%

[08:33:55.0662] <jorendorff>
yeah

[08:34:00.0816] <jorendorff>
those inline functions :-|

[08:34:07.0306] <jorendorff>
jandem: Also: where's the heuristic that decides whether we run the C++ interpreter or the baseline interpreter

[08:34:21.0032] <jorendorff>
or, when we switch over, or is it "always"

[08:34:34.0445] <jandem>
baseline interpreter if warmup count >= 10 (loop iterations + calls)

[08:36:08.0950] <jandem>
for example when unboxing a Value to a known type, I think it makes sense to emit a debug assertion. For more complicated invariants JIT code not directly related to the emitted JIT code, we should probably assert in C++ code instead

[08:36:21.0061] <jandem>
 * for example when unboxing a Value to a known type, I think it makes sense to emit a debug assertion. For more complicated invariants not directly related to the emitted JIT code, we should probably assert in C++ code instead

[08:38:21.0528] <jorendorff>
jandem: We have that warmup count because... why? baseline interpreter is slower than C++ while it's populating ICs? or, just allocating the ICs is an expense we don't need if the script will only run once?

[08:38:39.0337] <jorendorff>
Sorry, getting all my questions out. None of this is important

[08:38:55.0622] <jorendorff>
I was really just wondering if I should be worried about assertion coverage having regressed, but I'm definitely not worried now

[08:38:57.0345] <jandem>
yeah there's some perf + memory overhead for ICs + JitScript allocation

[08:39:06.0230] <jorendorff>
k

[08:39:23.0526] <jandem>
we also run all shell tests with all JITs + blinterp disabled, for what it's worth

[08:39:52.0051] <jorendorff>
fuzzers too?

[08:40:39.0071] <jandem>
https://searchfox.org/mozilla-central/source/js/src/shell/fuzz-flags.txt#8 - @decoder: does langfuzz use this file now or know about `--no-blinterp`?

[08:40:48.0345] <jandem>
decoder: ^

[08:44:56.0487] <jandem>
jorendorff: depending on the assertion, you could also do something like this: https://searchfox.org/mozilla-central/rev/2e355fa82aaa87e8424a9927c8136be184eeb6c7/js/src/jit/BaselineCodeGen.cpp#5830 

[08:45:25.0629] <jandem>
maybePC() is non-nullptr when we're baseline compiling, not interpreting

[08:45:39.0356] <jandem>
/me afk

[08:47:01.0303] <jorendorff>
Thanks for all this.

[09:23:22.0543] <djvj>
tcampbell / mgaudet so.. is it reasonable to require that no compile (either background or main-thread) of a particular function will be dispatched until after the stencil for the immediate parent has been applied/vivified?

[09:25:00.0742] <djvj>
I think some of the confusion around thinking about deduplication of atoms comes from the mismatch between stencil production, which in my mind right now can be arbitrary slices of the nested script subtree.. and consumption, which may be on a more granular basis (single script body)

[09:28:52.0449] <djvj>
we don't need a canonical table of atoms per source file, but if we want to consume/retire stencils on a function basis (e.g. they are written out to cache a single function at a time, instead of a whole tree-fragment at a time), then we need a per-function canonicalization of the atoms.

[09:30:12.0729] <djvj>
if a stencil compile for an outer function invokes a stencil compile for an inner function (full compiles here, not syntax), then they both need to carry their own little dedup tables ,which I think is fine.

[09:30:26.0037] <jorendorff>
i think @mgaudet liked the dedup'd per-source table, and fwiw the C++ frontend already atomizes all strings and identifiers in the TokenStream (whether we're lazy-compiling or not)

[09:30:39.0593] <jorendorff>
so, i think we would be ok going that way

[09:31:37.0636] <djvj>
the thing about the per source table as we were talking about before, and it was brought up late during the all-hands, was that we'd be adding a hashtable lookup per atom _occurence_ in the source, to syntax parsing.

[09:32:23.0547] <djvj>
I kind of thought about that on the plane ride and a bit more.. and I think there'd be value in collecting numbers to back up the suspicion, but it feels like that could actualy get pretty expensive

[09:33:42.0833] <jorendorff>
It would be nice to save the lookup if possible. But I think we already do that lookup twice

[09:34:01.0438] <jorendorff>
exactly because it does happen in TokenStream, which is used both times

[09:34:36.0673] <djvj>
Oh, TokenStream doesn't skip the atomization for syntax parsing?

[09:34:56.0783] <Waldo>
No, it needs to do comparisons from time to time.

[09:35:20.0747] <jorendorff>
djvj: I think we just never thought of it.

[09:36:02.0813] <djvj>
I think we can eliminate that then, at least during syntax parse.  At the cost of maintaining a per-function dedup table during full parse.

[09:36:22.0999] <djvj>
oh wait, what sort of comparisons do we do Waldo 

[09:36:56.0875] <Waldo>
We need to do some comparisons to detect `eval`, e.g. for strict mode assignment prohibitions.

[09:37:07.0947] <Waldo>
Also `arguments`.

[09:37:26.0282] <Waldo>
I would have to look at all the various `Node*` enums to say what others we may do.

[09:37:37.0687] <djvj>
is there anything that doesn't fall into a "small finite bucket of strings"?

[09:37:41.0080] <jorendorff>
Both modes share all the same Parser code

[09:37:52.0092] <jorendorff>
djvj: I don't think there is

[09:37:56.0181] <Waldo>
I should also say, writing a semi-duplicative syntax-parse implementation of tokenizing an identifier feels extremely hairy/fragile.

[09:38:42.0731] <jorendorff>
it's all rather fragile

[09:38:56.0062] <Waldo>
Some fragilities are more fragile than others.

[09:39:05.0542] <jorendorff>
yeah, not arguing.

[09:39:06.0033] <jorendorff>
since we're implementing a new system, we can design something new to make it not so fragile

[09:39:18.0920] <jorendorff>
if it saves a bajillion hash table lookups, could be worth it

[09:40:08.0695] <jorendorff>
djvj: Here is an example of a place where we "use" the atom but in syntax parsing it is not actually used:

[09:40:18.0620] <jorendorff>
https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.cpp#9757 ("`.currentToken().atom()`")

[09:41:07.0053] <jorendorff>
djvj: hence, I am guessing, changing this in the current frontend would touch a lot of code

[09:41:07.0840] <djvj>
Ok, if we're doing that lookup now during syntax parse anyway, then that gives us a bit of leeway.  For now, that would allow for a per-source atoms table built by the syntax parser without any additional time overhead.

[09:42:33.0694] <djvj>
jorendorff: yeah, I guess the visitor API kind of forces the hand there

[09:42:50.0947] <djvj>
handler rather

[09:43:25.0129] <jorendorff>
sure, but that could be changed too

[09:43:38.0822] <djvj>
if newStringLiteral took a template thunk that generated the atom you could avoid that problem.

[09:43:49.0385] <jorendorff>
handlers abstract away from ParseNode

[09:44:03.0638] <djvj>
anyway, that's getting a bit off track.  Short term, it's good that I can assume a free hashtable lookup per atomizable string during syntax parse.

[09:44:26.0970] <jorendorff>
they could abstract away from atoms too somehow, i'm sure

[09:46:43.0782] <djvj>
the persistent memory overhead is still a potential issue, so it's good to measure.

[09:47:27.0203] <djvj>
It's minimally 8 bytes per unique atom in the source, would be good to get an idea for how large that is for our targeted workloads

[09:48:09.0903] <jorendorff>
right, plus the hashtable itself, i guess

[10:04:43.0348] <nbp>
djvj: Are the atoms table unique per source, or global?

[10:05:53.0600] <djvj>
for the purposes of a stencil parse, the largest scope of uniqueness is the source

[10:06:10.0941] <djvj>
the smallest is the direct function body (not including inners)

[10:06:49.0890] <djvj>
I think after the initial set of changes, we should be able to move to the latter, and avoid lookups during syntax parsing entirely.

[10:07:17.0122] <jorendorff>
nbp: `JSAtom`s have to be unique engine-wide, it's probably 6 months of work to change that. but we want to avoid taking that lock and interacting with the atom zone in stencil

[10:07:34.0502] <jorendorff>
nbp: I think you must not have been in the Stencil meeting where we brought this up...

[10:07:50.0526] <jorendorff>
but I see it as a serious problem. it's actually not easy

[10:08:05.0541] <jorendorff>
under control, now

[10:08:21.0402] <djvj>
the small bucket of fixed literals can be checked with some perfect or near-perfect hash, and every function full-parse can carry its own parse-atoms map.

[10:09:50.0833] <nbp>
Having a per-function uniqueness, makes sense for the bytecode generation, per-source sounds like a memory saving artifact.

[10:10:10.0828] <djvj>
I don't see how per-source is memory-saving

[10:10:29.0914] <nbp>
By removing duplication across functions.

[10:10:51.0328] <djvj>
the per-function tables will be individually a lot smaller, and transient

[10:11:05.0829] <nbp>
hum ‚Ä¶ I guess there is the scope chain to be considered.

[10:11:31.0718] <nbp>
which has aliased variables across functions, and where we want to compare each name uniquely.

[10:11:49.0578] <nbp>
 * which has aliased variables across functions, and where we want to save each name once.

[10:11:55.0328] <jorendorff>
djvj:  are they transient? I missed this part

[10:12:28.0973] <djvj>
jorendorff: well, they'll go away when the stencil is consumed

[10:13:04.0692] <nbp>
djvj: what does that mean? Stencil does not stay in memory?

[10:13:42.0634] <jorendorff>
djvj: hmm. ok, you still have to provide scope info to the frontend in order to emit correct GetAliasedVar opcodes for the enclosing scopes

[10:13:46.0628] <jorendorff>
as long as we have a way to do it...

[10:14:17.0511] <djvj>
nbp: the way I've been thinking about it is as a cacheable stable representation.  Its lifetime is somewhat fluid and under our control.  I.e. we might under memory pressure schedule them for write-out to disk and then discard.

[10:14:40.0789] <djvj>
I sort of imagined them really only existing as an intermediary structure between parse / compile / cache / load.  The RNA of the source-code's DNA.

[10:14:42.0480] <jorendorff>
oh maybe Scope should stop being a GC-thing

[10:14:52.0015] <jorendorff>
does that just totally solve everything

[10:15:02.0816] <jorendorff>
it would need an atomic refcount i think

[10:15:30.0768] <djvj>
to the degree that we "buffer" Stencils, we can, as a caching mechanism.

[10:15:33.0272] <jorendorff>
and it would have to completely stop knowing about atoms

[10:15:40.0592] <jorendorff>
so painful

[10:15:48.0489] <nbp>
djvj: I am not sure to understand. This means that after a clean-up of the memory, compiling a lazy-function implies doing the syntax parsing of the whole source again?

[10:16:04.0369] <nbp>
to capture aliased variables.

[10:17:00.0626] <djvj>
nbp: I'm not sure how that is implied.

[10:18:04.0540] <nbp>
djvj: If we are getting rid of stencil data, which caches scope chain information with aliased variables. We would have to compute it once more.

[10:19:19.0233] <tcampbell>
/me pto today

[10:21:12.0929] <djvj>
we're not really "getting rid of it", I don't think?  If we treat the stencil structure as a self-contained representation of the parsed info from a script/function, then we are kind of just adding a flexible policy lever for things we are doing on an ad-hoc basis right now.

[10:21:42.0173] <djvj>
e.g. when we compile a script today, we don't keep any stencil around, and when we lazify we throw away a bunch of stuff and recompute.

[10:21:52.0694] <djvj>
or we xdr it via an ad-hoc channel

[10:22:10.0399] <jorendorff>
djvj: Seriously though, if Stencil scopes are an input to nested function parsing, then we do have to keep them around, which implies keeping the string table around I think

[10:22:11.0821] <djvj>
for some ad-hoc set of identified situations (startup cache, etc.)

[10:22:29.0898] <jorendorff>
I don't see how to use the run-time scopes instead

[10:23:00.0624] <jorendorff>
unless we decide to refactor `js::Scope` away from GC, instead of making a new one for Stencil

[10:23:13.0307] <djvj>
jorendorff each full-parse for a given function body would just maintain its own table that would pull in the JSAtoms* it runs across for canonicalization as it went along.

[10:24:04.0950] <jorendorff>
djvj: That would work for that, but I'm saying the old string table still had to be kept anyway

[10:24:09.0881] <djvj>
if we do a full-parse of an inner body from that, then that creates a new parse context with its own little table, which can dedup up the chain of enclosing full-parse atom maps, terminating at JSAtom*s

[10:25:06.0103] <djvj>
it's actually basically a mirror of what aliased var lookups end up doing anyway :)

[10:25:18.0204] <jorendorff>
djvj: the chain ... ok, the dedup-ing happens in any thread, right? so these string tables *all* need to be thread-safe (`Sync` in Rust terminology) right?

[10:26:27.0914] <djvj>
it should be local per script body though, and uses of enclosing info is purely read-only/functional (it's not actually doing an aliased-var lookup, so it doesn't need to mark the names as used-in-inner-scope or anything).

[10:27:34.0443] <jonco>
sfink: can I get a review of D61173 when you have a sec?  it's just removals

[10:27:48.0054] <jorendorff>
djvj: OK, so the idea is that once a string table is exposed to any other thread, it's frozen forever (extremely Rust-y idea, would work)

[10:29:32.0782] <djvj>
parsing/compilation expands the leaves of this structure

[10:30:09.0038] <djvj>
those edges might need some bit of synchronization, but that should only be associated with parse dispatches and completions, so pretty coarse grained

[10:31:06.0161] <jorendorff>
djvj: No extra synchronization, whatever is used for parse dispatches and completions is already sufficient IIUC

[10:31:19.0990] <jorendorff>
i learned that by thinking about rust channels

[10:31:38.0690] <jorendorff>
there's no "walk the entire contents of a struct down to the leaves and make sure everything is ready to be shared"

[10:32:37.0925] <jorendorff>
If a struct is `Sync` then it's always ready to become forever shared and immutable

[10:33:21.0611] <jorendorff>
in Rust that "becoming shared" happens in the typeck/borrowck system, no runtime code

[10:33:52.0078] <djvj>
So if we don't need to care about script stencils referencing inner body stecils directly, yeah, it's fine.

[10:34:52.0604] <jorendorff>
weird rule

[10:35:22.0466] <jorendorff>
we can have scopes point up, and scripts point down, and scripts point to scopes, without having refcount cycles

[10:35:29.0071] <jorendorff>
if that was the concer

[10:35:31.0251] <jorendorff>
 * if that was the concern

[10:37:17.0334] <decoder>
Jandem: it is not parsed automatically, but I regularly update the configs and yes, langfuzz uses that option.

[10:37:28.0685] <djvj>
No, I was thinking of some need (probably unnecessary) to walk top-down from a stencil for an outer function body to a list of all its (currently live) inners

[10:38:11.0807] <jorendorff>
that's the kind of thing i meant to say, i don't know if it's necessary either

[10:48:39.0035] <nbp>
Is there any recurrent meeting where stencil API evolution is discused on a regular basis? Or would this be on-demand in this channel?

[10:59:23.0158] <jorendorff>
good question

[11:16:02.0369] <RyanVM>
Waldo: ping

[11:19:08.0095] <RyanVM>
tcampbell: ping

[11:21:54.0588] <tcampbell>
Uh oh

[11:24:12.0895] <RyanVM>
hi, I'm trying to build the 68.5esr RCs today and came across bug 1596706

[11:24:22.0980] <RyanVM>
AFAICT that needs to land on ESR68 but never got nominated for uplift?

[11:24:28.0348] <RyanVM>
patch grafts cleanly

[11:28:18.0936] <tcampbell>
RyanVM: i'll add an esr request. Thanks for noticing

[11:30:17.0258] <RyanVM>
ty

[11:37:03.0862] <jorendorff>
Waldo: ping

[11:37:52.0437] <Waldo>
@jorendorff:mozilla.org: EOD Germany, at a jazz club, I am not here. üò•

[11:38:04.0005] <jorendorff>
awesome, sorry forgot

[11:38:54.0628] <Waldo>
Du hast vergessen, kein Problem.

[11:39:46.0522] <tcampbell>
ESR request submitted

[11:40:18.0707] <tcampbell>
/me back to not being around

[12:45:35.0700] <jorendorff>
Does anyone understand `JSOp::AsyncAwait`? I am finally getting around to updating documentation for the generator/async instructions

[12:45:52.0888] <jorendorff>
when I landed that huge patch stack to update all the opcode documentation, i wimped out on those

[12:54:29.0010] <jorendorff>
the ECMA-262 spec text for Await seems meaningless to me

[13:55:21.0503] <mccr8>
Can a string jsid keep a global alive?

[13:56:04.0968] <jorendorff>
mccr8: I can't imagine a way that could happen

[13:56:46.0002] <jorendorff>
ok, i imagined something, it would be possible to create some kind of weak-atom-keyed table with a value that keeps a global alive

[13:57:11.0710] <jorendorff>
It wouldn't be a good idea to do that, and WeakMap does not allow string keys.

[13:57:32.0580] <smaug>
Anyone familiar with off-thread compilation? How is one supposed to cancel compilation if the callback hasn't been called yet? https://searchfox.org/mozilla-central/source/js/public/OffThreadScriptCompilation.h#44

[13:58:18.0591] <smaug>
or perhaps such canceling isn't needed? (though a tryserver crash seems to hint otherwise )

[13:58:23.0543] <mccr8>
Ok, thanks.

[14:01:53.0205] <jorendorff>
smaug: i think it is believed that cancellation isn't needed. crash sounds very interesting. 

[14:04:10.0508] <smaug>
something to do with shutdown

[14:04:34.0841] <jorendorff>
yeah, makes sense, though I would have thought we'd join all those threads before tearing down data they're working on

[14:05:58.0328] <smaug>
ok. I'll keep investigating this some more. Just trying to finish a patch written by someone else

[14:08:07.0862] <jorendorff>
enjoy


2020-02-04
[18:10:18.0401] <jorendorff>
It's hilarious how any time the ECMA spec must venture into using ordinary English words, the result is a total semantic train wreck

[19:19:32.0539] <arai>
mmm, again I cannot run jstests locally, due to wpttest cannot find manifest

[19:22:08.0645] <arai>
err, not manifest, but mozinfo.json I guess

[19:25:52.0107] <arai>
I thought this got resolved some time before...

[19:34:22.0568] <arai>
looks like, we cannot pass js shell path with absolute path ?  according to the operation here  https://searchfox.org/mozilla-central/rev/2e355fa82aaa87e8424a9927c8136be184eeb6c7/js/src/tests/jstests.py#354-359

[19:35:19.0515] <arai>
`os.path.join` there cannot resurrect the leading `'/'` after split

[19:37:05.0971] <arai>
on automation, the path is passed with relative path

[19:45:55.0035] <arai>
looks like it's not the reason why it fails

[20:02:02.0911] <arai>
so far, it looks like, 1. I have to be in virtualenv created while building JS shell  2. I have to have default MOZ_OBJDIR directory and mozinfo.json there (not sure why it's referred instead of one in objdir for js shell...)

[20:03:23.0269] <jorendorff>
using `.split()` on a path is not the best plan in python

[20:05:43.0515] <arai>
the mozinfo.json is referred here https://searchfox.org/mozilla-central/rev/2e355fa82aaa87e8424a9927c8136be184eeb6c7/testing/mozbase/mozinfo/mozinfo/mozinfo.py#252

[20:10:49.0273] <arai>
I wonder how things are working on automation...

[20:12:08.0945] <arai>
sfink: do you know how mozinfo.json's path is retrieved/calculated in jstests on automation?

[20:12:44.0493] <arai>
I cannot find any reasonable path to get correct mozinfo.json

[20:13:36.0739] <jorendorff>
arai: I build with `mach build` and there's a mozinfo.json file in the root of my objdir

[20:14:09.0693] <arai>
jorendorff: so, you're using JS shell built by mach build ?

[20:14:33.0569] <jorendorff>
Yes, using `ac_add_options --enable-application=js`

[20:14:55.0968] <arai>
I'm using autospider.py (equivalent to configure + make afaik)

[20:15:21.0233] <jorendorff>
yes... definitely both ought to work :-|

[20:15:50.0040] <arai>
the issue is that, in JS shell build, we don't copy web-platform directory to objdir

[20:15:54.0095] <arai>
and refer in-tree one

[20:16:25.0760] <arai>
and the fallback path for getting mozinfo.json walks up from web-platform directory

[20:16:53.0796] <arai>
if the web-platform directory is placed inside objdir, it will find mozinfo.json

[20:17:06.0858] <arai>
but if the web-platform directory is placed outside of objdir, it won't

[20:18:28.0856] <arai>
jorendorff: is web-platform directory copied to objdir/testing if you use mach build ?

[20:19:12.0050] <jorendorff>
hmm. no

[20:19:32.0489] <jorendorff>
`find . -name web-platform` comes up empty in my objdir

[20:20:27.0302] <arai>
hm, then there's some more relatd things that I'm not aware of :P

[20:22:47.0084] <arai>
jorendorff: how do you run jstests ?

[20:22:53.0540] <arai>
are you inside virtualenv ?

[20:24:15.0611] <jorendorff>
I have a bash script that I use

[20:26:19.0301] <jorendorff>
arai: the relevant part is:
```
JSTESTFLAGS="--args --rust-frontend"

# Run jit-tests.
set -x
cd "$SRCDIR/jit-test"
python jit_test.py -f --no-slow $JSTESTFLAGS "$JS" "$@" || echo "FAIL FAIL FAIL"

# Run js/tests.
cd "$SRCDIR/tests"
python jstests.py -j8 $JSTESTFLAGS "$JS" "$@"
```

[20:26:47.0249] <jorendorff>
looks like I `cd` into the test directories before running tests

[20:26:48.0515] <arai>
so, it's not inside virtualenv

[20:26:58.0329] <jorendorff>
right, it's not

[20:29:40.0803] <arai>
```
Traceback (most recent call last):
  File "jstests.py", line 586, in <module>
    sys.exit(main())
  File "jstests.py", line 547, in main
    test_count, test_gen = load_tests(options, requested_paths, excluded_paths)
  File "jstests.py", line 468, in load_tests
    excluded_paths)
  File "jstests.py", line 396, in load_wpt_tests
    manifest_filters=[path_filter, filter_jsshell_tests])
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/testloader.py", line 190, in __init__
    self._load_tests()
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/testloader.py", line 253, in _load_tests
    for test_path, test_type, test in self.iter_tests():
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/testloader.py", line 244, in iter_tests
    inherit_metadata, test_metadata = self.load_metadata(manifest_file, metadata_path, test_path)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/testloader.py", line 224, in load_metadata
    metadata_path, test_path, test_manifest.url_base, self.run_info)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/manifestexpected.py", line 488, in get_manifest
    url_base=url_base)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/backends/static.py", line 94, in compile
    **kwargs)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/backends/static.py", line 87, in compile_ast
    **kwargs)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/backends/static.py", line 28, in compile
    return self._compile(tree, data_cls_getter, **kwargs)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/backends/base.py", line 34, in _compile
    self.visit(tree)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/node.py", line 9, in visit
    return func(node)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/backends/base.py", line 53, in visit_DataNode
    self.visit(child)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/node.py", line 9, in visit
    return func(node)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/backends/base.py", line 53, in visit_DataNode
    self.visit(child)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/node.py", line 9, in visit
    return func(node)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/backends/base.py", line 53, in visit_DataNode
    self.visit(child)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/node.py", line 9, in visit
    return func(node)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/backends/static.py", line 34, in visit_KeyValueNode
    value = self.visit(child)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/node.py", line 9, in visit
    return func(node)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/backends/static.py", line 43, in visit_ConditionalNode
    if self.visit(node.children[0]):
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/node.py", line 9, in visit
    return func(node)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/backends/static.py", line 61, in visit_UnaryExpressionNode
    operand = self.visit(node.children[1])
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/node.py", line 9, in visit
    return func(node)
  File "/Users/arai/projects/rust-frontend/testing/web-platform/tests/tools/wptrunner/wptrunner/wptmanifest/backends/static.py", line 53, in visit_VariableNode
    value = self.expr_data[node.data]
KeyError: u'early_beta_or_earlier'
```


[20:29:48.0937] <arai>
this is the error

[20:30:53.0956] <arai>
to my understanding, it happens because mozinfo.json is not found

[20:31:06.0515] <arai>
(mozinfo.json has 'early_beta_or_earlier' entry

[20:46:44.0055] <arai>
oh, if I fixed the objdir detection in jstests.py, web-platform directory is created in objdir/_tests

[20:48:42.0733] <arai>
but still it tries to find mozinfo.json from in-tree web-platform directory (as fallback for not being in venv)

[20:58:32.0390] <arai>
why is jstests dependent on wpttest in the first place?

[21:15:22.0628] <jorendorff>
streams

[21:48:51.0916] <arai>
ah, I see

[21:53:02.0673] <arai>
filed https://bugzilla.mozilla.org/show_bug.cgi?id=1613021 and https://bugzilla.mozilla.org/show_bug.cgi?id=1613025 for above issues

[01:12:25.0218] <Waldo>
morgen

[01:56:54.0502] <Waldo>
Ye gods.  https://bugzilla.mozilla.org/show_bug.cgi?id=583925 was nine and a half years ago already.

[01:58:37.0528] <Waldo>
/me idly wonders what caused him to get a regular ol' train seat for the trip to Berlin, but a seat in a compartment for the trip back to Frankfurt

[02:32:31.0052] <evilpie>
Waldo: the assignment is probably random unless you specify a preference

[02:32:53.0484] <evilpie>
The compartment is not considered a higher class

[02:33:08.0100] <Waldo>
Hrm.  I...don't remember having an opportunity to specify a preference, but probably I missed it.

[02:33:23.0885] <Waldo>
Yeah, it's just different, not obviously better or worse.

[02:45:02.0029] <nbp>
jandem: You might be interested in adding three.js shell benchmark that anba attached to https://bugzilla.mozilla.org/show_bug.cgi?id=1529343

[02:45:25.0308] <nbp>
 * jandem: You might be interested by three.js shell benchmark that anba attached to https://bugzilla.mozilla.org/show_bug.cgi?id=1529343

[02:46:48.0015] <jandem>
nbp: yeah I saw, that's great :) 

[02:47:55.0968] <jandem>
anba++

[02:49:47.0930] <Waldo>
!summon karmabot

[03:15:14.0444] <Waldo>
/me stabs cbindgen build reqs

[03:15:56.0705] <Waldo>
Hopefully the free DB wifi isn't so limited I can't get the update.  üòï

[03:42:49.0999] <evilpie>
My train got canceled..

[03:51:19.0390] <Waldo>
Too much rain or something?  I passed through some pretty stiff rain in Hildesheim, regular downpour at the station.

[04:15:47.0680] <evilpie>
Not sure, the app says technical failure on train

[04:18:01.0310] <Waldo>
I don't think I've ever encountered a checkin process as terrible as checking in for a Lufthansa flight operated by United before.  Keep getting runarounds to check in on the other site...

[04:18:26.0520] <Waldo>
We did have a ten-minute delay at one station, for reasons they explained but I was listening to music too much to hear precisely what.

[04:20:01.0888] <evilpie>
oh yeah, one time I waited in line for almost 30 minutes to drop-off my back, only for United to tell me I need to go into the Lufthansa line

[04:20:23.0580] <evilpie>
or maybe the other way?

[04:22:09.0531] <Waldo>
I'm just working through the online/app/site checkin process.  Getting to the gate in Frankfurt could be its own barrel of fun.

[04:22:25.0402] <evilpie>
luckily today I went to the central station a bit earlier to buy some things so I am on a different slower train with two instead of one connection

[04:25:07.0419] <Waldo>
I arrived just early enough to grab a sandwich, pastry, and coffee to take to my track, with only a minute or so from then til the train showed up.

[04:26:21.0668] <Waldo>
Is there some way I ought have known where car 7 would line up in advance, other than walking much of the length of the train?  I could line up with the second-class cars, but there were enough of them that didn't really narrow things down at all...

[04:27:44.0170] <evilpie>
the display on the platform will only show the "class" and section

[04:28:02.0034] <evilpie>
the app can actually show the exact order of train cars

[04:28:38.0421] <Waldo>
Ah, the app that I somehow could not receive my ticket in but instead had to print it at the station.  üòõ

[04:28:57.0384] <evilpie>
you should just book your tickets on bahn.de next time

[04:29:31.0801] <Waldo>
I just picked whatever was the top hit on Google, my mistake I guess.

[04:29:49.0550] <evilpie>
actually most platforms have information charts in the middle with this information, but the order can of course change 

[04:44:45.0835] <Waldo>
My compartment has a father and his moderately energetic roughly-three-year-old in it.  Good entertainment.  :-)

[04:49:34.0748] <Waldo>
She seems to take inordinate pleasure in crawling underneath the window-side table to get in and out around me.  (Who wouldn't?)

[04:52:57.0468] <Waldo>
Very windy rain in Fulda, too.

[05:11:18.0013] <evilpie>
There are compartments just for kids

[05:13:07.0411] <Waldo>
Yeah, I remember seeing something about family compartments before.  The rest of the compartment residents are not families with kids, so I think I just got a serendipitous draw.

[05:18:12.0722] <evilpie>
There are a lot of families on my train as well, there are school holidays in Brandenburg

[05:18:51.0738] <nbp>
There is a nursery in the train? Be careful of the garbage collection!

[05:20:05.0597] <Waldo>
nbp: There's a solution, as long as we do it one at a time.  http://quotes.burntelectrons.org/4823

[06:17:44.0571] <yulia>
im not at work yet. TC39 is in the evening

[06:17:47.0373] <yulia>
so i made something

[06:20:23.0828] <yulia>
its from the war/peace meme

[06:26:52.0029] <Waldo>
That's only one boat.

[06:27:05.0273] <yulia>
yeah well at least its not a pylon

[06:42:19.0559] <nbp>
Java crypt ?

[06:42:46.0028] <jorendorff>
it is kind of surprising they don't share any other letters

[06:43:07.0287] <nbp>
SmaashMonkey?

[06:43:31.0936] <jorendorff>
i just noticed how the goose's foot sticks out of the frame a bit and I love that detail

[06:43:44.0695] <yulia>
i have papers for that

[06:46:26.0920] <jorendorff>
you have what

[06:47:02.0064] <yulia>
haha i mean the degree in art, i joke though

[07:04:11.0580] <evilpie>
yulia: I don't think I will be able to attend the meeting at 8pm

[07:38:20.0483] <yulia>
evilpie: ok

[07:38:44.0524] <jorendorff>
Do we have a meeting at 8pm?

[07:38:53.0852] <yulia>
jorendorff: its the start of tc39

[07:39:00.0792] <jorendorff>
ah ok

[08:47:57.0593] <jorendorff>
TIL:
```
function *gen() {
  print("enter gen");
  yield 1;
  yield 2;
  print("leave gen");
}
let [a, b] = gen();
```

[08:48:00.0946] <jorendorff>
guess what happens

[08:50:06.0185] <jorendorff>
I'm trying to figure out what `NopDestructuring` and `TryDestructuring` actually do, so if anyone understands them, let me know

[08:51:33.0202] <yulia>
i would not have expected that

[08:52:00.0743] <jorendorff>
it's surprising. it makes sense, while also being a little disappointing

[08:52:21.0875] <jorendorff>
destructuring `[a, b]` is only going to call `iter.next()` twice

[08:52:55.0333] <jorendorff>
first time it gets `a = 1`, second time it gets `b = 2`, and destructuring has all the values it needs.

[08:53:36.0806] <jorendorff>
It calls `iter.return()`, which bails out of the body of `gen` without doing the final `print`.

[08:56:22.0884] <yulia>
if i do it manually, i would call `next` three times before getting the final print... and i get that result if i destructure with three elements, so it makes more sense than i thought maybe?

[09:24:14.0309] <jorendorff>
OK, it appears `TryDestructuring` is needed only because of a narrow technical problem. hmm.

[10:31:02.0162] <sdetar>
Would somebody be willing to investigate this crash bug?  We are being asked to give it some attention if possible.   https://bugzilla.mozilla.org/show_bug.cgi?id=1612863

[10:46:13.0430] <tcampbell>
Did we land any interesting features in 72? I have a vague recollection of this InitSelfHostedCode failing before due to some prefs causing fatal warnings processing self-hosted.js

[10:47:23.0469] <jorendorff>
yulia: when did `??` land?

[10:47:32.0812] <yulia>
oh, 72

[10:47:36.0641] <jorendorff>
warnings, seems unlikely

[10:48:03.0819] <yulia>
Nullish coalescing did land in 72

[10:48:10.0027] <yulia>
optional chaining landed in 73

[10:48:15.0260] <yulia>
 * optional chaining landed in 74

[10:49:07.0693] <tcampbell>
jorendorff: do you remember this at all? I think it was something with bigint and werror?

[10:49:16.0673] <jorendorff>
no

[10:50:12.0569] <jorendorff>
werror mode, why

[10:50:37.0230] <jorendorff>
tcampbell: well, easy enough to check locally

[11:02:28.0479] <tcampbell>
aha! https://bugzilla.mozilla.org/show_bug.cgi?id=1567902

[11:03:42.0354] <tcampbell>
in that case, one needed to set extra-warnings to break things

[11:03:58.0455] <mccr8>
Interesting

[11:04:55.0846] <tcampbell>
I'll try repeating that shell experiment

[11:06:20.0288] <jorendorff>
yep

[11:06:23.0810] <jorendorff>
ugh

[11:32:13.0267] <jorendorff>
mgaudet: tcampbell: ok, Stencil question

[11:32:31.0724] <jorendorff>
arai has a patch that would turn `fullyInitFromEmitter` into a template

[11:33:42.0876] <jorendorff>
`JSScript::fullyInitFrom<T>(JSContext* cx, JSScript* script, T t)`

[11:34:55.0073] <jorendorff>
the idea is, there's a super-thin wrapper of inline functions around the BytecodeEmitter

[11:35:06.0233] <jorendorff>
this lets us shim in something other than a BytecodeEmitter, and still, use exactly the same code.

[11:35:28.0793] <tcampbell>
I guess I'm not entirely convinced that is better than repeating ourselves

[11:35:38.0784] <jorendorff>
So first of all, I love decoupling from BytecodeEmitter there

[11:35:44.0132] <jorendorff>
My question: how about instead of an abstraction, we create a concrete struct as the thing we pass

[11:36:01.0908] <jorendorff>
ok, so you would do one less copy

[11:36:14.0396] <jorendorff>
hmm

[11:36:49.0222] <jorendorff>
the advantage of arai's way is, if a change to fullyInitFrom is going to cause problems for us, we get compile-time bustage

[11:36:54.0986] <jorendorff>
instead of a new field which we fail to initialize

[11:37:17.0848] <jorendorff>
ignore my question, let's figure out the right way to do it

[11:37:41.0364] <jorendorff>
tcampbell: the reason I suggested a struct is, that struct would be a first cut at stencil

[11:37:43.0605] <tcampbell>
XDR and Clone are both repetitions today

[11:38:37.0616] <jorendorff>
ok

[11:38:41.0836] <tcampbell>
I guess I expect this code to change several more times, so what will be easier to keep up with as we go

[11:39:38.0929] <tcampbell>
I find maintaining shims for templates to be just one more layer of abstraction to mentally track. I do see the argument for compile-time errors though

[11:40:14.0986] <jorendorff>
i was asking if I should tell arai on review to drop the template and use the concrete struct

[11:40:22.0627] <jorendorff>
 * i was asking if I should tell arai on review to drop the template and make a concrete struct

[11:41:47.0269] <tcampbell>
That could make sense. I admit I don't have a clear vision for this part now (and it certainly doesn't need to be my version).

[11:42:20.0516] <jorendorff>
tcampbell: I thought the plan was, make a stencil struct, make the output of the frontend be a stencil, and then fullyInitFromEmitter becomes stencil::Instantiate

[11:42:47.0856] <tcampbell>
this is true.

[11:43:30.0306] <tcampbell>
the second half of fullyInitFromEmitter is all kind of gross things right now

[11:43:48.0234] <jorendorff>
here are the two patches https://github.com/mozilla-spidermonkey/rust-frontend/pull/27/commits

[11:44:02.0587] <jorendorff>
1. abstract fullyInitFromEmitter away from BytecodeEmitter

[11:44:28.0241] <jorendorff>
2. get Jsparagus hooked up using the template

[11:44:33.0919] <jorendorff>
we could instead do it like this:

[11:44:46.0951] <jorendorff>
 * 1. abstract fullyInitFromEmitter away from BytecodeEmitter by making it a template

[11:45:21.0769] <jorendorff>
1. abstract fullyInitFromEmitter away from BytecodeEmitter by making it take a POD struct instead of a stencil

[11:45:26.0878] <jorendorff>
2. get Jsparagus hooked up using the struct

[11:45:40.0076] <tcampbell>
I guess your question is should we push or pull. I would say push from frontend to stencil

[11:45:49.0628] <tcampbell>
(aka, use the struct you propose)

[11:46:37.0573] <jorendorff>
I only asked because pulling (the template style) is zero-cost right now, as all those methods will get inlined away

[11:46:57.0961] <jorendorff>
pushing does some extra copying of values

[11:47:48.0877] <tcampbell>
this part is kind of gross https://searchfox.org/mozilla-central/source/js/src/vm/JSScript.cpp#4562-4565

[11:48:34.0153] <tcampbell>
and probably needs a different view with stencil. contained entirely in Instantiate if possible, but we need a way to stash the scope in mean time

[11:48:57.0038] <jorendorff>
tcampbell: Can the caller dismantle those ObjectBoxes after fullyInitFromStencil returns?

[11:49:28.0486] <jorendorff>
caller handles their own cleanup for their own structs

[11:49:46.0013] <jorendorff>
*FunctionBoxes

[11:50:04.0271] <tcampbell>
Ideally yes

[11:50:10.0962] <jorendorff>
...and in practice?

[11:50:30.0219] <tcampbell>
well, in future yes. Currently.. not 100% sure

[11:51:14.0000] <jorendorff>
ok, it does seem like this currently is not exactly cleanup

[11:51:19.0190] <bzbarsky>
btw

[11:51:32.0657] <tcampbell>
things like the nslots code needs a new home

[11:51:42.0530] <bzbarsky>
It sure would be nice if jsapi documented which things will set an OOM exception on the JSContext and which won't...

[11:52:06.0205] <tcampbell>
that will be burned into the ImmutableScriptData from frontend

[11:52:37.0065] <jorendorff>
I think nslots can be computed by the caller as part of populating the stencil

[11:52:45.0280] <jorendorff>
so, before entering fullyInitFrom

[11:53:04.0763] <tcampbell>
correct. I think my point is the current fullyInitFromEmitter is a weird cut

[11:53:22.0341] <jorendorff>
this is quite nice, because in arai's patch the new abstraction knows exactly which steps are fallible, but I don't think that's necessary

[11:54:19.0202] <bzbarsky>
/me is seeing a lot of JSAPI consumers writing nonsensical code because they can't tell whether exceptions have been thrown

[11:54:54.0127] <tcampbell>
JSAPI needs an overhaul for sure

[11:54:58.0345] <jorendorff>
yes

[11:56:22.0000] <tcampbell>
(A general question I put in my internal timeline for end of the year, but probably could have a metabug with a bunch of smaller things to fix along the way)

[11:58:04.0291] <tcampbell>
jorendorff: the other strange part with fullyInitFromEmitter is that a handful of things are set in the JSScript::Create call instead

[11:58:20.0005] <tcampbell>
sourceStart, etc

[11:58:24.0101] <bzbarsky>
So for example...

[11:58:34.0939] <bzbarsky>
RootedVector 

[11:58:46.0034] <bzbarsky>
If I try to do stuff with it that leads to allocation failures

[11:58:51.0121] <bzbarsky>
It reports an error on the JSContext

[11:58:58.0539] <bzbarsky>
But determining this takes quite some digging

[11:59:12.0959] <bzbarsky>
And is non-obvious because the callsites that return false do not take a cx arg...

[11:59:24.0910] <tcampbell>
The AllocPolicy adds a lot of complexity to determining thing :(

[11:59:46.0720] <bzbarsky>
Sure

[11:59:54.0621] <bzbarsky>
Point is, this should be documented on the class, imo

[11:59:58.0218] <tcampbell>
js::TempAllocPolicy is just a prank we play on ourselves

[12:00:07.0145] <tcampbell>
makes sense

[12:00:07.0502] <bzbarsky>
heh

[12:01:55.0640] <tcampbell>
I've been meaning to write up a general static analysis proposal about having these sort of characteristics rendered into searchfox. can-gc, can-run-script, sets-out-of-memory, etc

[12:02:57.0138] <tcampbell>
there seem to be a bunch of these characteristics which in theory our tooling should reliably tell us even if our comments rot

[12:03:32.0412] <tcampbell>
a lot of them are just taint analysis of can-this-method-ever-call-X

[12:04:57.0434] <tcampbell>
mostly just a dream, but the more I've looked at it and talked to people the more reasonable it seems

[12:12:01.0361] <jorendorff>
arai: I would like to land your patches on rust-frontend, and file a follow-up bug to improve it

[12:12:31.0306] <jorendorff>
A template is good for keeping the existing code completely unchanged, but we should be changing it

[12:12:47.0891] <arai>
I see

[12:12:57.0987] <jorendorff>
arai: Would you like to work on that, or shall I?

[12:13:51.0461] <arai>
the "improve" part?  if so, yes, I'd like to work on it :)

[12:13:59.0756] <jorendorff>
yes

[12:14:04.0442] <jorendorff>
ok, i will add a lot of review comments

[12:14:09.0370] <jorendorff>
but then i will land this unchanged

[12:14:27.0172] <jorendorff>
on rust-frontend

[12:14:31.0094] <arai>
uh, I'd like to fix some typo at least :P

[12:14:48.0083] <jorendorff>
ok, then, i will add a lot of review comments and Approve it

[12:15:12.0237] <arai>
thanks :)

[12:18:21.0326] <jorendorff>
tcampbell: I don't know why the inner functions' scopes are only set up at the end

[12:18:44.0393] <tcampbell>
jorendorff: because stuff before is fallible

[12:19:01.0531] <jorendorff>
but why does it matter? aren't the functions dead if anything fails?

[12:19:11.0786] <tcampbell>
nope

[12:19:36.0648] <tcampbell>
debugger goes dumpster diving

[12:19:42.0826] <jorendorff>
good old debugger

[12:19:54.0049] <tcampbell>
(not intentionally, but that is what happens)

[12:20:46.0758] <tcampbell>
I think that stuff probably should be cleaned up soon. There is some complexity when an inner-inner function looks live, but it's root-parent is failed to fully compile

[12:21:54.0692] <tcampbell>
ideally we'd have a bit more isolation of the stencil of an inner function since things just get confusing when you think about how parent jsscripts are entangled

[12:34:30.0283] <tcampbell>
jorendorff: ohh.. I remember. During delazification we may OOM and if that happens must return to lazy mode

[12:34:56.0778] <tcampbell>
In that case, we can't reference the scopes from an inner-lazy because they are no longer valid

[12:35:19.0254] <jorendorff>
ok

[12:35:39.0435] <tcampbell>
To deal with this, we push back the update of inner-lazy-functions until we are sure we won't change our mind

[12:35:49.0298] <jorendorff>
right, that makes sense now

[12:36:10.0337] <jorendorff>
yes, that seems like a really good reason, actually, we can't change it


2020-02-05
[19:19:51.0761] <RyanVM>
tcampbell: OOC, did local debugging get anywhere with bug 1612863? It's the only bug on my radar at the moment I'd respin the 73 RC for.

[22:58:02.0050] <jandem>
RyanVM: commented on the bug. The extraWarnings option _should_ no longer affect self-hosted so it must be something else..

[02:39:19.0806] <Waldo>
morning all, one last time from Germany

[02:39:37.0652] <Waldo>
flight starts boarding in the next half hour or so

[02:57:34.0323] <Waldo>
Time to board, see everyone on the flip side to some uncertain sleep-related degree

[05:46:33.0740] <tcampbell>
Yeah, I didn't get any further than that. I'll look at the diff of selfhosted.js between 71 and 72 and see if anything interesting is there. The compileoptions for selfhosting seem reasonable enough

[08:41:01.0021] <tcampbell>
RyanVM: We've ruled out the past reasons. I'm not seeing obvious explainations. I'll poke at it a bit more today, especially the see-also in automation (which are OOM? huh?)

[08:47:21.0226] <jonco>
sfink: ping

[08:52:51.0851] <mgaudet>
/me mildly wishes Matrix had better threads.

[08:57:59.0860] <mgaudet>
So regarding the conversation yesterday about fullyInitFromEmitter and creating an intermediate template: I actually have patches that go in the intermediate template direction for JSScript. I really actually like arai's approach and want to see it (or something like it) get onto central, because we have to go that road anyhow in order push initialization of all the scripts to one batch location. (cc jorendorff / tcampbell ) The combo of Arai's patch and my patch gets us pretty close I, I think! 

[08:59:19.0397] <sfink>
jonco:  https://searchfox.org/mozilla-central/source/js/src/gc/WeakMap-inl.h#153

[09:00:12.0849] <jorendorff>
mgaudet: Did you see arai's new patch? it's https://github.com/mozilla-spidermonkey/rust-frontend/pull/27

[09:00:21.0670] <jorendorff>
i'm going to land it in about 40 minutes, reviewing something else right now

[09:00:27.0804] <jorendorff>
land in rust-frontend, that is, not m-c

[09:00:31.0347] <mgaudet>
jorendorff: I did! 

[09:00:45.0776] <jorendorff>
yeah, i really like how it turned out, it's a step

[09:00:49.0817] <mgaudet>
jorendorff: My argument is that this approach makes enough sense we probably should also do it in central

[09:00:58.0177] <mgaudet>
rather than keep it on the fork

[09:01:17.0924] <jorendorff>
ok, i'll ask arai to do that

[09:01:29.0626] <jorendorff>
mgaudet: r?you

[09:02:21.0781] <mgaudet>
jorendorff: Sounds good. I didn't do a detailed review, but just a quick scan and I realized it's going to save us (cough, me, cough) a bunch of work when it comes time to start batching up initialization of GC'd things in the old parser 

[09:02:34.0531] <jorendorff>
yep

[09:02:45.0653] <jorendorff>
we would love to have those virtual methods gone as soon as feasible

[09:02:55.0945] <jorendorff>
so we can move this struct into Rust 

[09:03:19.0917] <jorendorff>
some of them look pretty easy to drop

[09:03:41.0930] <jorendorff>
like, why do we have special CG span types, I don't know

[09:04:31.0261] <mgaudet>
Oh, weird. I didn't notice inheritance layout of this thing

[09:04:33.0858] <nbp>
jorendorff: I had thought the StencilScript would have been a Rust structure?

[09:05:03.0434] <jorendorff>
nbp: Oh, it will be

[09:05:13.0067] <mgaudet>
hrm. I'll have to take a close look at this now. 

[09:05:21.0749] <jorendorff>
nbp:  I didn't expect such an incremental approach but I really like it now that it's happening

[09:05:37.0711] <jorendorff>
C++ spaghetti code -> C++ struct -> Rust struct

[09:12:31.0300] <mgaudet>
jorendorff ah ok; I misunderstood part of this. (This also ties back to the templatization of JSScript::fullyInitFromEmitter). So, I have a patch that creates a `stencil::Script` which is reified into a JSScript just before fullyinitFromEmitter. I think I'd been hoping that we'd be able to avoid the fullyInitFromEmitter templatization by instead moving the initialization of everything into the BCEScriptStencil arai wrote. I see now that the initalization is still dependent on the 'algorithm' of fullyInitFromEmitter; I'm now not as sure as I was 15 minutes ago.

[09:13:11.0373] <mgaudet>
(Not saying it's a bad idea, just that the beautiful story I'd told myself was based on me misunderstanding exactly what Arai's patch did when I had read it because I hadn't read through the implications of the SmooshStencil stuff)

[09:13:12.0378] <jorendorff>
mgaudet: I don't understand the concern

[09:13:23.0077] <jorendorff>
but we're flexible!

[09:15:33.0892] <mgaudet>
jorendorff: Oh, Ok this doesn't quite work for me. 

[09:15:40.0786] <mgaudet>
jorendorff: interface wise, it's fine. 

[09:15:54.0944] <mgaudet>
jorendorff: but the BCEStencilScript cannot outlive the BCE it's created from

[09:15:56.0512] <mgaudet>
and I need that

[09:16:05.0638] <djvj>
so i dusted off my thinkpad with the ruined keyboard and updated the linux dev environment on it.  using a USB keyboard and mouse, it works fine, and now I have a sane dev env again.

[09:16:36.0132] <jorendorff>
mgaudet: Well, this is a small step for us, so if it doesn't make things worse for you...

[09:16:48.0672] <jorendorff>
mgaudet: I don't think it goes in the *wrong* direction for you. Does it?

[09:17:05.0051] <mgaudet>
jorendorff: For sure. I'd say still do it; it just doesn't fix quite as much as I had been hoping

[09:17:08.0846] <mgaudet>
but I can keep at it 

[09:17:10.0911] <jorendorff>
Making it clear that most of those fields are just data seems good

[09:17:16.0681] <jorendorff>
and then there are 6 things left

[09:17:23.0216] <mgaudet>
I still have pre-reqs to work through anyhow, so not blocking you is important

[09:17:27.0380] <jorendorff>
Most of those should be easy to turn into just plain data, but

[09:17:53.0192] <jorendorff>
arai refrained from rearranging things that currently touch GC.

[09:18:48.0737] <jorendorff>
Oh

[09:18:49.0866] <mgaudet>
jorendorff: which is a sensible approach; looking at it, I think some of the backing data of those finish calls ought to get stolen into the stencil, but i think we can work that out later

[09:19:04.0865] <jorendorff>
yes exactly

[09:19:45.0020] <jorendorff>
mgaudet: spans need to become either vectors; or something like `std::borrow::Cow<[jsbytecode]>` ("either borrowed or owned, run-time bit says which")

[09:19:51.0341] <allstarschh>
https://bugzilla.mozilla.org/show_bug.cgi?id=1559660

[09:20:22.0578] <allstarschh>
https://searchfox.org/mozilla-central/source/js/src/vm/HelperThreads.cpp#2602

[09:22:07.0510] <mgaudet>
jorendorff: Ok. So to summarize where we're at: I still think we ought to land arai's general patch on central: We may wish to rework it a smidge just to put the changes under a configure flag or somesuch, but my preference (without having talked to Ted, whose objections I didn't quite follow when reading through backscroll) would be that we continue down on top of that approach because it pushes both your stuff and my stuff forward. 

[09:22:28.0058] <mgaudet>
jorendorff: And we can figure out the improved types and ownership after that one is in.

[09:27:44.0689] <jorendorff>
I would like to hear more about ted's thoughts too. The very first ones were like:
> I guess I'm not entirely convinced that is better than repeating ourselves
> XDR and Clone are both repetitions today
but, we already had smooshmonkey bugs due to having our own Yet Another Copy of that fullyInit code, and a goal of stencil is to repeat ourselves less. I think we should go after it.

[09:29:07.0148] <jorendorff>
 * I would like to hear more about ted's thoughts too. The very first ones were like:

> I guess I'm not entirely convinced that is better than repeating ourselves
> XDR and Clone are both repetitions today

but, we already had smooshmonkey bugs due to having our own Yet Another Copy of that fullyInit code, and a goal of stencil is to repeat ourselves less. I think we should go after it.

[09:29:08.0443] <mgaudet>
Ok, those quotes sound pretty positive at the end :) 

[09:29:24.0687] <jorendorff>
I think ted was pretty happy with where we ended up

[09:30:03.0350] <mgaudet>
Ok. cool. I feel caught up, and have accomplished my goal which is to encourage this to go to central. :D 

[10:16:53.0286] <tcampbell>
/me catches up on baglog

[10:16:57.0261] <tcampbell>
*backlog

[10:28:02.0321] <tcampbell>
jorendorff: arai's patch seems like a reasonable step forward

[10:28:16.0739] <jorendorff>
Cool, we all agree

[10:28:43.0371] <tcampbell>
I'd like to get away from the bools sooner rather than later in the stencil script

[10:29:41.0978] <tcampbell>
I'd like ImmutableFlags to be more of the public interface. It was way too painful to get rid of all the various meanings of similar flags we used to have

[10:30:14.0020] <jorendorff>
i looked at it briefly last night...

[10:30:24.0396] <tcampbell>
(we probably can move the flags to another header and fix docs)

[10:31:02.0631] <jorendorff>
seems very easy to fix

[10:31:12.0390] <jorendorff>
since it is already quite organized in fullyInit

[10:31:56.0559] <tcampbell>
I'm not sure where the best place to put things like initTryNotes is

[10:32:08.0953] <tcampbell>
that should already be resolved before the stencilscript

[10:32:53.0470] <tcampbell>
splitting off the ImmutableScriptData stuff from fullyInitFromEmitter probably makes sense

[10:33:11.0260] <jorendorff>
just getting started on it feels so good

[10:33:16.0176] <tcampbell>
:)

[10:33:34.0648] <jorendorff>
it shatters this into like 20 eminently attackable bugs

[10:33:50.0141] <tcampbell>
indeed

[10:33:50.0175] <jorendorff>
or a couple stacks

[10:35:17.0447] <tcampbell>
first content crash in a long time and of course it is GC+TI

[10:36:57.0235] <nbp>
tcampbell: Use ‚Üë in Riot to edit your previous messages (such as baglog) ;)

[10:38:17.0969] <tcampbell>
ooh.. neat!

[10:57:58.0784] <mgaudet>
(Also, if you -keep- hitting up, you can go through many of your previous messages, a nice improvement over slack's implementation) 

[10:58:49.0006] <zbraniecki>
anba: thank you for filing the issues! Can you help me evaluate the severity of them? I'm wondering it I should back out from requesting advancement to Stage 4 (planned for today)

[12:08:17.0839] <bzbarsky>
If I have a JS Function

[12:08:25.0722] <bzbarsky>
Can I recover the global that corresponds to its Realm?

[12:08:29.0522] <bzbarsky>
From script, that is.

[12:10:05.0808] <jorendorff>
hmm. it used to be you could get this somehow using `Object.prototype.valueOf`

[12:10:13.0392] <jorendorff>
that was a long time ago though

[12:10:46.0671] <jorendorff>
oh

[12:11:08.0731] <jorendorff>
bzbarsky: `f.constructor("return this;")()`

[12:11:20.0128] <bzbarsky>
nice

[12:11:33.0568] <bzbarsky>
/me tries that

[12:12:02.0676] <jorendorff>
that'll be the WindowProxy, not the ECMA "global object" -- the latter is hard to get

[12:12:15.0782] <bzbarsky>
Sure

[12:12:30.0146] <bzbarsky>
I need "the thing I should get the TypeError constructor from, for errors this function will throw"

[12:12:32.0365] <bzbarsky>
basically

[12:12:36.0343] <bzbarsky>
So WindowProxy is great

[12:13:51.0514] <bzbarsky>
/me tests

[12:14:14.0944] <bzbarsky>
yep, nice

[13:43:05.0041] <zbraniecki>
anba: for measuring try results for android, are you using `geckoview_example.apk` artifact?

[13:56:11.0974] <mgaudet>
tcampbell: ping? 

[13:56:21.0454] <tcampbell>
pong

[14:51:35.0130] <tcampbell>
bzbarsky: I'm wondering about replacing https://searchfox.org/mozilla-central/rev/3a0a8e2762821c6afc1d235b3eb3dde63ad3b01a/js/xpconnect/src/XPCJSContext.cpp#1271 with ..

[14:51:37.0789] <tcampbell>
` {
    js::AutoEnterOOMUnsafeRegion oomUnsafe;
    if (!JS::InitSelfHostedCode(cx)) {
      // Note: If no exception is pending, failure is due to OOM.
      if (!JS_IsExceptionPending(cx) || JS_IsThrowingOutOfMemory(cx)) {
        oomUnsafe.crash("InitSelfHostedCode");
      }

      // Failed to process self-hosted javascript!
      MOZ_CRASH("InitSelfHostedCode failed");
    }
  }`

[14:51:50.0817] <jorendorff>
tcampbell:  triple backticks

[14:52:17.0302] <tcampbell>
 * ```
{
    js::AutoEnterOOMUnsafeRegion oomUnsafe;
    if (!JS::InitSelfHostedCode(cx)) {
      // Note: If no exception is pending, failure is due to OOM.
      if (!JS_IsExceptionPending(cx) || JS_IsThrowingOutOfMemory(cx)) {
        oomUnsafe.crash("InitSelfHostedCode");
      }

      // Failed to process self-hosted javascript!
      MOZ_CRASH("InitSelfHostedCode failed");
    }
  }
```

[14:53:01.0209] <tcampbell>
turns out `InitSelfHostedCode` will only sometimes set a pending exception

[14:53:11.0833] <jorendorff>
ew

[14:53:18.0161] <tcampbell>
and if you are unlucky to oom in a weird place you crash even worse than oom

[14:53:39.0607] <tcampbell>
and the sheriffs blame other components

[14:53:46.0550] <tcampbell>
 * and the sheriffs come after you

[14:54:30.0770] <tcampbell>
(also trying to show that the startup crashes are probably just OOM, because I can't find any more selfhosted.js config issues)

[14:54:43.0806] <jorendorff>
static analysis is the only way this is ever going to be behind us

[14:55:21.0775] <tcampbell>
the other problem here I had to deal with is that we tried to throw the "out of memory" string before the atom for it was setup

[14:55:31.0495] <tcampbell>
and wackiness ensued

[14:55:35.0097] <jorendorff>
WOW

[14:55:55.0482] <tcampbell>
https://bugzilla.mozilla.org/show_bug.cgi?id=1612767

[14:55:59.0574] <Waldo>
lol

[14:56:33.0897] <Waldo>
About an hour ago on this flight I looked over to my left and randomly saw till walking down the aisle.

[14:57:10.0523] <Waldo>
Turns out there are a few other Mozillians here that I somehow never saw at gate or anything.

[15:08:19.0187] <bzbarsky>
tcampbell: So this is about somewhat nicer error reporting, basically?

[15:08:37.0051] <bzbarsky>
tcampbell: In that it still crashes in exactly the cases when current code crashes?

[15:08:58.0465] <tcampbell>
trying to get OOM crashes in the right bucket

[15:09:01.0460] <bzbarsky>
tcampbell: Or is the important part that right now oom cases lead to a true return value from InitSelfHostedCode ?

[15:09:09.0487] <tcampbell>
this is https://bugzilla.mozilla.org/show_bug.cgi?id=1612863

[15:09:17.0432] <bzbarsky>
In any case, this seems reasonable to me, sure

[15:09:56.0002] <tcampbell>
bzbarsky: is there a recommended reviewer?

[15:11:06.0487] <tcampbell>
(for XPCJSContext initialization)


2020-02-06
[16:40:48.0295] <bzbarsky>
tcampbell: mccr8 or me or bholley

[17:11:35.0349] <Waldo>
Hurray for 2am. Walk Caltrain home, bike at least to a dinner, I can whip this jetlag in no time.

[03:16:12.0862] <nbp>
whoa ‚Ä¶ JavaScript has goto-s:  https://github.com/mozilla-spidermonkey/jsparagus/issues/224

[06:09:33.0639] <evilpie>
Ugh github.com just added code that uses RegExp groups and fails to parse in Firefox :(

[07:15:52.0552] <jorendorff>
wow

[07:22:38.0608] <evilpie>
It's gone already, maybe some A/B test

[08:28:27.0568] <jorendorff>
djvj: What do you think of this? https://bugzilla.mozilla.org/show_bug.cgi?id=1612057

[08:28:52.0776] <nbp>
iain: ^

[08:28:52.0915] <jorendorff>
iain: tcampbell: ^

[08:30:20.0952] <froydnj>
47 bits should be enough for anybody

[08:36:04.0261] <jorendorff>
Waldo: ping

[08:37:37.0996] <jorendorff>
jonco: Would you mind setting priorities or (better) need-info requests on these bugs? https://bugzilla.mozilla.org/buglist.cgi?product=Core&component=JavaScript%3A%20GC&priority=--&resolution=---&f1=creation_ts&o1=greaterthaneq&v1=2016-06-01&f2=flagtypes.name&o2=notequals&v2=needinfo%3F&f3=triage_owner&o3=equals&v3=jcoppeard%40mozilla.com&list_id=15097632

[08:45:19.0625] <Waldo>
hello world from Mountain View, and a full night's sleep

[08:45:24.0432] <Waldo>
jorendorff: pong

[08:45:30.0718] <jorendorff>
are you still on pto?

[08:45:56.0966] <Waldo>
jorendorff: Aside from the Friday before MLK Day, I have not actually been on PTO

[08:46:10.0521] <jorendorff>
oh! cool then

[08:46:24.0608] <Waldo>
jorendorff: Although precisely how much I got done on Tuesday and Wednesday is unclear, and I might record a half-day or a day of PTO to cover part of it.

[08:46:59.0800] <jorendorff>
Waldo: wanted to ask you about intl bugs, nothing major

[08:47:08.0237] <sfink>
deep thoughts by sfink: I just realized that it would be perfectly reasonable to pronounce PTO as "potato"

[08:47:58.0201] <Waldo>
Tuesday I got stuff done on the train, but then I didn't do much after that.  Wednesday I probably got a half-day in before the plane, then on it, but I also watched a couple movies, did some reading, etc. and didn't have the battery to do more than that really, so...

[08:48:21.0468] <jorendorff>
hmm. patio, pesto, spitoon, peyton, patois if you want to be fancy

[08:48:37.0915] <Waldo>
Ich mochte Kartoffeln!

[08:49:05.0923] <Waldo>
Haven't had a potato recently, I've had eyes on them.

[08:49:35.0062] <jorendorff>
3/10

[08:50:05.0032] <Waldo>
harsh

[08:50:26.0738] <nbp>
sfink:  isn't it pronounced Pee-Tea-Ohh! ?

[08:51:34.0378] <jorendorff>
Waldo: ok, actually just one bug

[08:51:41.0388] <jorendorff>
Waldo: https://bugzilla.mozilla.org/show_bug.cgi?id=1609954

[08:51:50.0370] <sfink>
nbp: that's the traditional way, yes. But language is meant to be warped, and "I'm going on potato" seems suggestive of... other things. I'm not sure what other things. But it makes you think in different directions.

[08:52:51.0363] <Waldo>
I guess "on potato" could be a reference to vodka...

[08:53:43.0323] <jorendorff>
Waldo: would you mind fixing that by editing MDN? it just needs someone to do it, just "Note: this is experimental" on those few examples would do it

[08:53:58.0799] <jorendorff>
IIUC

[08:54:00.0806] <Waldo>
Yeah, I was just about to do that.

[08:54:07.0118] <jorendorff>
sweet, thanks

[08:55:01.0105] <sfink>
I just learned last night that Italian is one of the few languages chosen on the merits of the language itself, at least somewhat. All the other Latin derivatives were chosen by being the local dialect of the most influential city (or city-state or whatever). Parisian, Lisbonese, Madri... Madriguel... Madrid-ese, etc.

[08:55:44.0559] <jorendorff>
was it?!

[08:55:59.0444] <sfink>
but for Italian, a bunch of old fuddy-duddies got together and decided to standardize on Dante's language that he used to write eg The Divine Comedy

[08:56:03.0519] <Waldo>
It still *is* "IT".

[08:56:08.0423] <sfink>
because it sounded coolest

[08:56:33.0105] <froydnj>
@gsvelto (who ought to know) has confirmed this

[08:56:44.0113] <sfink>
\o/

[09:34:52.0121] <Waldo>
jorendorff: Poking MDN people to see if I can find out what the style-consistent way to mark examples as using experimental stuff is.  (I'm also asking about maybe making "experimental" indicators more prominent, to plant the seed that this might be needed.)

[09:47:10.0668] <Waldo>
zbraniecki, anba: Commented on the "only do step 1" issue/PR.  I'm not really sure why this change is desirable, exactly, but also it doesn't actually _change_ anything so eh, maybe.

[10:18:48.0228] <jknr>
Hi there!  Hey there! Is there a way to selectively tell Ion which functions it should optimize? Specifically, telling Ion which functions it should avoid inlining? 

[10:18:54.0585] <jknr>
 * Hi there!  Hey there! Is there a way to selectively tell Ion which functions it should optimize? Specifically, telling Ion which functions it should avoid inlining? Hi

[10:43:23.0083] <Waldo>
jknr: I don't believe so.  We have in the past had self-hosted intrinsics that could be used to inform the compiler of certain optimization opportunities, but skimming the set of self-hosted builtins now I can't find anything about this existing presently.

[11:09:38.0939] <mgaudet>
jknr: I suppose if you control the source code, one thing that can be abused is a `with` statement; ie. [here](https://searchfox.org/mozilla-central/source/js/src/jit-test/tests/TypedObject/jit-write-references.js#7) 

[11:10:31.0139] <mgaudet>
putting `with({}){}` inside the function you don't want inlined ought to at least emulate what you're looking for, but there may be other more far-reaching impacts I'm not sure about. 

[11:11:56.0485] <jorendorff>
... don't do that

[11:12:00.0739] <jknr>
aha! another way to solve my specific issue could also be disable OSR, ie disabling optimization of the currently executing function. not sure if that is easier though

[11:12:27.0133] <jorendorff>
including a `with` statement will definitely disable most optimizations

[11:12:58.0629] <jknr>
but they get machine code generated from baseline or ion?

[11:13:16.0112] <evilpie>
no `with` disables ion completely, baseline supports everything

[11:13:35.0855] <mgaudet>
/me hits controversy button :P 

[11:13:49.0838] <mgaudet>
jknr: Is there a precise thing you're trying to accomplish? 

[11:15:52.0476] <jknr>
Actually, I just want to look at a single function and also see how it gets optimized when i run it with a few different arguments

[11:16:23.0562] <jorendorff>
oh i see

[11:16:25.0263] <jknr>
eventually as it gets optimized, it gets inlined 

[11:16:40.0119] <jorendorff>
ok, then you just want to disable ion compilation of the caller

[11:16:45.0858] <jorendorff>
which can be done with `with`

[11:17:00.0667] <jorendorff>
 * ok, then (maybe) you just want to disable ion compilation of the caller

[11:17:09.0706] <jknr>
yep! i will check it out! with statement, what a mystery 

[11:17:14.0082] <jknr>
 * yep! i will check it out! `with` statement, what a mystery 

[11:19:31.0328] <jorendorff>
jknr: Note that a `with` statement (or direct `eval`) also deoptimizes every **enclosing** function

[11:20:27.0307] <jorendorff>
(it is possible to accidentally also deoptimize other functions you're actually interested in)

[11:21:05.0686] <jknr>
ah shit! so i can't call an optimized function within the `with` block?

[11:21:16.0027] <jorendorff>
you can

[11:21:34.0264] <jorendorff>
"enclosing" as in outer functions, ones that physically enclose it in the source code

[11:21:46.0091] <Waldo>
You should be able to, but such functions might well not be inlined as much, when called in `with`-using code.

[11:21:47.0192] <RyanVM>
tcampbell: I've got a 73 RC2 build coming soon. Is there anything we can do to wallpaper bug 1612863 in it?

[11:22:30.0612] <tcampbell>
RyanVM: this seems to be a pre-existing oom. I think wontfix 73 is best answer

[11:22:42.0777] <jorendorff>
jknr: Are you doing this work using Firefox? or the SpiderMonkey shell?

[11:22:51.0331] <jknr>
> <@jorendorff:mozilla.org> "enclosing" as in outer functions, ones that physically enclose it in the source code

aha! great! i'll give it a try :)

[11:23:18.0745] <tcampbell>
70% of the crashes I looked at are OOM 

[11:24:21.0568] <jknr>
@jorendorff I am using js shell. I suppose not much would change except default config if i'd do it in ff. Are there other changing factors? memory allocation perhaps? 

[11:24:36.0538] <jknr>
 * jorendorff: I am using js shell. I suppose not much would change except default config if i'd do it in ff. Are there other changing factors? memory allocation perhaps? 

[11:27:41.0754] <jorendorff>
jknr: You're fine, plus in the shell there's `bailout()` and a few other hacky built-in functions (use `help()` to browse)

[11:27:52.0048] <jorendorff>
`bailout()` probably isn't what you want...

[11:28:00.0832] <jorendorff>
oh, i think we never ion-compile async functions

[11:28:28.0580] <jorendorff>
so that's a less performance-brutal way to change the caller to make sure the callee doesn't get inlined

[11:28:30.0949] <jknr>
ah I should take a closer look there too

[11:28:42.0281] <jorendorff>
too many answers :)

[11:28:53.0438] <jknr>
awesome :D thanks alot

[11:29:01.0590] <jorendorff>
sure!

[12:50:29.0126] <tcampbell>
/me wonders why regenerating the binast parser downloads cubeb media codec...

[12:52:54.0699] <tcampbell>
oops.. looks like we forgot to change the yaml file a few times recently

[13:01:53.0215] <Perry Jiang>
Where can I find the formal definition of "evaluating" in step 12.a of ScriptEvaluation(scriptRecord)? https://tc39.es/ecma262/#sec-script-semantics-runtime-semantics-evaluation

[13:02:24.0845] <Perry Jiang>
 * Where can I find the formal definition of "evaluating" in step 12.a of ScriptEvaluation(scriptRecord)? https://tc39.es/ecma262/#sec-runtime-semantics-scriptevaluation

[13:02:42.0857] <jorendorff>
It means to run the Evaluation rules for the parse node

[13:02:51.0624] <jorendorff>
I don't know where it says that, though

[13:03:46.0001] <Perry Jiang>
Oh, the 2nd question I have is if that script throw an uncaught exception, result.[[Type]] would be "throw"?

[13:05:04.0783] <jorendorff>
Yes.

[13:14:34.0578] <tcampbell>
jorendorff Perry Jiang: https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations

[13:14:48.0316] <tcampbell>
that is the part of the spec that glues parse nodes to execution

[13:20:26.0585] <Perry Jiang>
thanks

[13:25:33.0500] <tcampbell>
jorendorff: We probably are already fine about the address-space question. We only need to worry about things the GC allocates and it already uses a special allocator to restrict address space on some platforms.

[13:26:07.0329] <jorendorff>
OK. No worries about PrivateValue?

[13:37:08.0038] <jorendorff>
mgaudet:     `:O`

[13:37:18.0910] <jorendorff>
https://bugzilla.mozilla.org/show_bug.cgi?id=1611528

[13:37:42.0637] <mgaudet>
Good :O or bad :O ? 

[13:37:49.0138] <jorendorff>
very very good

[13:37:54.0836] <jorendorff>
is my guess

[13:38:30.0568] <mgaudet>
It certainly makes a lot of messy things quite a bit clearer

[13:38:43.0061] <mgaudet>
That was my #1 take away by the end of it

[13:40:38.0417] <cfallin>
That's quite a patch stack to balance without tipping over

[13:40:54.0335] <jorendorff>
i'm trying to merge it to rust-frontend now

[13:40:58.0483] <mgaudet>
It was great. Lots of tiny patches that do exactly one thing :) 

[13:42:04.0426] <mgaudet>
Landing was slightly troubled because I tried only selectively moz-phabbing patches because of how long it took to submit the whole stack; I missed one update which almost got me bounced, but the sherrifs took a tiny bustage fix patch and it then was fine.

[13:42:23.0155] <mgaudet>
 * Landing was slightly troubled because I tried only selectively moz-phabbing patches that needed tweaks because of how long it took to submit the whole stack; I missed one update which almost got me bounced, but the sherrifs took a tiny bustage fix patch and it then was fine.

[13:42:45.0025] <jorendorff>
cfallin: the whole thing is something like +630, -691 lines

[13:43:03.0572] <jorendorff>
i find that my work tips over more often when it's in one monster patch than when it's in many tiny ones

[13:43:24.0665] <jorendorff>
("tips over" = it just takes a painfully long time to land it and make stick)

[13:43:56.0952] <iain>
jorendorff: re private values: see https://bugzilla.mozilla.org/show_bug.cgi?id=1505902#c10

[13:44:26.0644] <iain>
And also here: https://searchfox.org/mozilla-central/source/js/public/Value.h#800

[13:46:53.0894] <iain>
Oh, I guess Arai already posted that in the bug

[14:07:47.0657] <tcampbell>
mgaudet: jorendorff caroline djvj any preferences for time-of-week for stencil meetings?

[14:08:02.0560] <tcampbell>
the same wednesday afternoon (EST) as before?

[14:08:58.0406] <mgaudet>
Works for  me; I think I have a mild preference for morning (MST), but am totally willing to be sway in the wind here


2020-02-07
[20:27:19.0275] <rampr>
We are using spidermonkey in a game engine(cocos2d-x) and we are getting crashes in spidermonkey and we haven't been able to get the javascript code causing the issue. We have managed to recompile spidermonkey and get the stacktrace. The stack trace is here -> https://pastebin.com/vMir73ki. Any pointers to help us dig would be very useful.

[20:28:23.0355] <rampr>
Also is there any way to get the javascript code causing the crash? Thank you.

[20:30:05.0103] <Waldo>
rampr: If you jump up a few frames in a debugger to `Interpret`, there's probably a `JSScript*` or `RootedScript` or `Rooted<JSScript*>` local that you could dump, I think maybe with `DumpScript` or so, to find the script you're in.

[20:31:19.0118] <Waldo>
rampr: Past that, tho, I don't know that people here are likely to be able to offer terribly much help -- `js::PerThreadData` doesn't even exist in the current engine, so presumably you're using a somewhat older SpiderMonkey, and people's memories tend to fade quickly for stuff that doesn't exist in the current engine or in supported stable releases.

[20:33:01.0347] <Waldo>
My assumption is that crash address is for some fixed, identifiable field in _presumably_ `js::PerThreadData`, but I can't very well say what if it's not in current source.  Basically knowing what the null pointer access is into, and then figuring out why that pointer is null, is probably the right path of attack here.  But without the relevant SpiderMonkey source at hand, which you have and I do not, I couldn't say.

[20:36:38.0760] <rampr>
Waldo: Thanks. The spidermonkey is rather old. v34 is being used. The source code is at https://github.com/cocos2d/spidermonkey.
Also the crash isn't happening during our tests and it seems to be happening only with real users on android devices(Ours is a game that is using js, hence the game engine is using spidermonkey to interpret)
So we can't use debugger because it is happening only in live devices. So far we have been trying to send crash information to external tools like crashlytics and log events around.

We were wondering if we could send the javascript code that was probably executing and that lead to the crash and send it to these tools so we can understand better

[20:38:08.0727] <rampr>
 * Waldo: Thanks. The spidermonkey is rather old. v33 is being used. The source code is at https://github.com/cocos2d/spidermonkey.
Also the crash isn't happening during our tests and it seems to be happening only with real users on android devices(Ours is a game that is using js, hence the game engine is using spidermonkey to interpret)
So we can't use debugger because it is happening only in live devices. So far we have been trying to send crash information to external tools like crashlytics and log events around.

We were wondering if we could send the javascript code that was probably executing and that lead to the crash and send it to these tools so we can understand better

[20:43:49.0875] <Waldo>
@rampr:mozilla.org: You probably should start instrumenting relevant SpiderMonkey code to figure out more details, I think. Log more info to a file, or something. And/or read the source of that `PerThreadData` function to figure out the answer to my suggestion. I don't think I can offer much more help than that, tho.

[20:54:58.0940] <rampr>
Thanks Waldo. We have definitely some inputs from your suggestions above. We'll try those out and come back with specific questions later based on our investigations.

[02:48:33.0423] <nbp>
pbone: What are you working on lately?

[07:00:46.0991] <caroline>
tcampbell: the same time for stencil meetings works great for me! 

[07:02:53.0979] <caroline>
tcampbell: 

[07:03:00.0179] <caroline>
^

[07:04:01.0195] <tcampbell>
üëçÔ∏è

[07:47:01.0094] <djvj>
tcampbell: wednesdays work for me as before

[07:47:19.0693] <djvj>
so, I had some interesting results I was re-confirming with some browsing sessions.

[07:48:11.0471] <djvj>
it seems like on the actual web, about 50% of identifier _uses_ (or more) are of single-letter ids.

[07:48:57.0129] <jorendorff>
heh

[07:49:03.0319] <djvj>
furthermore, independently, 2/3 to 3/4 ths of all atom uses are from a small fixed _independent_ set.

[07:49:27.0288] <jorendorff>
ok, but what can we use that for ...

[07:50:16.0160] <djvj>
so, given that our StencileScope structures will eventually need to at least have a minimally uint32_t (maximally uint64_t or pointer-sized) canonical reference to a string.  I think it's reasonable to consider reserving some of the reference numberspace for immediate encoding of at least length-1 atoms

[07:50:47.0394] <djvj>
also, for some reason, the atom ".this" shows up a lot

[07:51:01.0025] <jorendorff>
that's because of how we implement `this`

[07:51:06.0655] <djvj>
and to be clear, by "uses" I mean uses in the parser - i.e. occurrences in the text that we need to materialize/represent

[07:51:40.0319] <jorendorff>
I suppose it will make sense to echo the optimizations we already have for atoms in this new thing

[07:52:16.0503] <jorendorff>
JSInlineString

[08:03:34.0485] <djvj>
jorendorff: which optimizations did you have in mind?

[08:04:38.0729] <jorendorff>
djvj: just `StaticStrings` and `JSThinInlineString`

[08:05:26.0524] <jorendorff>
djvj: But it seems like that data might argue for still having a global pool of new-atoms, since we think we'll be new-atomizing the same strings a lot of times

[08:05:36.0060] <jorendorff>
in that case I don't know what we do

[08:06:55.0069] <djvj>
so I was thinking a bit more aggressively on the optimizing identifiers bit.  I want to reserve the a high 8-bit space of any "parse-atom  table index" to represent an atom directly.

[08:07:13.0048] <jorendorff>
djvj: that makes sense yes

[08:07:28.0731] <jorendorff>
that's what i was thinking too

[08:07:44.0888] <djvj>
oh, cool

[08:07:58.0958] <jorendorff>
i think by far the most common operations on these things

[08:08:04.0051] <jorendorff>
are equality testing and hashing

[08:08:23.0827] <jorendorff>
I say that because

[08:08:30.0681] <jorendorff>
having a complicated representation for the *pointer* to the string really will complicate some stuff

[08:09:20.0243] <jorendorff>
but equality is unaffected, and for hashing, just adds a branch, it's probably fine

[08:10:11.0013] <jorendorff>
and for converting those to JSAtoms during JSScript::InitFromStencil, since we're echoing optimizations we already have, that could actually make things faster, depending

[08:10:18.0356] <jorendorff>
i mean, not much faster. but whatever!

[08:13:09.0500] <jorendorff>
djvj: tagged-pointers makes some of the new-atom type's Rust implementation need the `unsafe` keyword, I think, since by default `enum NewAtom { InlineString(u32), Heap(Box<NewAtomData>) }` will be two words, not one, and not ABI-compatible with C

[08:13:14.0615] <jorendorff>
but I'm 100% ok with that

[08:13:40.0751] <jorendorff>
that's what `unsafe` is for, when cycles matter

[08:15:05.0384] <emilio>
/me thinks of his terrible tagged pointer for the style system (https://searchfox.org/mozilla-central/rev/623de665034eee43a54ff02939b61385ffd5990d/servo/components/style/values/computed/length_percentage.rs#104) and cries thinking that it won't be a nice enum anymore :(

[08:15:43.0589] <djvj>
so, I'm keen on this mostly because I'd really like to justify per-body string tables in stencils, instead of some larger per-source mapping.

[08:16:35.0873] <djvj>
the lifetime management and serialization issues become a lot simpler.  Not that they're unsolveable the other way, but they seem like unnecessary maintenance burden to impose on spidermonkey hackers going forward for the benefit (if any) that it provides.

[08:16:55.0936] <jorendorff>
hmm

[08:17:28.0315] <djvj>
if we can stuff a good number of the identifier references into "canonical indexes" of one sort or another

[08:17:52.0157] <djvj>
but I don't think this would mess with the rust code's boxing in any way that the atoms work wouldn't have otherwise messed with.

[08:17:55.0465] <jorendorff>
OK, how will we handle scope lookups during delazification?

[08:18:55.0079] <jorendorff>
what I mean is, suppose we're delazifying `function () { x++; }` where `x` is a local variable defined in an enclosing function.

[08:19:12.0625] <jorendorff>
the code we want to emit uses `Aliased` instructions to access `x`.

[08:19:15.0113] <djvj>
For the structures associated with a particular script body (module, function, eval, global), the StencilAtom references will be 32-bit "table indices"

[08:20:15.0997] <jorendorff>
sorry, please assume in this case that the identifier is `molybdenum` or something that we haven't specialized for

[08:23:05.0970] <djvj>
are we talking about delazifying from  a stencil into a function/script or about full-parsing some prior syntax parsed code?

[08:23:23.0867] <jorendorff>
full-parsing prior syntax-parsed code.

[08:26:26.0685] <djvj>
So the stencil we'd be building in that situation would use its own string table (transient) for that parse.  Serialized stencils would serialize the "indexes" into offset into the source where they first appeared (canonical location for the body)

[08:26:43.0097] <djvj>
ideally, we don't keep string tables around at all, except as transient mapping devices

[08:27:34.0989] <jorendorff>
I'm talking about how previously gathered information about the enclosing scope gets back into the frontend

[08:28:00.0808] <jorendorff>
is there a data structure that enables efficient scope lookups

[08:28:12.0453] <jorendorff>
if not, we can build a transient one

[08:28:38.0601] <jorendorff>
but we do have to build it *from* something

[08:30:16.0228] <djvj>
jorendorff: prior compiled outer bodies, outer bodies in the same "compile session", or both?

[08:30:41.0340] <jorendorff>
prior compiled outer bodies

[08:30:51.0796] <jorendorff>
(or, both)

[08:31:11.0805] <djvj>
their information will all be structured within in-heap variants which point to real jsatoms, right?

[08:31:13.0991] <jorendorff>
but fundamentally my question is pretty classic: you're proposing isolated pools, and i'm saying there's a case where we need information that crossess those pools

[08:31:34.0787] <jorendorff>
 * but fundamentally my question is pretty classic: you're proposing isolated pools, and i'm saying there's a case where we need information that crosses those pools

[08:31:54.0751] <djvj>
oh right, I understand what you mean by "build it" now.

[08:32:35.0653] <djvj>
we'd build them as needed from the internal references.

[08:33:10.0390] <jorendorff>
djvj: ok, i'd like to understand how this will work -- to be clear I presently can't tell what's proposed at all

[08:33:51.0368] <jorendorff>
djvj: so, first, what are "internal references"

[08:34:22.0119] <jorendorff>
i hope this is useful

[08:34:43.0486] <jorendorff>
i don't mean to cavil, i just feel like i have not been able to pick up much of what you'd like me to understand

[08:34:54.0024] <djvj>
I need to get my ideas clear enough to explain after all :)

[08:35:42.0519] <Waldo>
"cavil", good word.

[08:35:49.0155] <djvj>
ok, so let me try again.  when we are full-parsing we are building a stencil structure which we'll materialize later.

[08:35:58.0991] <jorendorff>
djvj: yep

[08:36:05.0407] <jorendorff>
and the stencil structure contains some string ables

[08:36:09.0229] <jorendorff>
 * and the stencil structure contains some string tables

[08:36:36.0388] <jorendorff>
one per "body" (script, module, function, eval)

[08:36:46.0728] <jorendorff>
the strings in these tables do all get converted to JSAtoms before we run the script

[08:36:48.0336] <djvj>
while building the stencil structure (e.g. bytecode compiling, etc.) we'll need to materialize canonical string references that need to be compared to various things, for the most part.

[08:37:28.0502] <djvj>
in the heap structures, these canonical references are just JSAtom*s

[08:37:37.0204] <jorendorff>
What heap structures?

[08:37:50.0224] <djvj>
gc-heap variants of the stencil structures (our regular scope objects and stuff)

[08:37:57.0290] <jorendorff>
ok

[08:38:20.0979] <jorendorff>
right, so as part of materialization, we create real JSAtoms and js::Scope objects

[08:38:32.0355] <jorendorff>
 * right, so as part of stencil-instantiation, we create real JSAtoms and js::Scope objects

[08:40:20.0488] <djvj>
For the corresponding StencilScope object (currently I think EmitterScope is the closest analogue), we need some canonical representation that's not JSAtom*, which will likely end up being some uint32_t index into _some_ table with some lifetime/scope

[08:41:26.0547] <jorendorff>
Hmm

[08:42:25.0821] <jorendorff>
And as for lifetimes, that table owns the string characters, unless they're borrowed from the script source.

[08:43:44.0222] <djvj>
The question is the lifetime of the table itself, it _can_ be the lifetime of the source, but then you're keeping alive all the atoms in the source for the lifetime of the source (or adding some cache heuristic to clear it and recompute it or something)

[08:44:24.0872] <djvj>
and that leads to asking whether you want to keep _parts_ of the table alive depending on which parts are used, and it gets really messy

[08:44:39.0137] <jorendorff>
thinking

[08:44:53.0833] <djvj>
so I'd like a table that can live for the lifetime of a build or an instantiation

[08:45:12.0208] <djvj>
but which disappears during encoding.

[08:45:55.0171] <jorendorff>
if the table is consumed, that means no reusing any data gathered by one compilation in a later compilation (such as delazification)

[08:46:01.0410] <jorendorff>
because almost all of it contains strings

[08:46:26.0642] <jorendorff>
i don't think we need to reuse much data, but for scopes it is nice

[08:46:33.0081] <jorendorff>
scopes are the only thing

[08:46:36.0312] <djvj>
well, no reusing that specific data - which is the association between atoms _after_ they've been de-duplicated on a per-body basis

[08:46:59.0508] <djvj>
most of the time when you're instantiating/compiling stencil data, the enclosing structures will be live

[08:47:29.0285] <jorendorff>
i don't understand the last 2 lines

[08:48:27.0372] <jorendorff>
"the enclosing structures will be live" are you referring to the js::Scopes? I thought the frontend would not be allowed to see those directly

[08:49:04.0564] <djvj>
directly or not they will need to be queried at some point, and they should be the ones you're most frequently interacting with anyway

[08:49:48.0339] <jorendorff>
ok, so i think now you're suggesting that we just pass the pointers to these live js::Scopes into the frontend?

[08:49:53.0080] <jorendorff>
i'm not sure though

[08:49:59.0859] <djvj>
I'm saying that it seems unlikely to me that when you're compiling a stencil, you'll be relying on an enclosing stencil that was produced during a prior compile.

[08:50:12.0800] <jorendorff>
frontend needs scopes

[08:50:19.0266] <jorendorff>
that's the only part it needs

[08:50:22.0252] <jorendorff>
it has to get that data somehow

[08:50:37.0995] <jorendorff>
reusing the output of an earlier compile would be one way to get it

[08:50:50.0247] <djvj>
right, so I've been assuming it has at some point direct access to those outer scopes

[08:51:00.0360] <jorendorff>
i see

[08:51:10.0857] <djvj>
and that the gc-free aspect of the stencil work was making it so that it never created GC objects

[08:51:14.0912] <djvj>
except at well-defined points

[08:51:22.0987] <jorendorff>
but it would still *consult* GC objects

[08:51:33.0337] <djvj>
right

[08:51:43.0626] <djvj>
if that's a bad assumption, it would be good to find out soon :)

[08:52:32.0811] <jorendorff>
maybe we should just keep using JSAtom

[08:53:06.0439] <jorendorff>
the main problem is keeping them rooted across threads

[08:53:25.0226] <djvj>
no, no.  I think we can really build a neat, much improved thing here.  Like, just straight up eliminate gobs of hashtable lookups and table entry creations and stuff.

[08:53:45.0667] <jorendorff>
don't we still need the hash table if it's per-compile?

[08:53:58.0210] <jorendorff>
we eliminate the locking, but we still have the table

[08:54:20.0914] <djvj>
an internal string table, per parse, which would be lazily populated as needed.

[08:54:57.0431] <djvj>
that's where the whole "eliminate 50% of lookups on the table by just treating the 1-byte string as a virtual index into the table" bit came in

[08:55:15.0815] <jorendorff>
oh, those lookups are already eliminated I think

[08:55:20.0755] <jorendorff>
because of StaticStrings

[08:55:22.0432] <djvj>
oh?

[08:55:59.0879] <jorendorff>
djvj: https://searchfox.org/mozilla-central/source/js/src/vm/StringType.h#1299

[08:56:03.0620] <jorendorff>
i'm not 100% on this

[08:57:46.0317] <djvj>
Is it an effort/value concern, or a fundamental workability concern?

[08:57:46.0756] <jorendorff>
djvj: anyway -- suppose the frontend has access to the enclosing `js::Scope`

[08:58:21.0882] <djvj>
actually, before that

[08:58:30.0800] <djvj>
suppose the frontend does _not_ have access ot the enclosing js::Scope

[08:58:52.0729] <djvj>
I just want to understand roughly what you had in mind to do in that scenario

[08:58:57.0427] <jorendorff>
djvj: two separate concerns, one of each: 1. cost/benefit of largely reimplementing JSAtom and then having two things

[08:59:18.0426] <jorendorff>
2. fundamental workability of the new thing, for delazification (totally independent of 1)

[08:59:20.0897] <jorendorff>
yeah ok

[09:00:39.0475] <jorendorff>
djvj: so, one of my assumptions has been that the output of stencil is not 100% flat; it's a tree of structs, some of which (like the bytecode blob) are gonna get adopted or shared by GC things when the stencil is instantiated

[09:01:32.0170] <jorendorff>
i was thinking the scope would be one of those things, the GC graph keeps it alive via the gc-Scope

[09:02:25.0880] <jorendorff>
and then it's very easy to pass one of those back into the frontend later, it's probably refcounted anyway since we want to share this immutable thing, write it to cache and such

[09:02:32.0952] <jorendorff>
so passing it back to the frontend is just an incref

[09:02:59.0655] <jorendorff>
the frontend can do lookups ---- i'm not married to this, understand, just kind of figured it could work that way, and be efficient

[09:03:41.0200] <djvj>
so you'd have a scope chain skeleton corresponding to this thing live at any time?

[09:04:06.0018] <mgaudet>
I mean, we're pretty close to this today, except right now instead of shared ownership of the data, there's exclusive ownership 

[09:04:22.0772] <djvj>
notably, it would be a bit of a splitting of functionality from the current gc-heap scope objects, into a shared chain skeleton that can be used by both stencils and the mutator?

[09:04:43.0906] <mgaudet>
but you could extend what are currently called ScopeCreationData to serve this role, (and add Shared ownership to the backing data) 

[09:05:09.0948] <jorendorff>
djvj: yes, or, I don't know

[09:05:30.0749] <djvj>
@mgaudet: ScopeCreationData would basically become `StencilScope` in all but name, then?

[09:06:02.0099] <mgaudet>
So bear in mind: the name `FooCreationData` predates stencils; in my mind, I already transliterate that directly

[09:07:22.0260] <mgaudet>
The difference I see here is one of lifetime and ownership. Today `ScopeCreationData aka StencilScope` are local to a top level stencil; what I'm sort of getting from Jason is that it might be nice to have them have a longer life time to support a parser that needn't ever reference GC objects; 

[09:08:06.0654] <jorendorff>
uhhr, well

[09:08:07.0726] <mgaudet>
So instead of providing the top level parse with an enclosing `Scope`, you'd provide it with an enclosing `StencilScope`; which could be referring to data that is also refered to by the GC `Scope`, just shared via refcounts

[09:08:46.0687] <jorendorff>
as long as I know what the new frontend is allowed to do, i'm ok with talking to GC `Scope`s

[09:09:07.0462] <jorendorff>
but, like, imagine I have this identifier `molybdenum` and I need to look it up in a `Scope`

[09:09:17.0391] <jorendorff>
currently we atomize the string at that point, in order to do the lookup

[09:09:24.0573] <jorendorff>
is that ok?

[09:09:36.0814] <bzbarsky>
So I have a question about parsing

[09:09:54.0005] <jorendorff>
mgaudet: but, yes, you understand me correctly

[09:09:57.0590] <bzbarsky>
at some point here we are going to need a thing that we can run in the parent (or necko?) process which will be able to answer the following questions

[09:10:05.0430] <bzbarsky>
1) Does this data parse as JS?

[09:10:14.0112] <bzbarsky>
2) If it does, does it _fail_ to parse as JSON?

[09:10:35.0096] <bzbarsky>
Is this something the new frontend might be able to do?

[09:10:49.0696] <jorendorff>
bzbarsky: i spoke with Anne about this a bit in Berlin. This is something the new frontend can do, yes.

[09:10:52.0100] <mgaudet>
jorendorff: This does tie back a bit to a question we had about what is the actual representation of scopes. I'm sort of the opinion these days (and djvj can correct me if I'm wrong) we may want to change the table representation of scopes. 

[09:11:26.0348] <mgaudet>
Just because atomization is such a can of worms

[09:11:32.0848] <jorendorff>
mgaudet: It seems almost necessary if we want to avoid atomization

[09:11:40.0484] <jorendorff>
like, really really close to necessary

[09:12:53.0337] <djvj>
let me take a look at how the existing scope objects are structured.

[09:14:15.0027] <mgaudet>
djvj: there's lots of incidental complexity, but basically they consist of a pointer to a big table of atoms, that has a special organization based on a series of offsets (like [this](https://searchfox.org/mozilla-central/source/js/src/vm/Scope.h#535-537))

[09:14:22.0790] <bzbarsky>
jorendorff: Ah, great, Anne is who needs this bit.

[09:14:38.0508] <bzbarsky>
/me butts out again.  :)

[09:14:48.0478] <mgaudet>
as well as things like the pointer to the enclosing scope, a potential environment shape, 

[09:14:57.0199] <mgaudet>
and a flag to indicate 'kind' 

[09:17:44.0352] <jorendorff>
so, one approach would be, when we need to compile a function,

[09:17:56.0411] <jorendorff>
just write down what we've got in the scope and ship that to the new frontend

[09:18:12.0918] <jorendorff>
like: whatever, math class is tough, we're making a copy

[09:18:18.0683] <jorendorff>
That will work for us for now

[09:18:41.0704] <mgaudet>
We'd have to represent the whole chain to the root right? 

[09:18:45.0424] <jorendorff>
yes

[09:18:59.0646] <jorendorff>
I think usually it'll literally be "the global environment"

[09:19:09.0541] <jorendorff>
for toplevel functions that's what it is

[09:19:27.0484] <jorendorff>
for leaf functions inside an iife, it's more; and that is not rare

[09:20:04.0976] <jorendorff>
i have to take back that "usually"; i bet it will often be complex

[09:20:13.0058] <jorendorff>
 * i have to take back that "usually"; i bet it will often be a lot of bindings

[09:21:26.0630] <mgaudet>
I think the common case is going to be a non-zero chain of scopes; but you could reify a `ScopeStencil` chain at relatively low cost to pass in if you have shared ownership of the bindings tables

[09:22:00.0827] <mgaudet>
then longer lived ScopeStencilChains could still happen, but as an optimization

[09:22:17.0637] <mgaudet>
 * then longer lived `ScopeStencil`s could still happen, but as an optimization

[09:23:01.0544] <jorendorff>
ok, that doesn't sound bad

[09:23:09.0892] <jorendorff>
plus it's incremental

[09:23:56.0876] <jorendorff>
note what the frontend needs from this data structure, though:

[09:24:04.0196] <jorendorff>
we have to be able to query it

[09:24:22.0736] <jorendorff>
which maybe sounds stupid, but what I'm saying is, whatever those string keys are in that table

[09:24:38.0010] <jorendorff>
or .... chain of tables

[09:24:58.0268] <mgaudet>
Yeah, it's not stupid; in fact the query stuff is the most complicated set of this whole thing

[09:25:08.0155] <mgaudet>
BindingIter (both of them!) are magic.

[09:25:13.0827] <jorendorff>
whatever it is, we have to be able to actually really take a string of characters from source text and get at the data -- yes, perfect

[09:25:24.0927] <mgaudet>
(which is to say, not magic, but... yeah. There's a lot going on there) 

[09:26:26.0241] <mgaudet>
I guess the concerning aspect of this is that there's a potential we end up with a *third* implementation of BindingIter... which I don't think we want

[09:36:02.0145] <Waldo>
wcgr

[09:42:25.0901] <tcampbell>
djvj: the `StaticStrings` mechanism pre-computes all 2-char atoms at runtime initialization and they are pinned.

[09:42:57.0587] <jorendorff>
"all" in the sense of all the likely identifiers

[09:46:39.0601] <djvj>
Right, so we need to decide something here.

[09:47:03.0977] <djvj>
Design-wise, do we want stencils to be something largely associated with the lifetime bounds of a single JSScript

[09:47:32.0414] <jorendorff>
I'm happy because I feel like you and mgaudet understand exactly what I was going on about üëçÔ∏è

[09:47:38.0832] <djvj>
or have larger structural pieces (especially spanning multiple sentcil compilations) stay life and linked to each other?

[09:47:42.0139] <jorendorff>
and given that i'm sure we'll end up somewhere good

[09:48:21.0151] <jorendorff>
i think stencils definitely can't be *entirely* tied to a JSScript lifetime because we also want to be able to hand them off to some other system like the bytecode cache

[09:48:37.0970] <jorendorff>
seems like, refcounting?

[09:48:49.0697] <jorendorff>
 * seems like, atomic refcount?

[09:49:48.0842] <jorendorff>
but the question about whether there are shared pieces linked to each other

[09:49:54.0358] <jorendorff>
yeah, good question :-| don't know

[09:50:27.0694] <mgaudet>
So, not saying this is the right answer, but I'll tell you how I've seen it so far: this is at least as much because this is how things -are- as much as it is where I think we're going: 

[09:51:19.0574] <mgaudet>
A top level stencil (need a better name!) is created for parsing a top level script; it contains a tree of stencils covering all the inner functions. These may be lazy or non-lazy 

[09:51:37.0009] <mgaudet>
In my view, this is what gets cached; 

[09:52:00.0938] <djvj>
this tree is generated in whole at full-parse time?

[09:52:02.0736] <mgaudet>
when we do delazification, we create a new "top most stencil" that corresponds to a single function; we don't cache this. 

[09:52:09.0405] <djvj>
or at syntax parse time?

[09:52:35.0602] <djvj>
oh wait, the "these may be lazy or non-lazy" likely answers that question

[09:52:59.0232] <mgaudet>
djvj: Whatever is seen is in the tree; so when we flip a child to syntax parse and complete, there's information that is not represented in the tree --- all the children of lazy nodes ar einvisible

[09:53:03.0183] <mgaudet>
 * djvj: Whatever is seen is in the tree; so when we flip a child to syntax parse and complete, there's information that is not represented in the tree --- all the children of lazy nodes are invisible

[09:53:33.0269] <djvj>
and linkage is via parent pointers?

[09:54:09.0148] <mgaudet>
now this isn't perfect: There's definitely cool optimizations that could happen if we could -update- the tree later, just before leaving a page to indicate what got delazified, so that we could perhaps reify delazified functions on next page load.

[09:54:44.0899] <mgaudet>
djvj: So today, everything is table based. You can only start from the top and walk down. But this representation isn't nailed down today so is flexible

[09:55:15.0184] <mgaudet>
(frankly, it's not properly represented just yet because I haven't gotten to it; right now we just point to functionboxes 

[09:55:24.0164] <mgaudet>
but that will have to be altered in the not too distant future) 

[09:55:56.0509] <djvj>
IIUC.. a syntax parse just picks up the linear ordering of all the function defs across the source and makes a lazily-initialized table for it

[09:56:55.0859] <mgaudet>
Yes, but also it keeps track of the appropriate enclosing scope

[09:57:13.0545] <mgaudet>
the offset + enclosing scope is all our current parser really needs to do delazification

[09:57:49.0390] <jorendorff>
yeah

[09:58:52.0478] <tcampbell>
syntax parsing will still be a tree of functions to instantiate

[09:59:31.0986] <tcampbell>
during delazification, the scopes do know what subset of bindings are closed-over

[10:00:07.0944] <tcampbell>
(from the low-bit of the atom pointer in the scope binding list.. üò∂ )

[10:01:55.0688] <djvj>
sign, so syntax parsing has to look up names regardless

[10:02:17.0677] <tcampbell>
correct

[10:03:11.0198] <djvj>
so this question remains of the boundaries of the stencils system

[10:03:15.0925] <djvj>
tcampbell: ^--

[10:03:20.0723] <tcampbell>
(there is a reason I said I don't know what the answer is and was happy for you to take on the problem üôÇ)

[10:04:02.0675] <djvj>
fine, I'll fight iain about it

[10:04:08.0959] <mgaudet>
djvj: Honestly I think it's most productive to think about a stencil being local to a single compile

[10:04:17.0460] <tcampbell>
I'm in office too and am happy to whiteboard this

[10:04:21.0636] <jorendorff>
ok

[10:04:21.0865] <mgaudet>
djvj: Then we can work on how that works with caching and generalization later

[10:04:25.0142] <tcampbell>
I have more cycles again

[10:04:37.0928] <mgaudet>
djvj: the short term goal is that we get GC free parse off thread 

[10:04:50.0151] <mgaudet>
all the other add ons can come later

[10:04:57.0950] <tcampbell>
(I just meant that there isn't an obvious answer so don't be surprised if you find nothing clever)

[10:05:27.0721] <djvj>
I'm hoping we don't have to resort to anything clever.

[10:06:05.0630] <djvj>
I'm very happy with the broad boundaries of stencils being a single compile - roughly a single body.

[10:06:15.0054] <djvj>
refactoring scopes is not something that really tugs at my heartstrings

[10:06:34.0649] <tcampbell>
scopes are definitely the sticky issue with all this

[10:06:35.0660] <jorendorff>
+üíØ

[10:08:31.0380] <djvj>
but that does mean that "atom references" from the point of view of a stencil will need some representation that's canonical per-stencil

[10:09:35.0872] <tcampbell>
bytecode in stencil needs to bake in an index. The actual script->atoms() table can be built later though

[10:09:46.0141] <djvj>
it keeps things nice and clean - everything is self-contained.  But it means we need a good way of cross-checking those internal representations against real atoms when instantiating

[10:10:01.0443] <djvj>
yeah, I'm talking about the script->atoms table

[10:10:40.0282] <djvj>
well, the stencil thing that corresponds to it anyway

[10:11:08.0421] <jorendorff>
I think script->atoms currently holds only atoms used by bytecode

[10:11:20.0956] <jorendorff>
so for example the name of a variable won't be in there

[10:11:49.0083] <tcampbell>
true. it is largely property names and "literals"

[10:11:51.0135] <jorendorff>
that means stencil will want a string table, and then script->atoms is a simple array of indices into that string table

[10:12:01.0044] <jorendorff>
among others, like scopes

[10:12:08.0095] <jorendorff>
script->atoms is just one customer

[10:12:28.0156] <djvj>
right, this is what I had in mind.

[10:12:40.0751] <tcampbell>
I'm not sure we need coordination of script->atoms and scopes during frontend though

[10:12:51.0327] <djvj>
to be clear: StencileScript->atoms to be precise, right?

[10:13:01.0135] <jorendorff>
yeah

[10:14:10.0256] <djvj>
EmitterScope, StencilScript->atoms, etc. (all stencilly things that currently refer to JSAtoms*) will need to be some index into table that's local to a compile (function body, global script body, etc.)

[10:16:37.0173] <djvj>
during instantiation, if we're assuming we can talk/walk gc-heap things directly, we build a temporary translation table from these indices to JSAtom*s

[10:16:59.0850] <tcampbell>
instantiation has full sync access to gc-heap

[10:17:31.0191] <tcampbell>
 * Stencil::Instantiate has full sync access to gc-heap

[10:17:58.0044] <djvj>
during compile, we either need to snapshot and shuttle the scope data, always keep the scope data alive, or access the gc-heap directly to query the scope data.

[10:18:23.0509] <djvj>
if the scope info itself is relatively immutable (looks to be so), sharing that to a background thread for multi-read access doesn't seem like a big issue.

[10:18:25.0731] <tcampbell>
My feeling would be start with snapshot and shuttle

[10:18:48.0806] <tcampbell>
multi-read access is a gc issue similar to what got us in mess

[10:18:56.0152] <tcampbell>
 * multi-read access is a gc issue similar to what got us intp mess

[10:18:59.0482] <tcampbell>
 * multi-read access is a gc issue similar to what got us into mess

[10:19:07.0519] <jorendorff>
+1

[10:19:26.0809] <tcampbell>
the nice part about snapshot is it forces us to be explicit about exactly what our uses are

[10:19:42.0797] <tcampbell>
we can then disolve that later for perf as we justify

[10:19:46.0556] <mgaudet>
Agreed (though you can share the backing *data* without problem, because it's immutable) 

[10:19:58.0975] <mgaudet>
(98% confidence) 

[10:20:54.0096] <djvj>
So there's some MakeStencilScope(Scope*) -> StencilScope* here, which snapshots the scope on the main thread, for passing to a potential background compile.

[10:21:09.0302] <tcampbell>
probably the right starting point

[10:21:46.0299] <djvj>
I'm slightly concerned about that getting expensive.

[10:21:55.0812] <djvj>
are Scope-things even allocated on the gc-heap?

[10:22:13.0888] <jorendorff>
they are

[10:22:21.0377] <tcampbell>
Scope is on gc-heap. Scope::Data is C++. 

[10:22:44.0720] <tcampbell>
the ::Data contains bindings which are tagged jsatom* pointers

[10:23:01.0119] <tcampbell>
having stencil outlive scopes is probably important in long wrong

[10:23:24.0121] <tcampbell>
we also want a clear ser/des story which snapshoting helps with

[10:24:19.0499] <tcampbell>
 * having stencil outlive scopes is probably important in long run

[10:24:25.0734] <tcampbell>
 * 

[10:24:44.0701] <djvj>
Scope::Data doesn't have parent info but that can probably be fixed

[10:25:00.0135] <tcampbell>
I don't think we want to fix it?

[10:26:07.0759] <djvj>
(fixed, assuming we wanted to use cross-thread pointers to Scope::Data for directly resolving enclosing scope info)

[10:28:03.0951] <tcampbell>
ah

[10:50:40.0070] <jorendorff>
tcampbell: what have we got to discuss today?

[10:50:58.0302] <jorendorff>
(we have a meeting coming up in 10 minutes)

[10:51:02.0154] <jorendorff>
could skip as far as i'm concerned.

[10:55:20.0277] <tcampbell>
jorendorff: skipping works for me

[10:55:31.0077] <jorendorff>
ok.

[10:55:42.0723] <tcampbell>
I've put the stencil meetings back on calendar next week which might be better use of time

[10:55:51.0523] <jorendorff>
yes

[12:40:28.0588] <tcampbell>
+309/-580 .. this patch is nearly humane

[12:58:38.0099] <mgaudet>
> <@tcampbell:mozilla.org> I've put the stencil meetings back on calendar next week which might be better use of time

It seems on my calendar they don't start till week after next (20th rather than 13th) 

[12:59:48.0291] <tcampbell>
mgaudet: thanks. fixed it

[13:00:50.0478] <mgaudet>
Awesome. Yeah, I have added Modules to the agenda.... they're rapidly becoming the fast approaching blocker. 

[13:01:26.0762] <tcampbell>
Is the question still the same thing that blocked SSO?

[13:02:33.0836] <mgaudet>
So the thing that brought it back to my mind was that ModuleObject::init wants the script 

[13:02:39.0112] <mgaudet>
which I'm trying to take away 

[13:03:09.0741] <mgaudet>
but the cross-compartment offthread reference problem is definitely still there

[13:03:50.0907] <tcampbell>
ModuleObject shouldn't exist until stencil::Instantiate

[13:03:52.0230] <jorendorff>
SSO=ScriptSourceObject?

[13:03:56.0886] <mgaudet>
I guess the summary of my concerns is that I've been largely able to ignore modules for the last few months, but it's going to become increasingly impossible. and they are peculiar

[13:04:38.0644] <mgaudet>
(The SSO issue being that we considered hoisting initialization of the SSO object onto main thread before we actually do the compilation, but this ends up being hard due to cross compartment issues) 

[13:05:34.0653] <tcampbell>
The thing to keep in mind with modules is how they interact with caching

[13:06:50.0084] <mgaudet>
Yeah. We can talk next week. Mostly think we need an owner for Modules. 

[13:06:57.0961] <mgaudet>
 * Yeah. We can talk next week. Mostly think we need an owner for Modules in stencil

[13:31:21.0658] <tcampbell>
Hmm.. how horrified would people be if I made LazyScript derive JSScript for a little while...

[13:31:33.0717] <jorendorff>
"for a little while" lol

[13:32:59.0871] <tcampbell>
The final form will need to invert the type hierarchy to remove LazyScript, make BaseScript the arena-type, and make JSScript a bucket of methods

[13:33:38.0066] <tcampbell>
it is just really hard to follow the patch that removes the lazyscript instances

[13:33:56.0490] <tcampbell>
perhaps I can stack in the same patch stack

[13:34:17.0989] <jorendorff>
within a stack, for the purpose of separating a big mechanical patch from the rest, it's fine, for sure. 

[13:34:57.0633] <tcampbell>
neither part is very mechanical

[13:35:13.0915] <tcampbell>
I just need to undo 20 years of code around JSScript being *the* script type

[13:47:15.0446] <tcampbell>
maybe I just need to remove more screws from this

[13:49:08.0572] <Waldo>
Having a few screws loose is always a good approach.

[15:03:28.0609] <tcampbell>
/me grumbles about CompileOptions

[15:03:44.0803] <Waldo>
?

[15:04:20.0630] <tcampbell>
If I change the arena-type to js::BaseScript, then public headers no longer see that JSScript extends js::BaseScript

[15:04:36.0269] <tcampbell>
which means I can't have Rooted<JSScript> in a public header easily

[15:04:59.0524] <tcampbell>
in the future, we don't really want the introducer script, etc to be inputs to parser at all

[15:16:42.0929] <Waldo>
C++ doesn't make it easy (or really, possible) to expose inheritance relationships without exposing entire classes, unfortunately.


2020-02-10
[05:12:56.0541] <evilpie>
Should we try landing https://bugzilla.mozilla.org/show_bug.cgi?id=1610206 in 74? The proposal is now in stage 1.

[05:18:52.0937] <jcristau>
it'd be 75 now

[05:26:07.0815] <jcristau>
 * it'd be 75 now fwiw

[07:33:15.0893] <smaug>
yulia: curious, is something still happening with built-in modules?

[07:34:23.0337] <smaug>
(I don't follow es spec changes too much, but Google was so heavily pushing built-in modules like 2 years ago)

[07:34:26.0410] <yulia>
smaug: it hasn't been dropped as far as i know. apple is still working on it and v8 is no longer opposed. I think chrome still is

[07:34:46.0408] <yulia>
last presentation of it was in october of last year

[07:34:49.0479] <smaug>
ok, so it is now more apple thing

[07:35:05.0237] <yulia>
thats how it looks at the moment

[10:31:54.0033] <sfink>
I'm trying to review some code that mucks around with exceptions, and I have absolutely no idea whether it's correct or not.

[10:32:13.0658] <jorendorff>
definitely not

[10:32:33.0138] <sfink>
yeah, probably a safe bet

[10:59:55.0357] <tcampbell>
so.. my laptop had a bad RAM page and I got a whole bunch of crashes last week after several weeks of none

[11:00:14.0988] <tcampbell>
A whole bunch of them are popular crashes

[11:00:17.0337] <tcampbell>
js::ConstraintTypeSet::sweep (#4)
js::ObjectGroup::sweep (#9)
js::gc::TraceEdgeInternal<T> (#22)
js::gc::TraceEdgeInternal<T>  (#22)
js::Nursery::doCollection (#115)
js::jit::CodeGeneratorShared::encode (#277)
js::ObjectValueWeakMap::findSweepGroupEdges

[11:01:14.0980] <tcampbell>
Without evidence, I blame cosmic rays on trans-atlantic flights.. or just poor thermal characteristics

[11:01:57.0516] <tcampbell>
Also surprising to me, was I ran the memory test in the BIOS and it automagically black-listed the page and now I don't crash any more

[11:02:19.0842] <mgaudet>
That's neat! I was actually just gonna ask if you had to replace parts

[11:02:27.0123] <tcampbell>
/me shakes fist at page `0x3B4B30000`

[11:02:54.0670] <jorendorff>
wow

[13:27:28.0568] <Waldo>
That page is just the worst.

[13:30:32.0094] <zombie>
that's dedication to reproducing memory corruption bugs, sabotage your own laptop

[14:08:38.0397] <mgaudet>
Q: Do we have a pre-existing helper for taking a `Rooted<Maybe<T>>` and converting that to a `Handle<T>` (assuming `Some(T)` in the `Maybe`)

[14:17:23.0984] <sfink>
I don't think so. It makes sense to have, given that we do have Maybe-aware specializations to make Rooted<Maybe<T>> work in the first place.

[14:17:34.0156] <sfink>
you could be a Bad Person and use fromMarkedLocation for now

[14:19:19.0532] <mgaudet>
Heh. I'm not even sure this patch is going to live very long

[14:19:49.0958] <mgaudet>
so I'll wait and see a bit. I will open a bug tho


2020-02-11
[20:17:08.0619] <nasimafeef>
hi all,
Im a noobie to spidermonkey.
i just want to understand what is JS_AbortIfWrongThread?

[20:34:37.0871] <arai>
nasimafeef: there's a comment https://searchfox.org/mozilla-central/rev/a1592902acabf9bded973067133baaac1457f3d3/js/src/jsapi.h#2716-2724  does it make sense?

[20:34:56.0161] <arai>
or do you have question about the comment?

[21:22:39.0541] <nasimafeef>
arai: 
yes. the comment does make sense. 
i have few more doubts.
1. when does it usually happen in a real world scenario? (when app goes into background, or something?)
2. if i want to force JS_AbortIfWrongthread, what should i do?
3. what happens if a context is touched by thread other than owner thread.?

[21:24:49.0427] <arai>
basically, it shouldn't happen.  if it happens, it means that there's a bug in the API consumer

[21:24:59.0612] <arai>
what do you mean by "force" ?

[21:26:54.0282] <arai>
`JS_AbortIfWrongthread` is there to *safely* crash in such case, before it results in more critical issue, like use after free or something like that results in security issue

[21:32:23.0657] <nasimafeef>
arai: 

by force, i meant to make crash in my app which results in JS_AbortIfWrongthread stack trace.
i have one more doubt.
does JS_AbortIfWrongthread has anything to do with garbage collection?

[21:33:09.0444] <arai>
calling JSAPI from different thread will result in the crash

[21:34:32.0417] <arai>
yes, gc is also related, but many other things assume that the API is called from single thread

[21:36:16.0802] <arai>
err, "single thread" might be misleading

[21:36:20.0751] <arai>
owner thread

[21:37:21.0973] <arai>
(there can be multiple threads that has their own JSContext

[21:43:33.0342] <nasimafeef>
arai: thanks. 

[01:02:10.0604] <arai>
how is `baldrdash` feature in jsrust_shared specified while building? https://searchfox.org/mozilla-central/rev/a1592902acabf9bded973067133baaac1457f3d3/js/src/rust/shared/lib.rs#15

[01:02:39.0503] <arai>
now I'm trying to add configure parameter for rust frontend

[01:02:51.0337] <arai>
and want to build it conditionally

[01:03:27.0354] <arai>
and looks like feature there is the way to go, but now I wonder how it can be specified

[01:14:04.0712] <arai>
oh, nvm.  I found https://searchfox.org/mozilla-central/source/js/src/rust/moz.build#22

[02:04:56.0230] <Benjamin Bouvier>
arai: i'm around if you have any questions about Rust and mozbuild

[02:05:58.0904] <Benjamin Bouvier>
arai: one weird thing not easy to discover: you need to duplicate features in this file too so as to enable these in browser builds: https://searchfox.org/mozilla-central/source/toolkit/library/rust/gkrust-features.mozbuild#39

[02:11:09.0411] <arai>
thanks! I found that one first and didn't find one in js/src.  good to know that it's also necessary :)

[07:55:47.0179] <jandem>
fwiw, you can watch the WebAssembly Summit talks here: https://webassembly-summit.org/ 

[11:16:48.0792] <djvj>
iain: do not be alarmed, this is just me screwing up phabricator somehow

[11:19:24.0367] <ryzokuken>
o/

[11:19:42.0071] <ryzokuken>
Thanks for making this room federated.

[11:31:15.0935] <ptomato>
I second that emotion! I can finally disconnect from IRC :-)

[12:25:06.0254] <djvj>
https://searchfox.org/mozilla-central/source/js/src/frontend/UsedNameTracker.h#79

[12:25:44.0493] <djvj>
is it just me or does `noteBoundInScope` do a bit of sloppy marking of some vars as closed-over?

[12:27:00.0861] <djvj>
the (script_id > cur_script_id && scope_id >= cur_scope_id) logic would catch uses in scripts that are outside of the subtree of the scope being compiled, right?

[12:29:30.0580] <djvj>
e.g. `function foo() {   function a() { var x; }   function b() { x }   }.  Wouldn't ScriptId(b) > ScriptId(a) and the same for their respective scope IDs (assuming they're numbered sequentially as UsedNameTracker indicates)

[12:30:45.0475] <djvj>
nevermind, we only keep the current subtree we're ascending out of?

[12:30:51.0205] <jorendorff>
yeah

[12:30:57.0214] <jorendorff>
was trying to find a way to say that

[12:31:37.0318] <jorendorff>
incidentally, hypotheses like this are easy to test by doing stuff like
```
js> function foo() {   function a() { var x=1; return x; }   function b() { x }  dis(a); dis(b);  }
js> foo()
```

[12:32:06.0826] <jorendorff>
i mean, it doesn't tell you why, but it does clearly show GetLocal/SetLocal in a

[12:32:10.0461] <jorendorff>
 * i mean, it doesn't tell you why, but it does clearly show GetLocal/SetLocal in `a`

[12:34:41.0995] <jorendorff>
> <@usharma:igalia.com> Thanks for making this room federated.

forgive my ignorance - what does this mean? where can i read about it

[12:35:22.0485] <ryzokuken>
> <@jorendorff:mozilla.org> forgive my ignorance - what does this mean? where can i read about it

this means that people can join this room from other matrix homeservers.

[12:35:44.0639] <ryzokuken>
for example, you can see a bunch of Igalians recently joined from matrix.igalia.com

[12:36:18.0270] <mgaudet>
https://matrix.org/faq/#what-does-federated-mean%3F 

[12:36:26.0466] <mgaudet>
(for the "where can I read about it")

[12:36:47.0139] <ryzokuken>
if you check my account, it should show up as @ryzokuken:igalia.com while y'all are :mozilla.org

[12:37:23.0475] <ryzokuken>
thanks mgaudet 

[12:37:57.0861] <ryzokuken>
I'm personally extremely happy Mozilla chose Matrix. :D

[12:38:11.0796] <jorendorff>
I'm personally happy and slightly amazed

[12:38:34.0283] <jorendorff>
better outcome than I imagined at the outset

[12:39:19.0071] <jorendorff>
hmm, i guess i need to read more about the protocol to understand what someone's being thanked for

[12:40:01.0680] <Waldo>
I'm kinda meh on it, but approximately neutral with others happier is a win, right?

[12:40:25.0650] <Waldo>
I do want to figure out at some point how to keep some logging, like I could with IRC.

[12:40:33.0268] <ryzokuken>
Waldo: which alternative would have made you happier?

[12:41:01.0344] <ryzokuken>
wait, you don't see logs? Which client are you using?

[12:41:07.0142] <jorendorff>
Waldo: my happiness is relative to expectations when it became clear we were going to move off irc

[12:41:23.0845] <Waldo>
ryzokuken: I was not particularly convinced IRC was so terrible that we needed to replace it, so the alternatives are not relevant to my opinion.  :-)

[12:41:37.0892] <jorendorff>
i was surprised the outcome wasn't some proprietary thing that locks out most of the world

[12:41:39.0269] <Waldo>
jorendorff: Yeah, that's pretty fair, it me and all.

[12:42:02.0470] <ryzokuken>
Waldo: I understand your position, and I wouldn't really say I disagree.

[12:42:06.0747] <Waldo>
And I think at this point you can get on without having to hoop-jump an LDAP account or something?  I hope?

[12:42:21.0952] <ryzokuken>
But once it was decided that there had to be a replacement, I was hoping that the chosen successor be Matrix.

[12:42:44.0584] <ryzokuken>
jorendorff: exactly, that's what I was most afraid of.

[12:43:26.0378] <ryzokuken>
Waldo: you can either have simple Matrix signup or LDAP SSO

[12:43:33.0281] <Waldo>
I will say, to the extent I'm sad about anything, it's that the PTB decided to keep Slack around, which is basically "there are two standards!  terrible! ...short time later...  there are still two standards!  terrible!"

[12:44:08.0276] <Waldo>
If I'd been in charge of this, I don't think you change without moving everyone onto exactly one system.

[12:45:11.0628] <jorendorff>
i imagine we are now pumping $$$ into making matrix and riot better, which seems like it could be an improvement over pumping $$$$ into irccloud and keeping moznet limping along

[12:45:38.0378] <ryzokuken>
jorendorff: even the extra attention is worth it, I guess.

[12:45:42.0809] <Waldo>
Also despite appearances, people, I am PTO today to do some bike route-planning.  :-)  Thinking about biking to Vegas, then on to just north of Austin, TX for Easter, with a side trip in the middle to DC for _Google v. Oracle_ at SCOTUS.

[12:45:47.0155] <ryzokuken>
Mozillians are pretty amazing open-source citizens :)

[12:46:03.0560] <Waldo>
Gotta figure out whether the routes are practical in the appropriate time frame, tho, before I commit myself.

[12:46:15.0168] <jorendorff>
ryzokuken: do you happen to know what section of the spec i should look at to understand what it means to make a room federated?

[12:46:35.0877] <jorendorff>
really my question is, are they not federated by default, and is it something i can toggle

[12:46:45.0291] <jorendorff>
for another room i admin

[12:46:51.0286] <ryzokuken>
jorendorff: did you check out the document by mgaudet?

[12:47:09.0585] <jorendorff>
I understand what federation is

[12:47:12.0786] <mgaudet>
jorendorff: I think federation is -server- level setting

[12:47:37.0526] <mgaudet>
jorendorff: we had it turned off on this server until today, because there was concern about an abuse vector via federation that has since be fixed

[12:47:38.0919] <zombie>
jorendorff: i believe "who can access this room" and "guests"

[12:47:59.0014] <jorendorff>
ok, i think my settings are about right then

[12:49:01.0537] <ryzokuken>
Oh, I see now what you mean.

[12:51:13.0447] <Waldo>
I suppose the mildly next question I get to think about is, will the IRC channels I'm on on freenode ever switch to Matrix or something so I could theoretically drop IRC entirely?  Would be nice.  Probably can't hope too much for it.  The prior consensus on IRC was helpful for that.

[12:52:02.0472] <zombie>
you should be able to irc from matrix, specifically for freenode and mozilla irc

[12:53:04.0143] <zombie>
https://github.com/matrix-org/matrix-appservice-irc/wiki/Guide:-How-to-use-Matrix-to-participate-in-IRC-rooms

[12:56:32.0229] <ryzokuken>
oh yeah, free bouncing too!

[12:57:02.0590] <ryzokuken>
basically Matrix has these IRC bridges and you can either host a bridge on here or connect over matrix.org

[12:57:20.0310] <ryzokuken>
since matrix.org is federated too, that should just work...

[12:57:25.0899] <mgaudet>
(AIUI right now Matrix bridging to IRC is having some resource issues due to the popularity bump from FOSDEM, but itt's being worked on and should be rectified in the not too distant future) 

[12:57:29.0951] <mgaudet>
 * (AIUI right now Matrix bridging to IRC is having some resource issues due to the popularity bump from FOSDEM, but it's being worked on and should be rectified in the not too distant future) 

[12:58:33.0024] <zombie>
setup is a bit janky, spins for a dozen seconds, but works ok after that

[12:58:53.0205] <ryzokuken>
it's hard running free bridges üòÖ

[12:59:46.0983] <ryzokuken>
especially since there's a bunch of students I know who cannot afford a proper bouncer and use matrix.org purely as an IRC client...

[14:05:52.0791] <Waldo>
~415mi to Barstow mapped out so far, with reasonable confidence in that routing at least for the moment.

[14:06:29.0180] <ryzokuken>
Waldo: when are you planning on making the trip? :)

[14:08:13.0483] <Waldo>
ryzokuken: Assuming I have enough time to make each leg, around mid-March.  Gotta be in Vegas by March 21, probably want to fly back from DC March 24, then assuming I resume biking March 25, that gives me 18 days to get to near Austin -- which Google says is ~1200-1300mi, so _should_ be doable but I want to get a route picked before I say for sure.

[14:09:51.0469] <Waldo>
There's a clear deadline to get to Vegas, but if it's really 1300mi and I have 18 days, that gives room to take it easier getting to Texas, should I so choose.  If I get there earlier, more time to see family; if not, that's just how it goes.

[14:12:36.0704] <Waldo>
Leaving March 14 would maximize time to get to Vegas by including a full weekend, and seven full days before March 21 (but with the Red Wings hockey game at 19:00 on March 21, I could take til midday that day without issue), so if this all happens, that'd be the likely departure day.

[14:22:22.0328] <iain>
The clang static analysis plugin has a pass that verifies that certain types, JS::Value among them, aren't used as parameters. Does anybody know what badness this prevents that is not already addressed by the hazard analysis?

[14:22:42.0942] <iain>
Context: the clang plugin is very sad about V8's regexp code.

[14:22:54.0371] <tcampbell>
The JS::Value stuff might be resolved now that it is not a union

[14:24:07.0301] <Waldo>
iain: `alignas` restrictions on classes are not guaranteed to be enforced on those classes when used as parameters.  Now that we have just a union, tho, I think even platform ABIs are required to align the union contents, so I think both the `alignas` and the `MOZ_NON_PARAM` could probably be removed.

[14:25:50.0399] <iain>
Intriguing. I will write a patch for that and see if it appeases the plugin.

[14:37:05.0647] <Waldo>
Or, hm.

[14:38:04.0875] <Waldo>
Do we actually need `JS::Value` to be 8-byte-aligned?  Without the `alignas(8)`, there is no guarantee of that -- on some platforms, `uint64_t` or `double` can be 4-byte-aligned.

[14:38:59.0385] <tcampbell>
I think at this point we don't require it

[14:39:03.0607] <Waldo>
I _assume_ our GC demands that 8-byte-alignment, right?  If so, we still need that `alignas(8)`, and we can't get rid of that, and I guess then the `MOZ_NON_PARAM` is still required.  Merely having a union doesn't help anything.

[14:39:33.0268] <iain>
For the record, we don't have a union. We have a struct containing a uint64_t and a bunch of methods that interpret the uint64_t.

[14:39:44.0569] <iain>
Not sure if that affects anything.

[14:39:47.0264] <tcampbell>
GC-things are 8-byte aligned, but the alignment of value shouldn't really matter

[14:39:53.0112] <Waldo>
Oh right, true -- union was til recently.

[14:40:16.0924] <tcampbell>
Only thing to confirm would be that code that converts Value to double compiles to something reasonable

[14:50:37.0207] <Waldo>
Bleh, this is no good.  https://www.arcgis.com/apps/webappviewer/index.html?id=317d166ee2f14a42be32ee2ec22cedf9 alleges I-15 opens to bikes at Hahvahd Road, but https://www.google.com/maps/@34.9617547,-116.6444376,3a,75y,93.13h,92.74t/data=!3m6!1e1!3m4!1scwtsFxh-sGllU6QIDaH_ng!2e0!7i13312!8i6656 alleges otherwise.  Edits on the former indicate this is as of June 2016; date on the latter is July 2012.  So _if I trust the former_ that settles things, but it would require I-15 bike access to have changed in the past eight years at some point.

[14:54:18.0874] <Waldo>
And the slightly-further-along Field Rd. exit is also no-bike-signed, tho this time from December 2008, so even more datedly.

[15:04:46.0460] <iain>
Ugh. I'm triggering a static assertion in InterpreterFrame on 32-bit about sizeof(InterpreterFrame) % sizeof(Value) being 0.

[15:04:53.0946] <iain>
This sounds like a problem for Tomorrow Iain.

[15:40:38.0512] <jorendorff>
tcampbell: I am throwing a couple more Opcodes.h comment reviews at you. The big patch could be reviewed by anba. Not sure who else is qualified. Async ain't pretty.

[15:41:22.0888] <tcampbell>
that's fine. Probably should understand that stuff better anyways


2020-02-12
[16:20:07.0680] <mgaudet>
confession: Spent most of the day whacking a patch that defers JSScript allocation to fullyInitFromStencil with a stick, trying to figure out why three (and only three) test cases are failing. No real progress if I'm honest, but, the patch is nicer... so ¬Ø\_(„ÉÑ)_/¬Ø 

[16:39:20.0996] <Waldo>
Mm, we need confessionbot here too, don't we.

[01:46:27.0435] <wingo>
o/

[01:51:00.0683] <ioanna>
good morning!

[02:11:10.0483] <jandem>
more Igalians \o/

[05:14:38.0996] <jorendorff>
yay

[05:21:11.0959] <jorendorff>
evilpie: Do you use Mozilla SSO to log into this Matrix instance? Asking for @khyperia

[05:21:16.0941] <jorendorff>
who is locked out

[05:21:29.0137] <evilpie>
jorendorff: yeah Mozilla LDAP

[05:21:33.0117] <jorendorff>
ok

[05:22:34.0673] <jorendorff>
thanks

[07:29:55.0630] <jld>
The `mozilla.org` Matrix realm also supports authn via FxA and GitHub as I understand it, if that's useful.

[07:31:05.0444] <littledan>
I've gotten in via GitHub FWIW

[09:05:13.0727] <sfink>
bug 1598612

[10:01:45.0887] <Benjamin Bouvier>
sfink: try again üôÇ

[10:01:48.0874] <Benjamin Bouvier>
bug 1598612

[10:01:50.0016] <Botzilla demo>
https://bugzil.la/1598612 ‚Äî NEW (nobody) ‚Äî Reenable js ref tests for Atomic

[10:04:07.0520] <sfink>
heh, cool

[10:40:08.0675] <decoder>
jorendorff: in https://bugzilla.mozilla.org/show_bug.cgi?id=1601286#c3 you said that race will be fixed by Stencil. I now see this same race with "InitFromStencil" on the stack instead of the XDR stuff. is that expected?

[10:40:09.0855] <Botzilla demo>
NEW (nobody) ‚Äî ThreadSanitizer: data race [@ flagsField] vs. [@ setFlagBit]

[10:41:09.0663] <jorendorff>
Very good question

[10:41:55.0991] <jorendorff>
decoder: It is expected, and it's because Stencil isn't done.

[10:42:03.0506] <jorendorff>
We haven't done the atoms part of Stencil yet.

[10:42:16.0181] <decoder>
okay. then I will add that stencil frame to the suppression list

[10:42:35.0154] <jorendorff>
wow that's terrifying

[10:47:03.0969] <decoder>
you mean because we would not be able to detect races related to stencil?

[10:47:24.0092] <jorendorff>
No

[10:47:26.0720] <jorendorff>
um, yes

[10:47:35.0395] <jorendorff>
I mean that I don't know how the suppression list works.

[10:48:27.0776] <jorendorff>
I wouldn't want everything with `fullyInitFromStencil` anywhere on the stack to be whitelisted

[10:50:05.0111] <decoder>
the suppression list works exactly that way

[10:50:13.0087] <decoder>
do you have a better idea for a frame to pick?

[10:50:31.0873] <decoder>
https://treeherder.mozilla.org/logviewer.html#/jobs?job_id=288395405&repo=try&lineNumber=2527

[10:50:45.0821] <decoder>
ive decided to take BCEScriptStencil::finishGCThings

[10:50:47.0119] <jorendorff>
/me looks

[10:52:11.0132] <jorendorff>
decoder: I don't see anything much better. but whitelisting both js::frontend::BCEScriptStencil::finishGCThings and the other finishGCThings method seems a bit better.

[10:52:35.0630] <jorendorff>
 * decoder: I don't see anything much better. but whitelisting both js::frontend::BCEScriptStencil::finishGCThings and js::frontend::ScriptStencil::finishGCThings seems a bit better.

[10:53:05.0163] <decoder>
great, will do that :) thx

[11:33:48.0490] <jknr>
 hello hello ! Where can I best learn about the differences and benefits of cranelift vs ion as wasm engine? or is cranelift just a compiler? haha see I am totally uneduacted :D

[12:04:02.0923] <cfallin>
jknr: CraneLift is currently an alternate backend for Wasm; the default is still Ion. Long term plan, as I understand it, is to evaluate switching to CraneLift, but we're actively working on improving CL first. (I only recently started working on CraneLift so others may have more detailed answers; try @sunfish, Benjamin Bouvier or lth perhaps)

[12:05:54.0989] <cfallin>
And to answer the more general question, CraneLift is meant to be a general-purpose compiler backend, with design optimized for fast JITs rather than more traditional ahead-of-time (like LLVM); it's pulled into SpiderMonkey specifically as a Wasm backend though.

[12:58:45.0569] <tcampbell>
caroline: what is the `if (kind_ == Kind::FunctionBox) {` check for?

[12:59:00.0844] <tcampbell>
I think we want the flag for any kind of context?

[13:02:24.0778] <tcampbell>
eg. a global-script may have inner functions and should probably set the flag too

[13:12:23.0036] <caroline>
My original thinking was that hasInnerFunctions could only be set on for functionBoxes, because thats what was happening before but because we were using the flag in BaseScript it was still important to set the flag accurately to false in the other cases. i see that that doesnt make much sense now, will push taking that check away in a second. 

[13:14:03.0342] <caroline>
by could only be set on functionBoxes i actually mean was only set on

[13:19:13.0958] <tcampbell>
so nothing today will read the flag on global-scripts, but it seems like a footgun worth fixing

[13:27:02.0300] <caroline>
i see i see, of the kinds that shared context can be the ones that can potentially have the hasinnerfunction flag set are: function box, global, and module? 

[13:31:00.0369] <tcampbell>
eval too

[14:59:01.0667] <jorendorff>
hear me out: have we considered making JSScript a subclass of nsIFrame? it has all these handy boolean fields we can reuse https://searchfox.org/mozilla-central/rev/1db5ef59eba65d32d6a29a494e87b6078453e559/layout/generic/nsIFrame.h#590-608

[14:59:23.0904] <jorendorff>
we can just `#define` them all to the names we want

[15:00:05.0537] <jorendorff>
 * hear me out: have we considered making ScriptStencil a subclass of nsIFrame? it has all these handy boolean fields we can reuse https://searchfox.org/mozilla-central/rev/1db5ef59eba65d32d6a29a494e87b6078453e559/layout/generic/nsIFrame.h#590-608

[15:00:09.0360] <jorendorff>
there's already a hierarchy and they're already refcounted

[15:00:16.0378] <jorendorff>
that's like 90% of the way there ;)

[15:00:41.0806] <cfallin>
jorendorff: if a script `mayHaveRoundedCorners`, are we obligated to run it faster somehow? (I am not sure how the aerodynamics work exactly)

[15:01:59.0987] <jorendorff>
we can use that to decide whether to check for `Array(1, 2, 3)`. without rounded corners that would look like `[1, 2, 3]`

[15:02:19.0027] <cfallin>
oh, fair, so mostly a frontend/parsing concern

[15:02:55.0870] <jorendorff>
jit pattern-matching, i think, the frontend is way too stupid to try anything there

[15:03:50.0880] <jorendorff>
`mAllDescendantsAreInvisible` tells us we're running benchmark code and the results are just going to be thrown away

[15:04:21.0294] <jorendorff>
mParentIsWrapperAnonBox for IIFEs, of course

[15:04:24.0542] <jorendorff>
 * `mParentIsWrapperAnonBox` for IIFEs, of course

[15:05:12.0463] <Waldo>
"I'll smoke what he's smoking"

[15:05:41.0543] <sfink>
/me accidentally reads messages from newest to oldest, slaps forehead when reaching far enough back

[15:32:13.0328] <jimb>
I'm so glad Jason put the link I sent him to good use

[15:32:23.0602] <jimb>
 * I'm so glad to see Jason put the link I sent him to good use

[15:43:37.0089] <Waldo>
jimb: I am gratified to see your big snowball of a doggo still taking pride of place for your picture

[15:43:57.0717] <Waldo>
Tho there's a faint possibility that's not the same one I've seen before?  idk

[15:44:49.0928] <jimb>
No, it's still Aleph (rest his soul)

[15:46:11.0083] <jimb>
We have new dogs that are extraordinary, but not quite as photogenic


2020-02-13
[02:32:34.0720] <jonco>
@allstarschh:mozilla.org: hey, I see you are still checking your bugmail

[02:32:55.0509] <jonco>
@allstarschh:mozilla.org: I forgot you were on PTO, so no pressure on bug 1608056

[02:32:56.0899] <Botzilla demo>
https://bugzil.la/1608056 ‚Äî NEW (allstars.chh) ‚Äî Support nursery BigInt values in NurseryKeysVector

[03:23:36.0049] <jonco>
*excited to review patches for bug 1615145*

[03:23:37.0230] <Botzilla demo>
https://bugzil.la/1615145 ‚Äî ASSIGNED (tcampbell) ‚Äî Combine JSScript and LazyScript arenas

[03:48:20.0398] <jcristau>
jandem: you might want to update /topic for the 75 train?

[03:48:40.0709] <jandem>
oh right, I'll do it now

[03:50:10.0451] <jandem>
jcristau: thanks for the reminder üôÇ

[04:28:19.0989] <allstarschh>
> <@jonco:mozilla.org> @allstarschh:mozilla.org: I forgot you were on PTO, so no pressure on bug 1608056

cool, thanks

[04:28:21.0169] <Botzilla demo>
https://bugzil.la/1608056 ‚Äî NEW (allstars.chh) ‚Äî Support nursery BigInt values in NurseryKeysVector

[04:34:26.0186] <tcampbell>
The third step after folding arenas is to fold instances. I'll put up the simplified prototype today. I think breaking off the TraceKind changes is making this much simpler

[05:19:45.0470] <jandem>
hm, another -2500 lines patch stack

[05:59:37.0188] <tcampbell>
jonco: This should now say markImplicitEdges, right? https://searchfox.org/mozilla-central/rev/1db5ef59eba65d32d6a29a494e87b6078453e559/js/src/gc/Marking.cpp#753

[06:01:53.0340] <jonco>
tcampbell: yes

[06:02:17.0697] <jonco>
I guess we change the name at some point

[06:03:39.0479] <tcampbell>
jonco: I'm trying to figure out the answer to https://phabricator.services.mozilla.com/D62680#inline-377834

[06:03:51.0805] <tcampbell>
How would I make a test for that?

[06:06:45.0518] <jonco>
This is to do with weakmaps that have script keys

[06:06:57.0347] <jonco>
I expect the debugger is the only use of those

[06:07:48.0319] <jonco>
Did your patch change the struct ImplicitEdgeHolderType<LazyScript*> to ImplicitEdgeHolderType<BaseScript*>?

[06:07:53.0349] <jonco>
If so I think you're fine

[06:08:19.0092] <jonco>
markImplicitEdgesHelper doesn't actually depend on the type, it treats its argument as Cell*

[06:11:14.0802] <jonco>
 * I guess we changed the name at some point

[06:12:28.0951] <padenot>
hi spidermonkey people. I'm implementing bits of `AudioWorklet` in Gecko, and I need something that doesn't seem exposed nicely or at all: I need to change the length of an already allocated typed array (a float32array) of length 128, to either be 128 or 1, without allocating/generating garbage, etc.

[06:13:12.0017] <padenot>
I see that I can reach into the private slots for this object, and mutate things there, but I don't know if this will work, or if I will trip asserts or cause other issues

[06:17:17.0105] <jandem>
padenot: can I ask why exactly? the only way the length changes in the engine now AFAIK is when detaching an array buffer

[06:18:08.0902] <jorendorff>
...which has been the source of some bugs

[06:18:23.0661] <jandem>
yeah, that worried me

[06:18:51.0148] <tcampbell>
jonco: I did in the next patch. I'm going to pull it up one patch earlier for consistency. I was running tests on intermediate patches and was trying to understand why I didn't catch.

[06:19:06.0100] <padenot>
The spec says that a particular callback function can give you either an array that is 128 elements (representing a parameter value changing, during a particular period of time), or an array that is 1 element (meaning that, for the same period of time, the value is constant)

[06:19:16.0822] <jorendorff>
padenot: To begin with, you're right that it's not exposed at all and that mutating private/reserved slots is a super bad idea, we'd want to punch a new API for ya if we can't talk you out of it

[06:19:58.0558] <padenot>
I can't allocate, I can't do anything that cause GC, because this on a real-time thread where we can't do anything unbounded

[06:20:34.0045] <jonco>
tcampbell: I wouldn't be surprised if it didn't cause failures - you'd need quite a specific set of circumstances

[06:20:35.0901] <padenot>
more like, we want to allow authors that know what they are doing to have a way to not trigger gc

[06:20:36.0729] <jonco>
that sounds great

[06:20:57.0453] <jonco>
 * that sounds great (putting it in it the first patch)

[06:21:53.0889] <jandem>
padenot: has this typed array been exposed to JS in any way? it's not great but I wonder about pre-allocating two arrays :/ 

[06:22:03.0286] <padenot>
that's my backup plan

[06:22:11.0944] <padenot>
but I figured I'd ask here first

[06:22:39.0448] <padenot>
the second one would be one float + a length, not the end of the world I assume

[06:22:47.0993] <jorendorff>
real time JS

[06:23:02.0733] <jorendorff>
golly

[06:23:41.0445] <padenot>
I was surprised how well it works, to be honest

[06:23:48.0028] <jandem>
probably good to discuss "to have a way to not trigger gc" with the gc team too, there can be time-based GC triggers for example

[06:23:56.0697] <padenot>
this has been discussed

[06:24:04.0347] <jandem>
awesome :) 

[06:24:54.0161] <ajeffrey>
For the implementation of servlets in Servo, I jumped through all kinds of hoops to avoid GC interrupting paint,

[06:24:56.0158] <padenot>
of course the people writing js can do absolutely terrible things if they want, but what we needed is to have a way to do good things, and it works extremely well

[06:25:35.0767] <Ms2ger [~half-time dedication]>
/me waves at ajeffrey 

[06:25:45.0330] <ajeffrey>
there was a thread pool of SM instances, and swapping whichever was the hot thread when it looked like GC was about to happen.

[06:26:11.0468] <ajeffrey>
/me waves back to Ms2ger [~half-time dedication] 

[06:26:13.0919] <padenot>
heh

[06:26:27.0202] <jorendorff>
Two typed arrays seems best.

[06:26:37.0465] <padenot>
easier for use, we also can't context switch too much, so we don't use thread pools or anything fancy

[06:27:07.0494] <ajeffrey>
this all worked because paint worklets are stateless, may not be appropriate for audio.

[06:27:23.0759] <padenot>
jorendorff: ok! Seems like it's probably best indeed, thinking again about the typed array apocalypse a few years back

[06:27:42.0842] <padenot>
especially because I don't think it's going to be a performance problem

[06:27:56.0271] <Ms2ger [~half-time dedication]>
How close to trunk SM are y'all these days?

[06:28:51.0980] <padenot>
thanks all!

[06:29:00.0343] <padenot>
/me continues learning jsapi

[06:29:15.0714] <jandem>
we're sorry :p 

[06:29:41.0160] <padenot>
nah don't be all things considered this is sensible

[06:29:49.0453] <jorendorff>
Yeah, I'm not sorry.

[06:30:09.0380] <jorendorff>
I feel pretty good saying "there's a pretty good way forward right now that you're in total control of"

[06:30:57.0166] <jandem>
oh I meant jsapi in general 

[06:31:04.0708] <jorendorff>
oh, yes, that

[06:31:15.0347] <jorendorff>
/me looks bashful

[06:31:47.0747] <padenot>
also on the other hand, JIT and WASM performance for our use-cases are insane, and the fact that we can tell people that there is a way to not trigger gc is particularly awesome, so having to use two arrays is really not a problem

[06:32:20.0457] <jandem>
makes a lot of sense

[06:33:00.0380] <jorendorff>
"don't create any objects (and don't use eval/with, they create objects)" will basically work for people, right?

[06:33:12.0937] <jorendorff>
i mean, don't add strings lol

[06:33:13.0580] <ajeffrey>
Ms2ger [~half-time dedication]: in Servo? There's a smup in the works, we're currently on SM 67.

[06:33:28.0010] <padenot>
yep that's what I've been told, and it works perfectly

[06:33:33.0456] <jandem>
there are also engine-internal things like delazification, shapes.. 

[06:33:52.0051] <padenot>
yeah also I tell people "write code that looks boring and don't try to be clever"

[06:34:13.0904] <padenot>
"write your signal processing code like you'd do it in C"

[06:34:53.0265] <jorendorff>
You know, this is a super cool thing to exist

[06:35:05.0061] <jorendorff>
you have a cool job

[06:35:08.0756] <padenot>
in practice people use WASM for this, but plain js that is just doing a lot of maths goes a really long way, I was genuily surpriised

[06:35:35.0640] <padenot>
you can hear the jit kicking in, when all the audio glitches disappear because the code is now super fast

[06:36:17.0586] <jandem>
wasm is great for these things in particular (JIT is harder to get consistently good results, but good to know it's doing well too so far)

[06:36:50.0472] <padenot>
mixed results in Chrome on the same API, but really really solid in Firefox

[06:37:26.0847] <padenot>
we're really stressing it to see how far it can go, how much non-optimal code you can write until it break apart

[06:37:42.0254] <jandem>
nice

[06:39:20.0469] <tjr>
I am dealing with some Hazard failures. I understand the basic concept of the problem (I'm not rooting something living across a (possible) GC.)  Have a couple of questions though.

[06:40:12.0322] <jorendorff>
tjr: Great, you're in the right palce

[06:40:17.0997] <jorendorff>
 * tjr: Great, you're in the right plcae

[06:40:19.0930] <jorendorff>
 * tjr: Great, you're in the right place

[06:40:31.0430] <tjr>
1) I don't quite understand *how* I caused a Hazard. AFAICT what I added boils down to some pointer dereferences and casts. Is it possible the hazard analysis is being conservative and confused? It's path 3 in https://treeherder.mozilla.org/#/jobs?repo=autoland&selectedJob=288245610&resultStatus=testfailed%2Cbusted%2Cexception&revision=05b2d3c59b8889d49c14951d4db324f0e681d656 

[06:41:17.0930] <tjr>
2) One of my hazards is the this pointer of js::DebuggerFrame... I am not sure what to do about that....

[06:42:47.0633] <tjr>
3) I'm trying to pass a RootedScript local variable into a function argument that I changed to also be a RootedScript but that gives me 'error: call to deleted constructor of 'JS::RootedScript' : Rooted(const Rooted&) = delete; ' which makes me think I am not doing something correct here...  

[06:43:04.0913] <jandem>
the argument should be HandleScript 

[06:43:15.0695] <jandem>
RootedScript converts to that implicitly

[06:43:35.0022] <jorendorff>
right. RootedScript for local variables; HandleScript is like a C++ reference to that

[06:43:55.0706] <tcampbell>
In job details you should see a download called 'hazards.txt.gz'. You'll want to look at that for the 'how'

[06:44:36.0101] <jorendorff>
tjr: by "path 3" did you mean the third entry in hazards.txt.gz?

[06:45:13.0887] <jorendorff>
tjr: for question 2, you can create a local `Rooted<DebuggerFrame*> self(cx, this);` and then not use `this` again

[06:45:28.0002] <jandem>
oh it thinks IsIonEnabled can GC now because the analysis can't see through `nsIPrincipal.GetIsAddonOrExpandedAddonPrincipal` 

[06:45:44.0900] <tjr>
jorendorff: Sorry I meant 'patch 3'

[06:45:50.0927] <jorendorff>
ahhhhhh

[06:46:01.0837] <tjr>
That's the patch that chases 'IsBaselineJitEnabled' which turns that functional call into a maybe-GC

[06:46:11.0899] <tjr>
 * That's the patch that changes 'IsBaselineJitEnabled' which turns that functional call into a maybe-GC

[06:46:18.0819] <tjr>
 * 1. I don't quite understand _how_ I caused a Hazard. AFAICT what I added boils down to some pointer dereferences and casts. Is it possible the hazard analysis is being conservative and confused? It's patch 3 in https://treeherder.mozilla.org/#/jobs?repo=autoland&selectedJob=288245610&resultStatus=testfailed%2Cbusted%2Cexception&revision=05b2d3c59b8889d49c14951d4db324f0e681d656

[06:46:56.0214] <jandem>
hm maybe this is a good use for `AutoSuppressGCAnalysis suppress;` in these IsEnabled functions, it seems weird/unexpected to have them be maybe-GC

[06:48:25.0255] <tcampbell>
> <@jorendorff:mozilla.org> tjr: for question 2, you can create a local `Rooted<DebuggerFrame*> self(cx, this);` and then not use `this` again

Aren't we far better off just making it a static function taking a handle? Re-rooting `this` seems like asking for trouble

[06:49:07.0434] <jorendorff>
yeah, static method is the right way to do it

[06:49:26.0785] <jorendorff>
i have no idea why i recommended that

[06:50:46.0825] <jandem>
or maybe suppress the analysis in `nsJSPrincipals::isSystemOrAddonPrincipal`, closer to where it happens. It will still assert at runtime if we _can_ gc for some reason

[06:51:36.0024] <tjr>
I am (unsurprisingly) happy at the idea of AutoSuppressGCAnalysis if that's what people think is the best approach. Otherwise I can work on Rooting and static-ing stuff.

[06:53:17.0051] <jandem>
IMO it is in this case, it's really surprising otherwise and requires some non-obvious workarounds (as the analysis points out)

[06:57:13.0982] <iain>
jandem: Do we intend to add TypedObject support to Warp at some point? If we're still using MIR as a backend when we do so, does it make sense to keep the MIR support for TypedObjects around (but get rid of all the IonBuilder/TI stuff?

[06:57:40.0042] <iain>
 * jandem: Do we intend to add TypedObject support to Warp at some point? If we're still using MIR as a backend when we do so, does it make sense to keep the MIR support for TypedObjects around (but get rid of all the IonBuilder/TI stuff)?

[07:00:48.0647] <jandem>
iain: I think what's in CacheIR now is simpler and more of a subset of what's in Ion.. I expect we'd not need all of it, or implement it differently

[07:02:33.0138] <jandem>
it's a good point though. I wonder how much time we should spend on this later, considering the status and uncertain future :/

[07:08:12.0675] <iain>
I think it's probably best to just remove all the code now. If it turns out we were wrong and we wish we had this exact code back,  that's why we have source control.

[07:09:08.0338] <nbp>
jandem: Making use of a bazooka for catching a fly? 

[07:09:10.0239] <jandem>
sounds ogod. Once we have a way to classify stubs better, I think it makes sense for Warp to ignore initially. Then at some point we can redo object model and re-implement this if/when needed

[07:09:44.0561] <jandem>
 * sounds good. Once we have a way to classify stubs better, I think it makes sense for Warp to ignore initially. Then at some point we can redo object model and re-implement this if/when needed

[07:11:01.0593] <jandem>
> <@nbp:mozilla.org> jandem: Making use of a bazooka for catching a fly?

it'd have to happen with warp anyway because it's so much based on TI. We're just doing it sooner because it's not used and has bugs in complex code

[07:11:59.0208] <tcampbell>
I strongly suspect when we rebuild typedobject optimizations in future that they will look far different

[07:12:42.0963] <tcampbell>
Will also be interesting to see how the wasm-gc proposals progress

[07:14:20.0232] <jandem>
implementation is also complicated (TypeDescr attached to ObjectGroup). I think it makes sense to overhaul with/after TI

[07:45:02.0671] <tcampbell>
A unified optimization story for non-scripted proxies, typedobjects, etc would be nice. I think we can achieve it too

[07:46:35.0062] <tcampbell>
Current system is adhoc with different approaches for DOM vs others. We also have cliffs between baseline and Ion as a result 

[08:01:49.0239] <jandem>
yeah, hopefully after our current projects it will become easier to fix that

[08:15:04.0876] <nbp>
Do we have JS language adoption metrics? Maybe yulia /anba  would know ?

[08:15:29.0091] <yulia>
nbp: you mean for new features?

[08:19:22.0627] <nbp>
Just features in general, such as class, constructor, iterators, ...?

[08:20:00.0195] <yulia>
there are two ways we can look at that metric: number of times that kind of code is run, and popularity of use

[08:20:20.0488] <yulia>
we _don't_ really have the metrics for number of times that code is run, aside from browser feature counters

[08:20:26.0159] <yulia>
at least not that i know of

[08:20:31.0795] <jorendorff>
there are many ways, because the web is so ... nonlinear

[08:20:33.0777] <nbp>
I guess we could get some information out of the real-js-samples.

[08:20:52.0482] <yulia>
for the second one, we don't have a unified source, but there are a few silos we can reference

[08:21:12.0893] <yulia>
one is github, they are working on an api, the other is react -- they have metrics on how their library is used

[08:21:18.0147] <nbp>
(the question isabout knowing when to prioritize work)

[08:21:18.0544] <yulia>
but nothing unified

[08:21:24.0568] <nbp>
 * (the question is about knowing when to prioritize work)

[08:21:26.0500] <jorendorff>
There are questions like "what percentage of page loads" that real-js-samples doesn't get us

[08:21:52.0919] <jorendorff>
Also, adoption is discontinuous; a feature isn't used, and then it's on facebook.com

[08:24:08.0030] <tcampbell>
I'd imagine it is useful to trailblaze with a few features we think are more complex. The easier/common stuff will quickly be backfilled by us and others.

[08:27:00.0756] <yulia>
features are also designed for different consumers -- for example private fields is something that is expected to be used primarily by library authors. it might be that not many developers use it directly, but it might impact a lot of projects. also that expectation might be false..

[08:27:35.0883] <jorendorff>
Right. This is why we've never collected usage metrics except with a clear purpose (like, we want to delete this old random feature)

[08:27:56.0792] <jorendorff>
specific needs lead to specific questions;

[08:53:05.0194] <jorendorff>
 * specific needs lead to specific questions

[08:53:07.0106] <jorendorff>
https://bugzilla.mozilla.org/show_bug.cgi?id=1608027

[08:53:09.0063] <jorendorff>
this bug sigh

[08:53:41.0855] <jorendorff>
simultaneously don't want to be involved

[08:53:48.0123] <jorendorff>
and very tempted to stick my foot in it

[08:54:06.0326] <jorendorff>
Waldo: boy are you right, stack inspection is just completely unnecessary here, and a sign of moral turpitude

[08:54:41.0039] <jorendorff>
the spec does not seem to be written in such terms at all

[08:54:56.0095] <jorendorff>
what were they thinking blah

[08:57:16.0092] <bzbarsky>
jorendorff: I commented on the bug, but for throw at toplevel how would you address this other than by stack inspection?

[08:57:53.0912] <bzbarsky>
(spec has various issues including predating ES having a clearly defined way to tell "what is executing right now?")

[08:58:28.0320] <jorendorff>
bzbarsky: Isn't the problem only that the error is being _reported_?

[08:59:12.0370] <bzbarsky>
yes....

[08:59:26.0324] <djvj>
jandem: fwiw, I'm with leaving out support for TypedObjects initially as well.  It'd be nice to break a bunch of dependencies on object representation for the purposes of making later changes there easier.

[08:59:30.0152] <bzbarsky>
So how do you decide which errors should be reported?

[08:59:34.0685] <bzbarsky>
And which should not?

[09:00:59.0680] <jorendorff>
bzbarsky: Right, so I guess my intuition is that every place where the platform runs JS, there's some top-level "enter a script context" sort of boilerplate

[09:01:26.0370] <jorendorff>
and "leave a script context" is where errors get reported, in the particular problematic sense

[09:02:22.0984] <jorendorff>
so to me it seems like the distance to the desired information is small; there is no stack at the point where the decision has to be made

[09:02:32.0957] <jorendorff>
you've already unwound it

[09:03:26.0944] <bzbarsky>
/me thinking

[09:03:45.0264] <bzbarsky>
So... there is such a thing, yes

[09:03:56.0056] <bzbarsky>
But the "script context" that gets entered is the global, right?

[09:04:02.0897] <bzbarsky>
And there is only one global here

[09:04:31.0754] <bzbarsky>
Basically, given <script src="same-site"> and <script src="cross-site"> we need to differentiate between exceptions thrown during the two executions

[09:04:48.0487] <bzbarsky>
And, conceptually, if the cross-site script adds an event listener

[09:04:55.0504] <bzbarsky>
And that listener throws when the event fires

[09:05:08.0742] <bzbarsky>
It would probably be best if that error did not get reported

[09:05:45.0315] <bzbarsky>
(note that I am excluding silly cases where you can just try/catch to get the info and focusing on cases where the cross-site script is entered directly from browser code)

[09:06:36.0691] <bzbarsky>
Now for the <script> case we can set a flag on the AutoEntryScript, because we're communicating the cross-siteness to the JS engine anyway

[09:06:42.0241] <bzbarsky>
So that seem plausible

[09:06:54.0770] <bzbarsky>
For the callback case....

[09:07:21.0186] <bzbarsky>
I guess we can look at whether the callback is a JSFunction, dig for its JSScript, and look at its muted flag

[09:07:31.0418] <jorendorff>
The cross-siteness has to be communicated in some way, otherwise it's impossible to implement regardless of how the spec questions get resolved

[09:07:36.0642] <bzbarsky>
sure

[09:07:47.0557] <jorendorff>
and it's communicated on entry

[09:07:52.0570] <bzbarsky>
The cross-siteness is fundamentally a property of the JSScript

[09:08:30.0617] <bzbarsky>
Now interestingly, if I call a cross-site function from an event listener

[09:08:37.0443] <bzbarsky>
An that calls one of "my" functions

[09:08:42.0845] <bzbarsky>
And that throws

[09:08:46.0723] <bzbarsky>
Should that be muted?

[09:08:51.0638] <bzbarsky>
The entry approach would say "yes"

[09:08:54.0039] <jorendorff>
> <@bzbarsky:mozilla.org> The cross-siteness is fundamentally a property of the JSScript

bzbarsky: hence the spec's "the relevant script"

[09:08:55.0530] <jorendorff>
?

[09:09:05.0000] <bzbarsky>
Yes

[09:09:18.0435] <bzbarsky>
Our current approach and the spec say "no"

[09:09:35.0120] <bzbarsky>
It might be ok to switch to the "yes" behavior....

[09:09:45.0337] <bzbarsky>
We'd need to convince the spec and other impls to change.

[09:09:55.0474] <jorendorff>
this is all going a little fast for me, I'm afraid

[09:10:11.0565] <bzbarsky>
Sorry

[09:10:54.0413] <jorendorff>
But I didn't mean to say that

[09:11:36.0031] <jorendorff>
this particular case should be muted; rather

[09:12:02.0195] <jorendorff>
just that however we specify what gets muted, it is always a property that we can know on entry, before running any code

[09:12:08.0024] <jorendorff>
*and*

[09:12:12.0439] <bzbarsky>
Well

[09:12:23.0552] <bzbarsky>
that depends on the behavior we want for this case

[09:12:30.0703] <jorendorff>
at the time we need to know the answer, we have unwound the stack and are back "there"

[09:12:37.0854] <bzbarsky>
That is, if this case should _not_ be muted, then we do not know it on entry

[09:12:46.0093] <bzbarsky>
Because entry is into a muted script

[09:12:52.0628] <bzbarsky>
Which calls an unmuted one

[09:12:55.0527] <bzbarsky>
which throws

[09:13:29.0083] <jorendorff>
So I think your argument is that we don't know, when we enter, if the context is "we are about to try to compile and run a <script> cross-site", only a script

[09:13:36.0626] <jorendorff>
 * So I think your argument is that we don't know, when we enter, if the context is "we are about to try to compile and run a <script> cross-site", we only have a script

[09:14:14.0967] <nbp>
Question: why do we consider muted as a reporter thing, and not a difference of site-origin between the reporter and catcher? In which case errors should carry the site-origin of the JSScript / JSSource when created.

[09:14:32.0024] <Ms2ger [~half-time dedication]>
bzbarsky: thanks for all the work on `assert_throws`!

[09:16:25.0763] <bzbarsky>
Ms2ger [~half-time dedication]: It was bothering me.  ;)

[09:16:39.0463] <bzbarsky>
jorendorff: no, that is not the argument

[09:17:16.0536] <bzbarsky>
jorendorff: We always know what thing we are entering.

[09:17:25.0622] <bzbarsky>
@nbp that is the spec model, yes

[09:17:39.0655] <bzbarsky>
nbp: It requires finding the JSScript when creating an error, right?

[09:18:22.0497] <bzbarsky>
jorendorff: There are basically three relevant "origins": (1) where script is entered, (2) where the error handler lives, (3) where the exception is thrown

[09:18:35.0490] <bzbarsky>
Since all this stuff is in the same global, all these things can call each otehr

[09:18:37.0487] <bzbarsky>
er, other

[09:18:38.0880] <bzbarsky>
Right?

[09:19:08.0677] <jorendorff>
Right

[09:19:09.0018] <bzbarsky>
Muting is only useful if there is no code from (2) anywhere on the callstack between (1) and (3)

[09:19:19.0722] <bzbarsky>
Because otherwise that code could try/catch anyway

[09:19:28.0036] <nbp>
I don't understand the difference between (1) and (3)

[09:20:01.0732] <jorendorff>
(1) is the caller of (3)

[09:20:34.0864] <bzbarsky>
lemme do a pastebin to explain the difference

[09:20:38.0744] <jorendorff>
A separate aspect of the problem with this conversation is that, beyond syntax errors, I don't understand what threat we are protecting against.

[09:21:27.0510] <jorendorff>
bzbarsky: I agree that try/catch has to work

[09:21:35.0196] <bzbarsky>
https://paste.mozilla.org/69PfsbvB

[09:21:42.0803] <jorendorff>
seems obvious we'd break the web

[09:21:45.0448] <jorendorff>
if it didn't

[09:22:05.0959] <bzbarsky>
jorendorff: So as far as threat models, the idea is to prevent information exfiltration from other servers

[09:22:13.0720] <bzbarsky>
nbp: Take a look at the pastebin

[09:22:31.0710] <bzbarsky>
nbp: (1) there is the cross-site script and (3) is the same-site inline script

[09:23:00.0191] <bzbarsky>
jorendorff: So if you link to a random file on some other server, which may or may not be JS, can you extract info from it?

[09:23:13.0371] <bzbarsky>
The SyntaxError case is obvious and is why muting was added originally

[09:23:13.0767] <jorendorff>
 I know this.

[09:23:16.0983] <jorendorff>
yes

[09:23:19.0943] <bzbarsky>
OK

[09:23:25.0414] <jorendorff>
that's the "may not be" case

[09:23:32.0373] <bzbarsky>
right

[09:23:43.0806] <jorendorff>
but, what if it is CSV, and it looks just barely enough like JS that it'll start running

[09:24:06.0308] <bzbarsky>
So in the case when it _is_ a script, enough to syntax-parse, can we prevent info leakage anyway?

[09:24:16.0835] <bzbarsky>
My gut feeling is "not so much", honestly

[09:24:31.0831] <bzbarsky>
(i.e. if the attacker messes with the default protos enough)

[09:24:40.0146] <bzbarsky>
But I don't know whether that's true.

[09:24:58.0693] <jorendorff>
```
js> Brooklyn,NY,11201   
typein:1:1 ReferenceError: Brooklyn is not defined
```

[09:25:24.0833] <nbp>
(Let's hope nobody want to overload the operator `,` in JavaScript)

[09:26:40.0819] <jorendorff>
bzbarsky: fine. but now I think we are talking about cases where the intended victim file basically has to be JS, or none of this can matter (?)

[09:26:54.0081] <jorendorff>
I mean, yes the CSV case, I see how you can scrape the whole file this way

[09:27:17.0702] <jorendorff>
but to me it seems like you could write a simple spec that solves that case

[09:27:34.0835] <jorendorff>
(it is not really harder than solving the SyntaxError case)

[09:28:37.0086] <jorendorff>
the spec says, at the point where we are leaving a context and about to report an error, "but if we are here because we are initially executing a cross-site `<script>` then don't"

[09:28:41.0945] <jorendorff>
 * the spec would be: at the point where we are leaving a context and about to report an error, "but if we are here because we are initially executing a cross-site `<script>` then don't"

[09:29:21.0760] <jorendorff>
so to me (1) this solves the problem (2) this does not do stack inspection

[09:33:18.0336] <bzbarsky>
So to be clear, I agree that this solves the problem and does not do stack inspection

[09:33:35.0656] <bzbarsky>
Going back to my "3 relevant origins" thing, there are four cases:

[09:33:44.0853] <bzbarsky>
1) Entry same-origin, thrower same-origin

[09:33:55.0182] <bzbarsky>
2) Entry same-origin, thrower cross-origin

[09:34:10.0030] <bzbarsky>
3. Entry cross-origin, thrower same-origin

[09:34:15.0581] <jorendorff>
excellent -  very happy to pop the conversational stack with more mutual understanding

[09:34:25.0172] <bzbarsky>
4. Entry cross-origin, thrower cross-origin

[09:34:29.0289] <bzbarsky>
Agreed?

[09:34:34.0627] <jorendorff>
Sure.

[09:34:43.0000] <bzbarsky>
Where same and cross is wrt where the error is reported

[09:34:54.0061] <bzbarsky>
Case 1 there should be no muting, everyone agrees.

[09:34:56.0441] <jorendorff>
uh

[09:35:08.0538] <jorendorff>
yes

[09:35:31.0584] <bzbarsky>
Case 2 muting is pointless because try/catch, but current spec defines it to mute, which is silly.

[09:35:40.0199] <jorendorff>
"same and cross is wrt where the error is reported" I actually ...don't quite understand

[09:35:42.0304] <bzbarsky>
your suggestion would not mute this case.

[09:35:52.0616] <bzbarsky>
Sorry, let me back up

[09:36:03.0760] <bzbarsky>
So the place the error is reported is the window object

[09:36:11.0976] <bzbarsky>
Which fires "error" event listeners

[09:36:33.0452] <bzbarsky>
Now conceivably, we could compare the origins of those listeners to the various script origins involved

[09:36:44.0005] <bzbarsky>
But in practice the spec and impls just compare to the origin of the window object

[09:37:10.0600] <bzbarsky>
So the relevant question becomes "is the script's source same-origin with the window?"

[09:37:48.0740] <jorendorff>
right

[09:38:01.0234] <bzbarsky>
OK

[09:38:05.0447] <bzbarsky>
So back to my cases....

[09:38:18.0375] <jorendorff>
ok, "wrt to where" meaning wrt to the window, not the handler function. got it

[09:38:25.0044] <bzbarsky>
yep

[09:38:44.0076] <bzbarsky>
So case 2 in the spec is silly, and your proposal does not mute it

[09:39:08.0654] <bzbarsky>
Case 3 in the spec is _not_ muted, and not muted in any impl right now, but in your proposal _is_ muted

[09:39:21.0140] <bzbarsky>
Case 4 is muted in both the spec and in your proposal (though not always in our impl right now)

[09:39:48.0438] <jorendorff>
Is case 3 the case in your dpaste?

[09:40:19.0585] <bzbarsky>
So the only concern I have with your proposal is case 3.

[09:40:24.0309] <bzbarsky>
Yes, that paste is case 3

[09:40:44.0409] <jorendorff>
It seems pretty easy for CSV to hit case 3.

[09:41:12.0774] <bzbarsky>
/me writes a testcase

[09:41:25.0493] <jorendorff>
`Bananas (green), 1.99`

[09:42:24.0206] <jorendorff>
That CSV file is going to leak some information anyway though, even without throwing

[09:43:00.0891] <bzbarsky>
right

[09:43:23.0620] <bzbarsky>
But more to the point.... if the exception is coming from same-origin script

[09:43:40.0521] <bzbarsky>
Then hiding it from the error handler is silly: the relevant origin already had access to that exception

[09:44:02.0635] <jorendorff>
I guess an adequate reason for not muting case 3 is that it's just far more likely to be real JS if that happens

[09:44:33.0412] <jorendorff>
attacker would have a hard time arranging for the function call to happen by accident, it totally depends on the victim

[09:45:30.0656] <bzbarsky>
From a threat model standpoint, yes

[09:45:48.0685] <bzbarsky>
From a practical standpoint, no one is muting it now and sites might be depending on it for error reporting, maybe

[09:46:17.0051] <bzbarsky>
For what it's worth, I did just test an interesting case: when the cross-site script calls a built-in DOM function which throws

[09:46:42.0185] <bzbarsky>
that case _is_ muted in Chrome, so if we start muting it (right now we do now), that is not a compat issue

[09:48:38.0034] <jorendorff>
OK, so this clarifies that the stack inspection we're talking about is top-of-stack at the time the error is ... created? thrown? and not full-stack

[09:49:24.0117] <bzbarsky>
yes

[09:49:39.0117] <bzbarsky>
created vs thrown is an interesting question.  Lemme write a test

[09:50:56.0449] <bzbarsky>
In Chrome it's "thrown"

[09:51:54.0838] <jorendorff>
so `try { ... } catch (exc) { throw exc; }` is not equivalent to `...`

[09:52:05.0494] <jorendorff>
that's what that seems to imply

[09:53:46.0491] <bzbarsky>
one sec

[09:53:57.0101] <bzbarsky>
/me writing testcases, trying to understand Safari behavior

[09:54:32.0796] <jorendorff>
another question is whether this is (in spec terms) an extra field on the Completion record, or an extra internal slot on the Error object

[09:54:53.0804] <bzbarsky>
"good question"

[09:57:17.0909] <jorendorff>
bzbarsky: Are we actively trying to herd web devs away from cross-site <script> altogether? Like, if a site on potato.com uses scripts on potato.awesomecdn.com, is that something they should be ashamed of or

[09:57:25.0723] <jorendorff>
 * bzbarsky: Are we actively trying to herd web devs away from cross-site <script> altogether? Like, if a site on potato.com uses scripts on potato.awesomecdn.com, is that something they should be ashamed of or...?

[09:58:15.0651] <bzbarsky>
Given CDNs... no

[09:58:18.0181] <bzbarsky>
https://jsfiddle.net/wqvx4bz0/1/

[09:58:18.0981] <jorendorff>
ok

[09:58:22.0515] <bzbarsky>
Yay, interop

[09:58:29.0360] <bzbarsky>
Firefox mutes none of the three exceptions

[09:58:58.0485] <bzbarsky>
Chrome mutes "aaa" but not the other two (so mutes based on throw location?)

[09:59:07.0568] <bzbarsky>
Safari mutes "aaa" and "bbb" 

[09:59:21.0001] <bzbarsky>
So mutes based on ... I dunno

[09:59:44.0395] <jorendorff>
This seems worth mentioning in the gh issue

[09:59:56.0782] <bzbarsky>
Yeah.

[10:00:03.0130] <bzbarsky>
remind me the issue link again?

[10:00:22.0187] <jorendorff>
https://github.com/whatwg/html/issues/958

[10:02:27.0209] <bzbarsky>
/me will comment with slightly cleaned-up code

[10:03:44.0873] <jorendorff>
bzbarsky: The other loose thread is "Case 4 is muted in both the spec and in your proposal (though not always in our impl right now)"

[10:05:35.0189] <jorendorff>
bzbarsky: The part in parentheses. Is that definitely a bug? Is it already described in bug 1608027? i did not understand that 

[10:05:36.0469] <Botzilla demo>
https://bugzil.la/1608027

[10:11:56.0051] <bzbarsky>
jorendorff: https://github.com/whatwg/html/issues/958#issuecomment-585895989

[10:12:18.0368] <bzbarsky>
jorendorff: The part in parens is, imo, a bug

[10:12:45.0707] <bzbarsky>
jorendorff: And bug 1608027 mentions it, though the original testcases it talks about do not exercise that bug.

[10:12:46.0921] <Botzilla demo>
https://bugzil.la/1608027

[10:13:07.0709] <bzbarsky>
jorendorff: Because they instead exercise case 2

[10:21:45.0931] <bzbarsky>
jorendorff: I pitched our proposal at https://github.com/whatwg/html/issues/958#issuecomment-585900125

[10:21:59.0600] <bzbarsky>
jorendorff: If you want me to make it clear it's yours, I am happy to do so, btw

[10:47:16.0939] <Waldo>
> <@nbp:mozilla.org> (Let's hope nobody want to overload the operator `,` in JavaScript)

u troll

[10:50:42.0086] <Waldo>
So I tried to work yesterday but the bike-routing worm had its soft fleshy teeth too deep into me, and I ended up another day of PTO but on the plus side _think_ I've finished up (maybe modulo minor tweaks) a route from Vegas to Georgetown, TX.

[10:51:25.0753] <Waldo>
Hopefully today will actually work, now that that's done-enough.

[12:06:52.0822] <evilpie>
Waldo: I've been looking into some WPT failures recently. This comes up related to readable streams: https://jgraham.github.io/wptdash/?bugComponent=core%3A%3Ajavascript+engine

[13:21:06.0192] <tcampbell>
jorendorff: do you have any idea the difference between DebugScriptMap and Debugger::ScriptWeakMap?

[13:21:19.0050] <jorendorff>
jimb: ^

[13:22:50.0272] <tcampbell>
oh what.. `DebugScript` and `DebuggerScript` are not the same thing?

[13:29:16.0613] <Waldo>
evilpie: I would guess the correct-methods/properties tests are looking for `pipeTo`/`pipeThrough` and failing for that reason, or something unimplemented like that.  Byte streams are not actually implemented, or implementable, so I'm not sure what's up with those.  And  `getReader({mode: "byob"}) throws on non-bytes streams` definitely should be true right now, so I'm not sure what's up with that.

[13:29:58.0158] <Waldo>
Hmm:

> assert_throws_js: function "() => new ReadableStream().getReader({ mode: 'byob' })" threw object "RangeError: support for 'new ReadableStream({ type: "bytes" })' is not yet implemented" ("RangeError") expected instance of function "function TypeError() { [native code] }" ("TypeError")

[13:30:27.0773] <Waldo>
That should be easy to fix.  (But there are more subtests that probably relate to byte streams just not being implementable.)

[13:50:44.0371] <evilpie>
Great.

[13:51:36.0654] <jorendorff>
I have a funny feeling it was a RangeError originally and they changed the spec

[14:01:45.0961] <Waldo>
Hum, since when is the runtime codegen decision conditioned on the contents of the value to `eval`?  :curious:

[14:02:14.0924] <Waldo>
 * Hum, since when is the runtime codegen decision conditioned on the contents of the value to `eval`?  ü§î

[14:02:39.0352] <jorendorff>
?

[14:03:10.0183] <Waldo>
I don't terribly terribly care, but I implemented the runtime codegen check initially as running _before_ the is-string check because it seemed like "can you `eval`" was the right predicate, and simpler than only testing if the value passed in happened to be a string.

[14:03:21.0274] <Waldo>
Looking at bug 1615405 now.

[14:05:27.0979] <evilpie>
I guess the rational is that non-strings don't really eval at all

[14:05:50.0152] <Waldo>
This is true enough.

[14:06:24.0545] <Waldo>
https://searchfox.org/mozilla-central/source/dom/security/nsContentSecurityUtils.cpp#300 evidently will _convert an object value to a string_ the way things are set up now, which seems pretty terrible (and spec-observable too).

[14:06:30.0701] <jorendorff>
TC39 has been doing a _lot_ more breaking changes recently

[14:06:41.0902] <jorendorff>
for stuff like this

[14:06:54.0371] <Waldo>
/me wonders why Botzilla demo didn't commednt on his bug mention above

[14:07:00.0224] <jorendorff>
because I muted it

[14:07:03.0320] <Waldo>
/me  * wonders why Botzilla demo didn't comment on his bug mention above

[14:07:15.0505] <Waldo>
I was saying boo-urns...

[14:07:31.0082] <jorendorff>
https://github.com/tc39/ecma262/issues/1495#issuecomment-478372745

[14:07:48.0807] <Waldo>
Yeah, I'm skimming through that too.

[14:07:52.0058] <jorendorff>
allen w-b characterizes this as a breaking change, amazingly, to justify a breaking change

[14:08:02.0064] <jorendorff>
 * allen w-b characterizes the status quo as a breaking change, amazingly, to justify a breaking change

[14:09:05.0939] <jorendorff>
"stuff like this" is vague; what i mean is places where the spec and some implementation agree, but V8 does something different

[14:11:28.0223] <jorendorff>
For eval in particular, it's really hard for me to prefer either behavior‚Äîwho on earth is calling `eval(3)` that's being inconvenienced here?‚Äîbut the bar for changing the standard should be high.

[14:19:08.0128] <Waldo>
"Let's allow eval when CSP forbids eval" feels very strange to me, even if the allowing is harmless.

[14:19:34.0620] <jorendorff>
We're talking about problems on two different levels

[14:21:07.0839] <jorendorff>
the people who work on the spec are not capable of looking at the logical arguments for and against a change and having the thought: "all of these reasons are really small"

[14:22:51.0889] <jorendorff>
"maybe it does not matter who is right in this github thread, because none of this remotely approaches the level of making a change in an international standard"

[14:24:01.0764] <jorendorff>
it's been 0 days since i proposed some dumb change in this channel, i can't exactly brag

[14:24:29.0164] <jorendorff>
but the viewpoint is reliably absent from discussions where it seems relevant

[14:51:39.0148] <sfink>
I think you might be underappreciating the gravity of that most urgent of all possible situations: when someone is *wrong* on the internet

[14:52:04.0715] <jorendorff>
could be a factor

[14:52:35.0852] <sfink>
and I, uh,might be doing exactly the same thing right now with the FinalizationGroup spec...

[14:53:08.0732] <sfink>
though I suppose that spec hasn't been chiseled in stone anywhere quite yet

[14:53:51.0171] <jorendorff>
stage 3, it's literally time to sweat the details

[14:55:08.0025] <sfink>
well, partly it's because someone just pointed out that I'm arguing against Mozilla's stated position

[14:55:47.0647] <sfink>
I guess you're not on that thread. I wonder if you should be.

[15:10:06.0840] <mgaudet>
(In parallel to me trying to figure it out via searchfox): For debugger code that uses frame.environment.callee, where is that callee computed in SM? (and how? Is it a stack walk?) 

[15:15:04.0460] <mgaudet>
(Seems the answer is DebuggerEnvironment::getCallee) 

[15:15:24.0035] <jorendorff>
sorry

[15:15:44.0894] <jorendorff>
i would have done a stack walk to find out the answer for you

[15:16:32.0680] <jorendorff>
(an upward walk, ignoring the one-way signs)

[15:19:12.0614] <mgaudet>
:P No worries

[15:19:25.0937] <mgaudet>
I'm just excited because I seem to have found -some- traction on this problem finally

[15:19:41.0975] <jorendorff>
what changed? i assume no hazards

[15:19:43.0860] <mgaudet>
(I guess in hindsight the answer was obvious: *moar `printfs`*) 

[15:20:13.0975] <mgaudet>
No hazards; just kept adding prints in various places and compared between builds with and without changes 

[15:20:47.0799] <mgaudet>
Currently pulling on the thread that for some reason frame.environment.callee is returning null with the allocation change patch, whereas it returns the appropriate function without.

[15:20:56.0140] <mgaudet>
 * Currently pulling on the thread that for some reason `frame.environment.callee` is returning null with the allocation change patch, whereas it returns the appropriate function without.


2020-02-14
[16:06:23.0584] <mgaudet>
confession: progress; sweet sweet progress. Seems that in one version the environment is being initialized on clone of function, and in the bad version, that's not happening, which causes it to be considered `IsInternalFunctionObject`. Tomorrow we'll see if i can't figure out what's gone wrong, but out of time today

[16:29:52.0769] <arai>
finally, resurrected ECMAScript spec comparator https://arai-a.github.io/ecma262-compare/

[17:12:33.0692] <sfink>
arai: whoa, that's really awesome!

[17:55:30.0909] <arai>
thanks :D

[00:33:11.0092] <yulia>
wow arai

[00:54:09.0242] <arai>
yulia: your patches for jsparagus repo really helped me understanding the GitHub actions, to configure automation for updating the spec data. thank you!

[01:51:31.0596] <Benjamin Bouvier>
jorendorff: hey, sorry the bot was pestering you. It's currently configured to avoid repeat the bug status of a bug if the given bug number has been mentioned less than 2 minutes ago (this is a setting inherited from firebot), should it be set to a larger time?

[01:52:18.0611] <Benjamin Bouvier>
/me thinks that just muting the bot altogether is worse than it being too discrete

[02:08:24.0107] <yulia>
arai happy to hear!

[03:40:53.0656] <evilpie>
jan is just deleting all the code

[03:44:36.0209] <jonco>
I'm having trouble running jstests - wptmanifest is raising KeyError: u'early_beta_or_earlier'

[03:44:39.0872] <jonco>
anyone else seen this?

[03:48:40.0422] <evilpie>
jonco: yeah. try doing a toplevel ./mach build

[03:58:57.0236] <jonco>
evilpie: thanks, that does not seem to have worked though

[03:59:24.0609] <evilpie>
arai: ^

[03:59:56.0395] <jcristau>
decoder: how long does it usually take to get a bisection result for something like https://bugzilla.mozilla.org/show_bug.cgi?id=1613501?

[03:59:57.0793] <arai>
jonco: is it on latest m-c tip?

[04:00:28.0408] <jonco>
arai: I updated to 51dbdcd6e874 this morning

[04:00:38.0954] <Ms2ger [~half-time dedication]>
jonco: probably  because https://hg.mozilla.org/mozilla-central/rev/911bb8adb076ec3a56c2b8735bc4afd3fc24215f#l6.1

[04:00:54.0012] <Ms2ger [~half-time dedication]>
The constant might need to be added here: https://searchfox.org/mozilla-central/source/js/src/tests/jstests.py#383

[04:01:31.0675] <Ms2ger [~half-time dedication]>
Not sure why nobody noticed it before

[04:02:14.0943] <Ms2ger [~half-time dedication]>
Maybe it can grab the constant from a firefox build in some cases?

[04:02:25.0907] <arai>
I bumped into similar issue, and it was fixed by bug 1613021 and bug 1613025

[04:02:34.0945] <arai>
I think there's something still wrong

[04:02:50.0880] <arai>
the bug comments contains some info around why it happens

[04:02:53.0773] <arai>
and it may help

[04:03:26.0761] <arai>
basically, it fails to grab the correct mozinfo.json file

[04:04:53.0795] <arai>
possible reasons:  1. it fails to detect OBJ dir from JS shell path  2. it fails to find mozinfo.json file from OBJ dir

[04:05:19.0615] <jonco>
how is OBJ dir detected?

[04:05:51.0864] <arai>
https://searchfox.org/mozilla-central/rev/a4be2fbe9bd4f405c91cc16e4e3a80400f5a9301/js/src/tests/jstests.py#353-360

[04:06:17.0720] <arai>
if the JS shell path ends with `dist/bin/*`, it uses the parent as OBJDIR

[04:06:29.0018] <arai>
(so, if you place JS shell somewhere else, it will fail

[04:06:48.0249] <arai>
(or, if the detection somehow doesn't work for the path

[04:07:38.0284] <jonco>
oh right, so this is because I'm building the shell outside of the normal dir structure

[04:07:43.0302] <arai>
so, try checking `manifest_root` variable after that branch, and also `kwargs["run_info"]` value before line 383

[04:09:07.0234] <jonco>
arai: thanks will try that

[04:09:12.0613] <arai>
:)

[04:09:37.0081] <arai>
I think, we should have some fallback path in `jstests.py` for the case wpt-related things fails

[04:17:42.0090] <arai>
filed https://bugzilla.mozilla.org/show_bug.cgi?id=1615582

[04:53:20.0897] <decoder>
jcristau: normally it would be really quick but the bot is down and we are working on replacing it with a new (better) bot. can you needinfo jkratzer@mozilla.com to manually have the bot bisect it?

[05:03:33.0805] <Ms2ger [~half-time dedication]>
jonco: are you trying to run all tests?

[05:36:35.0828] <jonco>
Ms2ger [~half-time dedication]: I'm trying to run the test262 tests

[05:37:13.0600] <Ms2ger [~half-time dedication]>
None of the wpt code is supposed to run if you pass a path

[05:37:32.0014] <jonco>
ah, thanks

[05:37:48.0389] <jonco>
yes I was running all of them

[05:39:15.0831] <Ms2ger [~half-time dedication]>
Okay, at least that part works, then :)

[05:45:22.0298] <yulia>
is the logo that is used here the official spidermonkey logo?

[05:55:44.0705] <jandem>
not sure about official, I created it for the Twitter account at some point. If you want to design something.. you're a lot more qualified :) 

[05:56:06.0744] <yulia>
i am thinking about it... we have a fantastic name but no image

[05:56:19.0672] <yulia>
but we have this great visual legacy of all of the posters -- one that not many people are aware of

[05:56:32.0956] <jandem>
that'd be great 

[05:56:41.0819] <yulia>
im looking at a few inspirations, if people are up for it maybe we can come up with a logo? one that we can use in talks and other materials?

[05:57:00.0117] <tcampbell>
üíØ

[05:57:17.0128] <jandem>
yes! We could also put it on spidermonkey.dev

[05:57:36.0489] <yulia>
great, yeah i think we can have a lot of fun with this... the name is really cool

[05:57:46.0279] <yulia>
its punk / heavy metal / really distinct from any other projects

[05:58:27.0089] <tcampbell>
I have wondered if we could make monkey tail the J of JS

[05:58:28.0596] <yulia>
i wonder if we can work with the poster artist..

[05:58:35.0688] <jorendorff>
this is our chance to decide that the SpiderMonkey is actually an arachnid-simian hybrid

[05:58:47.0884] <yulia>
haha yeah also true

[05:59:03.0470] <yulia>
i was looking at the gorillaz imagery and some garage punk stuff with monkeys

[05:59:06.0528] <yulia>
some cool stuff

[05:59:12.0251] <yulia>
we don't have to stick to that, there are also cute monkeys

[05:59:19.0414] <tcampbell>
Haha

[05:59:22.0642] <jorendorff>
cute is probably the way to go

[06:00:07.0615] <jorendorff>
is there a cute metal subgenre? there has to be

[06:00:10.0052] <jorendorff>
piecore or something

[06:01:13.0740] <yulia>
there is aggreretsko http://nerdreactor.com/2017/07/18/sanrio-sdcc-aggretsuko-more/

[06:01:24.0735] <yulia>
 * there is aggretsuke http://nerdreactor.com/2017/07/18/sanrio-sdcc-aggretsuko-more/

[06:01:25.0636] <tcampbell>
Lol

[06:01:48.0764] <yulia>
anime about a japanese office worker who sings heavy metal in the evenings

[06:05:36.0648] <tcampbell>
I am excited

[06:06:46.0504] <tcampbell>
I've been wondering how to get a logo for a while but have no artistic skills. 

[06:57:13.0135] <yulia>
 * there is aggretsuk0 http://nerdreactor.com/2017/07/18/sanrio-sdcc-aggretsuko-more/

[06:57:17.0401] <yulia>
 * there is aggretsuko http://nerdreactor.com/2017/07/18/sanrio-sdcc-aggretsuko-more/

[07:38:22.0808] <yulia>
spidermonkey's get themselves into some interesting shapes https://commons.wikimedia.org/wiki/File:Klammeraffe-drawing.jpg

[07:38:52.0619] <jorendorff>
you can definitely see where the name comes from. those limbs

[07:39:14.0616] <jorendorff>
also, my brain wants to see letters in those monkey shapes

[07:39:31.0621] <yulia>
the one on the left just needs a typewriter or something

[07:39:51.0059] <yulia>
the one on the right is a five limbed spider

[07:44:03.0306] <jorendorff>
together they have O(8) limbs

[07:52:46.0267] <yulia>
i really shouldn't have access to gimp

[07:54:34.0705] <decoder>
It took my brain quite a while ...

[07:56:22.0112] <yulia>
don't worry i made it worse 

[07:56:59.0965] <evilpie>
/me how do I delete someone's message

[07:57:14.0784] <yulia>
so, i should make stickers then

[07:58:34.0200] <decoder>
And t-shirts!

[08:00:06.0921] <Ms2ger [~half-time dedication]>
Shirts with 8 sleeves, surely

[08:01:13.0670] <decoder>
Now my gf is yelling at me ^.^ she wants more tshirts that look like the Baldrmonkey one, and she hates spiders ^.^

[08:01:34.0028] <yulia>
if you squint its kind of cute

[08:18:58.0308] <mgaudet>
Total side note: At one dinner at all hands I was discussing the weird incomplete job Canada did at adopting the metric system. Turns out, someone made a (to my experience) pretty accurate flow chart as to when to use what measurement system: https://preview.redd.it/k1brffgbngk31.png?width=681&format=png&auto=webp&s=8cc428c345b687a3f79d8e481561781f38d0630e 

[08:19:40.0065] <iain>
I finally figured out what the art style on Yulia's spidermonkey reminded me of

[08:21:21.0032] <yulia>
this channel is officially cursed

[08:21:26.0857] <caroline>
yulia: i love the logo, thats the one 

[09:00:33.0287] <zombie>
just need a post-facto justification for what the two heads represent, and it's official

[09:01:27.0613] <cfallin>
JavaScript both looks forward, to the future, and retains a view backward (of webcompat). Hence two heads

[09:02:03.0930] <jorendorff>
C++ && Rust

[09:02:21.0239] <jorendorff>
cfallin's is better

[09:02:23.0526] <Ms2ger [~half-time dedication]>
Have a nice weekend, y'all

[10:06:43.0400] <tcampbell>
I have questions... https://searchfox.org/mozilla-central/source/js/src/tests/shell/os.js#13

[10:50:33.0280] <sfink>
Oh, wow. I generally avoid laptop stickers and such, but I would kill to have that one.

[10:51:10.0287] <tcampbell>
`__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED` .. okay, React. Calm down..

[11:07:45.0813] <tcampbell>
I'm so glad I can finally use `Rooted<BaseScript*>`

[11:08:41.0243] <tcampbell>
lots of branches to delete now

[11:14:17.0274] <Benjamin Bouvier>
> <@mgaudet:mozilla.org> Total side note: At one dinner at all hands I was discussing the weird incomplete job Canada did at adopting the metric system. Turns out, someone made a (to my experience) pretty accurate flow chart as to when to use what measurement system: https://preview.redd.it/k1brffgbngk31.png?width=681&format=png&auto=webp&s=8cc428c345b687a3f79d8e481561781f38d0630e

oh my, it's perfect, thanks

[11:21:24.0154] <froydnj>
tcampbell: you will also appreciate https://searchfox.org/mozilla-esr60/source/ipc/glue/Shmem.h#75 (removed sometime before esr68)

[12:19:48.0940] <tcampbell>
yusss.. this code is all starting to fall into place

[12:26:07.0560] <Waldo>
/me wonders how his laptop abruptly reverted to the bad/inefficient suspend state that his 9570 doesn't actually like to do correctly

[12:35:06.0670] <bzbarsky>
Do people here have opinions on the Document.getElementById vs Document.prototype.getElementById controversy?

[12:35:13.0701] <bzbarsky>
In error messages

[12:35:39.0262] <jorendorff>
bzbarsky: I'm team  `document.getElementById`

[12:35:42.0652] <Waldo>
I think displaying `document.getElementById` is the closest thing to what people would actually be writing, and so voted.

[12:36:00.0338] <bzbarsky>
jorendorff: With some heuristics for how to produce that first string?

[12:36:17.0438] <bzbarsky>
Again, keep in mind that I need something that works generically, not just for Document

[12:36:32.0339] <bzbarsky>
/me should have used XMLHttpRequest.send as his example... ;)

[12:36:36.0240] <jorendorff>
bzbarsky: Yes. for `document` in particular, it's a slam dunk, but I still wouldn't mind seeing it for things like `htmlParagraphElement.whatever`

[12:36:48.0987] <jorendorff>
 * bzbarsky: Yes. for `document` in particular, it's a slam dunk, but I still wouldn't mind seeing it for things like `htmlInputElement.whatever`

[12:36:59.0011] <jorendorff>
heuristics can improve on that, I hope

[12:37:29.0808] <bzbarsky>
hmm ok

[12:37:38.0052] <jorendorff>
in any case, `prototype` should be elided

[12:37:43.0157] <bzbarsky>
OK

[12:38:26.0438] <bzbarsky>
/me mutters about devtools

[12:38:47.0078] <bzbarsky>
What devtools would really like is to have attached to every error a structured description of the thing

[12:38:59.0399] <jorendorff>
Yes

[12:39:09.0978] <jorendorff>
I want someone to implement that

[12:39:16.0444] <bzbarsky>
What devtools currently _sends_ is .toString() on the exception

[12:39:30.0275] <bzbarsky>
So it even collapses the name and message into a single bucke

[12:39:32.0224] <bzbarsky>
er, bucket

[12:39:57.0538] <jorendorff>
haha, well, a little hypocrisy is not so bad in the scheme of things

[12:40:01.0817] <jorendorff>
we know where we'd like to go

[12:40:02.0059] <bzbarsky>
I mean, it sends some other stuff too, but only for JS Errors

[12:40:25.0725] <bzbarsky>
Just to be clear, "what devtools would like" is what I would like devtools to have

[12:40:26.0249] <evilpie>
MVP would be `getElemenyById`

[12:40:33.0727] <bzbarsky>
mvp for what?

[12:40:58.0920] <evilpie>
webidl errors

[12:41:17.0365] <bzbarsky>
/me is not sure what "mvp" means here...

[12:41:50.0660] <bzbarsky>
So just to be clear...

[12:42:06.0535] <bzbarsky>
getElementById has a non-throwing impl.  So the _only_ errors it can throw are binding-level

[12:42:08.0606] <evilpie>
okay, I am just saying if we can't actually implement some solution for Document vs document vs xhr.whatever. We should at least add the method name to the error message

[12:42:34.0437] <bzbarsky>
OK

[12:42:39.0710] <bzbarsky>
well, that mvp is long landed, so....

[12:43:14.0434] <bzbarsky>
For binding-level exceptions we've included the Foo.bar bit all along since the initial bindings landing

[12:43:38.0381] <evilpie>
sorry, I hadn't actually tried that before

[12:44:00.0883] <bzbarsky>
For impl-level exceptions we added it last week, with a "Foo.bar: " prefix that gets auto-prepended before the message

[12:44:44.0443] <evilpie>
we could in theory use the expression decompiler to get the "correct" answer in a subset of case

[12:44:46.0117] <bzbarsky>
Now we have some silly inconsistencies; for example `document.getElementById()` throws `Document.getElementById requires at least 1 argument, but only 0 were passed` (without the ':')

[12:45:03.0618] <evilpie>
 * we could in theory use the expression decompiler to get the "correct" answer in a subset of cases

[12:45:05.0341] <bzbarsky>
evilpie: yes, Brendan was talking about that in the twitter thread...

[12:45:20.0605] <bzbarsky>
evilpie: It might be interesting to think about that too, yes.

[12:45:25.0766] <evilpie>
of course that doesn't help when the decompiler fails and we usually need some fallback anyway

[12:45:31.0597] <bzbarsky>
yep

[12:45:49.0071] <bzbarsky>
So we need a thing anyway, then we can try to add the decompiler on top.  As long as devtools doesn't depend on the thing... ;)

[12:46:16.0633] <bzbarsky>
Anyway, I guess there's the general question of how structured we want our .message values to be

[12:47:01.0753] <bzbarsky>
I am being _very_ tempted, at least for the DOM, to move towards "methodidentifier: everything else"

[12:47:21.0351] <bzbarsky>
(though maybe the method identifier should come after the rest of the message?)

[12:47:38.0226] <jorendorff>
I kind of like that

[12:47:41.0078] <bzbarsky>
which?

[12:47:55.0967] <jorendorff>
prefix, always present, with `: `

[12:48:01.0684] <bzbarsky>
great

[12:48:09.0576] <bzbarsky>
That has the benefit of being almost what we implement

[12:48:30.0418] <jorendorff>
and devtools can easily hack it

[12:48:42.0630] <jorendorff>
linkify it

[12:48:48.0393] <bzbarsky>
JSMSG_MORE_ARGS_NEEDED would need to grow a ':' or I would need to change codegen to pass in the ':' for that.

[12:48:50.0812] <bzbarsky>
right, exactly

[12:48:58.0605] <bzbarsky>
I have a patch for that, fwiw

[12:49:25.0186] <jorendorff>
I was about to say "you should write a patch for that, bz"

[12:49:34.0786] <bzbarsky>
https://bug1615518.bmoattachments.org/attachment.cgi?id=9126643

[12:49:59.0251] <bzbarsky>
So Ugly

[12:50:10.0995] <bzbarsky>
And would not play very well with "document.getElementById", btw

[12:50:48.0919] <bzbarsky>
Anyway, devtools UX bits need more thought

[12:51:12.0987] <bzbarsky>
/me is not sure he's come to a conclusion about the prefixing

[12:51:25.0371] <bzbarsky>
Oh, one other prefix is "Foo constructor: "

[12:52:47.0282] <jorendorff>
that's fine

[12:53:14.0707] <jorendorff>
bzbarsky: If the `InterfaceName.methodName:` is consistent across everything in the world, I support uppercase and no heuristic

[13:00:23.0556] <bzbarsky>
ok

[13:00:44.0133] <bzbarsky>
/me is tempted to stick with it for now, no .prototype, and see how things behave....

[13:01:04.0355] <bzbarsky>
alright, thanks

[13:01:22.0786] <bzbarsky>
/me has been trying to poll people, and discovering, as usual, that people are So %$^%^$% Different

[13:01:29.0518] <jorendorff>
yup

[13:01:39.0828] <bzbarsky>
Clearly we need a pref.

[13:01:47.0085] <jorendorff>
heh!

[13:02:37.0027] <jorendorff>
getting devs to the appropriate MDN page seems like the right goal

[13:03:50.0526] <bzbarsky>
Yes, at a high level that is the key part for me

[13:04:03.0318] <jorendorff>
i mean especially for passing the wrong number of args

[13:04:24.0727] <bzbarsky>
(I can do that with InterfaceName.prototype.methodName too, of course... )

[13:04:29.0911] <bzbarsky>
Oh, yeah

[13:04:42.0115] <bzbarsky>
Linking them to where we link them right now is ... yeah

[13:04:50.0238] <bzbarsky>
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/More_arguments_needed

[13:04:53.0726] <bzbarsky>
Not too useful

[13:04:56.0838] <jorendorff>
bwomp bwomp

[13:06:36.0444] <jorendorff>
i dunno, maybe a lot of people see this message and are like "wtf are arguments"

[13:07:56.0060] <jorendorff>
so then they look it up in their English dictionary, and then crumple up their computer into a small ball and toss it in the trash

[13:08:42.0588] <bzbarsky>
heh

[13:09:00.0324] <bzbarsky>
OK, so most immediately: OK to add ':' to JSMSG_MORE_ARGS_NEEDED ?

[13:09:06.0247] <jorendorff>
YES

[13:09:37.0082] <jorendorff>
or add a new message if you don't want to find-replace the whole JS stdlib, but whatever works

[13:09:55.0816] <bzbarsky>
I looked at the JS callers; they are OK with that ':', I think

[13:10:09.0264] <jorendorff>
great

[13:10:11.0862] <bzbarsky>
Less sentency, but that's the way it is

[13:10:20.0927] <bzbarsky>
/me also considering killing the "were"

[13:10:28.0918] <bzbarsky>
"but only {3} were passed"

[13:10:35.0741] <bzbarsky>
Instead just "but only {3} passed"

[13:10:38.0127] <jorendorff>
go ahead

[13:10:43.0824] <bzbarsky>
Especially when {3} is "1"

[13:10:49.0219] <jorendorff>
it looks absolutely ridiculous

[13:13:54.0099] <evilpie>
Does our definition of realms match the spec's definition of a  realm?

[13:14:12.0708] <jorendorff>
/me suspects a trick question

[13:14:18.0142] <jorendorff>
evilpie: let's go with yes

[13:20:10.0379] <evilpie>
I am trying to see how much breaks when restricting function#caller values to the same realm

[13:29:35.0827] <mgaudet>
tcampbell: I have a patch stack I want to send to you. But I'll totally acknowledge that one aspect of the stack is a little wonky: The rooting story for part of it changes three times over the course of the stack. Now. I could go and take that stack and walk the final solution backwards in time, but I'm hoping you're cool with some evolutionary code which shows how things chnaged

[13:30:16.0297] <tcampbell>
mgaudet: wanna hop on a quick call about it?

[13:30:22.0842] <mgaudet>
sure


2020-02-17
[03:22:42.0943] <decoder>
jonco: im not sure if TSan works with RR at all (and if it does, I believe TSan runs everything on one thread)

[03:23:09.0039] <decoder>
I think we should try to run some tests with gczeal locally and see if we can make it more reliably

[03:23:13.0006] <decoder>
 * I think we should try to run some tests with gczeal locally and see if we can make it more reliabe

[03:23:14.0846] <decoder>
 * I think we should try to run some tests with gczeal locally and see if we can make it more reliable

[03:23:42.0341] <jonco>
decoder: ok I figured that might not be possible

[03:24:27.0147] <jonco>
that's a good idea

[03:24:36.0711] <jonco>
how easy is it to run mochitests with tsan now?

[03:25:29.0220] <decoder>
yes, they run in automation as Tier1 already

[03:25:43.0874] <decoder>
and you can make a local build easily if you have linux

[03:26:10.0246] <jonco>
great!

[03:26:20.0319] <jonco>
how do I make a tsan build then?

[03:27:47.0275] <jonco>
oh, there's browser/config/mozconfigs/linux64/tsan

[03:28:53.0009] <decoder>
yea, we still need to make a doc for this, but it is very similar to ASan

[03:29:01.0734] <decoder>
just check that file + its include in build/unix/

[03:29:08.0970] <decoder>
should give you an idea of the flags required

[03:29:35.0237] <decoder>
the main difference with ASan is that you need the RUSTFLAGS setting

[03:42:42.0904] <decoder>
jonco: let me know if you hit any trouble, ill be glad to help. also what kind of gczeal settings would you suggest for that particular bug?

[03:56:52.0763] <jonco>
will go

[03:56:58.0903] <jonco>
 * will do

[03:57:33.0386] <jonco>
mode 10 (IncrementalMultipleSlices) sounds reasonable - it's a race between background sweeping and the mutator

[03:58:35.0240] <decoder>
okay. I will also investigate if we can start fuzzing the JS shell with TSan

[04:38:08.0764] <jonco>
decoder: forgot to say: the default zeal frequency of 100 allocations is very small for the browser, so something like 1000 or more may be more appropriate

[04:38:39.0033] <jonco>
if you're fuzzing the shell the default is fine though

[04:39:44.0480] <decoder>
jonco: can I pass this as a browser pref somehow=?

[04:40:46.0338] <jonco>
there used to be a pref but I can't find it now

[04:40:59.0320] <jonco>
environment variable is probably the best way right now

[04:44:08.0130] <decoder>
okay, trying that now

[04:48:14.0275] <decoder>
jonco: im trying JS_GC_ZEAL="10,100" in the environment but it seems to be ignored

[04:48:28.0087] <decoder>
ah wait... we need --enable-gczeal -.-

[04:48:33.0066] <jonco>
yes

[04:48:33.0917] <decoder>
tsan builds are opt

[04:49:22.0742] <jonco>
I'm running that mochitest now, no failures so far though

[04:49:54.0255] <decoder>
my guess would be it is one of the tests in that directory. maybe try running the whole mochitest.ini in that dir

[04:50:38.0487] <jonco>
yeah I'll try that next

[04:57:33.0805] <wingo>
is there anyone around that might be able to take care of getting l1 commit access for dbezhetskov ? (https://bugzilla.mozilla.org/show_bug.cgi?id=1615197)

[04:57:47.0441] <wingo>
last year the process was ni? to marcia, but she is not accepting requests atm

[05:01:44.0651] <jandem>
wingo: you can NI :jdm 

[05:03:55.0738] <wingo>
thanks!

[05:07:44.0386] <jandem>
np. Today is a US/CA holiday so it might take a bit longer

[06:04:41.0900] <padenot>
hi. I have a `JS::PersistentRooted<JSObject*>`, and I need to pass it to something that takes a `HandleValue`, does someone has an example of this?

[06:07:20.0131] <padenot>
now, maybe I'm doing it wrong, but I'm trying to essentially do https://searchfox.org/mozilla-central/source/dom/media/webaudio/AudioWorkletNode.cpp#170-180, but where the keys of the object are string and not integers, and those strings are char16_t, so I'm trying to use https://searchfox.org/mozilla-central/source/js/src/jsapi.cpp#2578

[06:08:29.0981] <evilpie>
just re-root with RootedValue v(cx, ObjectValue(*persistent))

[06:09:10.0359] <padenot>
ok, but why ?

[06:10:05.0366] <padenot>
the docs more or less say that it should convert transparently, did I read it wrong ?

[06:10:10.0876] <Ms2ger [~half-time dedication]>
Yes

[06:10:17.0770] <Ms2ger [~half-time dedication]>
Value and JSObject* don't convert

[06:10:24.0473] <padenot>
why does it work transparently for HandleObject, but not HandleValue ?

[06:10:31.0175] <evilpie>
yes, PersistentRooted<JSValue> would autoconvert

[06:10:33.0745] <Ms2ger [~half-time dedication]>
PersistentRooted and Handle with the same type do

[06:10:58.0959] <evilpie>
HandleValue is a bit like Value**, so it can only point to Value, not JSObject

[06:22:28.0873] <padenot>
thanks both, it now works, I think I understand this better

[06:23:58.0362] <padenot>
now I see, for example, that JS_SetElements in fact has several overloads that then convert manually to HandleValue when required, which I needed to do manually because JS_SetUCProperty doesn't have those overloads

[06:50:55.0695] <bzbarsky>
padenot: Are you sure you want to _set_ as opposed to _define_?

[06:51:52.0903] <bzbarsky>
(`JS_DefineUCProperty` does have a bunch of overloads, but more importantly, the semantics are different)

[06:51:56.0584] <padenot>
the only thing I'm sure of is that I don't know

[06:52:00.0737] <bzbarsky>
OK

[06:52:09.0232] <bzbarsky>
Can you point me to the spec you are implementing?  ;)

[06:52:59.0771] <padenot>
I'm implementing the third parameter of the process() method of the AudioWorkletProcessor: https://webaudio.github.io/web-audio-api/#dom-audioworkletprocessor-process

[06:54:00.0672] <padenot>
it's specced as a `maplike`. I was planning to get a new plain JS object, and then set keys/values on it

[06:54:14.0697] <bzbarsky>
Where is it specced as a maplike?

[06:54:36.0653] <padenot>
sorry I wanted to write ordered map, not maplike

[06:54:38.0955] <bzbarsky>
(also, a plain JS object is not a maplike...)

[06:54:46.0271] <bzbarsky>
Ordered map is not an IDL or JS type

[06:54:52.0372] <bzbarsky>
Where is it specced what gets passed to the JS?

[06:54:55.0347] <bzbarsky>
If anywhere?  :(

[06:55:28.0998] <padenot>
in the third parameter description of the link above, https://webaudio.github.io/web-audio-api/#dom-audioworkletprocessor-process

[06:55:51.0929] <bzbarsky>
I know what that description says

[06:55:56.0566] <bzbarsky>
What I am saying is that this is not a spec

[06:56:02.0376] <bzbarsky>
Not if JS is involved

[06:56:07.0921] <bzbarsky>
Where is the actual method call happening?

[06:56:10.0590] <bzbarsky>
/me searches

[06:57:37.0782] <padenot>
I'm trying to get a link, but bikeshed doesn't seem to allow to link to a particular step of an algorithm

[06:58:25.0048] <padenot>
3.4.4.3 of the long algorithm here: https://webaudio.github.io/web-audio-api/#rendering-loop

[07:00:51.0806] <Ms2ger [~half-time dedication]>
Wow, that's... wow

[07:02:59.0332] <padenot>
can't say I'm particularly surprised that things are missing, tbh, but I'll fix it

[07:05:22.0328] <Ms2ger [~half-time dedication]>
> If [[callable process]] is true, invoke processFunction to compute a block of audio with the argument of input buffer, output buffer and input AudioParam buffer. A buffer containing copies of the elements of the Float32Arrays passed via the outputs parameter to processFunction is made available for reading.


[07:05:25.0117] <Ms2ger [~half-time dedication]>
Is that it?

[07:05:54.0499] <padenot>
yes, we have issues on some of the problems in this sentence, iirc, but not all of them

[07:06:02.0114] <bzbarsky>
Sorry, back

[07:06:40.0562] <bzbarsky>
So

[07:06:55.0047] <Ms2ger [~half-time dedication]>
https://github.com/WebAudio/web-audio-api/issues/1933 is a big one

[07:06:57.0063] <jorendorff>
I mean, for starters, when populating an object, always use Define, not Set

[07:07:13.0459] <Ms2ger [~half-time dedication]>
Also https://github.com/WebAudio/web-audio-api/issues/1967

[07:07:29.0333] <jorendorff>
Set triggers setters

[07:07:37.0584] <bzbarsky>
jorendorff: Yes, but this thing has bigger problems

[07:07:42.0089] <jorendorff>
strong agree

[07:07:49.0830] <bzbarsky>
padenot: So "nvoke processFunction" is not a thing

[07:08:19.0545] <bzbarsky>
padenot: If you're writing stuff in ECMASpeak, there are algorithms to call to do that which take ES values and do stuff

[07:08:39.0342] <bzbarsky>
padenot: If you're working with IDL constructs, there are IDL algorithms to call

[07:09:14.0733] <jorendorff>
but for common-sense-and-intuition-building: users can even define setters on Object.prototype and then even Set on a supposedly empty brand-new object would trigger those setters

[07:09:33.0847] <padenot>
yes, you've filed https://github.com/WebAudio/web-audio-api/issues/1967 on something related, but there hasn't been any progress, unfortunately

[07:09:40.0676] <bzbarsky>
padenot: What I _very_ strongly suggest is defining an IDL callback type, converting the function object you have to it, and then using that

[07:10:17.0386] <bzbarsky>
padenot: This is Much Worse, because at least the Get step is well-defined-ish, just missing necessary setup.  This thing is not even defined

[07:10:47.0734] <bzbarsky>
And yes, jorendorff is right that you never want to set; you want to define

[07:10:56.0593] <bzbarsky>
But in your case, you want to do neither.  ;)

[07:11:23.0405] <bzbarsky>
So this thing is doing "with the argument of input buffer, output buffer and input AudioParam buffer"

[07:12:04.0392] <bzbarsky>
That doesn't match the claimed stuff about process() taking inputs, outputs, parameters....

[07:12:47.0733] <Ms2ger [~half-time dedication]>
/me isn't even sure what kind of thing a "buffer" is here

[07:12:55.0595] <Ms2ger [~half-time dedication]>
Let alone how to expose it to js

[07:13:13.0942] <bzbarsky>
So in terms of concrete spec advice

[07:14:23.0335] <bzbarsky>
https://webaudio.github.io/web-audio-api/#AudioWorkletProcessor-methods is a section that seems informative, in that it describes for consumers of the API what their method should look like.  It should be clearly marked informative.  For its third argument it should probably describe a JS type that the callee will see, whatever that is.

[07:16:09.0349] <bzbarsky>
My personal suggestion would be to define an IDL callback type that is used to call `process` and reference it in this section; that will pin down the types JS will see (via the IDL spec), and then you will only need to describe any restrictions on the values (e.g. what `outputs[n][m]` is)

[07:16:30.0629] <padenot>
this is what we wanted to do, but this has implication in terms of microtask checkpoints

[07:16:48.0965] <bzbarsky>
Not if you do the surrounding setup right!

[07:16:52.0914] <padenot>
ahah !

[07:17:05.0144] <bzbarsky>
When do you want your microtask checkpoints to happen?

[07:17:37.0206] <padenot>
after all process methods for all audioworklet nodes have been called, for this particular iteration of the rendering algorithm

[07:18:53.0486] <padenot>
doing it via an IDL callback type was ruled out because we were told that the microtask checkpoints were always right after the call

[07:19:11.0473] <bzbarsky>
OK, so in https://webaudio.github.io/web-audio-api/#rendering-loop sometime before step 3 do https://html.spec.whatwg.org/#prepare-to-run-script and at your current step 4 do https://html.spec.whatwg.org/#clean-up-after-running-script

[07:19:39.0987] <bzbarsky>
If you do that, then in between those points the JS execution context stack will be nonempty, so microtask checkpoints won't happen

[07:19:58.0035] <bzbarsky>
Because of the condition in https://html.spec.whatwg.org/#clean-up-after-running-script step 3.

[07:20:27.0321] <padenot>
right, this makes all this easier it seems

[07:20:44.0207] <bzbarsky>
(in Gecko terms, you would use an AutoEntryScript and an nsAutoMicroTask)

[07:21:12.0630] <padenot>
I think we have this already

[07:21:17.0757] <bzbarsky>
Great

[07:21:48.0034] <bzbarsky>
No, you have AutoEntryScript, but not nsAutoMicroTask

[07:21:53.0180] <padenot>
at least the wpt I wrote for this are clear that the microtask checkpoints are executed at the right time

[07:22:12.0643] <bzbarsky>
Ah, we have a test for this, great

[07:22:24.0252] <padenot>
https://searchfox.org/mozilla-central/source/dom/media/MediaTrackGraph.cpp#1109

[07:22:48.0976] <padenot>
this is in between all the `process` calls

[07:22:49.0491] <bzbarsky>
Ah, outside WorkletNodeEngine::ProcessBlocksOnPorts

[07:23:52.0200] <padenot>
if it were inside ProcesBlocksOnPorts there would be a microtask checkpoint per ProcesBlocksOnPorts call

[07:24:06.0275] <bzbarsky>
Right, ok

[07:24:13.0423] <bzbarsky>
I was just looking at where the AutoEntryScript is

[07:24:15.0653] <bzbarsky>
OK, great

[07:24:27.0244] <bzbarsky>
So was it the Chrome people claiming this thing about microtasks?

[07:24:37.0720] <padenot>
no it was karl

[07:24:40.0906] <bzbarsky>
OK

[07:24:46.0848] <padenot>
https://github.com/WebAudio/web-audio-api/issues/1933#issuecomment-499359109

[07:25:03.0691] <bzbarsky>
Do you want me to file these issues, or will you?

[07:25:06.0285] <padenot>
trying to fix the very issue we're discussing 

[07:25:12.0222] <padenot>
I'll file

[07:26:03.0928] <padenot>
so I need to (1) make the callback a IDL callback (2) mark the section we have describing the arguments for `process` non-normative

[07:26:14.0615] <bzbarsky>
I think (2) would be a good idea, yes

[07:26:33.0190] <bzbarsky>
Since the normative thing is where the call happens; this section is just to make consumers not have to read that gunk

[07:26:57.0191] <bzbarsky>
(1) is also a good idea.  You can still do the [Get] and then convert the callable to a callback manually

[07:27:05.0822] <padenot>
and then use the things you linked (prepare for running script, cleanup after running script), alongside the fact that we have an IDL interface, to make all this be defined

[07:27:11.0855] <bzbarsky>
yep

[07:27:21.0597] <padenot>
now I think I have a last question

[07:27:32.0478] <bzbarsky>
We still have not talked about the IDL type of the third arg

[07:27:40.0631] <padenot>
right this is my question

[07:27:54.0448] <bzbarsky>
So if the informative section is right

[07:28:23.0240] <bzbarsky>
(which maybe it's not; it's talking about sequences but I thought those were gone?)

[07:28:26.0420] <padenot>
I don't know exactly what to use, but I know that I need something that allows implementers to reuse the object, if possible, so that we limit the garbage generated by the API

[07:28:39.0708] <bzbarsky>
ah

[07:28:54.0895] <bzbarsky>
That makes things complicated.  :)

[07:28:58.0849] <padenot>
right

[07:29:10.0813] <padenot>
so if we're talking about input and output, what type can we use?

[07:29:56.0019] <padenot>
those are for example [[Float32Array, Float32Array], Float32Array, Float32Array]], for example if we're talking about a Worklet that has two inputs, each of them being stereo

[07:30:01.0184] <bzbarsky>
/me doesn't understand the definition of https://webaudio.github.io/web-audio-api/#input-buffer

[07:30:30.0233] <bzbarsky>
So in JS terms, you can pass in an array containing Float32Array

[07:30:44.0937] <bzbarsky>
Which you could represent in IDL as "sequence", but then you get a new array each time

[07:31:06.0274] <bzbarsky>
If you want to reuse the object, you need to worry about the page messing with it...

[07:31:11.0954] <padenot>
right, this we found a few months back, so we have an issue to switch to something more suitable

[07:31:39.0752] <padenot>
it's unclear if we can use something that exists in WebIDL

[07:31:44.0043] <bzbarsky>
You can't

[07:32:07.0037] <bzbarsky>
Because WebIDL is sort of reifying common API patterns, and this desire to Not Allocate Anything is not common at all.

[07:32:40.0278] <padenot>
yeah, so I the only way is to do everything manually in ECMAScript terms

[07:32:49.0560] <bzbarsky>
OK

[07:32:57.0805] <padenot>
but then we can't really use an IDL callback righ ?

[07:33:02.0453] <padenot>
 * but then we can't really use an IDL callback right ?

[07:33:08.0100] <bzbarsky>
You can still use an IDL callback with `object` args, btw, so you get various other setup bits, if you want

[07:33:13.0388] <padenot>
ah

[07:33:30.0888] <bzbarsky>
But the value is definitely much less if you have to manually define your objects

[07:33:35.0174] <bzbarsky>
Let's start with the arrays

[07:34:00.0244] <bzbarsky>
Do their lengths change?

[07:34:21.0159] <bzbarsky>
Do we just use one array per given processor, or one array across processors?

[07:35:06.0502] <bzbarsky>
Do we care about the speed of indexed access on these arrays?  ;)

[07:36:28.0267] <padenot>
there are three lengths to talk about, the overall shape for a 2 input, each of them being stereo is [[Float32Array, Float32Array], [[Float32Array, Float32Array]]. The array that is top level has a fixed size. The arrays that are one level deep can change in length, the innermost Float32Array are fixed in size

[07:37:26.0171] <padenot>
those outer arrays (top level, and one level deep) are not very hot in terms of access, but the Float32Arrays more so

[07:37:32.0421] <padenot>
however the faster the better, as usual

[07:39:20.0039] <padenot>
we can'

[07:39:48.0948] <padenot>
 * we have different arrays for each instance of Processors

[07:43:30.0430] <bzbarsky>
OK

[07:43:33.0090] <bzbarsky>
Sorry, thinking

[07:43:36.0403] <bzbarsky>
So here is the proble

[07:43:41.0063] <bzbarsky>
Er, problem

[07:43:49.0320] <bzbarsky>
Say you have these arras

[07:43:51.0201] <bzbarsky>
er, arrays

[07:43:58.0331] <bzbarsky>
And you pass them to the page

[07:44:09.0789] <bzbarsky>
And the page reconfigures them so the values of the indexed properties cannot be changed

[07:44:11.0297] <bzbarsky>
Then what?

[07:44:21.0604] <bzbarsky>
"page" == "audioworklet"

[07:45:38.0656] <bzbarsky>
(there are several possible options here, but none of them is great)

[07:45:43.0588] <padenot>
in gecko, we get new arrays if we find they have been mutated

[07:46:10.0762] <padenot>
which is ok, in the sense that people know that it's a terrible idea to do it, but kind of annoying

[07:46:31.0559] <padenot>
FrozenArray<FrozenArray<Float32Array>> can in the discussion, but was ultimately rejected

[07:46:38.0311] <padenot>
 * FrozenArray<FrozenArray<Float32Array>> came in the discussion, but was ultimately rejected

[07:49:27.0825] <bzbarsky>
Where is the "find they have been mutated" code?

[07:50:07.0166] <Ms2ger [~half-time dedication]>
bzbarsky: while I have you here - passing `undefined` to an `optional any` argument yields the special value ‚Äúmissing‚Äù, right?

[07:50:21.0084] <Ms2ger [~half-time dedication]>
And I can't do `optional any foo = undefined` 

[07:50:40.0983] <padenot>
bzbarsky: https://searchfox.org/mozilla-central/source/dom/media/webaudio/AudioWorkletNode.cpp#183-202,212-260

[07:52:00.0435] <bzbarsky>
padenot: Ah, interesting.  OK, that seems fine.

[07:52:18.0917] <padenot>
well you reviewed it :-)

[07:52:23.0232] <bzbarsky>
Heh

[07:52:26.0847] <bzbarsky>
Ok, then

[07:52:48.0377] <padenot>
you'll note the comments about this being not very well described on top of the function

[07:53:35.0979] <padenot>
generally we know what properties we want here, but we don't really know how to spec it

[07:53:57.0492] <bzbarsky>
Ms2ger [~half-time dedication]: umm... there are spec issues.  See https://www.w3.org/Bugs/Public/show_bug.cgi?id=23602 (linked from https://github.com/heycam/webidl/issues/777)

[07:54:21.0456] <bzbarsky>
padenot: OK, so the third arg...

[07:54:22.0581] <padenot>
FrozenArray<FrozenArray<Float32Array>> would have been nice, I don't know why we couldn't use it

[07:54:25.0390] <padenot>
/me searches

[07:54:44.0804] <padenot>
yes let's sort out the third arg first

[07:54:58.0755] <bzbarsky>
padenot: For the third arg there are a few options, I guess

[07:55:07.0609] <bzbarsky>
we want a mapping from strings to Float32Arrays?

[07:55:09.0503] <Ms2ger [~half-time dedication]>
bzbarsky: oh, hmm, bah. Thanks for the pointer

[07:55:21.0717] <bzbarsky>
Ms2ger [~half-time dedication]: No problem

[07:56:31.0991] <bzbarsky>
Ms2ger [~half-time dedication]: One of the many IDL balls I got tired of rolling up the "other engines never give feedback" hill

[07:56:33.0051] <padenot>
bzbarsky: yes exactly

[07:57:31.0718] <bzbarsky>
padenot: OK, so I think the options are.... (1) an ES Map.  This would need to be cleared between calls and re-set with the values we want, presumably.  Whether that will need to GC... is probably an engine implementation detail.

[07:57:52.0747] <bzbarsky>
jorendorff: Do you know whether in SpiderMonkey that would gc?

[07:58:19.0106] <bzbarsky>
(I guess one question is: is the set of names fixed or not?)

[07:58:25.0573] <padenot>
it is fixed

[07:58:41.0154] <padenot>
always ever the same set of keys for the lifetime of the AudioWorkletProcessor

[07:58:59.0049] <padenot>
those keys are specified on construction

[08:00:05.0260] <bzbarsky>
OK.  And we would have separate objects per AudioWorkletProcessor?

[08:00:22.0447] <padenot>
yes, one for each

[08:00:54.0382] <padenot>
 * yes, one for each AudioWorkletProcessor instance

[08:00:57.0333] <bzbarsky>
Are the _value_ objects fixed too?

[08:01:11.0140] <padenot>
that would be best yes

[08:01:26.0021] <padenot>
the elements of the values, which is a Float32Array, is what change

[08:01:32.0678] <padenot>
 * the elements of the value, which is a Float32Array, is what change

[08:01:38.0390] <bzbarsky>
So one plausible thing is to have an object whose property names are the names, property values are the Float32Arrays, and the object is frozen

[08:02:13.0257] <padenot>
now, I found why we didn't go the Frozen object route. Apparently used to/is frowned upon, considered bad API design

[08:02:17.0074] <bzbarsky>
/me assumes the lengths of the Float32Arrays don't change either

[08:02:21.0596] <bzbarsky>
eh

[08:02:27.0891] <bzbarsky>
Everything here is bad API design.  ;)

[08:02:33.0340] <padenot>
yes, fixed at construction for the lifetime of the audiocontext

[08:02:51.0209] <bzbarsky>
I mean, it restricts what the callee can do with the object

[08:02:56.0449] <bzbarsky>
If we freeze it

[08:02:56.0678] <padenot>
I don't know if https://www.w3.org/Bugs/Public/show_bug.cgi?id=23682#c34 or https://www.w3.org/Bugs/Public/show_bug.cgi?id=29004 still apply

[08:03:08.0109] <bzbarsky>
Those are all still true

[08:03:20.0691] <padenot>
the idea here is very much to restrict what the callee can do

[08:03:44.0370] <bzbarsky>
Right, in which case a frozen object seems like the right tool to me

[08:04:02.0394] <bzbarsky>
You can't express that in IDL, sadly...

[08:04:32.0569] <bzbarsky>
But that's ok.  The informative text would say that the thing is a frozen object with property names being your names, etc

[08:04:43.0529] <bzbarsky>
The normative text would create the object once, define the properties on it, freeze it

[08:04:54.0261] <bzbarsky>
And then in the rendering loop update the arrays and pass the object

[08:05:01.0130] <bzbarsky>
And our impl can do the same

[08:05:13.0405] <padenot>
this would have the right properties

[08:05:53.0657] <padenot>
as in, reusability, and no way for authors to change things, so no need for all those checks to re-create the object, etc.

[08:06:00.0454] <bzbarsky>
yep

[08:06:05.0520] <padenot>
(in the implementation)

[08:06:14.0527] <padenot>
ok, adding this to the list of things to do

[08:06:32.0001] <bzbarsky>
That would be my inclination if we can convince everyone else to spec that...

[08:06:44.0826] <padenot>
this I'll handle

[08:06:48.0090] <bzbarsky>
Great

[08:07:04.0449] <bzbarsky>
Anyway, in terms of our impl, that would mean JS_DefineUCProperty to define the props, then freeze things.

[08:07:47.0706] <padenot>
the other folks implementing this have so many issue caused by GC pressure that telling them they can patch things to make it less susceptible to GC is not going to be hard

[08:07:58.0361] <bzbarsky>
heh

[08:08:30.0135] <bzbarsky>
OK, are we prettty much good here?

[08:08:41.0692] <padenot>
and, just to be clear, JS_NewPlainObject, before setting the properties with JS_DefineUCProperty, then I find the function to freeze

[08:08:47.0690] <bzbarsky>
Yep

[08:08:57.0680] <padenot>
I'm very new to the jsapi

[08:09:08.0762] <padenot>
well that's pretty obvious I guess

[08:09:10.0959] <bzbarsky>
JS_FreezeObject(

[08:09:39.0623] <padenot>
ok I think we're good, I have made notes with all the items you mentionned, and I'll do the implem and the spec bugs and the speccing

[08:09:45.0220] <bzbarsky>
Thank you!

[08:09:53.0305] <bzbarsky>
/me will get back to being off for the holiday.  ;)

[08:09:57.0146] <padenot>
ouch

[08:10:03.0161] <padenot>
sorry about that

[08:10:06.0494] <bzbarsky>
No problem

[08:10:14.0571] <bzbarsky>
I'm the one who looked at chat.. ;)

[08:10:22.0046] <bzbarsky>
And then I wanted to get this solved. 

[08:10:45.0182] <padenot>
it's a bit annoying to find problems on this each time we want to implement something, but here we are

[08:11:12.0154] <bzbarsky>
That's why we want two impls before finalizing a spec... 

[08:11:20.0860] <bzbarsky>
(well, one of the reasons)

[08:11:34.0095] <padenot>
it's not like the original authors don't have people to ask when they aren't sure about things

[08:12:51.0661] <bzbarsky>
Google's culture seems to not encourage that

[08:13:02.0784] <bzbarsky>
Instead encourages "just hack something up and call it fine"

[08:13:57.0052] <padenot>
tell me about it, some days it feels like I'm doing their all of their work when it comes to specs, and it must be ten times worse for you

[08:14:04.0175] <padenot>
anyways

[08:14:51.0923] <bzbarsky>
padenot: That is a _very_ common problem, yes.

[08:15:06.0606] <bzbarsky>
padenot: We've been trying to figure out ways to fix that...

[08:15:08.0366] <bzbarsky>
Anyway

[08:15:11.0442] <bzbarsky>
/me disappearing for real

[09:43:48.0455] <nbp>
Do we have a counter for: https://bugzilla.mozilla.org/show_bug.cgi?id=1616092 ?

[09:54:22.0058] <evilpie>
we have some bug very old INVALID bug for this that I can't find right now


2020-02-18
[01:59:35.0637] <arai>
`Object.getOwnPropertyDescriptor` is too long to type :P

[02:15:08.0846] <decoder>
jorendorff: I need some input on bug 1615265. I am going to suppress this issue but I need to know if that is related to the race that we discussed the other day. I have the feeling that we are suppressing more than one bug here :/ 

[02:15:10.0414] <Botzilla demo>
https://bugzil.la/1615265 ‚Äî NEW (nobody) ‚Äî Perma ThreadSanitizer: data race /builds/worker/workspace/build/src/js/xpconnect/loader/ScriptPreloader.cpp:930:17 in mozilla::ScriptPreloader::OffThreadDecodeCallback(JS::OffThreadToken*, void*) when Gecko 75 merges to Beta on 2020-03-09

[03:08:35.0871] <nbp>
decoder: I need-info kmag on https://bugzil.la/1608462 , which from what I understand is the same issue, and still not fixed.

[03:09:12.0024] <nbp>
I do not think we should ignore this issue.

[03:09:28.0235] <decoder>
ah, im also commenting and needinfoing him on 1615265 now

[03:10:05.0499] <decoder>
I saw that the OffThreadDecodeCallback has a `MonitorAutoLock mal(cache->mMonitor);`

[03:10:22.0602] <decoder>
but `ScriptPreloader::DoFinishOffThreadDecode() ` has not

[03:10:56.0624] <decoder>
I wonder if that is intended. TSan is complaining about racing on `cache->mFinishDecodeRunnablePending` and thats correct. the code also looks problematic

[03:11:06.0922] <decoder>
https://searchfox.org/mozilla-central/source/js/xpconnect/loader/ScriptPreloader.cpp#937

[05:30:47.0759] <padenot>
I'm seeing this on a web page, any idea what it means ?

[05:31:13.0233] <padenot>
source code is ```jsthis._preDelay.set(
			Float32Array.from(inputs[0][0], (n, i) => (n + inputs[0][1][i]) * 0.5),
			this._pDWrite
		);
```

[05:31:19.0924] <padenot>
 * source code is ```js 
this._preDelay.set(
Float32Array.from(inputs[0][0], (n, i) => (n + inputs[0][1][i]) * 0.5),
this._pDWrite
);
```
```

[05:31:30.0688] <padenot>
 * source code is `
this._preDelay.set(
Float32Array.from(inputs[0][0], (n, i) => (n + inputs[0][1][i]) * 0.5),
this._pDWrite
);
`

[05:31:51.0216] <padenot>
I'm particularly worried about the `self-hosted:4435` bit

[05:33:15.0276] <Ms2ger [~half-time dedication]>
Does that mean Float32Array.from is self-hosted?

[05:34:31.0274] <padenot>
I'm trying to find whether or not it's the case, but I'm a bit lost

[05:35:11.0697] <padenot>
if it's both for regular Array and also TypedArrays, it seems like it is

[05:39:26.0935] <evilpie>
yeah it's self-hosted  https://searchfox.org/mozilla-central/source/js/src/builtin/TypedArray.js#1409

[05:39:37.0675] <evilpie>
source is the name of the first parameter

[05:40:21.0029] <padenot>
hm I see

[05:41:15.0185] <padenot>
ok that helps

[05:41:24.0147] <padenot>
/me continue tracking this down

[06:05:03.0353] <padenot>
well the cause was a chrome bug that people now seem to rely on

[06:05:05.0128] <padenot>
pikachusurprised.jpg

[06:11:59.0252] <jdm>
jandem: servo is trying to upgrade to the latest spidermonkey, and when ion is enabled we reliably get a crash accessing getter properties of the window object after a while where the specialized this pointer argument in the getter is garbage. I have an rr recording of the problem; what's a good next step?

[06:12:48.0286] <jandem>
jdm: nox mentioned that in #jsapi on IRC, there was some discussion here https://mozilla.logbot.info/jsapi/20200218#c16886383-c16886423

[06:13:22.0418] <jandem>
it'd be good to double check the JS object is what you expect

[06:13:36.0763] <jandem>
what's in its first slot is then passed to the getter op by Ion

[06:14:12.0493] <jdm>
thanks

[06:17:32.0773] <Ms2ger [~half-time dedication]>
jdm: is this groundhog day?

[06:17:46.0107] <jdm>
it's divide and conquer :)

[06:17:56.0643] <jdm>
next we'll take this to twitter

[06:25:16.0613] <wingo>
& then turn the whole debugging session into a smart contract

[07:11:24.0108] <jdm>
if I have a JSObject pointer, what's the easiest way to print the value in reserved slot 0?

[07:11:27.0523] <jdm>
(in gdb)

[07:11:35.0118] <evilpie>
can someone check if this analysis is correct: https://bugzilla.mozilla.org/show_bug.cgi?id=1615704#c3 ?

[07:11:39.0728] <jdm>
and similarly, how can I add a watchpoint to it?

[07:11:41.0160] <evilpie>
Waldo: ^

[07:13:26.0591] <jorendorff>
jdm: I think `$1->getSlot(0)`

[07:14:31.0343] <jorendorff>
jdm: oh, you have to cast to `js::NativeObject*` first

[07:14:47.0475] <jorendorff>
then you can `->getReservedSlot(0)` even

[07:25:48.0864] <jdm>
/me tries to figure out why every call to getReservedSlot on the window object ends up segfaulting

[07:28:05.0306] <Ms2ger [~half-time dedication]>
Does it have reserved slots?

[07:28:14.0552] <Ms2ger [~half-time dedication]>
Globals used to be special, at least

[07:28:41.0869] <jdm>
globals and non-globals share the same layout now where slot 0 is the native object pointer

[07:28:59.0198] <jdm>
and afaict we're setting it up to match gecko's

[07:29:21.0100] <jandem>
can also call `obj->dump()`, it should print the slots

[07:29:23.0712] <jdm>
ooh

[07:29:39.0482] <jdm>
Cannot evaluate function -- may be inlined

[07:30:14.0482] <jdm>
this is a debug spidermonkey build :(

[07:30:15.0951] <jandem>
`js::DumpObject(obj)`?

[07:30:32.0638] <jdm>
hmm, seems bad that dumping the object segfaulted as well

[07:31:15.0285] <jdm>
we have a bad shape apparentl;y

[07:37:00.0637] <jandem>
evilpie: you mean for the cross-compartment case? same-compartment realms are spec-compliant (we should enter the realm of the callee function)

[07:38:17.0760] <evilpie>
jandem: oh neat. Are cross-compartment realms even observable from the normal web?

[07:39:08.0312] <jandem>
evilpie: they are, when document.domain is involved for example (two compartments which can then access each other)

[08:54:32.0541] <mccr8>
Is there some way in the browser to get at the shell functions? I vaguely recall there being something along those lines, but I can't find it.

[08:54:40.0375] <mccr8>
I don't remember if it was fuzzing only or something.

[09:00:19.0544] <bzbarsky>
evilpie: Different tabs have different zones, so window.open() gives you a cross-compartment same-origin realm

[09:00:24.0989] <bzbarsky>
evilpie: That you can access

[09:00:44.0002] <bzbarsky>
mccr8: Do you need shell functions or TestingFunctions?

[09:02:42.0928] <mccr8>
bzbarsky: Ah, TestingFunctions must be what I was thinking of. Thanks.

[09:02:58.0081] <mccr8>
I'm reviewing a patch that is adding something to Cu and I'm trying to figure out if that's really necessary or not.

[09:03:34.0197] <mccr8>
Now I just need to figure out if this function that is being added is a testing function or not.

[09:12:05.0726] <mccr8>
It is not. But I'll mention the alternative.

[09:16:29.0330] <evilpie>
jandem: thanks I had totally paged that out

[09:17:29.0552] <evilpie>
bzbarsky: oh I had no idea about window.open

[10:14:36.0892] <Waldo>
> <@padenot:mozilla.org> hi. I have a `JS::PersistentRooted<JSObject*>`, and I need to pass it to something that takes a `HandleValue`, does someone has an example of this?

Note that implicit conversion of `PersistentRooted<T>` to `Handle<T>` is sort of a footgun.  (And if it weren't for the claims here, I would have guessed we would _not_ have such functionality.  I actually sort of think, if it exists, we should delete it...)

The former is basically a root allocated in the C++ heap: you have to manually keep it alive somewhere.  The latter is a pointer to a location that is _presumed_ to remain rooted for the lifetime of whatever is using the `Handle`.

Now imagine you pass a `Handle<T>` created directly from a `PersistentRooted<T>` to a function.  And inside that function something is done that happens to deallocate the `PersistentRooted<T>`.  This will cause your handle to no longer point at rooted memory, and many hijinks will ensue.

On the other hand, if you store that `PersistentRooted<T>` into a (necessarily) stack-allocated `Rooted<T>`, even if that function happens to deallocate the `PersistentRooted<T>`, your `T` will still be kept alive and known to the GC by the stacked `Rooted`.

[10:30:34.0971] <sfink>
"The former is basically a root allocated in the C++ heap: you have to manually keep it alive somewhere." - huh? PersistentRooted keeps itself alive. Or do you mean the PersistentRooted itself has to be "kept alive" as in, not deleted? Your bug is still valid either way; PersistentRooteds are assumed to have a relatively long lifetime compared to anything you do with them.

[10:35:29.0731] <Waldo>
> <@evilpie:mozilla.org> Waldo: ^

Yeah, `.caller` and `.arguments` probably ought be written in fashion that does not use `CallNonGenericMethod` -- as ought most things, just it's a bit more fragile writing them and all.

[10:36:57.0735] <Waldo>
> <@sfink:mozilla.org> "The former is basically a root allocated in the C++ heap: you have to manually keep it alive somewhere." - huh? PersistentRooted keeps itself alive. Or do you mean the PersistentRooted itself has to be "kept alive" as in, not deleted? Your bug is still valid either way; PersistentRooteds are assumed to have a relatively long lifetime compared to anything you do with them.

Yeah, sorry, the `PersistentRooted<T>` itself has to be kept alive.  _Something_ is keeping it alive manually, and if the function you pass the handle to can manage to un-keep the `PersistentRooted` alive, things go boom.

[10:37:34.0483] <cfallin>
If only we had a language-level way to track object lifetimes...

[10:38:09.0789] <jorendorff>
i no rite

[10:38:50.0088] <Waldo>
Gee, see that would be a good idea.

[10:39:12.0357] <Waldo>
(^ read it out loud, you won't regret listening to me this once)

[10:52:03.0645] <Waldo>
Bwhahahaha

[11:08:43.0363] <evilpie>
Waldo: I am not sure I trust myself to implement that correctly, but it probably makes sense when overhauling this stuff anyway

[11:10:04.0327] <Waldo>
I've been practicing with the footguns lately, I think I can review a patch reasonably competently, or perhaps carry this aspect of it across the finish line.  üòè

[11:10:13.0628] <Waldo>
(flw)

[11:14:00.0665] <evilpie>
@Waldo: Thanks, I will give it a shot.

[11:15:50.0107] <Waldo>
The client-UI fussiness about properly invoking the nick of someone in a channel with Matrix is somewhat unfortunate, but at least there's `/stalk`-like reaction to mere mention of nicks too, at least with the web client and RiotX on Android both.

[11:16:25.0558] <jorendorff>
it's so unfortunate

[11:16:36.0687] <jorendorff>
(the client ui fussiness)

[11:16:44.0815] <Waldo>
Speaking of which, I guess I'm also missing my IRC `/stalk pun` these days, aren't I.

[11:17:01.0721] <evilpie>
I think I made the mistake of typing your name! I am such a bad person

[11:18:15.0580] <sfink>
I kind of liked the ability to mention a nick without triggering Riot to notice and wrap it up with excessive decoration. But I found the pref to not do that anymore, so now the marked-up version looks better than not.

[11:18:17.0720] <Waldo>
It alerted me, so no harm no foul for sure.

[11:27:49.0023] <iain>
std::stable_sort allocates a temporary buffer internally, which sets off check_vanilla_allocations.py. Do we have our own implementation of stable sorting somewhere?

[11:49:41.0230] <Waldo>
iain: `ds/Sort*` has a merge sort algorithm it that'll be stable.

[11:50:04.0832] <Waldo>
 * iain: `ds/Sort*` has a merge sort algorithm in it that'll be stable.

[11:51:05.0676] <iain>
Waldo: Perfect, thanks!

[11:51:46.0533] <Waldo>
I wish I didn't have to remember that merge sort is a stable sort to answer that, but calling it "StableMergeSort" would be a bit gilding the lily probably.

[11:52:15.0292] <Waldo>
This came up for some `builtin/intl` patching recently, only reason I had the association nicely in memory.

[11:52:34.0400] <iain>
Might be reasonable to add a comment saying "this is a stable sort"

[11:53:12.0587] <mccr8>
Or "this is a stable sort StableSort stable_sort" for better searchability. ;)

[11:53:29.0843] <Waldo>
https://searchfox.org/mozilla-central/source/js/src/builtin/intl/LanguageTag.cpp#482

[11:53:55.0832] <iain>
mccr8++

[11:53:57.0951] <Waldo>
https://searchfox.org/mozilla-central/source/js/src/ds/Sort.h#67 does not actually mention stability.  It could, but also by the time you've found it there's a somewhat fair chance you had already thought of it as stable...

[12:48:52.0282] <evilpie>
So I am trying to figure out if something I implemented behaves like the spec

[12:49:33.0636] <evilpie>
per https://github.com/claudepache/es-legacy-function-reflection/blob/master/spec.md IsAllowedReceiverFunctionForCallerAndArguments Step 3. checks if the |f| in |f|.caller is in expectedRealm

[12:49:53.0091] <evilpie>
expectedRealm is "Let currentRealm be the current Realm Record."

[12:51:22.0189] <evilpie>
so to me I would imagine the following code would always throw because we are entering a different realm when calling the "otherCaller" function

[12:51:32.0215] <evilpie>
https://paste.mozilla.org/hBObjxJr

[12:52:55.0613] <jorendorff>
yeah, this is pretty optimistic on the part of the proposal authors

[12:53:09.0623] <evilpie>
it doesn't throw in my implementation, and I am not sure why actually?

[12:53:18.0167] <evilpie>
yeah not even talking about that

[12:53:30.0187] <evilpie>
all those realm restrictions aren't implemented by anyone

[12:55:06.0235] <jorendorff>
i know

[12:55:16.0010] <jorendorff>
i'm saying the expectation that this does not break the web is optimistic

[12:55:31.0147] <jorendorff>
but I think I agree with you that your example should throw

[12:55:55.0766] <jorendorff>
I'm checking the (existing, already-spec'd) behavior of [[Call]] on builtins right now, just to be totally sure

[12:56:55.0793] <jorendorff>
yeah, step 6 is exactly what you'd expect https://tc39.es/ecma262/#sec-built-in-function-objects-call-thisargument-argumentslist

[12:57:48.0598] <evilpie>
so this is my patch https://phabricator.services.mozilla.com/D63248

[12:59:15.0583] <jorendorff>
evilpie: well, you're unwrapping it

[12:59:23.0536] <jorendorff>
/me thinks

[12:59:42.0578] <jorendorff>
yeah, i see, why is this not throwing

[13:00:11.0489] <Waldo>
`AdvanceToActiveCallLinear(cx, iter, fun)` -> `AdvanceToActiveCallLinear(cx, iter, unwrappedFun)` does not seem like a wholly safe/correct change to make.

[13:00:32.0940] <Waldo>
I don't remember how that function works, but the idea that that change just works seems...optimistic.

[13:02:51.0469] <jorendorff>
evilpie: oh, does it throw if you use `--more-compartments` or pass `{sameCompartment: false}` to `newGlobal`?

[13:03:14.0864] <jorendorff>
 * evilpie: oh, does it throw if you use `--more-compartments` or pass `{newCompartment: true}` to `newGlobal`?

[13:04:12.0914] <evilpie>
no

[13:05:24.0099] <jorendorff>
ok, so the wrapping is irrelevant i guess?

[13:05:45.0152] <jorendorff>
i dunno, gotta debug

[13:20:33.0933] <iain>
sfink: ping

[13:20:38.0975] <iain>
sfink: ^

[13:20:45.0507] <sfink>
wazzup?

[13:20:59.0192] <iain>
Do you have a copy of your notes from the hazard workshop handy?

[13:21:13.0863] <iain>
I am running into hazard warnings in the regexp code

[13:22:09.0970] <sfink>
http://hotsphink.github.io/sfink-tools/doc/hazards.html

[13:22:47.0336] <iain>
Perfect, thanks!

[13:23:12.0711] <sfink>
but if you send me a link to a try push, I can take a look

[13:25:51.0871] <iain>
The root of the issue is that I'm holding a JS::AutoCheckCannotGC over a call into ICU which internally uses an indirect call

[13:26:40.0031] <sfink>
oh. You may just need to annotate that away.

[13:27:31.0612] <sfink>
the file is js/src/devtools/rootAnalysis/annotations.js

[13:27:46.0935] <sfink>
but which list to put it in depends on what the best way to identify it is

[13:31:51.0707] <iain>
    void icu_65::UnicodeSet::applyFilter((int8)(int32,void*)*, void*, icu_65::UnicodeSet*, int32*)
    IndirectCall: filter


[13:32:52.0191] <sfink>
yeah, that looks like one for ignoreFunctions

[13:35:27.0247] <iain>
Cool, I'll try that out and see if it helps

[13:36:24.0678] <sfink>
I'm assuming nobody's going to be passing in a function as the 1st argument that will call back into the JS engine

[13:37:30.0049] <iain>
I don't even think anybody's passing in a function at all. I'm pretty sure the function pointer is completely internal to ICU.

[13:37:35.0480] <sfink>
right

[13:37:47.0376] <iain>
The previous line in the call stack is: icu_65::UnicodeSet* icu_65::UnicodeSet::applyIntPropertyValue(int32, int32, int32*)


[13:37:49.0182] <sfink>
the alternative is to stick an AutoSuppressGCAnalysis into whatever's calling into ICU

[13:38:10.0386] <sfink>
I should add a whole section to that hazards doc about how you actually deal with problems

[13:38:14.0423] <iain>
That's tricky, because ICU is being called from V8 code

[13:38:23.0056] <iain>
Which I am trying not to modify

[13:38:25.0892] <sfink>
oh. Then ignoreFunctions seems preferable.

[13:38:52.0960] <iain>
Yeah, annotations.js seems like the answer to my problems

[13:53:45.0000] <padenot>
> <@waldo:mozilla.org> Yeah, sorry, the `PersistentRooted<T>` itself has to be kept alive.  _Something_ is keeping it alive manually, and if the function you pass the handle to can manage to un-keep the `PersistentRooted` alive, things go boom.

This is absolutely guaranteed, in the code I'm writing, lifetimes are 100% decided by the C++ code. This is a very controlled environment (AudioWorkletGlobalScope) 

[13:55:53.0853] <padenot>
But if we feel there is something we could improve in terms of safety, I'm also very happy to listen to suggestions and implement them if possible 

[13:56:59.0854] <Waldo>
Yeah, see, I'd be more scared than that if it were me.  :-)  Lack of `kungFuDeathGrip`s is absolutely a thing that has caused us bugs in the past, and this is sort of a variant of that problem.

[13:57:43.0225] <padenot>
In particular, we're more or less encoding this lifetime property in the spec

[13:58:11.0205] <Waldo>
And especially when you've possibly got random JS code potentially running in places here, reentry to do most nearly anything is a frequent specter haunting things.

[13:59:02.0734] <padenot>
Worklets are different in the sense that they don't decide when they run

[14:00:11.0832] <jorendorff>
Plus: it's not like C++ can do anything to make handles ever safe

[14:00:18.0121] <padenot>
And the whole scope is destroyed at once when it's time to do so (per spec)

[14:01:08.0622] <padenot>
> <@jorendorff:mozilla.org> Plus: it's not like C++ can do anything to make handles ever safe

Heh, I don't write this in c++ by choice, we have been saved more than once by rust in the media team

[14:02:58.0263] <sfink>
hm, I wonder if PersistentRooted could hand out a Handle subclass that manages a numHandlesActive counter, and ~PersistentRooted could throw a hissy fit it it's nonzero. My grasp of C++'s temporary handling is not strong.

[14:03:31.0463] <sfink>
subclassing probably wouldn't work that well with things that are using generic Handles

[14:04:09.0812] <Waldo>
Just forcing you to store it in a `Rooted` to access its stored value does not seem terribly onerous to me, and it's simple and easy to understand and verify, unlike a shared-handle-with-refcount thing.

[14:04:47.0333] <sfink>
true

[14:59:36.0592] <sfink>
ugh. Upgraded to fedora 31, which uses Python 3 as /usr/bin/python. So jstests and jit-tests fail. I guess I should land my partial migration of those scripts to Python 3 -- it works for everything but wpt.

[15:07:04.0681] <iain>
The good news is that annotations.js fixed my hazard problem. The bad news is that it uncovered a new, real hazard. The good news is that it's only an issue when using named captures, which we don't currently support. The bad news is that we obviously want to support them. The good news is that this is all a problem for Tomorrow Iain.

[15:09:20.0475] <evilpie>
iain: so you are getting pretty close now?

[15:10:04.0887] <iain>
My try build is ~3 known issues away from being green

[15:12:30.0360] <iain>
Wait, make that 4, I forgot that there was a cgc/binast issue that I've been pretending doesn't exist

[15:12:40.0964] <iain>
Plus any other issues that are hiding behind the known ones

[15:12:58.0759] <iain>
Plus a lot of work to get the patches organized and reviewable


2020-02-19
[17:41:38.0488] <Waldo>
iain: Sorry for the nitpicking on such a simple patch.  :-\

[17:52:57.0914] <iain>
Waldo: Is merge sort *always* stable? Wikipedia says no: https://en.wikipedia.org/wiki/Merge_sort

[17:53:46.0159] <iain>
Specifically, there are variants of merge sort that try to keep the space overhead down and are not stable

[17:58:03.0178] <Waldo>
I've always seen it described as stable in the past, and indeed most of the hits on https://www.google.com/search?client=firefox-b-1-d&q=merge+sort and https://www.google.com/search?q=merge+sort+stable describe it as straightforwardly stable.

[17:58:22.0657] <sfink>
I'm not sure how you could get an unstable merge sort

[17:58:28.0518] <sfink>
you kinda go through things in order

[18:02:12.0424] <Waldo>
/me refreshes his memory of how merge sort works

[18:03:20.0992] <iain>
If you merge from the right half before the left half, you end up with an unstable sort

[18:03:40.0122] <Waldo>
https://en.wikipedia.org/wiki/Sorting_algorithm#Comparison_sorts straightforwardly says merge sort is stable.  I think the Wikipedia article is more or less wrong, trying to shoehorn elaborations of the merge sort algorithm (that sacrifice stability) into an already well-defined concept.

[18:03:46.0887] <iain>
I can't think of any reason to do that on purpose, but if you did it by accident I think you would still call it a merge sort

[18:26:56.0373] <ptomato>
what kind of thing might cause a crash in JSObject::writeBarrierPre or TenuredCell::writeBarrierPre?

[18:27:25.0605] <ptomato>
(specifically what kind of thing that would have changed between ESR60 and ESR68?)

[18:28:36.0891] <ptomato>
the crash happens when setting a JS::Heap<JSObject*>, that is maintained as a weak pointer, to nullptr

[18:28:49.0518] <ptomato>
(stack trace can be seen at https://gitlab.gnome.org/GNOME/gjs/issues/301)

[00:25:23.0033] <Benjamin Bouvier>
good day y'all!

[00:25:31.0779] <Benjamin Bouvier>
does anybody remember the bug number for the JSValue representation change?

[00:26:08.0020] <Benjamin Bouvier>
servo people updating spidermonkey are running into this, so i think it'd be helpful to have a small description of the changes to show them

[00:47:44.0909] <jandem>
Benjamin Bouvier: do you know what they're running into exactly? Things changed a bit but not that much in the end, afaik

[00:52:19.0914] <Benjamin Bouvier>
> <@jandem:mozilla.org> Benjamin Bouvier: do you know what they're running into exactly? Things changed a bit but not that much in the end, afaik

They're using the "private" parts of JSVal, and apparently the rust bindings (on our side) haven't been updated and don't match the repr of the C++ JSValue, iirc

[00:56:27.0826] <jandem>
Benjamin Bouvier: bug 1505902 made some changes to how PrivateValue is encoded, I see the rust bindings do the old thing still - https://searchfox.org/mozilla-central/rev/df94cd5ba431234bc220ac081def0801fe44b89e/js/rust/src/jsval.rs#182

[00:56:29.0093] <Botzilla demo>
https://bugzil.la/1505902 ‚Äî RESOLVED (iain) ‚Äî jsapi-tests.exe fails with Assertion failure: (uintptr_t(ptr) & 1) == 0

[00:58:07.0157] <Benjamin Bouvier>
jandem: thanks! (I'll ask nox to show up here instead of proxying)

[05:02:39.0829] <nox>
I like that there is finally a channel named "spidermonkey" and not "jsapi" or "mozjs" or whatever.

[05:03:28.0718] <nox>
Also, I do confirm that Benjamin Bouvier is right and that our issue went away with fixing PrivateValue.

[05:03:51.0975] <nox>
Benjamin Bouvier: We don't actually use the bindings in js/rust btw.

[05:31:23.0010] <evilpie>
nox: so why do we have the bindings? that seems a bit silly

[05:38:53.0748] <nox>
evilpie: No clue

[05:41:35.0437] <nox>
The plan was to use them initially, IIRC, but then we wanted to make changes to them and it was too cumbersome to go through m-c every time I think.

[06:49:17.0810] <padenot>
all, if I JS_FreezeObject a JSObject, can I Unfreeze it somehow ?

[06:49:46.0216] <jorendorff>
No, the standard says what is frozen stays frozen

[06:50:28.0993] <padenot>
if a JSObject is frozen, in C++, can I swap a typed array for another one ?

[06:50:35.0222] <padenot>
does that even make sense ?

[06:50:51.0946] <padenot>
this typedarray would be a property of the JSObject

[06:51:01.0298] <padenot>
sorry that was an important information missing

[06:51:20.0340] <jorendorff>
I don't think you can. Unless it's an accessor property.

[06:55:00.0839] <jorendorff>
```
function WeirdObject() {
  let arr = new Int8Array(256);  // mutable variable
  return {
    get arr() { return arr },
    swap() { arr = new Int8Array(256); /* or whatever */ }
  };
}
let obj = WeirdObject();
Object.freeze(obj);
obj.swap();  // works
```

[06:55:03.0743] <jorendorff>
padenot: ^

[06:57:03.0941] <padenot>
ok, I see. I think my problem is slighly different however. I have an object, that is passed down to js as the parameter of a callback. It's a frozen object, where the object keys are strings (the set is fixed), and the values are Float32Array, which can be either 1 or 128 in length (same problem as last time)

[06:57:23.0583] <padenot>
we discussed the reason why we don't want to simply change the typed array length

[06:57:31.0530] <padenot>
so I'm considering my options

[06:57:57.0661] <jorendorff>
Is this object defined with WebIDL?

[06:58:07.0526] <padenot>
yes

[06:58:16.0183] <padenot>
this is all being designed/implemented

[06:58:29.0476] <jorendorff>
OK, so the spec should not say the object is frozen but its data properties change

[06:58:45.0999] <jorendorff>
that kind of flies in the face of what frozen means, which is actually spec'd in the ECMAScript standard

[06:59:04.0249] <padenot>
I thought frozen wasn't deep ?

[06:59:37.0910] <jorendorff>
it isn't deep, but I thought we decided against modifying the length of an existing TypedArray

[07:00:04.0029] <jorendorff>
if you want the TypedArray to be length 1 sometimes and length 128 at other times ... that seems like it would involve changing the property to point to a different TypedArray

[07:00:35.0907] <jorendorff>
padenot: It seems best to define that object in WebIDL, which always means accessor properties, never data properties

[07:01:09.0287] <jorendorff>
freezing such an object **doesn't** freeze its internal state, just properties

[07:01:11.0128] <padenot>
the issue is that they keys are chosen by authors, but fixed then

[07:02:45.0624] <nox>
jandem: This test https://github.com/servo/servo/blob/master/tests/wpt/mozilla/tests/mozilla/localeCompare.html is now failing with the smup, did that change recently?

[07:03:08.0490] <jorendorff>
padenot: You mean the property keys, the string names of those things? i'm a little lost

[07:04:05.0560] <padenot>
my vocabulary is not precise enough, this is too new, I'll write an example

[07:04:13.0190] <padenot>
 * my vocabulary is not precise enough, this is too new to me, I'll write an example

[07:04:19.0575] <jorendorff>
that's fine, you're doing well :)

[07:04:42.0316] <padenot>
at least thanks to the discussions here all my jsapi code seem to work

[07:05:09.0039] <padenot>
first time doing jsapi stuff after 9 years of gecko work, there is a time for everything I guess :-)

[07:07:51.0716] <jandem>
nox: how does it fail? I get -1 on a shell build too

[07:08:26.0658] <nox>
jandem: It says 1 when running from Servo on my SpiderMonkey update branch.

[07:09:49.0666] <jandem>
nox: the only things I can think of are different locale or differences in ICU build

[07:10:42.0882] <jandem>
without Intl we call a callback: https://searchfox.org/mozilla-central/rev/df94cd5ba431234bc220ac081def0801fe44b89e/js/src/builtin/String.cpp#1460 

[07:10:45.0961] <nox>
Oh, I had to tweak the Intl stuff so it uses encoding_rs and friends from crates.io instead of vendoring the crate inside another crate, that's probably it.

[07:13:15.0902] <nox>
So we do have JS_HAS_INTL_API set, mmh‚Ä¶

[07:17:54.0874] <nox>
Oh yeah, it says -1 locally, our CI is doing something silly.

[07:18:03.0611] <jandem>
great :) 

[07:18:37.0872] <nox>
jandem: I'm surprised SM build system doesn't enforce the default locale though. Or does it and I broke something?

[07:20:11.0729] <jandem>
hm anba and Waldo are the experts on this

[07:21:18.0394] <nox>
IIRC I saw a commit to forbid the use of a system-provided ICU lib, if I'm correct about this, in the same spirit the default locale itself should be fixed.

[07:24:58.0280] <nox>
jandem: Does the JS shell says -1 if you start it with LANG=C? Sorry I don't have it built locally (I probably should).

[07:25:32.0587] <jandem>
nox: then it says 1

[07:25:54.0946] <nox>
Oh, ok.

[07:28:12.0994] <nox>
anba, Waldo: Is the system locale supposed to change what String.localeCompare does? If not, do you want me to file a bug?

[07:34:22.0787] <jandem>
such a cool bot, but its hard to find this room when I open its graph https://voyager.t2bot.io/#/

[07:37:10.0387] <jandem>
 * such a cool bot, but it's hard to find this room when I open its graph https://voyager.t2bot.io/#/

[07:37:33.0743] <nox>
> <@aramine:mozilla.org> The plan was to use them initially, IIRC, but then we wanted to make changes to them and it was too cumbersome to go through m-c every time I think.

Full disclosure: I now can't even file an issue on the Servo repo about the locale-dependent test because Github is delivering 500 errors to anyone posting stuff.

[10:31:17.0216] <iain>
Anybody around who wants to be a rubber duck while I work through a Unicode issue?

[10:33:11.0844] <iain>
I am looking at the documentation for UnicodeSet::closeOver: https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/classicu_1_1UnicodeSet.html#a8b1d7ab88eb1694fdae2d08d3ce76fd2

[10:34:08.0669] <iain>
Specifically, the example: [aq\u00DF{Bc}{bC}{Fi}] => [aAqQ\u00DF\uFB01{ss}{bc}{fi}]

[10:35:00.0979] <iain>
I'm trying to debug an issue involving the german √ü

[10:35:10.0397] <iain>
Which is \u00DF in lower-case

[10:35:18.0491] <iain>
And \u1e9e in upper-case

[10:36:04.0502] <jorendorff>
well, it depends... there are two uppercase functions specified by unicode, i think

[10:36:17.0566] <iain>
Simple and full?

[10:36:17.0885] <jorendorff>
in the normal one √ü upcases to "SS"

[10:36:40.0466] <jorendorff>
(two ascii uppercase S characters)

[10:36:45.0112] <iain>
In both of them, √ü upcases to "SS"

[10:36:51.0327] <jorendorff>
ok

[10:37:17.0189] <iain>
The question is what ·∫û case-folds to

[10:37:36.0594] <iain>
(In case it is unclear, ·∫û is \u1e9e)

[10:38:10.0357] <iain>
Specifically: given the description of the algorithm, it seems like \u1e9e should be included in the output

[10:38:52.0714] <iain>
Because foldcase(0xdf) is "ss", and so is foldcase(0x1e9e)

[10:40:17.0200] <jorendorff>
it seems like step 2 would remove both of those

[10:41:14.0154] <iain>
That's only for strings, not characters, I think

[10:42:55.0996] <iain>
Conveniently, this also appears to be what happens if you actually call this function: you get back "√ü·∫û{ss}"

[10:43:09.0856] <iain>
Is this just a documentation error?

[10:43:33.0906] <iain>
 * Conveniently, this also appears to be what happens if you actually call closeOver on "√ü": you get back "√ü·∫û{ss}"

[10:44:30.0143] <jorendorff>
Yeah, that seems like a documentation error

[10:45:15.0198] <jorendorff>
Sorry, I threw myself off by disbelieving that this API could make that distinction between characters and strings, but it sure does, thoroughly

[10:46:58.0861] <iain>
Okay, cool

[10:47:06.0110] <iain>
I am now confident that there is a bug in irregexp

[10:47:25.0044] <iain>
Which shows up both in my new version of the regexp engine, and also in my local build of d8

[10:47:28.0283] <iain>
But does not show up in Chrome

[10:47:34.0266] <iain>
Which is incredibly confusing

[10:54:15.0161] <iain>
> <@iain:mozilla.org> In both of them, √ü upcases to "SS"

PS: this is a lie. In simple folding / when dealing strictly with characters, √ü upcases to itself. It only upcases to "SS" in contexts where the length of the output is allowed to be different.

[10:54:50.0628] <jorendorff>
i love casefolding

[10:55:07.0035] <jorendorff>
is an example of a lie

[10:55:15.0579] <Waldo>
Question of the day:  Who has two thumbs and no permanent office badge because he somehow lost it somewhere walking between the office bike room and home just over a mile away?  I will allow the channel to ponder this difficult question in the hope of divining an answer...

[10:58:04.0410] <Waldo>
> <@aramine:mozilla.org> anba, Waldo: Is the system locale supposed to change what String.localeCompare does? If not, do you want me to file a bug?

The system locale I believe depends on `$LANG`, so yes, if different environment variables are set on tinderbox you might get different behavior.

[11:32:46.0382] <nox>
Waldo: But why is that the desired behaviour? Can't that somehow cause issues in the wild?

[11:33:42.0694] <Waldo>
nox: Well, it's sort of the way you set language, so if someone's on a German system, that's how they indicate it to applications and all.  What other mechanism would be used to indicate to applications the language to use?

[11:34:43.0890] <nox>
Waldo: That does make sense, it just somehow weirded me out that something outside of the browser could influence what the JS does.

[11:36:10.0593] <Waldo>
nox: Looking somewhat more closely, callers of `JS_SetDefaultLocale` are what you'd want to look at to best understand this.  By default I do think we look at `$LANG`, tho.

[11:37:55.0552] <Waldo>
There's a lot of complexity to all this, and I think different platforms may make determinations here in different ways -- semi-obviously `$LANG` is probably not the right thing to use on Windows, say.

[11:38:31.0044] <nox>
Thanks for the details.

[13:10:57.0189] <zbraniecki>
not exactly btw. `String.localeCompare` will use the AppLocale

[13:12:16.0363] <Waldo>
Yeah, I subtly retracted what I originally said when I said "By default I do think we look at `$LANG`".  üòá

[13:12:34.0968] <Waldo>
Admit nothing, deny everything, make counteraccusations.

[13:13:08.0034] <zbraniecki>
I believe this - https://searchfox.org/mozilla-central/source/intl/locale/mozILocaleService.idl#85 is what you'll get

[13:13:20.0689] <zbraniecki>
but there are some additional fingerprinting overrides that if set will give you english?

[13:13:48.0217] <zbraniecki>
Waldo: I see you're prepping for a career in politics?

[13:14:36.0127] <Waldo>
zbraniecki: I am either too smart, or not dumb enough, to pursue that.  üôÇ

[13:15:17.0210] <Waldo>
Yeah, the fingerprint override seemed too weedsy to call out specifically.

[15:37:00.0225] <mgaudet>
I wish there was a two-dimensional bisect in mercurial for when you somehow break something during a rebase; bisect first dimension to find the offending changeset, then bisect the obslog to find the offending rewrite. 


2020-02-20
[16:09:05.0803] <evilpie>
The devtools must be using a very interesting definition of side effect free for the instant evaluation feature

[17:22:00.0430] <loganfsmyth>
> <@evilpie:mozilla.org> The devtools must be using a very interesting definition of side effect free for the instant evaluation feature

what makes you say that?

[01:20:45.0438] <karlt>
padenot: i guess it may be possible to create an Object and define a C++ property getter and freeze the Object.  The C++ property getter can then return different typed arrays as desired.  jorendorff gave a JS example of this, but i wonder whether he is instead suggesting using a WebIDL interface (implemented in C++) to return the appropriate typed array

[01:21:25.0511] <karlt>
A WebIDL interface with a named property getter would support the parameters["name"] JS syntax

[01:22:26.0202] <karlt>
A WebIDL interface with an indexed property getter would support the inputs[1] syntax

[01:23:55.0089] <karlt>
The risk with that approach, though, comes from the fact that Chrome has already shipped something, and so we may want these WebIDL interfaces to behave as much like Object and Array as possible,

[01:24:24.0103] <karlt>
in which case spec'ing all that in WebIDL seems to be respec'ing the wheel

[01:34:14.0776] <decoder>
nbp: kmag: I am adding a (pretty generic) suppression for 1615265 now. we need to ensure though that this is fixed :/ any idea about how we should proceed so this bug gets addressed eventually?

[01:39:20.0503] <karlt>
padenot: if maximizing backward compat is the goal, then i would avoid the freezing, and just error out if content has messed with things enough that the implementation can't modify the objects appropriately.  If controlling changes to the parameters is the goal, then WebIDL interfaces look promising.

[01:40:52.0464] <padenot>
I agree. I _think_ there is some room for pushing for the best technical solution and have them move towards it, but I'll know more tonight after the call

[02:03:44.0672] <nbp>
decoder: I think the polite way is to wait for an answer, then if it does not come, add a need-info to the corresponding managers.

[02:36:45.0346] <nox>
What should I do if I want to enable the debug assertions in SM but still link to the non-debug CRT on Windows?

[02:55:21.0876] <nox>
Oh, MOZ_NO_DEBUG_RTL

[03:04:05.0240] <decoder>
nbp: sgtm. I just want to avoid that we hide a whole group of bugs

[05:53:20.0727] <jandem>
WarpBuilder compiled its first script: https://paste.mozilla.org/NzeEKTAR#L1,3,6

[05:53:51.0519] <jandem>
it supports just 2 opcodes and needs a lot of cleanup, but it's a start

[05:54:26.0175] <jandem>
(the function is just return 0, note that there are no argument checks which is nice)

[05:54:56.0562] <evilpie>
loganfsmyth: I just saw this: https://hg.mozilla.org/integration/autoland/rev/1ed519a227e265d289d40996b972a8de3342b313#l1.17. I hope we don't invoke getters for e.g. Error.prototype.toString

[05:55:13.0989] <jandem>
 * (the function is just return 0, note that there are no argument checks (for `this`) which is nice)

[05:56:00.0855] <loganfsmyth>
> <@evilpie:mozilla.org> loganfsmyth: I just saw this: https://hg.mozilla.org/integration/autoland/rev/1ed519a227e265d289d40996b972a8de3342b313#l1.17. I hope we don't invoke getters for e.g. Error.prototype.toString

The concern being the perf impact of generating the string?

[05:56:44.0756] <evilpie>
No, just saying this is not what I would consider side-effect free

[05:57:42.0935] <loganfsmyth>
sorry I'm not following something. What's the side-effect that you're concerned about?

[06:02:58.0153] <jandem>
 * WarpBuilder compiled its first script: https://paste.mozilla.org/NzeEKTAR#L2,3,4,11,15,16

[06:28:56.0151] <iain>
In general, invoking a getter can run arbitrary code, with arbitrary side-effects

[06:29:21.0590] <iain>
(... is what I think evilpie is getting at)

[06:29:33.0518] <iain>
loganfsmyth: ^

[08:07:13.0487] <bzbarsky>
locangsmyth and I had a long conversation along those lines, fwiw

[08:08:47.0121] <bzbarsky>
https://phabricator.services.mozilla.com/D61965#inline-378464 and probably worth reading that whole comment thread

[08:09:34.0223] <bzbarsky>
iain: evilpie ^

[08:11:17.0461] <nox>
[thumbsupping intensifies]

[08:27:31.0376] <nbp>
jandem: didn't you open a bug similar to Bug 1616543 recently? (I can't find it anymore)

[08:27:32.0642] <Botzilla demo>
https://bugzil.la/1616543 ‚Äî NEW (nobody) ‚Äî Rust getters and setters for private values are broken

[08:30:54.0154] <jandem>
I didn't file a bug, but I talked about it on here with benjamin/nox

[08:31:17.0373] <nox>
I opened one.

[08:31:22.0463] <nbp>
ok ... for some reason I has though I saw it in my bugmail. nvm

[08:31:46.0238] <nox>
jandem: https://bugzilla.mozilla.org/show_bug.cgi?id=1616543

[08:31:53.0498] <nox>
Err, nbp*

[08:32:11.0341] <jonco>
sdetar: just finding a room

[08:32:18.0968] <nox>
Oh, that's the same bug I'm silly.

[08:35:51.0753] <sfink>
I keep getting into a state where the JS shell seg faults on startup, seemingly because it's doing things that rely on initialization that hasn't happened. I think a clobber build fixes it. Has anyone else seen this? Seems like a build problem.

[08:37:26.0184] <sfink>
er, wait, no. It's clobbering already-initialized state.

[08:48:21.0513] <bzbarsky>
I don't understand the comment at https://searchfox.org/mozilla-central/rev/5a10be606f2d76ef22f1f44565749490de991d35/js/public/Class.h#227-228

[08:48:26.0348] <bzbarsky>
What does "strict is false" mean there?

[08:49:27.0841] <Ms2ger [~half-time dedication]>
use strict?

[08:50:28.0964] <bzbarsky>
That's the theory, but the actual code below the comment always passes "true" for strict

[08:50:51.0541] <Ms2ger [~half-time dedication]>
Doh

[08:51:18.0494] <bzbarsky>
As in, this comment seems to have nothing to do with the code that actually follows it

[08:52:33.0699] <bzbarsky>
If I am in a setter impl and I just have the cx, can I tell whether I am in "strict mode"?

[08:52:43.0005] <bzbarsky>
/me doesn't see an obvious way

[08:52:56.0070] <Ms2ger [~half-time dedication]>
And you're the first to notice in the last 5 years, apparently https://hg.mozilla.org/mozilla-central/rev/3f6b1ead121aaf4f0154457392b0af3e10c4bda2

[08:55:18.0511] <Ms2ger [~half-time dedication]>
I think the whole idea is that you don't check whether you're in "strict more" in the implementation at all; you just return a value that's "throw if strict / fail silently if loose"

[08:56:30.0552] <bzbarsky>
yes, I know the idea of ObjectOpResult

[08:56:46.0371] <bzbarsky>
My issue is with that one comment and method.  ;)

[08:57:42.0030] <Ms2ger [~half-time dedication]>
/me shuts up, then :)

[09:06:45.0563] <bzbarsky>
No need to shut up.

[09:07:00.0080] <bzbarsky>
Does that bogus comment really date all the way back to the original landing?

[09:08:15.0874] <Ms2ger [~half-time dedication]>
Yes

[09:17:58.0965] <mgaudet>
sfink: Erm. If one were to return a reference to a member of a GC allocated object that can be moved, and that reference lives past a GC, would the hazard build complain?

[09:43:42.0965] <sfink>
No, unfortunately. It can't track internal pointers.

[09:44:35.0262] <sfink>
for strings, where it's common to want to toss around pointers to the char data, we have funky wrapper types and things to make it safe

[09:45:59.0540] <sfink>
mgaudet: if you're doing this, we might want to consider something similar. (eg creating a type to hold the internal reference, telling the analysis to treat it as if it were a GC type itself, etc.)

[09:46:42.0618] <mgaudet>
sfink: I mean, I did it by accident, and it didn't even occur to me that it was a problem, until I noticed a failing test case locally.

[09:46:50.0906] <sfink>
ah, ok

[09:46:59.0285] <mgaudet>
(After landing of course) 

[09:47:40.0728] <mgaudet>
Which is probably a sign that I trust the Hazard analysis perhaps a touch more than I ought to :P

[09:48:22.0663] <djvj>
mgaudet: what's the thing with the patch changing accessors back to returning values?

[09:48:29.0421] <mgaudet>
is there a bug on record for this issue? Or should we open one? Seems like this could be worth warning in the clang-static-analyzers potentially; it needn't have the full global inference just a local inference 

[09:49:06.0942] <sfink>
hm, I hadn't considered doing it that way. That's a good idea.

[09:49:29.0457] <mgaudet>
djvj: https://bugzilla.mozilla.org/show_bug.cgi?id=1616909 

[09:49:52.0685] <mgaudet>
I'll open a bug and CC you 

[09:50:59.0421] <djvj>
mgaudet: I'll r+ now.  

[09:51:01.0786] <djvj>
hazards indeed

[09:51:51.0119] <sfink>
thanks!

[09:53:52.0038] <sfink>
bah. I was trying to be a good boy. I have it narrowed down to where gdb is seeing different struct member orderings depending on which object file it's in. But both have timestamps greater than the header file where that ordering changed.

[09:54:21.0708] <sfink>
that's why rerunning `make` doesn't fix it, but I don't understand how I got here

[09:54:43.0722] <sfink>
(both obj files have a correct dependency on the header)

[09:55:09.0731] <sfink>
I think I'll have to throw in the towel

[09:59:46.0939] <sfink>
mgaudet: one attempt, now removed, at coming up with a general mechanism for this was bug 780309.

[09:59:48.0203] <Botzilla demo>
https://bugzil.la/780309 ‚Äî RESOLVED (sfink) ‚Äî GC: Make analysis aware of internal thing pointers

[10:00:16.0999] <sfink>
the title of the bug makes it sound more promising than it is

[10:02:50.0889] <djvj>
sfink: this is a property of most things in life

[10:03:26.0459] <sfink>
fair point

[10:03:44.0219] <sfink>
maybe I should start titling bugs with questions

[10:04:10.0787] <sfink>
"Can we make an InternalHandle wrapper to solve the internal pointer problem for once and for all?"

[10:04:23.0621] <sfink>
then you get to use that universal law of headlines, whatever it's called

[10:04:56.0336] <iain>
https://en.wikipedia.org/wiki/Betteridge%27s_law_of_headlines

[10:05:07.0151] <sfink>
that's the one

[10:07:16.0606] <kmag>
> <@decoder:mozilla.org> nbp: kmag: I am adding a (pretty generic) suppression for 1615265 now. we need to ensure though that this is fixed :/ any idea about how we should proceed so this bug gets addressed eventually?

decoder:  I'll look at it. It's not clear to me from the log exactly what the data race is, though...

[10:08:12.0882] <decoder>
kmag: the log is not clear because one of the stacks is missing (suppressed, probably by the suppression in the other bug). but I summarized it here (one sec)

[10:09:24.0641] <decoder>
Aaaand my computer froze. Gimme a sec

[10:11:09.0989] <kmag>
Oh, I guess comment 11 in that bug?

[10:11:14.0006] <kmag>
/me looks

[10:12:41.0287] <decoder>
Yes, that's the comment I meant.

[10:22:54.0983] <kmag>
decoder: So... I guess it may just be possible for them to race if something on the main thread triggers finishing the decode operation and starting the next batch, and then the next batch finishes at some specific time... But I can't think of a way for it to race in a way that matters

[10:24:12.0694] <kmag>
That flag is only an optimization to prevent us from triggering extra runnables that aren't really necessary. If we somehow do, it's no big deal, because if there's no work for them to do, they just return. The only problem would be if it prevented us from triggering the runnable. And in that case, it would just lead to a slight performance hit when we wound up starting the next batch a bit later.

[10:33:19.0154] <decoder>
We need to fix it either way

[10:34:54.0153] <evilpie>
loganfsmyth: iain bzbarsky: Interesting. I guess we will stop certain "bad" side-effects from running, with that debugger hook? I was mostly just lamenting that the definition of side-effect free seemed unusual to me. Sorry for the annoyance

[10:35:41.0539] <decoder>
kmag: if you really dont care about the race, we could make `mFinishDecodeRunnablePending` an atomic

[10:36:34.0334] <kmag>
decoder: Would that make TSan happy?

[10:36:54.0857] <decoder>
Yes. and this is not just about making TSan happy. The current behavior is undefined behavior

[10:37:02.0861] <decoder>
with an atomic, it is not

[10:37:17.0967] <kmag>
Sure, but I also want to make TSan happy :P

[10:37:32.0380] <decoder>
hehe :D yes, TSan will be happy with an atomic

[10:37:40.0654] <decoder>
can even be relaxed afaik

[10:37:44.0107] <kmag>
I don't care so much if it's undefined behavior, because all of the possible ways it can happen are acceptable.

[10:38:06.0918] <decoder>
thats very easy said. you would be amazed what compilers can do that you didnt anticipate ;)

[10:38:22.0140] <decoder>
in any case, we are trying to get rid of all races that are undefined behavior

[10:39:15.0776] <kmag>
No I wouldn't. I've seen it. But there are enough guarantees around the things that matter in this case that I don't think the exact guarantees on that one piece of data matter especially much.

[10:39:27.0453] <kmag>
But obviously making it an atomic is a good idea regardless.

[10:39:49.0263] <bzbarsky>
evilpie: Oh, I agree the definition of "side-effect free" here is ... complicated

[10:40:12.0914] <bzbarsky>
It basically refers to explicit side-effects in the C++, with any side-effects via script handled by the debugger hooks

[10:41:47.0463] <decoder>
kmag: great \o/ do you think that will also resolve the linked bug? the mutex/deadlock report

[10:41:55.0251] <decoder>
I think nbp said that one is related/the same most likely

[10:42:06.0303] <kmag>
/me hasn't looked at that yet; looks

[10:42:38.0560] <evilpie>
bzbarsky: so it's mostly concerned with DOM changes?

[10:43:41.0037] <bzbarsky>
well, or SpiderMonkey ones

[10:43:51.0383] <bzbarsky>
I mean, Array.prototype.push is not side-effect-free in that sense

[10:44:15.0017] <bzbarsky>
(It's possible that the self-hosting bits mean that it gets caught anyway)

[10:56:10.0827] <kmag>
decoder: No, I don't think they're related. But I also don't think we should be able to deadlock in that case. We don't trigger parsing a new batch of scripts until we've finished decoding the last batch on the main thread, so it shouldn't be possible for us to be in OffThreadDecodeCallback with the helper thread mutex held and waiting to acquire mMonitor when we call FinishMultiOffThreadScriptsDecoder and try to acquire the helper thread mutex in MaybeFinishOffThreadDecode

[10:57:07.0992] <kmag>
Hm. Maybe. There is that call to mal.NotifyAll... I need to think about this some more.

[10:59:11.0105] <decoder>
TSan normally does not report false positives when it comes to these reports.

[10:59:20.0498] <decoder>
sure :) it is good to know that they are not related though

[11:00:22.0364] <kmag>
Well, it's not exactly a false positive. It's just that ordering guarantees mean that even though we sometimes acquire those mutexes in different orders, it shouldn't be able to cause deadlocks

[11:01:17.0396] <kmag>
But the thing I'm worried about now is that if we have the helper threads mutex held when we call https://searchfox.org/mozilla-central/rev/5a10be606f2d76ef22f1f44565749490de991d35/js/xpconnect/loader/ScriptPreloader.cpp#931 and then we unblock the main thread and get to https://searchfox.org/mozilla-central/rev/5a10be606f2d76ef22f1f44565749490de991d35/js/xpconnect/loader/ScriptPreloader.cpp#989 which tries to acquire that mutex...

[11:01:32.0396] <kmag>
I think *that* would deadlock. But I also think it's a separate issue.

[11:02:14.0482] <kmag>
But maybe it's not a totally separate issue.

[12:27:48.0948] <djvj>
mgaudet:  I realize I've really been confusing the role of EmitterScope with things like LexicalScope and friends

[12:29:14.0488] <mgaudet>
Ah, that explains some of it I think

[12:31:41.0708] <mgaudet>
This is why I think you can get away with having a local mapping and table, just because that only applies to the scope of a compilation request

[12:32:44.0221] <mgaudet>
Though you'll still need to deal with runtime scopes for free variable lookups

[12:33:51.0829] <djvj>
the discussion we've been having previously really seemed to explicitly suggest having a interned table per source.

[12:34:04.0090] <djvj>
dealing with runtime scopes is not that troublesome (crosses fingers), I don't think

[12:34:51.0027] <djvj>
snapshotting the scope chain should be relatively straightforward if we want to pass it to the frontend eventually

[12:34:51.0371] <mgaudet>
I guess I see the idea of potentially extending the lifetime of the table to that of the source as a potential optimization, 

[12:35:02.0940] <djvj>
but for now we can just do the comparisons in-line, and I have code for that already

[12:35:14.0728] <mgaudet>
but I think that I'd argue that the basic form of this be request oriented, and we can investigate if we need to do lifetime extension 

[12:35:27.0733] <mgaudet>
 * but I think that I'd argue that the basic form of this should be request oriented, and we can investigate if we need to do lifetime extension 

[12:35:44.0680] <djvj>
I'm all for the per-compile-request lifetime anyway, I just seem to have gotten convinced a while back that that was not the way to go?

[12:36:05.0179] <djvj>
it's fine, this makes sense to me.

[12:36:15.0759] <mgaudet>
Maybe this is an argument that we should have a requirements doc where we try to document our reasoning about this stuff 

[12:36:42.0824] <mgaudet>
because I can imagine reasons why we'd conclude that we need a longer lifetime, but I can't think of one right now, hence my lean to pre-request

[12:36:49.0041] <mgaudet>
 * because I can imagine reasons why we'd conclude that we need a longer lifetime, but I can't think of one right now, hence my lean to per-request

[12:36:51.0264] <djvj>
It's kind of gone back and forth a few times in discussions with differnet subsets of people :)

[12:37:07.0667] <djvj>
You've had your head buried in this the longest though

[12:39:11.0812] <mgaudet>
It's true, but recall also that I have a very request oriented viewpoint of this whole project because largely that's how things work today. I'm essentially arguing that we ought to not rock the boat: But we may find that there are qualitative and quantitative reasons to change the design. 

[12:40:39.0670] <mgaudet>
It does seem to me though that a request oriented design for ParseAtoms can be fairly nicely lifetime extended (I think), and has nice properties if you think of it as a temporary cache that if you lifetime extend you can always drop and re-create for a new set of source inputs

[14:52:20.0790] <bzbarsky>
: error: invalid operands to binary expression ('JS::Handle<jsid>' (aka 'Handle<JS::PropertyKey>') and 'jsid' (aka 'JS::PropertyKey'))
 0:09.59   if (aId == GetJSIDByIndex(aCx, XPCJSContext::IDX_PRINT)) {


[14:52:31.0525] <bzbarsky>
Which header am I forgetting to include?  ;)

[14:53:40.0741] <bzbarsky>
/me bets RootingAPI.h....

[14:53:53.0535] <bzbarsky>
no, that's not it....

[14:55:04.0722] <bzbarsky>
Help, any ideas?

[14:55:14.0812] <bzbarsky>
/me would think a Handle<jsid> could compare to jsid...

[14:55:41.0351] <bzbarsky>
/me throws in a .get()

[14:56:27.0474] <bzbarsky>
But this is so weird...


2020-02-21
[20:01:06.0691] <Waldo>
bzbarsky: Didn't we end up debugging that earlier?  If the `operator==` definition isn't in the most-nested namespace for the, um, more ADL'd argument, the `operator==` you want to invoke (in an enclosing namespace) can end up being hidden by any `operator==` in a namespace more nested than that enclosing namespace.

[20:01:22.0965] <Waldo>
(Also, um, we didn't actually get around to fixing it...)

[20:05:16.0526] <bzbarsky>
Oh, that could well be it!

[20:05:32.0561] <bzbarsky>
And yes, I knew I had seen it before, but could not recall what the fix was

[20:06:18.0557] <bzbarsky>
I guess in nsGlobalWindowOuter there's a bunch of "using namespace" but it's not actually inside `namespace stuff {` and in the file where I added this it is...

[20:06:20.0602] <bzbarsky>
Alright, then

[20:07:38.0831] <Waldo>
I'm not even sure `using namespace` does you any good here -- this is argument-dependent lookup, so it is probably all driven by the particular namespace locations of the arguments to the operator.

[20:08:45.0228] <bzbarsky>
The types of the arguments are the same in both cases...

[20:09:32.0373] <Waldo>
Don't think that makes a difference, it's that the more-nested `operator==` shadows/hides the less-nested one.

[20:12:30.0975] <bzbarsky>
Then I dunno why the one file has this proble and the other does not..

[20:12:47.0066] <bzbarsky>
/me writes a testcase

[20:18:35.0547] <bzbarsky>
https://paste.mozilla.org/3emuMLSi

[20:18:57.0833] <bzbarsky>
So yeah, it's being inside a namespace foo {} block that did me in here

[20:41:04.0645] <Waldo>
Hmm.  Maybe the lookup starts first in the namespace of the use, then it looks in the namespaces of the arguments?  I really ought learn the precise ordering of this stuff, it would probably be valuable to know...

[03:14:02.0471] <nox>
Do I need to be in the realm of the object I pass to GetPropertyKeys when I call that function?

[03:19:07.0242] <jandem>
typically any realm in the compartment is fine

[03:19:43.0342] <jandem>
I'm not sure if GetPropertyKeys strictly _needs_ to be called in the object's compartment, but there's a lot of code there so probably

[03:33:27.0110] <nox>
Aren't realms the new name of compartments?

[03:40:07.0178] <Ms2ger [~half-time dedication]>
First they were, then they weren't, apparently

[03:49:25.0036] <jandem>
a compartment can contain multiple realms since bug 1357862

[03:49:26.0392] <Botzilla demo>
https://bugzil.la/1357862 ‚Äî RESOLVED (jandem) ‚Äî [meta] Support multiple globals per compartment (same-compartment realms)

[03:49:43.0990] <jandem>
a realm is basically a global 

[03:56:57.0297] <nox>
Oh

[05:33:26.0163] <smaug>
jonco: do you think you could give some hints which prefs might affect and in which way to the GC behavior https://bugzilla.mozilla.org/show_bug.cgi?id=1608289#c11  

[05:33:56.0943] <smaug>
the pref names may not be super clear to someone not familiar with GC internals

[05:34:34.0516] <smaug>
(I'm hoping to find someone who could test that stuff a bit üôÇ )

[05:38:55.0002] <jonco>
smaug: sure, I'll put something in the bug

[05:39:04.0715] <smaug>
thanks!

[06:44:30.0377] <djvj>
jorendorff: hey, random rust lifetime/typing question for you

[06:46:31.0547] <djvj>
https://pastebin.com/gBXmPmrW

[06:47:09.0724] <djvj>
so, that code doesn't pass lifetime checks, but if you comment out the 'Cell<&'a ()>' field in struct Foo, it does.

[06:47:57.0362] <djvj>
jorendorff: how does the type-checker know that Cell introduces contravariant lifetime behaviour and shouldn't pass?

[06:52:25.0106] <padenot>
all, is it possible tu run the rooting hazard job locally ?

[06:54:37.0803] <padenot>
ah apparently not on debian-based distros

[06:54:56.0465] <djvj>
that seems like an odd restriction

[06:54:58.0067] <jorendorff>
djvj: it works exactly how you expect, Rust knows that covariance/contravariance/invariance of lifetimes is a thing it has to infer, so it infers it

[06:55:00.0352] <jorendorff>
using rules

[06:55:21.0993] <padenot>
knowing a bit about gcc packaging on debian and ubuntu, it's not particularly surprising

[06:59:08.0469] <froydnj>
padenot: it should work, since our infra uses debian to run the job in the first place...

[07:01:29.0343] <padenot>
/me tries

[07:03:32.0548] <jorendorff>
djvj: and the rules are... pretty much what you'd expect? see table in https://doc.rust-lang.org/nomicon/subtyping.html#variance

[07:04:09.0223] <jorendorff>
djvj: it's incredibly subtle and at the same time very boring and predictable, i dunno

[07:07:02.0261] <djvj>
jorendorff: so Cell and friends are just special cased because we know they're the only sources of internal mutability?

[07:08:30.0757] <jorendorff>
yeah, Cell is following a rule based on the fact that there is an UnsafeCell inside; UnsafeCell is the root special case

[07:09:08.0044] <djvj>
cool, that makes sense.

[07:09:37.0203] <jorendorff>
to me it feels like "it's assignable" is enough to make it clear it's got to be invariant

[07:10:28.0281] <jorendorff>
a kind of meta-rule covering both `UnsafeCell<T>` and `&mut T` (and covariance ideas in lots of languages)

[07:10:40.0588] <jorendorff>
so even UnsafeCell does not feel special to me

[07:10:47.0312] <jorendorff>
that's what i mean when i say it's boring

[07:55:55.0316] <sfink>
padenot: can you give it a try? I just landed a suite of  `mach hazards` commands yesterday. Run `mach hazards bootstrap` then `mach hazards build-shell` then `mach hazards gather` then `mach hazards analyze`. And let me know if it works on debian.

[07:57:03.0284] <padenot>
I'm working on gecko, do I want build-shell still ?

[07:57:09.0695] <padenot>
happy to experiment, in any case

[07:57:10.0657] <sfink>
yes

[07:57:19.0149] <padenot>
superb, trying this in a minute

[07:57:22.0822] <sfink>
this is building the shell that runs the JS code to perform the analysis

[07:57:45.0155] <sfink>
it would be nice to know if I fixed more things that I broke (working through the regressions now)

[07:58:01.0038] <padenot>
/me pulls the latest changes

[07:59:41.0492] <sfink>
ugh. Automation has python 3.5.3??!

[08:03:55.0676] <padenot>
sfink: https://paste.mozilla.org/Y0WAmSAh

[08:03:59.0450] <padenot>
first issue

[08:04:48.0335] <sfink>
Ouch. I guess I had that lying around from my attempts. Maybe make that directory, I'll do a fix

[08:04:50.0889] <padenot>
just missing an mkdir it seems

[08:05:40.0204] <padenot>
manually mkdir -p of the right dir made it succeed

[08:06:12.0371] <sfink>
yeah, I had to completely change how I did that part at that last minute due to build peer review, and lost that part

[08:07:06.0889] <padenot>
second command: https://paste.mozilla.org/N6xp5bSZ

[08:08:06.0084] <sfink>
whoa

[08:08:15.0531] <padenot>
missing a bunch of b to annotate the litterals ?

[08:09:12.0516] <sfink>
it's weird that I wouldn't get that one

[08:10:45.0110] <padenot>
haha no I know what it is

[08:10:49.0415] <padenot>
was running it with python2

[08:11:18.0707] <sfink>
? mach should be picking its own python anyway

[08:11:33.0434] <padenot>
yeah

[08:11:45.0514] <padenot>
but I has an old `mach` file in ~/bin/ where i put some stuff

[08:11:51.0011] <padenot>
just to avoid typing ./ in ./mach

[08:11:58.0456] <padenot>
that that was before the python3 switch

[08:12:08.0058] <padenot>
 * but I had an old `mach` file in ~/bin/ where i put some stuff

[08:12:14.0878] <padenot>
now it's complaining about an nspr version

[08:12:23.0089] <padenot>
` 0:12.28 configure: error: you do not have NSPR installed or your version is older than 4.9.2.`

[08:14:19.0792] <sfink>
oh, right, I had the same thing with my own mach command

[08:14:45.0153] <sfink>
alright, that one's because I have it save a small amount of build time by using --with-system-nspr, I think

[08:14:50.0703] <sfink>
I guess that's not a good idea after all

[08:15:14.0345] <padenot>
`libnspr4-dev` works here on ubuntu

[08:15:19.0187] <padenot>
installing it, I mean

[08:15:24.0920] <sfink>
ah, ok

[08:15:36.0017] <sfink>
you could also remove the --with-system-nspr line from js/src/devtools/rootAnalysis/mozconfig.haz_shell

[08:15:55.0915] <padenot>
maybe it's best in the long run, I don't know

[08:16:04.0314] <padenot>
but in any case it works with it installed

[08:26:06.0111] <padenot>
sfink: second step works, I now have: https://paste.mozilla.org/uW63XH2L

[08:26:39.0784] <sfink>
what version of python3 do you have?

[08:26:53.0885] <padenot>
3.7.5

[08:27:05.0229] <sfink>
oh

[08:27:06.0933] <sfink>
er

[08:27:49.0629] <sfink>
that particular cosmetic change is causing me an inordinate amount of trouble

[08:27:53.0181] <padenot>
this is the standard python on the latest ubuntu

[08:28:42.0719] <sfink>
I was just blaming that problem on the build boxes having 3.5..3

[08:28:50.0439] <sfink>
 * I was just blaming that problem on the build boxes having 3.5.3

[08:29:13.0524] <padenot>
anything I can try for you ?

[08:29:28.0544] <sfink>
as a quick hack, replace shlex.quote(s) with s in /home/padenot/src/trees/mozilla-unified/js/src/devtools/rootAnalysis/analyze.py

[08:29:35.0794] <sfink>
I need to figure out what to do for real

[08:29:55.0144] <sfink>
(this is only used for a printout that you can cut & paste into the shell if you wanted to run it manually)

[08:30:06.0314] <padenot>
ok this make it go further

[08:30:36.0286] <sfink>
I guess I should have tried to switch over the hazard jobs to use this new stuff, I would have found all of this that way

[08:31:31.0092] <padenot>
` 0:02.03 ERROR: Cannot find `/home/padenot/.mozbuild/sixgill/usr/libexec/sixgill/scripts/wrap_gcc/basecc` from the given compiler wrapper `/home/padenot/.mozbuild/sixgill/usr/libexec/sixgill/scripts/wrap_gcc/basecc`

[08:31:37.0050] <sfink>
oops, sorry, linie 59

[08:31:54.0267] <sfink>
wat? That's the wrong path

[08:32:02.0934] <sfink>
 * oops, sorry, line 59

[08:32:08.0721] <padenot>
weird I don't have ~/.mozbuild/sixgill

[08:32:17.0042] <sfink>
yeah, it's under hazard-tools/

[08:33:46.0365] <sfink>
ooh, I had a symlink there. Deleting it reproduces your problem.

[08:33:55.0434] <sfink>
ugh, I really need to try this all out on a fresh VM.

[08:34:24.0749] <padenot>
ok well for now I'm just going to do your symlink

[08:34:42.0014] <sfink>
/me hides head in embarrassment

[08:36:31.0464] <padenot>
well I peeked at the older way of doing this, and your work seem well worth a few minutes of my time to make this work reliably

[08:36:45.0151] <sfink>
what's the contents of $srcdir/analysis/defaults.py?

[08:37:18.0884] <padenot>
```js = "/home/padenot/src/trees/mozilla-unified/obj-haz-shell/dist/bin/js"
analysis_scriptdir = "/home/padenot/src/trees/mozilla-unified/js/src/devtools/rootAnalysis"
objdir = "/home/padenot/src/trees/mozilla-unified/obj-analyzed"
source = "/home/padenot/src/trees/mozilla-unified"
sixgill = "/home/padenot/.mozbuild/hazard-tools/sixgill/usr/libexec/sixgill"
sixgill_bin = "/home/padenot/.mozbuild/hazard-tools/sixgill/usr/bin"
```

[08:37:28.0793] <sfink>
ok, thanks

[08:38:12.0106] <sfink>
oh! found it

[08:40:49.0326] <padenot>
(same for gcc, had to symlink)

[08:41:27.0708] <padenot>
and then it passed configure

[08:41:53.0371] <sfink>
that's another one, then. Whee!

[08:49:23.0825] <sfink>
fixed

[08:58:50.0563] <sfink>
ugh, and now I get to discover that docker is broken by default on fedora 31, so I either need to reboot with different kernel options, or switch to podman. Whatever that is.

[09:00:56.0431] <padenot>
sfink: is this build supposed to take longer than a regular build ?

[09:01:21.0980] <padenot>
it's twice longer than a regular build for now, but it does seem to progress well and it seems to saturate my cores correctly

[09:02:06.0528] <sfink>
hm, that's interesting. I would expect it to take about the same time as a regular build. Though it is transferring around and writing quite a bit more data, so maybe not?

[09:02:21.0852] <sfink>
I just thought the automation builds took a similar amount of time

[09:02:52.0411] <padenot>
my builds are about 10min usually, I'm 21 minutes in

[09:05:48.0897] <sfink>
the regular build job is 39min, the hazard build is 89min. 36 minutes was the hazard processing.

[09:06:10.0971] <sfink>
so I guess that's roughly 39min vs 53min.

[09:06:15.0014] <padenot>
ok so if it's more or less linear slowdown it should be done soon and I'll be able to test the last step

[09:06:15.0319] <sfink>
not double, but more

[09:07:18.0783] <sfink>
I could probably improve that some, by not saving off all of the preprocessed source and things. I never look at it anyway. Or if I do, I regenerate it.

[09:07:52.0905] <padenot>
ok so that third step completed in 26:41, so around 2x give or take

[09:08:21.0208] <sfink>
ok, good to know

[09:08:28.0727] <sfink>
now `mach hazards analyze`

[09:08:44.0447] <padenot>
yep that's single threaded it seems, it's running now

[09:09:14.0645] <sfink>
some parts are single threaded, some should saturate

[09:09:23.0914] <padenot>
cool

[09:09:44.0993] <padenot>
this is a i9, so even the single threaded bits are somewhat fast since it goes to 4ghz

[09:15:50.0736] <sfink>
I'm going to have to step out for a few hours soon

[09:15:59.0998] <sfink>
though I just got riotx working on my phone

[09:16:32.0826] <padenot>
I expect it to work now, so apart from what we talked about and you've fixed, it works on ubuntu/debian

[09:17:08.0433] <padenot>
it's happilly doing whatever it's doing, running the js shell doing important things

[09:17:10.0514] <sfink>
yeah, though there are ways to avoid doing a full rebuild and reanalysis that might come in handy

[09:17:27.0548] <sfink>
it depends on how much you want to use it for right now

[09:17:40.0324] <padenot>
now the real work begins, understanding and fixing the issue I had on try

[09:17:57.0626] <padenot>
but not today, because it's the weekend in 13min

[09:18:36.0382] <sfink>
oh cool, that works

[09:19:02.0903] <sfink>
if you send me your try link, I might take a look too

[09:20:13.0558] <padenot>
I don't expect to figure this out myself yeah, considering I've started doing jsapi things exactly 7 days ago

[10:34:44.0985] <bzbarsky>
padenot: You're debugging a static analysis failure?

[15:03:47.0091] <sfink>
bzbarsky: I found https://treeherder.mozilla.org/#/jobs?repo=try&selectedJob=289916245&searchStr=haz&author=paul%40paul.cx and commented in bug 1598114.

[15:03:48.0324] <Botzilla demo>
https://bugzil.la/1598114 ‚Äî NEW (padenot) ‚Äî implement AudioWorkletNode.parameters


2020-02-22
[19:28:52.0123] <bzbarsky>
sfink: Thanks!

[20:12:18.0480] <Waldo>
bzbarsky: FYI, I'm looking into figuring out how to define those comparison ops in the innermost namespaces rather than in the global namespace.

[20:12:40.0866] <bzbarsky>
Nice, thank you!

[20:13:03.0590] <Waldo>
Also it's not the spec proper, but I think "only look in the innermost namespace" is https://en.cppreference.com/w/cpp/language/adl item 2d.

[20:13:32.0537] <Waldo>
"The innermost enclosing namespaces in the classes added to the set", rather than all enclosing namespaces of those classes.

[20:14:01.0825] <Waldo>
Unfortunately this stupid thing appears that it might require me to use a four-letter word to solve this.  ‚òπÔ∏é

[20:22:02.0162] <bzbarsky>
SFINAE is 6 letters, and is the answer to all C++ things, right?  ;)

[20:22:12.0222] <Waldo>
"macros"

[20:22:19.0994] <bzbarsky>
Also 6 letters!

[20:22:25.0888] <bzbarsky>
Inflation, you know

[20:22:44.0848] <Waldo>
"Macros" definitely is a four-letter word, I dunno what you're smoking.

[20:23:23.0083] <Waldo>
Now, how is this supposed to be done when the potential operands inhabit different namespaces...

[20:24:56.0373] <Waldo>
As written now we think we can compare `JS::Handle<T>` and `js::FakeRooted<T>`, but if that's the case, where do you define the equality operator?  Ordinarily in the namespace of the arguments, but if they're in different namespace, I don't think you can just define it in both, because then there'd be ambiguity.

[20:25:46.0676] <Waldo>
Most all the container types are in `JS`, but we have `js::FakeRooted` and `js::FakeMutableHandle` as exceptions.

[20:58:29.0455] <Waldo>
Maybe I ought move `js::FakeRooted` into `namespace JS` to deal with this.  üòë

[23:27:31.0996] <Waldo>
Aaaaaughghghghghghh

[23:28:22.0094] <Waldo>
Apparently, in an entirely different header (`gc/Barrier.h`), we have define-comparison-operator support for a bunch of other GC barrier-related types that inhabit `namespace js`.

[23:29:33.0557] <Waldo>
When it was just `FakeRooted` and `FakeMutableHandle` it wasn't too bad to just move them, but `PreBarriered`/`GCPtr`/`HeapPtr`/`WeakHeapPtr`/`HeapSlot` atop that to move is too much, IMO.

[23:30:10.0000] <Waldo>
Maybe I can have friend operators defined inside the relevant classes, or something.  üòí

[23:30:22.0359] <Waldo>
But too late today, I give up for now.

[10:26:36.0739] <ptomato>
anybody know what kind of thing might cause crashes in JS::Heap<JSObject*> barrier methods?

[10:27:06.0197] <ptomato>
we've been seeing them often in GNOME after porting from ESR60 to ESR68

[10:28:18.0016] <ptomato>
it's possible I'm doing something shady in this file https://gitlab.gnome.org/GNOME/gjs/blob/master/gjs/jsapi-util-root.h which used to be okay in ESR60, does anything look obviously off there?

[13:51:54.0104] <sfink>
Waldo: see bug 1456512 comment 5 where I encountered this last

[13:51:55.0400] <Botzilla demo>
https://bugzil.la/1456512 ‚Äî RESOLVED (sfink) ‚Äî Assertion failure: !JS::CurrentThreadIsHeapCollecting(), at js/src/gc/Marking.cpp:3625 with grayRoots function

[13:53:54.0533] <sfink>
but it seems like my conclusion was the other way around -- it's better to avoid having operator overloads in namespaces at all. Let all lookups go to the toplevel scope to be resolved.

[13:54:04.0455] <sfink>
though I don't think I have a beef with Koenig lookup

[13:54:42.0106] <sfink>
as in, class scope seems ok to me, namespace scope seems error-prone

[13:55:05.0462] <sfink>
but I very well may be holding this thing backwards

[13:55:34.0328] <sfink>
lemme pull the trigger and find out...

[14:09:53.0303] <sfink>
er, but where is operator== defined in gc/Barrier.h? I see it defines operator=.

[14:12:00.0113] <sfink>
but that's within the class, not the js:: namespace

[14:29:41.0988] <Waldo>
The operator== is only in global scope. But gc/Barrier.h opts several classes in namespace js into getting those global operator==.

[14:43:45.0030] <sfink>
oh, I see. You're talking about ambiguity during Koenig lookup (or do you prefer ADL/Argument Dependent Lookup?).

[14:44:09.0672] <sfink>
but if we find an operator== in the toplevel namespace, then it won't get that far.

[15:44:30.0996] <Waldo>
The original case bzbarsky had was `using namespace mozilla` meaning you had various `operator==` from that namespace hiding the ADL thing. And those were mandated at least by `std::unique_ptr` compatibility, so you can't shove upward there. I think. 

[15:45:04.0800] <Waldo>
(mildly distracted, getting too many groceries home on bike, back in 15?)


2020-02-23
[10:58:41.0883] <ptomato>
do you have to have a write barrier when setting a Heap<JSObject*> to null?

[11:24:15.0221] <sfink>
a pre-write barrier, yes. If you're doing incremental GC.

[11:26:09.0157] <sfink>
er, actually, that's version-dependent.

[11:26:23.0827] <sfink>
recently, we changed that to use a read barrier in place of the pre-write barrier

[11:27:23.0891] <sfink>
(bug 1581574)

[11:27:25.0264] <Botzilla demo>
https://bugzil.la/1581574 ‚Äî RESOLVED (jonco) ‚Äî Investigate removing Heap<T>'s pre write barrier

[11:28:31.0345] <ptomato>
ah, that may be what is causing these crashes in GNOME since moving from ESR60 to ESR68?

[11:28:52.0160] <ptomato>
(I guess not, this bug was resolved in ff71)


2020-02-24
[00:56:40.0532] <padenot>
sfink: thanks for your comment in the bug, I'll have a look. Also I wanted to say that your instructions the other day resulted in the same reports locally as I got on try, so it definitely worked

[03:12:12.0969] <nox>
Is there anything MSVC-specific with regard to the layout of classes with bases that don't have any virtual methods nor fields?

[03:13:11.0892] <nox>
More specifically, is there any way MutableHandleIdVector could be more than just a pointer on x86_64-pc-windows-msvc?

[03:14:02.0519] <emilio>
ptomato: I can repro the gjs crashes with relative frequency... May be worth trying to catch them in rr?

[03:16:19.0912] <emilio>
nox: I don't think so off hand, but MSVC ABI is weird... throw an `static_assert(sizeof(<thing>) == 8)` in there and see if it fires?

[03:16:46.0427] <nox>
emilio: https://devblogs.microsoft.com/cppblog/optimizing-the-layout-of-empty-base-classes-in-vs2015-update-2-3/ This seems extremely relevant.

[03:18:23.0175] <emilio>
nox: clang and gcc also do that IIRC, so I'd hope not so much?

[03:19:07.0923] <emilio>
Empty base-class optimizations are sorta well known

[03:21:30.0504] <nox>
Oh right.

[04:33:36.0448] <nox>
https://searchfox.org/mozilla-central/source/js/public/RootingAPI.h#666 I'm suspecting this is making the class non-trivially-copyable on MSVC for some reason (lol that it is line 666).

[05:17:29.0049] <nox>
It wasn't this deletion, but I'm correct that my issue come from the fact that MutableHandle<T> isn't trivially copyable on msvc builds.

[05:17:45.0285] <nox>
`class MutableHandle { MutableHandle& operator=(const MutableHandle&) = delete; };` This is trivially copyable in clang but not msvc.

[05:40:36.0179] <jonco>
nox: did you work out why not?  I think this should be trivially copyable if possible

[05:42:44.0236] <Benjamin Bouvier>
is anybody still using the StupidAlloactor for testing? otherwise, we should remove it, pretty sure it's untested

[05:45:19.0603] <jandem>
Benjamin Bouvier: it's failing a number of jit-tests fwiw. Let's remove it, we can resurrect it if we ever need something like it

[05:46:09.0688] <Benjamin Bouvier>
jandem: üëçÔ∏è

[06:11:11.0318] <nox>
jonco: Pretty sure it's a MSVC bug.

[06:11:42.0992] <nox>
jonco: https://developercommunity.visualstudio.com/content/problem/170863/msvc-type-traits-stdis-trivially-copyable-is-bugge.html https://stackoverflow.com/questions/50720054/is-stdis-trivially-copyable-wrong

[06:12:26.0722] <jandem>
nox: just curious, do you also use MSVC to compile spidermonkey itself? things will likely get more difficult in the future since we dropped it for m-c and have no CI coverage

[06:13:55.0176] <jonco>
nox: ok thanks

[06:14:08.0388] <nox>
jandem: Yes we use MSVC.

[06:14:19.0398] <nox>
And gcc or whatever, we have both in our CI.

[06:15:00.0067] <nox>
Or I think so? At the very least, not returning a MutableHandleIdVector like in GetMutableHandleIdVector in jsglue.cpp fixed my issues.

[06:15:14.0367] <nox>
(And this doesn't fail on any other build than our MSVC target.)

[06:15:35.0399] <jdm>
can someone recap what I should know? this room doesn't show any backlog before I joined.

[06:15:51.0786] <nox>
jdm: jandem asked "just curious, do you also use MSVC to compile spidermonkey itself? things will likely get more difficult in the future since we dropped it for m-c and have no CI coverage"

[06:16:18.0521] <jdm>
as far as I know the answer to that is no

[06:16:22.0472] <jdm>
we also moved to clang-cl

[06:16:50.0067] <nox>
Could it be that clang-cl suffers from the same trivially-copyable issue?

[06:16:56.0630] <jandem>
ah nice

[06:20:08.0270] <nox>
Anyway, I'm out for lunch, I don't have a Windows box available right now so if someone could check if `class MutableHandle { MutableHandle& operator=(const MutableHandle&) = delete; };` is trivially copyable or not through clang-cl, that would be nice.

[07:41:10.0542] <froydnj>
we use msvc's std, so if `is_trivially_copyable` is bugged in msvc's `<type_traits>`, it's a decent bet that it's bugged in `clang-cl` too (depends on some details, though)

[07:44:36.0399] <jonco>
how do I turn on LTO for shell builds?  I'm using the configure options --enable-release --enable-lto=cross but I get thousands of 'undefined reference' errors from the linker

[07:47:02.0794] <froydnj>
I don't know that we've ever thought about using LTO for shell builds!

[07:47:07.0312] <froydnj>
what sort of errors do you get?

[07:54:27.0658] <jonco>
froydnj: here's a snippet: https://paste.mozilla.org/qTdnvJ7t

[07:55:44.0185] <jonco>
I'm trying to test something without doing a full browser build

[07:57:04.0565] <froydnj>
jonco: what's the invocation for that shell link look like?

[08:01:05.0564] <jonco>
froydnj: https://paste.mozilla.org/2ZawzkHf

[08:01:55.0386] <froydnj>
well, cool, we are at least linking with lto

[08:02:47.0349] <nox>
> <@froydnj:mozilla.org> we use msvc's std, so if `is_trivially_copyable` is bugged in msvc's `<type_traits>`, it's a decent bet that it's bugged in `clang-cl` too (depends on some details, though)

Thanks for the answer!

[08:03:12.0044] <nox>
jandem: Is `aarch64-windows-mingw32` also not supported?

[08:05:13.0064] <nox>
Asking because:
> ERROR: Don't know how to translate aarch64-windows-mingw32 for rustc

[08:17:28.0013] <tcampbell>
Windows shell builds have been giving me target-triple issues for months =\. I usually have to manually switch the rust toolchain override to even build 32-bit windows

[08:18:41.0204] <froydnj>
the aarch64 seems like a bug, because that's the exact same triple we use on browser builds

[08:29:25.0049] <nox>
Maybe I borked one of my patches,

[08:29:48.0421] <nox>
I had to remove some bindgen-related stuff already from the build system, because that was failing even though we don't use it through the build system on our side.

[08:33:08.0752] <evilpie>
I found the problem with my Function#caller patch, the realm code is correct

[08:37:53.0216] <jonco>
tcampbell: hi, I was wondering about restrictions on the first field of a GC thing

[08:38:29.0919] <jonco>
I guess this is undefined behaviour, but can you point me at the exact rule this is breaking?

[08:40:45.0506] <tcampbell>
jonco: it is type-punning when we access the isforwarded bits

[08:41:17.0758] <jonco>
tcampbell: sure, but we already do this via casting to RelocationOverlay... how is that ok?

[08:41:39.0890] <padenot>
I might have misunderstood something. In ecmascript, if a object which has strings for keys, and Float32Arrays of a certain size for value is frozen, can I detach the Float32Arrays ?

[08:42:14.0634] <padenot>
It seems like nothing prevents it in ecma, but it does a DataCloneError in Gecko, so there must be something in postMessage or other thing to detach ArrayBuffer ?

[08:42:24.0340] <tcampbell>
jonco: waldo gave me some hand-wavey answer that we can kind of get away with it if the primitive type of the field we access matches (although we mix pointer and uintptr_t so that is still not quite there)

[08:43:05.0282] <tcampbell>
jonco: In general I find relying on struct layout to be very high risk

[08:43:14.0306] <jonco>
do you know if 'matches' is defined somewhere? 

[08:43:29.0523] <tcampbell>
so at the very least going though a uintptr_t you have clear definitions of low-bits, etc

[08:44:31.0080] <jonco>
true

[08:45:02.0352] <tcampbell>
even if you patch works today, it seems likely than not that it will be a sec bug in a year

[08:45:24.0123] <padenot>
ah no forget it I botched my test case

[08:45:45.0670] <jonco>
tcampbell: that seems pretty strong

[08:45:57.0059] <jonco>
it's equally likely the current code could be a sec bug in a year

[08:45:58.0914] <tcampbell>
(ideally the cell type would define the uintptr_t itself)

[08:46:30.0716] <jonco>
yes

[08:46:57.0670] <padenot>
bzbarsky: hi, do you know if https://github.com/WebAudio/web-audio-api/issues/1933#issuecomment-590327155 would be something that we could use?

[08:47:00.0657] <tcampbell>
jonco: do we need to change all the types with gcptr in first field, or is shape speical?

[08:47:23.0997] <padenot>
karlt found it yesterday, it seems like this is what we need

[08:47:36.0423] <jonco>
we need better abstractions for these fields that are used for storing pointers/flags

[08:48:00.0323] <tcampbell>
yeah, we do =\

[08:48:41.0746] <jonco>
that's a good question

[08:49:05.0295] <jonco>
I'm surprised this hasn't shown up in TSAN tests already (the code has been stable for a while)

[08:49:50.0310] <tcampbell>
I wonder if there is sensitivity to sweep phases

[08:50:06.0021] <tcampbell>
which already scare me a lot as I touch this lazy-script stuff

[08:52:31.0984] <jonco>
it's sensitive to the phases used for updating GC thing pointers in a compacting GC; it can only happen between GC things in the same phase

[08:59:13.0440] <Ms2ger [~half-time dedication]>
padenot: potentially (fwiw, I believe it was added for https://webassembly.github.io/spec/js-api/#memories)

[09:01:45.0894] <padenot>
Ms2ger [~half-time dedication]: in terms of what it does, it sounds perfect, so I was wondering why it was not mentionned to us before, since we really want things to not be tampered with (be it the Object wrapping those buffers, or the buffers themselves)

[09:02:34.0993] <padenot>
maybe we should have asked more people

[09:02:54.0725] <jorendorff>
Why is [value initialization](https://en.cppreference.com/w/cpp/language/value_initialization) called that?

[09:03:00.0092] <jorendorff>
seems like weird name

[09:04:24.0863] <padenot>
I guess one of the issue is that we would have to bind it in WebIDL, but it doesn't seem like the end of the world

[09:09:32.0896] <tcampbell>
jonco: I wonder about generalizing CellWithLengthAndFlags for this case

[09:09:52.0411] <tcampbell>
so Shape::immutableFlags would be the length value

[09:10:09.0573] <jonco>
yeah that's a good idea

[09:10:29.0823] <ptomato>
emilio: I haven't had a gjs crash myself yet, only reports from other people

[09:14:03.0672] <jonco>
tcampbell: this runs in to the problem of uintptr_t being different sizes on different builds though

[09:14:47.0893] <jonco>
maybe we need an equivalent to CellWithLengthAndFlags which stores a pointer in the flags word

[09:16:49.0945] <tcampbell>
in your patch you have 64-bits of integer fields, right?

[09:17:12.0169] <tcampbell>
that is what CellWithLengthAndFlags is for. It uses one or two fields depending on platform

[09:18:29.0704] <jonco>
yes, but AIUI those individual flags fields were split out of a combined field to avoid races

[09:18:46.0849] <tcampbell>
hmm.. 

[09:19:07.0421] <tcampbell>
/me doesn't actually know how races work for sub-word accesses

[09:19:34.0386] <tcampbell>
the isforwarded check reads a uintptr_t I think

[09:20:01.0536] <jonco>
maybe it's enough that mutableFlags and immutableFlags end up stored in different fields

[09:20:02.0255] <bzbarsky>
padenot: Looking

[09:20:47.0438] <jonco>
yes, isForwarded reads uintptr_t

[09:21:40.0310] <emilio>
ptomato: on my laptop I can see it relatively easily, as in a couple times a day (Gnome / Wayland / Fedora)

[09:21:52.0574] <emilio>
ptomato: are stack traces and such useful?

[09:22:08.0682] <bzbarsky>
padenot: First time I see this thing.  But yes, presumably if we are allocating these array buffers we could use this mechanism

[09:22:15.0454] <padenot>
we are

[09:22:18.0745] <bzbarsky>
padenot: lemme check something

[09:23:42.0178] <bzbarsky>
padenot: We don't implement that thing as written

[09:23:59.0700] <bzbarsky>
padenot: We basically have a "is wasm or asm" flag that we check

[09:24:12.0133] <bzbarsky>
padenot: Maybe we could generalize it a bit, but that work would have to happen

[09:24:42.0813] <bzbarsky>
See https://searchfox.org/mozilla-central/rev/96f1457323cc598a36f5701f8e67aedaf97acfcf/js/src/vm/ArrayBufferObject.cpp#1619-1623 called from https://searchfox.org/mozilla-central/rev/96f1457323cc598a36f5701f8e67aedaf97acfcf/js/src/vm/StructuredClone.cpp#1950

[09:25:53.0174] <bzbarsky>
/me not sure how people generally feel about these sorts of APIs, but for this use case guaranteeing people can't detach your buffer might be reasonable...

[09:25:59.0720] <padenot>
yeah I've traced some code, the general idea is to make something impossible to detach, presumably the AudioBufferDetachKey is to allow specific APIs to detach it at some point?

[09:26:22.0372] <padenot>
bzbarsky: I'll ask around, because in our particular case, it seems useful

[09:26:24.0244] <bzbarsky>
Presumably

[09:26:35.0237] <ptomato>
emilio: see https://gitlab.gnome.org/GNOME/gjs/issues/301#note_721935, stack trace would be useful if it doesn't match one that's already tracked there. more immediately helpful would be consistent repro instructions

[09:26:37.0850] <bzbarsky>
There are no non-wasm consumers of this, afaict

[09:30:06.0345] <padenot>
I'll propose it to the audio wg, and we'll see, maybe someone in wasm-land has some opinions about this

[09:31:35.0668] <emilio>
ptomato: dealing with gc I suspect there won't be concrete repro steps... will look at my system logs and paste some stacks there later today if they don't match those

[09:31:49.0750] <bzbarsky>
padenot: Sounds good

[09:32:19.0398] <ptomato>
emilio: thanks!

[09:33:20.0866] <ptomato>
emilio: I've been hoping that there would be a way to consistently crash it by performing some UI action and then manually triggering a GC (Alt+F2, lg, trash button)

[09:41:41.0373] <jonco>
mgaudet: I think your patch meant to include changes to JSScript as well?

[10:13:12.0915] <mgaudet>
> <@jonco:mozilla.org> mgaudet: I think your patch meant to include changes to JSScript as well?

Yeah, it‚Äôs in the patch below (stole it from another stack)

[10:13:55.0477] <sfink>
ptomato: don't you need GjsMaybeOwned::operator bool() to be `explicit` too, to avoid it from being used to autoconvert to an int or whatever?

[10:15:43.0933] <jonco>
mgaudet: oh right, sorry

[10:17:34.0327] <ptomato>
sfink: good question! would that still allow doing `if(!myMaybeOwned)`? (that was the intention, but not sure we actually do it anywhere)

[10:17:48.0503] <sfink>
yes

[10:17:53.0373] <sfink>
that's considered explicit bool context

[10:18:22.0182] <sfink>
both `if(x)` and `if (!x)` should still work

[10:19:42.0953] <ptomato>
/me adds `explicit` to all `operator bool` in gjs

[10:20:20.0201] <ptomato>
seems unlikely to be related to the crash, though

[10:20:29.0422] <sfink>
I agree

[10:22:05.0686] <ptomato>
thanks for taking a look! I really appreciate any help I can get, since I have no idea what convention I might be breaking here

[10:22:16.0424] <sfink>
I'm wondering if you could sprinkle in some IsInsideNursery(static_cast<Cell*>(x)) calls in places like switch_to_rooted and discard_wrapper. Not for the return value, for the MOZ_ASSERT on the ChunkLocation inside of it.

[10:22:28.0001] <sfink>
(or do the assert directly)

[10:23:42.0360] <sfink>
just because it seems like the pointers coming in seem to be totally wrong in some way. Or at least, that's what it sorta appears like, I may be wrong.

[10:24:24.0010] <sfink>
can you get register values from these crashes? I don't know if they would reveal anything, but it's the next thing I would glance at.

[10:33:11.0843] <ptomato>
sfink: if I add the IsInsideNursery calls, at least my test suite doesn't fail the assertion üòù

[10:33:27.0505] <sfink>
good sign!

[10:34:54.0253] <ptomato>
sfink: I haven't had any of these crashes myself yet, but I can ask for register values on that issue and it's likely someone will add them. what should I look for if I get them?

[10:36:10.0268] <sfink>
If you do any poisoning, then a poisoned pointer pattern would be an obvious sign. But if not, I guess I'd be looking at stack vs heap, and whether the upper or low 3 bits look wrong.

[11:16:32.0090] <Waldo>
> <@jorendorff:mozilla.org> Why is [value initialization](https://en.cppreference.com/w/cpp/language/value_initialization) called that?

Seems like it's just a name, to me.  This rose by any other name would still be as abstruse and difficult to fully comprehend.

[11:53:21.0195] <Waldo>
/me does not ever expect to have fully internalized and memorized C++'s initialization semantics


2020-02-25
[16:43:38.0197] <Waldo>
/me sighs

[16:44:23.0787] <Waldo>
Correctly declaring and defining these comparison operators, while working around template specialization and instantiation rules, is a royal mess.

[19:12:32.0043] <ptomato>
sfink: further reports from people with the gnome crash seem to suggest the pointer in the JS::Heap is null

[22:44:03.0520] <jandem>
morning everyone

[23:03:53.0930] <Waldo>
Yikes.

[23:04:35.0713] <Waldo>
Just spent how many hours to figure out that an `operator==` member function this patch adds was not being invoked because I forgot to tack `const` onto the end of it, and overload resolution meant this non-consideration was entirely silent.

[23:07:31.0870] <jandem>
`C++ == bad`

[23:10:23.0301] <Waldo>
So you're saying C is bad?

[23:11:15.0924] <jandem>
hah

[23:14:52.0190] <Waldo>
Also now that that problem is solved, I think I may still be having problems because ADL considers not just the innermost namespaces of the _arguments_ to `==`, but also the innermost namespaces of _base classes_ of those argument types, and on _template parameters_ of all those classes.  Which means a `JS::Rooted<JS::Value> == JS::Value` will look for `operator==` declarations in `namespace JS` for obvious-enough reasons, but it will _also_ look in `namespace js` -- because `JS::Rooted` inherits from `js::RootedBase`.  Which means defining `operator==` in `namespace JS` for `JS::Rooted`/etc. comparisons and also defining `operator==` in `namespace js` for `js::GCPtr`/etc. comparisons will not work.

[23:15:18.0418] <Waldo>
This is grotty and fun to dive into, but also it is pretty despairing as far as uses of time go.

[23:16:29.0565] <Waldo>
I wonder if I can define `operator==` in `namespace JS::detail::wrapper_comparisons` that contains nothing else, then `using JS::detail::wrapper_comparisons` into `namespace js` and `namespace JS` so that overload resolution will just find one thing, not two.

[23:16:44.0703] <jandem>
how would you feel about merging those namespaces? the js/JS inheritance and mixing can be pretty confusing for us humans too

[23:18:48.0757] <Waldo>
Primarily to solve this problem, I'm not a fan.  To not have two things to think about generally, I could go for it more.  But I do think our internal-use stuff ought not be _directly_ in `namespace JS`, v8's `v8::internal` idea is a generally good one IMO, and at that point you have two namespaces again _at least for this immediate overload consideration_ (because ADL only looks in arguments' innermost namespace, not innermost plus all enclosing).

[23:19:47.0089] <Waldo>
I do think it is somewhat poor that `js::RootedBase` isn't either `namespace JS` or maybe `namespace JS::detail` -- the crossing the streams there, public poking into internal, does not seem very right to me.

[23:20:51.0485] <jandem>
fair enough

[23:22:06.0201] <Waldo>
/me heads home

[23:22:52.0056] <jandem>
g'night

[02:31:30.0257] <wingo>
computer "science" ü§™ https://searchfox.org/mozilla-central/source/js/src/jit/BacktrackingAllocator.cpp#2738-2780

[03:14:34.0489] <jseward>
wingo: I think that is "engineering", not "science" :)

[03:14:43.0549] <wingo>
:)

[04:14:11.0358] <padenot>
is there some sort of annotate/blame for the ES spec ?

[04:43:34.0811] <nox>
Anyone fluent with Windows builds here? Trying to figure out how to call a Windows 10-only function from MFBT's Poison.cpp.

[04:48:22.0144] <padenot>
nox:  what style of function? function pointer, linked statically, or maybe LoadLibrary/GetProcAddress behind a version check ?

[04:51:57.0641] <nox>
padenot: Plain old .h declared function. I currently don't have a Windows install (ever tried downloading a Windows ISO over 4G tethering?), all I know is that this function is Windows 10 only (VirtualAllocFromApp), it's declared in memoryapi.h which I include, and yet clang-cl says it's not declared anywhere.

[04:52:46.0084] <padenot>
you want to use LoadLibrary/GetProcAddress and have a fallback if not found

[04:53:13.0105] <padenot>
it's like dlopen/dlsym really

[04:53:16.0529] <nox>
Why would I do that when we don't for VirtualAlloc?

[04:53:41.0549] <padenot>
VirtualAlloc is available from Windows XP onwards

[04:53:49.0713] <padenot>
so it's linked statically

[04:53:50.0512] <nox>
It doesn't exist in UWP builds,

[04:53:56.0633] <nox>
that's why I'm trying to call VirtualAllocFromApp.

[04:55:36.0572] <padenot>
ah if it's a different build that changes everything

[04:59:10.0189] <nox>
AH, I think the issue is peak silly: we wrote a patch that fixes WINVER in old-configure.in, except we use the tarball, in which we disable checking whether old-configure is outdated (because that test was very brittle),

[04:59:23.0384] <nox>
and we don't fix old-configure, of course.

[04:59:58.0262] <padenot>
you might want to plumb the fact that this is a UWP build down the build system, then use this define to branch on the function name. worst case, the sdk on the builders is not recent enough and you'll have to provide the definition yourself

[05:01:42.0069] <padenot>
 * you might want to plumb the fact that this is a UWP build down the build system, then use this define to branch on the function name. worst case, the sdk on the builders is not recent enough and you'll have to provide the declaration yourself

[05:01:49.0391] <nox>
padenot: This is for SM in Servo, we only target Windows >=10.

[05:02:51.0249] <padenot>
you still have to guard it at compile time don't you? Except if you patch the SM tarball's version of mfbt ?

[05:03:12.0975] <nox>
Yes, we do that.

[05:03:20.0879] <nox>
https://github.com/servo/mozjs/blob/f03b72e9a6a0ff86f652286a8f8a1c252000583d/etc/patches/0011-Introduce-enable-uwp.patch

[06:37:34.0813] <nox>
What is CC_TYPE? Is that supposed to be set by the user running configure?

[06:44:31.0908] <Ms2ger [~half-time dedication]>
nox: https://searchfox.org/mozilla-central/source/build/moz.configure/toolchain.configure#1094 should set it

[06:45:01.0241] <nox>
Oh, thanks, I was grepping CC_TYPE.

[06:45:21.0975] <Ms2ger [~half-time dedication]>
Me too, fortunately there was a comment :)

[06:46:40.0702] <Ms2ger [~half-time dedication]>
https://searchfox.org/mozilla-central/source/build/moz.configure/toolchain.configure#387 may be a better link

[07:58:04.0248] <Ms2ger [~half-time dedication]>
Anyone saved last week's spider-monkey drawings?

[08:02:43.0449] <padenot>
Ms2ger [~half-time dedication]: if you click the icon that resembles a file (a4 sheet with a bent corner) on the top right of riot, it will show a list

[08:02:59.0717] <padenot>
otherwise I have them here in this list I can re-send them

[08:03:19.0717] <sfink>
> <@padenot:mozilla.org> is there some sort of annotate/blame for the ES spec ?

I'm not sure which functionality you want specifically, but you could try https://arai-a.github.io/ecma262-compare/

[08:03:59.0652] <padenot>
sfink: this is great thanks. I noticed it's a githtub repo these days, so I used `git blame`. wasn't it a weird document format before ?

[08:04:16.0872] <Ms2ger [~half-time dedication]>
padenot: that doesn't show anything for me, strangely

[08:04:29.0548] <Ms2ger [~half-time dedication]>
ecma262 used to MS word, back in the day

[08:04:30.0380] <sfink>
yeah, I think it was a Word doc or something for a long time

[08:04:46.0846] <Ms2ger [~half-time dedication]>
 * ecma262 used to be MS word, back in the day

[08:05:11.0429] <padenot>
Ms2ger [~half-time dedication]: one sec saving them so I can send them again

[08:05:36.0872] <sfink>
are the links global? https://mozilla.modular.im/_matrix/media/r0/download/mozilla.modular.im/21aba450ae1a4412386dc154a10160dc4ba51398

[08:05:52.0859] <yulia>
I can see it

[08:05:58.0022] <yulia>
is this like legit our new logo?

[08:05:58.0193] <padenot>
looks like they are, even better

[08:06:09.0170] <Ms2ger [~half-time dedication]>
That worked

[08:06:46.0221] <sfink>
would that specific one have copyright issues?

[08:07:09.0190] <yulia>
no, its in public domain, but i am slightly ashamed of myself while finding it funny

[08:07:24.0444] <yulia>
in other words, right on

[08:09:34.0660] <sfink>
if you look at it, the background diagonal of overlap is pretty visible, but it serves the purpose surprisingly well

[08:09:58.0215] <yulia>
i can fix it up, but i was planning on doing a couple more logos in case we want to have some options

[08:10:08.0964] <yulia>
i think we should just have a different one every month

[08:10:49.0698] <yulia>
we can be "anti-logo"

[08:12:51.0796] <Benjamin Bouvier>
nice that we're finally getting closer to a logo!

[08:13:02.0372] <Benjamin Bouvier>
it'd be great to make sure it'd render nicely in small sizes and can be recognized from a far distance, so it works well on small prints (business cards, stickers...)

[08:14:30.0303] <jonco>
sfink: hi, can I get review for D62932 please?

[08:15:14.0474] <sfink>
argh, sorry, it looks like I didn't click submit on that one

[08:15:21.0592] <sfink>
done

[08:15:27.0871] <jonco>
np! cheers

[08:15:34.0865] <jonco>
this logo looks awesome btw

[08:19:24.0283] <sfink>
as long as we don't do anything messed up like

[08:19:50.0884] <yulia>
omg

[08:20:22.0087] <sfink>
/me puts the gimp down

[08:20:29.0159] <yulia>
our stickers are gunna be good.

[08:20:37.0690] <yulia>
_winning_

[08:20:55.0043] <yulia>
im laughing hard enough to be crying btw

[08:21:39.0406] <Ms2ger [~half-time dedication]>
Maybe we need a small-scale variant with just the one head and a spider leg wrapped around it or something like that :)

[08:22:14.0356] <yulia>
i feel like the small version just looks like a really gross spider and that ... kinda works?

[08:22:35.0111] <yulia>
i mean

[08:22:37.0628] <zombie>
feature/bug

[08:22:45.0249] <zombie>
 * feature/spider

[08:22:53.0010] <yulia>
look at it

[08:23:52.0434] <sfink>
I dunno, in that small version I first saw a many-legged superhero doing a backflip, then a dancing cockroach

[08:23:54.0517] <sfink>
maybe it's just me

[08:24:14.0309] <yulia>
hm we might have some work to do 

[08:24:43.0297] <yulia>
i was thinking, along the lines of heavy metal stuff, that we might want to make more fun of logos, and just go ahead and make something along the lines of a coat of arms instead of a logo

[08:24:52.0424] <iain>
In small sticker form it might work better if somebody traced the outline and redrew it with fewer tiny lines

[08:25:00.0540] <yulia>
because whats more metal than heraldry 

[08:25:35.0952] <yulia>
https://i.etsystatic.com/5421340/r/il/cafc6d/720526995/il_1588xN.720526995_fdwy.jpg

[08:26:13.0179] <yulia>
but then i was like, why not go all the way

[08:26:23.0897] <yulia>
and take a riff off socialist heraldry: https://en.wikipedia.org/wiki/Sociali

[08:26:26.0898] <yulia>
it has a nice language

[08:26:47.0367] <yulia>
circular, you could convince people that its a logo, but somethings off about it

[08:27:07.0074] <yulia>
 * all of these for example: https://duckduckgo.com/?t=ffab&q=monkey+heraldry&iax=images&ia=images&iai=https%3A%2F%2Fimg1.etsystatic.com%2F054%2F0%2F5421340%2Fil_570xN.720526995_fdwy.jpg

[08:30:46.0172] <iain>
"Gules, a pile azure charged with three monkeys rampant"

[08:34:06.0000] <yulia>
I was actually thinking ... we could take the joke too far and actually register it as a coat of arms in germany

[08:34:15.0374] <yulia>
because, in germany, a coat of arms is like a name

[08:34:27.0067] <yulia>
and there are a couple of rules

[08:34:30.0040] <yulia>
you have to have an animal

[08:34:32.0797] <yulia>
you have to have a color

[08:34:35.0432] <yulia>
and you have to have a metal

[08:34:47.0616] <yulia>
once you register a coat of arms, it has to be respected internationally

[08:35:09.0175] <yulia>
for example, the shell logo is actually a coat of arms. shell has to pay royalties or something to the family that owns the coat of arms in order to use it as a logo

[08:35:11.0620] <yulia>
anyway:

[08:35:29.0660] <yulia>
it will only get worse from here

[08:35:51.0923] <sfink>
ye gods

[08:36:28.0454] <sfink>
are you going to unpack the deep philosophical meaning behind all that? Are those strawberries?

[08:36:43.0353] <yulia>
https://en.wikipedia.org/wiki/German_heraldry

[08:36:53.0167] <yulia>
sfink: have you SEEN our posters?

[08:36:58.0256] <yulia>
We must.

[08:37:01.0637] <sfink>
heh

[08:37:06.0110] <yulia>
it is all meaningfull

[08:38:58.0275] <yulia>
thats belorussia btw, so we can't use it like that

[08:39:19.0580] <yulia>
it is an example of the kind of trouble we can get into though

[08:39:25.0503] <yulia>
 * it is an example of the kind of trouble we can get into though :D

[08:39:29.0467] <Ms2ger [~half-time dedication]>
yulia: I got a compliment for the logo: "that just gave me nightmares for the next 3 days."

[08:39:40.0119] <yulia>
Ms2ger [~half-time dedication]: excellent.

[08:39:53.0388] <yulia>
i think that was the intention of the name

[08:43:21.0976] <sfink>
jonco: how can I force a synchronous GC? I'm trying to force one when we hit an live buffer count maximum over in bug 1599295. gc.attemptLastDitchGC is private; is it exposed to internal js code somehow?

[08:43:23.0222] <Botzilla demo>
https://bugzil.la/1599295 ‚Äî NEW (nobody) ‚Äî Intermittent http://10.7.205.220:8854/jsreftest/tests/jsreftest.html?test=non262/TypedArray/<test name> | No test results reported. (SCRIPT)

[08:43:32.0087] <sfink>
 * jonco: how can I force a synchronous GC? I'm trying to force one when we hit a live buffer count maximum over in bug 1599295. gc.attemptLastDitchGC is private; is it exposed to internal js code somehow?

[08:43:49.0812] <sfink>
I guess I can just expose it, since I'm doing this more as a test right now

[08:44:59.0024] <jonco>
sfink: we don't often want to do that... I guess you can call JS_GC 

[08:45:07.0019] <jonco>
or inline the contents of that

[08:45:57.0016] <sfink>
yeah, the right fix here is probably to take this liveBufferCount into account and schedule a GC early enough to not hit the limit.

[08:47:34.0109] <jonco>
we should already take the memory used by shared array buffers into account when triggering GCs

[08:48:12.0204] <jonco>
but we do the usual thing of doubling the previous retained size to get the trigger

[08:48:35.0919] <jonco>
I guess if this is greater than the amount of memory available on the device it doesn't do much good

[08:48:38.0018] <sfink>
True. Maybe this behavior is too specific to this test. It's allocating a ton of length=0 and length=1 buffers (which will require 1 page, I think).

[08:48:52.0559] <sfink>
or rather, this set of tests

[08:48:54.0308] <jonco>
ah right, maybe it doesn't take the extra page into account?

[08:49:20.0903] <sfink>
it might be that 1000 buffers is only 4MB, and that's not enough to matter

[08:50:10.0840] <sfink>
but I'll check to see if it's taking the full allocation into account

[08:52:15.0461] <sfink>
you're right, it's only accounting for the usable length

[08:52:32.0440] <jonco>
ok, well that was my fault

[08:52:33.0273] <sfink>
excellent, I'll try fixing that!

[08:52:40.0911] <jonco>
cool

[09:04:33.0091] <nbp>
^ something like that, with JS ?

[09:07:10.0222] <nbp>
 * ^ something like that, with SpiderMonkey ?

[10:02:47.0047] <djvj>
is there a canonical 'strdup' in the spidermonkey internal APIs?  One that works with both mozilla::Utf8Char and char16_t buffers?

[10:05:11.0679] <tcampbell>
I think you'd start with js::DuplicateString famliy

[10:05:16.0966] <tcampbell>
 * I think you'd start with js::DuplicateString family

[10:05:28.0020] <Waldo>
Slightly dumb question, what's a command line to run a test that would execute https://searchfox.org/mozilla-central/source/js/src/vm/JSScript.cpp#3607    ?  I'm not immediately sure how to get that bit of binast-specific code to run.

[10:05:40.0380] <djvj>
tcampbell: thanks!

[10:07:11.0552] <tcampbell>
Waldo: you already tried `./mach jit-test --run-binast` (or directly run the python with that option)?

[10:08:28.0701] <tcampbell>
 * Waldo: you already tried `./mach jit-test --run-binast xdr` (or directly run the python with that option)?

[10:08:40.0578] <Waldo>
tcampbell: I am simple devloper and have tried nothing yet.

[10:09:11.0620] <Waldo>
tcampbell: Also, does that require a browser build to test?  I don't have one...

[10:09:36.0590] <tcampbell>
nope. `--enable-application=js` works

[10:09:54.0990] <tcampbell>
you can also run `js/src/jit-test/jit_test.py path/to/js/shell --run-binast xdr`

[10:10:07.0592] <Waldo>
Oh, I need --run-binast for that?  Boo.

[10:10:13.0731] <tcampbell>
yeah

[10:10:16.0036] <Waldo>
That's almost certainly what I was missing.

[10:11:00.0219] <tcampbell>
yeah, treehearder jobs include that, but it isn't the default =\

[10:26:09.0234] <Waldo>
tcampbell: Something is whack,

```
jwalden@find-waldo-now src]$ python jit-test/jit_test.py dbg/js/src/js --run-binast xdr
[37| 0| 0| 0] 100% ==================================================>|   4.9s
PASSED ALL
```

despite me inserting a `MOZ_CRASH();` on that line.

[10:26:52.0944] <Waldo>
(I'm trying to figure out what overload is being invoked for the assert-comparison on that line by gdb-stepping into it, for mild context.)

[10:27:03.0161] <sfink>
you're actually running an opt build on the wrong source tree entirely?

[10:27:20.0007] <sfink>
ok, that's what it would be for me. (And yes, that includes the dbg/ name.)

[10:27:28.0771] <Waldo>
My build is mos def a debug build.  :-)

[10:28:42.0281] <sfink>
there are code coverage reports lurking somewhere; I wonder if they backlink to the tests? (Hm, that would be pretty expensive to compute and store...)

[10:29:24.0817] <tcampbell>
yeah, I can't hit that line either

[10:29:52.0049] <tcampbell>
I suspect the xdr tests may not have binast variants 

[10:30:32.0257] <sfink>
you could try doing a local JS-only hazard analysis, and then using my handy dandy tool to view the resulting callgraph. Of course, I'm going to be off for the next 45 min or so, and the handy dandy tool is on my hard drive and in a github repo that I'd need to dig  up, and I have to run now, so I am being entirely useless here.

[10:31:08.0322] <Waldo>
Or I could just re-up to my patch that breaks stuff and find another compile error that's easier to hit.

[10:32:06.0274] <tcampbell>
oh.. yeah we almost certainly have no tests for that case

[10:32:17.0537] <tcampbell>
the shell xdr tests use eval

[10:32:23.0965] <tcampbell>
which is certainly not binast

[10:55:35.0675] <shu>
i see i was behind the times

[11:01:14.0339] <Waldo>
Aha, https://searchfox.org/mozilla-central/search?q=symbol:_ZeqRKT_RKNS_11ElementTypeE&redirect=false is an alternative to my end.

[11:09:57.0828] <Waldo>
/me ponders going home and rethinking his life

[11:10:19.0258] <Waldo>
Either that, or this ocean requires a whole lotta boiling...

[11:10:45.0255] <Waldo>
(namely, moving _every_ `operator==`/`operator!=` overload into innermost namespaces?)

[11:11:07.0764] <yulia>
have i gone too far for a joke?

[11:12:57.0869] <Waldo>
Kinda like this being able to put images directly in chat now.

[11:13:04.0074] <yulia>
i should be working on my slides..

[11:13:18.0610] <Waldo>
Tho at the same time, that image is very meta.  üòÇ

[11:15:07.0337] <Waldo>
 * Tho at the same time, me posting that image, wrt being able to put images directly in chat, is very meta.  üòÇ

[11:15:54.0894] <shu>
yulia: i love it

[11:19:50.0042] <sfink>
"going too far for a joke" -- I don't understand that sentence. What does it mean? How could that be possible? It's almost like it's trying for an "unstoppable force vs immovable object" metaphysical question, but here you only have one of the two.

[11:21:02.0990] <shu>
what is the joke?

[11:21:20.0183] <yulia>
shu: we need a new logo, and i have been coming up with the worst logos i can think of

[11:21:35.0533] <yulia>
"need' is, naturally, a relative term

[11:21:51.0152] <yulia>
this is basically a fun topic to fool around on

[11:22:14.0671] <sfink>
shu: I've been hoping till would opine on the per-item callback, and push back against our anti-iterator arguments. It sounds like he really wanted the iterator in the first place, and he generally has good reasons for things.

[11:23:04.0514] <shu>
sfink: makes sense. i'd like that sooner than later of course!

[11:24:36.0289] <sfink>
I haven't thought too hard about the overhead of a per-item callback. But also, I'm pretty fuzzy on the number of dead targets we might commonly see.

[11:24:56.0141] <sfink>
I always think of this as for relatively heavyweight stuff, but I'm worried that there are much finer-grained uses afoot.

[11:24:56.0201] <shu>
sfink: the latter question seems completely implementation dependent

[11:25:24.0958] <shu>
sfink: are you saying you're worried the per-item callback is too heavyweight if there are many dead targets?

[11:25:43.0646] <shu>
 * sfink: the latter question seems completely application dependent

[11:25:50.0485] <sfink>
yes to both

[11:26:26.0075] <sfink>
it is application-dependent, but it'd be nice to have a feel for what applications will exist and what they'll want

[11:26:50.0108] <sfink>
but in my personal non-Mozilla keeping-my-mouth-partly-shut-for-once opinion, the overhead question isn't a blocker

[11:26:54.0660] <Waldo>
/me mutters about message deletion not having viewable edit history, like all other edits are

[11:27:16.0637] <sfink>
yeah, that really surprised me when I ran into it too

[11:27:42.0591] <shu>
sfink: don't worry i won't quote you out of context as The Mozilla Position

[11:27:57.0912] <Waldo>
It's at least better than Slack where deleted messages just disappear entirely, as far as I've been able to tell.

[11:28:15.0047] <Waldo>
With nary a tombstone to memorialize them.

[11:29:01.0365] <sfink>
though it makes the UI seem even weirder, since it provides this huge cilckable bar as a natural and obvious way to see the deleted message

[11:29:09.0486] <sfink>
the Riot UI, I mean

[11:29:50.0002] <shu>
sfink: though i don't quite understand why a callback is more expensive than an iterator or an array

[11:30:01.0834] <shu>
just purely from an implementation perspective, ergonomics notwithstanding

[11:30:48.0898] <shu>
you're worried about the extra invocations until inlining kicks in in the upper tiers?

[11:31:03.0997] <sfink>
is inlining possible?

[11:31:26.0048] <shu>
well, at least in v8 i thought so, but let me double check...

[11:31:27.0780] <sfink>
it's looping over some funky internal data structure of dead targets' holdings and things

[11:31:42.0026] <iain>
yulia: That is beautiful

[11:31:46.0394] <sfink>
I guess if we self-host and expose that vector, maybe?

[11:32:08.0464] <sfink>
so maybe you're right; if we can inline, then it seems fine

[11:32:25.0352] <iain>
 * yulia:  That is beautiful

[11:33:11.0934] <shu>
sfink: so v8 did the thing where it tried self-hosting, gave up self-hosting, and now uses a DSL to write its JS builtins

[11:33:12.0975] <shu>
"torque"

[11:33:57.0535] <shu>
i'm pretty sure builtins written in torque that call out to callables can straightforwardly be inlined

[11:34:02.0460] <shu>
for SM would you have to write a special lowering?

[11:34:22.0084] <sfink>
I think if we can self-host, it wouldn't require anything special

[11:34:50.0511] <sfink>
but I'm not sure

[11:35:00.0579] <shu>
"shu and shu reacted with thumbs up"

[11:35:01.0158] <shu>
wat

[11:35:10.0747] <shu>
i clicked it again and now it's just one thumbs up

[11:35:12.0698] <shu>
what a world

[11:35:31.0053] <sfink>
I only saw a thumbs up, then it disappeared

[11:35:55.0846] <shu>
that's just rude

[11:37:00.0475] <sfink>
do emoji get localized? thumbs up doesn't mean quite the same thing in a number of places... ;-)

[11:37:39.0765] <Waldo>
shu: There are apparently server/UI de-coherence bugs, UI doesn't dedup those.  It has been grumped about in the appropriate places.

[11:44:30.0634] <shu>
Waldo: ah

[11:44:49.0303] <shu>
yulia: v impressed with your lettering btw

[11:45:57.0867] <yulia>
it doesn't normally look like that

[11:47:06.0748] <rkirsling>
are the monkeys spelling something? it feels like they would be but I'm failing to decipher :P

[11:48:06.0865] <yulia>
i think.. your guess is as good as mine.. though that could be nice. i just put asparagus and a crane in, and then my head started to hurt

[11:48:13.0160] <rkirsling>
XD

[11:48:18.0573] <Waldo>
WOO WOO

[11:48:32.0977] <Waldo>
Rubberducking with dholbert may have paid off!

[12:07:58.0167] <Benjamin Bouvier>
yulia: what's the bird representing?

[12:08:13.0893] <Benjamin Bouvier>
/me wonders if it's a crane and a subtle reference to cranelift

[12:08:21.0710] <Benjamin Bouvier>
if not, then confirmation bias ftw

[12:08:23.0805] <shu>
i don't think that's subtle

[12:08:29.0256] <shu>
that is literally a crane

[12:09:05.0851] <cfallin>
the crane is also lifting the spidermonkey...? hence Cranelift? or perhaps I'm reading too much into it

[12:09:45.0294] <shu>
yulia: perhaps in the background you could have the state bird of texas!

[12:10:29.0559] <shu>
(the tower crane)

[14:44:16.0656] <mgaudet>
jorendorff: Hey; quick Q, were you thinking about landing https://phabricator.services.mozilla.com/D63659 (and stack soonish?) caroline is thinking of starting work on ImmutableScriptData tomorrow which means merge-conflict

[15:29:23.0814] <Waldo>
sfink my main man!  Want to review operator overloading patches?

[15:33:04.0979] <sfink>
aw geez, I was hoping to stick flaming chopsticks into my eye sockets tonight. This won't get in the way of that, will it?

[15:33:22.0350] <Waldo>
Sounds like a yes to me!

[15:34:44.0070] <Waldo>
https://bugzilla.mozilla.org/show_bug.cgi?id=1618038 for the peanut gallery with more curiosity than sense, patches uploading now.


2020-02-26
[16:04:15.0623] <evilpie>
Mark Straver is apparently the maintainer of Pale Moon

[16:14:52.0499] <Waldo>
https://bugzilla.mozilla.org/show_bug.cgi?id=1617881 is sort of mildly sadfaces, tho I guess the spec is sort of the original sin for using `Type(v) is String` sorts of terms for checking whether a value is a string primitive, semi-ambiguously with testing whether a value is a String object.

[16:16:46.0406] <evilpie>
I feel like just not capitalizing String in the spec would be a good idea 

[16:43:55.0527] <bzbarsky>
Waldo: Is there an mdn bug filed, or just someone editing it?

[16:44:50.0290] <Waldo>
bzbarsky: I was hoping the bug reporter would deal with one of those, as I was just drivebying.

[16:47:34.0723] <Waldo>
I suppose nobody knows if he's on Matrix somewhere, right?

[03:25:48.0769] <evilpie>
How can I build the shell non-unified locally?

[03:37:16.0711] <Benjamin Bouvier>
in js/src/moz.build, set FILES_PER_UNIFIED_FILE to 1

[03:45:27.0500] <evilpie>
thanks

[04:23:59.0713] <nox>
What is the main header I should include if I'm building C++ stuff that uses jsapi?

[04:24:05.0781] <nox>
js-confdefs.h? js-config.h?

[04:36:13.0936] <jandem>
jsapi.h? Depends what you're using though, we're moving to separate header files in js/public/

[04:50:24.0451] <nox>
I'm getting very weird errors such as `c:\users\task_1582705045\repo\target\debug\build\mozjs_sys-56369a1418047755\out\build\dist\include\js/AllocPolicy.h(113): error C2487: 'onOutOfMemory': member of dll interface class may not be declared with dll interface`, will look into that after lunch.

[07:54:16.0799] <tcampbell>
nox: probably want to look into how JS_PUBLIC_API is being expanded. The jsshell for example uses static linking and kind of ignores this mess. Generally on Windows people have had a lot of pain using mozjs as a dll.

[08:08:29.0739] <bzbarsky>
Waldo: I would not rely on random bug reporters knowing anything about how to get mdn fixed

[09:00:44.0274] <nox>
tcampbell: My issue was that AFAICT, STATIC_JS_API is only ever set through mozbuild, passing it as a -D flag to the compiler,

[09:00:56.0054] <nox>
tcampbell: So if you build your own stuff, you need to define it by hand too.

[09:42:08.0076] <tcampbell>
fun =\

[10:19:37.0832] <djvj>
Waldo: ping

[10:20:19.0334] <djvj>
Waldo: so.. it turns out I can't use non-copyable types as elements of js::Vector.  I'd like to add support for that.  Ted suggested I ping you first to check about the ifs/hows/whis.

[10:20:22.0732] <djvj>
*whys

[10:21:16.0203] <mconca>
yulia: thanks for sending out the TC39 minutes to dev-platform

[10:21:26.0620] <mconca>
Giving that work more visibility is really useful.

[10:28:04.0630] <Waldo>
> <@bzbarsky:mozilla.org> Waldo: I would not rely on random bug reporters knowing anything about how to get mdn fixed

Except Jukka used to work on SpiderMonkey JIT stuff for us, on the SpiderMonkey team. :-) Just without doing too much direct spec interaction to recognize what was up here. 

[10:29:29.0015] <Waldo>
> <@djvj:mozilla.org> Waldo: so.. it turns out I can't use non-copyable types as elements of js::Vector.  I'd like to add support for that.  Ted suggested I ping you first to check about the ifs/hows/whis.

This is definitely possible already, I'm pretty confident we have vectors of UniquePtr now. What's your class look like, exactly? 

[10:35:03.0297] <djvj>
Waldo: https://pastebin.com/vV3ndwvA

[10:35:14.0916] <djvj>
the relevant bits anyway

[10:36:17.0924] <djvj>
Waldo: it's definitely trying to call the deleted copy constructor

[10:36:21.0904] <djvj>
on array grow

[10:36:59.0990] <djvj>
er.. no.. on append

[10:37:51.0369] <Waldo>
djvj: I've seen this before, I _think_ you ought not be deleting the copy constructor. Check what UniquePtr does - and be sure to append as `std::move(entry) `. 

[10:38:51.0624] <djvj>
Waldo: I think that last bit is the problem.  I'm doing an append with a const-ref

[10:39:16.0338] <djvj>
Waldo: ok.. that will likely fix it I think.

[10:39:30.0119] <Waldo>
Aha, that would definitely do it. 

[10:44:33.0766] <bzbarsky>
Waldo: Ah, if this specific reporter can generally be expected to have clue, great.

[12:49:59.0330] <bzbarsky>
                JS::RootedVector<JS::Value> argv(cx);
                if (!argv.resize(${argCount})) {


[12:50:11.0119] <bzbarsky>
If that resize() call returns false, there's an exception on cx, right?

[12:50:22.0139] <bzbarsky>
/me pretty sure he dug through that and there is....

[12:50:27.0554] <Waldo>
Yes. 

[12:53:45.0852] <bzbarsky>
Great

[12:53:52.0420] <bzbarsky>
/me removes some redundant "throw an exception" crap

[13:11:26.0359] <tcampbell>
mgaudet caroline : in tomorrow's meeting we'll need to put together our status update for the next WebVM Monthly meeting, so give a little thought to what our update should be. (Similar to the update meeting at the end of all-hands)

[13:20:44.0842] <mgaudet>
Cando

[13:22:51.0877] <tcampbell>
mgaudet: unrelated ping

[13:23:05.0283] <mgaudet>
tcampbell: Unrelated pong?

[13:23:08.0237] <tcampbell>
mgaudet: I'm looking at https://phabricator.services.mozilla.com/D64454 ..

[13:23:28.0541] <tcampbell>
the |= on the flags makes me slightly nervous in initFromFunctionBox

[13:24:44.0187] <tcampbell>
I'm wondering if we can assert a subset of flags are touched

[13:24:50.0132] <tcampbell>
*only a subset

[13:25:09.0623] <tcampbell>
(and ideally have those categories of flags in the StencilShared.h)

[13:25:16.0232] <mgaudet>
That's an easy enough fix I think; Just need to move https://searchfox.org/mozilla-central/source/js/src/vm/JSScript.cpp#4492-4495 above the flag initialization code

[13:25:47.0823] <tcampbell>
cool

[13:26:07.0657] <mgaudet>
then we can (and should) assert that the flags are empty on entry to the initFromFunctionBox (I think, need to dig a little more to confirm) 

[13:26:44.0922] <tcampbell>
makes sense

[13:28:53.0893] <mgaudet>
(Overall, my experience of doing this conversion is that it's going to be much nicer in the end, there's definitely been some challenges because of the complicated initialization semantics we have for... everything) 

[13:31:16.0482] <tcampbell>
mgaudet: I've liked things like `CheckFlagsOnDelazification` to make it obvious what the burn-down list of flags that need to be addressed is

[13:31:47.0103] <caroline>
tcampbell: sounds good! :D 

[13:32:37.0105] <tcampbell>
caroline: thanks for starting to tackle StencilShared.h. I was excited when I rebased and say the stuff was just done :P

[13:32:41.0254] <tcampbell>
 * caroline: thanks for starting to tackle StencilShared.h. I was excited when I rebased and say the stuff was just done :D

[13:36:24.0732] <caroline>
tcampbell: no problem!

[13:52:12.0721] <mgaudet>
tcampbell: oof. This will take a bit longer than I'd hoped, because I forgot lazy scripts also go down this road. So it seems like we can have any flag that can be set on a lazy script possibly already-present when we try to do initFromFunctionBox. 

[13:59:45.0983] <tcampbell>
Hmm.. will think about that tomorrow. Have been looking at the compile-in-place patch again to get ready for landing

[14:00:24.0152] <tcampbell>
I hit the same concern with deciding if I should clear the compiled-script-only flags

[14:01:23.0312] <tcampbell>
I might stack on the work that you and Caroline did to have a mask for those flags and explicitly clear when relazifying


2020-02-27
[02:57:08.0431] <evilpie>
Do we use P1 just to mean someone is working on this?

[03:00:18.0556] <padenot>
I don't know if SM follows the general gecko guidelines, that are being formalized: https://firefox-bug-handling.mozilla.org/triage-bugzilla

[03:01:06.0078] <padenot>
`P1 - Fix in the current release cycle`

[03:11:12.0908] <evilpie>
thanks!

[04:41:19.0049] <Caspy7>
 does wasm have threading yet?

[04:42:33.0256] <wingo>
not in the standard.  some implementations implement some parts of proposed extensions to the standard.  https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md

[04:42:50.0410] <Caspy7>
I see

[04:42:58.0313] <Caspy7>
here's a report from a user that the new wasm google earth is smoother on Edge than Firefox
https://www.reddit.com/r/firefox/comments/f9xftk/google_earth_officially_available_for_firefox/fiwqbgh/
another user points out that the Edge version is receiving a threaded version

[04:44:15.0680] <Caspy7>
so I guess Google is using the chrome version version of mutlithreading

[04:44:39.0548] <Caspy7>
and yet again Firefox users suffer for it

[04:45:27.0126] <wingo>
yeah :/  fwiw threads is at phase 2 in https://github.com/WebAssembly/proposals

[04:46:21.0434] <wingo>
experimenting with it like google earth does sounds good for progress of the proposal but i sympathize.

[04:46:31.0190] <wingo>
firefox does implement some parts of the threads proposal fwiw

[04:51:29.0906] <lth>
we implement all of it, but we're not shipping it yet

[04:51:55.0356] <lth>
(b/c it's not standardized and b/c there are some security concerns that must be addressed first)

[05:02:03.0198] <Caspy7>
I've been asked if there's a flag on nightly one can flip to enable threading

[05:03:44.0211] <nox>
Would be really nice if there was a way to build SM without ever checking anything Rust-related, it's causing issues for vendoring.

[05:13:03.0344] <Caspy7>
I'll ask more explicitly for the skimmers: Is there a pref on Nightly one can flip to enable multithreading for webassembly?

[05:13:50.0227] <lth>
hm, maybe

[05:14:55.0872] <lth>
dom.postMessage.sharedArrayBuffer.bypassCOOP_COEP.insecure.enabled is useful

[05:15:07.0724] <lth>
dom.postMessage.sharedArrayBuffer.withCOOP_COEP

[05:15:18.0783] <lth>
javascript.options.shared_memory

[05:15:52.0791] <lth>
not 100% sure thats sufficient but it's what there is

[05:16:05.0430] <lth>
Caspy7: ^

[05:17:01.0933] <lth>
And there's https://docs.google.com/document/d/1zDlfvfTJ_9e8Jdc8ehuV4zMEu9ySMCiTGMS9y0GU92k/edit as a general guide to some of the complexity

[05:33:17.0425] <nox>
Seems like the build system cannot distinguish `aarch64-pc-windows-msvc` from `aarch64-uwp-windows-msvc`.

[06:07:33.0485] <froydnj>
that seems pretty likely, actually

[06:07:57.0222] <froydnj>
in terms of what the rust target is set up to be in that case, or with other things more generally?

[06:13:32.0110] <nox>
froydnj: Decided I didn't care enough to find out why, I just rm'd rust.configure and any references to it.

[06:14:13.0495] <nox>
We don't build any Rust code while building SM, and we shouldn't do it ever, because then we can't publish the crate if it includes other crates (and if it doesn't include other crates, it doesn't need cargo nor rustc at all).

[06:14:14.0623] <froydnj>
nox: permit me to point fingers at the hilarity of you removing rust from a project

[06:14:41.0569] <nox>
froydnj: I know. Reminds me of a former French PM who once said in English with a horrible accent "the yes needs the no to win against the yes".

[06:15:13.0165] <nox>
Or some crap like that. Imagine me saying "The Rust needs to be removed from the C++ for the C++ to be included into the Rust".

[06:15:31.0027] <nox>
 * froydnj: I know. Reminds me of a former French PM who once said in English with a horrible accent "the yes needs the no to win against the no".

[06:16:13.0153] <nox>
The worst Rust-related check in the build system is the one that checks the cargo version, it does so by parsing the output of cargo 

[06:16:52.0584] <nox>
specifically it has a regex that begins with "^cargo ", and that completely breaks rls, given `$CARGO --version` with rls starts with, well, "rls".

[06:17:07.0344] <froydnj>
alternative ideas or patches welcome

[06:17:40.0479] <froydnj>
what's the full output with `rls-cargo`?

[06:20:16.0634] <nox>
froydnj: My alternative ideas is to just remove all of those checks, but I don't think that's good either.

[06:20:52.0148] <nox>
```
¬± rls --version
rls 1.41.0 (8f1c275 2019-12-10)
```

[06:22:36.0742] <froydnj>
o.O  `rls` is symlinked to cargo?

[06:24:15.0921] <nox>
froydnj: No, build scripts that are built through rls being invoked get `rls` as the value of `

[06:24:22.0503] <nox>
 * froydnj: No, build scripts that are built through rls being invoked get `rls` as the value of `$CARGO`.

[06:24:33.0206] <nox>
 * froydnj: No, build scripts that are built through rls get `rls` as the value of `$CARGO`.

[06:24:38.0821] <nox>
 * froydnj: No, build scripts that are invoked through rls get `rls` as the value of `$CARGO`.

[06:24:44.0351] <nox>
Words, how do they work

[06:24:59.0594] <froydnj>
welp, I guess we could support that

[06:25:25.0962] <nox>
froydnj: But in the context of building SM as a crate, mozbuild should not even use rustc or cargo at all.

[06:26:23.0113] <froydnj>
I am not sure I follow the reasoning for that

[06:26:25.0189] <nox>
It should have a mechanism to be fed whatever compiler and linker arguments it needs to connect to its external Rust dependencies. I'm doing something like that already for linking against `encoding_rs`, and I will need to push that further when we will integrate cranelift into Servo.

[06:26:56.0016] <nox>
froydnj: I don't want to build encoding_c_mem or whatever through the build script that builds spidermonkey, I want to properly depend on that crate like any other.

[06:28:12.0067] <nox>
froydnj: For example, for encoding_c_mem and encoding_c, I have this patch: https://github.com/servo/mozjs/blob/smup/etc/patches/0002-Don-t-use-internal-encoding_c_mem-header.patch

[06:28:28.0529] <nox>
Then I depend on them as usual: https://github.com/servo/mozjs/blob/smup/Cargo.toml#L31-L32

[06:29:03.0889] <nox>
then in the build script, I pass around the include path fed by the encoding_c_mem crate's build script: https://github.com/servo/mozjs/blob/smup/build.rs#L152-L157

[06:29:49.0142] <nox>
https://github.com/hsivonen/encoding_c_mem/pull/2 has some details about this shenanigan.

[06:37:19.0866] <nox>
froydnj: Does it make more sense now? üòÖ

[07:10:09.0123] <froydnj>
nox: sort of?  I don't know if your solution works out correctly for the spidermonkey-in-Gecko case

[07:10:31.0925] <froydnj>
though at first glance it seems More Correct

[07:15:33.0775] <nox>
froydnj: What would help us would be for SM to depend less on mozbuild, or at least wasn't "polluted" by configure checks etc that didn't concern SM directly, but I doubt this will happen any time soon.

[08:26:43.0256] <mconca>
jorendorff: Do you know if we are shipping static fields and methods (anba's patches in bug 1535804) behind a flag to restrict to nightly/beta?

[08:26:44.0462] <Botzilla demo>
https://bugzil.la/1535804 ‚Äî RESOLVED (anba) ‚Äî Implement the Static class features proposal

[08:27:16.0700] <mconca>
I was just talking to yulia and her opinion is that it would be better not to let that feature ride the trains to release (from a TC39 point-of-view).

[08:28:32.0895] <jorendorff>
yulia: Are you still around? I didn't know there was a reason it shouldn't ship

[08:28:58.0795] <jorendorff>
mconca: Thanks for the heads-up. I don't think there's a flag, checking now

[08:29:35.0832] <sfink>
aren't we writing the new front-end in Rust?

[08:29:47.0238] <sfink>
seems like that would affect nox 's setup

[08:30:49.0220] <nox>
It definitely will.

[08:30:57.0791] <yulia>
jorendorff:  yes

[08:31:18.0845] <yulia>
jorendorff: are we talking about static fields?

[08:31:26.0453] <jorendorff>
yulia: Yes.

[08:31:34.0570] <yulia>
ill write you privately

[08:50:08.0372] <nox>
sfink: A setup that wouldn't hurt mine would be to make SM a crate even in mozilla-central.

[08:50:26.0297] <nox>
With all the SM C++ inside of it, with whatever other Rust code you will make in the future.

[08:53:19.0228] <evilpie>
iain: hey! how is regexp coming along?

[08:55:29.0720] <sfink>
nox: sounds like a good path to me, but I'm going to try keep away from build stuff personally. glandium and embedders are stakeholders who matter.

[09:05:57.0727] <tcampbell>
mgaudet: I think I want to add some sort of 'needsBytecode' flag to FunctionBox. I need to get rid of the INTERPRETED_LAZY flag. It was never great that we used it as input to the BCE passes..

[09:07:29.0071] <mgaudet>
tcampbell: that sounds good. I have on my backlog something similar to aid deferral. 

[09:08:35.0549] <tcampbell>
mgaudet: Does 'needsBytecode' convey the right sentement?

[09:09:02.0092] <tcampbell>
It will be false for those sort of place-holder funbox for lazy children, etc

[09:09:28.0156] <tcampbell>
https://searchfox.org/mozilla-central/rev/b2ccce862ef38d0d150fcac2b597f7f20091a0c7/js/src/frontend/BytecodeEmitter.cpp#5505 is really the only part that matters

[09:10:46.0568] <mgaudet>
tcampbell: yeah, I think so!

[09:15:10.0931] <mgaudet>
(Trying to figure out if I have a bug already for this, or just a patch that did tried to remove that use through a different method that never quite worked) 

[09:17:30.0155] <mgaudet>
Looks like a couple of old patches in this neighbourhood, but I like this approach much better

[09:40:05.0911] <jorendorff>
tcampbell: mgaudet: I just realized I have to get out of here around 12:15 for an appointment

[09:40:17.0122] <jorendorff>
sorry I just realized this is a conflict now, i'm dumb

[09:40:59.0493] <tcampbell>
no worries

[09:41:03.0034] <jorendorff>
I don't see anything in the agenda

[09:41:41.0571] <tcampbell>
my agenda is just to reflect on our status and figure out where we are in the process

[09:43:20.0363] <jorendorff>
ok, i am going to bail out then and i'll see you next week...

[09:43:32.0280] <tcampbell>
sounds good

[09:44:10.0686] <jorendorff>
Ted, I think it was you that proposed this work: bug 1615402

[09:44:11.0946] <Botzilla demo>
https://bugzil.la/1615402 ‚Äî ASSIGNED (jorendorff) ‚Äî Factor ImmutableScriptData fields out of ScriptStencil

[09:44:36.0276] <jorendorff>
I did it, but it'll break the rust frontend glue code, so I'm going to wait for that to land ("soon") and add one more patch

[09:45:41.0056] <tcampbell>
yeah, I saw that :D

[09:51:42.0575] <iain>
evilpie: I have one remaining cgc+binast+oom bug that I have not looked at, and one bug that I'm in the middle of fixing upstream, and then my try build should be green

[09:52:03.0075] <iain>
And then it's just a matter of tidying stuff up for review and landing it

[09:52:04.0848] <iain>
"just"

[09:52:43.0360] <Waldo>
/me waves hi from an ECMA-402 meeting for the morning

[09:52:51.0207] <iain>
 * evilpie: I have one remaining cgc+binast+oom bug that I have not looked at, and one bug that I'm in the middle of fixing upstream, and then my try build should be green

[09:53:43.0908] <evilpie>
iain: ok.

[09:56:52.0657] <evilpie>
might make sense to do upload some parts even before the final stuff landed upstream

[10:12:55.0399] <yulia>
Waldo: is this already unflagged and landed? https://bugzilla.mozilla.org/show_bug.cgi?id=1557727

[10:14:07.0348] <Waldo>
yulia: Hasn't been landed yet -- I think we were hoping to land it same time as bug 1612379 to minimize size change, and that bogged down in policy questions.

[10:14:08.0510] <Botzilla demo>
https://bugzil.la/1612379 ‚Äî NEW (nobody) ‚Äî Narrow down the list of ICU locales we ship

[10:14:36.0468] <yulia>
Waldo: should we write an intent to ship?

[10:19:06.0901] <Waldo>
yulia: Maybe?  I probably would wait til the list-narrowing policy decision is made, but I could see it going either way.

[10:19:45.0839] <yulia>
Waldo: ok, i will be away for two weeks. I can either do it before i go, when i come back, or if you want you can do it once the decision is made

[10:20:50.0029] <Waldo>
yulia: I'm going to be out from approximately mid-March to mid-April, so at least we aren't overlappingly out.  :-)  If that decision is made in the next two weeks I'll do it, otherwise probably you'll end up with it.

[10:21:20.0758] <yulia>
will the decision be posted to that bug, or should i watch something else?

[10:21:52.0472] <Waldo>
I'd expect it to be posted there.  Tho, I guess that decision needs to be escalated somewhere/to someone, seeing as it's been dormant for weeks...

[10:31:34.0496] <zbraniecki>
I think we should land `DIsplayNames` soon after April 8

[10:42:22.0998] <nox>
Do you people think semantic grep and patch are useful tools? I just discovered people working on sgrep and their company is 2 blocks away from the SF office and they would love to get in touch, given how massive mozilla-central is.

[10:42:39.0310] <nox>
(Feel free to redirect me to people or channels where that question would be more on-topic.)

[10:48:14.0323] <nox>
They would be happy to come and give a technical talk about their sgrep tool. (Think coccigrep but maintained and with the goal of not being just about C)

[10:52:49.0815] <Waldo>
I dunno how useful precisely, but I would make the trip up from Mountain View for such a talk, for edification even if there were no other reason.

[10:53:24.0425] <Waldo>
nox: #static-analysis:mozilla.org could be a relevant channel too.

[10:53:40.0470] <nox>
Oh right I'm dumb, Sylvestre told me about that channel already, thanks Waldo.

[10:54:18.0518] <Waldo>
It's cool.  :-)

[10:55:58.0835] <mccr8>
nox: Asuth or some other SearchFox people might be interested, though I think none of them are local to CA

[10:56:27.0648] <Waldo>
Could be broadcast.  Probably should be if it happened.  Hopefully they'd be fine with that.

[10:56:40.0813] <nox>
https://twitter.com/nokusu/status/1158737294712549377 ever green tweet of mine ü§°

[10:56:54.0938] <nox>
Anyway, it's dark here now, time to log off.

[14:20:26.0589] <mgaudet>
tcampbell: ping?

[14:22:04.0399] <tcampbell>
mgaudet: pong

[14:22:35.0980] <mgaudet>
tcampbell: Do you have a few minutes to chat through / rubber duck something. Sort of want to make sure it's not too crazy 

[14:22:50.0344] <tcampbell>
I do in 5

[14:23:13.0289] <mgaudet>
Alright; lemme know. I'll try to keep it short 

[14:54:44.0226] <bzbarsky>
Are people here tracking the Realms proposal?

[14:54:46.0807] <bzbarsky>
in TC39?


2020-02-28
[18:04:54.0318] <Waldo>
jimb: Home owners are taking care of their friends' dog this week. ‚¨ÜÔ∏è

[18:05:19.0006] <jimb>
Wow!!

[18:05:29.0522] <jimb>
Samoyed? I can't see the size

[18:05:41.0761] <Waldo>
I think so, yeah. 

[18:06:24.0090] <Waldo>
The carpet "squares" are maybe 20" to a side. 

[18:13:47.0880] <bz>
ping about the Realms thing?

[18:13:51.0265] <bz>
Anyone here on top of it?

[23:42:46.0444] <yulia>
bz: i might be able to help?

[23:42:54.0769] <yulia>
(im not on top of it, i am just following it)

[23:44:45.0841] <yulia>
 * I wouldn't say that I am on top of it, but I am following it and trying to make sense of it

[23:44:54.0564] <yulia>
 * I wouldn't say that I am on top of it, but I am following it and trying to make sense of it from our perspective

[23:50:59.0967] <yulia>
bz: i might also be a bit slow responding, i am at a conference today

[01:56:40.0977] <jandem>
@anba has also looked at it, we talked about it a bit in Berlin. I hope it will work well with same-compartment realms

[01:57:02.0696] <jandem>
 * anba has also looked at it, we talked about it a bit in Berlin. I hope it will work well with same-compartment realms

[02:19:20.0704] <yulia>
^ anba is a good person to talk to

[02:19:40.0087] <yulia>
(sorry at a conference atm)

[06:32:36.0716] <bz>
yulia: I followed up on slack

[06:32:46.0414] <bz>
Is there jsapi for issuing warnings?

[06:32:52.0958] <bz>
/me not seeing anything obvious

[07:08:37.0715] <jandem>
bz: something like this, JSEXN_WARN + https://searchfox.org/mozilla-central/rev/b2ccce862ef38d0d150fcac2b597f7f20091a0c7/js/src/builtin/Promise.cpp#4434-4436 

[07:09:51.0166] <jandem>
(it'd be much nicer to use separate APIs for those after the error reporter cleanup, they are implemented very differently now)

[07:10:37.0784] <evilpie>
JS::WarnUTF8

[07:11:38.0654] <jandem>
ah nice, we should convert everything to that and simplify the error reporting APIs...

[07:17:43.0754] <evilpie>
the error reporting stuff is so bad, I am not even sure where to start improving it

[07:18:35.0260] <bz>
nice

[07:18:38.0360] <bz>
/me should try this

[07:21:04.0032] <bz>
Context here is https://bugzilla.mozilla.org/show_bug.cgi?id=1618865

[07:23:30.0022] <bz>
evilpie: It's so much better than it used to be!

[07:23:38.0426] <bz>
evilpie: But yes, there's definite work to be done

[07:32:23.0217] <evilpie>
I am quite unhappy with the whole design of JSErrorReport. All that manual pointer manging, different ownerships etc.

[07:37:07.0466] <bz>
Sure

[07:37:11.0544] <bz>
I mean, it's designed for C

[07:37:25.0975] <bz>
Could definitely use some "It's been 25 years, no?" modernization

[07:40:20.0554] <evilpie>
I wonder how other browser do this

[07:40:43.0276] <evilpie>
I have been thinking maybe we could just remove JSErrorReport and always use js Error objects

[07:44:38.0004] <jandem>
what about the duck typing stuff? you'd create an ErrorObject and store the actual exception in a slot?

[07:49:23.0342] <jandem>
 * what about the duck typing stuff? edit: or maybe that part can stay because that's in the ErrorReport stack class

[09:32:54.0231] <chaircrusher>
OK so what does it mean when this assert fails in js::NewContext: ```JSContext*
js::NewContext(uint32_t maxBytes, uint32_t maxNurseryBytes, JSRuntime* parentRuntime)
{
    AutoNoteSingleThreadedRegion anstr;

    MOZ_RELEASE_ASSERT(!TlsContext.get());```

[09:33:26.0034] <evilpie>
jandem: so instead of an ErrorReport we would create an Error object from duck-typed objects

[09:33:45.0954] <evilpie>
maybe with some flag or reference to the original exception value

[09:49:47.0539] <chaircrusher>
So the problem I'm having where the MOZ_RELEASE_ASSERT(!TlsContext.get()); assertion fails: It happens when I try to instantiate a second instance of the JS interpreter.  This happens in my build of the JS60 tag.

[09:50:16.0213] <evilpie>
chaircrusher: I think you are only supposed to have one JSContext/JSRuntime per thread

[09:50:30.0787] <chaircrusher>
OK 

[09:50:51.0690] <chaircrusher>
That isn't how it used to work.

[09:51:10.0975] <chaircrusher>
where you could have multiple instances of the 'whole Spidermonkey thing'

[09:51:47.0745] <evilpie>
I guess, depends which version you used before

[09:52:13.0985] <evilpie>
I would at least use a version based on ESR like 68

[09:56:36.0489] <chaircrusher>
Sure fine.

[09:57:10.0219] <chaircrusher>
but I've hesitated to port our code up to the current version because the API is such a moving target.

[09:57:36.0393] <chaircrusher>
I always spend a day or two asking on the chat why I can't instantiate an interpreter and run a script ;-)

[09:58:07.0377] <chaircrusher>
It sounds like that wouldn't fix this issue anyway.  

[09:58:55.0688] <ptomato>
chaircrusher: at least the basic examples for instantiating an interpreter and running a script should be documented here: https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples

[10:02:22.0925] <chaircrusher>
ptomato: 'should be documented here' is the operative phrase.  What I know from long experience: The examples are only updated when someone complains that they no longer work. That someone usually being me.

[10:04:54.0253] <ptomato>
sorry, I shouldn't have said "should", I meant "are" üè≠Ô∏è

[10:04:59.0602] <ptomato>
 * sorry, I shouldn't have said "should", I meant "are" üòù

[10:05:35.0667] <ptomato>
there are branches for ESR60 and ESR68

[11:22:39.0238] <decoder>
jandem: I was wondering, would it be super complicated to give `evaluate` a functionality like timeout() but so that it only interrupts what is running *inside* evaluate?

[11:31:55.0153] <djvj>
so how in the world does "addPendingOutOfMemory" work, and why does it exist?

[11:32:30.0776] <djvj>
On helper threads, we don't setPendingException on OOMs directly it seems.  

[11:32:51.0710] <djvj>
It's triggering some of my sanity asserts, and I want to understand what's happening here.

[11:33:25.0618] <djvj>
Waldo: ^-- I choose you!

[11:54:01.0126] <jandem>
@djvj exceptions are added to a list so that we can throw them on the main thread later 

[11:54:55.0025] <Waldo>
Yeah, I don't know anything about this offhand, save that errors get saved then flushed back to main thread.

[11:55:41.0378] <jandem>
decoder probably doable..

[11:55:57.0432] <jandem>
not sure offhand how hard it is 

[12:01:48.0103] <jandem>
decoder if you NI me I can take a look next week 

[12:41:40.0085] <bz>
/me trying to remember what anba's email address is

[12:41:44.0149] <bz>
help, anyone?  ;)

[12:47:09.0099] <yulia|PTO>
bz ill send it to you in a sec

[12:48:09.0378] <sfink>
I sent it

[12:55:18.0306] <bz>
Thanks!

[14:17:26.0927] <chaircrusher>
Here's a question about JSContext and instantiating multiple instances of the Spidermonkey interpreter -- i.e. JSContext and global object.  As I discovered, one can no longer have more than one JSContext per thread.

Fair enough I say, but can I still have more than one global object?  

It appears to work -- that I can instantiate one JSContext, and re-use it to make multiple global objects.

But I'm wondering if I'm doing something wrong.

[14:18:40.0880] <mccr8>
chaircrusher: yes, you can have multiple globals. For instance, in Firefox you can have multiple web pages open, and each will have its own global. All on the main thread.

[14:19:21.0991] <chaircrusher>
brilliant! Thanks

