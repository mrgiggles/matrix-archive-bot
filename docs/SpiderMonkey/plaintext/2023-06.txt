2023-06-01
[00:16:43.0059] <nchevobbe>
dminor: looks like https://bugzilla.mozilla.org/show_bug.cgi?id=1826574 is causing some devtools issue. I'm going to have a look at this 

[01:38:53.0304] <wraitii>
If a JS script constructs a temporary object, and this object gets sent to C++ code, does the C++ code need to re-root it or is it safe to use a Heap<> for that ? Or for that matter even a Handle ? We have fairly common cases of `Engine.postMessage({ tempObect: tempValue})`

[01:51:38.0454] <jandem>
you should re-root it. `Heap<>` doesn't really apply in this case (stack roots) and for `Handle<>` you need to have an object root to begin with

[02:14:00.0124] <Redfire>
If you're sending that "temporary object" to a native function and accessing it through `CallArgs`, I believe it should be rooted, but don't quote me on that.

[02:14:45.0068] <wraitii>
> <@redfire75369:mozilla.org> If you're sending that "temporary object" to a native function and accessing it through `CallArgs`, I believe it should be rooted, but don't quote me on that.

Yes that's what I'm doing, to clarify

[02:15:56.0048] <wraitii>
CallArgs seems to ::fromMarkedLocation on *argv, so it seems like things must be rooted

[02:16:02.0230] <wraitii>
or the code would be absurdly dangerous

[02:34:37.0761] <jandem>
yes but you get it as `Value`. You usually need an object root if you want to work with it

[02:41:42.0751] <wraitii>
operator[] actually returns a MutableHandleValue, but maybe I'm misunderstanding what you mean

[03:36:39.0064] <jandem>
I mean if you want to pass it to an API that wants a HandleObject, you have to re-root for that 

[03:37:42.0270] <jandem>
but else you're fine without re-rooting

[04:24:52.0125] <liam_g>
Is there reason to expect that code written in Javascript and then executed in Spidermonkey will be significantly faster or slower than equivalent code written in native Spidermonkey C++ code?

[04:27:16.0960] <liam_g>
I know that the answer is probably: it depends, and I'm fine with that. The situation is this: now that my embedded system is working well, I'm finding it much easier to write code in Javascript, rather than write embedded code and deal with all of the rooting, etc. And I'm wondering whether this decision is likely to have any implications for the efficiency of my application.

[04:29:34.0988] <liam_g>
 * I know that the answer is probably "it depends", and I'm fine with that. The situation is this: now that my embedded system is working well, I'm finding it much easier to write code in Javascript, rather than write embedded code and deal with all of the rooting, etc. And I'm wondering whether this decision is likely to have any implications for the efficiency of my application.

[04:37:07.0480] <wraitii>
> <@liam_g:mozilla.org> Is there reason to expect that code written in Javascript and then executed in Spidermonkey will be significantly faster or slower than equivalent code written in native Spidermonkey C++ code?

My experience would suggest that, if you're not doing too much js/c++ interop, it's probably faster to use JITted JS code than interact with the JSAPI from C++

[04:42:41.0922] <liam_g>
What do you mean by interop?

[04:43:49.0797] <wraitii>
just calling js from c++ and vice-versa.

[04:44:01.0522] <wraitii>
Not that it changes much from the rest, but it's going to lead to overhead from converting values around

[04:44:59.0965] <liam_g>
Right, makes sense. I think I'm doing a lot of that, but it can't be helped!

[04:47:04.0234] <wraitii>
but basically it's almost surely faster to do things in JS than calling into C++ if what you are doing is 'manipulating JS objects', and it's probably faster to use the JSAPI from c++ instead of going through a script (but I'd temper that in some respect, the JSAPI seems to have quite some overhead)

[06:29:59.0760] <wraitii>
To give an example: to load a [x, y] value from C++, it's faster to do [GetX(), GetY()] than to Get(arrayRef) and then JS_SetElement both

[06:30:08.0929] <wraitii>
 * To give an example: to load a \[x, y\] value from C++, it's faster to do \[GetX(), GetY()\] than to Get(arrayRef) and then JS\_SetElement both even though once is entering C++ twice

[06:31:22.0862] <wraitii>
 * To give an example: to load a \[x, y\] value from C++, it's faster to do \[GetX(), GetY()\] than to Get(arrayRef) and then JS\_SetElement both even though the first is entering C++ twice

[09:31:25.0173] <sfink>
bug 1638045 got double-reviewed. I guess that's a potential problem with spidermonkey-reviewers? Anyway, thanks jonco & mgaudet.

[09:31:27.0946] <botzilla>
https://bugzil.la/1638045 — ASSIGNED (sfink) — Run Windows jit-tests in parallel again

[09:32:28.0987] <jandem>
r++

[09:34:36.0488] <jonco>
everyone loves test infra improvements

[09:39:42.0998] <mgaudet>
sfink: Haha, yeah we mid-aired

[09:43:22.0349] <mgaudet>
i am looking at a case where a promise isn't getting resolved as expected. If I've got a Pernosco trace of this and I wanted to look at how the micro-task queue was being managed in relationship to a set of promises... where am i looking? is there a good "add-task-to-microtask-queue" function I should be looking for?

[09:50:55.0534] <iain>
mgaudet: In the shell?

[09:52:10.0422] <iain>
I would maybe start poking around here: https://searchfox.org/mozilla-central/source/js/src/vm/JSContext.cpp#809

[09:52:41.0464] <mgaudet>
That sounds promising

[09:52:54.0119] <mgaudet>
Excellent -- thank you; job queue is a word that would have been helpful to come to mind. 

[09:53:15.0219] <iain>
There are two different job queues. InternalJobQueue is our own implementation for the shell, and the xpcom one lives [here](https://searchfox.org/mozilla-central/source/xpcom/base/CycleCollectedJSContext.h#134)

[09:55:00.0549] <mgaudet>
Thank you :) 

[10:02:11.0602] <wraitii>
I'm a bit confused by the IC stubs logic, specifically I can't really figure out how the baseline checks against existing stubs vs using the fallback. I'm trying to find out why some code becomes megamorphic

[10:02:49.0527] <wraitii>
What I figured so far is that when the fallback baseline stub is hit, we try to generate a new more specialised stub, but I can't figure out where that 'what stub do I use / do I have a stub here?' logic is, if anywhere

[10:10:18.0921] <iain>
wraitii: The first time we hit an IC, the only stub is the fallback stub, so we call into (eg) [DoGetPropFallback](https://searchfox.org/mozilla-central/source/js/src/jit/BaselineIC.cpp#1191) to attach a stub. That calls into [GetPropIRGenerator::tryAttach](https://searchfox.org/mozilla-central/source/js/src/jit/CacheIR.cpp#369), which looks at the inputs and creates a CacheIR sequence that will handle those inputs. For example, a very common pattern for a GetProp is "GuardToObject/GuardShape/LoadFixedSlot", which verifies that the receiver is an object with the right shape and loads the value in a particular slot. We compile that sequence to create a stub and attach it to the front of the IC chain. 

[10:11:34.0315] <iain>
The next time we hit the IC, we will first try that stub. So long as the input is an object with the right shape, it will succeed. If one of the guards in the stub fails, then we will jump to the next stub, which is the fallback stub, and end up trying to attach a new stub to the chain.

[10:12:22.0383] <iain>
New stubs are always attached to the front of the chain. If we hit the fallback with six stubs already in the chain, then we throw them all away and switch to megamorphic mode, which attaches more general stubs.

[10:16:00.0360] <iain>
When we do an Ion compilation, we look at all the IC chains. If the first stub in an IC (the most recently added one) has never failed, we assume that it handles all the cases we care about. We take the CacheIR  for that stub and turn it into MIR, which is the input to Ion. If there are multiple active stubs, then we instead use an IC in Ion.

[10:16:48.0710] <iain>
 * wraitii: The first time we hit an IC, the only stub is the fallback stub, so we call into (eg) [DoGetPropFallback](https://searchfox.org/mozilla-central/source/js/src/jit/BaselineIC.cpp#1191) to attach a stub. That calls into [GetPropIRGenerator::tryAttach](https://searchfox.org/mozilla-central/source/js/src/jit/CacheIR.cpp#369), which looks at the inputs and creates a CacheIR sequence that will handle those inputs. For example, a very common pattern for a GetProp is "GuardToObject/GuardShape/LoadFixedSlot", which verifies that the receiver is an object with the right shape and loads the value in a particular slot. We [compile that sequence](https://searchfox.org/mozilla-central/source/js/src/jit/CacheIRCompiler.cpp) to create a stub and attach it to the front of the IC chain.

[10:20:09.0954] <wraitii>
I guess the part I'm missing is 'If one of the guards in the stub fails, then we will jump to the next stub', couldn't find where that was in the code

[10:20:28.0525] <wraitii>
But it probably doesn't matter, the point is that if a new stub gets added it's that one of the guards failed

[10:22:38.0888] <iain>
It happens in generated jitcode. We generate that code [here](https://searchfox.org/mozilla-central/source/js/src/jit/BaselineCacheIRCompiler.cpp#204-213).

[10:23:05.0545] <iain>
(Specifically: [here

[10:23:14.0858] <iain>
 * (Specifically: [here's the jump](https://searchfox.org/mozilla-central/source/js/src/jit/x64/SharedICHelpers-x64.h#59-65)

[10:23:22.0565] <iain>
 * (Specifically: [here's the jump](https://searchfox.org/mozilla-central/source/js/src/jit/x64/SharedICHelpers-x64.h#59-65))

[10:26:50.0876] <wraitii>
Ah, I see, thanks

[10:27:04.0243] <iain>
And for example this is how we would generate the GuardToObject: https://searchfox.org/mozilla-central/source/js/src/jit/CacheIRCompiler.cpp#1506-1519

[10:27:10.0997] <wraitii>
I guess here the reason for the stubs is that I'm trying to assign to a dynamic object property name, and there actually is a guard for that

[10:27:16.0312] <wraitii>
 * I guess here the reason for the stubs is that I'm trying to assign to a dynamic object property name, and there actually is a guard for that property name

[10:28:36.0168] <iain>
Something like `obj[propName] = value`, with a variety of different prop names?

[10:29:29.0833] <wraitii>
yup exactly

[10:29:47.0876] <wraitii>
It's probably normal behaviour that that goes megamorphic tbh, just meant to understand how it happened

[10:30:18.0823] <iain>
In that case, the first stub we attach will optimistically assume that the prop name will be fixed in practice, and attach a stub targeting that name. We will do that six times, then transition to megamorphic mode and attach a more generic stub that will hash together the shape and the property name and look it up in a cache.

[10:30:29.0789] <iain>
Going megamorphic in this case is working as designed.

[10:30:54.0545] <wraitii>
yes interesting

[10:31:15.0267] <wraitii>
I suppose this would prevent trial inlining since the caller would then only see a monomorphic megamorphic callee

[10:31:24.0051] <wraitii>
unlikely to be relevant in a lof of cases tbh

[10:33:00.0945] <iain>
We will do trial inlining (as opposed to monomorphic inlining) in this case because the stub is megamorphic, not specialized. See [here](https://searchfox.org/mozilla-central/source/js/src/jit/TrialInlining.cpp#612).

[10:36:30.0044] <wraitii>
Ah, nice

[10:36:47.0530] <iain>
(I'm not actually convinced that the heuristic is useful in this particular case, but overall it seems to help)

[10:37:42.0988] <iain>
It would work if you had a bunch of callers that were each passing in a fixed string, I guess

[10:37:49.0694] <iain>
But only if all the objects had the same shape

[10:38:14.0060] <wraitii>
I guess conceptually if you have a function that returns ` obj[someKey]`, but all callers into that pass a (different) constant `someKey`, you could just inline the atomised-constant at the caller site and skip the atomisation

[10:38:36.0202] <wraitii>
that doesn't actually seem completely absurd tbh

[10:39:06.0518] <iain>
"Not completely absurd" is what we aspire for in our heuristics

[10:39:52.0851] <mgaudet>
(If you're using an object like a map, it may also be worth considering if you should use a Map too) -- weirdness abides when you use objects as Maps

[10:39:57.0325] <wraitii>
> <@wraitii:mozilla.org> I guess conceptually if you have a function that returns ` obj[someKey]`, but all callers into that pass a (different) constant `someKey`, you could just inline the atomised-constant at the caller site and skip the atomisation

well constant-but-not-an-atom-for-some-reason, which is a less likely case, but might still happen with some dynamically constructed things

[10:39:59.0860] <mgaudet>
 * (If you're using an object like a map, it may also be worth considering if you should use a Map too -- weirdness abides when you use objects as Maps)

[10:40:18.0970] <wraitii>
> <@mgaudet:mozilla.org> (If you're using an object like a map, it may also be worth considering if you should use a Map too -- weirdness abides when you use objects as Maps)

Yeah I suppose I should update most of our objects-as-map-code to use proper maps

[10:42:14.0946] <iain>
But do test perf; we have optimized property access a lot, but Maps get less use and have had less elbow grease applied.

[10:43:10.0159] <wraitii>
We do use Map() in some very hot code, maybe I could try looking into that specifically. I don't really do any of these things without a profiler anyways, because expectations can be rather deceiving 

[10:43:13.0429] <wraitii>
Thanks again for your answers

[10:46:19.0557] <wraitii>
To be honest things seem to work rather well right now, and with spectre removed I’m having trouble finding places to optimize 

[11:06:07.0518] <sfink>
Obects with a null prototype (`Object.create(null)` are less weird than standard objects with prototype `Object.prototype`, but yes, `Map`s are semantically a cleaner match but lack optimization.

[11:11:15.0080] <wraitii>
I think we tend to go with ‘{}’ so maybe not the best 

[11:13:19.0943] <wraitii>
Part of the reason I was  wondering is that since trial inlining happens once, unles we bailout from ion (and thus reset the counter). So if we end up compiling a metamorphic ion function, we may never get to respecialize it later. Not entirely sure of the interplay here basically

[11:13:57.0302] <sfink>
I think where I've run into it is
```
js> "constructor" in {}
true
js> "constructor" in Object.create(null)
false
```

[11:14:03.0350] <sfink>
also `"length" in []`

[11:38:16.0154] <liam_g>
What is the best strategy for error / exception handling in Spidermonkey? I really don't like the bool return system which forces you to use out params for basic things, and I'm trying to avoid it as much as possible. My current approach is to check every jsapi function and if it fails, log it and throw a c++ exception. If an exception is caught, it resets the Context.  This way my native functions can only return true, and if they fail, the whole system resets. (I'm only talking about jsapi exceptions; regular javascript errors are handled elsewhere and don't reset the system).

Does this seem like a good approach, or are there things that I haven't considered?

[11:40:28.0375] <liam_g>
Another option I thought of would be to wrap all returns in std::expected, or something similar. I think this might make the code better, though it sounds like a lot of work, and obviously we have to wait for c++23.

[11:43:49.0568] <iain>
The bool return system is, in our opinion, the best strategy. That's why we use it. SpiderMonkey is not designed to work with C++ exceptions.

[11:44:49.0505] <liam_g>
Hmm, so embrace the out params then?

[11:45:52.0777] <iain>
That would be my advice. You get used to it. In a lot of cases, we return object-or-null, where nullptr means that the call failed.

[13:01:32.0654] <Redfire>
translating that to rust `Result` is really annoying, which makes me sad

[13:01:56.0417] <Redfire>
the bool return system, that is

[14:04:29.0297] <sfink>
in a past non-JS embedding I did, I injected wrappers on both sides of the scripting language's interface. Failures would get converted to C++ exceptions and thrown. Any C++ function or code called from the language would be wrapped in a try block, and exceptions would be converted to the language's equivalent.

[14:05:25.0424] <sfink>
any time a C++ exception unwound frames belonging to the language, it caused problems. I was using an interface generator, so I was able to automate the wrapping on both sides to prevent that from ever happening.

[14:07:18.0966] <sfink>
We've talked about switching to a Rust-like `Result`. It's possible it could still happen, but I wouldn't hold my breath.

[14:07:35.0383] <sfink>
(and it doesn't resolve the tension with C++ exceptions)

[14:09:45.0986] <sfink>
If I were embedding JSAPI today, I'd probably stick with the bool return stuff for anything close to the JSAPI, especially stuff underneath (called by) it.


2023-06-02
[22:47:17.0100] <wraitii>
Think I found a small bug in our code by looking at places where we failed to attach stubs

[23:04:14.0521] <Redfire>
> <@sfink:mozilla.org> We've talked about switching to a Rust-like `Result`. It's possible it could still happen, but I wouldn't hold my breath.

That makes sense, it's a lot of work for not that much gain overall without the language machinery to make it nice to work with.

[23:04:46.0949] <Redfire>
It's just on my end, I'm mostly just ending up ignoring the booleans because I haven't set them up to return the exception if one occurs.

[23:06:30.0298] <Redfire>
I do have a wrapper that turns rust panics into errors, but that's a separate thing entirely. The `Result` system is vastly preferred.

[07:09:30.0248] <wraitii>
interestingly, Array.find() seems slightly faster than IndexOf for atomised strings, since it ends up running more specialised JIT code than the C++ code

[07:09:36.0059] <wraitii>
 * interestingly, Array.find() seems slightly faster than Array.IndexOf for atomised strings, since it ends up running more specialised JIT code than the C++ code

[07:09:39.0786] <wraitii>
 * interestingly, Array.find() seems slightly faster than Array.IndexOf() for atomised strings, since it ends up running more specialised JIT code than the C++ code

[07:10:08.0430] <wraitii>
probably unnoticeable in anything that isn't a toy test though

[08:51:21.0092] <mgaudet>
> <@wraitii:mozilla.org> Think I found a small bug in our code by looking at places where we failed to attach stubs

I'd not be entirely surprised by that! Places where we fail to attach stubs are often behaviours that are rare or bizarre enough to not invest the time to build stubs for. It just so happens sometimes this is also buggy code. 

[08:53:19.0375] <wraitii>
There was indeed a bug :)

[08:53:31.0468] <wraitii>
There's no 'better' way to look at this kind of thing than Ionflags+jitspew / looking at compiled code (within the profiler), right ? 

[08:54:37.0623] <mstange>
For V8 there's this: https://devblogs.microsoft.com/typescript/introducing-deopt-explorer/#introducing-deopt-explorer

[08:54:54.0645] <mgaudet>
wraitii: Well, for stubs there's CACHEIR_LOGS and http://tomschuster.name/cacheir-tools/ 

[08:55:26.0559] <wraitii>
ah, awesome

[08:56:07.0723] <wraitii>
> <@mstange:mozilla.org> For V8 there's this: https://devblogs.microsoft.com/typescript/introducing-deopt-explorer/#introducing-deopt-explorer

ah that is _cool_, but won't apply unfortunately

[08:56:17.0425] <mgaudet>
wraitii: There's also https://mozilla-spidermonkey.github.io/cacheirhealthreport/ 

[08:56:42.0002] <mgaudet>
Which was another tool similarly aimed at trying to diagnose issues using cache logs

[08:56:53.0924] <wraitii>
think that's a separate compile flag I haven't enabled 

[08:58:33.0356] <iain>
I think it only requires jitspew to be enabled

[08:58:36.0311] <mgaudet>
Possibly -- when you compile SpiderMonkey I think `--enable-jit-spew` does it

[10:15:53.0111] <mgaudet>
😆 [`JSC::JSGlobalObject::IsHavingABadTime`](https://searchfox.org/wubkat/source/Source/JavaScriptCore/runtime/JSGlobalObject.h#934)

[12:48:30.0872] <TheQwertiest>
Hey everyone!
Another small question: is it possible to do something like this in a realm-less environment?
```
// storedValue_ contains JS::Heap<Value>

JS::Heap<JSObject*> GetStoredObject() {
  return JS::Heap<JSObject*>{ storedValue_.get().toObject() };
}

```

context: I want to use this stored object to retrieve realm. As in `JSAutoRealm(cx, GetStoredObject().get())`

[12:48:42.0680] <TheQwertiest>
 * Hey everyone!
Another small question: is it possible to do something like this (in a realm-less environment)?

```
// storedValue_ contains JS::Heap<Value>

JS::Heap<JSObject*> GetStoredObject() {
  return JS::Heap<JSObject*>{ storedValue_.get().toObject() };
}

```

context: I want to use this stored object to retrieve realm. As in `JSAutoRealm(cx, GetStoredObject().get())`

[12:51:02.0798] <mgaudet>
So... Q1: If this object is going to be an object why not store it as an object. 2) Seems fine to me? 

[12:51:17.0473] <mgaudet>
This is basically how a bunch of gecko works 

[12:51:31.0003] <mgaudet>
https://searchfox.org/mozilla-central/source/dom/base/Element.cpp#3680 

[12:53:19.0298] <TheQwertiest>
> <@mgaudet:mozilla.org> So... Q1: If this object is going to be an object why not store it as an object. 2) Seems fine to me?

well, the code above is simplified: in the real code, this is a global/context-specific heap object storage, that stores everything as values. I could rewrite it to store different types of objects separately, but I'd rather avoid doing that (cause extra work :D)

[12:53:39.0454] <TheQwertiest>
> <@mgaudet:mozilla.org> So... Q1: If this object is going to be an object why not store it as an object. 2) Seems fine to me?

 * well, the code above is simplified: in the real code, this is a global/context-specific heap storage, that stores everything as Heap<Value>. I could rewrite it to store different types of objects separately, but I'd rather avoid doing that (cause extra work :D)

[12:53:48.0316] <mgaudet>
Fair enough :) 

[12:54:00.0309] <mgaudet>
Seems fine tho overall. 

[12:54:48.0165] <TheQwertiest>
> <@mgaudet:mozilla.org> https://searchfox.org/mozilla-central/source/dom/base/Element.cpp#3680

actually, this looks close to what I'm trying to do: I'm trying to use js objects as targets for events/microtask and etc

[12:55:31.0879] <TheQwertiest>
> <@mgaudet:mozilla.org> Seems fine tho overall.

the thing I'm worried about is GC: won't it be trigger during JS::Heap<JSObject*> construction and copy?

[12:55:46.0904] <TheQwertiest>
thus making the stored object invalid?

[12:56:00.0449] <TheQwertiest>
> <@mgaudet:mozilla.org> Seems fine tho overall.

 * the thing I'm worried about is GC: won't it be triggered during JS::Heap\<JSObject\*> construction and copy?

[12:56:38.0733] <TheQwertiest>
or would it be fine as long as original object value is still traced?

[12:56:47.0748] <mgaudet>
(oh, I suppose I should say, you probably should use a MutableHandle outparan

[12:56:49.0711] <mgaudet>
 * (oh, I suppose I should say, you probably should use a MutableHandle outparam

[12:56:56.0938] <TheQwertiest>
 * or would it be fine as long as original object value is still traced? (storedValue_  in my example)

[12:57:23.0353] <mgaudet>
but generally as  a rule if you're on the main thread, GC wont run if you don't call anything which takes a JSContext param

[12:57:59.0358] <TheQwertiest>
JS::Heap<> ctor and copy constructor do not take cx :D

[12:58:15.0600] <mgaudet>
Precisely :) So from that perspective, I think you should be safe

[12:59:04.0405] <TheQwertiest>
> <@mgaudet:mozilla.org> (oh, I suppose I should say, you probably should use a MutableHandle outparam

hm... but how would I do that? I don't think MutableHandle accepts JS::Heap things

[12:59:36.0623] <mgaudet>
No, you'd have a root you pass in, then fill in inside of GetStoredObject

[12:59:47.0256] <TheQwertiest>
and to have a root I need realm :D

[13:00:09.0522] <mgaudet>
(afk for a bit sorry) 

[13:00:09.0888] <TheQwertiest>
and I need said object to extract realm :D

[13:00:19.0006] <TheQwertiest>
sure

[13:01:05.0467] <TheQwertiest>
you've answered my question anyway =) (MutableHandle usage aside)

[13:01:07.0057] <TheQwertiest>
thanks!

[15:13:01.0958] <sfink>
TheQwertiest: I would not return a `Heap<>`. That is a return value, which is on the stack, and it doesn't really make sense to have a `Heap` on the stack. You don't gain anything from the `Heap<>` wrapping. It would be better to just return `JSObject*`.

[15:13:11.0946] <sfink>
also, why do you need a realm to have a root?

[15:14:27.0440] <TheQwertiest>
sfink: 

> It would be better to just return JSObject*

would it be safe to apply AutoRealm to raw JSObject* extracted from JS::Heap?

[15:14:33.0715] <sfink>
yes

[15:15:12.0496] <TheQwertiest>
> <@sfink:mozilla.org> also, why do you need a realm to have a root?

I dont need realm itself to have a root, but I need to have realm to have ability to root objects :)

[15:15:45.0193] <sfink>
that's the part I don't get. I didn't think the cx needed to be in a realm or anything in order to root stuff.

[15:18:57.0797] <TheQwertiest>
> <@sfink:mozilla.org> that's the part I don't get. I didn't think the cx needed to be in a realm or anything in order to root stuff.

hm, I think it was mentioned both in API docs, but I can't find where exactly

[15:19:08.0955] <TheQwertiest>
> <@sfink:mozilla.org> that's the part I don't get. I didn't think the cx needed to be in a realm or anything in order to root stuff.

 * hm, I think it was mentioned both in API docs and embed GH repo, but I can't find where exactly

[15:19:33.0923] <TheQwertiest>
> <@sfink:mozilla.org> yes

nice, that will allow me to cleanup the boilerplate code 

[15:19:39.0208] <TheQwertiest>
> <@sfink:mozilla.org> yes

 * nice, that will allow me to cleanup the boilerplate code, thanks :)

[15:19:50.0264] <sfink>
anyway, in this case of a simple accessor, I don't see any need for a Handle, Mutable or otherwise. A `JSObject*` return value is fine.

[15:22:05.0135] <TheQwertiest>
> <@theqwertiest:mozilla.org> hm, I think it was mentioned both in API docs and embed GH repo, but I can't find where exactly

mind you, that my codebase was first written around 5xESR era, so something could've changed regarding all that

[15:22:19.0910] <TheQwertiest>
> <@theqwertiest:mozilla.org> hm, I think it was mentioned both in API docs and embed GH repo, but I can't find where exactly

 * mind you, that my codebase was first written around 5xESR era, so something could've changed regarding globals/realms and etc

[15:22:36.0044] <TheQwertiest>
 * mind you, that my codebase was first written around 5xESR era, so something could've changed regarding globals/realms and etc since then

[15:23:54.0869] <TheQwertiest>
what about Heap<Value>? would it be okay to return it as Value& as well?

[15:32:00.0022] <sfink>
if you don't want to extract the object, then just return a `Value`

[15:33:48.0296] <sfink>
(but in that case, do you even need an accessor? Only if you're calling it from outside the class, I guess.)

[15:35:16.0885] <sfink>
the "normal" thing would be `JSObject* GetStoredValue() { return &_storedValue.toObject() }` assuming you know it'll have a valid object pointer in it.

[15:35:34.0706] <sfink>
 * `JSObject* GetStoredValue() { return _storedValue.toObjectOrNull() }` if not.

[15:39:58.0281] <TheQwertiest>
riiiight

[15:40:36.0379] <TheQwertiest>
guess that's why you shouldn't start writing non-trivial things on Friday evenings after work xD

[15:41:21.0567] <TheQwertiest>
thanks! ... back to removing all the useless code, I've just written ...

[16:22:50.0286] <TheQwertiest>
is there something like weakptr available for GC things?

[16:23:47.0698] <TheQwertiest>
i.e. don't prevent from removal, but have ability to promote to rooted GC thing if it's still alive

[16:28:21.0484] <mccr8>
> <@theqwertiest:mozilla.org> i.e. don't prevent from removal, but have ability to promote to rooted GC thing if it's still alive

There's some weak pointer stuff in js/public/GCAPI.h. I'm not sure how easy it is to use.

[16:28:44.0791] <mccr8>
See the "Weak pointers and garbage collection" section.

[16:44:57.0988] <TheQwertiest>
thanks, I'll take a look


2023-06-03
[18:04:52.0304] <sfink>
 * the "normal" thing would be JSObject* GetStoredValue() { return &_storedValue.toObject() } assuming you know it'll have a valid object pointer in it.

[18:05:09.0765] <sfink>
> <@sfink:mozilla.org> the "normal" thing would be JSObject* GetStoredValue() { return &_storedValue.toObject() } assuming you know it'll have a valid object pointer in it.

`JSObject* GetStoredValue() { return _storedValue.toObjectOrNull() }` if not.

[18:05:37.0666] <sfink>
(sorry, I meant to say this after the earlier message, but ended up replacing it instead)

[05:00:52.0772] <TheQwertiest>
question regarding tracing: if I have custom JS object `a` that have a native with Trace that traces Heap object `b`, is it the same as if I had `let a =...; let b = ...; a.field = b;` in JS? I.e. it detects that `b` is part of and `a` (and thus will detect cycles and GC everything properly in case `b` stores `a`)

[05:02:02.0694] <TheQwertiest>
and thus I don't need to manually 'break' links to `b` in my custom object for GC to work properly and collect `a` once it's not referenced anywhere

[05:02:21.0908] <TheQwertiest>
 * and thus I don't need to manually 'break' links to `b` in my custom object for GC to work properly and collect `a` (and contained `b`) once it's not referenced anywhere

[05:03:01.0446] <Redfire>
if `b` is stored as an object value in the reserved slot, it should, but if `b` is stored in a private value as part of a struct, it isn't

[05:03:13.0460] <Redfire>
or at least that's what I was told when I asked a while ago

[05:04:02.0308] <TheQwertiest>
yea, I know about reserved slot, but in this case it's stored in traced native

[05:04:18.0104] <Redfire>
so the private value thing I said?

[05:06:09.0084] <TheQwertiest>
something like that: custom JS object has a reserved slot, which stores a corresponding native object, which itself has a container with Heap objects, and said custom JS object has a custom tracer in JSClassOps which traces these Heap objects

[05:07:20.0859] <TheQwertiest>
so the question is, whether GC consider objects traced via custom tracer in JSClassOps as part of an object that this JSClassOps  is for

[05:09:18.0714] <TheQwertiest>
or if it just a way for global tracer to reach inside (i.e. it doesn't make a relation between object with said JSClassOps and all the data that traced with custom tracer)

[05:17:08.0032] <TheQwertiest>
on unrelated note: HTMLImageElement spec is pure cancer

[05:18:02.0394] <TheQwertiest>
 * on unrelated note: HTMLImageElement spec (as in actual html standard) is pure cancer

[05:20:08.0789] <TheQwertiest>
 * yea, something like that: custom JS object has a reserved slot, which stores a corresponding native object, which itself has a container with Heap objects, and said custom JS object has a custom tracer in JSClassOps which traces these Heap objects

[09:43:48.0497] <TheQwertiest>
> <@theqwertiest:mozilla.org> question regarding tracing: if I have custom JS object `a` that have a native with Trace that traces Heap object `b`, is it the same as if I had `let a =...; let b = ...; a.field = b;` in JS? I.e. it detects that `b` is part of and `a` (and thus will detect cycles and GC everything properly in case `b` stores `a`)

and a follow-up question: if JSClassOps tracer does not add such relation between JS things, is it possible to add it manually? (without resorting to storing everything in reserved slots)

[10:38:02.0347] <CosminS|sheriffduty>
jonco: hi, any chance you could tackle Bug 1832153? It has 321 total failures in the last 30 days https://treeherder.mozilla.org/intermittent-failures/bugdetails?startday=2023-05-04&endday=2023-06-03&tree=trunk&failurehash=all&bug=1832153

[10:38:04.0135] <botzilla>
https://bugzil.la/1832153 — NEW (jonco) — High frequency valgrind-test | 16 bytes in 1 blocks are definitely lost at malloc / js_arena_malloc / js_pod_arena_malloc / maybe_pod_arena_malloc

[11:14:38.0305] <sfink>
TheQwertiest: I don't entirely follow the way you're describing it, as `a` containing `b`, but I think I get the gist. Anyway, the answer is that it's doing what you want. Nothing is going to trace `b` automatically. There's no global trace that loops over custom trace functions or anything. Having a custom tracer that traces a `Heap` field results in the same effect as an object stored in a non-private reserved slot.

[11:15:20.0304] <sfink>
in either case, the result is the same: if the only way to get to that `b` is through `a`, then `b` will be collected if there is no `a` that causes it to be traced.

[11:15:29.0915] <sfink>
you should definitely not have to manually break links or anything.

[11:17:11.0022] <sfink>
I think of it as "reachability" rather than "containment". Everything reachable from roots is live. Everything unreachable from roots will be collected. A custom trace function on `obj1` will only be invoked if `obj1` is reachable. Same with a reserved slot on `obj1`.

[11:18:24.0119] <sfink>
a custom trace function could look through whatever data structures it wants to discover objects to be traced, so it's not limited to simple containment. If the object that has the custom trace function is reachable, then everything the trace function processes will be reachable.

[11:19:15.0484] <sfink>
If the object with the trace function is not reachable, then the trace function will not be invoked and so it can't make anything else reachable.

[11:20:23.0438] <sfink>
(note that I am avoiding saying something like "if obj1 is not reachable, then the things that its trace function would have processed will not be reachable". That's only true if nothing else causes those other objects to be reachable. They just won't be reachable *because of `obj1`*.)

[11:20:52.0313] <sfink>
"because of" could also be described as "through" or "via".

[11:24:23.0460] <TheQwertiest>
sfink: thanks for the detailed answer! It answers almost everything, but one question remains though, will it detect circular dependency this way? I.e. in case `b` is traced through `a` and `a` is traced through `b` (where `a` and `b` are custom JS objects with tracers implemented)

[11:25:12.0183] <sfink>
If either `a` or `b` is reachable from something else (as in, from a path starting at a root and going through something else), then both will be kept. Otherwise, both will be discarded.

[11:25:24.0433] <sfink>
circular dependencies are not a problem

[11:26:52.0995] <TheQwertiest>
awesome! Apparently I was doing it wrong for more than 5 years xD
thanks again :)

PS: But IIRC I do have to manually clean PersistentRooted things

[11:27:03.0928] <sfink>
yes, because those are roots

[11:27:07.0331] <sfink>
they are *always* reachable

[11:27:27.0124] <sfink>
and that's the big risk in using them, you'll need to manually clean them when it makes sense

[11:28:24.0621] <sfink>
(and if anything in your heap that is reachable from a `PersistentRooted` can reach that `PersistentRooted`, then you're hosed and you can never clean it up)

[11:29:14.0409] <TheQwertiest>
yea, I think my misunderstanding of tracing originated exactly from the handling required by PersistentRooted 

[11:29:25.0679] <TheQwertiest>
 * yea, I think my misunderstanding of how tracing works originated exactly from the handling required by PersistentRooted 

[11:29:54.0093] <TheQwertiest>
and I've manually breaking all 'links' for JS things for all this time...

[11:29:59.0168] <TheQwertiest>
 * and I've been manually breaking all 'links' for JS things for all this time...

[11:40:03.0489] <TheQwertiest>
totally unrelated note: hm... is it possible to have a realm without global? Context: wondering whether I should `GetCurrentRealmOrNull` or `GetCurrentGlobalOrNull` for my asserts

[11:40:18.0111] <TheQwertiest>
 * totally unrelated question: hm... is it possible to have a realm without global? Context: wondering whether I should `GetCurrentRealmOrNull` or `GetCurrentGlobalOrNull` for my asserts

[11:40:21.0298] <TheQwertiest>
 * totally unrelated question: is it possible to have a realm without global? Context: wondering whether I should `GetCurrentRealmOrNull` or `GetCurrentGlobalOrNull` for my asserts

[11:40:30.0101] <TheQwertiest>
 * totally unrelated question: is it possible to have a realm without associated global? Context: wondering whether I should `GetCurrentRealmOrNull` or `GetCurrentGlobalOrNull` for my asserts

[11:40:34.0826] <TheQwertiest>
 * totally unrelated question: is it possible to have a realm without associated global? Context: wondering whether I should `GetCurrentRealmOrNull` or `GetCurrentGlobalOrNull` for asserts

[11:44:23.0558] <TheQwertiest>
 * totally unrelated question: is it possible to have a realm without associated global? Context: wondering whether I should `GetCurrentRealmOrNull` or `GetCurrentGlobalOrNull` for asserts to check if current realm is usable

[15:50:43.0040] <sfink>
in normal operation, a realm will always have a global. But the Realm doesn't keep the global alive, so [briefly during a GC](https://searchfox.org/mozilla-central/rev/f5dde549cca5193743d11daa1c5f08258bee9d42/js/src/vm/Realm.h#439-447) you will see a global-less Realm.


2023-06-04
[00:29:39.0089] <jonco>
> <@cosmin:mozilla.org> jonco: hi, any chance you could tackle Bug 1832153? It has 321 total failures in the last 30 days https://treeherder.mozilla.org/intermittent-failures/bugdetails?startday=2023-05-04&endday=2023-06-03&tree=trunk&failurehash=all&bug=1832153

Hi, I have looked at this but didn't find any reason for that to be failing.  I'll take another look next week.

[02:06:43.0075] <canadahonk>
hi all, are there nightly builds of jsshell anywhere (public)?

[05:29:37.0344] <mstange>
canadahonk: there are jsshell zips at https://ftp.mozilla.org/pub/firefox/nightly/latest-mozilla-central/

[05:52:13.0383] <canadahonk>
thank you!


2023-06-05
[02:41:18.0263] <liam_g>
Are there API functions for WeakSet?

[08:40:03.0121] <mgaudet>
liam_g: I don't think we have any no

[08:40:26.0439] <mgaudet>
mstange: Have you ever seen anything like https://bugzilla.mozilla.org/show_bug.cgi?id=1836543 -- or am I just holding it wrong? 

[08:41:10.0741] <mgaudet>
(Sorry, pinged you because I'd been trying to use samply, but feel free to redirect me as this isn't a samply bug directly :P) 

[08:43:03.0420] <mstange>
mgaudet: I've never run a build which has both `--enable-perf` and `--enable-debug`

[08:44:08.0830] <mstange>
mgaudet: The similar bug I was thinking of is https://bugzilla.mozilla.org/show_bug.cgi?id=1832825 but that's different

[08:44:23.0914] <mstange>
mgaudet: I'd needinfo denispal on your bug, I think you may actually be the first person to find it

[08:44:41.0980] <mgaudet>
:) ok. thankk for the pointer 

[08:45:57.0820] <canadahonk>
just wondering, are there any public "official" test262 results of spidermonkey?

[08:48:10.0308] <mgaudet>
canadahonk: Once upon a time I would have pointed you to https://test262.report/ -- but I don't think it's up to date anymore

[08:48:14.0830] <canadahonk>
 * just wondering, are there any public "official" test262 results of spidermonkey? (trying to check if mine are roughly as expected)

[08:48:38.0428] <canadahonk>
> <@mgaudet:mozilla.org> canadahonk: Once upon a time I would have pointed you to https://test262.report/ -- but I don't think it's up to date anymore

I am working on a new site like it ;) (hence my asking to compare/check)

[08:48:47.0475] <canadahonk>
(is it cool to send link?)

[08:49:21.0635] <mgaudet>
sure :) 

[08:49:27.0885] <canadahonk>
https://test262.fyi (very WIP)

[08:49:44.0562] <mgaudet>
> <@mstange:mozilla.org> mgaudet: I've never run a build which has both `--enable-perf` and `--enable-debug`

Yeah. That seems to have done it. :) Will leave note on bug

[08:51:51.0186] <canadahonk>
 * https://test262.fyi (very WIP, feedback welcome)

[08:52:28.0884] <mgaudet>
> <@canada_goose:mozilla.org> https://test262.fyi (very WIP, feedback welcome)

Seems to be a good start. 

Curious what you're usecase is? (I have features I'd like, but interested in why you're building it :D ) 

[08:52:58.0345] <canadahonk>
I saw someone randomly post how test262.report was outdated and thought I could probably make something like it and.. profit?

[08:53:27.0551] <canadahonk>
 * I saw someone randomly post how test262.report was outdated and thought I could probably make something like it and.. profit? only started it ~2 days ago lol

[08:54:52.0125] <mgaudet>
fair enough :D 

[08:55:48.0576] <mgaudet>
It's interesting to see the runtimes reported -- also curious that the SpiderMonkey runtime is 2x JSC's and 30% higher than V8s 

[08:56:50.0660] <canadahonk>
times are mostly for fun tbf, not a real benchmark

[08:57:02.0107] <canadahonk>
 * times are mostly for fun/curiosity tbf, not a real benchmark

[08:58:08.0249] <mgaudet>
For sure -- though if we could knock 30% off our CI time to run test262 jobs that would be a nice outcome still :)

[09:01:22.0085] <canadahonk>
fwiw I run each test in an individual runtime, 24 in parallel

[09:01:31.0632] <canadahonk>
 * fwiw I run each test file individually w/ jsshell, 24 in parallel

[09:01:46.0092] <canadahonk>
 * fwiw I run each test file individually w/ jsshell, 24 in parallel (on github actions)

[09:03:22.0907] <canadahonk>
I know [LibJS](https://libjs.dev)'s runner is fast as they only use one instance and pipe tests into stdin iirc

[09:03:45.0546] <canadahonk>
 * I know [LibJS](https://libjs.dev/)'s own runner is fast as they only use one instance and pipe tests into stdin iirc

[09:03:57.0740] <canadahonk>
 * fwiw I use my own runner/harness and run each test file individually w/ jsshell, 24 in parallel (on github actions)

[09:04:06.0461] <canadahonk>
 * fwiw I use my own runner/harness (not engine's) and run each test file individually w/ jsshell, 24 in parallel (on github actions)

[09:08:47.0657] <canadahonk>
 * fwiw I use my own runner/harness (not engines') and run each test file individually w/ jsshell, 24 in parallel (on github actions)

[10:15:42.0154] <jrmuizel>
jonco: do you think you'll have time to look at https://bugzilla.mozilla.org/show_bug.cgi?id=1821293 any time soon? We have mounting evidence that we have a GC problem on SP3 compared to other browsers and 1821293 seems like something we need to fix in order to dig in any further

[10:17:25.0238] <jonco>
jrmuizel: I don't have time to work on it at the moment. It's also not a small piece of work.  Maybe this is something that can be planned for H2.

[10:18:42.0450] <jrmuizel>
Are you the best person to work on it? or could someone else do it?

[10:32:38.0441] <iain>
jrmuizel: We have relatively few people who know GC stuff well enough to confidently make substantial changes to it, and they tend to be busy. It might be a good idea to get as much of the preliminary analysis done first before going ahead with an implementation. It looks like the hypothesis in that bug is that the problem is shape pointers in ICs keeping realms alive. Have we had somebody look carefully at the GC graph to make sure there aren't any other edges keeping the realm alive?

[10:34:18.0395] <jrmuizel>
smaug: ^

[10:37:38.0361] <mccr8>
My dominator tree analyzer for GC logs might be able to help answer questions like that. https://github.com/amccreight/heapgraph/blob/master/g/dom_tree.py

[10:39:48.0723] <jrmuizel>
iainjonco: out of curiosity do you know what keeps the ICs alive?

[11:17:17.0609] <iain>
I do not. Worth having somebody look into that, maybe. I don't have a great sense of how the benchmark is architected. Is it possible that there's an IC in the runner that accesses objects from each of the individual tests?

[11:33:01.0316] <smaug>
there might be other edges too, but we need to cut them all

[11:34:12.0612] <smaug>
the DOM side of the relevant realm is already rather dead

[11:34:41.0869] <smaug>
but it can't release itself since at least jit code has strong references to it

[11:43:01.0220] <smaug>
(I don't understand how long and in which cases jit needs to have references to the relevant global/realm)

[12:16:05.0884] <iain>
I see at least two possibilities re jitcode edges. One is that there is jitcode associated with functions in a particular realm that is being kept alive somehow, and that code is subsequently keeping the realm alive. The second is that there is jitcode in a surviving realm (eg the runner?) guarding a shape from a dead realm, which keeps the dead realm alive because shape guards aren't weak pointers.

[13:47:10.0026] <mgaudet>
iain: So some earlier investigation into that bug had pointed the finger at the shape list created by stub folding. i'm wondering if we're folding stubs across realms, but as a result keeping multiple realms alive. 

[13:47:51.0573] <mgaudet>
I've whipped up a patch to avoid folding across realms; is there a pointer to how to best evaluate sp3 these days?

[13:47:59.0731] <mgaudet>
(the answer may well be `./mach perf`) 

[13:48:19.0156] <iain>
Yeah, I just run things on try

[13:49:16.0316] <mgaudet>
iain: is there a specific job, or just run the desktop-firefox preset?

[13:49:52.0420] <iain>
I normally use `./mach try fuzzy` to run speedometer3 on windows and maybe linux

[13:50:31.0509] <iain>
But possibly I should be adapting to use `./mach perf`

[13:52:12.0126] <iain>
`test-(windows10/linux1804)-64-shippable-qr/opt-browsertime-benchmark-firefox-speedometer3`

[13:52:38.0439] <iain>
We also have `nightly-as-release` jobs, but they don't turn out to be significantly different in practice

[13:55:53.0792] <iain>
mgaudet: Looking at the perf job list specifically: "Speedometer 3 windows firefox" seems like the way to go

[13:56:15.0518] <mgaudet>
iain: rebuild 10 sufficient these days? 

[13:56:35.0830] <iain>
Start there and see how noisy things are

[13:56:44.0715] <mgaudet>
👍️

[13:57:45.0801] <mgaudet>
side note: is windows going to be the final measurement platform for SP3? Or still TBD? 

[14:01:32.0179] <iain>
There are OKRs for both desktop and mobile. Discussions are ongoing about how many different Android phones we should be measuring on mobile. I don't see anywhere in the desktop OKRs that we specifically say that we're targeting windows, but in practice that's where our users are.

[14:03:26.0507] <iain>
Asked in the sp3 channel. Linux is not part of the goal, but windows and mac are.

[14:07:01.0623] <mgaudet>
Ok, that's good information. Thank you :) 

[14:26:10.0396] <iain>
Patricia chimed in to add: 80/20 weighting for Windows/Mac


2023-06-06
[02:52:31.0347] <jonco>
mgaudet: This for looking into this, I'm interested to see what difference your patch makes.  Regardless of benchmark scores though, it sounds like stub folding across realms is something we should avoid.

[04:39:17.0725] <padenot>
sfink: hi, can you cc me to 1690111 if there's some more context there?

[06:38:33.0294] <sfink>
padenot: done. Warning: 2 years old, lots of my rambling comments.

[06:40:48.0798] <Ms2ger>
You're making me curious now 😅

[07:40:36.0788] <mgaudet>
> <@jonco:mozilla.org> mgaudet: This for looking into this, I'm interested to see what difference your patch makes.  Regardless of benchmark scores though, it sounds like stub folding across realms is something we should avoid.

It certainly feels like there's a chance for creating edges that last too long. Having said that, looks like [my patch doesn't really move the needle at all](https://treeherder.mozilla.org/perfherder/compare?originalProject=try&originalRevision=47f0d07ab5e85f0e2a67b0dabcadcfb1b02b5e3d&newProject=try&newRevision=b0ea002e2cf8c79c16bed1352e8876a903e498ee&page=1&framework=13)

[07:40:45.0782] <mgaudet>
I'll still put the patch up for review though

[07:43:21.0769] <jonco>
mgaudet: Great. As alluded to above, to allow everything that should be dead to get collected we need to cut all edges, and often there's no improvement until the last one is gone.

[07:43:55.0530] <mgaudet>
That makes sense. I had been hoping that this just happened to be the critical edge, but alas :) 


2023-06-07
[19:58:28.0462] <luyahan>
Hi all I open a patch a month Ago https://phabricator.services.mozilla.com/D175022. But the patch doesn't be landed. What I miss?

[20:28:53.0040] <iain>
luyahan: Sorry, most of us are used to reviewing patches from people who have Lando access and can land their own patches once they've been approved. If your reviewer has approved the patch but forgotten to land it, please leave a comment on Phabricator or in this channel, and somebody can land it for you.

[20:29:07.0874] <iain>
I queued your patch for landing.

[12:37:01.0903] <mgaudet>
sfink: https://phabricator.services.mozilla.com/D180244 The review request there is more an f? than an r?  (So feel free to sit on it for a while) 

[12:37:54.0429] <sfink>
I skimmed it already. Looks a lot better than my initial stab at it.

[12:38:19.0090] <sfink>
tiny bit of unnecessary rooting for the TryGeneric return value

[12:39:00.0935] <sfink>
I guess I should be saying that on the patch. I wasn't sure if you wanted comments yet.

[12:40:19.0674] <sfink>
but yeah, I'm doing my last-minute self-review right now, so I'll come back to your patch a bit later

[12:40:30.0171] <sfink>
(or when I need a larger chunk of procrastination time)

[12:47:03.0267] <mgaudet>
Sound good :) 

[13:52:44.0122] <TheQwertiest>
hey everyone!
Is it possible to somehow remove queued promises? Or maybe somehow add a custom check before their execution?
Context:
- Script is executed within a context and associated global.
- During execution script enqueues promises.
- During the same execution mention global dies.
- Promises are then processed via `RunJobs()`.
- Promise handler invokes methods that point to the dead global and everything explodes.

[13:52:59.0097] <TheQwertiest>
 * hey everyone!
Is it possible to somehow remove queued promises? Or maybe somehow add a custom check before their execution?
Context:

- Script is executed within a context and associated global.
- During execution script enqueues promises.
- During the same execution mentioned global dies.
- Promises are then processed via `RunJobs()`.
- Promise handler invokes methods that point to the dead global and everything explodes.

[13:53:19.0048] <TheQwertiest>
 * hey everyone!
Is it possible to somehow remove queued promises? Or maybe add a custom check before their execution?
Context:

- Script is executed within a context and associated global.
- During execution script enqueues promises.
- During the same execution mentioned global dies.
- Promises are then processed via `RunJobs()`.
- Promise handler invokes methods that point to the dead global and everything explodes.

[13:55:00.0923] <TheQwertiest>
 * hey everyone!
Is it possible to somehow remove queued promises? Or maybe add a custom check before their execution?
Context:

- Script is executed within a context and associated global.
- During execution script enqueues promises.
- During the same execution mentioned global dies.
- Promises are then processed via `RunJobs()`. (i.e. `UseInternalJobQueues` was invoked)
- Promise handler invokes methods that point to the dead global and everything explodes.

[13:55:08.0235] <TheQwertiest>
 * hey everyone!
Is it possible to somehow remove queued promises? Or maybe add a custom check before their execution?
Context:

- Script is executed within a context and associated global.
- During execution script enqueues promises.
- During the same execution mentioned global dies.
- Promises are then processed via `RunJobs()`. (i.e. `UseInternalJobQueues` was initialized)
- Promise handler invokes methods that point to the dead global and everything explodes.

[13:56:24.0491] <TheQwertiest>
PS: I'm really surprised that I've discovered this bug only now, despite my program being used for several years already...

[13:56:40.0349] <TheQwertiest>
 * PS: I'm really surprised that I've discovered this bug only now, despite my program being (somewhat) actively used for several years already...

[14:34:10.0635] <sfink>
I don't know enough about Promises to answer, but I would have expected a Promise with a handler that can reach a global to keep that global alive.

[15:16:04.0246] <TheQwertiest>
> <@sfink:mozilla.org> I don't know enough about Promises to answer, but I would have expected a Promise with a handler that can reach a global to keep that global alive.

well, original JS global is alive, but all the native things associated with this global are unusable, so when Promise's handler invokes something that depends on those, everything breaks.

Ideally, I want to do smth like `ShutdownJsExecutionAssociatedWithGlobal`, but IIRC there's nothing like that available.

[15:16:44.0377] <TheQwertiest>
Of course, there is JS_Shutdown, but kills everything xD

[15:16:51.0428] <TheQwertiest>
 * Of course, there is JS\_Shutdown, but it just kills everything xD

[15:18:24.0784] <TheQwertiest>
One way would be to wrap all native methods and props with some check like `IsMyGlobalStillAlive`, but that is a huge amount of boilerplate that I'd really like to avoid

[15:19:06.0244] <TheQwertiest>
especially, since Promises are the only thing that can trigger such scenario

[15:19:12.0053] <TheQwertiest>
 * especially since Promises are the only thing that can trigger such scenario

[15:25:44.0641] <TheQwertiest>
> <@sfink:mozilla.org> I don't know enough about Promises to answer, but I would have expected a Promise with a handler that can reach a global to keep that global alive.

 * well, original JS global is alive, but all the native things associated with this global are unusable, so when Promise's handler invokes something that depends on those, everything breaks.

Ideally, I want to do smth like `ShutdownJsExecutionAssociatedWithGlobal`, but AFAIK there's nothing like that available.

[15:27:11.0293] <sfink>
maybe you could call `interrupt()` on the job queue when shutting stuff down? The [comment]( https://searchfox.org/mozilla-central/rev/887d4b5da89a11920ed0fd96b7b7f066927a67db/js/src/vm/JSContext.h#94-96) sounds promising.

[15:27:48.0836] <sfink>
hm, I guess you only want to stop jobs for that global

[15:27:59.0965] <TheQwertiest>
yeah

[15:28:54.0260] <TheQwertiest>
and InternalJobQueue is not exposed anyway

[15:30:40.0732] <sfink>
I guess the spec specifcally made promises non-cancellable, so I doubt there's going to be some built-in mechanism.

[15:32:05.0072] <sfink>
also, our globals can typically access each other, so there's no easy way to test "could this Promise job ever access global X?"

[15:32:41.0176] <sfink>
(well, we can nuke a compartment, so actually that wouldn't be too difficult)

[15:36:58.0567] <TheQwertiest>
scenario is really simple tho: there is a window executing the script, user refreshes the window, everything associated with old JS execution should (magically) disappear

[15:40:36.0922] <sfink>
I think we [drain the task queue](https://searchfox.org/mozilla-central/source/xpcom/threads/nsThread.cpp#1274) before unloading.

[15:42:02.0643] <sfink>
I guess that doesn't explain it

[15:43:54.0430] <sfink>
I actually don't know how Firefox deals with it. Probably leaks the global and nulls out any global -> C++ pointers?

[15:45:18.0237] <sfink>
arai would probably know.

[15:45:32.0275] <TheQwertiest>
firefox might not have to deal with it at all, since every window is a separate context, iirc

[15:46:05.0852] <TheQwertiest>
every tab*

[15:47:58.0431] <arai>
is this about the embedding case?

[15:48:03.0543] <arai>
or Firefox's case

[15:48:21.0169] <TheQwertiest>
embedding

[15:49:28.0303] <arai>
so, your code calls the queued promise reaction jobs, right?

[15:50:49.0138] <arai>
err, I misread

[15:51:20.0268] <TheQwertiest>
well, my native code calls `RunJobs`, which resolves promises, which calls js promise handlers, which calls native code again =)

[15:51:39.0275] <TheQwertiest>
 * well, my native code calls `RunJobs`, which resolves promises, which calls js promise handlers, which calls native code again =) (crashing everything on the way)

[15:51:41.0152] <arai>
/me reads the backlog

[15:53:43.0077] <iain>
While wrestling with Atomics.waitAsync I spent a lot of time looking at this code: https://searchfox.org/mozilla-central/source/js/src/vm/OffThreadPromiseRuntimeState.h#30

[15:55:02.0629] <iain>
Which implements promises resolved from offthread which don't get confused if the context is shutting down

[15:55:49.0450] <TheQwertiest>
context is alive in my case (since it's shared between all windows)

[15:55:55.0128] <arai>
TheQwertiest: what does "global dies" actually mean?  what operation is it and which part of it causes "everything explodes"  ?

[15:56:29.0364] <arai>
some private data is freed there?

[15:56:57.0259] <iain>
The global is a GC'd object. It shouldn't die if there are still references to it.

[15:57:19.0100] <iain>
 * The global is a GC'd object. It shouldn't be collected if there are still references to it.

[15:58:58.0304] <sfink>
the global is still alive, it just points to embedding stuff that has been torn down. The request is for an easy way to prevent Promise jobs from running without needing to wrap all global -> C++ accesses. (iiuc)

[15:59:50.0976] <TheQwertiest>
> <@arai:mozilla.org> TheQwertiest: what does "global dies" actually mean?  what operation is it and which part of it causes "everything explodes"  ?

- there is a window executing the script
- during script execution a lot of native objects are created
- user refreshes the window
- window refresh makes some old native things unavailable
- old promises invoke handler from old JS execution, which points to old native things
- since those native things are not available anymore, it causes fun stuff like UB, nullptr dereferencing and etc

[16:00:01.0435] <TheQwertiest>
> <@sfink:mozilla.org> the global is still alive, it just points to embedding stuff that has been torn down. The request is for an easy way to prevent Promise jobs from running without needing to wrap all global -> C++ accesses. (iiuc)

yea, exactly

[16:00:24.0246] <TheQwertiest>
> <@sfink:mozilla.org> the global is still alive, it just points to embedding stuff that has been torn down. The request is for an easy way to prevent Promise jobs from running without needing to wrap all global -> C++ accesses. (iiuc)

 * yea, this exactly what I mean

[16:00:39.0314] <TheQwertiest>
> <@arai:mozilla.org> TheQwertiest: what does "global dies" actually mean?  what operation is it and which part of it causes "everything explodes"  ?

 * - there is a window executing the script
- during script execution a lot of native objects are created
- user refreshes the window
- window refresh makes some old native things become unavailable
- old promises invoke handler from old JS execution, which points to old native things
- since those native things are not available anymore, it causes fun stuff like UB, nullptr dereferencing and etc

[16:02:03.0860] <TheQwertiest>
 * - there is a window executing the script
- during script execution a lot of native objects are created
- user refreshes the window
- window refresh makes some old native things become unavailable
- old promises invoke handlers from old JS execution, which points to old native things
- since those native things are not available anymore, it causes fun stuff like UB, nullptr dereferencing and etc

[16:02:21.0418] <TheQwertiest>
 * yea, this is exactly what I mean

[16:02:27.0692] <sfink>
I guess I should say "to remove the need to wrap all global -> C++ accesses in case the embedding stuff has been torn down"

[16:02:29.0526] <arai>
simple way is to create your on job queue, instead of internal job queue.  and add a check for the global there.  that's what browser does with Step 2.1 in https://html.spec.whatwg.org/#hostenqueuepromisejob

[16:02:30.0514] <arai>
> If job settings is not null, then check if we can run script with job settings. If this returns "do not run" then return.

[16:03:23.0451] <sfink>
that seems like a good idea to me

[16:05:43.0655] <arai>
it's done here in browser: https://searchfox.org/mozilla-central/rev/887d4b5da89a11920ed0fd96b7b7f066927a67db/xpcom/base/CycleCollectedJSContext.cpp#203
```cpp
if (global && !global->IsDying()) {
```

[16:06:33.0205] <TheQwertiest>
yea, I guess this is the only way, thanks for the links =)

[16:06:46.0350] <TheQwertiest>
... another DOM thing to replicate ...

[16:06:52.0682] <TheQwertiest>
 * ... another DOM thing to replicate ... le sigh ...

[16:07:02.0710] <TheQwertiest>
 * guess this is the only way, thanks for the links =)


2023-06-08
[08:14:04.0292] <jonco>
iain: We were talking at the last all hands about somewhere in the JIT where barriers were elided because we could prove they weren't necessary. You don't happen to remember where this was?

[08:15:54.0782] <iain>
jonco: This isn't the case we were talking about, but I found it while I was looking for that case: https://searchfox.org/mozilla-central/source/js/src/jit/WarpCacheIRTranspiler.cpp#5251-5255

[08:17:40.0467] <iain>
I think the case we were talking about had something to do with sequences of addAndStoreSlot (eg `this.x = 1; this.y = 2; this.z = 3`)

[08:18:35.0523] <jonco>
yes, I think it had to do with the shape, but I don't remember what the details were

[08:20:06.0309] <iain>
Ah, I think it was this patch: https://phabricator.services.mozilla.com/D161962

[08:20:58.0500] <iain>
But we backed it out because we misunderstood how shapes were traced: https://bugzilla.mozilla.org/show_bug.cgi?id=1804626

[08:21:36.0666] <jonco>
Yes that was it!

[08:21:41.0220] <jonco>
Ah, interesting

[08:22:05.0921] <jonco>
Thanks, well if it got backed out then it's not related to why my patch is crashing...

[08:22:32.0434] <iain>
Assuming you've rebased in the last six months, yeah

[14:06:37.0612] <mgaudet>
Early experience with Sapling is pretty good... 

[14:08:07.0533] <mgaudet>
though the github integration feels opinionated 

[14:08:10.0511] <mgaudet>
perhaps too much? 

[15:26:14.0229] <sfink>
I am too github-naive to know what it's being opinionated about, I guess.


2023-06-09
[05:54:33.0511] <mgaudet>
Defaults to (as I understand the docs) 1 pull request per commit, which are then interlinked and can be reviewed using a stack review tool. 


But for me, I almost never want a commit per PR. So I am still pushing to my remote then creating the PR on github. 

[06:51:50.0215] <mstange>
huh, won’t the second pull request contain both the first and the second commit? or is that where the stack review tool would come in, to filter out that first commit?

[08:07:35.0186] <mgaudet>
It's... unclear to me, but I think yes? See https://sapling-scm.com/docs/introduction/getting-started#submitting-pull-requests and the discussion about overlapping pull requests, and the pointer to https://sapling-scm.com/docs/addons/reviewstack/ which is intended to deal with this

[08:08:38.0585] <mstange>
interesting, thanks for the links!

[09:31:13.0725] <soundmodel>
What's the preferred front-end framework to be used with SpiderMonkey?

[10:06:14.0746] <sfink>
What does that mean?

[10:07:22.0299] <sfink>
If you're using SM within Firefox, use whatever you want. If you're using it from the JS shell, it's only intended for testing, so I guess I'd say "vanilla JS".

[10:07:48.0956] <sfink>
but maybe you're asking about developing SM, so an IDE?

[10:08:27.0249] <iain>
We try to optimize for most commonly used frameworks. Speedometer, the benchmark we care about the most, includes a simple website recreated in many different frameworks.

[10:09:59.0076] <iain>
I don't know much about frameworks, but I will say that React tends to be a bit of a pain for us to make fast, but with Preact we have actually had problems where the same workload finishes while we're still just warming up

[10:10:18.0920] <iain>
But that's just a current snapshot, and you should pick whatever framework you like best

[10:24:13.0277] <sfink>
jandem: I'm feeling a little out of my depth here. If there are live jitcode instances, then in a DEBUG build would it have [crashed](https://searchfox.org/mozilla-central/source/js/src/jit/Ion.cpp#91) already? Should I be calling `js::ReleaseAllJITCode()` while the partially-initialized `jitRuntime_` is non-null?

[10:33:43.0142] <soundmodel>
> <@sfink:mozilla.org> If you're using SM within Firefox, use whatever you want. If you're using it from the JS shell, it's only intended for testing, so I guess I'd say "vanilla JS".

Well yes, of course any framework should be a drop-in thing to a JS engine

[10:34:03.0803] <soundmodel>
however, as with other things a FOSS organization may well decide that React is not free

[10:34:53.0742] <soundmodel>
and my background is that I initially was starting in the Node.js ecosystem, but then I decided that I only want to support FOSS in this context

[10:35:02.0594] <soundmodel>
so now I'm just interested in SM

[10:35:19.0836] <soundmodel>
but if most other people use React, then ...

[10:35:20.0406] <sfink>
SM doesn't have a Node.js equivalent, sadly.

[10:36:25.0254] <soundmodel>
well not necessarily that but the engine is at least a start

[10:36:41.0141] <soundmodel>
I think Mozilla also isn't convinced that V8 is really free

[10:37:40.0734] <sfink>
the development model is certainly less open for both V8 and JSC

[10:38:12.0380] <soundmodel>
yes so that's why I look at SM now

[10:39:44.0856] <sfink>
would you be using it for web, command line, or custom embedded stuff?

[10:40:01.0284] <soundmodel>
for the same purposes as React, Node

[10:40:09.0249] <soundmodel>
and also I thought of trying to get it into LibreOffice

[10:40:29.0654] <sfink>
I think you just listed all 3. ;-)

[10:40:59.0251] <sfink>
for React, we don't have an Electron equivalent, so it means running within Firefox

[10:41:21.0597] <soundmodel>
that shouldn't be much of a problem

[10:41:41.0506] <soundmodel>
so maybe one can then also think of Firefox's API as a framework

[10:41:44.0611] <sfink>
for Node, we don't have a NodeJS equivalent, so it means running with the JS shell and not having access to NPM. Or making your own embedding, or using someone else's.

[10:41:48.0222] <soundmodel>
as opposed to some cross-platform thing

[10:43:46.0600] <soundmodel>
but why can't one view Firefox as a Node engine

[10:43:53.0482] <soundmodel>
it's a native application with a JS front-end

[10:45:35.0441] <sfink>
Node has additional non-web APIs, including the way it does imports, and binary Node extensions are compiled for the V8 engine. Node is not just javascript.

[10:45:55.0082] <soundmodel>
yes but of course one will work around the limitations for now

[10:46:03.0778] <soundmodel>
so I just want to know what can one do now

[10:47:42.0594] <sfink>
yeah, I'm trying to think of where to point you to. In the past, we had xulrunner, which is closer to what you're thinking of. When that died, the recommendation was to use the firefox binary to run your app. I'm not sure if that recommendation still holds.

[10:48:05.0955] <sfink>
as in, what you can do with `firefox -app mystuff` or however it's done.

[10:49:18.0674] <sfink>
hm, I don't see an `-app` or `--app` flag anymore

[10:49:29.0440] <sfink>
there's stuff like `--kiosk`

[10:56:09.0238] <soundmodel>
hmm it sounds like an app sandbox

[11:14:24.0645] <soundmodel>
yes I tried it and it looks good

[11:16:10.0711] <soundmodel>
now I'm just looking to know how well it performs

[11:21:49.0937] <soundmodel>
but since it's embeddable then I presume that one can also do some sort of binary with it

[11:29:44.0028] <Redfire>
> <@sfink:mozilla.org> SM doesn't have a Node.js equivalent, sadly.

I'm currently working on one, scheduled for completion approximately never 🙃

[11:30:17.0501] <Redfire>
spidernode and positron were once things, but that's like 7 years old now

[11:34:10.0334] <soundmodel>
how isn't embedded SM like Node

[11:34:22.0123] <soundmodel>
it runs JS programs

[11:38:06.0735] <soundmodel>
but yes I believe Node has some part that compiles to binary directly which enables it to be as fast as C

[12:20:17.0062] <sfink>
it is like embedded SM. Both run JS programs. Node also runs other programs that are written in JS+Node extensions. And almost every Node program uses the Node extensions (eg everything using npm modules, I think?)

[12:21:26.0394] <sfink>
calling it all "Node extensions" is a little unfair. The JS spec leaves some things up to the host embedding, like how to actually find a module to load, and so Node *has* to provide its own functionality for that since it's not a part of JS.

[12:23:33.0255] <sfink>
Node also has some things like Buffers that covered for gaps in the JS language, but the JS language has grown to support something similar. But honestly, I personally am not very familiar with Node, so I'm probably saying lots of incorrect things.

[12:32:35.0348] <Redfire>
Most of it is Node extensions frankly, largely it's standard modules like fs, http, dns, crypto. I consider those the difference between a full runtime like Node or Deno and just the engine like V8 or SM.


2023-06-10
[05:40:36.0182] <ptomato>
did git-cinnabar break `git add -p` at some point?

[05:41:32.0401] <ptomato>
I've been trying to commit only some of the changes in my tree, I can stage them selectively with `git add -p`, but `git commit` commits all of them, even the unstaged ones

[08:06:37.0896] <TheQwertiest>
hm... anyone here knowledgeable about Windows build?
I'm trying to update SM to 102ESR, but it fails to build =(

Error:
```
In file included from x:/moz/firefox-102.12.0/nsprpub/lib/ds/plarena.c:13:
In file included from x:/moz/firefox-102.12.0/nsprpub/lib/ds/plarena.h:15:
In file included from x:/moz/firefox-102.12.0/nsprpub/pr/include\prtypes.h:26:
x:/moz/firefox-102.12.0/config/external/nspr\prcpucfg.h(29,4): error: "Unsupported platform!"
#  error "Unsupported platform!"
   ^
```

Seems like platform macro definition got broken somewhere

Configure cmd:
```
    export JS_STANDALONE=1 && \
    ../configure \
    --enable-nspr-build \
    --disable-jemalloc \
    --disable-js-shell \
    --disable-tests \
    --target=i686-pc-mingw32 \
    --host=i686-pc-mingw32 \
    --enable-debug
```

PS: I didn't have a single SM update that would build successfully without additional tinkering... >_<

[08:18:31.0701] <TheQwertiest>
Seems that something broken in `configure`: despite it finishing successfully, there are what looks like error lines during nspr configuration:
```
checking host system type... config.sub: missing argument
Try `config.sub --help' for more information.

checking target system type... config.sub: missing argument
Try `config.sub --help' for more information.

checking build system type... config.sub: missing argument
Try `config.sub --help' for more information.

```

[08:21:06.0278] <ptomato>
I don't know if `--disable-nspr-build` works on Windows, but on Linux and Mac you can build without NSPR - looks like your error is inside NSPR, so it could be worth checking out

[08:23:06.0223] <TheQwertiest>
well, it did require nspr in ESR91, but I will try nonetheless, thanks

[08:25:10.0322] <TheQwertiest>
btw is there a way to make `configure` output more verbose?

[08:25:17.0014] <TheQwertiest>
 * btw, is there a way to make `configure` output more verbose?

[08:26:16.0500] <TheQwertiest>
> <@theqwertiest:mozilla.org> Seems that something broken in `configure`: despite it finishing successfully, there are what looks like error lines during nspr configuration:
> ```
> checking host system type... config.sub: missing argument
> Try `config.sub --help' for more information.
> 
> checking target system type... config.sub: missing argument
> Try `config.sub --help' for more information.
> 
> checking build system type... config.sub: missing argument
> Try `config.sub --help' for more information.
> 
> ```

interesting, but these line remain even with nspr disabled

[08:29:23.0918] <TheQwertiest>
> <@pchimento:igalia.com> I don't know if `--disable-nspr-build` works on Windows, but on Linux and Mac you can build without NSPR - looks like your error is inside NSPR, so it could be worth checking out

nope, doesn't work. Looks like the same problem:
```
x:/moz/firefox-102.12.0/js/src/_DEBUG/dist/include\mozilla/UniquePtrExtensions.h(102,4): error: "Unsupported OS?"
#  error "Unsupported OS?
```

[08:30:53.0239] <TheQwertiest>
> <@pchimento:igalia.com> I don't know if `--disable-nspr-build` works on Windows, but on Linux and Mac you can build without NSPR - looks like your error is inside NSPR, so it could be worth checking out

 * nope, doesn't work. Looks like the same problem with missing platform macro:

```
x:/moz/firefox-102.12.0/js/src/_DEBUG/dist/include\mozilla/UniquePtrExtensions.h(102,4): error: "Unsupported OS?"
#  error "Unsupported OS?
```

[08:33:16.0958] <TheQwertiest>
> <@theqwertiest:mozilla.org> Seems that something broken in `configure`: despite it finishing successfully, there are what looks like error lines during nspr configuration:
> ```
> checking host system type... config.sub: missing argument
> Try `config.sub --help' for more information.
> 
> checking target system type... config.sub: missing argument
> Try `config.sub --help' for more information.
> 
> checking build system type... config.sub: missing argument
> Try `config.sub --help' for more information.
> 
> ```

I think that might be not error report from configure itself, but rather error output that somehow got send to corresponding configure argument

[08:33:57.0214] <TheQwertiest>
e.g. `./configure --host=$VALUE`, where VALUE="config.sub: missing argument(...)"

[08:36:03.0506] <TheQwertiest>
 * I think that might be not error report from configure itself, but rather error output that somehow got sent to corresponding configure argument

[08:40:34.0039] <TheQwertiest>
`config.status` looks ok

[08:41:37.0941] <TheQwertiest>
i.e. all platform macros are defined there and there are no apparent error

[08:41:40.0127] <TheQwertiest>
 * i.e. all platform macros are defined there and there are no apparent errors

[09:00:35.0410] <TheQwertiest>
> <@theqwertiest:mozilla.org> Seems that something broken in `configure`: despite it finishing successfully, there are what looks like error lines during nspr configuration:
> ```
> checking host system type... config.sub: missing argument
> Try `config.sub --help' for more information.
> 
> checking target system type... config.sub: missing argument
> Try `config.sub --help' for more information.
> 
> checking build system type... config.sub: missing argument
> Try `config.sub --help' for more information.
> 
> ```

I have no idea where these lines do come from, neither of these nsprpub\configure, js\src\ctypes\libffi\configure, intl\icu\source\configure produces them (changed log lines manually to confirm that)

[09:00:40.0097] <TheQwertiest>
 * I have no idea where these lines come from, neither of these nsprpub\\configure, js\\src\\ctypes\\libffi\\configure, intl\\icu\\source\\configure produces them (changed log lines manually to confirm that)

[09:00:47.0168] <TheQwertiest>
 * I have no idea where these lines come from, neither of these nsprpub\\configure, js\\src\\ctypes\\libffi\\configure, intl\\icu\\source\\configure produce them (changed log lines manually to confirm that)

[09:05:21.0526] <TheQwertiest>
> <@theqwertiest:mozilla.org> I think that might be not error report from configure itself, but rather error output that somehow got sent to corresponding configure argument

yea, this seems very likely: `build/autoconf/config.sub` canonicalizes configuration name (and outputs it)

[09:16:54.0386] <TheQwertiest>
ffs, I've found the problem: remains of mozillabuild 4.x where picked up by the build system, which caused everything to go SNAFU

[09:17:28.0936] <TheQwertiest>
(and yes, ESR102 can't be built with mozilla build 4.x)

[09:30:03.0167] <soundmodel>
> <@redfire75369:mozilla.org> Most of it is Node extensions frankly, largely it's standard modules like fs, http, dns, crypto. I consider those the difference between a full runtime like Node or Deno and just the engine like V8 or SM.

I also found one project that was abandoned that tried to create a sort of Node API on top of SM

[09:30:06.0905] <soundmodel>
maybe it's a middle-ground

[09:30:13.0416] <soundmodel>
but it seems like no-one will build such

[09:30:22.0116] <Redfire>
Interesting, sometime between 102 and 107, 4.x starts working again 

[09:30:27.0161] <soundmodel>
in another sense this is just typical FOSS projects

[09:30:39.0601] <soundmodel>
because obviously commercial projects have more momentum

[09:30:51.0725] <Redfire>
Interesting, sometime between 102 and 107, 4.2 starts working. 

[09:31:20.0226] <soundmodel>
> <@soundmodel:mozilla.org> I also found one project that was abandoned that tried to create a sort of Node API on top of SM

https://github.com/mozilla/spidernode

[09:37:20.0426] <soundmodel>
I don't think that's necessarily worthwhile though

[09:37:36.0639] <soundmodel>
there will be a separation between apps for SM and apps for Node though, right?

[09:37:58.0758] <soundmodel>
except that shouldn't "standard JS" remain the same?

[09:38:31.0443] <TheQwertiest>
darn, build still fails at the last step:
```
lld-link: error: duplicate symbol: _DllMain@12
>>> defined at x:\moz\firefox-102.12.0\js\src\jsapi.cpp:4239
>>>            ..\Unified_cpp_js_src8.obj
>>> defined at ..\..\..\mozglue\misc\WindowsDllMain.obj
```

[09:43:19.0698] <TheQwertiest>
yup, seems to be a  bug, since on the master branch it has additional ifdefs:
https://searchfox.org/mozilla-central/source/js/src/jsapi.cpp#4371

[09:43:49.0080] <TheQwertiest>
 * yup, seems to be an old bug, since on the master branch it has additional ifdefs `!defined(JS_STANDALONE)`:
https://searchfox.org/mozilla-central/source/js/src/jsapi.cpp#4371

[09:43:56.0369] <TheQwertiest>
 * yup, seems to be an old bug, since on the master branch it has additional `!defined(JS_STANDALONE)`:
https://searchfox.org/mozilla-central/source/js/src/jsapi.cpp#4371

[09:49:52.0225] <TheQwertiest>
and another one ...
```
lld-link: error: duplicate symbol: _HeapAlloc@12
>>> defined at x:\moz\firefox-102.12.0\memory\mozalloc\winheap.cpp:26
>>>            ..\..\..\memory\mozalloc\winheap.obj
>>> defined at KERNEL32.dll
```

[09:52:20.0666] <soundmodel>
is there a standard server-side SM?

[09:52:41.0539] <soundmodel>
I just found some old projects aiming to implement it, and the shell version didn't exactly sound like it

[09:54:09.0322] <TheQwertiest>
> <@soundmodel:mozilla.org> is there a standard server-side SM?

I don't think so, no

[09:54:31.0178] <TheQwertiest>
the only available standalone version is jsshell

[09:54:40.0200] <TheQwertiest>
 * the only available "official" standalone version is jsshell

[09:54:59.0853] <soundmodel>
maybe one can pipe an embedded SM to act as such

[09:55:01.0396] <soundmodel>
somehow

[09:55:37.0315] <soundmodel>
like just embed SM somehow and then use that program as the server-side client

[09:55:50.0200] <TheQwertiest>
"*just* embed" :D

[09:56:28.0662] <TheQwertiest>
JS embedding process is not easy (it applies both to V8 and SM) and requires quite a lot of work

[09:57:25.0662] <TheQwertiest>
and this is only for pure JS without anything like modules, filesystem, fetch api and etc

[09:57:59.0258] <soundmodel>
but since it's already a C++ program then why cannot one compile it to an interpreter

[09:58:02.0691] <TheQwertiest>
coz all this cool stuff must be implement by the embedding side (e.g. browser)

[09:58:12.0506] <soundmodel>
that one can call using the cmd line for example

[09:58:18.0200] <TheQwertiest>
> <@soundmodel:mozilla.org> but since it's already a C++ program then why cannot one compile it to an interpreter

this is not how programming works :D

[09:58:57.0555] <soundmodel>
https://discourse.mozilla.org/t/beginners-questions-about-embedding-spidermonkey/92996/2 ?

[10:00:20.0836] <TheQwertiest>
yea, this is an example of how to call embedded JS engine after embedding it

[10:00:43.0189] <TheQwertiest>
 * yea, this is an example of how to call scripts on JS engine after embedding it

[10:00:56.0554] <TheQwertiest>
but first, you have to embed it

[10:01:05.0142] <soundmodel>
yes but I don't understand how it should be difficult to write an eval loop

[10:01:16.0511] <soundmodel>
since the library should have parse(input) already

[10:01:20.0095] <TheQwertiest>
it's not *just* eval loop =)

[10:01:34.0611] <TheQwertiest>
do you want to have modules?

[10:01:37.0596] <TheQwertiest>
or fetch api?

[10:01:45.0427] <TheQwertiest>
or access to filesystem?

[10:01:55.0082] <soundmodel>
but those should be once implementable anyways

[10:02:05.0236] <TheQwertiest>
or maybe GC system that doesnt OOM you

[10:02:08.0665] <soundmodel>
and I don't understand if someone hasn't done them already

[10:02:31.0752] <soundmodel>
or maybe I misunderstand and SM is in the state where it serves a limited use case of FF

[10:02:40.0022] <soundmodel>
rather than as a general JS engine

[10:02:41.0675] <TheQwertiest>
SM is the same as V8

[10:02:59.0809] <TheQwertiest>
it's a library with interface that gives you ability to embed it in your program

[10:03:10.0564] <soundmodel>
QuickJS seems to support modules etc.

[10:03:17.0718] <TheQwertiest>
but it's not simple plug-n-play, and these libraries do not have the same interface

[10:03:40.0527] <TheQwertiest>
 * but it's not simple plug-n-play, and these libraries do not have the same interface (so you can't just replace one engine with another)

[10:04:13.0975] <soundmodel>
TBH QuickJS seems better marketed in this sense

[10:04:27.0605] <soundmodel>
but I think it's not intended to be seen as a competitor

[10:04:50.0619] <TheQwertiest>
there is not a lot of compition in JS engine world, tbh

[10:04:55.0124] <TheQwertiest>
99% use V8

[10:05:02.0525] <TheQwertiest>
 * there is not a lot of compition in JS engine embedding world, tbh

[10:05:13.0556] <TheQwertiest>
 * there is not a lot of competion in JS engine embedding world, tbh

[10:05:20.0225] <TheQwertiest>
 * there is not a lot of competition in JS engine embedding world, tbh

[10:05:52.0452] <soundmodel>
a lot of folks recommended QuickJS, but then one'd ask why is QuickJS not in FF as well

[10:06:00.0876] <TheQwertiest>
(not that V8 is that much better though)

[10:06:01.0901] <soundmodel>
if it's better than SM

[10:06:24.0495] <TheQwertiest>
 * (not that V8 is that much better though (or at all))

[10:06:37.0636] <TheQwertiest>
what problem are you trying to solve?

[10:07:17.0859] <TheQwertiest>
do you actually need a standalone engine? maybe something like electron would suit better for your case?

[10:07:19.0828] <soundmodel>
I just want to use a FOSS alternative to Node

[10:07:46.0267] <TheQwertiest>
 * do you actually need a standalone engine? maybe something like electron would be better for your case?

[10:08:31.0968] <TheQwertiest>
then there is no easy way - you have to take JS engine, embed it and then implement all NodeJS interfaces and features.

[10:09:43.0602] <TheQwertiest>
and this means not only JS interfaces, but C++ interfaces as well, since they are used in a lot of NodeJS modules

[10:13:16.0816] <soundmodel>
well QuickJS: https://www.youtube.com/watch?v=kSl1tf95284

[10:13:29.0776] <soundmodel>
but this just suggests that SM is lagging somehow

[10:14:17.0801] <TheQwertiest>
it's not, they just serve different purposes

[10:15:04.0113] <TheQwertiest>
e.g. fetch is a Web API interface and is not part of JS standard

[10:15:37.0388] <soundmodel>
what if one tried to figure out some common subset between SM and QuickJS

[10:15:52.0858] <TheQwertiest>
that subset would be standard JS

[10:15:56.0545] <soundmodel>
to be able to use SM API for browser and QuickJS for executables

[10:16:38.0433] <soundmodel>
possibly still best of the both worlds rather than trying to recreate QuickJS with SM 

[10:19:16.0323] <soundmodel>
yes but I mean instead of trying to make QuickJS into browser or making SM into native executables

[10:19:27.0840] <soundmodel>
then I think writing for both separately is best

[10:19:50.0641] <soundmodel>
 * yes but I mean instead of trying to make QuickJS into the browser or making SM into native executables

[10:24:10.0965] <soundmodel>
but I think part of Node's appeal

[10:24:21.0339] <soundmodel>
was that it's the same code for desktop and the browser

[10:34:28.0628] <soundmodel>
and yes it's true that there's Electron

[10:34:35.0500] <soundmodel>
but it's by the OpenJS foundation, same as V8

[10:35:02.0394] <soundmodel>
 * but it's by the OpenJS foundation, same as Node

[10:42:04.0137] <TheQwertiest>
is there a way to check with witch version of rust was ESR built?

[10:42:46.0134] <TheQwertiest>
context: another link error:
```
lld-link: error: undefined symbol: __declspec(dllimport) _NtReadFile@36
>>> referenced by /rustc/90c541806f23a127002de5b4038be731ba1458ca/library\std\src\sys\windows\handle.rs:241
>>>               jsrust.lib(std-83289d9c1ef26d12.std.6b8e046a-cgu.0.rcgu.o):(std::sys::windows::handle::Handle::synchronous_read::hebb7dd13f4bc8861)
```

[10:43:10.0827] <TheQwertiest>
 * is there a way to check with which version of rust was ESR built?

[10:48:33.0097] <soundmodel>
there's some old discussion like this https://bugzilla.mozilla.org/show_bug.cgi?id=1482179

[10:48:40.0144] <soundmodel>
asking for a REPL example for SM

[10:52:24.0062] <soundmodel>
what about Rhino, there are some old references w.r.t. it and REPL?

[10:58:59.0829] <soundmodel>
but umm, why is the shell not sufficient for server-side

[10:59:01.0654] <soundmodel>
https://web.archive.org/web/20110629134447/https://developer.mozilla.org/En/SpiderMonkey/Introduction_to_the_JavaScript_shell

[10:59:40.0705] <soundmodel>
I initially just expected that it could not expose the OS fully

[10:59:48.0324] <soundmodel>
so that it would not be useful for e.g. multimedia apps

[11:01:05.0373] <TheQwertiest>
> <@theqwertiest:mozilla.org> is there a way to check with which version of rust was ESR built?

nvm, it's a 1.70 rust change: https://bugzilla.mozilla.org/show_bug.cgi?id=1836723

[11:03:08.0305] <soundmodel>
but atm I don't know whether SM is out-dated or QuickJS is limited

[11:03:21.0094] <soundmodel>
because QuickJS seems to do exactly what I want

[11:08:51.0159] <emanresu3>
hello, how can I use modules from the JS shell? I'm writing a CLI program

[11:09:48.0116] <soundmodel>
yes I am trying to ask the same

[11:10:01.0110] <soundmodel>
I just did a lengthy discussion for whether to look at QuickJS or SM for this

[11:10:15.0315] <soundmodel>
because they said that embedding SM takes effort 

[11:10:19.0490] <emanresu3>
if I try to use ES6 modules it throws `SyntaxError: import declarations may only appear at top level of a module:`

[11:11:21.0650] <soundmodel>
possibly because it's not implemented

[11:12:01.0792] <TheQwertiest>
> <@pchimento:igalia.com> I don't know if `--disable-nspr-build` works on Windows, but on Linux and Mac you can build without NSPR - looks like your error is inside NSPR, so it could be worth checking out

I've yet to check if it works, but it certainly builds =)

[11:20:20.0438] <Redfire>
> <@soundmodel:mozilla.org> but atm I don't know whether SM is out-dated or QuickJS is limited

Neither is outdated or limited, you're just expecting the engines themselves to do much more work than their required to by the ECMA-262 spec

[11:21:30.0033] <Redfire>
Anything on top, the microtask queue, fetch api, textencoder, settimeout, etc. is controlled by the web standards of whatwg and similar organisations and they're implemented by the browser, not by the engine

[11:21:46.0275] <Redfire>
* Anything on top, the microtask queue, fetch api, textencoder, settimeout, etc. is controlled by the web standards of whatwg and similar organisations and they're implemented by the browser, not by the js engine

[11:24:47.0440] <Redfire>
if any runtimes like node or deno want those features, they implement it in their embedding of the engine

there is no such fully featured embedding/runtime for SM so that's how it is, and it's not a priority or even in the scope of the SM team to really be worrying about

[11:30:52.0612] <Redfire>
* Anything on top, module resolution, the microtask queue, fetch api, textencoder, settimeout, etc. is controlled by the web standards of whatwg and similar organisations and they'rehttps://github.com/servo/mozjs/pull/313 implemented by the browser, not by the js engine

[11:31:11.0958] <Redfire>
* Anything on top, module resolution, the microtask queue, fetch api, textencoder, settimeout, etc. is controlled by the web standards of whatwg and similar organisations and  they're implemented by the browser, not by the js engine

[11:32:30.0406] <Redfire>
TheQwertiest: Your issue seems vaguely similar to something there was on servo/mozjs https://github.com/servo/mozjs/pull/313

[11:33:05.0767] <TheQwertiest>
> <@redfire75369:mozilla.org> TheQwertiest: Your issue seems vaguely similar to something there was on servo/mozjs https://github.com/servo/mozjs/pull/313

Thanks, but I've found all the corresponding bugs and fixes on bugzilla =)

[11:33:55.0440] <TheQwertiest>
Once I've verified that it all works, I'll post the link to all the required patches for future generations =)

[11:50:39.0658] <emanresu3>
> <@redfire75369:mozilla.org> if any runtimes like node or deno want those features, they implement it in their embedding of the engine
there is no such fully featured embedding/runtime for SM so that's how it is, and it's not a priority or even in the scope of the SM team to really be worrying about

thanks you for the response! I won't write it for SM then, but it's unfortunate since I really don't like node

[12:52:40.0274] <emanresu3>
by the way, how can one use the `--module` and `--modul-load-path` options?

[14:35:56.0117] <TheQwertiest>
Almost one full day later, SM upgrade complete...
If anyone wants to build SM ESR102.12.0 dll on Windows, they can check out my repo: https://bitbucket.org/TheQwertiest/mozjs

- `build_scripts/setup.py` will walk through all the steps, form downloading sources and correct mozillabuild, to applying required patches.
- `build_scripts/patches` contains all the patches which are needed for build to complete and/or to work properly on Windows

Note: that this repo contains only patches that need to be applied before build. For SM to build and work on Visual Studio (and maybe other compilers) additional patches are needed:
- https://github.com/TheQwertiest/foo_spider_monkey_panel/blob/feature/v2/scripts/patches/mozjs-bug_1243367-wrong_free_call.patch : this patch fixes crashes when memory allocation and deallocation is performed in different dll's (e.g. allocated in mozjs, deallocated in embedding)
- https://github.com/TheQwertiest/foo_spider_monkey_panel/blob/feature/v2/scripts/patches/mozjs-compiler_bug_workaround.patch : this patch fixes compilation error, which I think is a compiler bug
- https://github.com/TheQwertiest/foo_spider_monkey_panel/blob/feature/v2/scripts/patches/mozjs-bug_1243367-wrong_free_call.patch : msvc does not have __PRETTY_FUNCTION__ macro, this patch fixes it.

[14:36:17.0973] <TheQwertiest>
 * Almost one full day later, SM upgrade complete...
If anyone wants to build SM ESR102.12.0 dll on Windows, check out my repo: https://bitbucket.org/TheQwertiest/mozjs

- `build_scripts/setup.py` will walk through all the steps, form downloading sources and correct mozillabuild, to applying required patches.
- `build_scripts/patches` contains all the patches which are needed for build to complete and/or to work properly on Windows

Note: that this repo contains only patches that need to be applied before build. For SM to build and work on Visual Studio (and maybe other compilers) additional patches are needed:

- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : this patch fixes crashes when memory allocation and deallocation is performed in different dll's (e.g. allocated in mozjs, deallocated in embedding)
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-compiler\_bug\_workaround.patch : this patch fixes compilation error, which I think is a compiler bug
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : msvc does not have **PRETTY\_FUNCTION** macro, this patch fixes it.

[14:36:26.0778] <TheQwertiest>
 * Almost one full day later, SM upgrade complete...
If anyone wants to build SM ESR102.12.0 dll on Windows, check out my repo: https://bitbucket.org/TheQwertiest/mozjs

- `build_scripts/setup.py` will walk through all the steps, from downloading sources and correct mozillabuild, to applying required patches.
- `build_scripts/patches` contains all the patches which are needed for build to complete and/or to work properly on Windows

Note: that this repo contains only patches that need to be applied before build. For SM to build and work on Visual Studio (and maybe other compilers) additional patches are needed:

- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : this patch fixes crashes when memory allocation and deallocation is performed in different dll's (e.g. allocated in mozjs, deallocated in embedding)
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-compiler\_bug\_workaround.patch : this patch fixes compilation error, which I think is a compiler bug
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : msvc does not have **PRETTY\_FUNCTION** macro, this patch fixes it.

[14:37:28.0403] <TheQwertiest>
 * Almost one full day later, SM upgrade complete...
If anyone wants to build SM ESR102.12.0 dll on Windows, check out my repo: https://bitbucket.org/TheQwertiest/mozjs

- `build_scripts/setup.py` will walk through all the steps, from downloading sources and correct mozillabuild, to applying required patches.
- `build_scripts/patches` contains all the patches which are needed for build to complete and/or to work properly on Windows

Note: that this repo contains only patches that must be applied before build. For SM to build and work on Visual Studio (and maybe other compilers) additional patches are needed:

- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : this patch fixes crashes when memory allocation and deallocation is performed in different dll's (e.g. allocated in mozjs, deallocated in embedding)
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-compiler\_bug\_workaround.patch : this patch fixes compilation error, which I think is a compiler bug
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : msvc does not have **PRETTY\_FUNCTION** macro, this patch fixes it.

[14:37:47.0124] <TheQwertiest>
 * Almost one full day later, SM upgrade complete...
If anyone wants to build SM ESR102.12.0 dll on Windows, check out my repo: https://bitbucket.org/TheQwertiest/mozjs

- `build_scripts/setup.py` will walk through all the steps, from downloading sources and correct mozillabuild, to applying required patches.
- `build_scripts/patches` contains all the patches which are needed for build to complete and/or to work properly on Windows

Note: that this repo contains only patches that must be applied before build. For application embedding SM to build and work on Visual Studio (and maybe other compilers) additional patches are needed:

- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : this patch fixes crashes when memory allocation and deallocation is performed in different dll's (e.g. allocated in mozjs, deallocated in embedding)
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-compiler\_bug\_workaround.patch : this patch fixes compilation error, which I think is a compiler bug
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : msvc does not have **PRETTY\_FUNCTION** macro, this patch fixes it.

[14:38:04.0944] <TheQwertiest>
 * Almost one full day later, SM upgrade complete...
If anyone wants to build SM ESR102.12.0 dll on Windows, check out my repo: https://bitbucket.org/TheQwertiest/mozjs

- `build_scripts/setup.py` will walk through all the steps, from downloading sources and correct mozillabuild, to applying required patches.
- `build_scripts/patches` contains all the patches which are needed for build to complete and/or to work properly on Windows

Note: that this repo contains only patches that must be applied before build. For application embedding SM to build and work on Visual Studio (and maybe other compilers) additional patches are needed:

- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : this patch fixes crashes when memory allocation and deallocation is performed in different dll's (e.g. allocated in mozjs, deallocated in embedding)
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-compiler\_bug\_workaround.patch : this patch fixes compilation error, which I think is a compiler bug
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : msvc does not have `__PRETTY\_FUNCTION__` macro, this patch fixes it.

[14:38:55.0397] <TheQwertiest>
 * Almost one full day later, SM upgrade complete...
If anyone wants to build SM ESR102.12.0 dll on Windows, check out my repo: https://bitbucket.org/TheQwertiest/mozjs

- `build_scripts/setup.py` will walk through all the steps, from downloading sources and correct mozillabuild, to applying required patches.
- `build_scripts/patches` contains all the patches which are needed for build to complete and/or to work properly on Windows

Note: that this repo contains only patches that must be applied before build. For application embedding SM to build and work on Visual Studio (and maybe other compilers) additional patches are needed:

- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : this patch fixes crashes when memory allocation and deallocation is performed in different dll's (e.g. allocated in mozjs, deallocated in embedding)
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-compiler\_bug\_workaround.patch : this patch fixes compilation error, which I think is caused by a compiler bug
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : msvc does not have `__PRETTY\_FUNCTION__` macro, this patch fixes it.

[14:39:00.0909] <TheQwertiest>
 * Almost one full day later, SM upgrade complete...
If anyone wants to build SM ESR102.12.0 dll on Windows, check out my repo: https://bitbucket.org/TheQwertiest/mozjs

- `build_scripts/setup.py` will walk through all the steps, from downloading sources and correct mozillabuild, to applying required patches.
- `build_scripts/patches` contains all the patches which are needed for build to complete and/or to work properly on Windows

Note: that this repo contains only patches that must be applied before build. For application embedding SM to build and work on Visual Studio (and maybe other compilers) additional patches are needed:

- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : this patch fixes crashes when memory allocation and deallocation is performed in different dll's (e.g. allocated in mozjs, deallocated in embedding)
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-compiler\_bug\_workaround.patch : this patch fixes compilation error, which I think is caused by a compiler bug
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : msvc does not have `__PRETTY_FUNCTION__` macro, this patch fixes it.

[14:39:33.0259] <TheQwertiest>
 * Almost one full day later, SM upgrade complete...
If anyone wants to build SM ESR102.12.0 dll on Windows, check out my repo: https://bitbucket.org/TheQwertiest/mozjs

- `build_scripts/setup.py` will walk through all the steps, from downloading sources and correct mozillabuild, to applying required patches.
- `build_scripts/patches` contains all the patches which are needed for build to complete and/or to work properly on Windows

Note: that this repo contains only patches that must be applied before build. For application embedding SM to build and work on Visual Studio (and maybe other compilers) additional patches are needed:

- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : this patch fixes crashes when memory allocation and deallocation is performed in different dll's (e.g. allocated in mozjs, deallocated in embedding)
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-compiler\_bug\_workaround.patch : this patch fixes compilation error, which I think is caused by a compiler bug
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : msvc does not have `__PRETTY_FUNCTION__` macro, this patch replaces it with a msvc-friendly version.

[14:41:29.0647] <TheQwertiest>
Note: `setup.py` in mozjs repo only build x86 library, but it can be easily adapted to build x64 as well (thought I didn't test that, so it might require additional patches to build and to work)

[14:41:33.0675] <TheQwertiest>
 * Note: `setup.py` in mozjs repo only builds x86 library, but it can be easily adapted to build x64 as well (thought I didn't test that, so it might require additional patches to build and to work)

[14:41:47.0455] <TheQwertiest>
 * Note: `setup.py` in mozjs repo only builds x86 library, but it can be easily adapted to build x64 as well (I didn't test that though, so it might require additional patches to build and to work)

[14:41:54.0390] <TheQwertiest>
 * Note: `setup.py` in mozjs repo only builds x86 library, but it can be easily adapted to build x64 as well (I didn't test that though, so it might require additional SM patches to build and to work)

[14:42:43.0561] <TheQwertiest>
 * Almost one full day later, SM upgrade complete...
If anyone wants to build SM ESR102.12.0 dll on Windows, check out my repo: https://bitbucket.org/TheQwertiest/mozjs

- `build_scripts/setup.py` will walk through all the steps, from downloading sources and correct mozillabuild, to applying required patches.
- `build_scripts/patches` contains all the patches which are needed for build to complete and/or to work properly on Windows

Note: this repo contains only patches that must be applied before build (i.e. they can't be applied post-build). For application embedding SM to build and work on Visual Studio (and maybe other compilers) additional patches are needed:

- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : this patch fixes crashes when memory allocation and deallocation is performed in different dll's (e.g. allocated in mozjs, deallocated in embedding)
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-compiler\_bug\_workaround.patch : this patch fixes compilation error, which I think is caused by a compiler bug
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : msvc does not have `__PRETTY_FUNCTION__` macro, this patch replaces it with a msvc-friendly version.

[14:48:18.0120] <TheQwertiest>
 * Note: `setup.py` in mozjs repo only builds x86 library, but it can be easily adapted to build x64 as well (I haven't tested that though, so it might require additional SM patches to build and to work)

[14:48:24.0153] <TheQwertiest>
 * Note: `setup.py` in mozjs repo only builds x86 library, but it can be easily adapted to build x64 as well (I haven't tested that though, so it might require additional SM patches)

[14:51:35.0246] <TheQwertiest>
 * Almost one full day later, SM upgrade complete...
If anyone wants to build SM ESR102.12.0 dll on Windows, check out my repo: https://bitbucket.org/TheQwertiest/mozjs

- `build_scripts/setup.py` will walk through all the steps, from downloading sources and correct mozillabuild, to applying required patches.
- `build_scripts/patches` contains all the patches which are needed for build to complete and/or for embedding to work properly on Windows

Note: this repo contains only patches that must be applied before build (i.e. they can't be applied post-build). For application embedding SM to build and work on Visual Studio (and maybe other compilers) additional patches are needed:

- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : this patch fixes crashes when memory allocation and deallocation is performed in different dll's (e.g. allocated in mozjs, deallocated in embedding)
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-compiler\_bug\_workaround.patch : this patch fixes compilation error, which I think is caused by a compiler bug
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : msvc does not have `__PRETTY_FUNCTION__` macro, this patch replaces it with a msvc-friendly version.

[14:52:07.0299] <TheQwertiest>
 * Almost one full day later, SM upgrade complete...
If anyone wants to build SM ESR102.12.0 dll on Windows, check out my repo: https://bitbucket.org/TheQwertiest/mozjs

- `build_scripts/setup.py` will walk through all the steps, from downloading sources and correct mozillabuild, to applying required patches.
- `build_scripts/patches` contains all the patches which are needed for build to complete and/or for embedding to work properly on Windows

Note: this repo contains only patches that must be applied before build (i.e. they can't be applied post-build). For application embedding SM to build and work with Visual Studio (and maybe other compilers) additional patches are needed:

- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : this patch fixes crashes when memory allocation and deallocation is performed in different dll's (e.g. allocated in mozjs, deallocated in embedding)
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-compiler\_bug\_workaround.patch : this patch fixes compilation error, which I think is caused by a compiler bug
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : msvc does not have `__PRETTY_FUNCTION__` macro, this patch replaces it with a msvc-friendly version.

[14:55:04.0450] <TheQwertiest>
 * Almost one full day later, SM upgrade complete...
If anyone wants to build SM ESR102.12.0 dll on Windows, check out my repo: https://bitbucket.org/TheQwertiest/mozjs

- `build_scripts/setup.py` will walk through all the steps, from downloading sources and correct mozillabuild, to applying required patches.
- `build_scripts/patches` contains all the patches which are needed for build to complete and/or for embedding to work properly on Windows

Note: this repo contains only patches that must be applied before build (i.e. they can't be applied post-build). For application embedding SM to build and work with Visual Studio (and maybe other compilers) additional patches are needed:

- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : this patch fixes crashes when memory allocation and deallocation is performed across dll boundaries (e.g. allocated in mozjs, deallocated in embedding)
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-compiler\_bug\_workaround.patch : this patch fixes compilation error, which I think is caused by a compiler bug
- https://github.com/TheQwertiest/foo\_spider\_monkey\_panel/blob/feature/v2/scripts/patches/mozjs-bug\_1243367-wrong\_free\_call.patch : msvc does not have `__PRETTY_FUNCTION__` macro, this patch replaces it with a msvc-friendly version.

[15:51:29.0418] <TheQwertiest>
ugh... guess it's not time to rest yet...
```
```

[15:51:35.0214] <TheQwertiest>
 * ugh... guess it's not time to rest yet...
```
Run-Time Check Failure #0 - The value of ESP was not properly saved across a function call.  This is usually a result of calling a function declared with one calling convention with a function pointer declared with a different calling convention.
```

[15:52:54.0926] <TheQwertiest>
It's either a clang-cl bug or macro/definition mismatch between SM compilation environment and embedding environment

[15:53:10.0728] <TheQwertiest>
 * It's either a clang-cl binary generation bug or macro/definition mismatch between SM compilation environment and embedding environment

[15:53:23.0375] <TheQwertiest>
no idea how to diagnose that though...

[15:54:09.0860] <TheQwertiest>
something to do with SliceBudget/TimeBudget

[15:54:19.0275] <TheQwertiest>
 * something to do with SliceBudget/TimeBudget constructors

[16:22:37.0195] <emanresu3>
> <@emanresu3:matrix.org> by the way, how can one use the --module and --modul-load-path options?

the --help message just says
```
--module-load-path=DIR              Set directory to load modules from
-m --module=PATH                    Module path to run
```
but what modules does it refer to? can I use it to run some sort of module system on SM? I'm reading the source code but it's not clear either, no comments

[16:24:12.0232] <emanresu3>
I don't find any help online either

[16:29:03.0901] <TheQwertiest>
> <@theqwertiest:mozilla.org> something to do with SliceBudget/TimeBudget constructors

almost certain that it's caused by TimeBudget copy constructor

[16:29:53.0397] <TheQwertiest>
> <@theqwertiest:mozilla.org> something to do with SliceBudget/TimeBudget constructors

 * almost certain that it's caused by TimeBudget copy constructor (no idea how to fix that tho)

[16:37:12.0080] <sfink>
> <@emanresu3:matrix.org> the --help message just says
> ```
> --module-load-path=DIR              Set directory to load modules from
> -m --module=PATH                    Module path to run
> ```
> but what modules does it refer to? can I use it to run some sort of module system on SM? I'm reading the source code but it's not clear either, no comments

[ES modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) but note that this isn't going to help you use modules written for Node

[16:39:46.0144] <TheQwertiest>
 * almost certain that it's caused by TimeBudget copy constructor (no idea how to fix that tho)
either that or Timestamp

[16:47:44.0921] <emanresu3>
I don't need node modules, I'm writing a small CLI program

[16:48:16.0723] <emanresu3>
I've used ES6 modules in the browser but how could I used them just from the terminal?

[16:48:28.0570] <emanresu3>
```
==> mod1.mjs <==
export const fn1 = () => {
  console.log("i'm fn1");
};

export const fn2 = (p1,p2) => {
  console.log(`i'm fn2, pars: ${p1}, ${p2}`);
};

==> main.js <==
#!/usr/bin/js78
fn1();
fn2(10,20);
```

[16:49:01.0589] <emanresu3>
`js78 -m mod1.mjs main.js` throws `SyntaxError: export declarations may only appear at top level of a module:`


2023-06-11
[21:48:22.0049] <sfink>
I'm not exactly sure how modules are supposed to work, but I can get it to work with dynamic import at least. If I change `main.js` to:
```
import('mod1.mjs').then(({fn1, fn2}) => {
    fn1();
    fn2(10,20);
});
```
then it works if I just run `js main.js`.

[21:49:34.0028] <sfink>
regular imports work between modules too.

[02:00:22.0890] <soundmodel>
> <@redfire75369:mozilla.org> Neither is outdated or limited, you're just expecting the engines themselves to do much more work than their required to by the ECMA-262 spec

I am still confused about what to go with

[02:00:29.0352] <soundmodel>
it seems like QuickJS works out of the box

[02:00:37.0855] <soundmodel>
while SM seems like it might not

[02:12:25.0441] <soundmodel>
but with QuickJS I won't have compatibility with SM

[02:12:34.0996] <soundmodel>
at least directly

[02:13:06.0198] <soundmodel>
maybe one could write a tool that allows writing against the SM API with QuickJS

[02:13:27.0594] <soundmodel>
so that SM would be just a kind of a target

[02:30:05.0183] <arai>
what's the minimal requirement for the application you want?  I guess a "100% Node.js compatible alternative" is not what you want?

[02:30:30.0957] <soundmodel>
yes it doesn't need to be compatible with existing Node code

[02:30:59.0512] <soundmodel>
but it should have about the same features: produce an executable, write arbitrary JS programs, run on server-side, embed to browser

[02:31:03.0997] <soundmodel>
or deploy to browser

[02:31:44.0663] <arai>
okay, let's look into each of them what it mean

[02:33:09.0528] <arai>
by "produce an executable", is it fine if you get a single executable file for given JS code?

[02:33:40.0044] <arai>
if so, it's not difficult.  you just need to embed the JS code as string in the executable and evaluate it when the executable runs

[02:34:37.0782] <arai>
so, it's almost same task as creating REPL

[02:35:51.0360] <soundmodel>
> <@arai:mozilla.org> by "produce an executable", is it fine if you get a single executable file for given JS code?

yes?

[02:36:11.0560] <soundmodel>
but I don't understand why SM doesn't implement a way to pass in a JS file yet

[02:36:18.0838] <soundmodel>
or it does, but I presumed that it doesn't support modules

[02:36:38.0747] <arai>
it supports both

[02:36:53.0813] <arai>
it's about JS shell, right?

[02:38:16.0332] <arai>
to be clear, SpiderMonkey JS shell is intended for testing the SpiderMonkey implementation itself.  not for "run on server-side" thing.   it contains so many testing functions that can easily crash the process

[02:38:37.0554] <arai>
and if you want a shell, you need to implement your own shell

[02:39:08.0168] <arai>
 * to be clear, SpiderMonkey JS shell is intended for testing the SpiderMonkey implementation itself.  not for "run on server-side" thing.   it contains so many testing functions that can easily crash the process (to test the engine internal)

[02:39:36.0506] <soundmodel>
yes and I don't really understand what the design goal was

[02:39:41.0354] <soundmodel>
if it doesn't implement it out of box

[02:40:07.0090] <arai>
design goal of what?  the JS shell?

[02:40:48.0156] <soundmodel>
SM

[02:41:05.0829] <arai>
you mean SpiderMonkey itself?

[02:41:07.0759] <soundmodel>
I think it's designed to be only used as a part of a browser

[02:41:13.0125] <soundmodel>
and not as a separate engine

[02:41:24.0906] <soundmodel>
it doesn't seem very separate

[02:42:04.0089] <arai>
it can be used as separate JS engine

[02:42:13.0890] <arai>
which part do you see "not separate" ?

[02:43:07.0219] <soundmodel>
that it doesn't provide a tool where one can just load an run JS

[02:43:23.0719] <soundmodel>
 * that it doesn't provide a tool where one can just load and run JS

[02:46:15.0873] <arai>
okay, first. SpiderMonkey is a library"  not a standalone application.  it can be used by any application by linking it and calling APIs to operate on it

[02:46:59.0185] <arai>
 * okay, first. SpiderMonkey is a library.  not a standalone application.  it can be used by any application by linking it and calling APIs to operate on it

[02:48:18.0928] <arai>
so, if you want to evaluate JavaScript in your application, you can use SpiderMonkey, and also provide custom functions to the JS world code, so that the JS code can interact with the application

[02:49:44.0542] <arai>
what SpiderMonkey provides is pure ECMAScript, which doesn't have much feature to interact with external world.  for example, it doesn't have stdin/stdout things, file, network, etc.   so those things are supposed to be provided by embedders

[02:50:52.0512] <arai>
so, going back to the requirement, "write arbitrary JS programs" depends on what APIs you expect the application to have

[02:51:13.0303] <arai>
if you want pure ECMAScript, then just embedding SpiderMonkey and creating REPL would work

[02:52:14.0475] <arai>
then, can you describe what you actually expect with "run on server-side" ?  just a command-line application that runs given JS file ?  or some more?

[02:52:35.0491] <soundmodel>
yes I mean since SpiderMonkey already runs all of the web

[02:52:49.0461] <soundmodel>
then I thought that creating a REPL should be pretty simple

[02:55:01.0588] <arai>
yeah, REPL without additional feature would be simple

[02:55:12.0919] <soundmodel>
and it should support the same as SM on browser I believe

[02:55:19.0608] <soundmodel>
without much modification

[02:56:13.0295] <arai>
what are you expecting with "the same as..." part ?

[02:56:41.0758] <soundmodel>
that one can throw all the libraries into and whatever that one'd use on the web

[02:57:10.0564] <soundmodel>
and be ableto at least in principle produce the same web app to a folder

[02:57:18.0222] <soundmodel>
 * and be able to at least in principle produce the same web app to a folder

[02:57:23.0571] <soundmodel>
without the browser

[02:57:59.0018] <arai>
that's not simple thing, because web app is built with many Web API, which is provided by browser not SpiderMonkey

[02:58:06.0239] <soundmodel>
see I personally ultimately want to write site/app generators

[02:58:29.0309] <soundmodel>
but one can surely limit to FF

[02:58:39.0420] <soundmodel>
so should one then be able to use SM without FF and then add FF

[02:59:42.0540] <arai>
if you want to create web app generator, I'd suggest looking into browser from the beginning.  there's not much point of starting with raw JS engine

[03:00:26.0630] <soundmodel>
possibly

[03:00:55.0129] <soundmodel>
but I thought of how to write apps that can act like they don't need the browser installation

[03:02:16.0414] <soundmodel>
and yes they said that there's e.g. --kiosk

[03:06:58.0117] <soundmodel>
yes okay

[03:07:09.0908] <soundmodel>
maybe QuickJS is for separate use cases

[03:07:20.0349] <soundmodel>
particularly for for non-web

[03:07:29.0729] <soundmodel>
 * particularly for non-web

[03:07:49.0255] <soundmodel>
because it seems like once one strips the web apis, then it seems pretty similat to CPython

[03:07:55.0111] <soundmodel>
 * because it seems like once one strips the web apis, then it seems pretty similar to CPython

[03:23:28.0770] <arai>
yeah, if the API you want to use is not listed in https://tc39.es/ecma262/ , that's defined by other spec and provided by browser

[03:52:25.0129] <soundmodel>
I wonder how should I study the FF API w.r.t. to SMthen

[03:52:29.0994] <soundmodel>
 * I wonder how should I study the FF API w.r.t. to SM then

[03:53:12.0549] <soundmodel>
but yes for this use case it seems more reasonable to target full FF

[03:53:50.0415] <soundmodel>
but is there a server-side server for FF then?

[03:54:05.0307] <soundmodel>
an official one and not django or something

[04:04:29.0056] <soundmodel>
or maybe one can generate offline FF pages?

[07:18:15.0423] <soundmodel>
so is there some package that defines FF specific JS/HTML/CSS?

[07:18:30.0135] <soundmodel>
or i.e. "a SpiderMonkey Document"

[07:58:55.0874] <ptomato>
> <@soundmodel:mozilla.org> so is there some package that defines FF specific JS/HTML/CSS?

For this, you'd want to look into the "DOM" code in Firefox

[09:39:27.0724] <TheQwertiest>
hm... ust wondering, what is ICU used in SM for?

[09:39:30.0818] <TheQwertiest>
 * hm... just wondering, what is ICU used in SM for?

[09:41:59.0546] <ptomato>
the `Intl` object and any `toLocaleString()` methods, for one thing

[09:42:15.0511] <ptomato>
V8 uses it for regexp character classes as well; not sure if SM does that

[09:43:51.0388] <TheQwertiest>
huh, first time I hear about Intl API, but I'll take a look, thanks :)

[09:44:09.0860] <TheQwertiest>
 * huh, first time hearing about Intl API, but I'll take a look, thanks :)

[09:44:26.0761] <TheQwertiest>
 * huh, first time hearing about Intl API, I'll take a look, thanks :)

[09:46:30.0886] <emanresu3>
> <@sfink:mozilla.org> I'm not exactly sure how modules are supposed to work, but I can get it to work with dynamic import at least. If I change main.js to:
import('mod1.mjs').then(({fn1, fn2}) => {
    fn1();
    fn2(10,20);
});

then it works if I just run js main.js.

awesome, I didn't think of using dynamic imports, thank you

[09:47:12.0583] <emanresu3>
one last thing I noticed that I can't seem to use top-level await from the JS shell, is this normal?

[09:48:37.0556] <emanresu3>
I have to wrap it in an async function like this:
```
==> mod1.mjs <==
export const fn1 = () => {
  console.log("i'm fn1");
};

export const fn2 = (p1,p2) => {
  console.log(`i'm fn2, pars: ${p1}, ${p2}`);
};

==> main.js <==
#!/usr/bin/js78
(async () => {
  const {fn1,fn2} = await import('mod1.mjs');
  fn1();
  fn2(10,20);
})();
```

[09:48:49.0720] <TheQwertiest>
> <@theqwertiest:mozilla.org> ugh... guess it's not time to rest yet...
> ```
> Run-Time Check Failure #0 - The value of ESP was not properly saved across a function call.  This is usually a result of calling a function declared with one calling convention with a function pointer declared with a different calling convention.
> ```

It seems that SM binary is actually completely broken, I was just lucky first time with SM calls during my limited testing...
I doubt that clang did something that totally broke MS-compat (since clang-cl is actively used everywhere for Win builds), so I think that the problem is with compilation flags changes between 91ESR and 102ESR

[09:49:22.0280] <TheQwertiest>
 * It seems that SM binary is actually completely broken, I was just lucky first time with SM calls during my limited testing...
I doubt that clang did something that totally broke MSVC-compat (since clang-cl is actively used everywhere for Win builds), so I think that the problem is with compilation flags changes between 91ESR and 102ESR

[09:51:03.0653] <emanresu3>
> <@emanresu3:matrix.org> I have to wrap it in an async function like this:
==> mod1.mjs <==
export const fn1 = () => {
  console.log("i'm fn1");
};

export const fn2 = (p1,p2) => {
  console.log(`i'm fn2, pars: ${p1}, ${p2}`);
};

==> main.js <==
#!/usr/bin/js78
(async () => {
  const {fn1,fn2} = await import('mod1.mjs');
  fn1();
  fn2(10,20);
})();

if I don't wrap it, it throws `SyntaxError: await is only valid in async functions and async generators:`

[10:05:05.0275] <Redfire>
> <@emanresu3:matrix.org> one last thing I noticed that I can't seem to use top-level await from the JS shell, is this normal?

top-level await is only supported in modules, js shell runs as a script (with dynamic imports) but still a script

[10:27:35.0294] <emanresu3>
great thanks! Now I think I can write the script to work for SM too

[10:32:33.0624] <TheQwertiest>
> <@theqwertiest:mozilla.org> It seems that SM binary is actually completely broken, I was just lucky first time with SM calls during my limited testing...
> I doubt that clang did something that totally broke MSVC-compat (since clang-cl is actively used everywhere for Win builds), so I think that the problem is with compilation flags changes between 91ESR and 102ESR

btw, if I find a flag that break ms-compat, would such a bug report actually accepted? Since, IIRC, SM no longer target windows builds

[10:32:50.0374] <TheQwertiest>
 * btw, if I find this flag that breaks ms-compat, would such a bug report be actually accepted? Since, IIRC, SM no longer target windows builds

[10:36:38.0745] <TheQwertiest>
 * btw, if I find this flag that breaks ms-compat, would such a bug report be actually accepted? Since, IIRC, SM no longer target windows builds

PS: I'm 99% sure that this is the cause, since 91 esr works fine when built with the same compiler

[10:52:22.0525] <TheQwertiest>
 * btw, if I find this flag that breaks ms-compat, would such a bug report be actually accepted? Since, IIRC, SM no longer targets windows builds

PS: I'm 99% sure that this is the cause, since 91 esr works fine when built with the same compiler

[11:16:53.0262] <Redfire>
I don't think SM not targeting windows builds would make any sense

[11:40:34.0168] <sfink>
we don't target msvc on windows anymore. We definitely target clang-cl on windows, and that is where the majority of our users are. We try to maintain msvc compatibility when compiling with our headers, on a best-effort basis, and we appreciate bug reports when that breaks.

[11:57:31.0895] <TheQwertiest>
well, I give up

[11:58:50.0093] <TheQwertiest>
I found two new compile flags in 102: 
```
-fno-strict-aliasing
-ffp-contract=off 
```
I've removed them from `python\mozbuild\mozbuild\frontend\context.py`, but the problem is still there...

[11:59:28.0107] <TheQwertiest>
 * I found two new compile flags in 102:

```
-fno-strict-aliasing
-ffp-contract=off 
```

I've removed them from `python\mozbuild\mozbuild\frontend\context.py`, but the problem is still there after compilation... (and it takes around 20mins to build it on my machine)

[11:59:57.0927] <TheQwertiest>
I didn't find any other differences in compilation flags (aside from various warning suppresions)

[12:00:39.0499] <TheQwertiest>
there are no differences in linker flags

[12:04:10.0258] <TheQwertiest>
guess I'll have to stay on 91esr for foreseeable future

[12:44:30.0878] <TheQwertiest>
I've accidentally found out one place, which makes at least some of the calls borked: during compilation `MOZ_DIAGNOSTIC_ASSERT_ENABLED` is defined, but it's not defined in `js-config.h`

[12:44:38.0351] <TheQwertiest>
 * I've accidentally found out one place, which makes at least some of the calls borked: during compilation `MOZ_DIAGNOSTIC_ASSERT_ENABLED` is defined, but it's not defined in generated `js-config.h`

[13:11:15.0466] <TheQwertiest>
 * I've accidentally found out one place, which makes at least some of the calls borked: during compilation `MOZ_DIAGNOSTIC_ASSERT_ENABLED` is defined, but it's not defined in generated `js-config.h`, thus it generates different code in SM and in embedding

[13:17:56.0198] <TheQwertiest>
more macros that are defined during compile time and used in public headers, but are not defined in generated js-config:
```
#define JS_CODEGEN_X86 1
#define JS_DEBUG 1
#define JS_JITSPEW 1
#define JS_MASM_VERBOSE 1
#define JS_STANDALONE 1
#define MOZ_DEBUG 1
#define MOZ_DIAGNOSTIC_ASSERT_ENABLED 1
```

[13:19:17.0226] <TheQwertiest>
adding these fixed at least some of the crashes, but regretfully only a small part

[13:19:30.0030] <TheQwertiest>
 * adding these fixed at least some of the crashes, but regretfully it's only a small part of them

[13:20:47.0190] <TheQwertiest>
I won't be surprised, if there are missing (or different) macro defines other than those from config.status

[13:22:20.0010] <TheQwertiest>
 * I won't be surprised, if there are more missing (or different) macro defines other than those from config.status

[13:50:21.0034] <TheQwertiest>
I think I got it!
```
#define XP_WIN 1
#define JS_CODEGEN_X86 1
#define JS_DEBUG 1
#define JS_JITSPEW 1
#define JS_MASM_VERBOSE 1
#define JS_STANDALONE 1
#define MOZ_DEBUG 1
#define MOZ_DIAGNOSTIC_ASSERT_ENABLED 1
```

[13:50:41.0867] <TheQwertiest>
have yet to see a crash with these defined

[13:51:04.0152] <TheQwertiest>
but someone reaaaaaaaaaaaaaaally need take a good and loooooong look at this

[13:51:16.0120] <TheQwertiest>
8 missing macros is a lot

[13:51:28.0817] <TheQwertiest>
 * I think I've got it!

```
#define XP_WIN 1
#define JS_CODEGEN_X86 1
#define JS_DEBUG 1
#define JS_JITSPEW 1
#define JS_MASM_VERBOSE 1
#define JS_STANDALONE 1
#define MOZ_DEBUG 1
#define MOZ_DIAGNOSTIC_ASSERT_ENABLED 1
```

[13:51:50.0218] <TheQwertiest>
 * but someone really need take a good and loooooong look at this

[13:51:53.0934] <TheQwertiest>
 * but someone really needs take a good and loooooong look at this

[13:53:45.0845] <TheQwertiest>
this easily takes top 1 in my list of most annoying things I've had to debug to embed SM

[13:56:28.0891] <TheQwertiest>
and I'm 100% sure that this bug would generate UB in other embedings as well (thought I don't know how many of them adopted 102)

[14:02:31.0754] <TheQwertiest>
(at least there were no `#ifdef __clang__` defines that affected code generation, otherwise it would be a huge PITA to fix)

[14:58:22.0069] <TheQwertiest>
 * I think I've got it!

```
#define XP_WIN 1
#define JS_CODEGEN_X86 1
#define JS_JITSPEW 1
#define JS_MASM_VERBOSE 1
#define JS_STANDALONE 1
#define MOZ_DEBUG 1
#define MOZ_DIAGNOSTIC_ASSERT_ENABLED 1
```

[15:10:59.0333] <TheQwertiest>
 * 7 missing macros is a lot

[15:14:36.0350] <TheQwertiest>
and another thing: these macros must be defined *before* including *any* SM header

[15:15:08.0609] <TheQwertiest>
because they affect mozilla/* headers, which do not include js-config


2023-06-12
[21:08:37.0689] <Redfire>
How does `JSPropertySpec::Name` work with symbols? Does it just accept a `Symbol*`? I'm confused since it just says its a `uintptr_t`. 

[00:51:32.0082] <evilpie>
> <@redfire75369:mozilla.org> How does `JSPropertySpec::Name` work with symbols? Does it just accept a `Symbol*`? I'm confused since it just says its a `uintptr_t`.

It's  `SymbolCode | 0x1` https://searchfox.org/mozilla-central/source/js/public/PropertySpec.h#168

[01:08:39.0862] <ptomato>
> <@theqwertiest:mozilla.org> I think I've got it!
> 
> ```
> #define XP_WIN 1
> #define JS_CODEGEN_X86 1
> #define JS_JITSPEW 1
> #define JS_MASM_VERBOSE 1
> #define JS_STANDALONE 1
> #define MOZ_DEBUG 1
> #define MOZ_DIAGNOSTIC_ASSERT_ENABLED 1
> ```

I did some work on this in the past: https://bugzilla.mozilla.org/show_bug.cgi?id=1590907

[05:04:18.0725] <TheQwertiest>
> <@pchimento:igalia.com> I did some work on this in the past: https://bugzilla.mozilla.org/show_bug.cgi?id=1590907

should I open a new bug?

[05:05:03.0856] <evilpie>
> <@redfire75369:mozilla.org> How does `JSPropertySpec::Name` work with symbols? Does it just accept a `Symbol*`? I'm confused since it just says its a `uintptr_t`.

 * It's  `SymbolCode + 0x1` https://searchfox.org/mozilla-central/source/js/public/PropertySpec.h#168

[06:24:10.0473] <mccr8>
jonco: Does the Wasm GC work require integration with the JS GC? I'm mostly wondering about whether the tracing might have changed in any kind of way that the cycle collector would need to be aware of.

[06:38:06.0186] <jandem>
mccr8: Jon is on pto today, but as far as I know Wasm GC objects are traced like other JS objects so I think it should just work with the CC

[06:40:07.0996] <mccr8>
> <@jandem:mozilla.org> mccr8: Jon is on pto today, but as far as I know Wasm GC objects are traced like other JS objects so I think it should just work with the CC

Thanks. Yeah I don't see a new TraceKind for them so I think it should be okay.

[06:40:19.0657] <mccr8>
Messing with the TraceKinds is really what causes issues, I think.

[06:40:47.0242] <jandem>
yeah internally they're just a special kind of `JSObject`

[06:40:51.0994] <mccr8>
Cool.

[06:41:15.0551] <mccr8>
I should probably add changes to TraceKind.h to my Phabricator "watch list"...

[08:32:23.0988] <sfink>
jandem: I [commented](https://phabricator.services.mozilla.com/D180403#5963723) on the initialization failure patch, but you might need to take that bug over if I'm getting the data structures' relationships wrong. Falling back to something closer to the previous behavior would probably be safer?

[08:35:31.0401] <jandem>
sfink: ah you're right, I missed that the `clearJitZone` call was moved in this version

[08:36:09.0575] <jandem>
I wonder if changing `updateAllZoneAllocFlags` to skip the atoms zone is more like the previous behavior

[08:38:00.0599] <sfink>
Probably. Is that the only zone that is going to be used here for self-hosting and baseline etc (the stuff that happens during initialization). I guess it would leak on initialization before?

[08:43:17.0036] <jandem>
sfink: I don't think we run any script or JIT compilation before `createJitRuntime`, so it'd be just the trampolines allocated in the atoms zone under `createJitRuntime`

[08:44:24.0940] <jandem>
there's a release assert in `InitSelfHostedCode` that it's only called once, so as long as callers check the return value of that I think everything gets cleaned up as part of the destroy-runtime gc?

[08:46:18.0972] <sfink>
the `JitZone` pointers are still there, whatever that means.

[08:46:59.0606] <jandem>
they are deleted when we destroy the atoms zone

[08:47:23.0083] <sfink>
and generateBaselineICFallbackCode and GenerateBaselineInterpreter don't create anything in other zones?

[08:48:03.0047] <jandem>
no it's all in the atoms zone

[08:50:08.0328] <jandem>
it's a bit unfortunate that `createJitRuntime` has this side-effect on OOM but I don't know if there's a simple fix

[08:50:38.0862] <jandem>
 * it's a bit unfortunate that `createJitRuntime` still creates the `JitZone` on OOM but I don't know if there's a simple fix

[08:51:14.0250] <sfink>
so to be sure I understand: the atoms zone's `JitZone` is deleted when the atoms zone is destroyed, but the `JitZone*` field is not cleared out?

[08:52:46.0257] <sfink>
because `UpdateAllZoneAllocFlags` gets the atoms zone when it iterates over zones, even though the shutdown GC has happened

[08:52:55.0604] <jandem>
sfink: I was looking at this: https://searchfox.org/mozilla-central/rev/b91e9bef5a6d6f7b549fbc9cba70cb4665ed3866/js/src/gc/Zone.cpp#205

[08:53:34.0201] <sfink>
I guess the question is whether the atoms zone is actually deleted, then

[08:53:53.0519] <jandem>
it should be deleted as part of the final gc

[08:54:21.0616] <sfink>
yeah, and I'm not sure that's happening in this failed-initialization case, given that it's still present to be iterated over.

[08:54:39.0305] <sfink>
maybe I'll walk through another rr recording and see whether it's being deleted.

[08:57:54.0627] <sfink>
I can see that during that after disabling the nursery, there's still 1 zone left in GCRuntime::zones ...

[09:07:49.0414] <sfink>
it looks like the GC skips the atoms zone when sweeping zones, and only deletes it when [killing the GCRuntime](https://searchfox.org/mozilla-central/source/js/src/gc/GC.cpp#917-928) which is soon after disabling the nursery.

[09:08:36.0777] <sfink>
so the atoms zone in particular will always be alive, and its `JitZone*` is the one causing problems.

[09:09:28.0511] <sfink>
 * it looks like the GC skips the atoms zone when sweeping zones, and only deletes it when [killing the GCRuntime](https://searchfox.org/mozilla-central/source/js/src/gc/GC.cpp#917-928), but the delete is soon *after* disabling the nursery.

[09:16:58.0830] <sfink>
the alloc flags are irrelevant ot the atoms zone, I think, so making `Nursery::updateAllZoneAllocFlags` skip the atoms zone is totally reasonable. I guess it just makes me nervous that we have inconsistent state, where `jitRuntime_` is null but the atoms zone still has a non-null `jitZone_` pointer. Changing the nursery will fix this immediately problem, but could it come back if something else decides to cancel offthread compiles for some other reason?

[09:18:30.0537] <sfink>
given that this is specific to the atoms zone, my current patch that iterates over all zones doesn't seem right

[09:18:44.0405] <jandem>
it'd have to be something in GC because I think that's the only thing that runs if initialization fails there

[09:19:07.0409] <jandem>
maybe we could also check for this in `JitDataStructuresExist`?

[09:19:22.0909] <sfink>
I was worried about slowing that down for a corner case, but yes, that would do it too

[09:23:13.0824] <jandem>
I think ideally we'd stop using the atoms zone for this and instead store trampolines directly in `JitRuntime`. They live until we destroy the runtime so we don't need `JitCode`'s GC tracing for them. That's a much larger change though

[09:24:19.0159] <sfink>
right, makes sense

[09:24:30.0194] <sfink>
ok, it's seeming like right now the thing to do is just skip the atoms zone

[09:25:21.0962] <jandem>
yeah that should work

[09:26:02.0011] <sfink>
and maybe add an assert somewhere if I can figure out a good place

[09:26:27.0845] <Redfire>
> <@evilpie:mozilla.org> It's  `SymbolCode + 0x1` https://searchfox.org/mozilla-central/source/js/public/PropertySpec.h#168

huh, what's the `+1` for, to make nullptr a valid name (w/ string) or smth?

[09:28:06.0066] <jandem>
maybe we could assert in `CancelOffThreadIonCompileLocked` before getting the runtime's lazy link list

[09:29:14.0920] <jandem>
Redfire: see line 171, 0 means uninitialized

[09:31:10.0388] <jandem>
 * Redfire: see line 171, 0 means uninitialized. (Searchfox thinks that `operator bool` definition is unused so I don't know if we actually depend on that)

[09:37:33.0960] <jandem>
 * Redfire: see line 171, 0 means uninitialized. (Searchfox thinks that `operator bool` definition is unused so I don't know if we actually depend on that. Maybe for the end-of-list sentinel value.)

[09:59:54.0051] <TheQwertiest>
nvm

[10:53:58.0077] <TheQwertiest>
it gives me a great confidence boost, when I browse mozilla sources and find the same design decisions made when embedding SM :D

[10:54:56.0511] <TheQwertiest>
 * it gives me a great confidence boost, when I browse mozilla sources and find the same design decisions that I made when embedding SM :D

[11:55:42.0143] <sfink>
it means you and someone else are smoking the same stuff

[14:34:57.0922] <TheQwertiest>
hm... I've found a weird thing: https://searchfox.org/mozilla-central/source/js/src/vm/ErrorReporting.h#77
Exception object is stored in JS::HandleValue without any tracers. Shouldn't it cause problem because of GC?

call site: https://searchfox.org/mozilla-central/source/js/src/vm/JSContext.cpp#897

[14:53:53.0086] <TheQwertiest>
 * hm... I've found a weird thing: https://searchfox.org/mozilla-central/source/js/src/vm/ErrorReporting.h#77
Exception object is stored in JS::HandleValue without any tracers. Shouldn't it cause problems because of GC?

call site: https://searchfox.org/mozilla-central/source/js/src/vm/JSContext.cpp#897

[15:02:05.0735] <iain>
TheQwertiest: Handles don't need to be traced. A HandleValue is a pointer to a RootedValue. The GC knows about the RootedValue. If a GC happens and moves the RootedValue, it will update the pointer stored in the RootedValue, and then loading that pointer through the HandleValue will see the new location.

[15:02:34.0714] <iain>
 * TheQwertiest: Handles don't need to be traced. A HandleValue is a pointer to a RootedValue. The GC knows about the RootedValue. If a GC happens and moves an object referenced by the RootedValue, it will update the pointer stored in the RootedValue, and then loading that pointer through the HandleValue will see the new location.

[15:02:41.0439] <TheQwertiest>
ah

[15:03:47.0234] <TheQwertiest>
Never would've guessed that Handles could be used like that, thanks =)

[15:05:05.0981] <iain>
Note that it only works because the ReportExceptionClosure is stack-allocated, so the (also stack-allocated) RootedValue must outlive the Handle. This wouldn't be safe if we were storing the handle in a heap object that outlived the root.

[15:07:26.0120] <TheQwertiest>
it would've worked even with heap allocated closure, if it's lifetime is greater than the root though, no?

[15:07:34.0683] <TheQwertiest>
 * it would've worked even with heap allocated closure, if it's lifetime is greater than the root's though, no?

[15:07:50.0582] <TheQwertiest>
"heap" as in c++ heap

[15:11:50.0966] <iain>
It would work assuming you were right about the lifetime

[15:11:57.0526] <iain>
But that's the sort of thing we try to avoid doing

[16:09:43.0353] <TheQwertiest>
is it possible to somehow add tracer callback to js context?

[16:22:49.0123] <TheQwertiest>
context: currently I store JS::Heap value manager in global object, but I think there's no really need to do that, since JS::Heap values don't care much about global anyway

[16:26:56.0140] <Redfire>
Does `JS_AddExtraGCRootsTracer` not work? 

[16:30:46.0957] <cfallin>
can anyone point me to some details on how top-level async is meant to work? I'm debugging a divergence with some of my local changes and finding `ResumeKind` values differing, but in bytecode whose origin I can't pinpoint; I suspect maybe a toplevel driver loop of some sort is synthesized?

[16:30:51.0582] <TheQwertiest>
> <@redfire75369:mozilla.org> Does `JS_AddExtraGCRootsTracer` not work?

it most likely does, I just didnt manage to find it myself :D

[16:30:54.0506] <TheQwertiest>
thanks ^)

[16:30:57.0009] <TheQwertiest>
 * thanks :)

[16:34:47.0567] <jesup>
Someone told me a Long Time Ago that we don't JIT JS code in DEBUG builds.  This seems somewhat suspect, so I wanted to check.  (Trying to figure out causes of slowness in Debug Opt builds).   Also do we still rescan/GC the JS heap aggressively in debug builds, or did that get turned off?

[16:40:06.0940] <sfink>
We definitely JIT in DEBUG builds. I don't think the thresholds are different for DEBUG, but I could be wrong.

[16:41:03.0393] <sfink>
we don't exactly GC more aggressively in DEBUG, but we do verification passes that look at lots (all?) of the heap and I think are about as slow as a GC.

[16:42:01.0117] <sfink>
the idea of identifying what DEBUG checks are most expensive and selectively enabling/disabling them comes up periodically, but nobody's done it

[16:49:59.0833] <cfallin>
> <@cfallin0:mozilla.org> can anyone point me to some details on how top-level async is meant to work? I'm debugging a divergence with some of my local changes and finding `ResumeKind` values differing, but in bytecode whose origin I can't pinpoint; I suspect maybe a toplevel driver loop of some sort is synthesized?

found some relevant bits (https://searchfox.org/mozilla-central/source/js/src/builtin/Promise.cpp#6415), nevermind :-)


2023-06-13
[23:20:26.0285] <liam_g>
I have a question about the return bool in `BaseProxyHandler::getOwnPropertyDescriptor()`. Should I return false if the function throws an error, or if the property is not found, or both?

[23:22:30.0815] <arai>
liam_g: If a function takes `JSContext*` as 1st parameter and returns `bool`, returning `false` implies there's a pending exception.  so, it should return false if it throws an error, but it should return true if the property is not found

[23:24:39.0747] <liam_g>
That's what I thought, thanks for confirming.

[00:42:08.0885] <Redfire>
arai: Counterpoint: `JS_IsExceptionPending`, literally the opposite

[00:47:49.0377] <arai>
yeah, good point. functions named `JS_Is*` and `JS::Is*` (and maybe some other prediction-style things ?) would work differently, unless there's `bool` out-parameter

[04:57:10.0217] <jesup>
> <@sfink:mozilla.org> we don't exactly GC more aggressively in DEBUG, but we do verification passes that look at lots (all?) of the heap and I think are about as slow as a GC.

Right, I think that's what BZ and I looked at as an example.   If that's still done it's a prime target

[05:55:30.0777] <mgaudet>
> <@cfallin0:mozilla.org> can anyone point me to some details on how top-level async is meant to work? I'm debugging a divergence with some of my local changes and finding `ResumeKind` values differing, but in bytecode whose origin I can't pinpoint; I suspect maybe a toplevel driver loop of some sort is synthesized?

This may also help a bit? https://www.mgaudet.ca/technical/2020/9/1/how-do-generators-generate-in-spidermonkey

[07:49:55.0364] <jonco>
jandem: I noticed that AutoStubFrame::enter takes an optional canGC argument, but it's never supplied so we always use the default.  Worth removing the arugment?  Most calls do look like they can GC.

[07:53:26.0628] <jandem>
jonco: yes please remove. I vaguely remember that being leftover from some TI code

[07:53:41.0850] <jonco>
great, will do

[07:54:35.0977] <jonco>
next question, what happens if we remove a stub that can GC?  The stub code could be executing and have triggered the current GC... but what does wrong?

[07:55:42.0865] <jandem>
I mentioned that in our meeting but thinking about it more, it should be fine to unlink the stub. We'll still trace it through the pointer on the stack that's stored in the stub frame

[07:56:11.0679] <jandem>
that unlinking would be similar to what happens when we mark the IC megamorphic or generic

[07:56:42.0053] <jandem>
 * that unlinking would be similar to what happens when we mark the IC megamorphic or generic so it should just work

[07:57:21.0380] <jonco>
Great, that is simpler.  Thanks.

[07:59:29.0197] <jandem>
(we want to continue discarding JIT code occasionally to ensure we don't waste too much space in the can-gc LifoAlloc in edge cases..)

[07:59:41.0599] <jandem>
 * (we want to continue discarding JIT code occasionally to ensure we don't waste too much space in the can-gc-stub LifoAlloc in edge cases..)

[15:20:45.0510] <iain>
There's a [comment in CompileWrappers.h](https://searchfox.org/mozilla-central/source/js/src/jit/CompileWrappers.h#66-67) that claims "Compilation does not occur off thread when the Gecko Profiler is enabled." That's no longer true, right?

[15:21:15.0560] <iain>
I don't see anywhere that we're enforcing it, and I'm pretty sure we have plenty of profiles with background Ion compiles


2023-06-14
[19:06:08.0539] <sfink>
You're probably right. Sounds like you should update the comment. I suggest prefixing it with "It'll be fun if you write code as if".

[19:12:48.0017] <twisniewski>
Hi folks, I've been looking at Safari release notes lately to uncover web API and other platform gaps, and in the process I have made a list of commits the JSC team has made which include performance optimizations/fixes. Would the SM team be interested in that list, in case it helps uncover anything worth implementing in SM as well?

[19:16:32.0235] <mstange>
twisniewski: bgrins might be interested in comparing his list with yours, he's scavenged commit messages for speedometer improvements

[19:16:58.0601] <twisniewski>
ok, i'll chat with him, thanks

[20:51:23.0615] <iain>
twisniewski: We would indeed be interested!

[20:57:48.0399] <twisniewski>
iain: alright then :) I'll make a small gDocs spreadsheet with the info after i get some sleep, and we can go from there

[06:41:02.0970] <mccr8>
This detailed writeup of a v8 parser zero day that was patched last December might be of interest to people. https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2022/CVE-2022-4262.html

[08:37:31.0931] <iain>
Huh. This seems like a weird way to design a parser: "When such a recompilation happens, the parsing logic can take some shortcuts. For example, when parsing the code (a = 42) => a + 1; for the first time, when reaching the “=”, the parse cannot yet know whether it will parse a variable assignment or an arrow function with a default argument. However, during the second (and third, etc.) parsing, it knows that it is parsing an arrow function. As such, the logic for the initial parsing differs slightly from the logic for any subsequent parsing." Does the ambiguity really slow parsing down enough that storing hints for delazification is worth it?

[08:43:55.0340] <mccr8>
Yeah, kind of interesting that they thought that was worth making their parser more complex for.

[08:47:15.0973] <jonco>
sfink: ping

[08:48:23.0615] <sfink>
sorry was on leadership meeting

[08:48:24.0962] <sfink>
coming in now

[08:49:08.0421] <sfink>
or trying to

[09:22:31.0150] <sfink>
heh, replaying branches in the parser. It's like a parse branch predictor oracle that you have to believe. It does seem a bit complicated and risky.

[09:38:45.0114] <arai>
SpiderMonkey does similar for arrow function.  On the 1st parse, we parse the parameter part as ParenthesizedExpression, and once we found the arrow token follows, roll back the parsing state to the beginning of ParenthesizedExpression and re-parse as ArrowFormalParameters for ArrowFunction.  On the 2nd parse during delazification, we use ArrowFunction as the parsing goal (instead of Expression), so we don't take ParenthesizedExpression pass, and start from ArrowFormalParameters.  so, "storing hint and taking shortcuts" is natural choice for delazification for arrow function

[09:40:15.0542] <iain>
Ah, interesting

[09:40:42.0989] <arai>
I haven't checked V8's parser, but unless they use single pass for CoverParenthesizedExpressionAndArrowParameterList production, the 1st and 2nd parse should be different 

[09:40:43.0873] <iain>
Shows how much I know about the parser 😳

[10:28:40.0349] <silonp>
Guys, does SpiderMonkey support custom allocators? Or is there a way to track memory utilization associated with single JSContext?

[10:39:16.0944] <iain>
silonp: We jump through some hoops to support custom allocators. See [here](https://searchfox.org/mozilla-central/source/config/check_vanilla_allocations.py#7) and [here](https://searchfox.org/mozilla-central/source/js/public/Utility.h#42-44). I'm not sure if there's any documentation describing what you need to implement for a custom allocator; you might have to dig around in the source code.

[10:44:01.0744] <iain>
We also have a variety of mechanisms for tracking allocated memory. Is something like [this](https://searchfox.org/mozilla-central/source/js/src/jsfriendapi.cpp#786) what you're looking for?

[10:44:29.0808] <iain>
 * We also have a variety of mechanisms for tracking memory owned by the GC. Is something like [this](https://searchfox.org/mozilla-central/source/js/src/jsfriendapi.cpp#786) what you're looking for?

[10:46:11.0856] <sfink>
status: I have determined that an optimistic fast version of JSON.stringify() is *much* faster.

[10:46:19.0304] <sfink>
 if it crashes immediately before it looks at most of the input

[10:51:04.0950] <sfink>
and a mere 4x slower than the slow path once I fix that

[10:53:14.0312] <iain>
Does the spec explicitly say that we can't crash there? Seems like a promising approach.

[10:59:09.0844] <twisniewski>
sfink:  speaking of optimizing json.stringify, this might be interesting: https://github.com/WebKit/WebKit/commit/3fa658700239c8e7cbe8fa20793a6314274560cd

[11:00:21.0396] <sfink>
yes, thanks, someone else noticed that one and I was going to try it out after I was done, uh, slowing things down this other way (which is taking inspiration from another JSC commit)

[11:02:48.0919] <twisniewski>
was that other one https://github.com/WebKit/WebKit/commit/f6ec77d6554e5282dd6a264cdc59ab4076baa9e9 ? :)

[11:03:10.0690] <twisniewski>
(actually i'll bet it was https://github.com/WebKit/WebKit/commit/3a9af61361977e1f775f847136d0cf239182c526 )

[11:12:02.0728] <sfink>
yes it was the second one, except that it really just pointed me at the pre-existing fast path that I am now trying to mimic, in some ways in the reverse way as that second commit does.

[11:12:20.0500] <sfink>
(but so far mine is slower, so I may have it backwards!)

[11:13:28.0557] <sfink>
they're saying that the code that avoids recursion with an explicit stack is more compilcated and slower, which seems odd to me. Ok, slightly more complicated maybe, but an explicit stack really ought to be faster and still pretty simple.

[11:13:42.0236] <sfink>
reality is (hopefully temporarily) disagreeing with me at the moment


2023-06-15
[17:07:13.0530] <sfink>
confession: fast path is now a little over twice as fast as slow path, which is good. They're even outputting the same number of characters, which is better. They're not exactly the same characters, which isn't quite as good.

[17:07:19.0786] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[17:49:31.0952] <mstange>
sfink: nice!!

[01:09:06.0453] <liam_g>
I'm using `JS_CallFunctionName()` to run some Javascript. The Javascript has an error in it (an error I've intentionally put there to debug the error handling in my application). But the error isn't getting caught, i.e. `JS_CallFunctionName` is returning true. I'm having a lot of trouble figuring out where the problem is, and I wonder if it's got something to do with a ProxyHandler object I'm using. Is there any case when Proxy objects would alter or fail to propagate errors?

[01:10:52.0627] <liam_g>
In pseudo-code, the situation is something like this:

`JS_RunJSCodeFromCPP("proxyObject.propertyThatDoesntExist = 6")`. This should report an error, but no error is reported.

[01:11:45.0193] <arai>
what's the relation between the error and the function call?

[01:12:19.0291] <arai>
and what error is expected to be reported?

[01:15:10.0143] <liam_g>
The `JS_CallFunctionName()` is calling some Javascript that has been specified by the user. That code might have an error in it. I'm just using a lookup error here as example, but it could be other things as well. I want to do error handling, so if `JS_CallFunctionName()` return false, I can report the error, then clear it. But no error is ever found, and the system continues to work without crashing.

[01:16:10.0151] <arai>
things to verify would be:  1. if the code that throws an error is actually executed,  2. if the code is properly throwing error,  3. what's between the code that throws an error and the code that observes the error

[01:16:53.0809] <arai>
"some" sounds like the issue is happening on users' PC, not yours?

[01:18:13.0535] <arai>
what do you mean by "lookup error" ?

[01:18:56.0290] <liam_g>
I'm certain that the code is being executed, and that it's properly throwing an error. (I've made a much simpler mockup, and the error gets thrown). By lookup error, I mean "x.propertyThatDoesntExist = 1.

[01:19:29.0976] <liam_g>
Your point 3, what's going on between the code that throws and my code, is probably where my problem is.

[01:19:33.0547] <liam_g>
This is all on my PC.

[01:19:51.0790] <arai>
how does `x.propertyThatDoesntExist = 1` throw error?

[01:21:12.0428] <arai>
"property not found" is basically not an error. if getting property, the value becomes undefined, and if setting property, it adds new property, unless the proxy handler does some special thing

[01:21:55.0863] <arai>
do you explicitly call `JS_ReportErrorASCII` or something to throw error there?

[01:22:09.0574] <liam_g>
You're right, of course. I just came up with that example to try to make things simpler, but I got it wrong.

[01:24:01.0484] <liam_g>
So the function that I'm calling to try to debug it is `print(propThatDoesntExist.x)`

[01:25:21.0589] <liam_g>
Print is just my version of `console.log()`. I'm just using it to debug.

[01:25:55.0894] <liam_g>
When I run this in a browser, I get an error message. But here, the program just keeps on running.

[01:27:43.0191] <arai>
where's your proxy handler in the code?

[01:30:18.0239] <liam_g>
It's one of the arguments that gets passed into `JS_CallFunctionName()`

[01:31:01.0694] <arai>
 btw, is the error you're expecting is `ReferenceError: propThatDoesntExist is not defined`, or something else ?

[01:31:02.0036] <liam_g>
And then the JS Function looks up a property in the proxy object...

[01:31:12.0133] <liam_g>
Yes, that's what I'm expecting.

[01:31:50.0568] <liam_g>
The problem might have nothing to do with proxies, it was just a hunch. It's just that I'm finding it very difficult to track down.

[01:33:02.0384] <arai>
okay, first.  how do you confirm that it throws `ReferenceError` ?

[01:34:06.0509] <liam_g>
I'm checking the return value from the `JS_CallFunctionName()` for errors.

[01:34:24.0668] <liam_g>
Also, if the error went unhandled, I'd expect it to crash pretty quickly, but it doesn't.

[01:35:29.0537] <liam_g>
I've also tried putting intentional errors in other parts of the JS code before the proxy is reached. `JS_CallFunctionName()` then returns false, and I can report / clear the error.

[01:36:12.0865] <liam_g>
So it seems that the error is getting caught and then cleared at some point between the proxy and the `JS_CallFunctionName()`.

[01:37:01.0626] <arai>
have you confirmed that the line of the code that is supposed to throw `ReferenceError` is actually executed?

[01:37:23.0975] <liam_g>
Yes.

[01:37:30.0306] <arai>
(the other possibility is that the code is not reached and somehow early returns

[01:37:45.0830] <arai>
 * (the other possibility is that the code is not reached and somehow early returns before that point)

[01:37:47.0731] <arai>
okay, how do you confirm that?

[01:38:37.0499] <liam_g>
If I set the user code to `print(4); print(propThatDoesntExist)`, it prints 4, and then continues

[01:39:28.0645] <arai>
okay.  then, what if there's `print(5);` after that?  is 5 also get printed?

[01:39:59.0029] <liam_g>
No, it halts, and `print(5)` doesn't get printed.

[01:40:07.0172] <liam_g>
So maybe you're right, the error never gets sent.

[01:42:03.0861] <liam_g>
Also, if the code is just "throw new Error()", I don't get an error report either.

[01:42:54.0878] <liam_g>
But I'm not sure if that's relevant, i.e. if that's supposed to get sent all the way back to `JS_CallFunctionName()`

[01:43:35.0077] <arai>
here's my understanding of the issue so far.  Is the following correct?
 1. you have an object that is a proxy `P`, with your own proxy handler
 2. the proxy object has a property `X`, with a function `F` as the value
 3. `JS_CallFunctionName` calls the property `X` on the proxy object `P`
 4. the function `F` gets called, and the `print(4)` inside the function prints 4, but `print(propThatDoesntExist)` doesn't result in the return value `false` for `JS_CallFunctionName`, nor `ReferenceError`


[01:44:34.0871] <arai>
especially I'm not sure if my understanding of where the proxy object is is correct

[01:46:40.0419] <liam_g>
This is essentially correct, though there are a few extra layers in between. I'll describe them, though I'm not sure that they're relevant.

[01:49:11.0457] <liam_g>
1.	I have a proxy P with my own proxy handler
2.	The proxy has property x, but it is not a function
3.	I call `JS_CallFunctionName()` on another unrelated object, which has a function named F. I pass the proxy P in as an argument.
4.	Function F tries to look up property Y on proxy P. Y doesn’t exist, but I don’t get an error message.


[01:51:01.0317] <arai>
the step 4 sounds unrelated to the above `ReferenceError` things

[01:52:08.0226] <arai>
can you share the actual code that looks up ?    I think `print(propThatDoesntExist.x)` doesn't property describe the situation

[01:52:19.0012] <arai>
 * can you share the actual code that looks up ?    I think `print(propThatDoesntExist.x)` doesn't propery describe the situation

[01:52:25.0775] <arai>
 * can you share the actual code that looks up ?    I think `print(propThatDoesntExist.x)` doesn't properly describe the situation

[01:52:42.0785] <arai>
is it more like `print(P.Y)` ?

[01:54:13.0896] <liam_g>
Here is some real user code:

let x = 1

function onClick() 
{
  print(0)
  print(x)
  print(y)
}

[01:54:25.0199] <liam_g>
 * Here is some real user code:
`````
let x = 1

function onClick() 
{
  print(0)
  print(x)
  print(y)
}
`````

[01:54:52.0208] <liam_g>
Here, "onClick" is the function name for `JS_CallFunctionName()`

[01:55:17.0043] <liam_g>
When I click, it prints 0, 1, and then nothing (no error)

[01:55:43.0430] <liam_g>
If I try to equivalent in a browser using `console.log()`, I get an error.

[01:56:57.0495] <arai>
are you using the proxy object P in environment chain or global or somewhere?  otherwise the `y` won't touch P

[01:57:38.0127] <liam_g>
Yes, it's in the environment chain.

[01:58:46.0844] <arai>
uh, if you're using environment chain, the situation would be very different

[01:59:27.0209] <liam_g>
How so?

[01:59:39.0718] <liam_g>
You mean it would be different with respect to errors?

[02:01:04.0662] <arai>
I mean, there are some more things to check

[02:02:38.0110] <arai>
the top-level script is compiled with the environment chain that contains the proxy P, right?

[02:05:45.0482] <liam_g>
In this case, the object where the function called by `JS_CallFunctionName()` lives was compiled *without* the same environment chain. Could that be the problem?

[02:05:50.0449] <liam_g>
I will test it to see.

[02:07:11.0909] <liam_g>
Nope, same result

[02:07:15.0635] <arai>
err, sorry, "compiled" wasn't correct word.  I mean, "evaluated"

[02:09:15.0634] <arai>
okay, so, proxy P has `onClick` because P was the innermost object in the environment chain when the code is evaluated, and `y` access is also touching proxy P because it's still in the environment chain, right?

[02:10:44.0745] <liam_g>
Yes, that's right. So I can step through and see Proxy P looking for property y, and not returning anything.

[02:11:11.0949] <arai>
can you add logging to your proxy handler's `has` hook and see if the access to `y` is happening?

[02:12:06.0413] <arai>
err, `has` might not be correct name for C++ proxy handler

[02:12:09.0302] <arai>
let me check

[02:12:15.0786] <liam_g>
I've done that inside `getPropertyDescriptor()`

[02:12:52.0868] <liam_g>
The property is not found

[02:13:49.0884] <liam_g>
From here I've also stepped into the interpreter code which called the property lookup. I'm in way over my head here, but I do see that it reports the property is not found, and then goes to the "case error" part and tries to unwind the stack.

[02:24:12.0465] <arai>
what do you mean with `getPropertyDescriptor` and what have you done there?

[02:24:46.0893] <arai>
I've checked with simple proxy in env chain and I see that `has` handler is called for `y` access

[02:26:09.0011] <liam_g>
I think that get() set() and has() are all going through getPropertyDescriptor(). I have only overridden getPropertyDescriptor() and not the others.

[02:29:44.0994] <arai>
oh

[02:29:51.0487] <arai>
what's the SpiderMonkey version are you using?

[02:30:49.0844] <arai>
`getPropertyDescriptor` was there until 66  https://hg.mozilla.org/mozilla-central/rev/46790408df7f559425becab13650b0d2c89d108b

[02:33:10.0303] <liam_g>
I'm not even sure which version. How do I check?

[02:36:59.0413] <arai>
if you still have the source package file, it would be named `mozjs-{version_here}`

[02:37:38.0202] <arai>
or if you have source tree, there would be `README` file that contains version info

[02:38:49.0094] <liam_g>
Version 102a1

[02:39:44.0445] <liam_g>
getOwnPropertyDescriptor is still there. But good to know that it's deprecated, i can replace it with the standard methods 

[02:39:51.0785] <arai>
oh

[02:40:03.0141] <arai>
no, `getOwnPropertyDescriptor` is NOT deprecated

[02:40:17.0946] <arai>
`getPropertyDescriptor` was removed

[02:40:41.0821] <liam_g>
Oh sorry, i just missed the "own".

[02:41:08.0439] <liam_g>
Sorry for the confusion.

[02:41:10.0293] <arai>
okay, no problem :)

[02:43:09.0091] <arai>
okay, then going back to whether the access happens.  I don't see `getOwnPropertyDescriptor` call for `y` in that context.  have you check that the `getOwnPropertyDescriptor` is called with `y` in `id` parameter?

[02:43:39.0151] <liam_g>
Yes, it definitely is. I've stepped through that code

[02:44:48.0477] <arai>
okay, then there should be some other difference between my testcase and yours.  let me try some more

[02:45:17.0169] <liam_g>
It could be that I'm reporting the absence of y incorrectly. (That's why I was asking the other day if i should be returning false from that function).

[02:45:56.0360] <arai>
what's the base class of your proxy handler?

[02:46:14.0431] <liam_g>
Right now, i return true from the function and do nothing to the Maybe<PropertyDescriptor>

[02:46:46.0628] <liam_g>
It's my own base class, overriden directly from BaseProxyHandler 

[02:47:03.0067] <arai>
yeah, that should be correct way to report missing property

[02:49:11.0018] <arai>
base class is `js::BaseProxyHandler` and you've overridden only `getOwnPropertyDescriptor`?  sounds strange.  in that case the class is still abstract

[02:49:36.0577] <arai>
oh, I guess I misunderstood

[02:51:07.0115] <arai>
other necessary things are overridden, but optional things are not, right?

[02:51:24.0959] <liam_g>
I've overriden lots of functions, but getOwnPropertyDescriptor is the one that matters here

[02:51:44.0789] <arai>
and yes, it was my mistake.  I was using `ForwardingProxyHandler` as base class, and that behaved differently about `has` etc

[02:51:50.0378] <arai>
let me check with BaseProxyHandler

[03:08:42.0872] <arai>
liam_g: does your proxy handler do something special in that context?  what happens if you use the wrapped object directly instead of the proxy?

[03:09:33.0849] <arai>
or using plain forwarding proxy handler:
```cpp
class TestProxyHandler : public js::ForwardingProxyHandler {
 public:
  constexpr TestProxyHandler() : js::ForwardingProxyHandler(&family) {}
  static const char family;
};
const char TestProxyHandler::family = 0;
```


[03:11:10.0933] <liam_g>
My ProxyHandler is quite central to the design, and it's quite difficult to not use it at this point.

[03:11:26.0091] <liam_g>
 * My ProxyHandler is quite central to the design, and it's quite difficult to replace it.

[03:11:59.0572] <liam_g>
But I can try to set up another non-proxy object in-situ just for testing. That's a good idea.

[03:13:45.0268] <liam_g>
One thing I have tried is adding a normal object to the proxy object, and then accessing one of its properties. So like this:
`````
let x = {}

function onClick() 
{
  print(x.y)
}

[03:14:01.0933] <arai>
also, the other test:  can you wrap `print(y)` with `try{ ... } catch(e){ print(3); }` and see if 3 is printed?

[03:14:03.0178] <liam_g>
I get the same result: no print, no error

[03:14:14.0738] <liam_g>
Good idea

[03:15:34.0037] <arai>
`x.y` causing the issue sounds strange.   have you checked if `print`'s underlying C++ function is called for each case?

[03:15:52.0020] <liam_g>
`print()` is not called. 

[03:16:16.0704] <liam_g>
When I do the `try catch` thing, the catch catches the error, and the "3" is printed

[03:16:42.0496] <liam_g>
So it really looks like the error is being handled somewhere along the line where I can't see.

[03:18:21.0420] <liam_g>
It might be that it's calling into my own code somewhere, and I'm unwittingly clearing the error. But I've looked everywhere for this and I can't find it.

[03:18:57.0740] <liam_g>
Stepping through the code, it looks to me like the error gets handled somewhere inside the interpreter. But unfortunately I'm not able to follow this code very well.

[03:20:35.0275] <liam_g>
> <@liam_g:mozilla.org> It might be that it's calling into my own code somewhere, and I'm unwittingly clearing the error. But I've looked everywhere for this and I can't find it.

I tried to set it up so that all my errors pass through a single function, for this very reason. And that function doesn't get called here.

[08:13:23.0228] <nbp>
I noticed that we have a `js::QuoteString` which is used during error reporting and during some debug functions.

However, I have one issue with these function, which is that they are calling `ensureLinear` on a `JSString`, which might interact with the GC and so on …
I would expect that we should not expect to rely on this `ensureLinear` call happening while logging.

Would it make sense to have the same effect without the `JSRope` mutations?
jandem, arai What do you think?

[08:15:02.0210] <nbp>
I happen to have an implementation of it, and if we do not require performance nor caching, it sounds to me that this would be a sensible replacement. As we avoid mutation of the GC heap while running some Debug-like functions.

[08:19:00.0615] <jandem>
if you're worried about changing the string's representation in a debugging function, you could use `copyChars` maybe and then pass that array to `QuoteString`?

[08:23:31.0703] <nbp>
Thanks for the reference, I happened to have implemented another rope traversal which does not allocate prior to copying. Maybe this can be retrofitted to copyChars.

[08:24:41.0798] <mstange>
nbp: can you use your traversal for EqualStrings?

[08:24:45.0863] <nbp>
To avoid the chains of small reallocations and error handling we have to do around the debug generation.

[08:25:26.0617] <nbp>
mstange: Not in its current form, but given I have not submitted it for review, I can add that to the requirements ;)

[08:25:45.0862] <jandem>
there's also `StringSegmentRange` to traverse ropes

[08:26:48.0647] <nbp>
mstange: Well … I guess EqualString might want some short-circuit logic, and the ability to traverse both rope at the same time.

[08:26:56.0394] <mstange>
yeah

[08:27:17.0011] <mstange>
handling just the linear==rope and rope==linear cases might already help

[08:27:41.0127] <mstange>
(I'm trying to find where I found EqualStrings->ensureLinear in the profiles; it wasn't a big cost but it was visible)

[08:30:12.0297] <nbp>
jandem:  Both `copyChars` and `StringSegementRange` have a quadratic behavior in case of reused ropes.

[08:30:54.0026] <mstange>
nbp: Ah it was React-Stockcharts and React-Stockcharts-SVG, in the diffProperties function: https://share.firefox.dev/42GPDVk

[08:31:22.0637] <jandem>
yes there are cases where flattening once would be better.. when comparing the same rope repeatedly

[08:34:26.0384] <jandem>
worth measuring though

[08:36:27.0041] <mstange>
The EqualStrings->ensureLinear call is just 0.26% of [this Windows React-Stockcharts-SVG profile](https://share.firefox.dev/3NubcDY) (294 samples out of 111000), so you might not see the impact of this optimization in the scores

[08:36:46.0489] <nbp>
mstange: It sounds to me that the `EqualStrings` can be build on top of the `StringSegmentRange`, as it would give you the ability to traverse both strings / rope incrementally.

[08:37:05.0487] <mstange>
 * The EqualStrings->ensureLinear call is just 0.26% of [this Windows React-Stockcharts-SVG profile](https://share.firefox.dev/3NubcDY) (294 samples out of 111000), so you might not see much impact of this optimization in the scores

[08:37:10.0495] <mstange>
sounds good

[08:38:59.0251] <nbp>
If you want I can look into it after finishing with this GenericPrinter long overdue overall.

[08:40:05.0569] <nbp>
 * mstange: If you want I can look into it after finishing with this GenericPrinter long overdue overall.

[08:50:56.0916] <mstange>
nbp: I think it's only worth doing if you're touching the code anyway and it doesn't require context switching. We have many lower hanging fruit than this.

[09:01:45.0255] <nbp>
I guess I could retrofit the caching mechanism on top of the `StringSegmentRange`, and use that instead of re-implementing a traversal.

[09:29:05.0612] <nbp>
iain: Apparently updating the repository removed the file I was mentioning.

[09:29:12.0984] <iain>
nbp: I think this is the one you already found? https://github.com/mozilla/Speedometer/commit/b86f6886b8ebd4979dfb286cd56a42abefaa2784

[09:30:05.0588] <iain>
Maybe try that out and see if you can figure out what's getting inlined differently

[09:30:21.0918] <iain>
You could also test it in the browser if you can't make Vue work in the shell

[09:35:51.0960] <nbp>
Is it possible to run only the Vue benchmark in the browser, and not the rest?

[09:49:34.0633] <mgaudet>


iain about the property iterator cache; as I said in the meeting -- i sort of see how to consume the API for a single pass right now, but what's not clear to me is how the iterator can be recycled. 

[09:51:30.0411] <iain>
mgaudet: What we currently do with for-in is we cache the iterator object on the shape: https://searchfox.org/mozilla-central/source/js/src/vm/Shape.h#173

[09:51:57.0999] <iain>
There are a couple of problems with this from the point of view of object.keys

[09:52:23.0120] <mgaudet>
Yep -- that's where I got it from

[09:53:46.0534] <iain>
First, when we do property iteration, there is an iterator object on the stack, which owns the NativeIterator that stores the actual data. There's no equivalent object for object.keys, so the lifetime of the NativeIterator is less clear

[09:54:24.0620] <nbp>
jonco: sfink: Would it make sense to have an equivalent of Rooted which instead of taking a JSContext* as argument, takes an AutoAssertNoGC reference?

[09:54:26.0136] <iain>
Second, there's a bunch of gunk in NativeIterator that isn't relevant to object.keys

[09:55:40.0609] <mgaudet>
So one option here would be to cache the ValueVector on the shape with similar infrastructure that is used for the PropertyIteratorObject

[09:57:15.0435] <iain>
jandem ran some tests and saw that we frequently called object.keys on objects that already had a cached iterator (like 50% of the hits in some sp3 cases, IIRC?)

[09:57:58.0840] <iain>
So in an ideal world we would find a way to cache the information on the shape such that it could be shared between for-in and Object.keys (and maybe other things like Object.entries, etc)

[09:58:08.0670] <mgaudet>
That was the thinking -- but if the iterator is consumed by iterating it in Object.keys, then it seems less useful? 

[09:58:28.0178] <iain>
Why is it being consumed?

[09:58:59.0890] <mgaudet>
```   
do {
      prop = ni->nextIteratedValueAndAdvance();
      js::DumpValue(prop);
    } while (!prop.isMagic(JS_NO_ITER_VALUE));
```

only works once 

[09:59:05.0823] <sfink>
> <@nbp:mozilla.org> jonco: sfink: Would it make sense to have an equivalent of Rooted which instead of taking a JSContext* as argument, takes an AutoAssertNoGC reference?

Reminds me of [`FakeRooted`](https://searchfox.org/mozilla-central/source/js/src/gc/MaybeRooted.h#31), though in a way that's the opposite. It does seem like it should have an `AutoCheckCannotGC` field in it.

[09:59:22.0198] <jonco>
was writing this comment ^

[09:59:24.0211] <mgaudet>
(a second pass finds the cached iterator, but it's not working

[09:59:24.0998] <iain>
mgaudet: https://searchfox.org/mozilla-central/source/js/src/vm/Iteration.h#415

[09:59:35.0323] <jonco>
nbp: what is the use case for this though?

[09:59:44.0287] <sfink>
but how many APIs do we have that take Handles and cannot GC?

[09:59:48.0942] <mgaudet>
Aha! Precisely what I was looking for

[09:59:49.0360] <sfink>
I think we avoid doing that

[10:00:18.0307] <nbp>
To make use of it in a code which is parametrized by a trait, and which does not change the usage of the Rooted/FakeRooted.

[10:00:56.0170] <nbp>
The reason for having a AutoAssertNoGC is to have an argument which is used when the JSContext is burried somewhere else.

[10:01:02.0238] <sfink>
jonco: btw, in my current `JSON.stringify` prototype, I had to comment out the `FakeRooted` copy constructor deletion. I still need to go back and understand what that means.

[10:01:17.0705] <mgaudet>
iain: Couldn't find it because I was looking for it to mutate the initialized flag :) 

[10:03:53.0283] <iain>
mgaudet: I found it because I looked up `nextIteratedValueAndAdvance` in searchfox and it was directly beneath it :)

[10:05:06.0279] <iain>
isInitialized is only changed in the constructor, I think

[10:05:26.0290] <iain>
We do a weird dance because constructing a NativeIterator is fallible

[10:05:35.0768] <mgaudet>
iain: So the mismatch between the native iterator and the requirement of keys is partially the presence of prototype properties -- how does this native iterator get the set of properties? 

[10:05:45.0684] <mgaudet>
(if you know; otherwise I can start spelunking)

[10:07:02.0395] <iain>
We have [this class](https://searchfox.org/mozilla-central/source/js/src/vm/Iteration.cpp#100) that populates a vector of properties

[10:08:11.0015] <iain>
And optionally a vector of indices, which we can use in code like `for (var key in obj) { doSomethingWith(obj[key]); }` to look up `obj[key]` more efficiently than a megamorphic load

[10:10:50.0184] <iain>
I'm not 100% sure, but I think the set of cases where we can produce the indices vector is very similar to the set of cases where for-in and object.keys produce the same results

[10:11:09.0180] <iain>
I guess maybe object.keys doesn't care if something is a getter/setter

[10:12:26.0221] <mgaudet>
I think I've got a good pointer here :) At least enough to start sketching some pieces 

[10:13:07.0982] <iain>
The other complicated piece to be aware of is the interaction with indexed properties (aka things that are stored in elements, not slots)

[10:13:52.0217] <iain>
Because adding a new element doesn't change the shape, but it changes the set of properties we have to enumerate

[10:15:16.0086] <mgaudet>
but not for keys... right? Because it only returns string typed things

[10:15:25.0482] <mgaudet>
 * but not for keys... right? Because it only returns string typed property keys

[10:20:01.0000] <iain>
```
js> Object.keys([1,2,3])
["0", "1", "2"]
```

[10:20:01.0368] <mgaudet>
oh wait I think I'm misreading MDN

[10:20:31.0508] <iain>
Basically our answer there is that if you have elements then we don't cache anything

[10:20:32.0747] <mgaudet>
> Object.keys() returns an array whose elements are strings corresponding to the enumerable string-keyed property names found directly upon object.

This is very confusing 

[10:20:47.0344] <iain>
From the spec's point of view, all properties are either strings or symbols

[10:21:07.0833] <mgaudet>
Ah; that's a key insight 

[10:23:52.0491] <iain>
There are IntegerIndexed exotic objects (eg typed arrays), but they're just objects that are defined to have special behaviour for string properties that [convert cleanly to integers](https://tc39.es/ecma262/#sec-canonicalnumericindexstring)

[10:24:25.0947] <iain>
(see also [here](https://tc39.es/ecma262/#_ref_1521))

[10:28:24.0796] <iain>
Also, if you haven't seen it yet, I wrote an [SMDOC](https://searchfox.org/mozilla-central/source/js/src/vm/Iteration.h#22) covering most of the things I know about for-in enumeration

[10:28:53.0030] <mgaudet>
I haven't seen that... 

[10:28:55.0676] <mgaudet>
/me starts reading

[11:28:01.0837] <tcampbell>
iain: should https://github.com/mozilla-spidermonkey/speedometer be archived now that https://github.com/mozilla/speedometer is being used?

[11:31:06.0553] <iain>
tcampbell: Yeah, that seems like a good idea

[11:34:04.0644] <tcampbell>
Done.

[14:28:03.0730] <mgaudet>
What's the fastest way to create a new ArrayObject from the values of pre-existing one (and let's say you could assume it was a 'newborn' array?)

[14:32:34.0646] <mgaudet>
(I may have a better answer here) 

[14:34:26.0342] <evilpie>
`NewDenseCopiedArray` maybe?

[14:36:07.0968] <evilpie>
or rather `CopyDenseArrayElements`

[15:02:11.0617] <mgaudet>
for my purposes I ended up holding onto a values array and using NewDenseCopiedArray 

[15:03:16.0943] <mgaudet>
confession: Working on a cache and all I can think is about invalidation :S

[15:03:19.0808] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[15:05:00.0496] <iain|>
mgaudet: Worth noting: we clear the shape cache pointer on every GC

[15:23:10.0876] <mgaudet>
Yep— but doesn’t deal with indexed properly addition :) 

But that is a problem for tomorrow Matthew.  

[15:51:05.0420] <iain>
mgaudet: This is how we check it in jitcode: https://searchfox.org/mozilla-central/source/js/src/jit/MacroAssembler.cpp#5771


2023-06-16
[08:05:59.0468] <iain|>
mgaudet: In bug 1836679, the big speedup is from storing the array of keys and using it to quickly populate the result array?

[08:06:01.0800] <botzilla>
https://bugzil.la/1836679 — NEW (nobody) — Object.keys can be 30x slower in SM

[08:06:50.0947] <iain|>
The cached NativeIterator already has a contiguous array of property names. Is there a reason we couldn't use that instead?

[08:07:37.0969] <mgaudet>
iain: Possibly! I'll have to take another look later 

[09:14:32.0706] <iain>
 * The cached NativeIterator already has a [contiguous array of property names](https://searchfox.org/mozilla-central/source/js/src/vm/Iteration.h#363-388). Is there a reason we couldn't use that instead?

[10:50:36.0668] <mgaudet>
iain: It's a little slower than just caching the array directly, because NativeIterator stores JSStrings, whereas NewCopiedArray wants an array of Values; so after adding a 'quickly init an array from an array of JSString' method, it's 2.8x faster than the baseline. 

[10:51:55.0223] <iain>
Compared to 7x faster if we store values directly?

[10:52:24.0526] <mgaudet>
iain: About prototype properties. My current patch surprised me by not failing a test case for prototype properties like I expected. You say we can ask the indices state to see if we need to filter -- but are there other cases where the NI cache already doesn't have proto props? 

[10:52:33.0896] <mgaudet>
> <@iain:mozilla.org> Compared to 7x faster if we store values directly?

yes

[10:53:22.0915] <mgaudet>
This is of course a microbenchmark; so that difference is almost certainly the difference between memcpy and `for (...) { value[i] = StringValue(strings[i]); }` 

[10:54:20.0887] <mgaudet>
Storing values directly gets us to ~V8's speed

[10:55:03.0085] <mgaudet>
but it's a heck of a lot more complicated to implement as implied by the comment on the bug -- Thinking this afternoon I'll try to get this approach (NativeIterator) to pass tests then run on SP3

[11:03:47.0383] <TheQwertiest>
hm... Can I use JS_SetProperty for js object to add a new property with value? Or should it always be preceded by DefineProperty?

[11:04:24.0467] <sfink>
JS_SetProperty should work, I believe

[11:07:12.0243] <TheQwertiest>
well, it doesn't crash at least, but I wanted to check just in case =)
Thanks :)

[11:13:44.0112] <iain>
mgaudet: It seems a little surprising that memcpy is more than 2x faster than memcpy-with-xor.

[11:14:41.0814] <mgaudet>
> <@iain:mozilla.org> mgaudet: It seems a little surprising that memcpy is more than 2x faster than memcpy-with-xor.

Because I plumbed the GCptr though, I wonder if it’s also doing barriers 

[11:15:02.0072] <iain>
Yeah, it seems plausible to me that one case is doing extra work

[11:16:11.0342] <iain>
We should not need prebarriers here because we aren't overwriting an existing value, and we shouldn't need postbarriers because the result array should be in the nursery, so we can't add a tenured->nursery edge

[11:18:24.0607] <mgaudet>
I can poke at this after lunch: the real trick will be seeing if I can also get this correct and passing tests.

[11:39:03.0277] <sfink>
Ah. The reason I can't find the place in the spec where accessor properties are skipped for JSON.stringify is because accessor properties are not skipped for JSON.stringify.

[11:45:25.0861] <sfink>
```
a = {};
b = {get x() { a.trouble = false; a.fixer = a; return "hello world"; }};
a.fixer = b;
a.trouble = a;
print(JSON.stringify(a));
print(JSON.stringify(a));
```
happily gives me
```
{"fixer":{"x":"hello world"},"trouble":false}
/tmp/happyfun.js:6:12 TypeError: cyclic object value
```

[11:46:48.0591] <sfink>
(which is all fine and expected, but kind of amusing)

[13:27:15.0247] <iain>
mgaudet: It occurs to me that there's no reason not to store keys as values in NativeIterator. We need them to be [tagged as strings](https://searchfox.org/mozilla-central/source/js/src/jit/MacroAssembler.cpp#5884) when we return them from the iterator anyway, so we might as well cache them that way.

[13:28:53.0021] <iain>
 * mgaudet: It occurs to me that there's no reason not to store property keys as Values in NativeIterator. We need them to be [tagged as strings](https://searchfox.org/mozilla-central/source/js/src/jit/MacroAssembler.cpp#5884) when we return them from the iterator anyway, so we might as well cache them that way.

[13:29:03.0466] <mgaudet>
> <@iain:mozilla.org> mgaudet: It occurs to me that there's no reason not to store property keys as Values in NativeIterator. We need them to be [tagged as strings](https://searchfox.org/mozilla-central/source/js/src/jit/MacroAssembler.cpp#5884) when we return them from the iterator anyway, so we might as well cache them that way.

I looked into this and convinced myself there was a reason not to try to changes this... now I've forgotten

[13:30:30.0395] <mgaudet>
(Would definitely be nice tho)

[13:31:22.0347] <mgaudet>
... can we not run sp3 through raptor locally?

[13:31:35.0413] <iain>
The worst that can happen is we have to unbox the value when we read it, but I think the masm path I just linked you to should be the hottest path for accessing that data

[13:32:35.0724] <mgaudet>
iain: Oh -- that's almost certainly what I was thinking of; which I guess isn't a 'can't' and more a 'matt doesn't want to for a quick and dirty prototype that he's trying to measure numbers with

[13:32:44.0044] <mgaudet>
 * iain: Oh -- that's almost certainly what I was thinking of; which I guess isn't a 'can't' and more a 'matt doesn't want to for a quick and dirty prototype that he's trying to measure numbers with'

[13:33:51.0616] <iain>
At first glance it looks like we only need it for assertions and suppressing deleted properties, neither of which is performance-critical

[13:34:09.0567] <iain>
I would expect this to also be an improvement for `for-in`, although maybe too small to measure

[13:50:16.0871] <Bryan Thrall [:bthrall]>
> <@mgaudet:mozilla.org> ... can we not run sp3 through raptor locally?

I think `/mach raptor -t speedometer-desktop` would work

[13:50:32.0815] <Bryan Thrall [:bthrall]>
> <@mgaudet:mozilla.org> ... can we not run sp3 through raptor locally?

 * I think `./mach raptor -t speedometer-desktop` would work

[13:50:46.0376] <mgaudet>
Does that run sp2 or sp3 now? 

[13:51:40.0370] <Bryan Thrall [:bthrall]>
From the log, it looks like both

[13:57:54.0257] <mgaudet>
interesting :) Thanks! 

[15:02:19.0225] <TheQwertiest>
I've implemented a proxy object to handle `operator[]`, it works fine for non-negative integers, but for some reason when I pass `[-1]`, the check `id.isInt()` returns false. Do I need to use a different check for negative numbers?

[15:02:34.0550] <TheQwertiest>
 * I've implemented a proxy object to handle `operator[]`, it all works fine for non-negative integers, but for some reason when I pass `[-1]`, the check `id.isInt()` returns false. Do I need to use a different check for negative numbers?

[15:02:55.0843] <TheQwertiest>
 * I've implemented a proxy object to handle `operator[]`, it all works fine for non-negative integers, but for some reason when I pass `[-1]`, the check `id.isInt()` returns false (id is `JS::HandleId`). Do I need to use a different check for negative numbers?

[15:03:54.0438] <TheQwertiest>
 * I've implemented a proxy object to handle `operator[]`, it all works fine for non-negative integers, but for some reason when I pass `[-1]`, the check `id.isInt()` returns false (id is `JS::HandleId` in `Proxy::get/set`). Do I need to use a different check for negative numbers?

[15:04:05.0244] <TheQwertiest>
 * I've implemented a proxy object to handle `operator[]`, it all works fine for non-negative integers, but for some reason when I pass `[-1]`, the check `id.isInt()` returns false (id is `JS::HandleId` in `Proxy::get/set` methods). Do I need to use a different check for negative numbers?

[15:05:06.0249] <TheQwertiest>
 * I've implemented a proxy wrapper to handle `operator[]`, it all works fine for non-negative integers, but for some reason when I pass `[-1]`, the check `id.isInt()` returns false (id is `JS::HandleId` in `Proxy::get/set` methods). Do I need to use a different check for negative numbers?

[15:08:25.0055] <iain>
TheQwertiest: Negative integers don't get stored in the elements array.

[15:08:46.0441] <iain>
According to the JS spec, all property keys are either strings or symbols

[15:09:43.0238] <iain>
So `obj[-1]` is the same as `obj["-1"]`

[15:10:43.0109] <iain>
But in practice JS engines optimize non-negative integers for fast access

[15:11:45.0298] <iain>
Every object has an elements array, storing properties from `obj[0]` to `obj[<elements.length>]`, and a slots array, storing named properties like `obj.x`

[15:12:24.0629] <iain>
`obj[-1]` is stored like `obj.x`, not `obj[1]`

[15:13:43.0513] <evilpie>
Only positive integers are stored as Int in jsid/PropertyKey. The rest is just treated as a string

[15:17:03.0765] <TheQwertiest>
that's... rather unexpected, thanks =)
what would be the fastest way to check if string is convertable to integer? A plain call to ToInt32?

[15:17:07.0859] <TheQwertiest>
 * that's... rather unexpected, thanks =)
what would be the fastest way to check if string is convertable to integer? A plain call to JS::ToInt32?

[15:18:54.0447] <TheQwertiest>
 * that's... rather unexpected, thanks =)
what would be the fastest way to check if string is convertable to integer? A plain to call  JS::ToInt32?

[15:19:00.0624] <TheQwertiest>
 * that's... rather unexpected, thanks =)
what would be the fastest way to check if string is convertable to integer? A call to plain JS::ToInt32?

[15:19:23.0332] <iain>
Seems reasonable

[15:23:16.0426] <TheQwertiest>
hm... but is there a way to convert Id to Value?

[15:23:27.0631] <TheQwertiest>
can't seem to find one

[15:27:27.0809] <TheQwertiest>
nvm, found it

[15:48:11.0529] <TheQwertiest>
welp, JS::ToInt32 convert property names as well, e.g. myObject.myProp, will be converted to 0

[15:48:18.0221] <TheQwertiest>
 * welp, JS::ToInt32 converts property names as well, e.g. myObject.myProp, will be converted to 0

[15:49:11.0740] <TheQwertiest>
 * welp, JS::ToInt32 converts property names as well, e.g. if `myObject.myProp` is invoked, `myProp` will be converted to 0

[15:50:43.0142] <TheQwertiest>
(and I'm pretty sure it will convert empty string to zero as well)

[15:52:46.0970] <TheQwertiest>
my code is like this
```
if ( id.isInt() )
    {
        return static_cast<int32_t>( id.toInt() );
    }
    if ( id.isString() )
    {
        JS::RootedValue idValue( cx, js::IdToValue( id ) );
        int32_t intId = 0;
        if ( JS::ToInt32( cx, idValue, &intId ) )
        {
            return intId;
        }
    }
   // ...
```

[15:52:59.0837] <TheQwertiest>
 * my code is like this

```
    if ( id.isInt() )
    {
        return static_cast<int32_t>( id.toInt() );
    }
    if ( id.isString() )
    {
        JS::RootedValue idValue( cx, js::IdToValue( id ) );
        int32_t intId = 0;
        if ( JS::ToInt32( cx, idValue, &intId ) )
        {
            return intId;
        }
    }
   // ...
```

[15:53:17.0424] <TheQwertiest>
 * my code is like this

```
    // ...
    if ( id.isInt() )
    {
        return static_cast<int32_t>( id.toInt() );
    }
    if ( id.isString() )
    {
        JS::RootedValue idValue( cx, js::IdToValue( id ) );
        int32_t intId = 0;
        if ( JS::ToInt32( cx, idValue, &intId ) )
        {
            return intId;
        }
    }
   // ...
```

[15:55:37.0741] <Redfire>
If I remember correctly, this is the funny reason why `array[4294967294]` is the maximum integer key

[15:58:54.0105] <TheQwertiest>
that's just maxuint though?

[15:59:09.0073] <TheQwertiest>
max uint32 that is

[16:02:23.0173] <sfink>
TheQwertiest: do you have access to `js::IdIsIndex()`?

[16:02:34.0953] <TheQwertiest>
lemme check

[16:03:16.0447] <TheQwertiest>
sfink: nope

[16:03:36.0037] <sfink>
you can look at its implementation to see what the engine is doing, at least.

[16:04:21.0612] <TheQwertiest>
(I was a few clicks away from finding IdIsIndex myself xD)

[16:04:55.0807] <sfink>
I happen to be working on something similar and had just stumbled across it. :-)

[16:06:35.0159] <sfink>
btw, the order of properties is kinda funky. If you ignore indexes, it's in the order the properties were added. With indexes, it's all property names that could be indexes, sorted numerically regardless of addition order, followed by the non-index properties.

[16:07:39.0184] <TheQwertiest>
sfink: regretfully IdIsIndex sources doesnt help much,

[16:07:55.0404] <TheQwertiest>
 * sfink: regretfully IdIsIndex sources do not help much, it uses JSAtom methods, which are not exposed

[16:08:08.0944] <TheQwertiest>
 * sfink: regretfully `IdIsIndex` sources do not help much, it uses `JSAtom` methods, which are not exposed

[16:08:09.0772] <iain>
Why do you need to know whether a string is an integer?

[16:08:48.0121] <TheQwertiest>
iain: I want to implement `MyCustomObject[-1]` to access last element, to mimic js array behaviour

[16:09:08.0608] <sfink>
er, that's not js array behavior

[16:09:10.0708] <iain>
JS arrays don't do that

[16:09:17.0441] <TheQwertiest>
hm

[16:09:29.0716] <TheQwertiest>
I was sure I've read it on mozilla docs

[16:09:32.0140] <TheQwertiest>
gimme a sec

[16:09:37.0360] <sfink>
somearray.at(-1) does that

[16:09:40.0518] <iain>
Python arrays do that

[16:09:46.0014] <sfink>
 * `somearray.at(-1)` does that

[16:10:31.0364] <TheQwertiest>
> <@sfink:mozilla.org> `somearray.at(-1)` does that

ah, that's probably why I thought that arrays work the same

[16:10:43.0382] <TheQwertiest>
> <@sfink:mozilla.org> `somearray.at(-1)` does that

 * ah, that's probably why I thought that array [] accessor works the same

[16:10:58.0459] <TheQwertiest>
one less thing to worry about then, thanks =)

[16:14:10.0567] <TheQwertiest>
> <@sfink:mozilla.org> btw, the order of properties is kinda funky. If you ignore indexes, it's in the order the properties were added. With indexes, it's all property names that could be indexes, sorted numerically regardless of addition order, followed by the non-index properties.

good thing I don't need to know property indexes :) (yet?...)

[16:38:38.0327] <Redfire>
> <@theqwertiest:mozilla.org> max uint32 that is

nope, it's one lesd than that

[16:39:10.0192] <Redfire>
* In reply to @theqwertiest:mozilla.org
max uint32 that is

nope, it's one less than that

[16:39:32.0121] <Redfire>
* nope, it's one less than that



2023-06-17
[08:16:51.0796] <TheQwertiest>
some time ago I asked, how can I mark object as "dead", so every access to it would throw an error.
I've found this method: `NukeNonCCWProxy`, can it be used to achieve my scenario? E.g. wrap the object in a transparent proxy and then invoke this method when I want to restrict access to it?

[08:55:31.0703] <TheQwertiest>
and another question: is there a cheap way to permute a JS array object from native side?


2023-06-19
[02:11:24.0722] <liam_g>
How do I add getter and setter properties to an object? I can use `JS_DefineProperty` to add a getter and setter to the property of an object, but I want to add the getter and setter to the object itself.

[02:12:30.0763] <liam_g>
So like if I did `JS_DefineProperty(cx, a, "b", getter, setter, 0)`, then I could do Javascript `a.b = ... // implicit setter`. But I want to be able to do `a = ...`

[02:14:35.0265] <arai>
if `a` is global object's property, then you can define getter/setter on the global object

[02:15:21.0936] <arai>
if `a` is local variable, there's no way to hook the assignment

[02:16:38.0502] <liam_g>
That's strange. Is it that way by design?

[02:17:30.0471] <arai>
just to make sure, is `a = ...` exact thing you want to hook?

[02:18:38.0997] <arai>
it might be different situation if the example is too simplified

[02:19:35.0929] <liam_g>
I want to create a new object `a` with a given JSClass (using `JS_NewObject()`), and then add getters and setters to it, so that you can do `a = 6` or `console.log(a)` on that object.

[02:20:41.0478] <arai>
okay. first, `a` there is either variable or global property. not the object itself.  and if you perform `a = 6`, that's completely unrelated to the object pointed by the variable

[02:21:44.0502] <arai>
it's like `a = {};` and then `a = 6;`.  the object `{}` is no longer pointed by the variable and no extra operation can be performed there

[02:22:07.0181] <liam_g>
Yeah, looks like I'm getting my Javascript mixed up.

[02:22:56.0095] <arai>
it might be better describing what you want to do *without* how to do that

[02:23:50.0978] <arai>
the `JS_NewObject` part shouldn't be essential to what you want to achieve

[02:25:43.0658] <arai>
and performing `console.log(a)` on `a = 6` sounds too simplified for the actual goal

[02:27:18.0943] <liam_g>
Well, I wanted to have an object that I could do a = 6, and have it set an internal property. But as you've just explained, this fundamentally doesn't make sense. I think I understand now that getters and setters really only work if they're attached to a property. 

[02:30:10.0294] <liam_g>
Thanks for clearing that up. I'll work within the existing framework of `JS_DefineProperty` to add getters and setters to properties.

[02:30:43.0681] <arai>
if writing `a = 6` in JS as a kind of syntax sugar is the actual goal, it could be achieved by defining getter/setter on global object.  similar thing is done in Firefox code to perform lazy getter, to define getter on global object and write the getter property name in the code, to actually invoke the getter

[02:32:16.0103] <arai>
https://searchfox.org/mozilla-central/rev/c936f47f3a629ae49a4d528d3366bf29f2d4e4a7/browser/base/content/browser.js#338,378-379,439
```js
XPCOMUtils.defineLazyGetter(this, "gURLBar", () => {
...
  return urlbar;
});
...
      gURLBar.maybeHandleRevertFromPopup(anchorElement);
```

[02:32:30.0075] <arai>
it's getter tho, the similar can be done for setter

[02:32:35.0826] <liam_g>
Yes, I'll think about that. It might be a nice option.

[07:11:04.0864] <jrmuizel>
jandem: any idea what might be going on here: https://bugzilla.mozilla.org/show_bug.cgi?id=1839078?

[07:22:01.0729] <jandem>
jrmuizel: looking..

[07:42:14.0908] <jandem>
I commented on the bug. It's a generator perf cliff and I'm a little surprised we're only 3x slower

[07:50:14.0604] <jrmuizel>
jandem: thanks

[07:53:43.0066] <jandem>
short-term we probably need some heuristic to not enter Ion for generators via OSR in this case. Longer-term we should redo our implementation somehow to support entering Ion code right away

[07:56:04.0834] <jrmuizel>
jandem: that sounds reasonable to me. It's sort of unfortunate that this is just WebKit's perf dashboard and so won't necessarily improve things much in the wild

[07:58:01.0945] <jandem>
yeah although async functions in particular are pretty common so it'd be good to at least fix the worse-than-baseline part

[08:00:14.0294] <jrmuizel>
yeah

[15:07:39.0650] <mgaudet>
confession: I know, I'll check central to see if my patches get even faster! 

*slowed down by 100%*

Don't do this stuff to yourself after your EOD. 

[15:07:45.0053] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2023-06-20
[17:14:19.0069] <Redfire>
Is there any way to make a native function with a custom finaliser?

[17:51:19.0975] <iain>
confession: I wrote a bunch of gross masm to pull half of our generic call sequence in Ion into a trampoline in preparation for adding support for bound / native functions, with fun tricks like "let's pretend x86 has a link register" and "what if we call a trampoline from inside another trampoline", and it ... just sort of worked? I'm a little disappointed at the lack of fun bugs.

[05:15:19.0070] <jonco>
jandem: hey, sorry I missed our meeting. I'm still around if you want to talk.

[05:18:11.0095] <jandem>
jonco: np, joining now..

[08:27:05.0237] <jonco>
How do I request review from spidermonkey-reviewers? moz-phab tells me "spidermonkey-reviewers is not a valid reviewer's name"

[08:28:21.0210] <evilpie>
> <@jonco:mozilla.org> How do I request review from spidermonkey-reviewers? moz-phab tells me "spidermonkey-reviewers is not a valid reviewer's name"

Are you missing the # ?

[08:29:49.0612] <jonco>
Yes, that's it.  Thanks.

[08:46:16.0207] <mconley>
dminor: Hi! I hear you might be able to tell me more about what's going on with https://github.com/tc39/proposal-defer-import-eval. I ask, because some folks on the front-end team are poking at whether or not we can use some more modern linting and tooling. None of those tools understand our current lazy module import mechanism, and so we're curious if lazy module import is on the short-track to standardization or if it'd make more sense for us to investigate ways to teach these tools about our lazy module import stuff.

[09:57:25.0390] <dminor>
mconley: There's a lot of module related proposals in different states, and it's a bit controversial at the committee whether these can advance independently of each other. This one appears to only be at stage 1 and isn't yet on the agenda for the next TC39 plenary, which is happening in a few weeks. The deadline for advancement is July 1, so I'll have a better idea after that if there is a push to move this forward.

[09:57:41.0966] <dminor>
Offhand, I think you're probably better off teaching tools to handle our flavour of lazy module import.

[09:58:06.0436] <mconley>
Okay, cool

[09:58:10.0992] <dminor>
Even if this makes it to stage 2, there could be substantial changes to the syntax/semantics before it's ready for implementation.

[10:01:28.0734] <mconley>
Okay, good to know. Thanks for the consult!

[10:38:13.0363] <mgaudet>
just fyi: I've been running into a few bugs with hg-evolve; if you're using it, may be worth updating 

[13:57:00.0481] <iain>
confession: Had a build fail on try because I drew an ASCII art diagram where one line ended with \, and it interpreted it as a multi-line comment

[14:51:12.0058] <iain>
 * confession: Had a build fail on try because I drew an ASCII art diagram where one line ended with `\`, and it interpreted it as a multi-line comment


2023-06-21
[17:21:47.0322] <Redfire>
I veer away from the `ReadableStream` spec in one place regarding it's use of closures everywhere to try and save on some memory and immediately I get burned when I want to implement `ReadableStream.prototype.tee` 😮‍💨

[01:06:38.0646] <auralines_soul>
Hello all, can someone tell me the last version of the firefox source that was compatible with embedding in c++? im aware 102 is currently broken for embedded builds.

[01:11:11.0619] <auralines_soul>
im specifically trying to build an embed-able version for a x64 windows 10 machine and will be building from source on said machine.

[01:26:43.0276] <arai>
auralines_soul: what do you mean with broken ?  is it about msvc compatibility, or something?

[01:28:00.0830] <arai>
if you're referring a bug filed somewhere, can you share the URL ?

[01:53:04.0456] <auralines_soul>
im referring to the embedding example on the github page. https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr102/docs/Building%20SpiderMonkey.md

[01:54:41.0148] <auralines_soul>
im sure patching it would with the required files would be a quick fix however i have no need for the latest version and would rather just build a version that requires no patching

[01:55:39.0559] <auralines_soul>
 * @arai im referring to the embedding example on the github page. https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr102/docs/Building%20SpiderMonkey.md

[01:55:56.0421] <auralines_soul>
 * arai: im referring to the embedding example on the github page. https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr102/docs/Building%20SpiderMonkey.md

[02:07:08.0082] <arai>
the document mentions that "wait for 102.2.0", and 102.2.0 is already there.  the latest ESR 102.x is [102.12.0esr](https://ftp.mozilla.org/pub/firefox/releases/102.12.0esr/)

[10:29:10.0492] <sfink>
[exhibit #916](https://phabricator.services.mozilla.com/D174395?id=700366#inline-1003916) in the case arguing that anba is awesome. Compile-time optimization that I was thinking would be possible in theory, but unlikely to be doable in practice.

[14:07:27.0690] <mgaudet>
Speaking of temporal: My inbox tells me it's landing for a first try as we speak :) 


2023-06-22
[09:17:25.0785] <iain>
sfink: [test262 JSON.stringify tests](https://searchfox.org/mozilla-central/search?path=&q=js%2Fsrc%2Ftests%2Ftest262%2Fbuilt-ins%2FJSON%2Fstringify)?

[09:18:44.0554] <sfink>
wtf? I have no idea how i missed that.

[09:19:21.0078] <sfink>
so I *am* running all those tests, they're all passing.

[09:21:18.0727] <sfink>
(and I've written half a dozen tests that all failed initially)

[09:21:32.0231] <sfink>
maybe I should steal some tests from JSC

[10:18:03.0521] <iain>
We're seeing a weird set of crashes involving stack overflow on google image search in specific Debian-based distros. I've written up a summary of what we know [here](https://bugzilla.mozilla.org/show_bug.cgi?id=1839669#c15). If anybody wants to read that and have a sudden insight that would solve all our problems, I would appreciate it.

[11:09:20.0457] <sfink>
wmedina: ah, found it! It's from the performance team. https://mozilla.github.io/perf-triage/calculator.html

[11:23:06.0127] <wmedina>
> <@sfink:mozilla.org> wmedina: ah, found it! It's from the performance team. https://mozilla.github.io/perf-triage/calculator.html

I remember that tool, thank you for looking for the link

[13:03:18.0802] <mgaudet>
> <@iain:mozilla.org> We're seeing a weird set of crashes involving stack overflow on google image search in specific Debian-based distros. I've written up a summary of what we know [here](https://bugzilla.mozilla.org/show_bug.cgi?id=1839669#c15). If anybody wants to read that and have a sudden insight that would solve all our problems, I would appreciate it.

Has someone reached out to google in the mean time to let them know that their code is acting very peculiarly?

[13:11:21.0336] <iain>
mgaudet: [Here](https://support.google.com/websearch/thread/221293972/google-images-constantly-crashing?hl=en) is one attempt

[13:12:00.0907] <mgaudet>
> <@iain:mozilla.org> mgaudet: [Here](https://support.google.com/websearch/thread/221293972/google-images-constantly-crashing?hl=en) is one attempt

Cool :) 

[15:59:10.0830] <sfink>
> <@iain:mozilla.org> We're seeing a weird set of crashes involving stack overflow on google image search in specific Debian-based distros. I've written up a summary of what we know [here](https://bugzilla.mozilla.org/show_bug.cgi?id=1839669#c15). If anybody wants to read that and have a sudden insight that would solve all our problems, I would appreciate it.

Smells a lot like bug 909094. Commented.

[15:59:13.0607] <botzilla>
https://bugzil.la/909094


2023-06-23
[09:24:36.0023] <iain>
jandem: Thanks for figuring out bug 1839669. Funnily enough, we already had bug 1721020 on file to fix this, and I never twigged.

[09:24:38.0485] <botzilla>
https://bugzil.la/1839669 — ASSIGNED (jandem) — Google Images search reproducibly causes tab crash

[09:24:38.0939] <botzilla>
https://bugzil.la/1721020 — NEW (jseward) — Rewrite stack probes to update stack pointer first

[09:42:35.0151] <sfink>
oh, nice!

[09:58:08.0017] <jandem>
team effort! writing the patch was easy after others tracked it down to the relevant if-statement in the Linux kernel 

[12:34:59.0799] <iain>
Maybe this is a dumb question but: why do we make a distinction between tail-call VM functions and regular VM functions? The only difference seems to be that on link-register platforms like arm, [we don't push the return address](https://searchfox.org/mozilla-central/source/js/src/jit/arm/Trampoline-arm.cpp#612-616). But in the only place we actually make tailcalls, [EmitBaselineTailCallVM](https://searchfox.org/mozilla-central/source/js/src/jit/arm/SharedICHelpers-arm-inl.h#34-41), we push the return address manually because the VM wrapper code expects a return address to be pushed!

[12:37:23.0062] <iain>
Specifically, ExitFrame expects a normal frame with a return address on the stack, and if you don't push a return address, then the VM wrapper calculates the wrong offset for the arguments. My code for bug 1829411 ran into this problem on arm32.

[12:37:24.0758] <botzilla>
https://bugzil.la/1829411 — NEW (nobody) — Ion compiled polymorphic calls are 10x slower than V8 (InvokeFunction)

[12:38:51.0286] <iain>
On arm64, we don't do this. [EmitBaselineTailCallVM](https://searchfox.org/mozilla-central/source/js/src/jit/arm64/SharedICHelpers-arm64-inl.h#36-39) doesn't push a return address; instead, the VM wrapper [pushes it unconditionally](https://searchfox.org/mozilla-central/source/js/src/jit/arm64/Trampoline-arm64.cpp#595-599).

[12:39:20.0339] <iain>
This seems generally better, because it means we can use the same wrapper for both tail calls and non-tail calls

[12:39:56.0017] <iain>
But if we make that change for the other link-register platforms, is there still any reason to preserve the difference between the two kinds of VM wrapper?

[12:40:48.0649] <iain>
Am I missing another place where the distinction is important?

[12:44:44.0604] <iain>
I guess the tail call macro has an argument for extraValuesToPop, which isn't used for non-tail call wrappers

[13:04:53.0341] <mgaudet>
Hey, if we're in the asking-dumb-questions mode: can an IC stub hold onto a JSObject? And if so... can't we just solve https://github.com/WebKit/WebKit/pull/14532 with ICs?

[13:04:57.0829] <mgaudet>
erm 

[13:05:27.0612] <mgaudet>
 * erm that was wierd. I navigated back, and my URL bar didn't. Anyhow. I meant https://bugzilla.mozilla.org/show_bug.cgi?id=1836365 

[13:08:01.0546] <mgaudet>
I suppose we'd need a way to communicate something about the source of our arguments to the call and thereby the IC

[13:09:37.0191] <iain>
mgaudet: IC stubs can hold onto JSObjects, but if I call `"abc def".split(" ")` twice, I expect to get two distinct arrays back, not the same array both times

[13:10:40.0917] <mgaudet>
Yeah -- I was thinking we could have a 'result' that we hold on to, then return to JS code duplicates 

[13:10:53.0922] <mgaudet>
 * Yeah -- I was thinking we could have a 'result' that we hold on to, then return to JS code array copies

[13:11:04.0253] <iain>
Right. In that case: yes, we can do that, and IIRC it's basically what we used to do

[13:12:20.0452] <mgaudet>
(We don't really have architecturally support for 'bare arrays', which would be quick to create new array copies from -- Object.keys has a similar issue too; one wonders if there's a good answer we could build for this that isn't too architecturally invasive. Like, Copy-on-Write arrays would be nice, but I'd be concerned about complexity) 

[13:14:31.0734] <mgaudet>
The annoying thing about trying to solve this using ICs is that the the cleanest way I can think about making it work would be to have the front-end recognize the "literal".split("literal") and create different bytecode; I suppose though you could do an ugly thing and analyze bytecode flowing to you, and use that as evidence you have two constant string

[13:14:35.0908] <mgaudet>
 * The annoying thing about trying to solve this using ICs is that the the cleanest way I can think about making it work would be to have the front-end recognize the "literal".split("literal") and create different bytecode; I suppose though you could do an ugly thing and analyze bytecode flowing to you, and use that as evidence you have two constant strings

[13:17:04.0875] <iain>
We already have an idiom in CacheIR where we only attach some ICs once (eg [here](https://searchfox.org/mozilla-central/source/js/src/jit/CacheIR.cpp#5488-5490)). So in the old version of the code, we just optimistically assumed that if two atoms flowed in, they *might* be `"literal".split("literal")`, so we tried the IC once and if it ever failed then, oops, we try again with something more general

[13:18:14.0657] <mgaudet>
(ISTR that long literals are no longer atoms, so we can't check atom status anymore I think) 

[13:18:38.0942] <iain>
Right, fair point, that would have to change

[13:19:11.0768] <iain>
An atom or a long linear string, I guess

[13:19:17.0660] <mgaudet>
I was just thinking about this because we have an IC here already, but it's not amazing; calls into a pretty high overhead VM routine

[13:20:02.0253] <mgaudet>
having said this, this musing is mostly a distraction from me wanting to have actually *counted* how often String.split gets called with literal values, and then realizing how to write the instrumentation is more challenging than I'd hoped

[13:20:57.0759] <iain>
IIRC the main problem is that we wrote the optimization pre-ES6 when string.split only supported splitting by strings, and then ES6 added support for splitting by regexps

[13:21:18.0752] <iain>
So we moved the actual caller of the string_split_string native function into self-hosted code

[13:22:04.0788] <iain>
But then the IC that we attach is attached to the self-hosted script, not the caller, and you only get one instance across the entire realm

[13:22:30.0924] <iain>
This was pre-Warp; maybe we could use trial inlining to do a better job today

[13:22:49.0007] <mgaudet>
it also just feels like a thing the front-end could heavily hint

[13:23:37.0771] <mgaudet>
like, the frontend at the time it makes the call can tell if we're doing "literal".split("literal"); the CacheIR just needs to make sure String.prototyp.split is the correct one

[13:24:12.0402] <iain>
It's really too bad that JS lets programmers write JS, otherwise we could do the entire optimization in the frontend

[13:24:42.0848] <mgaudet>
Oh believe me, I thought about it :P 

[13:25:04.0938] <mgaudet>
but until we can toss bytecode for correctness reasons, not going to happen :P

[13:25:05.0937] <iain>
I had about two seconds of hope before I realized what the problem was

[13:27:06.0369] <mgaudet>
Still... this would be an easier problem with frontend-jit collaboration. Maybe 1 new op; "CallWithHints" 

[13:27:29.0340] <iain>
Yeah, it's doable

[13:27:36.0012] <mgaudet>
then we could use the frontend to hint 'this' and args are constants

[13:32:15.0315] <iain>
My other reservation here is that when I first noticed that ES6 broke the optimization, I [rewrote it](https://phabricator.services.mozilla.com/D29533) to optimize the outer call instead. That approach was incorrect in the face of meddling programmers monkeying around with prototypes (bug 1549035), so we ripped it out, but when we did so it didn't hurt speedometer at all.

[13:32:16.0526] <botzilla>
https://bugzil.la/1549035 — RESOLVED (iain) — CallIRGenerator::isOptimizableConstStringSplit checks for String_split instead of StringSplitString

[13:32:29.0359] <iain>
Which makes me pessimistic about the overall value

[13:32:55.0845] <iain>
Jan's suggestion [here](https://bugzilla.mozilla.org/show_bug.cgi?id=1549035#c8) about a cache in C++ is reasonable

[13:33:53.0219] <mgaudet>
It's true -- one wonders what you'd get out of a 4-10 element cache

[13:34:14.0425] <mgaudet>
but as you say -- it's unclear this is a real problem that's really motivated beyond benchmark fu.


2023-06-24
[21:23:35.0636] <wes>
Hey, folks.  Once upon a time, JSAPI had a function. You could pass this function a char * (or maybe a JSString *?) and it would tell you if it contained a complete parseable experssion.  This was used in the js shell to figure out if we needed to call readline again; we assumed when the expression wasn't parseable that the user was entering a multi-line command.

I can't remember the name of this function. I can't find it in the current shell. I can't come up with the right google words.  Anybody remember what I'm talking about, or know how the shell does this today?

[21:33:46.0117] <iain>
wes: [This](https://searchfox.org/mozilla-central/source/js/public/CompilationAndEvaluation.h#51)?

[21:39:31.0544] <wes>
iain: that's it!!!! Thank you!  I thought I was going crazy... "Compilable Unit" vocabulary just fell out of my head

[15:59:53.0840] <Redfire>
> <@redfire75369:mozilla.org> Is there any way to make a native function with a custom finaliser?

bump, but with a small update
It needs both a finaliser and some internal data (`*mut c_void`)

[16:00:19.0218] <Redfire>
Would the best way to just override the `call` ClassOp?

[16:01:27.0441] <Redfire>
and what about the other functionality like naming the function and toString being `function <name>() { [native code] }`


2023-06-25
[22:06:17.0737] <arai>
if you use your own prototype object, you need to implement your own `toString` that uses `name` property to generate `function <name>() { [native code] }` string

[22:06:52.0137] <arai>
that's basically what the `Function.prototype.toString` does [JSFunction.cpp](https://searchfox.org/mozilla-central/rev/f0967c33054b3d7c5f9b5e4cf4ae1a85d9ded553/js/src/vm/JSFunction.cpp#714)

[13:13:57.0916] <wes>
Most of my embedding work has been pre-fatvals (yes I know) so forgive the dumb question - but jsvals are still contants, right, even if the JS GC moves the object/function/whatever to a new location? They must be??


2023-06-26
[19:44:16.0293] <arai>
which version of SpiderMonkey is the question about?

[00:37:00.0901] <jandem>
wes: GC can move objects so has to update all jsvals that point to moved objects

[00:46:46.0566] <nchevobbe>
I see that https://bugzilla.mozilla.org/show_bug.cgi?id=1519167 landed. Can I test temporal in Firefox or can it only be enabled in the JSShell ?

[00:47:36.0818] <nchevobbe>
(I want to see what it's like logging temporal objects to the webconsole and if we should do anything specific , e.g. like for Date instances, where we display a stringified version)

[00:49:02.0873] <arai>
it's available only when you build with configure flag https://searchfox.org/mozilla-central/rev/d31e56f7b3c2c18b8071a7b2a2fb6b4e01e3d3e8/js/moz.configure#1177
```py
option("--with-temporal-api", default=False, help="Enable ECMAScript Temporal API")
```

[01:52:27.0867] <nchevobbe>
> <@arai:mozilla.org> it's available only when you build with configure flag https://searchfox.org/mozilla-central/rev/d31e56f7b3c2c18b8071a7b2a2fb6b4e01e3d3e8/js/moz.configure#1177
> ```py
> option("--with-temporal-api", default=False, help="Enable ECMAScript Temporal API")
> ```

thanks arai, I was able to enable them and I filed https://bugzilla.mozilla.org/show_bug.cgi?id=1840326 to have better representation of Temporal instances in the webconsole (if you have any ideas about this, feel free to tell me/add them to the bug cc anba )

[02:36:53.0609] <jonco>
not urgent but if someone could review https://phabricator.services.mozilla.com/D181513 that would be helpful so I can land bug 1835241

[02:36:56.0182] <botzilla>
https://bugzil.la/1835241 — NEW (jonco) — Fix static analysis warnings in the GC

[02:58:17.0421] <arai>
r+ed

[02:58:39.0435] <jonco>
thank you arai!

[09:20:59.0140] <iain>
jonco: For the [weak ShapeListObject code](https://phabricator.services.mozilla.com/D182012), I assume it is not enough to give the stub fields a new `StubField::Type::ShapeListObject` instead of storing them in a list?

[09:24:14.0337] <iain>
 * jonco: For the [weak ShapeListObject code](https://phabricator.services.mozilla.com/D182012), I assume it is not enough to give the stub fields a new `StubField::Type::ShapeListObject` instead of storing them in a vector?

[09:33:17.0883] <jonco>
iain: I tried something like that first but it turns out the object can get baked into Ion code by CodeGenerator::visitGuardMultipleShapes so we need a way to be able to find and update it in that case

[09:33:52.0387] <iain>
Ah, right, good point

[12:47:21.0451] <sfink>
What does a false return value from `LookupPropertyPure` (or similar mean)? It takes a leading cx parameter, which implies it's the standard exception throwing thing, but from the code it seems like false might mean "can't answer without side effects." Which would make sense, except that it may also [directly return !mayResolve()](https://searchfox.org/mozilla-central/rev/0ddb7a38cdbba30df8f19549f678a22fa16967d1/js/src/vm/NativeObject-inl.h#785) which seems like false means "property not found", which makes less sense. That should be a true return value with `PropertyResult::isNotFound()`.

[12:47:34.0252] <sfink>
I must be reading something wrong here.

[12:48:11.0590] <sfink>
 * What does a false return value from `LookupPropertyPure` (or similar) mean? It takes a leading cx parameter, which implies it's the standard exception throwing thing, but from the code it seems like false might mean "can't answer without side effects." Which would make sense, except that it may also [directly return !mayResolve()](https://searchfox.org/mozilla-central/rev/0ddb7a38cdbba30df8f19549f678a22fa16967d1/js/src/vm/NativeObject-inl.h#785) which seems like false means "property not found", which makes less sense. That should be a true return value with `PropertyResult::isNotFound()`.

[12:49:41.0354] <evilpie>
mhm makes sense to me? It only returns true when the property wasn't found (it doesn't exist yet) and it also can't be resolved.

[12:50:04.0072] <evilpie>
and yeah *pure methods don't follow the normal JSContext convention

[12:52:17.0468] <evilpie>
(I am not sure why it doesn't do ->setNotFound like the code above though)

[12:52:48.0284] <mccr8>
I don't know if it helps, but there's a description of [Pure] from the WebIDL side here. https://firefox-source-docs.mozilla.org/dom/webIdlBindings/index.html

[13:04:56.0969] <sfink>
Hm. I really want to distinguish between (1) property exists, (2) property does not exist and cannot be resolved, and (3) can't answer because it would produce side effects. Actually for my case mixing together (1) and (3) would be fine, since both mean I need to abort my speculation. But right now (2) and (3) seem to be mixed: both could return false.

[13:05:21.0065] <sfink>
I'll try doing setNotFound and see if it breaks stuff.

[13:21:55.0824] <mgaudet>
> <@sfink:mozilla.org> What does a false return value from `LookupPropertyPure` (or similar) mean? It takes a leading cx parameter, which implies it's the standard exception throwing thing, but from the code it seems like false might mean "can't answer without side effects." Which would make sense, except that it may also [directly return !mayResolve()](https://searchfox.org/mozilla-central/rev/0ddb7a38cdbba30df8f19549f678a22fa16967d1/js/src/vm/NativeObject-inl.h#785) which seems like false means "property not found", which makes less sense. That should be a true return value with `PropertyResult::isNotFound()`.

Feeling slow today -- but I don't quite follow. If LookupPropertyPure returns false because there is a mayResolveHook which says that the id might get resolved, doesn't that obey the contract that it returns true iff it can answer the lookup query without mutation?

[13:22:55.0051] <mgaudet>
I don't think we have anything that nicely answers your (2), though I think it could(?) be built

[13:23:34.0309] <sfink>
I think a true return value is unambiguous, yes.

[13:24:20.0495] <sfink>
yeah, I guess it's just not intended to distinguish 2 & 3.

[13:24:47.0122] <sfink>
though now that I'm looking at it, it *does* do `setNotFound()` even with mayResolve causes it to return false.

[13:24:56.0730] <sfink>
 * though now that I'm looking at it, it _does_ do `setNotFound()` even when mayResolve causes it to return false.

[13:25:29.0763] <mgaudet>
This is on the propertyResult? i'm not sure you should pay attention to that value if the helper returns false

[13:25:29.0811] <sfink>
my head hurts

[13:29:48.0554] <iain>
It looks like this is controlled by a template parameter, so if there's a different behaviour you want, you could maybe expand that template

[13:30:13.0808] <sfink>
I think I may just be being stupid, I think it may be giving me what I need

[13:30:20.0789] <iain>
Or maybe you want to call it with `CheckResolve` instead of the default `CheckMayResolve`?

[13:32:20.0082] <sfink>
hm, I don't think I'd actually want to call the resolve hook. Sounds side effect-y. Though maybe that is safe, given that it's called (if MayGC) in a function named *Pure.

[13:33:01.0038] <sfink>
 * hm, I don't think I'd actually want to call the resolve hook. Sounds side effect-y. Though maybe that is safe, given that it's called (if CanGC) in a function named \*Pure.

[13:33:10.0876] <sfink>
anyway, maybe my after-lunch brain will handle this better

[13:33:45.0560] <mgaudet>
The results of the `mayResolve` hook should be pure though

[13:34:11.0011] <mgaudet>
and AIUI based on the docs, the `mayResolve` must indicate if a prop may be resolved. 

[14:25:33.0043] <sfink>
yes, though it's allowed to have a resolve hook without a mayResolve hook. So `CheckMayResolve` should be fine for me.

[14:26:16.0788] <sfink>
`CheckResolve` *might* be fine, but I'm not sure.

[14:27:04.0751] <sfink>
what are these "docs" you speak of?

[14:41:31.0380] <sfink>
I think mgaudet had it right. The return value means "can this be answered definitively without side effects?" I was just confusing myself. The case where `mayResolve` returns true just means it *may* resolve it, who knows, and so although the "without side effects" holds, the "answered definitively" does not, so false is the right thing.


2023-06-27
[09:42:14.0397] <mgaudet>
What's our policy with slow tests? Which is to say, if I were to mark a slow test as slow, will it ever actually get run in integration, or is it effectively black-holed until one of us tries running jit-test with the enable-slow arg?

[10:47:14.0556] <mgaudet>
Bryan Thrall [:bthrall]: When working in the parser where we have a FrontendContext, is it expected you can't get access to the runtime?

[10:47:29.0242] <mgaudet>
Or should one have access to JSRuntime*? 

[10:54:56.0495] <mgaudet>
Bryan Thrall [:bthrall]: (about to head to lunch myself; to be clear about the specific issue I've run into: Import assertions has a public API call to [set the supported assertion types](https://searchfox.org/mozilla-central/source/js/public/Modules.h#49-50). However, it seems the parser actually [looks this up on the FrontendContext](https://searchfox.org/mozilla-central/source/js/src/builtin/ModuleObject.cpp#1678). However, currently I don't think there's connective code which takes the runtime's list and [puts it on the FrontendContext](https://searchfox.org/mozilla-central/source/js/src/frontend/FrontendContext.cpp#44-52). I'm trying to figure out 1) if the cut between the RT and the FrontendContext makes sense, and 2) where I would actually do said initialization. Sort of feels like FrontendContext should take a runtime as a constructor argument, but that doesn't _totall_ work, because of the use of FrontendContext in IsValidJSON impl.

[10:55:02.0750] <mgaudet>
 * Bryan Thrall [:bthrall]: (about to head to lunch myself; to be clear about the specific issue I've run into: Import assertions has a public API call to [set the supported assertion types](https://searchfox.org/mozilla-central/source/js/public/Modules.h#49-50). However, it seems the parser actually [looks this up on the FrontendContext](https://searchfox.org/mozilla-central/source/js/src/builtin/ModuleObject.cpp#1678). However, currently I don't think there's connective code which takes the runtime's list and [puts it on the FrontendContext](https://searchfox.org/mozilla-central/source/js/src/frontend/FrontendContext.cpp#44-52). I'm trying to figure out 1) if the cut between the RT and the FrontendContext makes sense, and 2) where I would actually do said initialization. Sort of feels like FrontendContext should take a runtime as a constructor argument, but that doesn't _totalyl_ work, because of the use of FrontendContext in IsValidJSON impl.)

[10:55:08.0460] <mgaudet>
 * Bryan Thrall [:bthrall]: (about to head to lunch myself; to be clear about the specific issue I've run into: Import assertions has a public API call to [set the supported assertion types](https://searchfox.org/mozilla-central/source/js/public/Modules.h#49-50). However, it seems the parser actually [looks this up on the FrontendContext](https://searchfox.org/mozilla-central/source/js/src/builtin/ModuleObject.cpp#1678). However, currently I don't think there's connective code which takes the runtime's list and [puts it on the FrontendContext](https://searchfox.org/mozilla-central/source/js/src/frontend/FrontendContext.cpp#44-52). I'm trying to figure out 1) if the cut between the RT and the FrontendContext makes sense, and 2) where I would actually do said initialization. Sort of feels like FrontendContext should take a runtime as a constructor argument, but that doesn't totally work, because of the use of FrontendContext in IsValidJSON impl.)

[10:55:48.0166] <mgaudet>
(It turns out that the import assertion tests weren't running properly, hence why this hadn't been caught yet)

[11:27:55.0261] <Bryan Thrall [:bthrall]>
mgaudet: You are correct, there is no connective code which copies the runtime's list to the FrontendContext. The intention was to use [setSupportedImportAssertions()](https://searchfox.org/mozilla-central/source/js/src/frontend/FrontendContext.h#135-136 ) when necessary, but I think that got lost somewhere along the way.

[11:29:33.0784] <Bryan Thrall [:bthrall]>
> <@mgaudet:mozilla.org> Bryan Thrall [:bthrall]: When working in the parser where we have a FrontendContext, is it expected you can't get access to the runtime?

You might be able to access the runtime (if `maybeCurrentJSContext()` returns a `JSContext`), but not always.

[11:52:26.0320] <jkratzer>
Hi all.  I'm in the process of writing an advisory for https://bugzilla.mozilla.org/show_bug.cgi?id=1834711.  Can anyone tell me, is this a memory corruption issue or an issue with accessing another compartment?

[12:32:05.0602] <mccr8>
> <@jkratzer:mozilla.org> Hi all.  I'm in the process of writing an advisory for https://bugzilla.mozilla.org/show_bug.cgi?id=1834711.  Can anyone tell me, is this a memory corruption issue or an issue with accessing another compartment?

Yeah, I think the possible issue here would be the GC getting confused and that leading to some kind of memory corruption or UAF kind of thing.

[12:35:06.0604] <jkratzer>
Great.  Thanks mccr8!


2023-06-28
[05:21:22.0244] <smaug>
Can JS::Stencil be deleted on any threada?

[05:21:27.0040] <smaug>
 * Can JS::Stencil be deleted on any thread?

[05:23:19.0132] <smaug>
jandem: you might know ? 🙂

[05:24:08.0879] <smaug>
or arai , since I'm looking at your patch 🙂 

[05:24:49.0589] <arai>
it can be deleted on any thread

[05:27:43.0682] <smaug>
ok, thanks

[05:36:39.0050] <arai>
thank you for reviewing :)

[06:38:03.0110] <davidj361>
Why is the 2nd argument nullptr? I couldn't figure it out from the function declaration and definition.
 https://searchfox.org/mozilla-esr102/rev/bf87e869ece2406e9e425a74e8bf77aba0975625/js/src/builtin/TestingFunctions.cpp#7224

[06:42:49.0721] <tcampbell>
That means the 'this' passed to function is 'null' which in non-strict mode means it will be the globalObject and in strict mode will remain null. Similar to 'thisArg' of https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call

[06:43:58.0590] <davidj361>
Thank you

[06:44:41.0828] <tcampbell>
JavaScript lets you call functions with whatever 'this' you want, including primitive values. `[].filter.call("string", c => c > "m")`

[07:13:37.0730] <dbezhetskov>
some dumb question about gc and jit in SpiderMonkey:
the jit code can have raw gc pointers and so, when gc is tracing live objects it must trace code objects too
afaiu it is done in `JitCode::traceChildren(JSTracer* trc)` and when we trace code (inside `::TraceDataRelocations`) we can update  pointers in the code, so code should be ^WX, right?

[08:47:09.0262] <jonco>
sfink: ping

[10:47:20.0325] <mgaudet>
> <@mgaudet:mozilla.org> What's our policy with slow tests? Which is to say, if I were to mark a slow test as slow, will it ever actually get run in integration, or is it effectively black-holed until one of us tries running jit-test with the enable-slow arg?

Bump on this -- I should have brought it up this morning but forgot

[14:10:26.0537] <kfjvj>
Is there anything like a hashable ID that can be extracted from a JSObject* ?

[14:11:42.0928] <kfjvj>
I want to be able to cross-reference JS Objects in a c++ hash map.  Specifically, it's a mapping of JS prototypes to C++ type_index objects.  I want the lookup to operate both ways, without doing a linear search.

[14:13:06.0189] <kfjvj>
I could compute the hash based on pointer address or something like that, but that seems highly dubious.

[14:20:25.0830] <sfink>
look at `StableCellHasher`, eg `GetOrCreateUniqueId`.


2023-06-29
[19:35:51.0923] <wes>
> <@arai:mozilla.org> which version of SpiderMonkey is the question about?

Current SpiderMonkey. I'm trying to get up to speed on the internals after being away for nearly a decade. Holy moly things have changed, I'm still trying to wrap my head around exactly what the GC is doing under the hood.  My question and Jandem's answer show that I have more reading to do.

[22:05:23.0349] <arai>
I see :)

[00:52:37.0169] <jandem>
dbezhetskov: code is either writable and executable or one of writable/executable. In the latter case we reprotect if needed with the `Maybe<AutoWritableJitCode>` in `TraceDataRelocations`

[00:57:24.0008] <jandem>
wes: [this](https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr102/docs/GC%20Rooting%20Guide.md) might help

[04:58:13.0188] <padenot>
Can I borrow a few minutes of someone's time to help me diagnose a rooting hazard that we go while landing something we'd like to reland asap ?

[05:02:43.0075] <jandem>
padenot: do you have a link to a try/autoland push with failures?

[05:03:27.0394] <padenot>
https://treeherder.mozilla.org/logviewer?job_id=421052163&repo=autoland&lineNumber=77945

[05:03:42.0749] <padenot>
I think it's just a matter of sprinkling `Rooted<>` a bit everywhere on those lines 

[05:13:16.0250] <jandem>
ok so `VideoDecoderConfig` is a WebIDL dictionary

[05:15:55.0978] <padenot>
indeed

[05:19:33.0213] <jandem>
`RootedDictionary<VideoDecoderConfig> config(cx)` seems to be the right incantation

[05:19:40.0147] <jandem>
 * `RootedDictionary<VideoDecoderConfig> config(cx)` seems to be the right incantation to root those

[05:20:35.0018] <padenot>
and then `Handle<>` in the param of functions ?

[05:20:37.0484] <arai>
so, looks like `VideoDecoderConfig` is placed both on stack and heap.  the stack case can use `RootedDictionary` as jandem says, but the heap case in `ConfigureMessage.mConfig` may need extra tracing I think

[05:21:52.0644] <padenot>
maybe we should just copy that to a normal struct

[05:23:41.0990] <arai>
to my understanding, the hazard comes from the `ArrayBuffer` (`VideoDecoderConfig.description`), and the buffer is passed through the message?

[05:23:59.0959] <padenot>
yeah we should copy that

[05:24:03.0620] <padenot>
it's copied anyway

[05:24:51.0566] <arai>
okay, if it can be copied, the not using `ArrayBuffer` would be the simplest way. as the comment in the `dictionary VideoDecoderConfig` declaration says

[05:24:55.0028] <padenot>
what's the method to go from a JS::Handle to the type that it refers to

[05:24:56.0840] <padenot>
 * what's the method to go from a JS::Handle to the type that it refers to?

[05:25:23.0162] <jandem>
`.get()` or implicit conversion

[05:25:51.0391] <jandem>
there's no `HandleDictionary` as far as I can tell. Other code seems to pass `RootedDictionary&`?

[05:26:49.0182] <padenot>
ah ok

[05:27:20.0520] <jandem>
I agree with arai that not using the array buffer would be nice

[07:28:21.0187] <padenot>
ok it's a big patch now, but it should do the trick

[07:29:05.0050] <padenot>
jandem, arai, thanks! I opted to convert those DOM objects into regular objects, and so this effectively sidesteps the whole issue

[07:30:11.0055] <padenot>
instead of doing a bunch of things with the dom objects, and then later converting them to regular objects

[07:30:18.0464] <peterv>
we generally use WebIDL dictionaries only on the stack

[07:31:07.0309] <padenot>
yeah it felt a bit weird to see them deep in the media code, so I got us more or less the same objects, but they use gecko types you'd find then such as Maybe instead of Optional, etc.

[07:31:31.0121] <padenot>
and the arraybuffer is converted to our MediaByteBuffer that we use for this purpose as well

[07:31:38.0861] <peterv>
you can use a union with arraybuffers on the heap with a RootedUnion I think, but you really need to hook it up to the cyclec collector then

[07:32:12.0971] <padenot>
the API is designed in such a way that you need to copy this small buffer anyways

[07:32:27.0103] <padenot>
(because it's used internally on other threads)

[07:32:28.0509] <peterv>
ok, seems safer in general

[07:33:03.0652] <peterv>
good thing we have static analysis, though I really would like reviewers to have caught this too

[07:33:53.0852] <padenot>
yeah

[07:36:59.0332] <padenot>
ideally we'd have an easy way to run it locally, short of that I'm going to add this job to our media try preset

[08:45:06.0457] <Bryan Thrall [:bthrall]>
I'm having trouble understanding why `js::jit::StackValue` isn't a fully defined debug symbol. I'm compiling with --enable-debug and --disable-optimize, and haven't had any trouble with any other debug symbols, but when I run the JS shell in gdb or rr:
```
Thread 1 hit Breakpoint 1, js::jit::CompilerFrameInfo::sync (this=0x7ffee6416138, val=0x7fcfb13b6378) at /home/bryan/src/mozilla-unified/js/src/jit/BaselineFrameInfo.cpp:39
39	  switch (val->kind()) {
(rr) p js::jit::StackValue::Stack
No type "StackValue" within class or namespace "js::jit".
(rr) whatis val
type = js::jit::StackValue *
(rr) p *val
$4 = <incomplete type>

```
The process is breakpointed in `CompilerFrameInfo::sync()` which calls functions on `StackValue`, so the type *must* be defined. But why isn't rr finding it?

[08:48:19.0079] <iain>
Bryan Thrall [:bthrall]: That all seems like it should work. Normally when I have that sort of problem it's because I'm using an optimized build, so if that's not your problem, nothing leaps out to me.

[08:59:31.0536] <nbp>
I do not know if this would help, but in the past I added: `--enable-debug-symbols=-ggdb2` and `--enable-debug=-ggdb2` to make mozconfig generator.

[08:59:39.0991] <nbp>
 * I do not know if this would help, but in the past I added: `--enable-debug-symbols=-ggdb2` and `--enable-debug=-ggdb2` to my mozconfig generator.

[09:00:15.0085] <nbp>
the first one being used only in profiled / optimized builds.

[09:00:55.0335] <nbp>
as well as the following comment: `TODO: Use -ggdb3 when not building firefox, as -ggdb3 still output macro definitions after pre-processing.`

[09:32:46.0515] <Bryan Thrall [:bthrall]>
Thanks! Unfortunately, `--enable-debug=-ggdb3` doesn't seem to help

[09:40:29.0206] <kfjvj>
> <@sfink:mozilla.org> look at `StableCellHasher`, eg `GetOrCreateUniqueId`.

I can find something called MovableCellHasher in my RootingAPI.h.  I'm working with mozjs-102.

From what I can tell, it looks like almost the exact same thing as the StableCellHasher.

[09:41:32.0655] <iain>
kfjvj: It was renamed [here](https://phabricator.services.mozilla.com/D177525)

[09:42:02.0313] <kfjvj>
> <@iain:mozilla.org> kfjvj: It was renamed [here](https://phabricator.services.mozilla.com/D177525)

OK.  As long as it's basically the same functionality, I should be fine.

[10:18:28.0143] <sfink>
> <@bthrall:mozilla.org> I'm having trouble understanding why `js::jit::StackValue` isn't a fully defined debug symbol. I'm compiling with --enable-debug and --disable-optimize, and haven't had any trouble with any other debug symbols, but when I run the JS shell in gdb or rr:
> ```
> Thread 1 hit Breakpoint 1, js::jit::CompilerFrameInfo::sync (this=0x7ffee6416138, val=0x7fcfb13b6378) at /home/bryan/src/mozilla-unified/js/src/jit/BaselineFrameInfo.cpp:39
> 39	  switch (val->kind()) {
> (rr) p js::jit::StackValue::Stack
> No type "StackValue" within class or namespace "js::jit".
> (rr) whatis val
> type = js::jit::StackValue *
> (rr) p *val
> $4 = <incomplete type>
> 
> ```
> The process is breakpointed in `CompilerFrameInfo::sync()` which calls functions on `StackValue`, so the type *must* be defined. But why isn't rr finding it?

This sounds very similar to what we ran into with JSString (and many others) not being defined. I'm guessing it's the same underlying cause. For a quick fix, try adding `-fstandalone-debug` to the compiler flags.

[10:19:44.0119] <sfink>
the problem is that a recent clang enabled an optimization to stop emitting debuginfo for all known types in all of the object files, but instead picking an object file to put class's debuginfo into. It dramatically reduces the amount of debuginfo produced.

[10:20:19.0323] <padenot>
sfink: do you think it's worth trying run your rooting hazard stuff on debian-based distros? There's a comment that says it doesn't work, but I don't know how current it is

[10:20:27.0520] <padenot>
 * sfink: do you think it's worth trying to run your rooting hazard stuff on debian-based distros? There's a comment that says it doesn't work, but I don't know how current it is

[10:21:27.0393] <sfink>
but the compiler has to choose a compilation unit to emit it for. Its heuristic depends on a call to the class's constructor, and sometimes we cheat and don't have one (we cast a pointer and just start using it, which violates the C++ spec but works.)

[10:21:35.0138] <padenot>
I'm referring to this: https://wiki.mozilla.org/Javascript:Hazard_Builds#Running_locally

[10:22:57.0269] <sfink>
padenot: I'm pretty sure it won't work out of the box, and I doubt `mach hazards bootstrap` will help much on Debian. That said, people have run it on Debian in the past. And the automation setup for running it locally is vastly better than it used to be.

[10:23:58.0087] <sfink>
if you wanted to try to beat it into submission, I could help out. I don't have time at the moment to find a debian-derived VM and get it properly working myself right now, though.

[10:24:38.0118] <padenot>
maybe I should try to make it work then. We're going to do lots of code in which I suspect this analysis is going to help us, and I'd like to have shorter round-trip time when developing

[10:24:58.0022] <padenot>
(the implementation of the Web Codecs API)

[10:25:35.0044] <sfink>
I need to ping peterv about bug 1690111. I suspect you'll be touching overlapping stuff.

[10:25:36.0149] <botzilla>
https://bugzil.la/1690111

[10:26:11.0338] <padenot>
I'll give it a go and report back my findings, there's two debian developers in the paris office that can maybe help

[10:28:14.0150] <sfink>
there are really two parts to the analysis which will require very different things. First is `mach hazards gather`, which is the hard part -- that's where it compiles the whole tree with a gcc plugin. The second part is analyzing the result (`mach hazards analyze`), which may just work and should definitely be much easier to get working if not.

[10:29:08.0348] <padenot>
oh but the job on treeherder is a debian

[10:29:15.0268] <padenot>
or am I misreading

[10:29:24.0412] <sfink>
Bryan Thrall [:bthrall]: the more principled fix would be to add a call to the `js::jit::StackValue` constructor, probably via placement new, somewhere.

[10:29:42.0128] <padenot>
https://firefox-ci-tc.services.mozilla.com/tasks/TNzhwpe4QxS3Gj_Rf07iXg is the task that ran it

[10:29:42.0574] <sfink>
oh wait, you must be right.

[10:29:52.0206] <sfink>
(re: debian)

[10:30:13.0330] <sfink>
so... it doesn't already work by any chance, does it? :-)

[10:30:26.0082] <padenot>
ok well I'll peek into what's in the image and maybe it's just going to work

[10:30:39.0863] <sfink>
(I run it locally on Fedora all the time, but I think all of the CI builders *are* debian)

[10:30:52.0012] <padenot>
I haven't tried, but I'll give it a go tomorrow and report back / update the docs

[10:31:25.0706] <sfink>
yeah, it should pretty much be `mach hazards bootstrap; mach hazards build-shell; mach hazards gather; mach hazards analyze; mach hazards view`

[10:32:19.0588] <padenot>
oh but I was reading the wrong docs, that's the issue

[10:32:44.0101] <sfink>
oops I should've clicked your docs link

[10:32:44.0825] <padenot>
https://firefox-source-docs.mozilla.org/js/HazardAnalysis/running.html#running-the-rooting-hazard-analysis looks current, https://wiki.mozilla.org/Javascript:Hazard_Builds#Running_locally looks ancient

[10:32:59.0863] <padenot>
the problem being that the second link is what is written to the log in case of failure

[10:33:36.0157] <padenot>
https://treeherder.mozilla.org/logviewer?job_id=421092008&repo=try&lineNumber=77948, it even mentions TinderBox, I should have known that it wasn't exactly up-to-date

[10:35:05.0260] <sfink>
ah! Yes, it has a nice obsolete banner, but that doesn't help much if the job is pointing to it anyway. Sorry about that, I'll update it.

[10:35:49.0582] <padenot>
cool, thanks! happy that this just works then, and cool that we have this analysis in the first place

[10:37:25.0588] <sfink>
I also need to add `mach hazards view` to the instructions...

[10:38:06.0780] <sfink>
so other people can suffer through my horrible CSS

[10:41:01.0225] <sfink>
...and I should write up something about incremental analyses...

[11:07:30.0707] <Bryan Thrall [:bthrall]>
> <@sfink:mozilla.org> Bryan Thrall [:bthrall]: the more principled fix would be to add a call to the `js::jit::StackValue` constructor, probably via placement new, somewhere.

Interestingly, `-fstandalone-debug` didn't seem to help, but calling the `StackValue` constructor did force clang to store the debuginfo so rr can find it. Thanks!

[11:13:08.0685] <twisniewski>
Just FYI, Webkit 173 just added four more perf optimizations (and 172 had one a well). I've updated our platform gap spreadsheets.

[11:13:13.0039] <twisniewski>
 * Just FYI, Webkit 173 just added four more perf optimizations (and 172 had one as well). I've updated our platform gap spreadsheets.

[11:18:40.0207] <iain>
jandem: [this patch](https://github.com/WebKit/WebKit/commit/0e3fcb9531e248c468366393fd4f2127ea5dcb56) might be relevant to the string replace code you're looking at.

[12:08:03.0041] <TheQwertiest>
a bit offtopic, but: is anyone here knowledgeable about module best-practices? :)
wondering what would be the better way to handle custom js objects that act as module.

e.g. let's say I have `playback-control` module. It has methods like `play`, `pause` and etc.
This lines up pretty good with module structure:
```
export function play() { return myObj.play(); };
//...
export default myObj;
```

But this object also has RW properties like `isPaused` or `volume`, which makes it not a "pure" and stateless object, thus requires user to use default export to access properties.

So, the question: would that be considered fine, or should these properties be 'methodified' (e.g. getVolume(), setVolume()), or maybe the whole `myObj` should be wrapped in accessor method (thus would be the only exported thing in the module)?


[12:08:30.0615] <TheQwertiest>
 * a bit offtopic, but my google-foo failed me: is anyone here knowledgeable about module best-practices? :)
wondering what would be the better way to handle custom js objects that act as module.

e.g. let's say I have `playback-control` module. It has methods like `play`, `pause` and etc.
This lines up pretty good with module structure:

```
export function play() { return myObj.play(); };
//...
export default myObj;
```

But this object also has RW properties like `isPaused` or `volume`, which makes it not a "pure" and stateless object, thus requires user to use default export to access properties.

So, the question: would that be considered fine, or should these properties be 'methodified' (e.g. getVolume(), setVolume()), or maybe the whole `myObj` should be wrapped in accessor method (thus would be the only exported thing in the module)?

[12:11:26.0635] <TheQwertiest>
 * a bit offtopic, but my google-foo failed me: is anyone here knowledgeable about module best-practices? :)
wondering what would be the better way to handle custom js objects that act as module.

e.g. let's say I have `myObj` custom object that is acting as a `playback-control` module. It has methods like `play`, `pause` and etc.
This lines up pretty good with module structure:

```
export function play() { return myObj.play(); };
//...
export default myObj;
```

But this object also has RW properties like `isPaused` or `volume`, which makes it not a "pure" and stateless object, thus requires user to use default export to access properties.

So, the question: would that be considered fine, or should these properties be 'methodified' (e.g. getVolume(), setVolume()), or maybe the whole `myObj` should be wrapped in accessor method (thus would be the only exported thing in the module)?

[12:15:04.0135] <TheQwertiest>
 * a bit offtopic, but my google-foo failed me: is anyone here knowledgeable about module best-practices? :)
wondering what would be the better way to handle custom js objects that act as module.

e.g. let's say I have `myObj` custom object that is acting as a `playback-control` module. It has methods like `play`, `pause` and etc.
This lines up pretty good with module structure:

```
export function play() { return myObj.play(); };
//...
export default myObj;
```

But this object also has RW properties like `isPaused` or `volume`, which makes it not a "pure" and stateless object, thus requires user to use default export to access properties, i.e.:

```
import playback from `playback-control`;
import {pause} from `playback-control`;

pause(); // can be used via named import
playback.volume = 0.7; // can only be used from default import
```

So, the question: would that be considered fine, or should these properties be 'methodified' (e.g. getVolume(), setVolume()), or maybe the whole `myObj` should be wrapped in accessor method (thus would be the only exported thing in the module)?

[12:17:53.0098] <TheQwertiest>
 * a bit offtopic, but my google-foo failed me: is anyone here knowledgeable about module best-practices? :)
wondering what would be the better way to handle custom js objects that act as module.

e.g. let's say I have `myObj` custom object that is acting as a `playback-control` module. It has methods like `play`, `pause` and etc.
This lines up pretty good with module structure:

```
export function play() { return myObj.play(); };
//...
export default myObj;
```

But this object also has RW properties like `currentTIme` or `volume`, which makes it not a "pure" and stateless object, thus requires user to use default export to access properties, i.e.:

```
import playback from `playback-control`;
import {pause} from `playback-control`;

pause(); // can be used via named import
playback.volume = 0.7; // can only be used from default import
```

So, the question: would that be considered fine, or should these properties be 'methodified' (e.g. getVolume(), setVolume()), or maybe the whole `myObj` should be wrapped in accessor method (thus would be the only exported thing in the module)?

[12:18:01.0398] <TheQwertiest>
 * a bit offtopic, but my google-foo failed me: is anyone here knowledgeable about module best-practices? :)
wondering what would be the better way to handle custom js objects that act as module.

e.g. let's say I have `myObj` custom object that is acting as a `playback-control` module. It has methods like `play`, `pause` and etc.
This lines up pretty good with module structure:

```
export function play() { return myObj.play(); };
//...
export default myObj;
```

But this object also has RW properties like `currentTime` or `volume`, which makes it not a "pure" and stateless object, thus requires user to use default export to access properties, i.e.:

```
import playback from `playback-control`;
import {pause} from `playback-control`;

pause(); // can be used via named import
playback.volume = 0.7; // can only be used from default import
```

So, the question: would that be considered fine, or should these properties be 'methodified' (e.g. getVolume(), setVolume()), or maybe the whole `myObj` should be wrapped in accessor method (thus would be the only exported thing in the module)?

[12:29:09.0505] <arai>
I guess, it mostly depends on whether the consumer of the module wants to call the function with `pause()` style or `playback.pause()` style.  and it would be brevity vs readability problem?

[12:29:36.0446] <arai>
 * I guess, it mostly depends on whether the consumer of the module wants to call the function with `pause()` style or `playback.pause()` style.  and it would be brevity vs readability(?) problem?

[12:30:40.0992] <arai>
in Firefox internal, derived from JSM-style, most things are written in `playback.pause()` style

[12:35:07.0419] <arai>
and to my understanding, exporting a function with side-effect is not much common there

[12:35:58.0340] <arai>
it could be very different in other projects tho

[12:44:25.0999] <TheQwertiest>
thanks, this means that my current way of things (i.e. default exporting object with properties) is at least not entirely wrong :D

[12:44:42.0841] <TheQwertiest>
 * thanks, this means that my current way of things (i.e. default exporting object with properties) is at the very least not entirely wrong :D

[13:31:31.0198] <kfjvj>
Can I get a quick sanity check?

I am using the following type signature to correlate jsobjects with std::type_index:

```
js::HashMap<JSObject*, std::type_index, js::MovableCellHasher<JSObject*>>
```
Because it's using the movable cell hasher, I think the keys should be relatively stable.  However, it doesn't feel right to have JSObject* directly in the map signature like that.

iain , sfink , any advice?


[13:39:40.0347] <iain>
kfjvj: Not my area of expertise, but looking at searchfox, I see that WeakMap (which [uses](https://searchfox.org/mozilla-central/source/js/src/gc/WeakMap.h#178-180) StableCellHasher<Key>) generally uses HeapPtr<T> for its keys ([example](https://searchfox.org/mozilla-central/source/js/src/gc/WeakMap.h#323)). Intuitively, all StableCellHasher is doing is giving you a hash value that won't change when the object is moved; it can't ensure that the key you store inside your hashtable is updated, so you still need to trace your keys.

[13:47:40.0330] <kfjvj>
> <@iain:mozilla.org> kfjvj: Not my area of expertise, but looking at searchfox, I see that WeakMap (which [uses](https://searchfox.org/mozilla-central/source/js/src/gc/WeakMap.h#178-180) StableCellHasher<Key>) generally uses HeapPtr<T> for its keys ([example](https://searchfox.org/mozilla-central/source/js/src/gc/WeakMap.h#323)). Intuitively, all StableCellHasher is doing is giving you a hash value that won't change when the object is moved; it can't ensure that the key you store inside your hashtable is updated, so you still need to trace your keys.

I was originally using a `std::unordered_map<HashNumber, std::type_index>`, but then I realized that I wasn't sure if the hashes generated by MovableCellHasher would be unique.

There's that function you mentioned, something like GetOrCreateUniqueId, but I don't think I have it in my mozjs version.

[13:48:35.0693] <iain>
The hashes are not guaranteed to be unique.

[13:49:03.0988] <iain>
Actually, let me double-check that

[13:49:20.0795] <iain>
Okay, yeah

[13:49:23.0455] <TheQwertiest>
it's not guaranteed in std::map

[13:49:47.0676] <TheQwertiest>
or any associative container

[13:50:12.0259] <iain>
We use GetOrCreateUniqueId inside StableCellHasher to get a unique id for each object, but then we hash that unique id, which can potentially lead to hash collisions

[13:50:28.0374] <TheQwertiest>
 * or any std associative container

[13:52:36.0595] <kfjvj>
Maybe I need to try a different approach.  Do the prototype objects created with JS_InitClass have any extra slots where I could put some custom data?

[13:56:19.0041] <TheQwertiest>
you can specify js class with additional reserved slot

[13:56:48.0374] <kfjvj>
> <@theqwertiest:mozilla.org> you can specify js class with additional reserved slot

The class can have a reserved slot, but can the /prototype/ have a reserved slot?

[13:58:56.0662] <TheQwertiest>
iirc, there is no difference between prototype and any other object in that sense, I've never tried that though

[13:59:29.0585] <kfjvj>
OK, I need to brush up on my prototype knowledge.

[13:59:38.0811] <TheQwertiest>
 * iirc, there is no difference between prototype and any other custom js object in that sense, I've never tried that though

[14:00:29.0761] <TheQwertiest>
 * iirc, there is no difference between prototype and any other custom js object in that sense. I've never tried doing that though

[14:00:58.0275] <TheQwertiest>
what are you trying to achieve?

[14:02:01.0631] <kfjvj>
Basically, I need to have a 2-way lookup that can associate std::type_index with a JS prototype, and can do the reverse association as well.

[14:02:21.0316] <kfjvj>
It's all part of an effort to map c++ classes onto JS

[14:03:09.0022] <TheQwertiest>
do you have a fixed amount of prototypes or arbitrary?

[14:03:24.0276] <kfjvj>
any number

[14:05:12.0584] <TheQwertiest>
one way would be to use JSClass::name for reverse lookup

[14:05:37.0414] <kfjvj>
is it unique an unchanging?

[14:06:17.0882] <TheQwertiest>
well, it's the same as the one you pass in JS_InitClass =)

[14:06:47.0074] <kfjvj>
oh right.  There could potentially be multiple classes with the same name.  There's a huge nested hierarchy.

[14:07:20.0336] <TheQwertiest>
hm, I don't think you can have multiple prototypes with the same name tho

[14:07:36.0757] <TheQwertiest>
registered on the same object at least

[14:07:43.0558] <TheQwertiest>
 * registered on the same object at least (e.g. gloval object)

[14:07:46.0133] <TheQwertiest>
 * registered on the same object at least (e.g. global object)

[14:08:23.0396] <kfjvj>
Yeah, the global object has a tree structure of multiple levels where the prototypes will be

[14:08:24.0779] <TheQwertiest>
because otherwise there would be no way to invoke constructor `new MyClassName()`

[14:08:51.0486] <kfjvj>
so, in global, we could have a.b.c.Foo as well as a.b.e.Foo, etc.

[14:09:22.0108] <TheQwertiest>
where a,b,c are other objects/prototypes?

[14:09:59.0191] <kfjvj>
They're just plain objects.  The c++ namespace hierarchy is mapped onto a set of plain JS objects

[14:11:15.0677] <TheQwertiest>
dunno why would you want that, but sounds exciting :D

[14:12:06.0221] <kfjvj>
> <@theqwertiest:mozilla.org> dunno why would you want that, but sounds exciting :D

I'm not sure how else to mirror the structure of namespaces.  

[14:12:50.0780] <sfink>
It sounds to me like you could have prototype objects with either a reserved slot storing the std::type_index, or a non-enumerable property, or a Symbol-keyed property, or just a plain property with a funky name. For the other way, it depends a bit on what you want the lifetime to be, but it sounds like these could live for as long as the runtime does?

[14:13:43.0038] <TheQwertiest>
> <@kfjvj:mozilla.org> I'm not sure how else to mirror the structure of namespaces.

I mean, I can't imagine what you need mapping arbitrary c++ to JS for =)

[14:14:38.0879] <TheQwertiest>
> <@kfjvj:mozilla.org> I'm not sure how else to mirror the structure of namespaces.

 * I mean, I can't imagine what you need the mapping of arbitrary c++ types to JS for =)

[14:15:03.0395] <kfjvj>
> <@theqwertiest:mozilla.org> I mean, I can't imagine what you need the mapping of arbitrary c++ types to JS for =)

We're auto-generating JS bindings for a massive C++ api.

[14:15:48.0349] <kfjvj>
Using the boost::describe library, and the maddening black sorcery of template metaprogramming.

[14:16:45.0337] <TheQwertiest>
hope you don't forget about performance overhead though (JS <> nativeland boundary transition might be quite expensive)

[14:16:47.0449] <sfink>
anyway, it seems like you could do a `GCHashMap<std::type_index, JS::Heap<JSObject*>>`. You would need to put that in something that gets traced, but if it's really the full runtime's lifetime, then it could be a `PersistentRooted<GCHashMap<...>>`

[14:17:29.0984] <TheQwertiest>
> <@theqwertiest:mozilla.org> hope you don't forget about performance overhead though (JS <> nativeland boundary transition might be quite expensive)

learned that the hard way xD

[14:17:39.0714] <kfjvj>
> <@theqwertiest:mozilla.org> learned that the hard way xD

Oh yes, we are well aware.

[14:18:02.0591] <sfink>
that wouldn't require the `StableCellHasher`/`MovableCellHasher` thing, since the moving weirdness doesn't impact the values.

[14:18:37.0932] <TheQwertiest>
> <@sfink:mozilla.org> anyway, it seems like you could do a `GCHashMap<std::type_index, JS::Heap<JSObject*>>`. You would need to put that in something that gets traced, but if it's really the full runtime's lifetime, then it could be a `PersistentRooted<GCHashMap<...>>`

even std::unordered_map<> can be used for more c++ compat (additional tracing will be required though)

[14:18:46.0809] <TheQwertiest>
> <@sfink:mozilla.org> anyway, it seems like you could do a `GCHashMap<std::type_index, JS::Heap<JSObject*>>`. You would need to put that in something that gets traced, but if it's really the full runtime's lifetime, then it could be a `PersistentRooted<GCHashMap<...>>`

 * std::unordered\_map\<> can be used for even more c++ compat (additional tracing will be required though)

[14:19:15.0314] <sfink>
yeah, you'd have to arrange for the values to be traced or swept.

[14:19:41.0584] <kfjvj>
Thanks for the help.  There's certainly a lot to think about for this.

[14:20:13.0095] <TheQwertiest>
> <@sfink:mozilla.org> yeah, you'd have to arrange for the values to be traced or swept.

wdym by "swept"?

[14:20:48.0848] <TheQwertiest>
(I've only ever traced things =))

[14:21:19.0181] <TheQwertiest>
 * (I've only ever traced GC things =))

[14:21:31.0073] <sfink>
if you need them to always stay alive, then you have to trace them. Otherwise, you need to have them updated on a moving GC or nulled out if nothing else is keeping them alive. That happens during sweeping.

[14:23:05.0359] <sfink>
they're similar, but sweeping tends to work by looking at a collection of some sort and iterating over all the entries to find the ones that have either moved or nulled, and the collection often needs to do something (unlink nodes or whatever) when contained items are removed.

[14:23:42.0106] <sfink>
 * they're similar, but sweeping tends to work by looking at a collection of some sort and iterating over all the entries to find the ones that have either moved or need to be nulled out or removed, and the collection often needs to do something (unlink nodes or whatever) when contained items are removed.

[14:24:19.0575] <TheQwertiest>
hm... But I thought that I can just stop tracing GC things if I don't need them anymore?

[14:24:55.0437] <sfink>
that'll work if you never ever look at them again

[14:25:22.0291] <sfink>
but if there's any way to find them, eg by iterating over a collection or whatever, then you'll have a bad time

[14:26:29.0668] <sfink>
and things that you trace tend to need barriers, which will probably fire if you're destroying something, at which time they'll look at them

[14:26:34.0307] <TheQwertiest>
ah, so sweeping is like marking GC things as dead? while it's still accessible through something like GC container (e.g. GCHasmMap)?

[14:26:43.0906] <TheQwertiest>
 * ah, so sweeping is like marking GC things as dead, while it's still accessible through something like GC container (e.g. GCHasmMap)?

[14:26:50.0711] <TheQwertiest>
 * ah, so sweeping is like marking GC things as dead, while it's still accessible through something like GC container (e.g. GCHashMap)?

[14:27:29.0089] <sfink>
yes, though maybe it'd be better to say that it's visiting *edges* to dead (or moved) GC things

[14:27:54.0441] <TheQwertiest>
I think I understand now, thanks :)

[14:29:27.0348] <TheQwertiest>
hopefully my usage scenarios won't be ever that complex, so that I will need this knowledge :D

[14:29:40.0469] <TheQwertiest>
 * hopefully my usage scenarios won't be ever so complex, that I will need this knowledge :D

[14:29:42.0604] <sfink>
(since GC is all about marking things as live, never marking things as dead. Reference counting marks things as dead. But that's beside the point.)

[14:29:44.0911] <TheQwertiest>
 * hopefully my usage scenarios won't be ever so complex, that I will need this knowledge though :D

[14:30:42.0670] <sfink>
> <@theqwertiest:mozilla.org> hopefully my usage scenarios won't be ever so complex, that I will need this knowledge though :D

barriers are the part that really make my head hurt, and you can start to need those without realizing it ;-)

[14:31:11.0613] <TheQwertiest>
any simple example scenario when one would need those?

[14:31:50.0434] <sfink>
(1) if you use generational GC and you ever store something that might be in the nursery / young generation

[14:32:17.0751] <sfink>
(2) if you use incremental GC and you ever change something that you've stored

[14:33:17.0593] <sfink>
those aren't the only times (with generational GC, you also need them when you're deleting stuff that might have been in the nursery at some point, for example) but they're the main ones

[14:34:35.0618] <TheQwertiest>
Phew, glad that I don't have enough patience to implement full GC by myself :D (using built-in things like IncrementalGCSlice/JS_GC/NonIncrementalGC)

[14:34:42.0180] <TheQwertiest>
 * Phew, glad that I didn't have enough patience to implement full GC by myself :D (using built-in things like IncrementalGCSlice/JS\_GC/NonIncrementalGC)

[14:34:43.0583] <sfink>
we also have a 3rd kind of barrier, a read barrier, that we've inflicted upon ourselves because we're interfacing with a different automatic memory management system (specifically, a cycle collector)

[14:35:00.0042] <TheQwertiest>
 * Whew, glad that I didn't have enough patience to implement full GC by myself :D (using built-in things like IncrementalGCSlice/JS\_GC/NonIncrementalGC)

[14:35:13.0686] <TheQwertiest>
 * Whew, glad that I didn't have enough patience to implement whole GC by myself :D (just using built-in things like IncrementalGCSlice/JS\_GC/NonIncrementalGC)

[14:35:54.0338] <sfink>
A basic GC can be implemented fairly easily in an afternoon. A not so basic GC can be implemented in... a decade or so, I guess? ;-)

[14:37:24.0531] <TheQwertiest>
> <@theqwertiest:mozilla.org> Whew, glad that I didn't have enough patience to implement whole GC by myself :D (just using built-in things like IncrementalGCSlice/JS\_GC/NonIncrementalGC)

I mean, I'm 99% sure that my implementation (using those built-in facilities) is really sub-optimal. 
But:
- it works
- I don't have enough expertise to make it better anyway xD

[14:38:45.0775] <TheQwertiest>
> <@sfink:mozilla.org> A basic GC can be implemented fairly easily in an afternoon. A not so basic GC can be implemented in... a decade or so, I guess? ;-)

I think it took a bit more though? How old was Firefox again? :D

[14:38:52.0647] <sfink>
if you're using incremental, then you'll probably need to be using `Heap<JSObject*>` and not bare `JSObject*` in most places.

[14:38:54.0835] <TheQwertiest>
> <@sfink:mozilla.org> A basic GC can be implemented fairly easily in an afternoon. A not so basic GC can be implemented in... a decade or so, I guess? ;-)

 * I think it took a "bit" more though? How old was Firefox again? :D

[14:39:54.0938] <sfink>
> <@theqwertiest:mozilla.org> I think it took a "bit" more though? How old was Firefox again? :D

Not quite old enough to drink in the US, I believe.

[14:40:02.0079] <sfink>
er, drink legally, that is

[14:40:14.0090] <sfink>
it has been observed acting drunk plenty of times

[14:41:51.0680] <sfink>
Ugh. I hate performance work. I realized the results I've been looking at have been Linux-specific. When I looked at Windows, it had some of the same improvements, plus some really major regressions. So I retested, and now Windows is showing no regressions and a whole bunch more improvements.

[14:41:56.0613] <sfink>
There Is No Truth

[14:42:04.0016] <TheQwertiest>
the problem with my use of GC is mostly in tuning: allocation thresholds, memory pressure and etc.
browser SM usage scenario is totally different, so I can't reuse values and have to guess by myself...

[14:43:56.0319] <TheQwertiest>
> <@sfink:mozilla.org> Ugh. I hate performance work. I realized the results I've been looking at have been Linux-specific. When I looked at Windows, it had some of the same improvements, plus some really major regressions. So I retested, and now Windows is showing no regressions and a whole bunch more improvements.

well, was it the same test stand? :D
don't forget those sneaky "small" windows updates that change "small" things, that break performance in unexpected places

[14:44:27.0270] <TheQwertiest>
 * the problem with my use of GC is mostly in tuning: allocation thresholds, memory pressure and etc.
browser SM usage scenario is totally different, so I can't reuse values and have to guess everything...

[14:44:49.0636] <sfink>
yeah, tuning is a dark art, and one that we're not very rigorous about. We mostly just back our way into accidentally overfitting to the benchmark of the day.

[14:44:54.0739] <TheQwertiest>
> <@sfink:mozilla.org> Ugh. I hate performance work. I realized the results I've been looking at have been Linux-specific. When I looked at Windows, it had some of the same improvements, plus some really major regressions. So I retested, and now Windows is showing no regressions and a whole bunch more improvements.

 * well, was it the same test stand? :D
don't forget those sneaky "small" windows updates that change "small" things, that totally break performance in unexpected places

[14:45:37.0736] <TheQwertiest>
another thing that makes it difficult is that there is no way to limit max heap alloc in SM GC

[14:45:59.0383] <sfink>
sure there is, as long as the limit you want happens to be 4GB

[14:46:12.0387] <TheQwertiest>
>_<

[14:46:19.0982] <TheQwertiest>
 * \>_<

[14:47:19.0138] <TheQwertiest>
PS: Would it be possible to bribe someone for that limit to be implemented? 🥺

[14:47:23.0789] <TheQwertiest>
 * PS: Would it be possible to bribe someone for that limit to be implemented though? 🥺

[14:48:04.0364] <TheQwertiest>
 * PS: Would it be possible to bribe someone for that limit to be implemented though? 🥺
(it would allow to throw away hundreds of LoC probably)

[14:48:13.0382] <TheQwertiest>
 * PS: Would it be possible to bribe someone for that limit to be implemented though? 🥺
(it would allow me to throw away hundreds of LoC probably)

[14:49:28.0358] <sfink>
I'm actually not sure what would be involved. I know that we've had a lot of trouble in the past where when you start to get closer to the limit, we start GC-thrashing, when it would be better for Firefox to just crash. So it's not quite as simple as setting a number.

[14:50:15.0646] <sfink>
GC thrashing gets ugly. Hangs your browser, sometimes hangs your system.

[14:51:11.0455] <TheQwertiest>
makes sense

[14:52:09.0702] <TheQwertiest>
and now I realize, that it wouldn't help me much anyway, since I need per zone(realm? global?) heap limit as well...

[14:54:31.0793] <sfink>
on our side, per Zone probably wouldn't be any more work

[14:55:00.0102] <sfink>
per-Realm or per-compartment would be much harder

[15:02:19.0965] <TheQwertiest>
looked at the code: it's per realm (of course :D)

[15:03:09.0019] <TheQwertiest>
 * checked the code: it's per realm (of course :D)

[15:03:32.0176] <TheQwertiest>
hm...

[15:04:22.0631] <TheQwertiest>
but each realm is associated with a single zone, right? so it actually doesnt really matter much if it's zone or realm for allocation counting

[15:05:29.0876] <TheQwertiest>
(during GC I iterate through realms to counts my heap allocs, but in the end they are GC'd via PrepareZoneForGC(js::GetRealmZone()))

[15:19:15.0505] <sfink>
It's up to your embedding. A Zone can have many Realms, but you could also create a new Zone for every Realm you create.

[15:20:39.0420] <sfink>
The full picture: JSRuntime contains some number of Zones, each containing some number of compartments, each containing some number of Realms, and a Realm is 1-1 with a JS global object.

[15:22:51.0677] <sfink>
JSRuntime is a thread that can run JS. Zone is the unit of GC collection. A compartment is a security boundary (not Spectre-proof security or anything strong like that, just a place to apply security rules and be assured that objects don't leak across compartment boundaries.) A Realm is a global and all of its constructor functions and properties etc.


2023-06-30
[23:49:45.0993] <TheQwertiest>
thanks for the explanation :)

