2021-05-01
[03:19:25.0244] <arai>
gma-amg: have you started direct message?  somehow I cannot join it

[03:20:07.0262] <gma-amg>
> <@arai:mozilla.org> gma-amg: have you started direct message?  somehow I cannot join it

Okay, I'll just send the messages here

[03:20:43.0404] <gma-amg>
Sorry to disturb you on the weekend, but could you tell me what this assert statement does? ```MOZ_ASSERT(!hasAutoScratchFloatRegisterSpill()); ```

[03:21:00.0604] <gma-amg>
Also, I wonder if our error is because we call ```allocateFixedRegister``` twice, once for payloadReg() and typeReg() ?

[03:21:46.0746] <arai>
uh, I don't know much about that. let me dig into it

[03:22:05.0503] <arai>
or, try waiting for JIT people

[03:22:41.0658] <gma-amg>
Okay, no worries ^-^

[03:24:07.0340] <arai>
gma-amg: which line is it?

[03:24:15.0367] <arai>
there seems to be 6 occurrences

[03:25:35.0330] <arai>
the assertion itself means that, you shouldn't have `AutoScratchFloatRegister` instance somewhere on the stack.  and if it fails, it means you have `AutoScratchFloatRegister` instance on the stack

[03:28:56.0269] <arai>
also, how do you hit it?  (or you're just looking into it?)

[03:29:42.0053] <gma-amg>
> <@arai:mozilla.org> also, how do you hit it?  (or you're just looking into it?)

No no, just looking

[03:30:15.0719] <arai>
I see

[03:30:29.0103] <arai>
about the assertion itself, does the above description make sense?

[03:30:40.0006] <gma-amg>
Yes, I think I got it

[03:40:43.0770] <arai>
oh, I overlooked that you had one more question

[03:40:52.0753] <arai>
gma-amg: which `allocateFixedRegister` are you talking about?

[04:10:02.0587] <gma-amg>
> <@arai:mozilla.org> gma-amg: which `allocateFixedRegister` are you talking about?

in line 604 of CacheIRCompiler

[04:11:17.0730] <arai>
do you mean them? https://searchfox.org/mozilla-central/rev/55d7561df864c1719b0e019f29cf887b20e7d921/js/src/jit/CacheIRCompiler.cpp#606-607

[04:11:51.0224] <gma-amg>
Yup

[04:12:21.0229] <arai>
the operation it self looks good

[04:12:58.0394] <arai>
but given that 32-bit requires more registers, it's possible that it runs out of registers. not sure what happens in that case tho


2021-05-02
[04:44:19.0250] <ashcode>
https://paste.mozilla.org/c0Wc509Y- this is my error
https://paste.mozilla.org/63X540TO-this is my diff file.
https://bugzilla.mozilla.org/show_bug.cgi?id=1576885- this is the bug i m trying to resolve
I m trying to add cache_ field in SharedImmutableString::StringBox,I think the problem is in initialisation of the cache_ field.
 i forward declared struct Inner still it is showing me Incomplete type error.

[04:45:13.0377] <ashcode>
 * https://paste.mozilla.org/c0Wc509Y- this is my error
https://paste.mozilla.org/63X540TO-this is my diff file.
https://bugzilla.mozilla.org/show_bug.cgi?id=1576885 -this is the bug i m trying to resolve
I m trying to add cache_ field in SharedImmutableString::StringBox,I think the problem is in initialisation of the cache_ field.
 i forward declared struct Inner still it is showing me Incomplete type error.

[04:49:53.0605] <arai>
https://searchfox.org/mozilla-central/rev/5744de4a3be08874accc2bfdf4e06f138e53b346/js/src/threading/ExclusiveData.h#84-88

[04:50:33.0823] <arai>
`ExclusiveData` has a field with `T` type. it means it requires the actual definition of the `T`

[04:51:44.0175] <arai>
as the error message says, forward declaration is incomplete

[04:52:08.0373] <ashcode>
But i cant have Inner struct defined before StringBox

[04:53:04.0416] <ashcode>
Can i know any other way to pass parameter , may be using ```this```

[04:53:53.0808] <arai>
what's the reasoning behind the current diff?  why are you adding the field with that type?

[04:55:15.0804] <ashcode>
it was initialised with this value when cache_ pointer was in SharedImmutableString 

[04:57:26.0927] <ashcode>
 * it was initialised with this value when cache_ pointer was in SharedImmutableString .
I have to remove this pointer from the SharedImmutableString  class to StringBox class.
I tried to create alias name for cache_ as Xcache_ in SharedImmutableString, jus not to break code, using cache_ in StringBox to initilise it and once its initialised properly i ll replace Xache_  with cache_.

[04:57:46.0104] <ashcode>
 * it was initialised with this value when cache_ pointer was in SharedImmutableString .
I have to remove this pointer from the SharedImmutableString  class to StringBox class.
I tried to create alias name for cache_ as Xcache_ in SharedImmutableString, jus not to break code, using cache_ in StringBox to initilise it and once its initialised properly i ll replace Xache_  with cache_.
Then remove Xcache_ from all places

[04:58:20.0319] <arai>
oh, you're trying to move this field?  https://searchfox.org/mozilla-central/rev/5744de4a3be08874accc2bfdf4e06f138e53b346/js/src/vm/SharedImmutableStringsCache.h#344

[04:59:59.0827] <ashcode>
no !https://searchfox.org/mozilla-central/source/js/src/vm/SharedImmutableStringsCache.h#361
This one

[05:01:06.0718] <arai>
I mean, this line https://paste.mozilla.org/63X540TO#L47

[05:01:17.0880] <arai>
I was wondering where it or its type comes from

[05:01:42.0009] <ashcode>
> <@ashcode:mozilla.org> it was initialised with this value when cache_ pointer was in SharedImmutableString .
> I have to remove this pointer from the SharedImmutableString  class to StringBox class.
> I tried to create alias name for cache_ as Xcache_ in SharedImmutableString, jus not to break code, using cache_ in StringBox to initilise it and once its initialised properly i ll replace Xache_  with cache_.
> Then remove Xcache_ from all places

.

[05:02:03.0103] <ashcode>
I have added new field named cache_ in StringBox class

[05:04:12.0024] <arai>
I don't get the relation between the above explanation (and the bug comments) and `ExclusiveData<Inner>*` type in your diff

[05:04:48.0999] <arai>
why does the field have that type?

[05:07:42.0309] <ashcode>
> <@arai:mozilla.org> why does the field have that type?

As before , in SharedImmutableString class it was had ```ExclusiveData<SharedImmutableStringsCache::Inner>::Guard& locked ```field type in the constructor

[05:09:26.0841] <arai>
ah, thanks :)  the diagram helps much

[05:09:43.0493] <ashcode>
First one is hw the present code is , below is the one hw we want it to be

[05:11:31.0523] <arai>
where's `Inner` ?

[05:13:04.0432] <ashcode>
private member of SharedImmutableStringsCache class.
https://searchfox.org/mozilla-central/source/js/src/vm/SharedImmutableStringsCache.h#330

[05:14:31.0723] <arai>
which do you want,
```
SharedImmutableStringsCache -> Inner -> StringBox -> Inner
```
or
```
SharedImmutableStringsCache -> Inner -> StringBox -> SharedImmutableStringsCache
```


[05:15:27.0990] <ashcode>
 initialisation routine u mean?

[05:15:37.0943] <arai>
no, the pointer graph

[05:15:46.0036] <ashcode>
second one

[05:16:13.0446] <arai>
okay, then the field you've added looks having wrong type

[05:16:36.0886] <arai>
in the diff, the field is `mutable ExclusiveData<Inner>* cache_;`, that doesn't point `SharedImmutableStringsCache`

[05:17:09.0245] <ashcode>
i m not pretty much sure.. but my mentor suggested this can also be done
```
when StringBox::Create is call here for example, you can pass this
Inside SharedImmutableStringsCache::getOrCreate you can access this which should be the cache (or similar), that you can then pass down to StringBox::Create -> StringBox::StringBox
```

[05:17:58.0268] <arai>
were you talking in direct message?

[05:18:05.0096] <ashcode>
yh yesterday

[05:18:21.0764] <ashcode>
i thought today wat a holiday so i might not get instant replies

[05:18:27.0398] <ashcode>
 * i thought today was a holiday so i might not get instant replies

[05:18:40.0644] <ashcode>
 * i thought today was a holiday so i might not get instant replies. So i thought to ask here

[05:19:02.0341] <ashcode>
 * yh day before yesterday

[05:19:03.0818] <arai>
the  message above itself doesn't sound related to the field type

[05:19:10.0137] <ashcode>
 * i thought today was a weekend holiday so i might not get instant replies. So i thought to ask here

[05:19:48.0636] <arai>
maybe there were more context that lets you to choose the field type?

[05:22:26.0718] <ashcode>
Field type was decided to be dis, as it was giving incomplete type error before as well.

[05:23:10.0483] <ashcode>
so he suggested the field to type to be Exclusive<Inner> and forward declare the struct

[05:25:53.0357] <ashcode>
```
One thing might be to save your work and try to start from scratch just adding a cache_ field (with same type as the other one, or maybe the Inner stuff we talked about the other day) and see if you can get the StringBox constructor right, but feeding in the correct argument from getOrCreate
```

[05:26:44.0772] <ashcode>
So he told to get constructor crct lik dis , either using forward declare inner or with same type

[05:27:43.0874] <arai>
given the current type definition's dependency is "ExclusiveData<Inner> =>  Inner => StringBox::Ptr => StringBox", forward declaration alone won't solve

[05:27:56.0487] <ashcode>
 * So he told to get constructor crct lik dis , either using forward declare inner or with same type.I tried inner struct 

[05:29:27.0626] <ashcode>
Okay!! i ll try with another method then, by using same old type 

[05:29:43.0447] <arai>
or maybe it was about forward declaration of something else than `Inner`

[05:30:13.0683] <ashcode>
No he mentioned about Inner only clearly

[05:31:14.0199] <ashcode>
> <@ashcode:mozilla.org> ```
> One thing might be to save your work and try to start from scratch just adding a cache_ field (with same type as the other one, or maybe the Inner stuff we talked about the other day) and see if you can get the StringBox constructor right, but feeding in the correct argument from getOrCreate
> ```

what does- ''but feeding in the correct argument from getOrCreate'' mean? here

[05:32:08.0920] <ashcode>
https://searchfox.org/mozilla-central/source/js/src/vm/SharedImmutableStringsCache.h#112, there is the declaration of getOrCreate

[05:37:39.0249] <arai>
`StringBox` is created inside `getOrCreate`, right?

[05:38:03.0289] <arai>
I mean, `StringBox` constructor is called there?

[05:39:14.0647] <ashcode>
https://searchfox.org/mozilla-central/source/js/src/vm/SharedImmutableStringsCache.h#251- is the place where constructor of StringBox is called

[05:39:48.0625] <arai>
so, `StringBox::Create` is called by `getOrCreate`, right?

[05:40:49.0537] <arai>
in that case, it sounds like, `getOrCreate` has either parameter or local variable, that new `StringBox` constructor wants to receive?

[05:41:14.0860] <arai>
if so, pass that into `StringBox` constructor

[05:42:02.0804] <ashcode>
> <@arai:mozilla.org> so, `StringBox::Create` is called by `getOrCreate`, right?

yes

[05:42:32.0460] <ashcode>
Okay!

[05:42:43.0919] <ashcode>
 * Okay!:)

[05:42:53.0823] <ashcode>
 * Okay :)

[05:51:03.0247] <arai>
about `Inner` things, I wonder if you want `ExclusiveData<Inner*>`, or maybe just `Inner*` (just a guess tho).  in that way, you don't need the complete definition, and forward declaration works

[05:53:18.0014] <ashcode>
Idid that only ryt in my present diff, still i was getting the error .. was it due to no argument given to getOrCreate?

[05:53:31.0199] <ashcode>
 * Idid that only ryt in my present diff, still i was getting the incomplete tyep error .. was it due to no argument given to getOrCreate?

[05:54:15.0123] <ashcode>
 * Idid``` ExclusiveData<Inner*>```,  only ryt in my present diff, still i was getting the incomplete tyep error .. was it due to no argument given to getOrCreate?

[05:54:26.0475] <ashcode>
 * Idid` ExclusiveData<Inner*>`,  only in my present diff, still i was getting the incomplete tyep error .. was it due to no argument given to getOrCreate?

[05:54:32.0465] <arai>
if you get incomplete type error, it has nothing to do with function call

[05:55:18.0073] <arai>
(unless the function call introduces extra template instantiation)

[05:55:19.0287] <ashcode>
> <@ashcode:mozilla.org> https://paste.mozilla.org/c0Wc509Y- this is my error
> https://paste.mozilla.org/63X540TO-this is my diff file.
> https://bugzilla.mozilla.org/show_bug.cgi?id=1576885 -this is the bug i m trying to resolve
> I m trying to add cache_ field in SharedImmutableString::StringBox,I think the problem is in initialisation of the cache_ field.
>  i forward declared struct Inner still it is showing me Incomplete type error.

but here i was getting incomplete type error even after forward declaration of Inner

[05:56:17.0803] <arai>
yes, `ExclusiveData<Inner>` requires `Inner` to be complete

[05:56:52.0321] <arai>
forward declaration is often used when the type is referred by pointer.

[05:57:18.0286] <arai>
because pointer field doesn't require the type's size to be known

[05:58:01.0674] <arai>
so I wondered if `ExclusiveData<Inner*>` could be used (haven't looked into the details how the field is used)

[05:58:44.0441] <arai>
 * because pointer field doesn't require the type's size to be known (so, the type can be incomplete)

[06:01:35.0960] <ashcode>
okay! I ll look into it.. code is quite confusing.
I need field type to be   ExclusiveData<Inner*> type only for sure,.. i guess i have to find another way to declare cache_ pointer
If u need uses of the field-https://searchfox.org/mozilla-central/search?q=SharedImmutableString%3A%3ACache&path=&case=false&regexp=false

[06:02:13.0302] <ashcode>
> <@arai:mozilla.org> in that case, it sounds like, `getOrCreate` has either parameter or local variable, that new `StringBox` constructor wants to receive?

will dis still wrk if i use  ExclusiveData<Inner*> field type?

[06:03:57.0476] <arai>
if you use `ExclusiveData<Inner*>` for the field, you'll need to rewrite all occurrences of `ExclusiveData<Inner>` with it (otherwise they're not compatible

[06:04:21.0631] <arai>
but after that, I guess you can do the same thing for the parameter etc

[08:26:32.0201] <mshariff>
Are there any community specific questions that you would like me to answer in the application?

[08:27:48.0338] <ashwiniwankhede>
> <@mshariff:mozilla.org> Are there any community specific questions that you would like me to answer in the application?

I was also going to ask the same :)

[09:10:04.0606] <iain>
mshariff: ashwiniwankhede Nope, we don't have any community-specific questions

[09:10:58.0778] <ashwiniwankhede>
> <@iain:mozilla.org> mshariff: ashwiniwankhede Nope, we don't have any community-specific questions

Okay. Thanks a lot :)

[09:11:02.0219] <mshariff>
okay thank you.


2021-05-03
[00:25:58.0119] <ashwiniwankhede>
Hello!!
I was trying to make a commit but `moz-phab submit` is not proceeding further than this.

[00:31:29.0686] <ashwiniwankhede>
I am facing some network issues occasionally. Can it be because of that?

[00:36:56.0438] <arai>
the last message is printed here https://github.com/mozilla-conduit/review/blob/8fafd0e97d153a838a856218a9b8dc7ab37648b4/mozphab/commands/submit.py#L130-L131

[00:37:31.0786] <arai>
so, yeah, it looks like it's calling phabricator's API

[00:38:34.0623] <arai>
how long does it take for now?  also, does it happen once, or more?

[00:40:24.0531] <ashwiniwankhede>
well I tried around 12 hours back, it didn't work them. 
It seemed to be working a couple of days back and before that. 

[00:40:58.0711] <arai>
is the process still running?  or have you stopped it?

[00:41:38.0492] <ashwiniwankhede>
still running

[00:42:31.0433] <arai>
I think, you can stop it now.  it's before submitting the revisions

[00:42:50.0181] <arai>
then, try running it again to see if it was temporary issue

[00:43:25.0332] <ashwiniwankhede>
Okay. 

[00:44:31.0780] <ashwiniwankhede>
should I do `hg commit` again before trying to submit the revision. 

[00:44:37.0823] <arai>
no

[00:45:10.0747] <ashwiniwankhede>
Okay. 

[00:45:20.0477] <arai>
`hg commit` is a command to commit changes into your local repository.  and `moz-phab submit` is a command to submit the patch to phabricator server.  they're different steps

[00:47:02.0296] <ashwiniwankhede>
Okay. I did not know that and I did commit twice previously it submitted 2 revisions of the same bug. 

[00:47:58.0940] <arai>
if you've enabled `hg wip` command, you can see what would be submitted.  also, `moz-phab submit` shows what will be submitted.  so, try checking them

[00:49:16.0174] <ashwiniwankhede>
I abandoned one commit. But when I was trying to amend the commit there was a conflict of changesets and it was not able to submit the revision.

[00:49:54.0954] <arai>
does the problem persists now?  or is it already resolved?

[00:52:26.0145] <ashwiniwankhede>
> <@ashwiniwankhede:mozilla.org> I abandoned one commit. But when I was trying to amend the commit there was a conflict of changesets and it was not able to submit the revision.

It is not resolved  I was trying to submit the same patch I was trying to do here.

[00:53:09.0064] <arai>
if you need help, can you describe the details of the problem?

[00:54:21.0495] <wraitii>
Hello everyone, just to confirm: A pointer to an object stored in a PersistentRooted is safe (/ won't move in case of GC) ? So I can store a JSObject* to it

[00:57:13.0913] <arai>
wraitii: `PersistentRooted` prevents the pointed object from GCed, but the object itself can be moved by GC

[00:57:35.0431] <ashwiniwankhede>
> <@arai:mozilla.org> if you need help, can you describe the details of the problem?

I can use help but I don't have the exact command stored. I can only get the commands again when `moz-phab submit` work

[00:57:57.0150] <ashwiniwankhede>
`hg wip` gives this response

[00:59:05.0816] <wraitii>
arai: So I still need a JS::Heap around it to store a reference? And/or a JS::Handle ?

[00:59:14.0831] <wraitii>
https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/docs/GC%20Rooting%20Guide.md seems to suggest otherwise

[00:59:22.0897] <arai>
ashwiniwankhede: looks like you still have 2 changesets for bug 1520434

[00:59:24.0235] <botzilla>
https://bugzil.la/1520434 — ASSIGNED (ashwiniwankhede.aw) — Improve the error messages when creating unaligned typed arrays

[01:00:02.0936] <arai>
wraitii: you need `Handle` to point the object

[01:01:10.0677] <arai>
wraitii: iirc, `PersistentRooted<T>` is implicitly convertible to `Handle<T>`

[01:01:44.0859] <arai>
`Handle` points the object, and it's pointer is automatically updated when the object is moved by GC

[01:01:56.0474] <wraitii>
Right

[01:02:15.0836] <ashwiniwankhede>
> <@arai:mozilla.org> ashwiniwankhede: looks like you still have 2 changesets for bug 1520434

yes.

[01:02:35.0596] <arai>
ashwiniwankhede: so, you want fold them into one, right?

[01:02:43.0434] <arai>
 * ashwiniwankhede: so, you want to fold them into one, right?

[01:03:06.0212] <ashwiniwankhede>
@arai

[01:03:15.0572] <wraitii>
I have some code that stored a JSObject* to the realm's global object (itself a persistenRooted elsewhere), but that seems unsafe even though the global probably rarely moved. I'll just switch to a Handle

[01:03:24.0741] <ashwiniwankhede>
 * @arai yes

[01:03:59.0324] <wraitii>
(we're using a wrapper around JSAutoRealm to provide the JSContext* and a few other things)

[01:04:00.0837] <arai>
ashwiniwankhede: try histedit command  https://www.mercurial-scm.org/wiki/HisteditExtension

[01:04:18.0564] <arai>
ashwiniwankhede: there you can fold 2 changesets into one

[01:04:42.0717] <arai>
wraitii: how do you store the `JSObject*` into the global object, and what do you mean by "unsafe" ?

[01:05:01.0215] <wraitii>
No I store a JSObject* pointing to the global

[01:05:15.0673] <arai>
oh, sorry I misread

[01:05:20.0457] <wraitii>
By 'unsafe' I mean that the GC object can move, invalidating my pointer

[01:05:31.0694] <wraitii>
which I think might explain why I had weird crashes with incremental zone GC too

[01:05:44.0408] <arai>
where do you store the pointer?

[01:06:07.0592] <wraitii>
In a stack object, but a relatively long-lived one (basically a JSContext* wrapper)

[01:06:19.0008] <wraitii>
I don't think I can safely guarantee that GC won't happen in general

[01:06:46.0493] <arai>
yeah, basically, a raw pointer to GC object shouldn't live across GC

[01:07:02.0275] <arai>
if you want to store the pointer on stack, you'll want `Rooted<T>`

[01:07:29.0583] <wraitii>
That particular Object is a PersistentRooted elsewhere, so I'll just store a Handle

[01:07:38.0196] <ashwiniwankhede>
arai:  Okay, I will try to fold the 2 changesets.

[01:07:38.0681] <arai>
ah

[01:09:08.0462] <arai>
wraitii: ah, now I think I understand the situation.  yes, `Handle<T>` can be used for that purpose

[01:11:34.0798] <wraitii>
Yes that seems to be the conclusion. Thanks for clarifying

[01:11:42.0918] <arai>
:)

[02:31:54.0330] <ashwiniwankhede>
arai: I did amend my commit. Thanks a lot :)

[05:51:11.0317] <nbp>
https://news.uci.edu/2021/04/29/michael-franz-wins-acm-chuck-thacker-breakthrough-in-computing-award/
https://www.researchgate.net/publication/221137904_Tracing_for_web_30_Trace_compilation_for_the_next_generation_web_applications
https://www.researchgate.net/publication/220751959_Trace-based_Just-in-Time_Type_Specialization_for_Dynamic_Languages

[05:53:08.0475] <nbp>
For the context, one important thing to notice is the excessively high number of persons on the last paper. (just to mention how controversial this idea was at the time)

[08:39:20.0222] <yulia>
confession: Started work on bug 1311726, which is the underlying work for properly unlocking the module loader in workers and worklets. The goal will be to simplify adding a module to various environments, as well as restricting certain features like dynamic import or static import. This will also support eventual work on Cu.import (using the experimental work from last month to make sure it will be possible)

[08:39:22.0443] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[08:39:27.0848] <botzilla>
https://bugzil.la/1311726 — NEW (ystartsev) — Factor module loader out of nsScriptLoader

[08:43:54.0268] <mgaudet>
Spidermonkey.dev blog question: for adding a new post, with name and frontmatter: Do we just choose a date we think the post will be merged? or is there a system doing dates that I am unaware of?

[08:44:35.0320] <yulia>
I just added the time when i wrote the blogpost in the past... but hopefully there is a smarter idea?

[08:44:41.0822] <mgaudet>
¯\_(ツ)_/¯ 

[08:54:55.0728] <nbp>
I think jekyll has a way to disable blog posts based on their timestamp, however, this implies that you have to recompile, and I do not think this would work with github.

[09:11:28.0057] <mgaudet>
nbp: Yeah, turns out that's the default. You have to make sure that timestamp is in the past, else it won't render posts; I've added a documentation piece to that effect in my PR for my blog post

[11:05:17.0299] <evilpie>
Why would we need to export something that is only used by a private field in C++? https://bugzilla.mozilla.org/show_bug.cgi?id=1644600

[11:26:34.0198] <sfink>
If I remember correctly, I think an embedder source file that uses `JSStructuredCloneData` and has one go out of scope will call the destructor, which will call `~SharedArrayRawBufferRefs` because it's a regular field (even if private), and that function isn't linkable?

[11:26:42.0414] <sfink>
whatever happens made sense at the time...

[11:31:53.0094] <evilpie>
could we define the destructor in the header?

[11:33:00.0032] <sfink>
Yes, I think that would work. It would just call `releaseAll`, which we could mark as `JS_PUBLIC_API`

[11:33:17.0167] <sfink>
(maybe?)

[11:33:35.0434] <evilpie>
marking something in the js namespace as public is a bit weird

[11:34:57.0230] <sfink>
yes, but I'm not sure what the alternative is if we need *something* to call into private mozjs code. It seems there needs to be an exposed function somewhere in that path.

[11:36:34.0439] <sfink>
afaik, C++ doesn't provide what we really want, which is the ability to set the visibility of constructors/destructors separately.

[11:37:46.0693] <sfink>
or at least, I think that's what we want

[11:41:20.0197] <sfink>
ah yes, the error message posted 13 minutes ago confirms that the problem is what I described

[11:41:22.0482] <sfink>
(whew)

[11:47:50.0043] <evilpie>
I almost feel like we could just kill the class

[11:47:58.0683] <evilpie>
It doesn't seem provide a lot of value

[11:52:11.0075] <sfink>
which one, SharedArrayRawBufferRefs or JSStructuredCloneData?

[11:52:44.0599] <evilpie>
SharedArrayRawBufferRefs

[11:54:05.0421] <sfink>
the nearby `JSAutoStructuredCloneBuffer` provides no value whatsoever, so I wasn't sure ;-)

[11:55:41.0920] <sfink>
I guess another alternative would be to take `~JSStructuredCloneData` out of line. I don't *think* that should matter for performance.

[11:56:36.0013] <sfink>
that actually seems a lot more straightforward, unless I'm missing something

[11:57:08.0811] <sfink>
I mean, `~SharedArrayRawBufferRefs` is *already* forcing a function call, so inlining for perf seems really pointless

[13:43:10.0944] <sfink>
tcampbell: mgaudet: I just queued `./mach bootstrap --app=js` for landing in bug 1708048, though it does not set a default for debug/optimize because apparently that ain't the way things are done with bootstrap. Once it merges to central, we probably ought to update the get-started doc used for Outreachy to use it. It'll at least reduce the number of accidental browser builds, as well as accidental artifact mode bootstraps.

[13:43:18.0480] <botzilla>
https://bugzil.la/1708048 — ASSIGNED (sfink) — Add a bootstrap option for people working on SpiderMonkey (only)

[13:43:40.0333] <tcampbell>
\o/

[13:43:43.0783] <sfink>
I'm a little ambivalent as to whether we should update our spidermonkey docs to recommend it. We might just want the normal path to be requesting a browser bootstrap.

[13:43:45.0536] <tcampbell>
that is great

[13:44:09.0006] <sfink>
but note that I'm sitting on a patch that adds one additional package to `--app=js`: the readline development package.

[13:44:43.0970] <sfink>
I think we should at least recommend `bootstrap --app=browser` rather than asking people to pick from the confusing list.

[13:45:02.0085] <tcampbell>
yeah, that makes sense

[13:45:02.0396] <sfink>
I could add in the readline dev package to the browser bootstrap, I guess, even though it isn't used for a browser build

[13:45:34.0225] <tcampbell>
is readline-dev just for convenience of embedders, or does our shell regularly depend on it?

[13:46:06.0297] <sfink>
I haven't tested, but from past experience I'm pretty sure the shell is built without readline support if it's unavailable, and with it if it's there.

[13:46:22.0774] <sfink>
so it's a soft dependency

[13:46:39.0143] <tcampbell>
ah

[13:46:43.0492] <sfink>
come to think of it, I have no idea what the situation is on Windows

[13:47:09.0863] <tcampbell>
I don't think the embedding examples work on windows (or at least I don't think anyone tested it..)

[13:47:25.0264] <tcampbell>
so I don't think we need to worry about installing readline

[13:48:15.0144] <sfink>
hm, getting the examples to work on Windows would be a Good Thing

[13:48:27.0581] <sfink>
(one which I'm not going to work on, but a Good Thing nonetheless)

[13:48:48.0295] <tcampbell>
indeed. maybe once the other cases are smooth, I'll take a look

[13:49:12.0779] <tcampbell>
/me wonders if ptomato has "embedder" set as a keyword on this channel or just great timing

[13:50:15.0300] <tcampbell>
(We actually got a start on updating the examples for esr-next this time! https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/tree/wip-esr91 )

[13:51:00.0382] <ptomato>
just good timing

[13:51:11.0084] <ptomato>
although maybe I should!

[13:51:54.0825] <sfink>
ooh, that's a new one. My windows VM: "We couldn't complete the updates. Undoing changes. Don't turn off your computer."

[13:51:57.0947] <sfink>
wunnerful

[13:52:39.0073] <tcampbell>
.. and then you put the VM to sleep and leave this as a trick for future self

[13:52:44.0447] <tcampbell>
 * .. and then you put the VM to sleep and leave this as a trick for future sfink

[13:52:48.0783] <sfink>
heh

[13:53:01.0913] <tcampbell>
update stasis

[14:57:14.0339] <mgaudet>
confession: Dealt with fallout of Private fields landing. Returned to some stencil work with... iffy progress. 

[14:57:16.0763] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2021-05-04
[04:05:04.0267] <yulia>
wohoo

[04:05:17.0473] <yulia>
new logo is up :DD

[04:12:14.0915] <littledan>
Awesome!

[04:33:04.0803] <yulia>
I think we are ready with the website too

[05:03:27.0243] <jonco>
jandem: ping

[05:03:55.0747] <jandem>
almost there

[08:14:28.0890] <mgaudet>
confession: Posted my [much delayed Private Field implementation blog post](https://www.mgaudet.ca/technical/2021/5/4/implementing-private-fields-for-javascript) 

[08:16:06.0314] <sfink>
where is the document that outreachy people have been using for getting started? over in https://phabricator.services.mozilla.com/D113598 I'm trying to figure out how we had people building with `--disable-optimize`.

[08:19:05.0035] <mgaudet>
sfink: this is what we had been sending people https://docs.google.com/document/d/16tQqxYKXiwORe95UdlhGD2u8zDg3OH0UmSBMRy7F33U/preview

[08:19:16.0234] <mgaudet>
(and was linked on the project page I think( 

[08:19:19.0012] <mgaudet>
 * (and was linked on the project page I think) 

[08:20:07.0114] <sfink>
Huh. I see only `--enable-optimize` there, and that's the default.

[08:20:27.0502] <sfink>
I could ask the people it's happened to.

[08:42:53.0852] <iain>
I think our old read-the-docs build instructions suggested `--enable-debug --disable-optimize`, and Ted just changed it last week

[08:44:16.0080] <iain>
https://phabricator.services.mozilla.com/D113597

[08:45:51.0783] <Shankara Pailoor>
Hi! I have a couple of questions about the ArrayPushDense builtin. Is this the right room to ask?

[08:47:17.0148] <iain>
Shankara Pailoor: Yep!

[08:48:42.0991] <Shankara Pailoor>
Is it possible for the builtin to invoke a callback?

[08:49:22.0137] <Shankara Pailoor>
I ran an analysis which generated a path which might be spurious but I am not quite sure

[08:50:51.0795] <Shankara Pailoor>
ArrayPushDense->array_push->SetLengthProperty->SetProperty->NativeSetProperty->SetExistingProperty->CallSetter->InternalCall


[08:51:58.0921] <Shankara Pailoor>
I tried to construct some examples to trigger the path but I haven't so far

[08:52:36.0569] <Shankara Pailoor>
1) The object cannot be an array and 2) It cannot have the Indexed property. So I tried to create an object var v = {} and set v.__proto__ to be an array

[08:52:43.0991] <iain>
That's spurious, because the `length` property of an array is not configurable

[08:54:33.0957] <Shankara Pailoor>
oh I see

[08:54:55.0339] <Shankara Pailoor>
by not configurable do you mean it cannot be overridden?

[08:55:31.0306] <iain>
Yes. In particular it can't be replaced with a setter.

[08:55:34.0588] <Shankara Pailoor>
i'm a bit new to JS as well

[08:55:42.0536] <Shankara Pailoor>
oh i see

[08:56:37.0975] <iain>
If you try `Object.defineProperty([], "length", { set(x) {/*replacement code*/} })`, you'll get `TypeError: can't redefine non-configurable property "length"`

[08:57:51.0404] <Shankara Pailoor>
oh great! ty 

[08:58:40.0779] <iain>
More about property attributes [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)

[09:01:21.0317] <Shankara Pailoor>
One other question. Are all callbacks triggered by "CallJSNative"

[09:04:38.0779] <iain>
No. For example, calls made from JIT code won't go through `CallJSNative`

[09:05:55.0056] <Shankara Pailoor>
oh so could callbacks made through builtins not go through CallJSNative?

[09:08:54.0669] <iain>
Correct. Many builtins are implemented in self-hosted JS: for example, [Array#forEach](https://searchfox.org/mozilla-central/source/js/src/builtin/Array.js#197-226)

[09:09:55.0949] <evilpie>
And sometimes from JIT code we call specialized version via e.g. CallWithABI

[09:10:08.0036] <evilpie>
 * And sometimes from JIT code we call specialized version via e.g. `callWithABI`

[09:10:26.0567] <iain>
Or we just inline a builtin completely, like Function.call or Function.apply

[09:13:20.0351] <iain>
There's a big list of builtins that get special handling [here](https://searchfox.org/mozilla-central/rev/185ab5e4f4e01341e009cd4633d1275ffe4d4c8b/js/src/jit/CacheIR.cpp#8703)

[09:14:29.0901] <Shankara Pailoor>
oh i see thanks a lot

[09:15:33.0857] <Shankara Pailoor>
iain: regarding that call path I posted before is it true that length cannot be overriden for non-arrays

[09:16:38.0054] <Shankara Pailoor>
https://searchfox.org/mozilla-central/source/js/src/builtin/Array.cpp#2281

[09:16:58.0053] <iain>
[Here's a searchfox query](https://searchfox.org/mozilla-central/search?q=js_self_hosted_fn&path=&case=false&regexp=false) that I think should turn up most self-hosted builtins 

[09:17:24.0705] <iain>
Although you might also have to look for JS_SELF_HOSTED_SYM_FN; off the top of my head I don't know the difference

[09:23:23.0125] <Shankara Pailoor>
 * iain: regarding that call path I posted before is it true that length cannot be overriden for non-arrays?

[09:24:22.0291] <iain>
It is possible to call Array.push on non-arrays: for example, `Array.prototype.push({notAnArray: true}, pushedValue)`

[09:24:40.0923] <iain>
 * It is possible to call Array.push on non-arrays: for example, `Array.prototype.push.call({notAnArray: true}, pushedValue)`

[09:25:10.0554] <iain>
But non-arrays can't make it to ArrayPushDense

[09:25:54.0714] <iain>
Due to a long chain of logic that terminates [here](https://searchfox.org/mozilla-central/source/js/src/jit/CacheIR.cpp#5147-5148)

[09:27:04.0248] <Shankara Pailoor>
oh ok. So if I do something like var p = {}, p.__proto__ = arr // arr is some array, and then call p.push(1)

[09:28:14.0728] <iain>
(If you wrap text in backticks (`) it won't eat up your underscores)

[09:28:35.0815] <Shankara Pailoor>
 * oh ok. So if I do something like `var p = {}, p.__proto__ = arr` // arr is some array, and then call p.push(1)

[09:28:40.0004] <Shankara Pailoor>
ty

[09:28:57.0889] <Shankara Pailoor>
that should trigger ArrayPushDense right

[09:29:05.0675] <iain>
Function.call lets you do that directly (see [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call))

[09:29:31.0554] <iain>
(For some reason chat keeps thinking that `Function.call` is a link despite my best efforts) 

[09:30:15.0442] <iain>
By "directly" I mean you don't have to change the prototype, you can just call the function with a different `this`

[09:31:26.0756] <Shankara Pailoor>
but if I do the former I find it goes through ArrayPushDense but it sounds like that is correct

[09:31:32.0381] <iain>
Try `var x = {length:0}; Array.prototype.push.call(x, 5)`

[09:33:00.0903] <iain>
Through `ArrayPushDense`, or through `js::array_push`?

[09:33:18.0936] <Shankara Pailoor>
through array_push

[09:33:21.0290] <Shankara Pailoor>
as well

[09:33:34.0735] <Shankara Pailoor>
wait let me double check

[09:34:02.0567] <Shankara Pailoor>
my apologies i think just through `js::array_push`

[09:37:28.0781] <iain>
Note that it *is* possible to call arbitrary code via array_push:
```
js> var x = {}
js> Object.defineProperty(x, "length", {set(x) { print("Length is " + x); this.length_ = x}, get() { return this.length_; }})
({})
js> Array.prototype.push.call(x,5)
Length is 1
1
```

[09:37:59.0837] <iain>
 * Note that it _is_ possible to call arbitrary code via `js::array_push`:
```
js> var x = {}
js> Object.defineProperty(x, "length", {set(x) { print("Length is " + x); this.length_ = x}, get() { return this.length_; }})
({})
js> Array.prototype.push.call(x,5)
Length is 1
1
```

[09:39:27.0554] <Shankara Pailoor>
do you know which MIR instruction this push would correspond to?

[09:40:03.0013] <iain>
It's not a path we optimize, so it would just be some sort of call

[09:40:50.0544] <Shankara Pailoor>
oh got it

[09:42:50.0765] <iain>
Yeah, just verified that it's an MCall

[09:43:39.0299] <iain>
Lowers to `CallNative`, because we know that it's going to call Array#push

[09:46:52.0360] <iain>
At this point it is probably worthwhile to ask: what is the big picture of what you're trying to accomplish here? There may be better approaches

[09:47:01.0522] <Shankara Pailoor>
thanks

[09:47:04.0734] <Shankara Pailoor>
sure

[09:49:06.0574] <Shankara Pailoor>
I remember reading about this IonMonkey vulnerability due to a bug in the alias analysis. I believe the bug was in the alias refinement of ArraySlice as the annotations said the only aliases that could be produced were between objects of a specific kind. however, that instruction actually invoked a callback which introduced an alias not captured by the annotations

[09:49:31.0524] <Shankara Pailoor>
I was trying to write an analysis to see if there were any other such cases

[09:50:02.0293] <Shankara Pailoor>
specifically, were there instructions which said the alias set could be refined but in fact could invoke a callback 

[09:50:18.0889] <Shankara Pailoor>
the array push dense was one possible case but with your help it turned out it isn't one

[09:51:52.0131] <Shankara Pailoor>
I'm a PL researcher at UT Austin

[09:51:54.0463] <tjr>
(I'm not a spidermonkey dev, but I am kind of curious what you're using to develop your analysis. Is this CodeQL?)

[09:52:06.0405] <Shankara Pailoor>
no LLVM

[09:53:14.0171] <iain>
If it were easy to write a static analysis for that, we would probably have already done so 😛

[09:53:33.0191] <iain>
We did add runtime assertions, though: https://searchfox.org/mozilla-central/source/js/src/jit/CodeGenerator.cpp#328-345

[09:55:01.0847] <iain>
The default alias set aliases everything. In debug builds, if instructions have a non-default alias set but call into C++, then we set a flag saying that we don't expect user code to be invoked, and clear the flag when the call returns

[09:56:06.0821] <iain>
(Technically there are two ways of calling into C++, but one of them (callWithABI) is already not allowed to call arbitrary JS, so we only have to protect the latter (callVM))

[09:56:26.0820] <tjr>
Right on. Good luck, and please do be aware of our [Static Analysis Bounty](https://blog.mozilla.org/attack-and-defense/2019/11/14/adding-codeql-and-clang-to-our-bug-bounty-program/) =)

[09:57:23.0738] <Shankara Pailoor>
tjr: thanks!

[09:59:04.0812] <Shankara Pailoor>
iain: Right now I'm just seeing if there are other instructions which have a similar kind of vulnerability to the ArraySlice case. In that case, the call back was invoked from CallSelfHostedFunction (which eventually calls CallJSNative)

[09:59:44.0957] <Shankara Pailoor>
that's why I thought CallJSNative was the entry point to calling user defined callbacks

[10:02:34.0113] <Shankara Pailoor>
Were there similar bugs you encountered?

[10:08:29.0980] <iain>
I believe we turned up some non-exploitable weirdness in bug 1607670

[10:08:35.0103] <botzilla>
https://bugzil.la/1607670 — RESOLVED (jandem) — Figure out what to do with CreateThis

[12:21:36.0738] <mgaudet>
I have a vague recollection that there's a process for getting added to release notes these days. Anyone know what I'm half-remembering? 

[12:30:45.0916] <sfink>
I have a similarly vague recollection. I can't find anything in my email search. I suggest asking one of the rotating release owners like RyanVM.

[12:34:26.0392] <evilpie>
for the developers release notes dev-doc-needed should be enough

[12:35:03.0504] <evilpie>
the "real" release notes have a tracking flag called relnote-firefox

[12:35:19.0624] <evilpie>
 * for the developers release notes *the keyword* dev-doc-needed should be enough

[12:36:36.0450] <mgaudet>
Ahh- ok. So you've taken care of that for me for fields and methods. Thanks evilpie !


2021-05-05
[02:42:12.0608] <Ms2ger>
mgaudet: enjoying reading your blog post; just noticed one bug:
```js
let obj3 = {}; 
let proxy = new Proxy(obj3, handler); 
new Stamper(proxy)

Stamper.getX(proxy) // => "stamped"
Stamper.getX(foo)   // TypeError, private field is stamped 
                    // onto the Proxy Not the target!
```
`foo` should be `obj3`, I think

[06:09:21.0264] <mgaudet>
Ms2ger: Thanks! Fixed on my copy, and will submit fix to spidermonkey.dev too :) 

[06:10:42.0117] <evilpie>
mgaudet: great post. just finished reading it as well

[07:33:30.0343] <mgaudet>
Thanks! I enjoyed writing that one

[08:47:33.0767] <jonco>
sfink: ping

[08:47:39.0578] <sfink>
yes, attempting to get there

[08:54:35.0046] <yury>
/me is requesting permission to land random stuff (mostly wasm) to the spidermonkey-embedding-examples repo

[08:59:25.0971] <ptomato>
yury: I saw it and I think it's good, but I think someone who has actually done this should ack it :-)

[09:01:11.0941] <yury>
"ack" as from spidermonkey-embedding-examples maintainers or JS/Wasm engine team?

[09:03:51.0202] <ptomato>
from spidermonkey-embedding-examples maintainers

[09:04:11.0555] <ptomato>
but if no-one is available to do that right now, then I feel it's OK to land it

[09:15:39.0199] <sagu>
I am getting a lot of ```error: undefined hidden symbol ``` which are refering to encoding_mem when linking with libjs_static

[09:17:39.0480] <sagu>
Using mozjs 88

[09:21:24.0466] <arai>
`encoding_mem_convert_latin1_to_utf16` or similar?

[09:26:39.0782] <sfink>
are you using --disable-jemalloc?

[09:40:45.0937] <sagu>
> <@sfink:mozilla.org> are you using --disable-jemalloc?

yes

[09:41:01.0937] <sagu>
> <@arai:mozilla.org> `encoding_mem_convert_latin1_to_utf16` or similar?

also this

[09:41:19.0164] <sagu>
similar to https://bugzilla.mozilla.org/show_bug.cgi?id=1588340

[09:41:32.0065] <sagu>
but it does not fix

[09:42:20.0972] <yulia>
we just went live with the site: https://spidermonkey.dev/

[09:45:08.0771] <tcampbell>
yury: I gave you permission to the repo

[09:45:14.0101] <tcampbell>
 * yury: I gave you permission to the examples repo

[09:45:46.0554] <tcampbell>
there is the default esr78 branch, and a wip-esr91 branch that we worked on last week

[09:46:14.0749] <yury>
/me is interested in wip-esr91 

[09:47:32.0770] <tcampbell>
great, can basically do whatever you want there :)

[09:47:51.0811] <tcampbell>
this is a best-effort type situation rather than any particular rules :)

[09:49:24.0160] <ptomato>
I would at some point like to get CI working on that repo, so that we can build the main branch against the current ESR and ensure all the examples compile :-)

[09:50:09.0677] <tcampbell>
ptomato: with the esr91 stuff, we've been updating comments to describe using `./mach build` even for embedding

[09:50:45.0488] <tcampbell>
the configure stuff still works, but generally the team has moved away from using directly so there might eventually be surprises in the future

[09:51:12.0090] <tcampbell>
just an FYI

[09:51:52.0452] <arai>
sagu: can you share the exact output of the error?  in which step it happens?

[09:52:58.0907] <sagu>
arai: It happens when compiling my code with -ljs_static

[10:07:07.0443] <arai>
Can you pastebin the output of the compilation?  https://paste.mozilla.org/

[10:16:20.0999] <sfink>
ptomato: I was thinking along those lines too. It would be nice to have CI on both sides: a periodic tier 3 taskcluster job that runs lots of changes against a manually updated examples checkout, and whatever the github CI is testing every examples change against a manually updated mozjs.

[10:16:59.0283] <sfink>
but we'd need to do it in a way that we'd actually pay attention to and notice when the taskcluster job breaks

[10:17:20.0895] <sfink>
which means perhaps not doing a tier 3 job at all, but loading it onto the existing SM(pkg) job

[10:17:43.0776] <sfink>
and I don't know anything about github CI

[10:18:18.0116] <ptomato>
got it. I think that would be quite useful to help update things bit by bit instead of everything at once just before the ESR drops

[10:18:42.0168] <ptomato>
(I don't know that much about github CI either, but I do know travis and gitlab CI, I assume it transfers)

[10:20:02.0784] <ptomato>
fwiw it still sounds useful to have CI on the spidermonkey-embedding-examples repo even if there's no taskcluster job, since it is best-effort, after all; that should just help to reduce the needed effort a bit

[10:20:58.0083] <sfink>
the taskcluster side is a little tricky, because I suspect we don't want people to be backed out, or otherwise on the hook, if a spidermonkey change breaks an example. But it would be nice to know what small set of changes broke something.

[10:21:04.0596] <sfink>
yeah, agreed

[10:22:56.0169] <sfink>
maybe the best of all worlds for the taskcluster side would be for the SM(pkg) job to test what it does now, but additionally test against the examples repo, and post something (an issue?) with information about any failures detected without making the SM(pkg) job fail.

[10:23:15.0079] <ptomato>
that's some next-level automation 😃

[10:23:40.0501] <sfink>
I'm thinking about the taskcluster side more because it's what I understand, not because it's necessarily the right place to solve the problem ;-)

[10:23:47.0181] <tcampbell>
CI on github side probably is sufficient for most purposes

[10:24:30.0875] <sfink>
yeah, probably

[10:24:39.0413] <tcampbell>
against the esr-latest pkg build

[10:25:09.0338] <tcampbell>
oh wait, we said against nightly, oops

[10:25:25.0005] <tcampbell>
maybe beta is a stable target?

[10:25:36.0827] <ptomato>
I'd suggest both, actually; one for the current ESR branch, and one for the esr-next branch

[10:25:43.0973] <tcampbell>
/me is just saying giberish

[10:32:19.0232] <sfink>
there's a base level of being able to know whether things are broken or not and then manually diving in and figuring out what to fix. But beyond that, I'm thinking about the size of the gap between somebody landing something to SM that breaks something and discovering that it's broken. Small gap => the person best suited to fixing something knows enough to act before it's left their head. Large gap => we're depending on the occasional attention of people who care, which means it's heavily based on how much stuff is going on.

[10:33:05.0084] <sfink>
modulo not wanting to impose this on everyone, so some breakages *have* to be scooped up after the fact because we don't want to require all SM developers to have to care about / be on the hook for this stuff

[10:33:22.0893] <sfink>
but anyway, now I'm rambling. I'll shut up until I have some time to actually do something here.

[10:33:33.0429] <tcampbell>
I'd just want to avoid too short a cycle, because backouts of m-c might need backouts of embedding example if there is a rename

[10:33:53.0854] <sfink>
heh, that's a good point too

[10:39:58.0184] <nbp>
> <@sfink:mozilla.org> and I don't know anything about github CI

You can have a brief look at smooshmonkey: https://github.com/mozilla-spidermonkey/jsparagus/tree/master/.github/workflows

[10:42:10.0147] <sfink>
heh, nice. My conclusion from that: once we decide what we want, we just need to beg arai to do it. 😀

[10:42:10.0603] <nbp>
To make it short, this is a way to describe steps to be executed on a VM.

[10:42:58.0321] <sfink>
yeah, skimming them makes sense

[10:43:13.0976] <sfink>
but maybe I should clarify: at the moment, I don't *want* to know anything about github CI.

[10:43:18.0245] <sfink>
I will someday, I'm sure

[10:45:06.0640] <sfink>
and thanks for pointing me to those examples, since they give me a decent sense for what's possible

[10:45:32.0104] <arai>
/me reads backlog

[10:45:40.0482] <nbp>
Also, do we want to test embedding examples with different versions of SpiderMonkey?

[10:46:03.0241] <nbp>
> * <@arai:mozilla.org> reads backlog

be careful, some work might be waiting for you inside the backlog

[10:46:36.0857] <sfink>
it's at least mostly going to be one SM version per branch

[10:46:54.0128] <sfink>
but maybe there's a place where we test against multiple until we decide the breakage is hopeless, and fork off another branch

[10:47:00.0079] <nbp>
oh, so we would have one git branch per spidermonkey version?

[10:47:12.0365] <sfink>
esr version, yes

[10:47:18.0232] <sfink>
or at least, that's what's happening now

[10:52:00.0841] <tcampbell>
nbp: is that the right description for the jsparagus repo? I wasn't should what to put there

[10:52:57.0895] <nbp>
tcampbell: the one quoted by Matrix sounds good.

[10:54:07.0610] <nbp>
There is a lot of plumbing which is not accounted by the term parser-generator but this is correct.

[10:55:23.0880] <tcampbell>
true

[12:46:40.0619] <iain>
Stupid question: what is the incantation to make `./mach mozregression --app jsshell` run a testcase, instead of just opening a shell? It seems to be ignoring `--arg` completely

[12:50:08.0952] <tcampbell>
`./mach mozregression` is a thing? 😮

[12:51:03.0819] <iain>
It's a wrapper around mozregression

[12:51:28.0541] <tcampbell>
I guess I normally run mozregression on windows

[12:52:25.0799] <tcampbell>
support just might be missing and you might need to fix it

[13:00:32.0837] <iain>
What do people normally do for bisections?

[13:01:24.0600] <mgaudet>
hg bisect, build, and test the few times I've had to. can't we load a test case from the shell somehow though, to avoid that somehow?

[13:01:25.0407] <tcampbell>
mostly let the fuzzing bot do it for me.. =\

[13:01:43.0122] <mgaudet>
like `load('foo.js')` or somesuch?

[13:11:45.0564] <iain>
Oh, `load` is a good suggestion

[13:11:48.0165] <iain>
That works well enough

[13:39:24.0600] <mconca>
Has anyone heard from Bocoup what's up with https://test262.report ?  It no longer loads (connection timeout)

[13:39:57.0227] <yulia>
not yet... we noticed it at tc39 as well

[13:42:39.0553] <yulia>
I'll see if we can get an update

[14:13:59.0478] <yulia>
mconca: for now you can use bakkot's runner: https://bakkot.github.io/test262-web-runner/

[14:14:05.0042] <yulia>
you will need to load the recent tests: 

[14:14:19.0215] <yulia>
https://api.github.com/repos/tc39/test262/zipball

[14:14:42.0775] <mconca>
yulia: thanks

[14:45:27.0563] <iain>
confession: Spent the better part of a day convincing myself that, yes, our baseline ICs for GetElemSuper really have been silently broken for three years (bug 1709328)

[14:45:29.0831] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:45:30.0997] <botzilla>
https://bugzil.la/1709328 — NEW (nobody) — Assertion failure: cx_->hadNondeterministicException(), at jit/WarpOracle.cpp:190

[15:05:58.0701] <mgaudet>
confession: Attempting to improve the situation for devtools + private fields / methods; it's not in great shape... but I might be able to sidestep the worst of it if I can figure out how to never lazy compile in Debugger.frame.eval; tomorrow tho

[15:43:45.0923] <sfink>
heh. Bug 1709328 is pretty awesome. I wonder if it would be possible to write a test that says that if an IC never succeeds during a full run of our test suite, then there's something wrong.

[15:47:40.0084] <iain>
Setting aside questions about DOM-related ICs, etc, that are only attached in the browser, it's also really hard to enumerate ICs at all, because we generate CacheIR dynamically

[15:49:52.0413] <iain>
And this CacheIR sequence does succeed frequently, because it's the same CacheIR we would use for a GetPropSuper (but with a different CacheKind)

[16:01:54.0819] <sfink>
ah

[16:04:28.0800] <iain>
I feel like it's the sort of thing that we should be able to detect by seeing a suspicious orange blotch *somewhere* on a code coverage report, but I'll admit that I can't figure out where

[16:11:48.0262] <sfink>
not that we check for mysterious orange blots on the C++ reports that are easy to generate

[16:41:30.0021] <iain>
Maybe that's a good collective task for the next work week

[16:42:08.0510] <iain>
Scan through searchfox looking for code that never runs to see if anything stands out as weird

[16:42:44.0344] <iain>
Or "this code is obscure and scary, and if it also never runs then we should *definitely* delete it"

[16:46:03.0906] <sfink>
this is a tricky way to sneak in OOM handling removal, isn't it? :P

[16:46:45.0778] <iain>
Not intentionally, but I will not object :P


2021-05-06
[00:36:57.0427] <sagu>
arai: It worked on GitHub actions so its probably autoconf fault.

[00:38:00.0810] <sagu>
I can do GitHub CI, as I already do it for servo/mozjs

[02:05:33.0926] <sagu>
 * I can do GitHub CI, as I already have do it for servo/mozjs

[02:38:23.0111] <sagu>
> <@sagu:mozilla.org> I can do GitHub CI, as I already have do it for servo/mozjs

https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/pull/35

[03:27:08.0966] <Redfire>
I'm... not sure what I think about the new logo

[03:59:36.0612] <yulia>
Anything in particular? Colour? shape?

[04:05:53.0828] <Ms2ger>
Monkey?

[04:06:19.0005] <yulia>
Monkey is staying

[04:06:45.0268] <Ms2ger>
Alright then

[04:06:45.0898] <yulia>
 * Monkey is staying :P

[04:06:59.0503] <yulia>
jokes aside, open to feedback

[04:07:01.0529] <Ms2ger>
 * Alright then :P

[04:07:17.0362] <yulia>
we were iterating on it or a few months and quite like the general shape -- the colour is still up in the air though

[04:07:35.0789] <yulia>
there is a hidden "JS" in the logo which is nice

[04:07:55.0767] <sagu>
yulia: Whenever i heard SpiderMonkey I always imagine green letters.

[04:08:11.0148] <sagu>
so maybe green background color

[04:08:30.0722] <sagu>
light green like in bugzilla

[04:08:55.0830] <yulia>
interesting!

[04:09:08.0357] <yulia>
so, caroline made a really nice colour generator for the site

[04:09:16.0052] <yulia>
it needs to be updated still but...

[04:09:58.0313] <sagu>
Caroline, No

[04:10:00.0855] <yulia>
once it is back up you can try generating your own colors

[04:10:11.0726] <yulia>
and we can see some other ideas

[04:10:39.0541] <yulia>
you can also do it manually in the devtools -- the logo colour is css controlled

[04:11:10.0767] <yulia>
I am usually viewing the light mode version, so black and white -- i think that is pretty uncontroversial and also a bit boring

[04:15:51.0822] <yulia>
we also have project specific variations on the logo, so for cachemonkey,warpmonkey etc... those will probably come up later

[04:46:12.0927] <sagu>
https://github.com/sagudev/spidermonkey-embedding-examples/runs/2516963756?check_suite_focus=true

[04:46:36.0870] <sagu>
```2021-05-06T10:07:05.5818188Z /home/runner/work/spidermonkey-embedding-examples/spidermonkey-embedding-examples/_build/meson-private/tmp7di0llt2/output.exe: error while loading shared libraries: libmozjs-78.so: cannot open shared object file: No such file or directory```

[05:54:02.0921] <tcampbell>
sagu: that probably needs LD_LIBRARY_PATH set

[08:05:59.0658] <ashwiniwankhede>
Hello.

[08:06:04.0481] <ashwiniwankhede>
I was trying to rebase a commit and this window poped up, I see it compares the conflicting changes but I am not sure how do I operate the window. 

[08:09:13.0766] <nbp>
ashwiniwankhede: One of the panel might be editable. One version if before, then you got 2 versions of after, yours and what got extracted from others modifications.

[08:10:08.0503] <nbp>
ashwiniwankhede: Your goal is to apply changes such that you carry both your modifications as well as others modifications, as the tool was unable to infer the changes by itself.

[08:10:26.0525] <nbp>
 * ashwiniwankhede: One of the panel might be editable. One version is before, then you got 2 versions of after, yours and what got extracted from others modifications.

[08:20:09.0906] <iain>
ashwiniwankhede: kdiff3 has a user manual here: http://kdiff3.sourceforge.net/

[08:20:41.0085] <iain>
I've never used it myself, but it looks like the screenshot shows an editable area at the bottom ("Output")

[08:21:38.0906] <iain>
So it's showing you three versions of the code: the version before anybody touched it (base), the version with your changes (local), and the version with the conflicting changes (other)

[08:24:26.0471] <iain>
And I *think* that the final result goes at the bottom

[08:24:49.0823] <iain>
After you've merged, you can always do `hg diff` to see what the final result of your merge is, and make sure that there's nothing there you don't expect

[08:25:03.0827] <ashwiniwankhede>
Okay. 

[08:27:14.0936] <ashwiniwankhede>
Just to be sure what I did was. I did commit my changes first(without rebase). Then I used the commands `hg pull` and `hg up central` and then I used `$ hg rebase -s  646915:6f8210b9e24b` 
 646915:6f8210b9e24b being the changeset I saw when I did `hg parent`

[08:30:02.0243] <iain>
Yeah, that seems correct

[08:32:44.0659] <iain>
ashwiniwankhede: I believe [this is the change](https://hg.mozilla.org/mozilla-central/rev/c85486b5c6ba261d009b92030646b45f3bec1bcb#l2.80) that you're colliding with, if that helps you to figure out what the result should look like

[08:34:32.0196] <mshariff>
> <@ashwiniwankhede:mozilla.org> I was trying to rebase a commit and this window poped up, I see it compares the conflicting changes but I am not sure how do I operate the window.

I came accross this before but not an expert. The middle panel shows the final output. You can take some code from left or right panel depending on which you would like to choose and add it in the middle. I think in the ```Edit``` or ```Merge``` option it will show you from which part of the panel you would like to add or edit

[08:38:18.0278] <mshariff>
But be careful with the option that says combine the left with local or right with local. Because it will add the code to the middle panel along with the changes whhich you haven't made. So it will be a trouble again

[08:38:42.0747] <mshariff>
 * But be careful with the option that says combine the left with local or right with local. Because it will add the code from either side to the middle panel along with the changes whhich you haven't made. So it will be a trouble again

[08:42:43.0484] <ashwiniwankhede>
Ohh Okay. Thanks a lot everyone. 

[08:57:12.0758] <mgaudet>
sagu: neat project https://github.com/sagudev/spidershim :D 

[08:58:37.0166] <sagu>
mgaudet: just playing around

[08:58:50.0763] <sagu>
taken from spidernode

[08:59:03.0425] <sagu>
which I once also work on

[08:59:07.0052] <mgaudet>
Still, it's a neat exploration :) 

[08:59:09.0982] <sagu>
try to work on

[09:59:49.0980] <evilpie>
iain: interesting bug

[10:00:05.0549] <evilpie>
did we introduce this bug before cacheir?

[10:00:55.0332] <evilpie>
even asserting the generated cacheir wouldn't have helped I think, because we could still always bail

[10:00:59.0216] <evilpie>
but might be a good step

[10:06:46.0304] <iain>
evilpie: No, it was introduced in bug 1472211 when we changed the evaluation order of GetElemSuper

[10:06:48.0047] <botzilla>
https://bugzil.la/1472211 — RESOLVED (anba) — Update SuperProperty evaluation semantics per spec PR

[10:07:06.0993] <iain>
And we do have tests that generate the CacheIR and then bail

[10:24:21.0150] <sagu>
> <@tcampbell:mozilla.org> sagu: that probably needs LD_LIBRARY_PATH set

Yay that worked!

[10:25:32.0688] <sagu>
I think PR is ready now.

[10:29:34.0095] <sagu>
And for esr 90 I am thinking of checking out from mozilla-beta, and latter from its repo (mozilla-esr90). So next branc can always be on mozilla-beta

[10:30:10.0894] <sagu>
 * And for esr 90 I am thinking of checking out from mozilla-beta, and latter from its repo (mozilla-esr90). So next branch can always be on mozilla-beta

[11:36:10.0149] <tcampbell>
sagu: I've merged it and am just letting in run now. This is great 😃

[11:37:18.0648] <tcampbell>
I'm wondering about running the "hello" example too as a smoke-test

[13:16:54.0401] <a_tom>
Hello, I've never contributed before but while looking at the code on the web interface, I noticed at least to class that can easily be changed without changing their API to use a bit less memory (at the cost of a slightly more complex implementation I guess). Would that be something that you would welcome? If so how would I go around to measure memory usage (to see if it has any impact)?

[13:20:19.0090] <mgaudet>
a_tom: Hey :) Which web-interface are we talking about here?

[13:26:00.0895] <tcampbell>
(probably searchfox)

[13:27:33.0797] <mgaudet>
(The answer is quite possibly yes tho, you can run it past us here first tho. Measuring memory usage is a bit tricky) 

[13:27:37.0762] <tcampbell>
a_tom It generally would depend on how common instances of the type are. If you are just curious to go through the workflow and see memory impact, these are the guidelines I pay attention to for memory at the moment. https://wiki.mozilla.org/Project_Fission/Memory

[13:28:07.0486] <tcampbell>
It involves building firefox and using the `./mach awsy-test testing/awsy/awsy/test_base_memory_usage.py` command mentioned.

[13:28:40.0717] <tcampbell>
What classes were you looking at?

[13:30:01.0903] <tcampbell>
Before testing memory, it would make sense to start with building shell and running "jit-tests". See the build and test links on spidermonkey.dev

[13:31:00.0924] <a_tom>
Yes, I was looking at searchfox

[13:33:34.0544] <a_tom>
I was looking at `ShapeProperty` (from 8 bytes to 4 but probably not a big impact as `ShapePropertyWithKey` would still be 16 bytes) and `ShapeIC` (from 16 bytes to 8)

[13:35:07.0907] <tcampbell>
By coincidence that code _just_ being rewritten as https://bugzilla.mozilla.org/show_bug.cgi?id=reshape

[13:35:50.0867] <evilpie>
`ShapeProperty` is the new thing

[13:37:16.0496] <evilpie>
but this is mostly used temporarily on the stack I think

[13:37:29.0353] <tcampbell>
ah

[13:39:00.0846] <tcampbell>
yeah, if it is on stack already, then packing the attr in slot is probably counter productive

[13:39:59.0088] <a_tom>
Yeah, I'll trust you on that as I have zero experience

[13:40:37.0300] <tcampbell>
It is a good thought if it were allocated in quantity on the heap

[13:40:49.0564] <tcampbell>
And in those cases we do often do those sorts of tricks

[13:42:01.0385] <mgaudet>
a_tom: You just proposing a field-reording to remove padding? 

[13:42:40.0840] <mgaudet>
a_tom: We'd likely be interested in a patch still; a good way to onboard yourself to contributing more to SM

[13:42:48.0827] <tcampbell>
bitfield-packing I think

[13:43:36.0955] <tcampbell>
(I don't have any starter bugs on hand, sorry)

[13:45:45.0991] <a_tom>
Packing indeed, reuing the high 8 bits of slot_ to store attrs- because slot- is limited to 2^24 - 1

[13:46:52.0892] <tcampbell>
sfink: I have build questions in #i18n:mozilla.org 

[13:47:24.0119] <sfink>
tcampbell: and now you're reflecting on your life choices? good call

[13:47:41.0777] <a_tom>
And for `ShapeIC` my idea is to use the low 3 bits of the pointer to store `nextFreeIndex_` and not store `size_` at all as it is either 0 when the pointer is null or 7 otherwise

[13:47:44.0550] <sfink>
/me stops being a jerk and joins the channel

[14:47:43.0491] <mgaudet>
confession: Working on devtools access for private fields and methods. Fields is working, and methods is... progressing. Fields will probably go up for review, but methods may wait for a bit longer; much messier patch

[14:47:45.0580] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2021-05-07
[21:19:44.0058] <sagu>
> <@tcampbell:mozilla.org> I'm wondering about running the "hello" example too as a smoke-test

and/or printing mozjs version using `JS_GetImplementationVersion`

[21:25:02.0149] <sagu>
Why there is no real ´next´ branch

[21:26:23.0508] <sagu>
`next` branch could follow mozilla beta, and for esr just new branch from `next` branch

[21:26:41.0104] <sagu>
 * Why there is no real `next` branch

[22:48:59.0332] <ptomato>
yes, that might be a better way to do it — the current situation assumes that there is no `next` branch until someone starts working on porting the examples right before the esr drops

[00:44:22.0242] <jandem>
a_tom: we're overhauling ShapeIC and related code as part of the ReShape bug so I wouldn't spend too much time on it

[02:27:01.0931] <jandem>
jonco: in case you don't get email notifications from Discourse, there's a JSAPI [question](https://discourse.mozilla.org/t/how-to-implement-dynamic-module-import-in-an-embedding/79856) around dynamic module import)

[02:28:42.0254] <jandem>
 * jonco: (in case you don't get email notifications from Discourse, there's a JSAPI [question](https://discourse.mozilla.org/t/how-to-implement-dynamic-module-import-in-an-embedding/79856) around dynamic module import)

[02:29:48.0504] <jandem>
 * jonco: (in case you don't get email notifications from Discourse, there's a JSAPI [question](https://discourse.mozilla.org/t/how-to-implement-dynamic-module-import-in-an-embedding/79856) about dynamic module import)

[02:38:01.0410] <jonco>
jandem: oh thanks, I'll take a look

[03:24:07.0485] <annevk>
padenot: hey I read through https://github.com/w3c/webcodecs/issues/122 and I was wondering if any of the feedback there about rational numbers in media made it back to TC39 somehow

[03:25:26.0028] <annevk>
padenot: leaving a note in https://github.com/tc39/proposal-decimal/issues/6 might be worthwhile

[05:24:26.0994] <padenot>
sure I'll do that, thanks !

[06:21:18.0733] <padenot>
[done](https://github.com/tc39/proposal-decimal/issues/6#issuecomment-834379693), I've tried to explain the issue we face from a high level pov

[06:50:24.0827] <l11d>
I just encountered an assertion violation in spidermonkey (debug build); a release build would terminate execution via AutoEnterOOMUnsafeRegion.crash(""). its not necessary to check the "security relevant" box when filing this issue, correct?

[06:55:33.0485] <tcampbell>
l11d: if in doubt, filling as security makes sense. It is easy enough for them to get triaged to the right place

[06:55:56.0869] <l11d>
alright, thanks

[11:04:27.0986] <sfink>
confession: discovering that our GC statistics' reasons were Wrong, my patch while fixing some ends up making them overall more Wrong, and I need to figure out what would be closest to Right

[11:06:17.0287] <iain>
Is that why we were seeing so many self-hosted GCs?

[11:06:29.0969] <sfink>
no

[11:06:38.0867] <ptomato>
sfink: curious what was Wrong - I'm (slowly) trying to get memory statistics working in GNOME. do you have a bug number?

[11:06:39.0766] <sfink>
sadly, I think that's a separate thing

[11:07:16.0583] <sfink>
it's fallout from bug 1692308, but I don't have a separate bug

[11:07:18.0048] <botzilla>
https://bugzil.la/1692308 — RESOLVED (sfink) — Merge sGCTimer and sGCInterSliceRunner into a single sGCRunner

[11:07:41.0831] <sfink>
I'm trying to decide whether to change the reason logic first, or see if reverting to the previous behavior will enable landing that patch

[11:08:50.0804] <sfink>
but in brief, the reasons associated with individual slices were set depending on how both the slice is triggered and how the GC was triggered in the first place

[11:09:31.0654] <sfink>
oh, and most relevant to you -- this is all related to the Gecko embedding. Your embedding will get back whatever reasons it's passing in.

[11:11:59.0893] <sfink>
iain: also, this is almost entirely reasons for non-initial slices, and the telemetry problems are only looking at the overall GCMajor reasons (which I believe are the same as the first slice reasons.) So it's not as significant a thing as I made it sound.

[12:17:58.0817] <ptomato>
> <@sfink:mozilla.org> oh, and most relevant to you -- this is all related to the Gecko embedding. Your embedding will get back whatever reasons it's passing in.

ah, cool


2021-05-10
[07:36:37.0153] <dminor>
tcampbell: Thanks for all of the reviews on https://bugzilla.mozilla.org/show_bug.cgi?id=1701695 last week! Anba left `request changes` on two of the patches a while ago. I've addressed the issues and you've had another look at them since. I'd like to be able to land this soon since it's blocking other people on the i18n team. I really value Anba's reviews, but I'm not sure if they have availability to look at this again anytime soon. Any suggestions on the best way of handling this?

[07:37:31.0337] <tcampbell>
dminor: I think it is okay to go forward. We can always land more tweaks later.

[07:38:23.0011] <dminor>
Ok, thank you!

[07:38:28.0216] <tcampbell>
You addressed the issues raised.

[07:40:02.0021] <tcampbell>
 * You addressed the issues raised. (I did look over the feedback and the changes)

[10:14:21.0949] <yulia>
in case anyone wants to review a whole lotta text... https://github.com/mozilla-spidermonkey/spidermonkey.dev/pull/76

[10:25:39.0066] <tcampbell>
yulia: are the summaries directly from proposals? should I propose edits or leave them alone

[10:26:01.0346] <yulia>
they are done by me

[10:26:04.0315] <yulia>
for the most part

[10:26:07.0971] <yulia>
you can propose edits

[10:26:25.0682] <yulia>
some simple ones are copy/pasta'd

[10:27:00.0493] <tcampbell>
just minor word-salad fixes

[10:41:46.0331] <yulia>
thanks tedd

[10:41:54.0545] <yulia>
my brain is a bit mush right now

[10:41:58.0069] <yulia>
didn't notice those

[10:42:47.0531] <yulia>
 * thanks ted

[10:50:32.0475] <sfink>
I did a pass through too

[10:50:46.0831] <sfink>
(was waiting on a compile, was fortuitous timing)

[10:51:39.0805] <yulia>
sfink: you are amazing

[10:52:11.0639] <sfink>
that's a nice way of saying "anal retentive", thanks

[11:00:23.0801] <yulia>
i should clearly run vim with a spell checker

[11:00:32.0364] <yulia>
also this keyboard will be the end of me

[11:00:39.0623] <yulia>
i should always use my external one

[11:01:52.0608] <sfink>
meh. IMHO, the main thing is to be able to get stuff down. If fixing up typos gets in the way of that, it's not worth it.

[11:02:18.0257] <sfink>
though that reminds me that I really need to fix the C key on my external keyboard. It's registering about 60% of the time.

[11:03:46.0646] <tcampbell>
I'm getting progressively more worried about the declining number of firefox engineers with all the keys still working on their keyboards..

[11:06:08.0114] <sfink>
i dosn' aff my work a all, I don' know wha h big dal is.

[11:07:15.0993] <tcampbell>
the true origins of l33tspeak

[11:09:05.0447] <yulia>
sfink: https://github.com/mozilla-spidermonkey/spidermonkey.dev/pull/77

[11:09:17.0312] <yulia>
i think my main issue with the mac keyboard is my pinky starts to hurt

[11:09:26.0712] <yulia>
i am a very intense typist. 

[11:09:33.0889] <yulia>
_intensity increases_

[11:10:12.0417] <tcampbell>
compiler doesn't understand me; type louder

[11:10:21.0293] <yulia>
exactly

[11:10:33.0420] <tcampbell>
DO YOU SPEAK C++

[11:17:13.0719] <yulia>
sfink: ugh sry you have to +1 it again

[11:17:22.0744] <yulia>
the moudulos have been fixed though

[11:18:22.0680] <sfink>
r- I wanted the muddled noodles

[11:18:28.0337] <yulia>
:| why won't it let me mergggee

[11:18:31.0148] <yulia>
i just want to be freeee

[11:19:19.0455] <yulia>
that's it, github has decided its bad

[11:19:30.0588] <sfink>
do I need to comment with the r+?

[11:19:35.0375] <sfink>
I'm confused

[11:19:49.0795] <sfink>
oh, I don't have write access, I guess

[11:19:51.0887] <sfink>
so I don't count

[11:19:52.0592] <yulia>
idk... try again?

[11:19:54.0714] <yulia>
wat

[11:19:56.0499] <yulia>
no 

[11:21:54.0199] <sfink>
maybe tcampbell's review would unstick it?

[11:22:32.0479] <yulia>
there we go

[11:22:36.0308] <yulia>
yey, sending it to all

[11:22:36.0856] <tcampbell>
sfink: gave you website reviewer powers

[11:22:43.0766] <tcampbell>
.. try not to start any scandals

[11:22:58.0185] <tcampbell>
 * .. try not to start any (more) scandals (than usual)

[11:23:01.0008] <sfink>
that sounds like a challenge

[11:27:13.0601] <tcampbell>
"Local garbage connoisseur sets dumpster ablaze" 

[14:22:18.0260] <mgaudet>
 confession: Sent intent-to-ship for ergonomic brand checks after Ted kindly pointed out my local release calendar had drifted, giving us two more weeks before soft freeze than I had thought.

[14:22:26.0045] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[16:52:39.0518] <DerekNonGeneric>
that new blog post is soo informative <3 basically puts everything into context. Much appreciated!


2021-05-11
[02:47:24.0099] <dbezhetskov>
hi folks, recently I get this lint error - `WARNING: This file is uncovered` in my PR https://phabricator.services.mozilla.com/D113218#C3874724NL1

[02:47:29.0423] <dbezhetskov>
should I care about it?

[02:47:44.0058] <dbezhetskov>
 * should I care about it? or I should ignore it

[02:47:51.0436] <dbezhetskov>
 * should I care about it? or should I ignore it?

[02:50:40.0063] <jandem>
it's in an ICU file, probably code that isn't used in SpiderMonkey/Firefox. Should be fine to ignore it

[02:59:17.0743] <dbezhetskov>
> <@jandem:mozilla.org> it's in an ICU file, probably code that isn't used in SpiderMonkey/Firefox. Should be fine to ignore it

yep, ok, thanks

[04:16:44.0469] <yulia>
nice 98 across the board

[05:04:37.0736] <jonco>
jandem: ping

[05:05:08.0441] <Ms2ger>
What's up with those 2%? 🤔

[05:07:38.0590] <evilpie>
I checked and it's different stuff

[05:19:04.0809] <yulia>
also this is stage 3+, so it doesn't reflect purely spec compliance rather expected spec compliance

[05:30:08.0951] <l11d>
Ms2ger: maybe related to missing tail-call-optimization?

[05:49:58.0867] <tcampbell>
For example Intl.Segmenter is 156 tests and that is still work in progress for us (to get data table size down)

[08:08:12.0830] <mconca>
That is really nice.  Congrats to everyone who contributed to getting SpiderMonkey to this point.  

[09:37:35.0617] <nbp>
jandem: How can consecutive shapes share the same BaseShape?

[09:37:51.0134] <nbp>
(context: https://phabricator.services.mozilla.com/D114851)

[09:41:02.0964] <tcampbell>
there is just class,proto,realm left in a BaseShape, so consecutive shapes should be sharing them

[09:44:57.0722] <tcampbell>
https://searchfox.org/mozilla-central/source/js/src/vm/Shape.cpp#593

[09:52:58.0355] <nbp>
ok, so the common case would be that they are similar. So they would be different if one update the proto for example?

[10:16:42.0298] <tcampbell>
I think so? I'm not actually sure what changes when we update the proto anymore..

[10:18:04.0984] <jandem>
yeah, proto change is the only way

[10:18:59.0919] <nbp>
/me thinks about JIT-ing trace functions …

[10:27:17.0726] <iain>
Can we JIT them better than LLVM can optimize them?

[10:32:21.0278] <nbp>
iain: yes.

[10:34:04.0002] <nbp>
iain: if you look at the context from above, this loop will chase point of the shape tree, while we could simply bake calls toe the base-shape visit.

[10:34:18.0934] <nbp>
 * iain: if you look at the context from above, this loop will chase point of the shape tree, while we could simply bake calls to the base-shape visits.

[10:36:28.0470] <nbp>
 * iain: if you look at the context from above, this loop will chase pointers of the shape tree, while we could simply bake calls to the base-shape visits.

[10:44:10.0427] <jandem>
(the ReShape design should improve this too, just one Shape/BaseShape in that function, no loops. The CC can ignore the property information completely)

[10:50:27.0781] <sfink>
when is there more than one BaseShape in a Shape lineage?

[11:36:55.0090] <jandem>
when an object's prototype is mutated, we create a new last property shape with the new base shape

[11:39:40.0088] <sfink>
so then shape->base() != shape->previous()->base() ?

[11:42:26.0346] <sfink>
whoa... I always imagined that `shape->previous()` could be thought of as the shape with the last property chopped off.

[11:46:27.0198] <jandem>
the object flags are similar, see canRemoveLastProperty. With ReShape we can always remove the last property without a dictionary mode conversion 

[12:31:02.0841] <sfink>
jandem: so are those earlier `BaseShape`s actually reachable from a prototype-mutated leaf shape? As in, do we need to trace them at all for the cycle collector?

[12:35:16.0228] <jandem>
they're still reachable by the GC so I think it makes sense to trace them? But it is a good point 

[12:35:50.0887] <sfink>
yeah, I definitely wouldn't want to stop marking them, they're definitely reachable

[12:36:45.0861] <sfink>
I guess an accessor would be used, even if the prototype wouldn't be


2021-05-12
[21:21:08.0024] <leveryd>
is there example to visit tree using "ParseNodeVisitor" or its sub class?  i want to get the call function name.

```
class XssVisitor : public ParseNodeVisitor<XssVisitor> {
...
bool visitCallExpr(BinaryNode* pn){
 // how to get call function name here?
 printf("%s\n", "call expr");
 CallExpr = true;
 return ParseNodeVisitor::visitCallExpr(pn);
}
````

[22:54:45.0570] <leveryd>
 * is there document  to visit tree using "ParseNodeVisitor" or its sub class?  i want to get the call function name.
```
class XssVisitor : public ParseNodeVisitor<XssVisitor> {
...
bool visitCallExpr(BinaryNode* pn){
 // how to get call function name here?
 printf("%s\n", "call expr");
 CallExpr = true;
 return ParseNodeVisitor::visitCallExpr(pn);
}
```

[23:15:15.0657] <arai>
leveryd: there's basic document above the class  https://searchfox.org/mozilla-central/rev/6b099d836c882bc155d2ef285e0ad0ab9f5038f6/js/src/frontend/ParseNodeVisitor.h#20-51

[23:17:50.0468] <leveryd>
> leveryd: there's basic document above the class  https://searchfox.org/mozilla-central/rev/6b099d836c882bc155d2ef285e0ad0ab9f5038f6/js/src/frontend/ParseNodeVisitor.h#20-51

i have read it, but i can not get useful information about how to get "call function" name in above code.

[23:18:37.0755] <arai>
what do you mean by "call function name" ?

[23:21:07.0994] <leveryd>
Javascript code
```
alert(111);
funcname();
```

i want to know the function name such "alert" and "funcname".

[23:21:25.0388] <leveryd>
 * Javascript code
```
alert(111);
funcname();
```

i want to know the function name such as "alert" and "funcname".

[23:21:38.0492] <arai>
I see

[23:22:07.0937] <arai>
so, first, you need to define a method for call expression

[23:23:09.0961] <arai>
each method has "visit + ParseNodeKind" name

[23:23:15.0559] <arai>
https://searchfox.org/mozilla-central/rev/6b099d836c882bc155d2ef285e0ad0ab9f5038f6/js/src/frontend/ParseNodeVisitor.h#77-82

[23:23:43.0769] <arai>
each ParseNode kind is defined in ParseNode.h

[23:23:50.0127] <arai>
https://searchfox.org/mozilla-central/rev/27722db2f164add7047d7db03169966cb806e927/js/src/frontend/ParseNode.h#517

[23:23:50.0479] <leveryd>
yes, i just use "visitCallExpr". you can see my code above.

[23:24:14.0573] <arai>
oh

[23:24:21.0760] <arai>
okay

[23:24:32.0549] <arai>
then, in the method, you need to check if the callee is a name

[23:24:48.0272] <arai>
callee is `left` of `BinaryNode`

[23:24:51.0568] <leveryd>
yes, i have a blacklist.

[23:24:59.0252] <leveryd>
 * yes, i have a function name blacklist.

[23:25:32.0374] <arai>
if the callee is a identifier reference, it's `Name` node

[23:26:10.0209] <leveryd>
oh, i will try it later.

[23:26:15.0890] <arai>
so, `pn->left->is<NameNode>()` will be `true`

[23:26:47.0838] <arai>
`NameNode` is subclass of `ParseNode`

[23:26:59.0224] <arai>
https://searchfox.org/mozilla-central/rev/27722db2f164add7047d7db03169966cb806e927/js/src/frontend/ParseNode.h#880

[23:28:18.0577] <leveryd>
i see

[23:29:10.0648] <arai>
and it's `name()` method returns the actual text of the identifier

[23:29:44.0433] <arai>
in `TaggedParserAtomIndex` encoding, that is compilation unit local index for given string

[23:31:14.0703] <arai>
https://searchfox.org/mozilla-central/rev/27722db2f164add7047d7db03169966cb806e927/js/src/frontend/ParserAtom.h#59

[23:33:19.0515] <arai>
then, that's managed by `ParserAtomsTable`, in `ExtensibleCompilationStencil`

[23:35:06.0533] <arai>
then, currently there's no direct way to compare `TaggedParserAtomIndex` with arbitrary string

[23:35:48.0762] <arai>
simple way would be convert it into `UniqueChars` by `ParserAtomsTable::toNewUTF8CharsZ` and compare it with the arbitrary string

[23:54:57.0853] <leveryd>
> simple way would be convert it into `UniqueChars` by `ParserAtomsTable::toNewUTF8CharsZ` and compare it with the arbitrary string

which file define "UniqueChars" class?

[23:55:57.0740] <arai>
you can search for definition in searchfox

[23:55:59.0710] <arai>
https://searchfox.org/mozilla-central/search?q=UniqueChars&path=

[01:24:15.0967] <dbezhetskov>
hmm, is it possible to build SM without rust? I see that `--disable-rust` flag is gone, for what we are using rust in SM? arai 

[01:30:11.0187] <arai>
wasm maybe?

[01:36:19.0242] <dbezhetskov>
sorry for pushing, needs to investigate more into libjsrust :)

[02:53:51.0916] <nbp>
Don't we rely on rust for different encoding kinds?

[03:26:06.0858] <leveryd>
arai: am i wrong to call api? it print "debug1" and does not print "debug2". and the app has core dump.

```
bool visitCallExpr(BinaryNode* pn){
 if (pn->left()->is<NameNode>()!=true){
   return ParseNodeVisitor::visitCallExpr(pn);
 }

 js::LifoAlloc alloc(1024);
 ParserAtomsTable atomTable(cx->runtime(), alloc);
 printf("debug1\n");
 JS::UniqueChars output = atomTable.toNewUTF8CharsZ(cx, static_cast<NameNode*>(pn->left())->name());  // core dump here
 printf("debug2\n");
 
 return ParseNodeVisitor::visitCallExpr(pn);
}
```

[03:26:46.0005] <leveryd>
the complet code is on https://gist.github.com/leveryd/c2953eab188542e4baac0d7a99b1df14

[03:27:03.0844] <arai>
leveryd: you need to retrieve `ParserAtomsTable` instance from the current compilation

[03:27:18.0640] <arai>
otherwise it doesn't contain not-well-known atoms

[03:28:02.0694] <arai>
all strings (including names) encountered during parsing are accumulated into the `ParserAtomsTable` instance, and it assigns index for it

[03:29:50.0588] <arai>
where do you instantiate `XssVisitor`?

[03:29:54.0422] <leveryd>
i have no concept about "atoms" . how can i make `ParserAtomsTable` instance?

[03:30:04.0057] <arai>
no, you don't make

[03:30:12.0417] <leveryd>
 * i have no concept about "atoms" . how can i make `ParserAtomsTable` instance from the current compilation?

[03:30:12.0487] <arai>
it's already there, as long as it's during compilation

[03:32:40.0417] <arai>
atom is a string that's guaranteed to be unique.  so, the comparison between 2 atoms can be done by comparing pointer, or index here)

[03:32:42.0037] <arai>
 * atom is a string that's guaranteed to be unique.  so, the comparison between 2 atoms can be done by comparing pointer, or index here

[03:33:33.0137] <leveryd>
oh, i call XssVisitor::visit in "reflect_parse" function, so how can i get the `ParserAtomsTable` instance? 

[03:34:08.0572] <arai>
do you mean this C++ function? https://searchfox.org/mozilla-central/rev/27722db2f164add7047d7db03169966cb806e927/js/src/builtin/ReflectParse.cpp#3733

[03:34:35.0939] <leveryd>
yes

[03:35:03.0398] <arai>
it's here https://searchfox.org/mozilla-central/rev/27722db2f164add7047d7db03169966cb806e927/js/src/frontend/CompilationStencil.h#678

[03:35:24.0714] <arai>
so, `ExtensibleCompilationStencil` has that field, and `CompilationState` is a subclass of it

[03:35:41.0628] <arai>
and `reflect_parse` has `CompilationState` instance on the stack

[03:35:53.0258] <arai>
 * and `reflect_parse` has `CompilationState` instance on the stack (local variable)

[03:36:10.0170] <arai>
so, pass its pointer/reference to `XssVisitor`

[03:38:37.0174] <leveryd>
i see, i will try it later

[05:07:38.0653] <pavelp>
iain: i've registered new account - sploitem@gmail.com

[08:58:11.0425] <Marco Trevisan>
Hey! I have silly question: is there a way to get the owner JSContext from a JSObject? It doesn't seem the case unless it's saved on the private data, but just asking in case I'm missing something obvious.

[09:07:40.0235] <tcampbell>
JSObject -> Realm get's you reasonably close

[09:08:49.0374] <tcampbell>
the types of "owner JSContext" we encounter for objects are 1) process main-thread. 2) off-thread-parse realm. 3) worker main-thread

[09:09:03.0780] <tcampbell>
(the off-thread parse stuff is being phased out)

[09:09:50.0388] <tcampbell>
if you are already on main-thread, then there is really only the one JSContext

[09:10:43.0819] <tcampbell>
(so it probably depends on why you want a JSContext from an object and if there is actual a different level of abstraction you wnat)

[09:10:47.0686] <tcampbell>
 * (so it probably depends on why you want a JSContext from an object and if there is actual a different level of abstraction you want)

[09:11:41.0200] <nbp>
Marco Trevisan: Looking at functions signatures, I only found 2 functions which are retuning a JSContext*. Usually the JSContext is the thing you want to carry around everywhere.

[09:12:18.0696] <nbp>
 * Marco Trevisan: Looking at functions signatures [of our public API], I only found 2 functions which are retuning a JSContext*. Usually the JSContext is the thing you want to carry around everywhere.

[09:12:59.0361] <Marco Trevisan>
> <@nbp:mozilla.org> Marco Trevisan: Looking at functions signatures [of our public API], I only found 2 functions which are retuning a JSContext*. Usually the JSContext is the thing you want to carry around everywhere.

yeah, but in embedding we may not have the ability to carry it everywhere when using callbacks which don't have proper ability to destroy the data you passed... so ending up leaking

[09:13:39.0447] <Marco Trevisan>
so, I can save it around, but I was wondering if there was a way to avoid it but looks like it's not possible

[09:23:43.0179] <tcampbell>
Gecko stashes it away (maybe in TLS?) https://searchfox.org/mozilla-central/rev/27722db2f164add7047d7db03169966cb806e927/dom/script/ScriptSettings.cpp#284

[09:34:24.0514] <Marco Trevisan>
a nice danger namespace :-D

[09:37:50.0723] <tcampbell>
Gecko is full of `AutoJSAPI` calls to help it out, and under the covers is that danger method

[09:39:18.0073] <tcampbell>
SpiderMonkey has a TlsContext::Get() internally, but we don't expose it to embedders

[09:40:03.0788] <tcampbell>
(probably because we keep changing our mind on how JSContext and JS::Runtime are divided up or shared..)

[09:41:35.0434] <tcampbell>
Marco Trevisan: there is an assert you can use to _check_ if you got the right answer:  `JS_AbortIfWrongThread`

[09:41:38.0619] <tcampbell>
 * Marco Trevisan: there is an assert you can use to _check_ if you got the right answer:  `JS_AbortIfWrongThread(Cx)`

[09:41:40.0352] <tcampbell>
 * Marco Trevisan: there is an assert you can use to _check_ if you got the right answer:  `JS_AbortIfWrongThread(cx)`

[09:41:59.0906] <nbp>
Note, the TlsContext is only used internally for the JIT, to recover the JSContext* pointer without having to carry it as argument of every JIT-ed functions.

[09:42:20.0211] <Marco Trevisan>
> <@tcampbell:mozilla.org> Marco Trevisan: there is an assert you can use to _check_ if you got the right answer:  `JS_AbortIfWrongThread(cx)`

Yeah, well that's the point...

[09:42:55.0929] <Marco Trevisan>
we may get events happening on threads different from the one where the context is, and getting the owner context may be annoying

[09:43:34.0561] <tcampbell>
reading the object from the wrong thread will get you in trouble, generally

[09:44:34.0595] <nbp>
Our GC is not a concurrent GC, it will not support having a mutating thread different than the marking thread.

[09:45:19.0911] <Marco Trevisan>
yeah, indeed...

[09:45:43.0867] <Marco Trevisan>
getting thigs back in order may be complicated, but well i've options... I just wanted to see if I can avoided to save those pointer bytes.. :)

[10:12:45.0322] <yulia>
oh, tomorrow is a holiday?

[10:13:03.0364] <yulia>
(for germany)

[10:13:12.0425] <yulia>
hm... in case anyone needs me, i might be offline?

[10:14:08.0118] <yulia>
... it is a holiday

[10:17:03.0543] <nbp>
Same in France

[10:17:15.0248] <mgaudet>
confession: Trying to come up with hypotheses around Bug 1707979 and family... Nothing reasonable yet.

[10:17:17.0011] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[10:17:18.0279] <botzilla>
https://bugzil.la/1707979 — NEW (nobody) — Crash in [@ js::frontend::GeneralParser<T>::statementListItem]

[15:00:38.0150] <mgaudet>
confession: Early investigation on adding static class blocks; prototype parsing is mostly working, but BCE is totally off so far; doing this right is probably going to involve some fairly invasive refactoring in the parser to make all the class field stuff a little more uniform if possible


2021-05-13
[07:13:21.0118] <mgaudet>
Minidump Q: My best bet is to figure out a windows environment + Visual Studio, vs trying to figure out how to do various linux conversions? 

(This might be an interesting topic for a mini-session, where someone (*cough*ted*cough*?) walks us through looking at a minidump) 

[07:27:16.0986] <tcampbell>
mgaudet: start here https://firefox-source-docs.mozilla.org/contributing/debugging/debugging_a_minidump.html

[08:07:36.0170] <mgaudet>
tcampbell: have you done symbol downloading / binary loading of a WinNT firefox on linux? (I did peek at those docs, but they heavily hint preferred workflow would be Visual Studio, unless there's new stuff. 

[08:08:11.0908] <tcampbell>
I have not since I just use WinDBG on windows

[08:09:27.0317] <mgaudet>
OK. Is windbg a VS component, or can I get away without ordering a visual studio licence? (planning on getting a Windows VM setup) 

[08:10:02.0692] <tcampbell>
windbg is free

[08:10:42.0748] <tcampbell>
I usually use the redesign of it https://www.microsoft.com/en-ca/p/windbg-preview/9pgjgd53tn86?activetab=pivot%3Aoverviewtab

[08:11:07.0659] <tcampbell>
(classic WinDBG is 90s UI..)

[08:12:29.0659] <mgaudet>
Alright :) This will be a multi-day project for me I suspect; I'll be back with more questions eventually. 

[08:22:04.0382] <iain>
mgaudet: On Linux, I've gotten value out of the tools here: https://firefox-source-docs.mozilla.org/contributing/debugging/debugging_a_minidump.html#using-other-tools-to-inspect-minidump-data

[08:23:37.0256] <iain>
After downloading a .dmp, I use this shell script to produce a stack dump and disassembly:
```
#!/bin/bash

# See also: https://firefox-source-docs.mozilla.org/contributing/debugging/debugging_a_minidump.html

mv ~/Downloads/*.dmp /tmp 2> /dev/null

for FILE in /tmp/*.dmp;
do
    NO_DIR=$(basename $FILE)
    SHORT_NAME="${NO_DIR:0:8}"
    STACK_DUMP="/tmp/stack-$SHORT_NAME"
    DISASSEMBLY="/tmp/dis-$SHORT_NAME"
    if [[ -f "$DISASSEMBLY" ]]; then
	continue
    fi

    echo $SHORT_NAME:
    stackwalk-http/stackwalk $FILE http://symbols.mozilla.org/firefox /tmp/symbols > $STACK_DUMP
    minidump-instructions/get-minidump-instructions --disassemble $FILE /tmp/symbols/ > $DISASSEMBLY
done
```

[08:58:59.0963] <mgaudet>
iain: Where did you get your copy of breakpad? I'm building some google version that seems to be too new

[08:59:14.0054] <mgaudet>
or, at least too new to work with stackwalk-http

[09:00:57.0325] <iain>
mgaudet: That's an excellent question. Looks like I pulled it from https://chromium.googlesource.com/breakpad/breakpad

[09:01:22.0994] <iain>
But that was apparently in September

[09:02:28.0355] <mgaudet>
Ok, got something to build.

[09:02:28.0562] <iain>
So as a datapoint, revision 9c4671f2e3a63c0f155d9b2511192d0b5fa7f760 works with stackwalk-http

[09:02:36.0895] <mgaudet>
Needed to further patch the stackwalk-http makefile

[09:05:27.0676] <mgaudet>
cool: Stackwalk-http worked :) 

[09:08:54.0494] <mgaudet>
iain: Awesome. That worked :) 

[09:15:11.0088] <iain>
Sweet. I expect that windbg probably does stuff that an assortment of shell scripts won't, but at least the shell scripts aren't a multi-day project

[09:30:14.0147] <mgaudet>
Indeed. I'm at least a touch surprised by the disassembly already; though the optimizer has definitely done a number on this line. 

[09:48:52.0923] <evilpie>
Is it expected that we call NativeDefineProperty from a helper thread? https://treeherder.mozilla.org/logviewer?job_id=339521024&repo=try&lineNumber=6599

[09:50:05.0709] <evilpie>
With stencil apparently?

[09:50:08.0841] <tcampbell>
evilpie: bytecode cache still does in a few cases

[09:51:44.0245] <tcampbell>
it does decode to stencil format, but we still use the helper-thread global for performance in a couple cases

[10:01:11.0825] <iain>
Does anybody know of a way that enabling code coverage could affect scope lookup? A testcase I wrote with deeply nested functions is [perma-failing](https://bugzilla.mozilla.org/show_bug.cgi?id=1710830) on [this check](https://searchfox.org/mozilla-central/rev/2bc4e5cdf669cc9de3ed98e38be3e50a27b25332/js/src/frontend/EmitterScope.cpp#67-69), but only in code coverage builds

[10:10:10.0551] <tcampbell>
iain: full parsing

[10:11:02.0104] <iain>
Hmm. Yesterday I tried `eval(src, {forceFullParse: true});` in a local non-ccov build, and it didn't do anything

[10:13:16.0497] <tcampbell>
iain: you can also run `mach run jit-test --args=--code-coverage`

[10:14:08.0888] <tcampbell>
fails locally for me on m-c

[10:14:36.0700] <tcampbell>
iain: did you do anything to make this your fault? or should I be investigating

[10:15:12.0550] <iain>
Oh, hey, `--code-coverage` is a thing

[10:15:15.0919] <iain>
That is the piece I was missing

[10:15:20.0965] <iain>
I can investigate from here

[10:15:31.0496] <tcampbell>
cool, let me know if you have more questions

[10:15:31.0928] <iain>
I will punt it to you if necessary

[10:15:48.0521] <tcampbell>
I suspect there is nothing wrong here

[10:16:07.0074] <tcampbell>
other than your test case is outside of engine limits and lazy parser hides that

[10:16:15.0290] <tcampbell>
in which case there is s skip-if

[10:16:38.0367] <tcampbell>
https://searchfox.org/mozilla-central/source/js/src/jit-test/tests/basic/allow-relazify.js#1

[10:26:17.0731] <tcampbell>
iain: btw, your problem was using "eval" instead of "evaluate"

[10:38:58.0192] <mgaudet>
Win ABI Q: Is `this` considered the 'first integer argument' in C++ (aka, ie, typically in `rcx`?) 

[10:41:13.0117] <sfink>
yes

[14:27:19.0005] <mgaudet>
confession: slowly working through bytecode emission for class-static-blocks. See y'all monday, where hopefully I'll land the pref-flip of ergonomic brand checks.

[14:27:24.0909] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2021-05-14
[08:15:58.0993] <ashcode>
https://paste.mozilla.org/8iNoNbfc-error
https://paste.mozilla.org/vvFbNsnB- my diff file
I m trying to initialise cache_ in StringBox class .

[08:17:02.0467] <ashcode>
 * https://paste.mozilla.org/8iNoNbfc-error
https://paste.mozilla.org/vvFbNsnB- my diff file
I m trying to initialise cache_ in StringBox class .
Can any one tell me how to resolve non viable constructor error.

[08:31:32.0236] <ashcode>
 * https://paste.mozilla.org/8iNoNbfc- error
https://paste.mozilla.org/vvFbNsnB- my diff file
I m trying to initialise cache_ in StringBox class .
Can any one tell me how to resolve non viable constructor error.

[08:32:44.0779] <ashcode>
 * https://paste.mozilla.org/8iNoNbfc- error
https://pastebin.com/Zbpnd9fa- my diff file
I m trying to initialise cache_ in StringBox class .
Can any one tell me how to resolve non viable constructor error.

[08:34:16.0919] <ashcode>
 * https://pastebin.com/Bb9m2MCd - error
https://pastebin.com/Zbpnd9fa- my diff file
I m trying to initialise cache_ in StringBox class .
Can any one tell me how to resolve non viable constructor error.

[08:35:24.0209] <ashcode>
 * https://pastebin.com/Bb9m2MCd - error
https://pastebin.com/Zbpnd9fa - my diff file
I m trying to initialise cache_ in StringBox class .
Can any one tell me how to resolve non viable constructor error.

[08:41:57.0728] <ashcode>
 * https://pastebin.com/Bb9m2MCd - error
https://pastebin.com/Zbpnd9fa - my diff file
I m trying to initialise cache_ as ```const ExclusiveData<Inner>* cache_``` in StringBox class .
Can any one tell me how to resolve non viable constructor error.


2021-05-15
[20:44:37.0317] <chaircrusher>
So is the only documentation for SpiderMonkey API now "Archived and unmaintained" or reading the source?

[20:46:44.0969] <chaircrusher>
I'm working on a wrapper class for creating and adding properties to objects.  It's pretty straightforward in JS1.8.5, but what kind of pointer would I use to have an C++ object member that points to a GCThing?

[20:47:39.0462] <chaircrusher>
As it happens I can guarantee that these wrapper classes don't persist across calls to the interpreter, but I want to do the right thing.

[20:52:24.0249] <DerekNonGeneric>
There is SM Doc, which generates some docs

[20:52:52.0685] <chaircrusher>
I can find some stuff, but the main doc pages are 'archived' and I don't see a follow on.

[20:53:10.0131] <DerekNonGeneric>
Those are on MDN

[20:53:37.0787] <DerekNonGeneric>
Not sure where the rest are

[20:54:46.0994] <chaircrusher>
OK

[20:56:46.0716] <chaircrusher>
At any rate it looks like I can use JS::PeristentRooted to hold a pointer to an object in a  C++ class, and that it keeps the GCThing from being GC'ed until the C++ object with the PersistentRooted member gets deleted.

[20:57:12.0683] <chaircrusher>
At which point it goes away like a regular JS::Rooted on the stack

[00:41:35.0003] <Standard8>
chaircrusher: https://spidermonkey.dev/ might help as a starting point to look. (mentioned in topic)

[07:17:42.0551] <tcampbell>
chaircrusher: poke around this repo if you havent' already https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples

[07:20:20.0844] <tcampbell>
basically the MDN stuff hasn't been update in a longgg time and maintaining formal API docs was not sustainable for the team. That github repo is where we tried to collect some of the still-current MDN docs and fix them up, as well as trying to add specific examples.

[07:21:03.0635] <tcampbell>
Also, read through this file https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/examples/tracing.cpp `Heap` is probably what you want if you can provide a trace method on the C++ object

[07:25:26.0840] <sagu>
tcampbell: Is there any option to do make install of mozjs with generic name

[07:25:47.0920] <sagu>
so libmozjs.a without any version number

[07:26:21.0725] <tcampbell>
sagu: you are looking at CI, right? let me see

[07:26:59.0201] <tcampbell>
(I did try to build with Beta branch and the wip_esr91 examples all worked once I manually changed the name)

[07:28:17.0532] <sagu>
tcampbell: but it would be better to use generic name on next branch and use hard-coded on ESR.

[07:29:02.0920] <sagu>
 * tcampbell: but it would be better to use generic name on next branch and use hard-coded on ESR branches.

[07:29:13.0801] <sagu>
 * tcampbell: but it would be better to use generic name on `next` branch and use hard-coded on ESR branches.

[07:33:20.0388] <tcampbell>
there is a `JS_LIBRARY_NAME` but I'm not quite sure how to change. If there is some sort of `configure` option, you should be able to add to mozconfig with `ac_add_options --foo=bar`

[07:35:37.0565] <sagu>
Tnx for the tip.

[07:35:38.0981] <sagu>
https://searchfox.org/mozilla-central/source/js/src/old-configure.in#1432

[08:09:45.0968] <sagu>
> <@tcampbell:mozilla.org> there is a `JS_LIBRARY_NAME` but I'm not quite sure how to change. If there is some sort of `configure` option, you should be able to add to mozconfig with `ac_add_options --foo=bar`

Unfortunately there is no such option. I think the best way to do use sed in CI to edit https://searchfox.org/mozilla-central/source/js/src/old-configure.in#1432

[08:54:56.0923] <ashcode>
Can anyone tell how to resolve this  error``` build errors found by clang-tidy````
I tried ./mach clang-format ,still its not resolved

[08:55:19.0644] <ashcode>
 * Can anyone tell how to resolve this  error ``` build errors found by clang-tidy````
I tried ./mach clang-format ,still its not resolved

[08:55:27.0739] <ashcode>
 * Can anyone tell how to resolve this  error ``` build errors found by clang-tidy```
I tried ./mach clang-format ,still its not resolved

[08:55:59.0333] <sagu>
ashcode: Are you getting in Mozphab?

[08:56:56.0422] <ashcode>
yh when i submitted the patch -https://phabricator.services.mozilla.com/D115154

[08:57:49.0106] <sagu>
ashcode: Bot says all

[08:58:10.0916] <sagu>
`./mach clang-format -p js/src/vm/SharedImmutableStringsCache.h js/src/vm/SharedImmutableStringsCache-inl.h`

[08:58:37.0144] <sagu>
here https://phabricator.services.mozilla.com/D115154#3744632

[08:59:03.0998] <ashcode>
> <@sagu:mozilla.org> `./mach clang-format -p js/src/vm/SharedImmutableStringsCache.h js/src/vm/SharedImmutableStringsCache-inl.h`

not that one

[08:59:11.0099] <iain>
The clang-format errors have been fixed; clang-tidy is a different thing

[08:59:51.0105] <iain>
clang-tidy is giving `ERROR: bad implicit conversion constructor for 'SharedImmutableTwoByteString'`

[09:00:14.0186] <sagu>
> <@ashcode:mozilla.org> not that one

ops, my bad

[09:02:19.0281] <iain>
Which happens whenever there is a constructor that takes only one argument. By default, C++ will use that constructor to implicitly convert from the type of the argument to the constructed type. For example, if you used a` SharedImmutableStringsCache::StringBox*` where a `SharedImmutableTwoByteString` was expected, it would automatically call the constructor. It's confusing to read code where that happens, so we want to make sure the constructor is always called explicitly.

[09:02:35.0514] <iain>
To do so, you can just add `explicit` to the declaration

[09:03:09.0934] <iain>
`explicit SharedImmutableString(SharedImmutableStringsCache::StringBox* box);`

[09:05:22.0527] <sagu>
tcampbell: Here is successful build https://github.com/sagudev/spidermonkey-embedding-examples/actions/runs/845211854. Should I put it in existing PR, or will you make `next` branch and I send new PR there?

[09:06:06.0721] <ashcode>
iain: thank u :)

[09:13:37.0358] <tcampbell>
sagu: I won't be able to look at it properly until Monday. I can make a proper "next" branch then too. Do github-actions work properly if the action is on the non-default branch? We'll want to keep "esr78" as the default branch.

[09:17:25.0492] <sagu>
tcampbell: Yes, GitHub Actions works of any branch. The ```push:
    branches: [ esr78 ]``` part specifies that workflow file is run only from esr78 branch. So you can have separate workflow files for separate branches.

[10:39:48.0277] <chaircrusher>
> <@tcampbell:mozilla.org> chaircrusher: poke around this repo if you havent' already https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples

I have poked around in that.  There isn't a current document to match the Rooting Guide in the archived docs.
It concerns me that two things are true about Spidermonkey A) The API is unstable B) There are no resources at MZ to document changes in the API.  It's probably the case that supporting Spidermonkey embedding is less important to Mozilla than  working on the browser.   At the same time, if you don't document something it means all the the knowledge about it is locked up in the heads of Mozilla developers.

If an asteroid hits the wrong office building we're screwed. I deeply appreciate all the help I get in this forum, but telling people to 'read the source' and 'check this example' means people who use Spidermonkey don't just have to be software engineers, they have to be detectives.

[10:50:40.0165] <evilpie>
https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/docs/GC%20Rooting%20Guide.md doesn't cover enough?

[11:02:24.0731] <ptomato>
this ^ yeah, I was pretty sure I had updated the rooting guide relatively recently 😃

[11:12:41.0344] <evilpie>
We also have the migration guide that documents changes, but it's of course not a full API description


2021-05-16
[00:13:53.0920] <sagu>
getting `ld.lld: error: undefined hidden symbol: encoding_mem_is_utf16_latin1` again on https://github.com/sagudev/spidershim/runs/2593623724?check_suite_focus=true#step:6:4334

[02:54:11.0422] <sagu>
> <@sagu:mozilla.org> getting `ld.lld: error: undefined hidden symbol: encoding_mem_is_utf16_latin1` again on https://github.com/sagudev/spidershim/runs/2593623724?check_suite_focus=true#step:6:4334

Looks like js shell is linked against libjsrust.a and libjs_static.a

[02:54:58.0876] <sagu>
so we need to tell mozbuild to include libjsrust in libjsstatic.


2021-05-17
[03:11:39.0917] <yulia>
arai: jonco which one of you is the better person to talk to about the async specification text, and how it is intended to be read?

[03:12:27.0297] <yulia>
we have an issue on top level await. initially, for the sync version, we were suspending the running context, and pushing the module context and running thta

[03:12:31.0513] <yulia>
 * we have an issue on top level await. initially, for the sync version, we were suspending the running context, and pushing the module context and running that

[03:13:12.0317] <yulia>
for async functions, what the spec does is *copies* the context as the async context

[03:13:19.0917] <yulia>
it is the copy which is later suspended

[03:13:31.0598] <yulia>
i think this is a bug, but after speaking to guy i am not sure

[03:14:00.0039] <yulia>
i think for async modules we should not be suspending the running context before entering the async block, we should only suspend the running context in the case of a sync module

[03:14:04.0265] <yulia>
here is the related chhange

[03:14:07.0783] <yulia>
 * here is the related change

[03:14:26.0610] <yulia>
https://github.com/tc39/proposal-top-level-await/pull/175

[03:15:25.0121] <yulia>
 * i think this is a bug, we are suspending a non module context, but the module context is async. In other words we are blocking on async code running. iiuc this should all be handle by promise machinery. but after speaking to guy i am not sure

[03:17:05.0799] <yulia>
the pr isn't quite right but the idea is basically there

[03:17:13.0122] <jonco>
yulia: I don't understand this part of the spec enough to be of help here

[03:17:16.0819] <yulia>
(its not suspending the right context, that would be the module context)

[03:17:28.0761] <yulia>
ok, no problem -- ill see if arai has some insight..

[03:17:48.0818] <yulia>
if not, I will just take it to committee.

[04:49:54.0637] <arai>
yulia: which "suspend" in the proposal is it about?

[04:50:36.0095] <yulia>
arai: this one: https://github.com/tc39/proposal-top-level-await/blob/main/spec.html#L1208

[04:51:24.0914] <yulia>
it applies to both sync and async execution right now

[04:55:28.0070] <arai>
is "not on the top of execution context stack" execution context supposed to be always suspended?

[04:55:50.0575] <yulia>
as I understand, yes

[04:56:00.0157] <yulia>
since it is not the currently executing context

[04:57:08.0686] <yulia>
huh, just noticed another bug, moduleCxt isn't defined

[04:57:12.0969] <yulia>
but, ill fix that

[04:58:01.0931] <arai>
given it's going to push `moduleContext` onto the stack in both sync and async case, we're supposed to suspend that "current" context, right?

[04:59:29.0194] <yulia>
yes

[04:59:39.0254] <yulia>
but the "current" context suspended by that line is the previous one

[05:00:14.0955] <yulia>
moduleContext isn't pushed in the sync case onto the execution context until line 1217

[05:00:39.0686] <yulia>
 * ~yes~ erm, no sorry misread -- in the sync case the module context isn't suspended, it is run

[05:01:42.0234] <yulia>
we only suspend it once we finish, and remove it from the stack

[05:03:35.0651] <yulia>
 * ~yes~ erm, wait, maybe misread -- in the sync case the module context isn't suspended, it is run. so we are suspending the previous context to run it, as i understand

[05:03:36.0213] <arai>
so, in sync case. we do:  1. create moduleContext,  2. suspend current context.  3. push moduleContext, 4. run it, 5. suspend moduleContext,  6. pop moduleContext

[05:03:44.0227] <yulia>
yes

[05:05:28.0695] <yulia>
for the async case we also have this line: https://github.com/tc39/proposal-top-level-await/blob/main/spec.html#L52

[05:05:29.0570] <arai>
and in async case we do:  1. create moduleContext, 2. suspend current context, 3. prepare moduleContext for resumption,  4. push moduleContext,  5. resume moduleContext, 6. implicitly suspend moduleContext, 7. pop moduleContext

[05:06:52.0056] <yulia>
if i am reading the spec right i think we are getting the wrong execution context in the async module case

[05:07:11.0848] <yulia>
1-3 are as you described

[05:07:51.0746] <yulia>
but in asyncStartBlock we take the currently running context (which can't be the same as the one we suspend in step 2) and this is what we should return to after removing the moduleContext

[05:08:29.0820] <arai>
if the spec says "running execution context", it means "not-suspended" ?

[05:08:48.0980] <yulia>
that is my understanding

[05:09:23.0964] <yulia>
in the case of async code, the asyncContext is a copy of the previously running execution context

[05:09:24.0206] <arai>
I was thinking it just means the top-of-the-stack context

[05:10:06.0580] <yulia>
that is true of the async function spec

[05:10:07.0079] <arai>
where is the "copy" step?

[05:10:12.0390] <yulia>
i am not sure what it means for modules

[05:10:25.0898] <yulia>
here is the copy step: https://github.com/tc39/proposal-top-level-await/blob/main/spec.html#L25

[05:10:34.0525] <yulia>
this is for functions, rather than modules

[05:11:13.0309] <arai>
yeah, so, module case doesn't copy

[05:12:18.0757] <arai>
both for sync and async

[05:13:22.0144] <arai>
err, maybe I'm mixing up "async function spec" and "TLA / async module spec"

[05:13:35.0521] <yulia>
I guess the main question is "what does running execution context actually mean"

[05:13:48.0864] <yulia>
if it means -> context at the top of the stack, this isn't an issue

[05:14:06.0858] <yulia>
at least, i think?

[05:14:29.0903] <arai>
yeah, if it grabs the top-of-the-stack context, it's correct one

[05:15:06.0461] <yulia>
ok, maybe i will ask for clarification from committee about that, and maybe at a note. I was confused because I wouldn't consider a suspended context to be running

[05:15:17.0586] <yulia>
 * ok, maybe i will ask for clarification from committee about that, and maybe add a note. I was confused because I wouldn't consider a suspended context to be running

[05:17:51.0558] <arai>
yeah, I feel that, the execution context part of the spec doesn't explicitly define the relation between suspend/resume/running/push/pop  https://tc39.es/ecma262/#running-execution-context

[05:21:38.0915] <arai>
if suspending the current "running execution context" results in "running execution context" term points null in later steps, it should be clarified

[05:22:21.0811] <yulia>
I am opening an issue. Maybe this is more obvious but I can't tell what is intended by suspending

[05:22:42.0434] <yulia>
and yes, exactly -- if we end up pointing to null as a result of suspending then this would be a spec bug

[05:27:53.0458] <arai>
perhaps we need some term that simply points the "top of the stack context", regardless of its state

[05:28:29.0141] <yulia>
posted: https://github.com/tc39/ecma262/issues/2409

[05:29:14.0669] <yulia>
I don't think we are going to be ready for stage 4. Depending on how things go today or tomorrow, i will switch TLA to an update

[05:29:26.0348] <yulia>
we also have a significant clarification of the spec that guy did

[05:32:23.0752] <arai>
at least the context that's below the top of the stack cannot be "running execution context", according to the spec

[05:32:29.0371] <arai>
> The running execution context is always the top element of this stack.

[05:32:36.0025] <arai>
https://tc39.es/ecma262/#sec-execution-contexts

[05:33:19.0052] <arai>
maybe we're just abusing the concept based on the sentence

[05:33:39.0857] <arai>
 * maybe we're just abusing the concept of "running execution context" based on the sentence

[05:34:33.0592] <arai>
from "running execution context" => "the top element of the execution context stack"

[05:34:40.0855] <arai>
to "running execution context" == "the top element of the execution context stack"

[05:34:57.0664] <yulia>
yes, i see what you mean. i wonder is "suspend" is a useful concept here

[05:35:13.0298] <yulia>
perhaps we should really work with push/pop exclusively

[05:35:59.0891] <arai>
yeah, if things work only with push/pop, that's the best

[05:40:24.0646] <yulia>
thanks arai, this helped a lot.

[05:40:32.0416] <Ms2ger>
🙏

[05:40:51.0102] <arai>
:)

[05:42:02.0509] <Ms2ger>
One day, I'll be able to ignore TLA issues without feeling like I'm failing my responsibilities

[05:42:04.0362] <Ms2ger>
Any day now

[05:44:15.0793] <yulia>
soon 😆

[08:58:01.0617] <Ms2ger>
yulia: anything else you need/could use help with before the plenary?

[08:59:54.0612] <nbp>
before the plenary? Did I miss an email stating that we had tons of meetings sometime soon?

[09:51:42.0698] <sfink>
nbp: yeah, haven't you heard that you're giving the keynote?

[09:52:10.0671] <sfink>
(joking aside, I have no idea what plenary they're talking about, but it's probably some tc39 thing)

[09:52:38.0953] <nbp>
sfink: no, should I improvised something? Totally ready. I even have a tablet to hand draw things instead of hand waving.

[09:54:22.0726] <sfink>
I believe the topic was "JIT heuristic optimization based on parrot flight paths", so you may want to get a high-precision tracker for your bird instead of that tablet.

[09:57:31.0792] <nbp>
he actually do some crazy flying sometimes, such as doing turn-arounds in a very limited corner of a room.

[09:58:04.0881] <nbp>
Or he fly next to the ground before going straight to the ceiling and doing a turn around.

[09:58:24.0444] <nbp>
and then flying the same path on the way back

[12:21:13.0546] <mgaudet>
tcampbell: So I have WinDBG (new UI) installed, and a dump loaded. I did `.symfix` and `.srcfix`; but when I try to get a backtrace with `kp`, I'm still getting an unsymbolicated trace. Is there something else I need to do? (As well, any tips on how to get the source-server support to do its thing?) 

[12:22:34.0295] <tcampbell>
start menu -> search "env" -> edit system environment variables

[12:22:47.0923] <tcampbell>
`_NT_SYMBOL_PATH` : `SRV*c:\symcache\*https://msdl.microsoft.com/download/symbols;SRV*c:\symcache\*https://symbols.mozilla.org/`

[12:23:08.0339] <tcampbell>
possibly have to log out, but probably just need to restart windbg

[12:23:56.0533] <tcampbell>
then I open windbg, wait for symbols to download if I havn't seen that nightly before (symbols are 1-2GB so give it a minute depending on your internet speed)

[12:24:08.0320] <tcampbell>
then `.excr` is the magic command to use

[12:24:18.0502] <tcampbell>
it jumps context to the "crash"

[12:24:36.0879] <tcampbell>
mgaudet: ^

[12:25:46.0621] <mgaudet>
Ok. I'll give that a shot in a min. 

[12:28:36.0530] <mgaudet>
tcampbell: nice. That seems to have done the magic 

[12:29:55.0420] <mgaudet>
Interesting. It gives a different, slightly more complete stack than minidump_stackwalk gave 

[12:30:11.0984] <tcampbell>
yeah, it includes inline frame data

[12:31:11.0292] <mgaudet>
Nice. Super helpful data. 

[12:31:30.0340] <tcampbell>
(which I find to be like 80% accurate even with optimizing compilers which is surprising)

[12:33:05.0081] <tcampbell>
probably because what you are looking for in a crash investigation you mostly want the field that was used so GVN doesn't really change your conclusion

[12:38:18.0588] <mgaudet>
Yeah. So it looks like this minidump is pointing the finger at a JSFunction that's a little peculiar. 

We're crashing calling ->asyncKind(), but crashing because `u.scripted.s.script_` is `0x20`, 

[12:39:00.0097] <mgaudet>
that value doesn't have any special meaning to me; this is delazification 

[12:39:42.0302] <mgaudet>
The function comes from `handler_.nextLazyInnerFunction()` 

[12:40:08.0199] <tcampbell>
is script_ 0x20, or is the crash accessing a field at offset 20

[12:40:44.0427] <tcampbell>
(which would be `BaseScript::extent_`

[12:40:58.0707] <mgaudet>
According to the minidump locals pane, the the value is 0x20

[12:41:13.0887] <tcampbell>
 * (which would be `BaseScript::extent_`.. maybe?)

[12:41:18.0738] <tcampbell>
hrm weird

[12:41:19.0279] <mgaudet>
the actual crashing offset is 0x38

[12:41:42.0485] <mgaudet>
which I don't quite see yet, 

[12:42:25.0314] <tcampbell>
I don't have any obvious answers here

[12:45:39.0109] <tcampbell>
mgaudet: are there multiple of these crashes?

[12:45:51.0083] <tcampbell>
(eg. this isn't a single report of a bitflip?)

[12:45:55.0342] <mgaudet>
Yeah, we're seeing a whole family of them

[12:46:07.0269] <tcampbell>
bleh

[12:46:07.0928] <mgaudet>
0x38 dereference crashes

[12:48:54.0129] <tcampbell>
mgaudet: if we assume script_ is null (and debugger is misleading), what would field 38 be?

[12:48:58.0172] <mgaudet>
```
0:000> ??@@c++(this->u.scripted.s.script_)
class js::BaseScript * 0x00000000`00000020
   +0x000 header_          : mozilla::Atomic<unsigned long long,mozilla::Relaxed,void>
   +0x008 warmUpData_      : js::ScriptWarmUpData
   +0x010 functionOrGlobal_ : js::GCPtr<JSObject *>
   +0x018 sourceObject_    : js::GCPtr<js::ScriptSourceObject *>
   +0x020 extent_          : js::SourceExtent
   +0x038 immutableFlags_  : js::ImmutableScriptFlags
   +0x03c mutableFlags_    : js::MutableScriptFlags
   +0x040 data_            : ???? 
   +0x048 sharedData_      : RefPtr<js::SharedImmutableScriptData>
```

Suggests we're reading immutableFlags_ off null

[12:49:20.0188] <tcampbell>
that seems the more likely story

[12:49:28.0134] <mgaudet>
(which makes sense looking at the implementation of `JSFunction::asyncKind()` 

[12:49:31.0838] <mgaudet>
 * (which makes sense looking at the implementation of `JSFunction::asyncKind()`)

[12:49:35.0010] <tcampbell>
also.. what is this magic command

[12:49:52.0573] <mgaudet>
Hahaha.. Uhm. Apparently it's how you print a value? 

[12:50:23.0151] <mgaudet>
which, produced amazing results :P 

[12:50:27.0507] <tcampbell>
in windbg?

[12:50:33.0099] <mgaudet>
yeah

[12:50:40.0646] <tcampbell>
ah.. the field offsets are useful!

[12:50:51.0438] <mgaudet>
They are! 

[12:50:58.0544] <tcampbell>
my `(gdb) p &((js::BaseScript*)(0))->immutableFlags_` is far from a smart way to do this

[12:51:06.0917] <tcampbell>
"nope, not quite, try the next field"

[12:51:47.0131] <tcampbell>
so asyncKind() crashing on the flags is what we expect

[12:53:04.0466] <tcampbell>
now, null for script field can come up for: C++-implemented JSFunctions, or JSFunctions that are not successfully parsed

[12:53:31.0895] <mgaudet>
Having said that, this hypothesis doesn't quite jibe with the minidump; it says baseScript is 0x20, not null... can we not always trust values from a minidump? 

[12:53:40.0202] <mgaudet>
(not sure what is included vs what is not) 

[12:53:59.0550] <tcampbell>
no, register data isn't perfect

[12:54:27.0712] <tcampbell>
I find looking at non-leaf frame is more likely to be a problem

[12:55:16.0945] <tcampbell>
(eg. mozcrash makes me sad because it clobbers RAX and minidumps are sad)

[12:55:18.0478] <mgaudet>
Well, this is technically the 13th frame, according to the dump; the preceeding 12 frames are all exception dispatch stuff 

[12:56:59.0860] <tcampbell>
I think looking at this a nullptr-script is the safe bet

[12:57:31.0016] <mgaudet>
So one other datapoint of interest: URLs in crash reports tend to be localhost or dev-environments, and this morning, we had a user describe the circumstances under this crash: Reloading a page where JS has changed with devtools open 

[12:57:42.0822] <tcampbell>
gahhh

[12:57:45.0793] <tcampbell>
debugger, why

[12:57:50.0825] <tcampbell>
also, is this a release crash?

[12:58:04.0144] <tcampbell>
 * also, is this a release crash? (fx88 maybe)

[12:58:41.0014] <tcampbell>
we've been fixing some nullptr crashes that stencil caused..

[12:58:49.0715] <mgaudet>
Yes; [this is the crash I have open](https://crash-stats.mozilla.org/report/index/0825f33e-350f-47ba-9577-5d17c0210504), FF 88

[12:59:28.0714] <tcampbell>
does issue drop off in beta?

[13:00:12.0393] <mgaudet>
Interesting. it does in fact

[13:00:52.0910] <tcampbell>
maybe facet on version instead

[13:05:07.0423] <mgaudet>
So, the first dump I was looking at was just plain script loader driven execution based on BT. The user who mentioned DevTools also posted a link to their crash; looking at it, it's definitely got Debugger stuff in the stack. 

[13:06:25.0591] <mgaudet>
Same deal though; seems to be checking immutableFlags for asyncKind() 

[13:06:50.0910] <tcampbell>
mgaudet: I CC'd you on some bugs

[13:07:30.0605] <mgaudet>
Hmm. I was just about to ask about those 

[13:07:34.0808] <mgaudet>
lemme read. 

[13:12:03.0514] <mgaudet>
That's an interesting bug. Certainly feels like it's in the right neighbourhood at least. 

[13:23:23.0055] <tcampbell>
mgaudet: have time for a quick call

[13:23:40.0880] <tcampbell>
I want to walk through my crashstats tips here

[13:24:01.0300] <mgaudet>
> <@tcampbell:mozilla.org> mgaudet: have time for a quick call

Sure. 

[14:08:17.0136] <tcampbell>
basically just 5 or 6 signature variations on Bug 1707979

[14:08:18.0959] <botzilla>
https://bugzil.la/1707979 — NEW (nobody) — Delazification Crashes, loading immutableFlags_ off null (0x38 crashes)

[14:37:56.0889] <sfink>
tcampbell: fwiw, gdb finally added `(gdb) ptype/o js::BaseScript` giving pahole-like output (so, field offsets and sizes)

[14:38:13.0374] <tcampbell>
ooh

[14:38:29.0445] <sfink>
I like to think it's because of the bug I filed with a crappy implementation a while back, that inspired someone to do it properly, but I don't know if that's true

[14:41:45.0515] <tcampbell>
`ptype/m` looks like something I want basically constantly


2021-05-18
[03:29:20.0351] <yulia>
Ms2ger: sorry I missed your message

[03:29:33.0248] <yulia>
I think we are in good shape, though i am not sure we will get stage 4 yet

[03:59:07.0542] <Ms2ger>
👍️

[06:42:44.0763] <miles>
Hi. I'm hoping someone might be able to help me with an issue I'm having when trying to upgrade my embedding from ESR78 to 89.

[06:43:14.0649] <miles>
I seem to be having problems getting and setting private data for an object and getting crashes in the debugger.

[06:43:49.0344] <miles>
It looks like JS_GetPrivate and JS_SetPrivate have changed to JS::GetPrivate and JS::SetPrivate so I have changed that.

[06:45:26.0854] <miles>
When I define my class I use the flag JSCLASS_HAS_PRIVATE but I am getting odd problems when getting the private data. e.g. currently in Object.h it is crashing on the line
  return nobj->fixedSlots()[nobj->numFixedSlots()].toPrivate();
in GetPrivate

[06:45:47.0366] <miles>
Has something obvious changed that I'm missing?

[06:46:58.0338] <arai>
is there any reason that you're accessing `nobj->numFixedSlots()`-th element of the array?

[06:47:11.0107] <miles>
Sorry, here's the whole function if it helps

inline void* GetPrivate(JSObject* obj) {
  MOZ_ASSERT(GetClass(obj)->flags & JSCLASS_HAS_PRIVATE);
  const auto* nobj = reinterpret_cast<const shadow::Object*>(obj);
  return nobj->fixedSlots()[nobj->numFixedSlots()].toPrivate();
}

So I pass the assert...

[06:47:51.0096] <arai>
oh, it's inside JSAPI

[06:48:26.0590] <arai>
how does it crash?

[06:49:45.0379] <jandem>
what kind of value are you trying to store? we changed the implementation to use a PrivateValue

[06:49:59.0096] <jandem>
 * what kind of value are you trying to store or get? we changed the implementation to use a PrivateValue

[06:50:09.0121] <miles>
Ah... It is just a pointer.

[06:50:39.0245] <miles>
Is it not possible to just store a pointer anymore then?

[06:51:16.0288] <jandem>
that should be fine

[06:51:55.0875] <arai>
can you check the value of `nobj`, `nobj->fixedSlots()` etc, in the line?

[06:52:49.0972] <arai>
unfortunately the message in the screenshot doesn't explain the detail of the crash

[06:53:30.0115] <arai>
if you're running the program under debugger, the debugger should be able to break on the crash, and you should be able to inspect variables

[06:55:56.0200] <jandem>
I wonder if this is confusion about JS_64BIT in public headers again. There shouldn't be a padding_ field on 64-bit

[06:56:17.0803] <jandem>
 * I wonder if this is confusion about JS_64BIT in public headers again. There shouldn't be a padding_ field on 64-bit, it's there `#ifndef JS_64BIT`

[06:57:35.0129] <jandem>
bug 1708330 should have fixed that one

[06:57:36.0544] <botzilla>
https://bugzil.la/1708330 — RESOLVED (tcampbell) — Cleanup spidermonkey config headers

[06:59:59.0828] <miles>
I grabbed the JS89 tar.xz file from treeherder some time ago at the end of April. Is there a chance that I've got a dodgy tarball with a bug in then?
Should I try getting the latest one from treeherder again and recompiling?

[07:01:01.0539] <tcampbell>
yes, I think jandem is right. That was fixed in 90

[07:02:04.0076] <jandem>
downloading a newer version is probably the best option

[07:02:42.0782] <tcampbell>
/me should finish reviewing that embedding CI pull-request for beta channel...

[07:03:24.0437] <miles>
But am I still OK downloading 89 from treeherder at https://treeherder.mozilla.org/jobs?repo=mozilla-beta&searchStr=spidermonkey-sm-package&selectedTaskRun=PgpRLUq0QpWumR3CPcYT7g.0 ?

[07:04:53.0431] <jandem>
I think you need 90, so mozilla-central instead of beta

[07:05:37.0237] <miles>
Errr. Sorry. So how exactly do I download 90 then?

[07:06:52.0499] <jandem>
miles: https://treeherder.mozilla.org/jobs?repo=mozilla-central&group_state=expanded&searchStr=spidermonkey-sm-package&selectedTaskRun=cyN-JcQyRMuUyyPg0QNc3w.0

[07:07:11.0066] <tcampbell>
oh, right.. that hasn't gone to beta yet..

[07:07:46.0289] <tcampbell>
miles: you could also just cherry-pick this patch https://phabricator.services.mozilla.com/D113742

[07:08:00.0703] <jandem>
the longer release cycle for 90 doesn't help in this case..

[07:08:28.0971] <tcampbell>
or define JS_64BIT -> 1 in your project build to see if that was the issue

[07:09:53.0479] <miles>
Great. I'll try downloading 90 then and using that instead. It will probably be a few days before I can get round to it though.
Many thanks for your help.

[07:19:03.0268] <tcampbell>
the last remnants of autoconf still give surprises like this sometimes. firefox and each embedder all have wildly different build approachs

[07:19:04.0509] <tcampbell>
 * the last remnants of autoconf still give surprises like this sometimes. firefox and each embedder all have wildly different build approaches

[07:20:38.0313] <tcampbell>
(Linux package repos generally maintain a specific very old version of autoconf-2.13 before some syntax handling changes and it is largely only around for the firefox build process.. :( )

[07:23:15.0861] <tcampbell>
autoconf-2.13 is 20+ year old release now..

[07:30:49.0567] <miles>
Sorry to be a pain but can I just double check. I built a release version of 89 on windows by making a build directory, setting that as the cwd and running

../configure --prefix=/c/SOURCE19/spidermonkey_dir/js89_release --disable-debug-symbols --disable-jemalloc

and a debug one using

../configure --prefix=/c/SOURCE19/spidermonkey_dir/js89_debug --enable-debug --disable-optimize --disable-jemalloc

If I download 90 and rebuild using similar options do you think the issue I'm facing will be fixed? Or do I have to somehow set JS_64BIT when running configure?

[07:37:08.0394] <jandem>
I'd expect it to be fixed

[07:37:35.0025] <miles>
Great. Thanks again.

[07:38:43.0032] <sagu>
> * <@tcampbell:mozilla.org> should finish reviewing that embedding CI pull-request for beta channel...

firstly rename wip-esr90 to next, the I will create new PR

[07:39:07.0452] <sagu>
> * <@tcampbell:mozilla.org> should finish reviewing that embedding CI pull-request for beta channel...

 * firstly rename wip-esr90 to next, then I will create new PR

[07:39:33.0227] <tcampbell>
sagu: rename complete

[07:41:51.0336] <mgaudet>
confession: Ergonomic Brand Checks are in Nightly :) 

[07:41:53.0187] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[08:02:21.0210] <evilpie>
Has someone looked at https://bugzilla.mozilla.org/show_bug.cgi?id=1711312 ?

[08:31:52.0916] <sagu>
tcampbell: https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/pull/37

[08:33:29.0436] <yulia>
confession: spent most of today doing proposal reviews

[14:27:20.0310] <mgaudet>
confession: Basic version of class static blocks is running and passing tests. Into the long-tail now :) 

[14:28:20.0512] <sfink>
"now entering the long tail of the monkey"

[14:29:10.0983] <mgaudet>
:D 

[14:48:16.0692] <mgaudet>
Grammar production question: Trying to sort through this: 

```
ClassStaticBlockStatementList :
  StatementList[~Yield, ~Await, ~Return]opt
```

Is this saying productions including `return` are disallowed, and that `yield` and `await` are identifiers in this production? 


[14:50:47.0514] <mgaudet>
Maybe I'm misunderstanding the ~

[14:55:33.0965] <mgaudet>
(I think yes. I think I've got that right, based on the top level script production, which makes sense https://tc39.es/ecma262/#sec-scripts) 


2021-05-19
[02:14:08.0607] <yulia>
the ~ are short han

[02:14:12.0137] <yulia>
 * the ~ are short hand

[02:15:02.0767] <yulia>
mgaudet: it's described in detail here how those expand: https://tc39.es/ecma262/#sec-grammar-notation

[02:16:28.0541] <yulia>
so, yes -- your reading is correct, they are treated as identifiers. or rather ~ means "not with" (how i usually read it)

[02:17:07.0547] <yulia>
 * the ~ are short hand, the grammar expands into several similar productions depending on how the short hand is used

[02:17:17.0769] <yulia>
 * mgaudet: it's described in detail here: https://tc39.es/ecma262/#sec-grammar-notation

[02:17:38.0088] <yulia>
 * so, yes -- i think you are right, here they are treated as identifiers. or rather ~ means "not with" (how i usually read it)

[02:40:31.0473] <yulia>
 * so, yes -- here they are treated as identifiers. (how i usually read it) ~ means "not with" 

[04:15:56.0313] <miles>
Hi. Yesterday people here helped me track down a problem I was having with 89 with private data and the suggestion was that I should get mozjs-90.0a1.0 and try that instead as the bug was fixed in that. I've downloaded it and trieed to compile/test and I'm having a few problems and hoping people can help me again.

[04:17:52.0653] <miles>
Firstly if I compile on windows or a RedHat 7 machine it all compiles but if I try to run the tests to check everything is OK I get the following error.

[dyna19@vdglin33 src]$ ./tests/jstests.py ./releaseobj/dist/bin/js
Traceback (most recent call last):
  File "./tests/jstests.py", line 875, in <module>
    sys.exit(main())
  File "./tests/jstests.py", line 757, in main
    test_count, test_gen = load_tests(options, requested_paths, excluded_paths)
  File "./tests/jstests.py", line 672, in load_tests
    wpt_tests = load_wpt_tests(xul_tester, requested_paths, excluded_paths)
  File "./tests/jstests.py", line 541, in load_wpt_tests
    import manifestupdate
  File "/home/spidermonkey/mozjs-90.0a1.0/testing/web-platform/manifestupdate.py", line 15, in <module>
    from mozboot.util import get_state_dir
  File "/home/spidermonkey/mozjs-90.0a1.0/python/mozboot/mozboot/util.py", line 13, in <module>
    from mozbuild.virtualenv import VirtualenvHelper
ImportError: No module named mozbuild.virtualenv

Does anybody know what I'm missing? Incidentally ruuning

./jit-test/jit_test.py ./releaseobj/dist/bin/js

works fine

[04:21:00.0510] <miles>
Secondly I've also tried to compile on a CentOS 6 machine and the compile fails. I get lots of errors like

/spidermonkey/mozjs-90.0a1.0/js/src/frontend/Parser.cpp:452:35: error: expected ‘)’ before ‘PRIu32’
  452 |   SprintfLiteral(columnNumber, "%" PRIu32, column);
      |                 ~                 ^~~~~~~
      |                                   )

/spidermonkey/mozjs-90.0a1.0/js/src/frontend/Parser.cpp:452:35: error: expected ‘)’ before ‘PRIu32’
  452 |   SprintfLiteral(columnNumber, "%" PRIu32, column);
      |                 ~                 ^~~~~~~
      |                                   )

Has something just changed as I didn't get this error when I compiled 89 last week. I know RedHat6/CentOS 6 is ancient but I'm hoping that I can still compile on it as we have some CentOS 6 machines I still need to support.

[04:21:40.0124] <miles>
Can anybody help with either of these problems?

[04:21:58.0124] <arai>
jstests (at least sometimes) requires virtualenv created by mach

[04:22:38.0325] <arai>
I tried to remove the dependency, but apparently the dependency again happens

[04:23:43.0449] <miles>
OK. I've not had to use mach before. I've just run a configure script to build up until now. Can I download if from somewhere and is it obvious what I need to do?

[04:24:09.0400] <arai>
`mach` script is stored inside source tree

[04:24:10.0880] <miles>
 * OK. I've not had to use mach before. I've just run a configure script to build up until now. Can I download it from somewhere and is it obvious what I need to do?

[04:24:22.0967] <arai>
there's `mach` file at the top of source tree

[04:25:12.0492] <arai>
if you follow this documentation https://firefox-source-docs.mozilla.org/js/build.html  both build and test can be done via `mach`

[04:25:55.0702] <arai>
if you directly run `jstests.py`, you would need to run `./mach create-mach-environment` or something to create the virtualenv manually, and use the python there instead

[04:26:46.0324] <miles>
OK. Great. I can try that. Many thanks.

[04:27:32.0295] <arai>
then, about CentOS thing, I wonder if it's caused by unsupported compiler version or something

[04:28:31.0690] <miles>
I'm using gcc 9.3.0

[04:28:32.0923] <arai>
if you use `mach` (especially, tools installed by `./mach bootstrap`), it will use supported compilers

[04:29:23.0445] <arai>
hm, then it should be sufficient

[04:29:39.0083] <arai>
according to https://firefox-source-docs.mozilla.org/code-quality/coding-style/using_cxx_in_firefox_code.html , the current minimal requirement is 7.1

[04:31:08.0155] <arai>
oh, given the error message, it might be that `PRIu32` isn't properly defined

[04:31:15.0734] <miles>
I'm presuming that there must be some sort of preprocessing step and PRIu32 etc are macros? As it compiles on RedHat 7 and windows but not Centos 6 I wondered if something had recently changed in this?

[04:31:27.0022] <arai>
yeah

[04:32:04.0870] <arai>
hmm, I cannot locate where it's defined...

[04:32:27.0508] <miles>
It worked for me on CentOS 6 with 89 but then I had the bug with private data :-(
Something changed between 89 and 90?

[04:34:34.0333] <arai>
just noticed that it's defined outside of source tree

[04:35:36.0522] <arai>
it's in `inttypes.h`

[04:36:28.0465] <arai>
Can you try adding `#include <inttypes.h>` in /js/src/frontend/Parser.cpp file, above `#include <memory>` line?

[04:36:34.0914] <arai>
to see if it solves the issue

[04:37:54.0015] <miles>
OK. I can try that. It was actually an error in several files but I pasted the same link twice by accident. If it fixes it in one file it will fix it in the others though... :-)

[04:55:04.0868] <miles>
I don't think that has worked. I'm getting errors in the 'unified' cpp files.

make[3]: Entering directory `/spidermonkey/mozjs-90.0a1.0/js/src/releaseobj/js/src/debugger'
/spidermonkey/bin/g++ -std=gnu++17 -o Unified_cpp_js_src_debugger0.o -c  -I/spidermonkey/mozjs-90.0a1.0/js/src/releaseobj/dist/system_wrappers -include /spidermonkey/mozjs-90.0a1.0/config/gcc_hidden.h -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2 -fstack-protector-strong -DNDEBUG=1 -DTRIMMED=1 -DWASM_SUPPORTS_HUGE_MEMORY -DJS_CACHEIR_SPEW -DJS_STRUCTURED_SPEW -DEXPORT_JS_API -DMOZ_HAS_MOZGLUE -I/spidermonkey/mozjs-90.0a1.0/js/src/debugger -I/spidermonkey/mozjs-90.0a1.0/js/src/releaseobj/js/src/debugger -I/spidermonkey/mozjs-90.0a1.0/js/src/releaseobj/js/src -I/spidermonkey/mozjs-90.0a1.0/js/src -I/spidermonkey/mozjs-90.0a1.0/js/src/releaseobj/dist/include -DMOZILLA_CLIENT -include /spidermonkey/mozjs-90.0a1.0/js/src/releaseobj/js/src/js-confdefs.h -Wall -Wempty-body -Wignored-qualifiers -Wpointer-arith -Wsign-compare -Wtype-limits -Wunreachable-code -Wwrite-strings -Wno-invalid-offsetof -Wduplicated-cond -Wimplicit-fallthrough -Wunused-function -Wunused-variable -Wno-error=maybe-uninitialized -Wno-error=deprecated-declarations -Wno-error=array-bounds -Wno-error=coverage-mismatch -Wno-error=free-nonheap-object -Wno-multistatement-macros -Wno-error=class-memaccess -Wno-error=deprecated-copy -Wformat -Wformat-overflow=2 -Wno-psabi -fno-sized-deallocation -fno-aligned-new -fPIC -fno-rtti -fno-exceptions -fno-math-errno -pthread -pipe -freorder-blocks -O3 -fno-omit-frame-pointer -funwind-tables -fno-strict-aliasing -Werror=format -Wno-shadow -Wno-attributes  -MD -MP -MF .deps/Unified_cpp_js_src_debugger0.o.pp   Unified_cpp_js_src_debugger0.cpp
In file included from /spidermonkey/mozjs-90.0a1.0/js/src/jit/x64/BaseAssembler-x64.h:12,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/jit/x86-shared/Assembler-x86-shared.h:17,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/jit/x64/Assembler-x64.h:283,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/jit/x86-shared/MacroAssembler-x86-shared.h:15,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/jit/x64/MacroAssembler-x64.h:11,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/jit/MacroAssembler.h:18,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/wasm/WasmGC.h:24,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/wasm/WasmCode.h:29,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/wasm/WasmModule.h:25,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/wasm/WasmDebug.h:23,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/debugger/Debugger.cpp:105,
                 from Unified_cpp_js_src_debugger0.cpp:11:
/spidermonkey/mozjs-90.0a1.0/js/src/jit/x86-shared/BaseAssembler-x86-shared.h: In member function ‘void js::jit::X86Encoding::BaseAssembler::jumpTablePointer(uintptr_t)’:
/spidermonkey/mozjs-90.0a1.0/js/src/jit/x86-shared/BaseAssembler-x86-shared.h:4308:21: error: expected ‘)’ before ‘PRIxPTR’
 4308 |     spew(".quad 0x%" PRIxPTR, ptr);
      |         ~           ^~~~~~~~
      |                     )
/spidermonkey/mozjs-90.0a1.0/js/src/jit/x86-shared/BaseAssembler-x86-shared.h:4308:19: error: spurious trailing ‘%’ in format [-Werror=format=]
 4308 |     spew(".quad 0x%" PRIxPTR, ptr);
      |                   ^
/spidermonkey/mozjs-90.0a1.0/js/src/jit/x86-shared/BaseAssembler-x86-shared.h:4308:10: error: too many arguments for format [-Werror=format-extra-args]
 4308 |     spew(".quad 0x%" PRIxPTR, ptr);
      |          ^~~~~~~~~~~
In file included from /spidermonkey/mozjs-90.0a1.0/js/src/jit/x86-shared/Assembler-x86-shared.h:17,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/jit/x64/Assembler-x64.h:283,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/jit/x86-shared/MacroAssembler-x86-shared.h:15,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/jit/x64/MacroAssembler-x64.h:11,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/jit/MacroAssembler.h:18,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/wasm/WasmGC.h:24,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/wasm/WasmCode.h:29,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/wasm/WasmModule.h:25,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/wasm/WasmDebug.h:23,
                 from /spidermonkey/mozjs-90.0a1.0/js/src/debugger/Debugger.cpp:105,
                 from Unified_cpp_js_src_debugger0.cpp:11:
/spidermonkey/mozjs-90.0a1.0/js/src/jit/x64/BaseAssembler-x64.h: In member function ‘void js::jit::X86Encoding::BaseAssemblerX64::andq_ir(int32_t, js::jit::X86Encoding::RegisterID)’:
/spidermonkey/mozjs-90.0a1.0/js/src/jit/x64/BaseAssembler-x64.h:224:27: error: expected ‘)’ before ‘PRIx64’
  224 |     spew("andq       $0x%" PRIx64 ", %s", uint64_t(imm), GPReg64Name(dst));
      |         ~                 ^~~~~~~
      |                           )
/spidermonkey/mozjs-90.0a1.0/js/src/jit/x64/BaseAssembler-x64.h:224:25: error: spurious trailing ‘%’ in format [-Werror=format=]
  224 |     spew("andq       $0x%" PRIx64 ", %s", uint64_t(imm), GPReg64Name(dst));
      |                         ^
/spidermonkey/mozjs-90.0a1.0/js/src/jit/x64/BaseAssembler-x64.h:224:10: error: too many arguments for format [-Werror=format-extra-args]
  224 |     spew("andq       $0x%" PRIx64 ", %s", uint64_t(imm), GPReg64Name(dst));
      |          ^~~~~~~~~~~~~~~~~


[04:56:27.0730] <arai>
now you don't get error for Parser.cpp ?

[04:57:28.0913] <arai>
unified file includes several cpp files, in order to improve the build performance, so that multiple cpp files are compiled at once

[04:57:54.0270] <arai>
and some complex case like Parser.cpp doesn't use unified file

[04:58:12.0412] <arai>
so, for the error in Parser.cpp, you got error directly for the file

[04:58:28.0543] <miles>
I don't think it has recompiled it. When I did my initial build I ran make in parallel with 'make -j 8'. I just ran make this time to try to ensure that I could see what was going on and I didn't see Parser.cpp in the output

[04:58:51.0683] <arai>
hmm

[05:00:11.0521] <miles>
I'll try from scratch in a bit. You have given me something to look into anyway but first I need to go and eat lunch! :-)

[05:00:54.0454] <arai>
it sounds like the environment you're using sounds like strict around header file, so adding more include for inttypes.h might solve the issue

[05:01:06.0104] <arai>
 * it sounds like the environment you're using is strict around header file, so adding more include for inttypes.h might solve the issue

[05:02:10.0127] <arai>
(we should follow "include-what-you-use" rule more eagerly...

[05:20:31.0731] <nbp>
In both cases, the macro should come from https://searchfox.org/mozilla-central/source/mozglue/misc/IntegerPrintfMacros.h#47 and its included [intypes.h header](https://en.cppreference.com/w/cpp/header/cinttypes)

[05:22:54.0144] <nbp>
they expand to a text literal which defines the text pattern to follow the "%" symbol. The preprocessor is in charge of expanding these macros and concatenating adjacent strings (`"a" "b" => "ab"`)

[05:26:05.0404] <nbp>
`error: expected ‘)’ before ‘PRIxPTR’` suggests the C++ compiler sees the macro name, thus that it was not expanded by the preprocessor. Adding the missing include `#include "mozilla/IntegerPrintfMacros.h"` in `js/src/frontend/Parser.cpp`, `js/src/jit/x86-shared/BaseAssembler-x86-shared.h` and `js/src/jit/x64/BaseAssembler-x64.h` should solve this problem.

[05:33:37.0475] <tcampbell>
miles: oops.. https://bugzilla.mozilla.org/show_bug.cgi?id=1708330#c7

[05:33:50.0649] <tcampbell>
do you have updates installed on these machines?

[05:35:01.0166] <tcampbell>
or do a simple test to see if this bug still applies to your centos machine https://bugzilla.redhat.com/show_bug.cgi?id=1318877

[05:40:26.0030] <miles>
Unfortunately the machine I'm using isn't up to date but we have another RHEL 6 machine that should be getting patch updates that I can try.
It looks like I have some things to look into anyway... Thanks

[05:41:25.0079] <tcampbell>
might be able to force the `__STDC_FORMAT_MACROS` define into your build process (for sm and your software)

[05:42:55.0630] <tcampbell>
 * might be able to force the `__STDC_{FORMAT,LIMIT,CONSTANT}_MACROS` define into your build process (for sm and your software)

[05:54:45.0778] <sagu>
> <@sagu:mozilla.org> so we need to tell mozbuild to include libjsrust in libjsstatic.

Discussion: https://bugzilla.mozilla.org/show_bug.cgi?id=1490948

[05:55:04.0698] <sagu>
Also relevant bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1588340

[07:47:43.0147] <yulia>
anyone want to do a review of this with me? https://github.com/tc39/proposal-resizablearraybuffer

[08:00:03.0133] <nbp>
^ lth & jandem  

[08:00:13.0445] <miles>
Hi. I thought I would give some feedback on my RHEL 6 compiling issue.
I made the following changes in the source

1. In js-cxxflags.mozbuild add

   CXXFLAGS += ['-D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS']

at the end of the file giving

if CONFIG['CC_TYPE'] == 'gcc':
   CXXFLAGS += ['-Wno-attributes']
   CXXFLAGS += ['-D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS']

2. In mozglue/misc/moz.build add

SOURCES["StackWalk.cpp"].flags += ["-D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS"]

3. In mfbt/moz.build remove JSONWriter.cpp from UNIFIED_SOURCES and add

SOURCES += [
   "JSONWriter.cpp",
]

SOURCES["JSONWriter.cpp"].flags += ["-D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS"]

4. In mfbt/tests/moz.build add

if CONFIG['CC_TYPE'] == 'gcc':
   CXXFLAGS += ['-D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS']

If I do that before running configure it compiles 😀

I'm now just looking into how to use mach to run the test suite properly (and also perhaps look to try to use it for building as well...)

Many thanks for the help earlier.

[08:01:46.0935] <jandem>
yulia: I should probably take a look at that again anyway..

[08:46:49.0206] <jonco>
sfink: ping

[09:08:14.0250] <sfink>
https://twitter.com/v8js/status/1394267917013897216

[09:14:48.0466] <nbp>
Why didn't they simply reserved some JIT-code area next to where the binary pages are located ?!

[09:15:17.0082] <nbp>
This would solve their issue without having to duplicate the code which is embedded in the binary.

[09:20:20.0318] <sfink>
dueling allocators, I'd guess

[09:20:50.0372] <sfink>
V8 probably expects to have a lot of control over that memory and can't just use a region that the browser hands it

[09:22:02.0200] <sfink>
my "why don't they just..." thought was that they should map that memory into each 4GB cage, even if it means mapping the same memory multiple times.

[09:23:02.0718] <sfink>
I posted this because jandem & jonco are talking about using pointer compression to shrink `JSAtom*` in property maps, and similar things arise for permanent atoms.

[09:23:45.0184] <nbp>
For atoms it does not matter much as you could compare the indexes (which are the compressed pointers)

[09:25:03.0568] <nbp>
Also this is a code-pointer restriction (branch prediction hardware tuning), not a data-pointer.

[09:27:33.0742] <sfink>
Sure. V8 wants smaller pointers for direct calls, we want smaller pointers to pack more properties into the same space. So they're different reasons, but run into similar problems.

[09:28:44.0158] <sfink>
We currently use indexes for atoms? How big are the indexes?

[09:34:40.0783] <nbp>
I do not know, but if you want to compress atom to reduce the pointer size, you likely have an indirection table, and the index in this table becomes your compressed-pointer.

[09:59:54.0091] <tcampbell>
ashcode++ for knocking 80 bytes off each `js::ScriptSource` (Bug 1576885)

[09:59:55.0811] <botzilla>
https://bugzil.la/1576885 — NEW (cOde.A4sh) — Reduce size of Maybe<SharedImmutableString>

[11:50:05.0310] <lth>
yulia: i should probably look also

[15:03:44.0998] <mgaudet>
confession: Class static blocks are nearing reviewability; verifying things work in the debugger, and that source positions roughly make sense is what mostly remains. 

[15:03:47.0357] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2021-05-20
[05:45:42.0743] <yulia>
Ms2ger: do you have time to handle the comments here? https://github.com/w3c/ServiceWorker/pull/1444

[05:47:35.0292] <yulia>
(if not, I can address the open comments and you can merge it into your pr?)

[05:55:36.0978] <tcampbell>
jandem: in https://phabricator.services.mozilla.com/D115556 I'm using `$` prefix the general way to get FunctionExtended for special cases in self-hosting. In particular, the bound function template which currently instead relies on all clones being extended. Is this a reasonable convention for self-hosting?

[05:57:47.0772] <tcampbell>
currently $ is just for the things that are using SetCanonicalName and need an extended slot for that reason

[05:58:30.0545] <jandem>
tcampbell: works for me. Pre-existing but it might be nice to have an SMDOC comment in SelfHosting.h listing these rules of our s-h JS dialect

[05:58:59.0037] <tcampbell>
yeah.. I might do that after we remove the self-host zone

[06:00:26.0421] <tcampbell>
since I add a few more rules, like no lambdas at the top-level ([ex](https://searchfox.org/mozilla-central/source/js/src/builtin/intl/DisplayNames.js#9-13))

[06:01:38.0044] <jandem>
yeah makes sense to wait for this to stabilize 

[08:39:15.0160] <jandem>
nice Stencil memory usage win: https://treeherder.mozilla.org/perfherder/graphs?highlightAlerts=1&highlightChangelogData=1&series=autoland,2223760,1,4&timerange=1209600

[08:49:09.0142] <nbp>
2.24 MB per content process: Whoa! 😲

[08:49:45.0733] <nbp>
Am I reading this wrong?!

[08:54:17.0942] <nbp>
 * <del>2.24 MB per content process: Whoa! 😲</del>

[08:54:50.0297] <tcampbell>
base content js

[08:54:58.0356] <tcampbell>
which is the JSRuntime

[08:56:01.0356] <tcampbell>
I believe Win10 is about 10MB per process

[08:56:03.0474] <nbp>
Ok, I was reading the absolute value and not the delta, which is of 180 kB per content process, which roughly matches out expectations of 2 times 40% of ~200Kb

[08:56:16.0398] <tcampbell>
(linux and osx are more because of various reasons..)

[08:56:49.0878] <tcampbell>
nbp: the base-content-js is usually sum of parent + 8-content divided by 9

[08:57:18.0464] <nbp>
tcampbell: ok, did not knew we had such a complex formula.

[08:57:58.0653] <nbp>
So we should roughtly be seeing slightly less than the optimization made to content processes.

[08:58:10.0281] <nbp>
 * So we should roughtly be seeing slightly less than the optimization made to each content process.

[08:58:28.0453] <tcampbell>
or maybe parent is excluded and it is 8 /8 ? I don't really know

[08:58:56.0179] <tcampbell>
the metric has probably changed in a few ways

[08:59:17.0734] <nbp>
-7.4% 🎉

[09:00:28.0552] <tcampbell>
indeed

[09:00:56.0120] <tcampbell>
and more to come :)

[09:01:15.0901] <tcampbell>
 * and more to come :) (self-hosted-zone removal; pinning bytecode for browser js)

[09:03:08.0854] <sdetar>

When we get this working for Android would we see similar wins?



[09:05:07.0837] <nbp>
sdetar: yes and no, Android only spawn a single content process AFAIR

[09:05:50.0831] <tcampbell>
right, but that base-content metric is tracked for the viability of fission, so yes it is important for android

[09:06:06.0541] <nbp>
but the amount of memory saving this adds already compensate for the cost added to the parent process.

[09:06:30.0763] <tcampbell>
but android will go many-process by end of year I thought?

[09:06:45.0397] <nbp>
/me is not aware.

[09:07:48.0159] <sdetar>
Thanks for the answers

[09:11:04.0399] <tcampbell>
sdetar: so I don't think it is urgent today, but it will be quite important in a few months, so we should at the very least know how much work is left

[09:14:09.0878] <nika>
IIRC android is at least aiming at getting Fission in the near future in at least a limited fashion, so memory savings there are worthwhile :-)

[09:14:34.0609] <sdetar>
tcampbell: that makes a lot of sense to me, do we have a separate bug for that work?

[09:14:44.0052] <tcampbell>
/me looks at @nbp

[09:16:05.0642] <nbp>
sdetar: yes, it is blocked by gecko-view intermittent failure, and a bit more code to make it work with the about:config switch (Bug 1710884)

[09:16:07.0104] <botzilla>
https://bugzil.la/1710884 — ASSIGNED (nbp) — Add IPC glue code for self-hosted XDR content [Android]

[09:18:34.0611] <sdetar>
nbp: Oh yeah, you had already pointed me too that

[09:21:13.0824] <nbp>
From my point of view, on android, the most important part is likely to be the time saved by decoding instead of parsing, more than the memory saving.

[09:22:31.0650] <tcampbell>
yeah, that is important too. We'd want to save to file to speed up main-process though, right?

[09:22:58.0066] <tcampbell>
I expect android parent process starts are very common with the android app switching model

[09:24:24.0281] <nbp>
yes, this is something which would matter more on Android.

[10:11:01.0239] <nika>
sfink: How does the rooting analysis determine if a type needs to be rooted? I got this error when trying to land a patch recently, and it's on a DOM type which doesn't seem like it should need to be rooted. https://treeherder.mozilla.org/logviewer?job_id=340215767&repo=autoland&lineNumber=18089

[10:12:59.0974] <sfink>
I'll take a look, but the quick answer is that it knows that any pointer to `js::gc::Cell` or a subclass, or any struct/class/union that contains such a pointer (recursively), needs to be rooted (unless it is marked as being rooted already.) There's a `gcTypes.txt` file that gives a full explanation of why it thinks a given type needs to be rooted, but I think I hid it inside of a `hazardIntermediates.tar.xz` file because the artifacts list was too long & messy.

[10:13:56.0905] <sfink>
ah, this is a `UniquePtr` case. The memory within a `UniquePtr` is considered to be as dangerous a place to keep things as is the stack. But that just defers the question to the contained type. Looking further...

[10:14:23.0363] <nika>
Ah, I think I understand then

[10:14:52.0750] <nika>
sfink: So the type is a DOM type which isn't being held by a normal UniquePtr, so it will derive from `nsWrapperCache` and contains an unrooted `JSObject*` iirc

[10:15:26.0402] <sfink>
yeah: GCPointer: mozilla::dom::BrowsingContextGroup
  inherits from nsWrapperCache
    contains field 'mWrapper' pointing to type JSObject
      inherits from js::gc::CellWithTenuredGCPointer<js::gc::Cell, js::Shape>
        inherits from js::gc::Cell
          which is annotated as a GCThing


[10:15:34.0418] <nika>
sfink: So it thinks this is a normal `UniquePtr<BrowsingCOntextGroup>` which uniquely owns the type, but it's actually a weirdly spelled `RefPtr<BrowsingContextGroup>` with behaviour tied to the destroy method

[10:15:53.0721] <nika>
(because of the custom deleter)

[10:16:23.0290] <nika>
Perhaps `UniquePtr` with custom deleters should be treated differently?

[10:16:24.0224] <sfink>
oh right, and GCPointer: mozilla::UniquePtr<mozilla::dom::BrowsingContextGroup, mozilla::dom::BrowsingContextGroup::KeepAliveDeleter>
  contains field 'mTuple' (with a pointer to unsafe storage) holding a mozilla::CompactPair<mozilla::dom::BrowsingContextGroup*, mozilla::dom::BrowsingContextGroup::KeepAliveDeleter>


[10:17:01.0971] <sfink>
so why is that safe? "KeepAliveDeleter" implies some kind of lifetime management, but what about pointer updates?

[10:18:10.0801] <sfink>
(I really ought to surface the type info in the hazards output file)

[10:19:12.0913] <nika>
> <@sfink:mozilla.org> so why is that safe? "KeepAliveDeleter" implies some kind of lifetime management, but what about pointer updates?

The code doesn't directly touch the `nsWrapperCache` - that type contains unsafe pointer stuff and manually tracks the value

[10:19:32.0658] <nika>
The deleter is just making the `UniquePtr` act like a move-only `RefPtr` which also calls a method before releasing

[10:20:43.0594] <sfink>
ah, https://searchfox.org/mozilla-central/source/dom/base/nsWrapperCache.h#75-81

[10:21:25.0657] <sfink>
it seems like maybe `nsWrapperCache` should be considered a rooted type

[10:21:50.0074] <nika>
Yeah, I'm kinda surprised this never came up before

[10:21:56.0696] <sfink>
me too

[10:22:01.0570] <nika>
I guess it's just because of `UniquePtr`?

[10:22:20.0217] <nika>
Because this _would_ be unsafe if you had `UniquePtr<BrowsingContextGroup>` with no custom deleter

[10:22:39.0453] <nika>
The correct solution might be to only treat `UniquePtr` as owning if it has a known deleter or something like that

[10:23:12.0607] <sfink>
I'm not understanding that part

[10:24:00.0218] <sfink>
the hazard analysis isn't complaining because you might `delete` the object with the deleter, it's complaining because it knows you're not tracing the object if you're holding it in a `UniquePtr`

[10:24:04.0842] <sfink>
but maybe I'm misunderstanding still

[10:25:17.0228] <nika>
I suppose I was seeing the behaviour of `RefPtr` and `nsCOMPtr` and seeing that those aren't treated like this

[10:25:50.0175] <nika>
And was seeing my custom deleter as analagous to them

[10:25:51.0205] <sfink>
I'd suggest adding `JS_HAZ_ROOTED` (it expands into an `__attribute__`) onto `nsWrapperCache`.

[10:26:35.0561] <sfink>
oh! You're saying that `RefPtr` is as unsafe as `UniquePtr`.

[10:26:52.0062] <nika>
Well, it is a shared owning reference to a data structure

[10:27:02.0471] <nika>
but traditionally we've held a lot of JS objects on the heap behind them

[10:27:09.0143] <sfink>
yes, I think you're probably right

[10:27:29.0211] <nika>
So if we were to mark it as special in the same way, a lot of cases would be firing incorrectly :-)

[10:27:32.0373] <sfink>
(about `RefPtr` and `nsCOMPtr` being unsafe)

[10:27:45.0095] <sfink>
yeah, that's the story of the hazard analysis

[10:28:07.0041] <sfink>
every time I try to strengthen it, I have to deal with tons of things it finds, most of them false alarms

[10:28:07.0174] <nika>
I mean, is it really unsafe? You should never have a `RefPtr<T>` where `T` contains unrooted JS objects which need to be rooted at the owner site

[10:28:47.0774] <nika>
The way we handle those is by having the C++ call `HoldJSObjects` and the type `T` becomes a root itself: https://searchfox.org/mozilla-central/rev/2f1a015b004b79f1145c81cdf86b15481a5630e2/xpcom/base/HoldDropJSObjects.h#63

[10:28:48.0228] <sfink>
it's not as unsafe as `UniquePtr`, because a `RefPtr<T>` could easily have something tracing that contained `T`

[10:28:58.0462] <sfink>
whereas with a `unique_ptr`, that's highly unlikely

[10:29:03.0438] <nika>
(or in the case of `nsWrapperCache` it's special)

[10:29:50.0593] <sfink>
right, and the hazard analysis doesn't try to detect whether something is protected by `HoldJSObjects`

[10:30:04.0246] <sfink>
that would be a useful extension, but would be tricky to implement

[10:30:25.0498] <nika>
Yeah, so the reason why it broke in my case is that I used `UniquePtr` in a non-unique way

[10:30:53.0718] <sfink>
is that object held somewhere?

[10:31:10.0601] <sfink>
("held" as in `HoldJSObject`)

[10:31:17.0694] <sfink>
oh, it's wrapper-cached, so no

[10:31:18.0570] <nika>
There's `nsWrapperCache`

[10:31:20.0393] <sfink>
and it doesn't need to be

[10:31:22.0566] <nika>
Which is special

[10:31:25.0543] <sfink>
right

[10:32:04.0017] <sfink>
definitely for the immediate problem, it seems like tagging `nsWrapperCache` with `JS_HAZ_ROOTED` should make the report go away and be a valid annotation

[10:33:00.0411] <sfink>
it might be worth looking into also treating `RefPtr` and `nsCOMPtr` as we treat `UniquePtr` to see how many problems that surfaces. My guess is it would require some fancy work to detect `HoldJSObject`.

[10:33:38.0889] <nika>
Yeah, it'll probably require that

[10:33:49.0402] <nika>
And I'm not sure you'll catch anything

[10:33:50.0739] <sfink>
as for special-casing a particular deleter -- sorry, I'm still not understanding why this would be unsafe without your custom deleter, except insofar as this `UniquePtr` isn't really pointing to unique storage.

[10:34:28.0763] <nika>
Yeah, my comment about special-casing deleters is based on the assumption that we aren't considering `RefPtr` and `nsCOMPtr`

[10:34:41.0762] <sfink>
ok, then I think I'm following what you're saying

[10:36:57.0880] <sfink>
it sounds like for maximal correctness, the hazard analysis ought to treat your specific deleter as a signal to treat `UniquePtr` as if it were `RefPtr`, except that at the moment that would give it a free pass, because the hazard analysis doesn't properly handle `RefPtr`. (And in your exact case, none of this matters because it's wrapper-cached.)

[10:38:03.0947] <sfink>
cool, thanks for pointing this out

[10:38:28.0936] <nika>
np

[10:43:52.0037] <nika>
sfink: `mach hazards bootstrap` doesn't seem to want to run on my machine - I'm guessing I need a compatible GCC?

[10:44:04.0225] <zbraniecki>
yulia: not sure how far along you are on thinking about Temporal, but FYI - ICU4X has engineers on getting ICU4X to support non-gregorian calendars for ECMA-402 Temporal use case - https://docs.google.com/document/d/1VVydmguGNCTEjFVhYVl9d0EBH34PfIETh3xCVgepzwE/edit?resourcekey=0-NcWu-l38IfZ4ytz8VBZ3ZQ#heading=h.mwn95cq0jjht

[10:44:21.0181] <sfink>
it should download a compatible GCC. Are you on Linux? I've only ever tried there.

[10:44:32.0532] <nika>
yeah, ubuntu 20.10 iirc

[10:44:57.0828] <sfink>
ok, I'm on Fedora, and I'm probably the only person who has ever run those commands. What's the error?

[10:45:07.0515] <sfink>
I should set up an Ubuntu VM.

[10:45:17.0572] <sfink>
although CI is using those commands, and they're Ubuntu

[10:45:37.0015] <yulia>
zbraniecki: anba has a partial implementation pending a few spec changes

[10:46:02.0696] <nika>
Oh, I think I figured it out. 1 sec

[10:46:49.0431] <nika>
sfink: hmm, nvm. error is:
```
 0:02.02 ERROR!!!!!! Could not find artifacts for a toolchain build named `linux64-gcc-8`. Local commits, dirty/stale files, and other changes in your checkout may cause this error. Make sure you are on a fresh, current checkout of mozilla-central. Beware that commands like `mach bootstrap` and `mach artifact` are unlikely to work on any versions of the code besides recent revisions of mozilla-central.
```

[10:47:26.0377] <sfink>
gah, I do run into that one sometimes. Usually for `clang-format`, though.

[10:48:14.0375] <sfink>
I wouldn't expect you to have touched things that would invalidate the hash

[10:48:44.0683] <nika>
I checked out `origin/central` before doing the fetch, so I don't think it should have an invalid hash

[10:48:59.0777] <sfink>
right, ok

[10:49:34.0746] <sfink>
I'm getting the same thing here

[10:50:10.0103] <sfink>
though I'm on an unclean checkout. Let me try reverting.

[10:50:43.0270] <sfink>
same thing

[10:52:33.0553] <sfink>
same thing with `mach artifact toolchain --from-build linux64-gcc-8`

[10:53:53.0191] <sfink>
oh wait, automation is using linux64-gcc-9

[10:54:12.0021] <sfink>
so there really isn't a `linux64-gcc-8`

[10:54:17.0063] <sfink>
ok, let me find where it sets that

[10:55:03.0141] <sfink>
maybe try changing https://searchfox.org/mozilla-central/source/js/src/devtools/rootAnalysis/mach_commands.py#128

[10:56:42.0061] <sfink>
that's enough to get `mach hazards bootstrap` working here

[10:56:52.0715] <sfink>
(note that it's probably easier to re-push to try)

[10:59:44.0603] <nika>
> <@sfink:mozilla.org> maybe try changing https://searchfox.org/mozilla-central/source/js/src/devtools/rootAnalysis/mach_commands.py#128

What should I change it to?

[11:00:00.0590] <sfink>
`s/linux64-gcc-8/linux64-gcc-9/`

[11:00:02.0317] <nika>
> <@sfink:mozilla.org> (note that it's probably easier to re-push to try)

I understand that, but I also like being able to run these things locally :-)

[11:00:04.0586] <nika>
cool! thanks

[11:01:04.0836] <nika>
seems like it's working, ty again

[11:01:36.0384] <sfink>
let me know if it breaks down at a later step. You're definitely on the road less traveled right now.

[11:01:46.0801] <sfink>
(but I'm happy to have testers!)

[11:02:11.0383] <sfink>
filed bug 1712172 for the GCC version update

[11:02:12.0714] <botzilla>
https://bugzil.la/1712172 — ASSIGNED (sfink) — `mach hazards bootstrap` uses out of date gcc compared to automation

[11:03:21.0011] <sfink>
filed bug 1712175 for `RefPtr`/`nsCOMPtr`

[11:03:22.0568] <botzilla>
https://bugzil.la/1712175 — NEW (nobody) — Treat RefPtr and nsCOMPtr as unsafe as UniquePtr, unless guarded by HoldJSObjects

[11:10:38.0643] <nika>
Hmm, seems like the compiler job perhaps got OOM-killed :-P
```
 3:04.68 g++: fatal error: Killed signal terminated program cc1plus
 3:04.69 compilation terminated.
```

[11:12:15.0436] <sfink>
ugh, I was running into that for a while, and changed... something that seemed to make it enough better that I stopped worrying about it.

[11:12:28.0270] <nika>
This is on the new threadripper build machine

[11:12:29.0699] <sfink>
I think I just dropped the `-j` value

[11:12:39.0814] <nika>
Yeah, I think it's probably just an overaggressive -J

[11:12:43.0547] <sfink>
 * I think I just reduced the `-j` value

[11:12:55.0277] <nika>
as we're running probably 64 g++ instances, with only 64Gb of RAM

[11:13:21.0361] <sfink>
this was in `mach hazards gather`, I assume?

[11:13:25.0831] <nika>
yup

[11:13:47.0595] <nika>
(it's still going right now because the computer has gone unresponsive lol)

[11:13:55.0993] <sfink>
it accepts the `-j` argument directly

[11:14:02.0609] <nika>
makes sense

[11:15:00.0897] <sfink>
I was experimenting it with limiting the default based on host memory size, but I guess I ended up not landing that

[11:15:08.0449] <sfink>
 * I was experimenting with limiting the default based on host memory size, but I guess I ended up not landing that

[12:07:43.0894] <nika>
sfink: I'm not sure that `-j` actually limits the number of jobs being run - I can run with `-j1` and `top` immediately fills with 100% cpu cc1plus instances

[12:08:05.0850] <sfink>
that's not good

[12:10:28.0715] <sfink>
I'll need to look a little bit later. I wonder if `taskset -c` would affect mach's autocomputed limit?

[12:10:50.0680] <sfink>
probably not

[12:12:47.0280] <sfink>
MOZ_PARALLEL_BUILD=16 *might* do something?

[12:13:56.0070] <nika>
Yup, that seems to do it

[13:45:14.0256] <mgaudet>

confession: Class static blocks passes most of the test262 tests. The tests it doesn't pass are related to some contention around handling of `await`, which is unresolved to me. Patches are out for review though, as these issues can be resolved later. 

[13:45:16.0973] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:19:48.0591] <chaircrusher>
Hey there all: Here's a good question: Is there a replacement for JSNewDateObjectMSec?

[14:20:09.0454] <chaircrusher>
i.e. go from time_t to a DateObject?

[14:32:31.0726] <evilpie>
https://searchfox.org/mozilla-central/source/js/public/Date.h

[14:38:00.0130] <tcampbell>
I think you need the `ClippedTime` stuff these days

[14:38:01.0526] <tcampbell>
https://searchfox.org/mozilla-central/rev/6e630edb09c3ab06d0103665b16c9ea7dce782c5/js/public/Date.h#59-120

[14:39:32.0456] <tcampbell>
so `JS::NewDateObject(cx, TimeClip(t))`, I believe

[14:39:46.0829] <tcampbell>
 * so `JS::NewDateObject(cx, JS::TimeClip(t))`, I believe

[14:43:32.0033] <chaircrusher>
thanks


2021-05-21
[19:41:37.0028] <glandium>
is there a knob to tell spidermonkey to always JIT code?

[19:41:44.0342] <glandium>
(in Firefox)

[19:42:44.0275] <glandium>
(context: I'm trying to reliably get some code path that goes c++->jit->c++ but I'm having a hard time not ending up with just the interpreter in between

[23:03:25.0886] <arai>
glandium: not "always", but there's option to tell SpiderMonkey to eagerly perform JIT compile.  setting `javascript.options.blinterp.threshold`, `javascript.options.baselinejit.threshold`, and `javascript.options.ion.threshold` prefs to 0 tells SpiderMonkey not to wait for the code to warmup before triggering JIT compilation

[23:05:50.0412] <glandium>
arai: thanks

[23:06:25.0042] <glandium>
In the meantime, I found that code run from the browser console somehow is jitted

[03:40:15.0783] <Ms2ger>
> <@yulia:mozilla.org> Ms2ger: do you have time to handle the comments here? https://github.com/w3c/ServiceWorker/pull/1444

I'll try to take a look today, but can't promise I'll be able to

[04:08:48.0357] <yulia>
ok, i can put together a pr?

[04:10:32.0701] <yulia>
(ill do it now)

[04:10:37.0389] <yulia>
 * ok, i can put together a pr

[08:09:44.0643] <chaircrusher>
Quick Q about JS_CallFunction. It takes a JS::HandleValueArray.   Can I pass in an autovaluevector? 

[08:13:51.0911] <chaircrusher>
I have a case where I know what the # of args is and I use a JS::AutoValueArray but if I don't know the # of args, I can't use that.

[08:17:16.0204] <tcampbell>
It looks like it? https://searchfox.org/mozilla-esr60/source/js/src/jsapi.h#301-306

[08:18:31.0780] <tcampbell>
(I think a few years ago `AutoValueVector` was replaced with `RootedVector<Value>`, but I think the concept is roughly the same)

[09:43:46.0103] <tcampbell>
is this technically allowed or not  in C++:
```
int foo(int* p) { return p[4]; }
int arr[2] = {};
foo(arr - 4);
```

[09:43:50.0659] <tcampbell>
 * is this technically allowed or not  in C++:
```cpp
int foo(int* p) { return p[4]; }
int arr[2] = {};
foo(arr - 4);
```

[09:47:38.0679] <tcampbell>
what I'm reading seems to suggest it is UB which isn't too surprising

[09:49:32.0796] <nbp>
Sounds like a lot of code in CallArgs …

[09:49:58.0776] <tcampbell>
https://blog.regehr.org/archives/1395

[10:24:26.0949] <mccr8>
I would have guessed it is okay, but my knowledge of what is undefined behavior is really limited to whatever is undefined in a CompCert intermediate language.

[10:32:38.0945] <sfink>
"It is undefined behavior to perform pointer arithmetic where the result is outside of an object" suggests that `arr - 4` is UB, even before the dereferencing.

[10:35:50.0644] <nbp>
This is also the reason why the `offset` C macro was considered UB as well.

[11:22:45.0682] <mccr8>
Ah right, I missed the part where the example that wasn't UB was exactly one past the end of the array. Anyways, invalid pointer math is valid in C Minor!

[11:56:31.0623] <sfink>
we don't use cminor around here, only dmajor and dminor

[13:51:00.0642] <sfink>
whoa, the semantics of DeadObjectWrapper are... interesting.

[13:51:06.0896] <sfink>
try predicting the output of

[13:51:13.0025] <sfink>
g = newGlobal({newCompartment: true});
obj = g.eval("obj = {}");
m = new Map();
m.set(g.obj, "vi");
nukeCCW(g.obj);
m.set(g.obj, "emacs");
print(`I use ${m.get(obj)} and ${m.get(g.obj)}`);


[13:51:29.0775] <sfink>
 * ```g = newGlobal({newCompartment: true});
obj = g.eval("obj = {}");
m = new Map();
m.set(g.obj, "vi");
nukeCCW(g.obj);
m.set(g.obj, "emacs");
print(`I use ${m.get(obj)} and ${m.get(g.obj)}`);```

[13:52:00.0911] <sfink>
 * ```
g = newGlobal({newCompartment: true});
obj = g.eval("obj = {}");
m = new Map();
m.set(g.obj, "vi");
nukeCCW(g.obj);
m.set(g.obj, "emacs");
print(`I use ${m.get(obj)} and ${m.get(g.obj)}`);```
```

[13:52:10.0670] <sfink>
 * ```
g = newGlobal({newCompartment: true});
obj = g.eval("obj = {}");
m = new Map();
m.set(g.obj, "vi");
nukeCCW(g.obj);
m.set(g.obj, "emacs");
print(`I use ${m.get(obj)} and ${m.get(g.obj)}`);
```

[13:52:32.0518] <sfink>
(I think I finally have the formatting right.)

[13:55:23.0895] <mgaudet>
O.o

[13:56:25.0719] <tcampbell>
g.obj is in wrong domain, so you nuked a temporary ccw?

[13:57:01.0312] <sfink>
No such thing as a temporary CCW. There's the one and only.

[13:57:15.0031] <mgaudet>
the second `g.obj` is a distinct wrapper from the first... I guess that's not _too_ surprising I guess? 

[13:57:23.0562] <sfink>
but I did disguise what's going on with `nukeCCW(g.obj)`

[13:58:22.0072] <sfink>
after nuking, the CCW becomes a DeadObjectWrapper, and `obj` binds to it. But `g.obj` retrieves the actual object and wraps it, and now there's no CCW for it anymore so it creates a new one.

[13:58:35.0057] <tcampbell>
oh would you look at the time... 

[13:58:48.0264] <sfink>
😀

[13:59:49.0047] <sfink>
so yeah, mgaudet is right, it's just that that would normally never happen because CCWs are supposed to be always shared and unique.

[13:59:57.0719] <sfink>
 * so yeah, mgaudet is right, it's just that that would normally never happen because CCWs are supposed to be always be shared and unique.

[14:00:21.0224] <sfink>
for the record, `obj === g.obj` is true before the nuke and false after

[14:24:53.0134] <chaircrusher>
Question:  In JS1.8.5 I had  a function like so: JSObject *getObject() { return this->m_Object; }
That worked fine for JS_SetProperty(context,foo.getObject(), "something", someVal);
After the Great Change Of API, I can still have a function returning JSObject *, but it throws a compile error because it can't convert a JSObject * to a JS::HandleObject, you have to convert the JSObject * to a JS::RootedObject and pass that instead.

[14:29:39.0861] <ptomato>
chaircrusher: I believe you can use `JS::HandleObject::fromMarkedLocation()` in your getObject method if `m_Object` is a `JS::Heap<JSObject*>` and you can guarantee that it is always traced

[14:30:31.0997] <chaircrusher>
It's defined in my class as a JS::PersistentRooted<JSObject *>

[14:32:10.0143] <chaircrusher>
Is there a different return value for ```JSObject *getObject() { return this->m_Object; }``` that's more copacetic for passing into e.g. JS_SetProperty?

[14:34:13.0198] <chaircrusher>
My understanding is that having a PersistentRooted in a C++ object is OK because if the C++ object gets deleted it will delete the PersistentRooted member and allow the GCThing to be garbage collected.

[14:35:50.0137] <ptomato>
yes, I think if it's PersistentRooted then you can also use `JS::HandleObject::fromMarkedLocation()` to return `JS::HandleObject` from getObject, but I'm not 100% sure

[14:36:52.0366] <ptomato>
(I believe it strongly enough to do it in my codebase, though: https://gitlab.gnome.org/GNOME/gjs/-/blob/master/gjs/atoms.h#L85-90)

[14:39:18.0796] <iain>
There's a [Handle constructor that takes a PersistentRooted argument](https://searchfox.org/mozilla-central/source/js/public/RootingAPI.h#1298-1304), so unless I'm missing something I don't think you need to use `fromMarkedLocation`

[14:42:05.0333] <chaircrusher>
LOL this compiles at least ```JS::HandleObject getObject() { return this->m_Object; }``` where this->m_Object is a JS::PersistentRooted<JSObject *>

[14:42:34.0195] <chaircrusher>
OK yeah @Iain that explains it.

[14:43:01.0242] <mgaudet>
confession: Wandered back into execution of private methods from within Debugger.Frame.eval; new opcode works, with baseline and baseline interpreter support. Found pre-existing bug while writing test cases (Bug 1712393), so that will need investigation next. 

[14:43:03.0007] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:43:04.0230] <botzilla>
https://bugzil.la/1712393 — NEW (nobody) — Crash evaluating static private method vs Debugger.frame.eval

[14:48:16.0517] <iain>
Taking a step back: JS::Object* is a raw pointer to an object. If a GC occurs, the object can be moved, so it's unsafe to keep such pointers alive across potential GCs. A rooted object is a pointer that has registered itself with the GCA handle is a pointer to a root. When a GC occurs, roots are updated if necessary to point to the new location of their referents. Handles don't need to be updated, because the roots don't move. SetProperty needs a handle so that its argument can't be invalidated if, say, we invoke a setter that allocates. Since PersistentRooted objects are always rooted, you can freely create a handle from them, so long as that handle doesn't outlive the object itself.

[15:22:43.0257] <sfink>
chaircrusher: in addition to what iain said, I'll add that `PersistentRooted` is a bit of a code smell, especially when used in something other than some form of global (C++) object. If, for example, the lifetime of your structure/class containing `m_Object` is somehow dependent on that object, as could easily happen if there's a cycle from `m_Object` back to your struct, then you'll almost certainly have a leak. (If the lifetime is managed elsewhere so that you'll force-delete your struct even if it's reachable via JS objects, then you're ok.)

[15:24:05.0513] <sfink>
the safe-from-leaks way of doing this is to use a `Heap<JSObject*>` and then trace it at the appropriate time (where what's appropriate is going to depend on your embedding.)

[15:24:26.0760] <sfink>
`PersistentRooted` is the easiest way to prevent things from getting collected out from under you, but it's also the easiest way to leak.

[15:24:43.0679] <iain>
 * Taking a step back: JS::Object* is a raw pointer to an object. If a GC occurs, the object can be moved, so it's unsafe to keep such pointers alive across potential GCs. A rooted object is a pointer that has registered itself with the GC. A handle is a pointer to a root. When a GC occurs, roots are updated if necessary to point to the new location of their referents. Handles don't need to be updated, because the roots don't move. SetProperty needs a handle so that its argument can't be invalidated if, say, we invoke a setter that allocates. Since PersistentRooted objects are always rooted, you can freely create a handle from them, so long as that handle doesn't outlive the object itself.

[15:29:10.0502] <sfink>
any use of `fromMarkedLocation` makes me a little nervous too, since it's easy to lie about the "marked location" part. We normally return a bare `JSObject*` and then put it in a `RootedObject` immediately before using it. But eg ptomato's example above looks pretty safe, since it's using `Heap<JSObject*>` and I can see the `trace` method nearby.

[15:33:08.0307] <sfink>
if your `foo` is a wrapper struct around a `JSObject*`, then it makes sense to be fancy and do the `fromMarkedLocation` thing. Otherwise, it would be better to write a `setProperty()` that takes in `foo`, calls `getProperty()` on it internally and immediately stores the result into a `RootedObject`, and passes that into `JS_SetProperty`.


2021-05-22
[19:09:33.0415] <bpeiris>
Hello good people. I'm a dev on the Mozilla Hubs team and we've noticed an interesting performance issue that I'd like to report. We've got a simple reproduction, but is there a preferred way to present and test a micro benchmark? As in instructions to reproduce the issue directly against the spidermonkey engine? I recall someone from the team mentioning this during an all-hands in the olden days, but I forget the person and the details.

[20:40:46.0181] <arai>
bpeiris: hi, to report perf issue on Firefox, Firefox Profiler https://profiler.firefox.com/ helps you.  there you can capture a performance profile, and share it.  attaching the captured profile's URL to a bug on bugzilla lets devs investigate the issue

[20:43:26.0717] <bpeiris>
Ah, okay. I can do that. Thanks for the info!


2021-05-23
[11:27:58.0760] <ptomato>
what does JS::ServoSizes::Kind::NonHeap signify?

[11:28:04.0136] <ptomato>
e.g. in JS::ClassInfo https://searchfox.org/mozilla-central/source/js/public/MemoryMetrics.h#183

[12:08:08.0857] <evilpie>
I guess this is used when embedded in Servo? https://github.com/servo/servo

[12:08:15.0353] <evilpie>
I hadn't heard of this before

[12:24:06.0892] <ptomato>
I'm using it to classify the results of JS::CollectRuntimeStats, kind of like about:memory

[12:24:25.0930] <ptomato>
GCHeap, MallocHeap, GCHeapUnused etc are pretty straightforward as to what they represent

[12:24:42.0608] <ptomato>
but NonHeap ... as in stack space?

[12:28:06.0416] <evilpie>
https://searchfox.org/mozilla-central/source/js/xpconnect/src/XPCJSRuntime.cpp#1689 has the relevant description I think

[12:28:39.0605] <evilpie>
It's definitely not stack space, seems like it's shared memory

[12:28:57.0494] <ptomato>
oh, thanks

[16:22:58.0516] <ptomato>
is there any way to make JS::ObjectPrivateVisitor more useful for types that are not nsISupports?

[16:22:59.0010] <ptomato>
https://searchfox.org/mozilla-central/source/js/public/MemoryMetrics.h#862

[16:24:03.0533] <ptomato>
e.g. the ability to pass a user data pointer to the sizeOfIncludingThis callback

[16:24:36.0499] <ptomato>
with just the bare pointer, I can't tell what type to cast it to, to get accurate size information

[16:24:58.0801] <ptomato>
(I guess nsISupports has a magic byte at a known location that lets you know what type it is, or something?)


2021-05-24
[05:47:32.0888] <tcampbell>
NonHeap means it didn't go through the normal allocator. For example in Fx, we count the total allocations given out and can track the difference between between that and what reporters show. So shared-memory or mmap is a common source of nonheap

[05:49:10.0916] <tcampbell>
it affects the "heap unclassified" accounting. mistakes in the kind just lead to confusion rather than crashes

[05:49:20.0196] <tcampbell>
/me not actually here today..

[07:22:17.0035] <mccr8>
ptomato: it looks like the object private visitor is only used for the orphan DOM node reporter. So I'm not sure how easy it would be to change to do something else.

[07:22:33.0312] <mccr8>
And yes, nsISupports is like an implementation of COM, so there's a way to do dynamic casting.

[07:24:56.0163] <mccr8>
Generally, memory reporting for C++ starts out from C++, but in the case of orphan DOM nodes you can have C++ that is held alive only by JS.

[07:25:14.0673] <mccr8>
Looks like I implemented that back in 2012. Time flies.

[09:00:23.0442] <nbp>
confession: Currently drafting a decision tree to help developers and users with leak investigation. In addition, this is a good support for finding complex tasks where Firefox could provide better tooling support.

[09:00:25.0711] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2021-05-25
[18:39:20.0751] <oush9>
hey, so is ES6 a good build target for web extensions?

[18:39:43.0671] <oush9>
i'd like to support chrome too.

[20:31:51.0726] <arai>
oush9: try checking https://kangax.github.io/compat-table/es6/

[20:32:18.0404] <oush9>
thanks

[20:32:22.0012] <arai>
there you can see which feature is supported by which version of browsers

[20:32:59.0973] <arai>
almost all features of ES6 are supported by major browsers (except tail call optimization)

[06:18:03.0515] <dbezhetskov>
anba: gentle ping https://phabricator.services.mozilla.com/D113218

[06:48:02.0134] <yulia>
Ms2ger: fingers crossed that lands!

[06:48:12.0038] <Ms2ger>
Indeed!

[07:13:01.0621] <ANdi>
Hello folks I would highly apreciate if someone could help me understand where is located the implicit copy ctor for https://searchfox.org/mozilla-central/source/js/public/RootingAPI.h#580

[07:13:19.0689] <ANdi>
I have a clang error with the new clang trunk version that I would like to fix

[07:13:32.0467] <ANdi>
[task 2021-04-22T19:26:04.261Z] 19:26:04    ERROR -  /builds/worker/workspace/obj-build/dist/include/js/RootingAPI.h:650:3: error: definition of implicit copy constructor for 'Handle<JSFunction *>' is deprecated because it has a user-declared copy assignment operator [-Werror,-Wdeprecated-copy]
[task 2021-04-22T19:26:04.261Z] 19:26:04     INFO -    DELETE_ASSIGNMENT_OPS(Handle, T);
[task 2021-04-22T19:26:04.261Z] 19:26:04     INFO -    ^
[task 2021-04-22T19:26:04.261Z] 19:26:04     INFO -  /builds/worker/workspace/obj-build/dist/include/js/RootingAPI.h:189:15: note: expanded from macro 'DELETE_ASSIGNMENT_OPS'
[task 2021-04-22T19:26:04.261Z] 19:26:04     INFO -    Wrapper<T>& operator=(const Wrapper<T>&) = delete;

[07:27:28.0958] <jandem>
ANdi: IIUC the issue is that the compiler no longer wants to generate an implicit copy ctor in this case, so we either need to define one ourselves or delete it

[07:28:44.0654] <ANdi>
> <@jandem:mozilla.org> ANdi: IIUC the issue is that the compiler no longer wants to generate an implicit copy ctor in this case, so we either need to define one ourselves or delete it

would it be OK for you if we delete it?

[07:30:03.0066] <jandem>
ANdi: doesn't that result in compile errors? 

[07:31:23.0294] <ANdi>
> <@jandem:mozilla.org> ANdi: doesn't that result in compile errors?

oh right, i think it will fail because of https://searchfox.org/mozilla-central/source/js/public/Class.h#167

[07:44:57.0046] <ANdi>
> <@jandem:mozilla.org> ANdi: doesn't that result in compile errors?

would https://paste.mozilla.org/0R9K39A1 be enough? 

[07:46:15.0495] <jandem>
jonco: ^

[08:14:19.0954] <jonco>
ANdi: sure, that looks fine

[10:30:09.0791] <mkaply>
Question: Boeing reporting a lot of random JS crashes on 78 ESR. Some are in JSObject::maybeUnwrapAs<js::MapObject>() and there are other random JS crashes. When JS crashes are all over the place, is that usually a memory issue? https://groups.google.com/a/mozilla.org/g/enterprise/c/IK44sVzF3e4/m/1MJh40mXAAAJ and then https://groups.google.com/a/mozilla.org/g/enterprise/c/IK44sVzF3e4/m/0OxYqyDRAQAJ

[10:41:54.0353] <mgaudet>
Those crashes are definitely all over the place. Very much seems like a memory corruption issue, could be bad RAM

[10:42:34.0117] <tcampbell>
mkaply: I see in-process mcaffee DLLs. Could this be AV interference?

[10:42:57.0130] <mkaply>
tcampbell: Possibly. I'll ask about that.

[10:43:44.0032] <tcampbell>
Perhaps the AV updating itself is the difference between clean install and not

[10:45:32.0123] <nbp>
mgaudet: I would agree, but if multiple employee are experiencing the same crashes on multiple conputers, this would sound unlikely too.

[10:45:47.0113] <mgaudet>
Yeah... agreed. 

[10:46:00.0518] <mgaudet>
The crashes are -super weird-

[10:46:31.0785] <mgaudet>
no clear underlying pattern, baffling symptoms. And the fact that the install gets hooped too is suprising

[10:46:46.0127] <nbp>
Maybe a corrupted binary could explain that.

[10:47:53.0721] <nbp>
Enterprise frequently distribute the same software to multiple computers, if a binary corruption happened while making the image, this could be an explanation.

[10:52:14.0184] <nbp>
The maybeUnwrapAs crashes always have the same bottom bits set to: 0x0b710 which sound like some offset within something quite large.

[13:15:17.0838] <chaircrusher>
Quick question about time. In JS 1.8.5 the call to go from a time_t to a JS::DateObject was ```JS_NewDateObjectMsec(JSContext *cx, double msec)``` -- in 'modern' Spidermonkey is this equivalent: ```JS::ClippedTime t(JS::TimeClip(msec)); JS::RootedValue _x(context,JS::TimeValue(t)); ``` 

[14:01:56.0475] <tcampbell>
chaircrusher: no, "TimeValue" is a double, not a Date. You'll want `NewDateObject`

[14:48:21.0904] <chaircrusher>
thanks tcampbell 

[15:04:45.0709] <mgaudet>
confession: Spent most of the day chasing down a debugger issue w.r.t. unreferenced static private methods. No longer crashing, but my high hopes for Debugger.Frame.eval don't seem to have panned out quite yet. Tomorrow

[15:04:48.0591] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[16:00:10.0245] <myau>
hello, I am looking at this bug https://bugzilla.mozilla.org/show_bug.cgi?id=1712321 how can i see the assembly code that is generated (like the example given by the opening post)

[16:09:52.0789] <myau>
i am thinking is the machine code generated by the cpp code itself but how can i examine it for an arbitrary piece of js code

[16:10:45.0636] <iain>
myau: There's a trick described in [this blog post](https://www.mgaudet.ca/technical/2019/4/9/a-beginners-guide-to-spidermonkeys-macroassembler) where you can use `masm.breakpoint()` to find it in a debugger

[16:11:15.0697] <iain>
You can also try `IONFLAGS=codegen`, but be prepared for a lot of output

[16:12:24.0080] <tcampbell>
I'd suggest taking a peek at this blog post: https://blog.mozilla.org/attack-and-defense/2020/09/15/inspecting-just-in-time-compiled-javascript/

[16:13:12.0437] <iain>
Oh, right, I always forget about `disnative`

[16:14:41.0810] <tcampbell>
Additionally, if you are new to WASM experimentation, I'd suggest studying this test case for how to build minimal wasm test cases using wasmTextToBinary https://searchfox.org/mozilla-central/source/js/src/jit-test/tests/wasm/integer.js#187

[16:46:17.0739] <tcampbell>
I ended up with a test case something like:
```js
let code = `
(module
    (func
        (export "fn")
        (param i64)
        (result i64)
        (i64.mul (local.get 0) (i64.const 5))))`;

let wasm = wasmTextToBinary(code)
assertEq(WebAssembly.validate(wasm), true);

let module = new WebAssembly.Module(wasm);
let instance = new WebAssembly.Instance(module, {});

print(disnative(instance.exports.fn));

```

[16:53:27.0078] <myau>
thanks

[16:55:43.0306] <myau>
now I'm trying to examine the machine code generated by a simple function ```function f(a){return a*5}``` using ```disnative``` and it never performs any ```imul``` instruction, it also doesn't load the 0x05 value into a register like in the bug's example, am I missing something?


2021-05-26
[17:00:14.0767] <arai>
what's your testcase?

[17:04:12.0783] <myau>
I am not using a testcase yet, I fiddling around in the shell like in this post https://blog.mozilla.org/attack-and-defense/2020/09/15/inspecting-just-in-time-compiled-javascript/

[17:10:06.0457] <iain>
 ```
js> function foo(a) { return a * 5; }
js> for (var i = 0; i < 10000; i++) { with ({}) {} foo(i); } 
49995
js> print(disnative(foo))
; backend=ion
00000000  40 f6 c4 0f               test $0x0F, %spl
00000004  0f 84 01 00 00 00         jz 0x000000000000000B
0000000A  cc                        int3
0000000B  48 8b 44 24 28            movq 0x28(%rsp), %rax
00000010  4c 8b d8                  mov %rax, %r11
00000013  49 c1 eb 2f               shr $0x2F, %r11
00000017  41 81 fb f1 ff 01 00      cmp $0x1FFF1, %r11d
0000001E  0f 85 09 03 00 00         jnz 0x000000000000032D
00000024  8b c0                     mov %eax, %eax
00000026  6b c0 05                  imul $0x05, %eax, %eax
00000029  0f 80 05 03 00 00         jo 0x0000000000000334
0000002F  b9 ff ff ff ff            mov $0xFFFFFFFF, %ecx
00000034  48 3b c1                  cmp %rcx, %rax
00000037  0f 86 01 00 00 00         jbe 0x000000000000003E
```

[17:13:52.0146] <myau>
huh, that's way shorter and more readable than what I get

[17:14:03.0255] <iain>
Oh, there's more output, I just trimmed the end

[17:14:20.0032] <iain>
But I suspect that the main difference is that I've got ion output, and you're probably looking at baseline

[17:14:53.0860] <iain>
In which case `JSOp::Mul` is implemented using an inline cache, so instead of seeing an imul you're just seeing a jump to the IC chain

[17:18:28.0486] <iain>
I suspect that the problem is inlining: we end up compiling the top-level loop and inlining `foo`, so `foo` never gets a script of its own. I circumvented that problem by adding a `with ({}) {}` statement to the top-level loop, which prevents it from being compiled and forces us to compile `foo` standalone

[17:18:40.0284] <iain>
It seems like there should be a more robust way to do that, though

[17:21:35.0668] <myau>
> I suspect that the problem is inlining: we end up compiling the top-level loop and inlining `foo`, so `foo` never gets a script of its own. I circumvented that problem by adding a `with ({}) {}` statement to the top-level loop, which prevents it from being compiled and forces us to compile `foo` standalone

makes sense! this aligns more with the machine code I was getting

[17:22:34.0105] <iain>
Okay, try running the shell with `--ion-inlining=off and --no-threads`. This will prevent the function you want to disassemble from being inlined into the top-level code, and ensure that we don't cancel our off-thread ion compilation after the loop stops

[17:23:02.0777] <iain>
```
dist/bin/js --ion-inlining=off --no-threads
js> function foo(a) { return a * 5; }
js> for (var i = 0; i < 1500; i++) { foo(i); }
7495
js> print(disnative(foo))
; backend=ion
...
```

[17:33:05.0267] <tcampbell>
This is a wasm issue I thought? (i64.mul doesn't exist in vanilla js)

[18:35:48.0586] <DerekNonGeneric>
caroline: how do i test out your color generator on the new site?

[18:39:03.0211] <DerekNonGeneric>
the new site is delightful by the way -- very well done

[21:54:26.0619] <ptomato>
do the malloc heap numbers from JS::CollectRuntimeStats include memory added with JS::AddAssociatedMemory, or do they only come from sizeOfIncludingThis()?

[22:01:14.0534] <caroline>
Dereknotgeneric it hasnt landed yet, ill let you know when it does

[22:59:58.0111] <er.das.surajeet>
I am new to contribution to Mozilla. I have just submitted my first patch. When can I expect the reviewer to send any review ?

[23:00:51.0208] <arai>
er.das.surajeet: usually within a week.  which bug are you working on?

[23:02:32.0583] <er.das.surajeet>
> <@arai:mozilla.org> er.das.surajeet: usually within a week.  which bug are you working on?

Bug 1673913

[23:02:33.0904] <botzilla>
https://bugzil.la/1673913 — NEW (nobody) — ContentIterator.cpp: do not use 'else' after 'return'

[23:02:47.0325] <er.das.surajeet>
> <@botzilla:mozilla.org> https://bugzil.la/1673913 — NEW (nobody) — ContentIterator.cpp: do not use 'else' after 'return'

yes 

[23:03:58.0418] <arai>
er.das.surajeet: when did you submit?

[23:04:09.0584] <arai>
I don't see recent patch there.  (there are 2, but they're old)

[23:04:52.0780] <er.das.surajeet>
> <@arai:mozilla.org> er.das.surajeet: when did you submit?

yesterday at evening

[23:05:02.0644] <arai>
how did you submit?

[23:05:28.0783] <arai>
looks like your patch was either not submitted, or submitted to different bug, or not associated with the bug

[23:06:45.0514] <er.das.surajeet>
I submitted as described in https://firefox-source-docs.mozilla.org/contributing/contribution_quickref.html

[23:07:04.0695] <arai>
have you used `moz-phab` command ?

[23:07:24.0190] <er.das.surajeet>
yes yeah I did

[23:07:33.0797] <arai>
what commit message did you use?

[23:07:56.0409] <arai>
also, do you have the output of the moz-phab command?

[23:08:49.0357] <er.das.surajeet>
> <@arai:mozilla.org> what commit message did you use?

Bug 1673913 - Removed else branch after return statement in ContentIterator.cpp . r=mccr8

[23:08:50.0638] <botzilla>
https://bugzil.la/1673913 — NEW (nobody) — ContentIterator.cpp: do not use 'else' after 'return'

[23:09:12.0559] <er.das.surajeet>
> <@arai:mozilla.org> also, do you have the output of the moz-phab command?

I did not get any actually

[23:09:27.0421] <arai>
I mean, the message printed by moz-phab command

[23:09:35.0958] <arai>
can you try running the command again?

[23:09:45.0142] <er.das.surajeet>
sure

[23:09:55.0796] <er.das.surajeet>
shall i repeat everything ?

[23:10:07.0690] <arai>
no, just `moz-phab submit`

[23:11:11.0742] <arai>
that's a command to submit a changeset you've created

[23:13:25.0122] <er.das.surajeet>
As soon as I ran the command, it shows 'Starting up' and then no more messages .

[23:14:03.0175] <arai>
is the command still running?

[23:14:13.0731] <er.das.surajeet>
no no

[23:14:33.0753] <arai>
are you inside mozilla-unified (or mozilla-central) directory?

[23:14:44.0846] <er.das.surajeet>
mozilla-unified

[23:14:52.0235] <arai>
what does `hg parent` say?

[23:15:29.0906] <er.das.surajeet>
changeset:   649047:12d7cc1c7cdd
bookmark:    central
tag:         tip
parent:      649038:9a3c2b7dfe84
user:        surajeet310 <surajeet310@gmail.com>
date:        Tue May 25 21:12:21 2021 +0530
summary:     Bug 1673913 - Removed else branch after return statement in ContentIterator.cpp . r=mccr8


[23:15:31.0425] <botzilla>
https://bugzil.la/1673913 — NEW (nobody) — ContentIterator.cpp: do not use 'else' after 'return'

[23:16:04.0006] <arai>
is there any other message than "Starting up", for `moz-phab submit` ?

[23:16:19.0568] <arai>
if you get any other, can you pastebin it to https://paste.mozilla.org/ ?

[23:16:53.0956] <er.das.surajeet>
actually there isn't any

[23:17:13.0182] <arai>
which OS are you on?

[23:17:41.0742] <er.das.surajeet>
Ubuntu 20.04

[23:17:55.0490] <arai>
what does `which moz-phab` say ?

[23:19:01.0385] <er.das.surajeet>
same as moz-phab submit

[23:19:17.0378] <arai>
what do you mean?

[23:19:47.0813] <er.das.surajeet>
'Starting Up'

[23:19:58.0188] <arai>
what exact command did you type?

[23:20:18.0477] <er.das.surajeet>
moz-phab submit

[23:20:32.0082] <arai>
can you type `which moz-phab` ?

[23:23:24.0631] <er.das.surajeet>
/home/my-systemname/.local/bin/moz-phab

[23:24:27.0469] <arai>
sounds like there's something wrong with your moz-phab installation, and that results in quitting just after "starting up" message.  can you try `moz-phab self-update` ?

[23:24:46.0482] <er.das.surajeet>
sure 

[23:25:22.0186] <er.das.surajeet>
done

[23:25:39.0635] <arai>
did you get `Updating libphutil...` etc ?

[23:26:29.0777] <er.das.surajeet>
No every message says Requirement already satisfied

[23:26:49.0843] <arai>
what does `moz-phab version` say?

[23:27:26.0679] <er.das.surajeet>
MozPhab (0.1.99)

[23:27:36.0336] <arai>
hm, sounds good

[23:27:45.0389] <arai>
can you try `moz-phab submit` again?

[23:27:51.0644] <er.das.surajeet>
sure

[23:28:38.0285] <er.das.surajeet>
Its still the same

[23:28:47.0285] <arai>
what does `hg status` say?

[23:30:03.0392] <er.das.surajeet>
I am sorry it doesn't say anythong

[23:30:08.0505] <er.das.surajeet>
*anything

[23:30:23.0420] <arai>
yeah, printing nothing is fine.  it just means there's no uncommitted changes

[23:30:42.0572] <arai>
and in that case `moz-phab submit` is supposed to work...

[23:31:37.0018] <arai>
can you run `moz-phab submit; echo $?` ?  that will show exit status of moz-phab command. that'll tell us whether it quits unexpectedly or not

[23:31:52.0766] <er.das.surajeet>
okay

[23:33:05.0390] <er.das.surajeet>
Phabricator Error: You don't have credentials needed to access Phabricator.
Please run the following command to configure moz-phab:

   moz-phab install-certificate
 
Phabricator Error: You don't have credentials needed to access Phabricator.
Please run the following command to configure moz-phab:

   moz-phab install-certificate
 
Failed to use Conduit API


[23:33:18.0574] <er.das.surajeet>
message of moz-phab submit

[23:33:32.0948] <er.das.surajeet>
actually i am sorry i had a display issue

[23:34:08.0569] <arai>
okay, then try following the message

[23:35:38.0748] <er.das.surajeet>
yeah thanks a lot for the help

[23:53:18.0681] <er.das.surajeet>
> <@arai:mozilla.org> okay, then try following the message

 * This revision has not changed and will not be submitted.
No changes to submit.


[23:53:30.0568] <er.das.surajeet>
this is what i got after moz-phab submit

[23:53:39.0943] <arai>
is that the entire output?

[23:54:03.0653] <er.das.surajeet>
Submitting 1 commit for review
(D115968) 649048:e6c8040dc2fe Bug 1673913 - Removed else branch after return statement in ContentIterator.cpp . r=mccr8
 * This revision has not changed and will not be submitted.
No changes to submit.


[23:54:05.0087] <botzilla>
https://bugzil.la/1673913 — ASSIGNED (surajeet310) — ContentIterator.cpp: do not use 'else' after 'return'

[23:54:49.0354] <arai>
sounds like you've already submitted it 4 minutes ago

[23:55:06.0386] <arai>
try checking the bugzilla page

[23:55:11.0473] <er.das.surajeet>
sure

[23:55:20.0599] <arai>
now your patch is listed under "Phabricator Revisions" list and "Attachments"

[23:55:40.0932] <er.das.surajeet>
okay

[23:55:58.0238] <er.das.surajeet>
i checked the bugzilla page ...it says i am assigned

[23:57:45.0775] <arai>
in the patch, it looks like you've removed more than you're supposed to remove

[23:58:13.0730] <er.das.surajeet>
i m sorry i did'nt understand

[23:59:00.0768] <arai>
commented

[23:59:37.0500] <arai>
 * commented to the phabricator revision

[00:01:49.0405] <arai>
the bug is about that, `if (cond) { X; return; } else { Y; }` can be written as `if (cond) {  X; return; } Y;`  because then-branch always returns

[00:02:02.0928] <arai>
it's not about that the else-branch there isn't necessary

[00:02:25.0018] <er.das.surajeet>
okay got it...and i am working on it and submitting it again

[00:45:35.0716] <er.das.surajeet>
> <@arai:mozilla.org> the bug is about that, `if (cond) { X; return; } else { Y; }` can be written as `if (cond) {  X; return; } Y;`  because then-branch always returns

well in moz-phab submit, do I have to mention the old and new revison number

[00:45:57.0145] <er.das.surajeet>
if yes then can you tell me which is the revision number

[00:46:28.0041] <arai>
the revision number is appended to the commit message on the initial submit

[00:46:57.0632] <arai>
and moz-phab uses it for subsequent submit

[00:47:24.0690] <arai>
so, unless you've overwritten it, you don't have to specify any

[00:48:42.0011] <er.das.surajeet>
submitted !

[00:57:13.0548] <er.das.surajeet>
How should I merge two reviews ?

[02:06:35.0519] <er.das.surajeet>
I submitted the patch for bug 1673913

[02:06:40.0757] <botzilla>
https://bugzil.la/1673913 — ASSIGNED (surajeet310) — ContentIterator.cpp: do not use 'else' after 'return'

[02:15:21.0609] <er.das.surajeet>
> <@er.das.surajeet:mozilla.org> I submitted the patch for bug 1673913

waiting for the review

[02:35:12.0720] <stuta>
Hello. Is tehre any way to get global function from evaluated module? I'm using as a workaround JS_GetProperty(cx, *global, "String", &val) and then I get String.moduleCall = function(){} using JS_GetProperty(cx, obj, "moduleCall", moduleCallFunction). Then I can call moduleCall() from C++, but messing with global js objects is not pretty.

[02:39:03.0810] <evilpie>
stuta: Why is this function defined on String? Is that required?

[02:39:56.0548] <evilpie>
what you are describing seems to me like the obvious way of retrieving methods defined on a global object

[02:44:04.0307] <er.das.surajeet>
I dropped two previous patches but it is still showing in Phabricator. I am asked to merge all three patches, but as mentioned I deleted the previous two. What am I supposed to do ?

[02:53:05.0427] <evilpie>
> <@er.das.surajeet:mozilla.org> I dropped two previous patches but it is still showing in Phabricator. I am asked to merge all three patches, but as mentioned I deleted the previous two. What am I supposed to do ?

`moz-phab patch` can bring be used to retrieve existing revisions

[02:54:16.0812] <evilpie>
> <@er.das.surajeet:mozilla.org> I dropped two previous patches but it is still showing in Phabricator. I am asked to merge all three patches, but as mentioned I deleted the previous two. What am I supposed to do ?

 * `moz-phab patch`  can be used to retrieve existing revisions

[03:12:06.0468] <arai>
er.das.surajeet: what's the current state?

[03:13:35.0443] <arai>
according to the message in the revision page, you don't have the previous 2 changesets locally?

[03:14:22.0463] <arai>
what does `hg log --follow -l4` say?  it will show recent 4 changesets

[03:19:46.0339] <er.das.surajeet>
It shows the most recent commit I made.

[03:29:51.0018] <arai>
what's the next one?

[03:29:56.0994] <arai>
it should show 4 changesets

[03:31:19.0186] <er.das.surajeet>
It does but those are somebody else's

[03:31:40.0987] <er.das.surajeet>
okay now the latest commit is there

[03:31:55.0610] <er.das.surajeet>
i am waiting for the review

[03:32:11.0830] <arai>
what's the output of `hg log -pr .` ?  it shows the content of the topmost changeset

[03:33:15.0826] <arai>
if you've just dropped 2 changesets before it, your current changeset would be incomplete

[03:33:38.0265] <arai>
as the patch attached to the bug is incomplete

[03:34:06.0670] <er.das.surajeet>
can't i delete all of them and submit anew ?

[03:34:22.0126] <arai>
you can just modify the current one with correct fix

[03:34:36.0075] <arai>
try checking the output of the above, and also the content of the file

[03:34:40.0970] <arai>
to see what's the current state

[03:34:44.0027] <er.das.surajeet>
okay

[03:40:32.0484] <stuta>
> <@evilpie:mozilla.org> what you are describing seems to me like the obvious way of retrieving methods defined on a global object

Function is defined on String because I can't find any documentation how to get a pointer to a function in file. Is there some object that contains functions in file? Or is there a way to call function by name?

[03:42:23.0031] <evilpie>
I am not sure what that means. Global named functions are defined on the global object.

[03:43:17.0659] <stuta>
And how to get that global object?

[03:43:47.0681] <arai>
`JS::CurrentGlobalOrNull(cx)`

[03:44:29.0403] <evilpie>
JS::CurrentGlobalOrNull

[03:48:49.0725] <arai>
btw, I'm not sure if global variables are defined on global object inside module

[03:50:30.0571] <arai>
if you explicitly store the value into `globalThis`, it would be in the global object

[03:50:39.0374] <arai>
 * if you explicitly store the value into `globalThis`'s property, it would be in the global object

[03:50:49.0402] <evilpie>
oh good point

[03:51:11.0694] <arai>
I thought, there's extra environment in module

[03:51:17.0122] <arai>
for variables

[03:51:29.0189] <arai>
(or something along that line

[03:52:01.0212] <stuta>
this does not work:
		RootedObject obj(cx, nullptr);
		obj = JS::CurrentGlobalOrNull(cx);
		if (!obj)
			return -11;
		bool found;
		if (!JS_HasProperty(cx, obj, functionName, &found))

[03:52:30.0971] <stuta>
this is module code: "function hello(msg){ return 'Hello ' }"

[03:52:41.0744] <arai>
in the JS file's side, try storing the function into `globalThis`'s property

[03:57:19.0947] <stuta>
ok, now this works, in js I set: globalThis.hello = hello -- hello is function
and now I can get pointer to function:

		RootedValue val(cx);
		if (!JS_GetProperty(cx, *global, "globalThis", &val))
			return -10;
		JS::RootedObject obj(cx, &val.toObject());
		if (!obj)
			return -11;
		bool found;
		if (!JS_HasProperty(cx, obj, functionName, &found))
			return -12; // 0 is ok
		if (debugPrint)
			printf("spiderjs JS_HasProperty '%s' found: %d\n", functionName, found);
		if (found) {
			if (!JS_GetProperty(cx, obj, functionName, moduleCallFunction))
				return -13;
			hasModuleCall = true;
		}


[03:58:20.0300] <er.das.surajeet>
> <@arai:mozilla.org> what's the output of `hg log -pr .` ?  it shows the content of the topmost changeset

It does show the content of the topmost changeset

[03:58:36.0463] <arai>
er.das.surajeet: yes, can you check the content?

[03:58:42.0153] <stuta>
So it's the same way but globalThis is much cleaner than polluting String to some other global object. Thanks!

[03:58:44.0462] <arai>
if you're not sure, please pastebin the output

[03:58:58.0416] <arai>
er.das.surajeet: https://paste.mozilla.org/

[03:59:44.0337] <er.das.surajeet>
> <@arai:mozilla.org> er.das.surajeet: yes, can you check the content?

changeset:   649053:23465e2c8673
bookmark:    central
tag:         tip
parent:      649038:9a3c2b7dfe84
user:        surajeet310 <surajeet310@gmail.com>
date:        Wed May 26 14:26:19 2021 +0530
summary:     Bug 1673913 -Replaced the else branch with the statement itself and made the necessary changes to solve the error: use of undeclared identifier 'lastNode' in ContentIterator.cpp .r=mccr8

diff --git a/dom/base/ContentIterator.cpp b/dom/base/ContentIterator.cpp
--- a/dom/base/ContentIterator.cpp
+++ b/dom/base/ContentIterator.cpp
@@ -284,8 +284,8 @@ nsresult ContentIteratorBase::Initialize
 
   mIterator.mFirst = DetermineFirstNode();
 
-  if (Result<nsINode*, nsresult> lastNode = DetermineLastNode();
-      NS_WARN_IF(lastNode.isErr())) {
+  Result<nsINode*, nsresult> lastNode = DetermineLastNode();
+  if (NS_WARN_IF(lastNode.isErr())) {
     return lastNode.unwrapErr();
   } else {
     mIterator.mLast = lastNode.unwrap();

[03:59:45.0512] <botzilla>
https://bugzil.la/1673913 — ASSIGNED (surajeet310) — ContentIterator.cpp: do not use 'else' after 'return'

[04:00:07.0953] <arai>
er.das.surajeet: if you paste long code, please quote it with triple backticks

[04:00:19.0724] <arai>
so that extra styling isn't applied

[04:00:21.0007] <er.das.surajeet>
Okay

[04:00:32.0049] <er.das.surajeet>
This was the output of hg log -pr .

[04:01:52.0769] <arai>
can you paste it again?

[04:02:04.0391] <arai>
the above isn't readable

[04:02:33.0890] <arai>
for backticks, see this document  https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks

[04:03:22.0364] <er.das.surajeet>
changeset:   649053:23465e2c8673
bookmark:    central
tag:         tip
parent:      649038:9a3c2b7dfe84
user:        surajeet310 <surajeet310@gmail.com>
date:        Wed May 26 14:26:19 2021 +0530
summary:     Bug 1673913 -Replaced the else branch with the statement itself and made the necessary changes to solve the error: use of undeclared identifier 'lastNode' in ContentIterator.cpp .r=mccr8
```
diff --git a/dom/base/ContentIterator.cpp b/dom/base/ContentIterator.cpp
--- a/dom/base/ContentIterator.cpp
+++ b/dom/base/ContentIterator.cpp
@@ -284,8 +284,8 @@ nsresult ContentIteratorBase::Initialize
 
   mIterator.mFirst = DetermineFirstNode();
 
-  if (Result<nsINode*, nsresult> lastNode = DetermineLastNode();
-      NS_WARN_IF(lastNode.isErr())) {
+  Result<nsINode*, nsresult> lastNode = DetermineLastNode();
+  if (NS_WARN_IF(lastNode.isErr())) {
     return lastNode.unwrapErr();
   } else {
     mIterator.mLast = lastNode.unwrap();

[04:03:23.0713] <botzilla>
https://bugzil.la/1673913 — ASSIGNED (surajeet310) — ContentIterator.cpp: do not use 'else' after 'return'

[04:03:51.0200] <arai>
okay, so your change doesn't contain the first change

[04:03:56.0062] <arai>
try checking the file itself

[04:04:06.0741] <arai>
and modify it to the expected state

[04:04:23.0770] <arai>
after that, use `hg commit --amend` to store the change into the current changeset, instead of creating new changeset

[04:04:31.0857] <arai>
so that you'll have only one changeset for the bug

[04:05:06.0486] <er.das.surajeet>
I am told now by the reviewer to start from a clean state and reset the branch.

[04:06:04.0819] <arai>
it's up to you, but you can also recover from the current state

[04:07:02.0175] <er.das.surajeet>
I don't see how am I going to recover. Its quite messy.

[04:07:33.0360] <arai>
okay, first, check the file

[04:07:42.0593] <arai>
do you see that the change there is incomplete?

[04:07:49.0051] <arai>
I mean, ContentIterator.cpp

[04:08:13.0815] <arai>
then, modify the file to the expected state.  this step is necessary in any way

[04:09:26.0818] <er.das.surajeet>
The file has the necessary changes needed to run. I made the changes that was supposed to be done .

[04:10:23.0990] <arai>
can you reopen it?

[04:11:11.0857] <arai>
the file is modified by histedit

[04:11:58.0954] <er.das.surajeet>
I dropped the initial two patches using histedit

[04:12:19.0301] <arai>
yes

[04:12:39.0823] <arai>
so, please check the result by reopening the file in the editor

[04:13:05.0409] <er.das.surajeet>
Are u asking me to rebuild it ?

[04:13:10.0791] <arai>
no

[04:13:32.0430] <arai>
just close the editor (or the file) and reopen it

[04:13:45.0542] <er.das.surajeet>
on it

[04:14:57.0752] <er.das.surajeet>
yeah it has some unwanted changes

[04:15:16.0122] <arai>
okay, then apply the expected change again

[04:15:33.0613] <arai>
and then, perform hg commit --amend

[04:15:41.0528] <er.das.surajeet>
okay

[04:21:08.0661] <er.das.surajeet>
done

[04:21:18.0122] <arai>
after that, check the content of the resulting changeset by hg log -pr .

[04:21:37.0258] <arai>
to see if the operation was done correctly 

[04:38:39.0224] <er.das.surajeet>
> <@arai:mozilla.org> to see if the operation was done correctly

no its still the same

[04:38:53.0559] <arai>
what's the output?

[04:38:58.0922] <arai>
and what have you done?

[04:39:24.0228] <er.das.surajeet>
I made the expected changes in the code and rebuild it

[04:40:38.0967] <er.das.surajeet>
when i checked with hg log -pr . , then it shows the same output as previous

[04:41:00.0245] <arai>
have you done `hg commit --amend` ?

[04:41:21.0275] <er.das.surajeet>
yeah

[04:41:30.0370] <arai>
what was the output/result ?

[04:42:16.0050] <er.das.surajeet>
> <@arai:mozilla.org> have you done `hg commit --amend` ?

let me do it again without the message option

[04:42:25.0688] <arai>
hmm

[04:43:14.0861] <arai>
when something unexpected happens, please take a note of the exact commands you've done, and the exact output of each command

[04:43:50.0533] <er.das.surajeet>
okay

[04:44:42.0443] <er.das.surajeet>
> <@arai:mozilla.org> have you done `hg commit --amend` ?

well after this.... an editor opens up

[04:44:57.0412] <arai>
yes, it lets you to enter/modify the commit message

[04:44:58.0642] <er.das.surajeet>

HG: Enter commit message.  Lines beginning with 'HG:' are removed.
HG: Leave message empty to abort commit.
HG: --
HG: user: surajeet310 <surajeet310@gmail.com>
HG: branch 'default'
HG: changed dom/base/ContentIterator.cpp



[04:45:12.0172] <arai>
if you don't need any change, just close the editor

[04:45:52.0911] <arai>
wait, is that the whole content of the file opened in the editor?

[04:45:56.0309] <er.das.surajeet>
what should i do next

[04:46:04.0207] <arai>
what have you done?

[04:46:09.0870] <arai>
did you close it?

[04:46:14.0754] <er.das.surajeet>
yes

[04:46:23.0855] <arai>
then, check the content of the current changeset

[04:46:30.0811] <er.das.surajeet>
okay

[04:46:30.0850] <arai>
to see if it's in expected state

[04:47:42.0923] <er.das.surajeet>
in the output, the ones written in red are the ones ommitted right ?

[04:48:02.0703] <arai>
can you pastebin it?

[04:48:24.0501] <er.das.surajeet>
okay

[04:48:32.0025] <arai>
the coloring depends on your terminal

[04:49:20.0045] <er.das.surajeet>
http://paste.mozilla.org/jVvx8kEJ

[04:49:31.0297] <arai>
is that the entire output?

[04:49:53.0520] <er.das.surajeet>
the changeset details are there

[04:49:55.0950] <er.das.surajeet>
thats all

[04:50:04.0815] <arai>
what command did you use?

[04:50:25.0138] <er.das.surajeet>
hg log -pr .

[04:50:30.0174] <arai>
that's strange

[04:50:37.0424] <arai>
there should be more above that part

[04:51:00.0997] <arai>
try checking the output again

[04:51:11.0676] <er.das.surajeet>
http://paste.mozilla.org/EdABj64O

[04:51:25.0329] <er.das.surajeet>
Thats the entire output

[04:53:23.0425] <arai>
`diff --git` line is the start of file. `---` and `+++` is path of the file before/after the change

[04:53:36.0296] <arai>
`@@` line is the start of modified chunk

[04:53:58.0081] <arai>
and there, line starts with `-` are removed lines, and line starts with `+` are added lines

[04:54:12.0213] <arai>
so, as you see there, you've removed `mIterator.mFirst = DetermineFirstNode();` line

[04:54:22.0342] <arai>
is it intentional?

[04:55:46.0349] <arai>
oh, also, please check the output of `hg log -vpr .`, that will show whole commit message, instead of only the first line

[04:56:10.0659] <arai>
there should be line starts with `Differential Revision: `

[05:00:33.0927] <arai>
if the above removal isn't intentional, try revert the change in the file and then perform `hg commit --amend` again

[05:00:40.0165] <arai>
to update the changeset

[05:00:49.0007] <arai>
after that, check the output of `hg log -vpr .` again

[05:01:22.0044] <arai>
once the output looks good, and also if `hg status` shows nothing, and also if build and test are successful, you're ready to submit again

[05:56:43.0526] <er.das.surajeet>
> <@arai:mozilla.org> is it intentional?

yes yes

[05:57:42.0788] <er.das.surajeet>
hg status doesn't display anything . Am i good to submit ?

[05:58:09.0592] <arai>
have you checked all of above?

[05:58:45.0866] <er.das.surajeet>
i didn't check the ```hg  log -vpr

[06:00:05.0864] <er.das.surajeet>
Can i submit

[06:01:00.0114] <er.das.surajeet>
hg log -vpr shows the same as hg log -pr .

[06:01:10.0898] <arai>
exactly same?

[06:01:48.0249] <arai>
don't you see any difference in commit message?

[06:02:27.0474] <arai>
if the commit message has no `Differential Revision: ...` line, it means you've removed the line

[06:02:55.0482] <arai>
and in that case, `moz-phab` cannot detect the previously associated revision

[06:03:09.0862] <arai>
have you used `-m` option when committing?

[06:03:26.0760] <arai>
if you've used that, it will overwrite the commit message and that will remove the line

[06:04:17.0625] <er.das.surajeet>
i am making a commit again without -m

[06:04:49.0699] <arai>
that won't solve if you've already overwritten

[06:05:05.0369] <er.das.surajeet>
how can i start a new branch

[06:05:11.0617] <er.das.surajeet>
and do everything anew

[06:05:40.0501] <arai>
actually, now you're in the state that you've done everything anew

[06:06:05.0153] <arai>
(so, your local changeset has no relation with already-submitted revisions

[06:06:29.0780] <arai>
so, if you're going to discard the previously submitted revision, you're ready to submit

[06:06:41.0679] <arai>
 * so, if you're going to discard (abandon) the previously submitted revision, you're ready to submit

[06:08:08.0664] <arai>
(btw, I was thinking that moz-phab has an option to specify the remote revision. but apparently there isn't :/

[06:09:02.0295] <arai>
er.das.surajeet: so, simple solution is just to submit with current state, and then abandon the previously submitted revision

[06:09:15.0055] <er.das.surajeet>
okay

[06:09:17.0678] <er.das.surajeet>
thank you

[06:10:04.0476] <er.das.surajeet>
done

[06:13:37.0012] <arai>
er.das.surajeet: why did you remove `mIterator.mFirst = DetermineFirstNode();` line?  the change doesn't sound related to the commit message

[06:14:18.0927] <arai>
also, in the commit message, " and resolved the error:..." part looks unnecessary

[06:15:01.0683] <er.das.surajeet>
I am checking again. Actually there were certain unwanted changes earlier as I mentioned . I may have confused with it as well.

[06:17:02.0057] <er.das.surajeet>
> <@arai:mozilla.org> also, in the commit message, " and resolved the error:..." part looks unnecessary

It was a build error raised. 

[06:17:38.0197] <arai>
yes, but that's simply because the change was incomplete

[06:17:48.0762] <arai>
that's unrelated to the final change

[06:17:50.0296] <er.das.surajeet>
okay .

[06:24:57.0403] <mgaudet>
Morning, Afternoon, Evening  I'd like to introduce ashwiniwankhede: She will be working with us through Outreachy on using ICU4X in SpiderMonkey. iain and I will be mentoring, and we're excited to be working with her

[06:25:13.0590] <mgaudet>
 * Morning, Afternoon, Evening. I'd like to introduce ashwiniwankhede: She will be working with us through Outreachy on using ICU4X in SpiderMonkey. iain and I will be mentoring, and we're excited to be working with her

[06:44:16.0296] <arai>
er.das.surajeet: also, once you've applied the change, try building and running some testcases, to see if your change is correct

[06:55:49.0102] <er.das.surajeet>
submitted

[06:56:46.0933] <arai>
have you run testcase?

[06:57:16.0404] <er.das.surajeet>
Which testcases exactly ?

[06:57:18.0244] <arai>
running automated testcases helps you make sure your change didn't regress any

[06:57:32.0634] <arai>
any testcase that's related to your change or the file

[06:57:39.0917] <er.das.surajeet>
okay

[06:58:41.0029] <arai>
you can find related testcase by 2 ways:  one is to look for directory names "test" or "tests", around the file

[06:58:57.0938] <arai>
another is look into the history of the file, to see which testcase is added/modified when touching the file

[06:59:26.0841] <er.das.surajeet>
okay understood. Will do such from next time .

[07:01:34.0345] <myau>
> <@tcampbell:mozilla.org> This is a wasm issue I thought? (i64.mul doesn't exist in vanilla js)

following up on this, how/where is the wasm generated? how can I examine the wasm that a function is compiled into?

[07:17:31.0978] <myau>
> I ended up with a test case something like:
> ```js
> let code = `
> (module
>     (func
>         (export "fn")
>         (param i64)
>         (result i64)
>         (i64.mul (local.get 0) (i64.const 5))))`;
> 
> let wasm = wasmTextToBinary(code)
> assertEq(WebAssembly.validate(wasm), true);
> 
> let module = new WebAssembly.Module(wasm);
> let instance = new WebAssembly.Instance(module, {});
> 
> print(disnative(instance.exports.fn));
> 
> ```

never mind, I figured I could do it with this test.

[08:18:22.0512] <ashwiniwankhede>
> <@mgaudet:mozilla.org> Morning, Afternoon, Evening. I'd like to introduce ashwiniwankhede: She will be working with us through Outreachy on using ICU4X in SpiderMonkey. iain and I will be mentoring, and we're excited to be working with her

Hello Everyone!! 
I am so excited to work with everyone 😄😄


[09:57:30.0233] <er.das.surajeet>
arai: When can I expect a review on the Bug 1673913 ?

[09:57:41.0834] <botzilla>
https://bugzil.la/1673913 — ASSIGNED (surajeet310) — ContentIterator.cpp: do not use 'else' after 'return'

[10:04:49.0929] <emilio>
Is there a good way to unwind the stack with gdb / rr when there are jit frames across it?

[10:19:16.0669] <nbp>
emilio: no-ish.

[10:19:49.0277] <nbp>
emilio: we have some instrumentation which is capable of unwinding the JIT stacks, but it is not reliable if you are within a JIT frame already.

[10:20:23.0216] <nbp>
emilio: https://searchfox.org/mozilla-central/source/js/src/gdb/mozilla/unwind.py and I am not sure it is up to date.

[10:22:17.0008] <mgaudet>
emilio: If you can upload the trace to pernosco, I do find pernosco's stack building to be pretty good

[10:22:35.0951] <mgaudet>
it's done via trace analysis vs. stack walking

[10:23:46.0509] <nbp>
mgaudet: how does it handle patched returned addresses?

[10:24:03.0417] <emilio>
mgaudet: nbp: I see. What I'm trying to do is the following: I have a JS function that is called too much. I `dump()` something in there, and I can see the JS stack thanks to `DumpJSStack()`, but I'd like to get to the native function that is on top of all the JS stack

[10:24:23.0667] <emilio>
I can guess and reverse-continue and if it's not it try with another possible codepath

[10:24:27.0530] <emilio>
But it's not super-great

[10:24:35.0582] <mgaudet>
> <@nbp:mozilla.org> mgaudet: how does it handle patched returned addresses?

¯\_(ツ)_/¯ no idea. All I know is that I've had a pretty good experience with it. 

[10:24:49.0635] <nbp>
emilio: you can set a breakpoint to the JITActiovation ctor?

[10:25:55.0179] <emilio>
nbp: oh, that'd work for me indeed

[10:26:23.0748] <tcampbell>
I usually set a watch on some stack value

[10:34:45.0549] <mgaudet>
Q: Are Async-stacks the sort of thing that's supposed to help with providing a stack on a promise rejected; asking about Bug 1703527 specifically

[10:34:47.0456] <botzilla>
https://bugzil.la/1703527 — NEW (evilpie) — "JavaScript error: , line 0: uncaught exception: Object" errors are not helpful

[10:37:07.0607] <nbp>
mgaudet: that was the intended reason for the implementation, yes.

[10:38:17.0244] <mgaudet>
OK. So we've made a conscious choice to disable it for performance impact; which means resolution for that bug is either WONTFIX or considering adding the explicit prefs to a region of tests?

[10:39:04.0786] <nbp>
I would have expected the debugger tests to check the output there.

[10:39:27.0148] <nbp>
as this was mainly meant to support developers in the devtools

[10:40:34.0648] <nbp>
Do we still disable Ion/Wrap when running the debugger?

[10:42:23.0356] <mgaudet>
nbp: This isn't running in devtools though; just a random mochitest

[10:42:39.0498] <mgaudet>
so, I would expect it -wouldn't- get a stack given our present decisions

[10:42:45.0899] <iain>
IIUC, when we make a script observable to the debugger, we [invalidate its ionscript](https://searchfox.org/mozilla-central/source/js/src/debugger/Debugger.cpp#3154)

[10:43:35.0323] <nbp>
We probably do to about Baseline, as Baseline output has to be instrumented as well.

[10:45:39.0760] <iain>
We do fancy OSR tricks for baseline

[10:45:51.0044] <iain>
Implemented in `BaselineDebugModeOSR.cpp`

[10:46:38.0826] <nbp>
https://searchfox.org/mozilla-central/source/js/src/jit/Ion.cpp#1882


2021-05-27
[17:34:45.0024] <arai>
er.das.surajeet: maybe within a week.  if you don't get response for a week, try pinging them

[19:46:54.0613] <arai>
tried disabling CSS for spidermonkey.dev to see what happens, and... a huge circle appears :P

[19:48:19.0015] <arai>
not sure what the best practice for "No styling" is these days tho...

[21:15:15.0257] <sagu>
arai: No CSS, that's something new, but usually there is no JS.

[21:19:34.0064] <arai>
yeah, no-JS seems to be fine there

[21:19:59.0861] <arai>
filed https://github.com/mozilla-spidermonkey/spidermonkey.dev/issues/84 and https://github.com/mozilla-spidermonkey/spidermonkey.dev/issues/85 for "no style"-related issues

[03:31:56.0789] <Standard8>
Do we have any docs on `Cu.now()`? (or outlines on `Cu.now()` vs `Date.now()`

I'm guessing that `Cu.now()` is going to be slightly better for measuring page view time.

I'm also wondering if it is possible to "fake" the `Cu.now()` result for mochitests? (A bit similar to `sinon.useFakeTimers()`)

[03:33:29.0958] <Standard8>
Oh, on the docs question, I should have looked for `performance.now()` 😉 

[04:08:00.0077] <arai>
`Date.now()` and `performance.now()` have reduced precision, at least on web-content, for security reasons.  and looks like `Cu.now()` doesn't

[04:10:42.0457] <arai>
except for precision, `Cu.now()` and `performance.now()` seem to return the same thing

[07:51:42.0206] <annevk>
They should have the same precision with COOP+COEP, right? Or does Cu.now() return system time?

[07:59:35.0262] <arai>
If COOP+COEP hits this branch https://searchfox.org/mozilla-central/rev/2b372b94ce057097a6ef8eb725f209faa9d1dc4d/toolkit/components/resistfingerprinting/nsRFPService.cpp#997-999  there seems to be difference

[07:59:55.0359] <arai>
https://searchfox.org/mozilla-central/rev/2b372b94ce057097a6ef8eb725f209faa9d1dc4d/toolkit/components/resistfingerprinting/nsRFPService.cpp#339-344

[08:00:42.0513] <Standard8>
I'm not too worried about precision here, the main thing is not jumping around with the system time

[09:10:15.0358] <annevk>
arai: curious now, what does Cu.now() use? DangerouslyNone?

[09:11:29.0615] <arai>
raw value I think  https://searchfox.org/mozilla-central/rev/2b372b94ce057097a6ef8eb725f209faa9d1dc4d/js/xpconnect/src/XPCComponents.cpp#2423-2428

[09:12:03.0753] <arai>
that I think is same as `DangerouslyNone`

[09:14:18.0219] <annevk>
yeah, thanks!

[09:29:38.0076] <dminor>
iain: I spent a little time this morning putting together some patches to vendor icu4x into gecko. I have something that works for Firefox, but not standalone SpiderMonkey builds. It didn't occur to me until after the fact that this might be duplicating work that you've already done. Anyway, I wanted to check with you before I went any further.

My standalone SpiderMonkey build errors out with linker errors, but I haven't had much luck so far tracking down how to let the standalone build know about the crates I've added for ICU4x.

[09:32:01.0649] <nbp>
dminor: From what I recall this problem might have already been solved for converting between different charset. (I can't recall the library name yet)

[09:32:33.0486] <nbp>
This is probable a much smaller library than icu4x

[09:32:38.0836] <nbp>
 * This is probably a much smaller library than icu4x

[09:32:44.0894] <iain>
dminor: ashwiniwankhede is just starting to look into doing that for SM builds

[09:36:25.0876] <dminor>
Ok, thanks! We're planning to run some small experiments with ICU4x in Gecko in June, but don't plan to land anything permanently right now. I'll push what I have up to Phabricator in case it ends up being useful for ashwiniwankhede.

[09:40:15.0645] <dminor>
ashwiniwankhede: I've put my WIP up on https://bugzilla.mozilla.org/show_bug.cgi?id=1713136, please let me know when you figure out the standalone builds :)

[09:55:06.0198] <mgaudet>
confession: Patches landing the prototype for class-static-blocks (`class A { static { /* do a thing */ } }`) have landed, and look like they will stick. The feature isn't going to be enabled for a while though, the specification around `await` is in need of improvement and so we'll need to wait a bit. 

[09:55:08.0602] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[10:22:49.0412] <timvde>
I don't think it has been posted here before, so for whoever is interested: https://v8.dev/blog/sparkplug

[10:22:58.0893] <ashwiniwankhede>
> <@dminor:mozilla.org> ashwiniwankhede: I've put my WIP up on https://bugzilla.mozilla.org/show_bug.cgi?id=1713136, please let me know when you figure out the standalone builds :)

Thank you. Will let you know. 

[10:24:08.0262] <iain>
> It also means that we have to port the entire implementation separately to each architecture we support, since there’s no intermediate architecture-independent stage.
V8's lack of an architecture-independent masm layer strikes again

[10:24:13.0457] <mgaudet>
> <@timvde:mozilla.org> I don't think it has been posted here before, so for whoever is interested: https://v8.dev/blog/sparkplug

Thanks for the link. Looks a heck of a lot like our baseline

[10:24:19.0370] <iain>
 * > 
It also means that we have to port the entire implementation separately to each architecture we support, since there’s no intermediate architecture-independent stage.
V8's lack of an architecture-independent masm layer strikes again


[10:25:38.0592] <mgaudet>
though not clear to me if the 'feedbak vector' means ICs exist or not for it

[10:25:44.0117] <mgaudet>
 * though not clear to me if the 'feedback vector' means ICs exist or not for it

[10:25:51.0150] <mgaudet>
or if they are just gathering types

[10:27:26.0361] <mgaudet>
(Funny story; for correspondence with someone recently I compared bl-interp with and without ICs on octane. Score was 937 with no ICs, and 4092 with... our ICs are crazy effective) 

[10:34:25.0009] <timvde>
mgaudet: https://docs.google.com/document/d/13c-xXmFOMcpUQNqo66XWQt3u46TsBjXrHrh4c045l-A/edit#

[10:34:32.0103] <timvde>
tl;dr Let's add a baseline compiler

[10:36:37.0895] <mgaudet>
iain: "The Sparkplug compiler uses a “BaselineAssembler”..." 

[10:37:59.0215] <iain>
 * > It also means that we have to port the entire implementation separately to each architecture we support, since there’s no intermediate architecture-independent stage.

V8's lack of an architecture-independent masm layer strikes again

[10:38:05.0782] <mgaudet>
Uses ICs too "Uses data-driven ICs from the get-go, so no complexity around code patching." 

[10:38:38.0712] <iain>
Funny story: a few months ago in a meeting with some members of the perf team, we were spitballing the possibility that baseline was slowing us down, and we should do something closer to V8 where we go straight from the baseline interpreter to Warp, and then a couple days later I saw a copy of that document floating around and said "hmm, looks like V8 disagrees that their current approach is better"

[10:40:45.0983] <iain>
The full doc has some interesting observations about maintaining W^X with lots of small compilations

[11:12:20.0803] <chaircrusher>
Hey a quick question: We have a bunch of JS Objects implemented in C++, that use JS_SetPrivate to manage data we want for those object types.

There's a thing we're doing clumsily now, that it looks like I could solve it straightforwardly if I could call JS_SetPrivate on JSString - i.e. it's a good old JSString as far as the SpiderMonkey JS Interpreter is concerned, but on the C++ side we could set and retrieve private data from the JSString.

So is there a way to tag a JSString with private data?

[11:19:04.0541] <sfink>
chaircrusher: there's no space for it in the string struct, unfortunately

[11:19:24.0313] <chaircrusher>
Kind of what I thought.

[11:19:47.0151] <sfink>
I've been tempted to give strings optional headers or footers, to eg cache hash numbers (for non atoms; atoms already have them)

[11:19:59.0749] <chaircrusher>
I know there's a ton of optimization business down in the string handling.

[11:21:30.0097] <sfink>
you can use a map based on pointer value, but it's a pain to maintain because the pointers can move

[11:23:00.0059] <sfink>
I think we use `GCRekeyableHashMap` for this? At least, [`NurseryAwareHashMap` does](https://searchfox.org/mozilla-central/rev/2b372b94ce057097a6ef8eb725f209faa9d1dc4d/js/src/gc/NurseryAwareHashMap.h#60-78)

[11:23:15.0558] <tcampbell>
SparkPlug seems to be _very_ similar to our BaselineCompiler. We did BaselineCompiler first and then BaselineInterpreter and they seem to have ended in same result from the other direction.

[11:23:41.0860] <tcampbell>
(Also time flies. blinterp was nearly two years ago)
https://hacks.mozilla.org/2019/08/the-baseline-interpreter-a-faster-js-interpreter-in-firefox-70/

[11:23:46.0308] <sfink>
we're all evolving towards crabs

[11:25:31.0928] <sfink>
it would be nice if we were talking more publicly about some of this stuff -- quite a few things that show up on the v8 blog, and sound really great, are things that we've already had for a while. But it's 100% understandable that people assume SM is always catching up to v8.

[11:25:45.0063] <sfink>
"it would be nice" == "I'm not volunteering" ;-)

[11:32:46.0588] <chaircrusher>
> <@sfink:mozilla.org> I think we use `GCRekeyableHashMap` for this? At least, [`NurseryAwareHashMap` does](https://searchfox.org/mozilla-central/rev/2b372b94ce057097a6ef8eb725f209faa9d1dc4d/js/src/gc/NurseryAwareHashMap.h#60-78)

We do this wonky thing where we keep an array of JSString * pointers along with private data, and to look for the private data by a sequential search. That at least could be sped up by using a std::map.

As luck would have it, we only need this for JSString we've created with JS_NewExternalString, so they don't move.

[11:36:30.0608] <sfink>
oh. External strings. You might be able to do something horrible with those, then.

[11:36:44.0263] <sfink>
specifically, they store a pointer to a `JSExternalStringCallbacks` struct

[11:37:21.0149] <sfink>
if you subclassed from that (or made your own struct where the required 2 fields lined up), you could smuggle in whatever data you want

[11:37:29.0096] <sfink>
though it means allocating one of these per string

[11:40:26.0381] <sfink>
oh, it's actually a struct with a vtable. So subclassing would probably be safest.

[11:54:54.0500] <chaircrusher>
wow

[11:55:59.0945] <chaircrusher>
Not so sure about subclassing JSString?

[11:58:14.0492] <chaircrusher>
Like right now I make the string with JS_NewExternalString 

[12:24:12.0665] <sfink>
chaircrusher: no, not sublcassing JSString. Subclassing JSExternalStringCallbacks.

[12:24:31.0507] <sfink>
https://searchfox.org/mozilla-central/source/js/public/GCAPI.h#482-503

[12:24:57.0147] <sfink>
 * chaircrusher: no, not subclassing JSString. Subclassing JSExternalStringCallbacks.

[12:34:02.0179] <chaircrusher>
@sfink Right now we're sticking with JS60 version because it works, that sounds like it isn't until some version after that

[13:13:11.0663] <sfink>
ah, yeah, that showed up in Fx72

[13:14:49.0682] <chaircrusher>
Well we're going to update to a current version when we get a moment...

[15:01:16.0147] <mgaudet>
confession: I think I've got debugger support for evaluating private methods... requires a custom bytecode op, but seems to work. 

[15:01:18.0195] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[15:04:57.0904] <chaircrusher>
Man building SpiderMonkey JS for embedding is a big hairy deal. ESR60 I can just checkout out, configure and make it relatively easily. The current snapshot has all sorts of steps to boostrap, some of which are mildly broken.

[15:05:52.0586] <chaircrusher>
specifically it tries to install python-devel on centos and that has gone away for centos8/rhel8 - you need python3-devel

[15:06:49.0874] <chaircrusher>
then there's a whole rigamarole running mach to build, which also does a ton of stuff I don't care about.

[15:07:10.0354] <chaircrusher>
I just want to build something relatively modern that I can link into my C++ application.

[15:11:04.0347] <tcampbell>
wut.. C++ can destructure tuples? when did that happen.. https://searchfox.org/mozilla-central/source/js/src/vm/ArrayBufferObject.cpp#1263

[15:12:01.0703] <tcampbell>
C++17 I guess https://en.cppreference.com/w/cpp/language/structured_binding

[15:19:37.0184] <tcampbell>
chaircrusher: where do you run into python-devel? If stuff is busted on centos8 that probably can be fixed

[15:20:20.0290] <tcampbell>
(the configure script _probably_ still works directly. It has just been too limited in recent years for firefox)

[15:26:50.0142] <evilpie>
ESR60 is old, and so mach bootstrap code is also old

[15:27:07.0831] <evilpie>
 * 60 is old, and so mach bootstrap code is also old

[15:27:25.0450] <evilpie>
using a more recent version would probably solve this automatically

[15:42:12.0039] <sfink>
they're using the current snapshot

[15:43:49.0843] <sfink>
but that's kind of weird, on Fedora 33 `dnf install python3-devel` and `dnf install python-devel` do the same thing (install python3-devel).

[15:44:20.0572] <sfink>
you'd have to request `python2-devel` if you want old Python

[15:50:45.0414] <sfink>
chaircrusher: `python-devel` is gone completely, or gives Python2?

[15:51:09.0997] <sfink>
I'm updating the bootstrap, but I don't have an easy way to test and I'm lazy

[15:52:14.0459] <sfink>
https://www.svennd.be/centos-8-python-devel/ says it's gone

[15:52:18.0582] <sfink>
darn, that's the slightly messier way

[16:06:46.0286] <iain>
confession: Just spent multiple hours staring at assembly in rr to determine that there's a very subtle bug in the interaction between JSOp::Resume, bhackett's realm instrumentation code, and the interpreterICEntry_ field in BaselineFrame. I might leave solving the problem for tomorrow-Iain

[16:33:02.0732] <sfink>
confession: bug 1713235 for fixing bootstrap on CentOS 8

[16:33:04.0718] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[16:33:05.0932] <botzilla>
https://bugzil.la/1713235 — ASSIGNED (sfink) — CentOS 8 replaced python-devel with python3-devel


2021-05-28
[20:19:55.0931] <chaircrusher>
You guys rule!

[20:25:06.0919] <chaircrusher>
and yes RHEL8/CENTOS8 by default knows about python2-devel and python3-devel

[20:25:13.0334] <chaircrusher>
but no python-devel

[00:12:01.0642] <timvde>
> <@sfink:mozilla.org> it would be nice if we were talking more publicly about some of this stuff -- quite a few things that show up on the v8 blog, and sound really great, are things that we've already had for a while. But it's 100% understandable that people assume SM is always catching up to v8.

I'd also very much dig such blog posts. So you'll have at least one reader! ;)

[00:13:39.0998] <timvde>
But you're probably right that it helps the public opinion. I'm much more closely following Firefox development than Chrome, and I'm excited about new stuff all the time, which people around me don't realise at all.

[02:26:38.0946] <nbp>
One thing to note, is that we are still lagging behing Safari in terms of numbers of executions tiers, as we are not willing to ship a full compiler suite with Firefox.

[07:39:11.0532] <sfink>
at least we don't have our spark plug firing *after* ignition...

[08:00:33.0909] <tcampbell>
I'm thinking of adding this to the shell for windows debugging
```cpp
static void MaybeWaitForDebugger() {
  // On Windows, optionally wait for a debugger to attach and then break. The
  // just-in-time debugger prompt is not enabled by default if full Visual
  // Studio is not installed, so spin until a debugger is attached.
#ifdef XP_WIN
  if (!!getenv("MOZ_ATTACH_DEBUGGER")) {
    printf("Waiting for debugger... ");
    while (!::IsDebuggerPresent()) {
      ThisThread::SleepMilliseconds(100);
    }
    printf("ready.");
    ::DebugBreak();
  }
#endif
}
```
reasonable-ish?

[08:01:17.0817] <tcampbell>
`MOZ_ATTACH_DEBUGGER=1 ./mach run` then waits for debugger, and the vscode builtin debugging can just attach to process and seems to mostly work out of box

[08:02:11.0280] <tcampbell>
(I cannot figure out what incantation to use to make a "--debugger=..." option start in vscode)

[09:07:05.0602] <gen.hames>
hey all 🌺 new here. I have a general spidermonkey question and I tried searching in the matrix chat for keywords but no luck: I'm curious about embedding the engine and wanted to know the size change of an executable that embeds spidermonkey. how small it can get? I've read that there's multiple compilers/JITs can I drop them to only have one to reduce size? I was also thinking about dropping ICU if possible.

I downloaded a recent spidermonkey jsshell (linux x86_64) and it was 32.3MB. I read online that v8 might be around 8MB and that deno's rusty_v8 crate is 9.7MB. Is there a ballpark figure for spidermonkey?

[09:10:16.0787] <gen.hames>
even if you only have a figure like "> 15MB at minimum" that's helpful to know :)

[09:11:39.0947] <nbp>
tcampbell: what's the point? you can always start the debugger when the program starts?

[09:12:37.0865] <nbp>
I tihnk vscode has some interfaces to let you run any program and start debugging from the beginning

[09:14:20.0620] <nbp>
tcampbell: without using `mach run`, you should be able to start debugging any process.

[09:15:29.0662] <nbp>
gen.hames: JITs can be disabled, but then the alternative is running in an interpreter.

[09:15:36.0665] <tcampbell>
nbp: I want to debug from `./mach jit-test`

[09:15:43.0105] <nbp>
gen.hames: dropping ICU is possible as well.

[09:15:52.0779] <tcampbell>
normally we'd pass "--debugger=gdb" or something, but that isn't practicle here

[09:16:32.0142] <nbp>
tcampbell: install gdb using cygwin (if this is still a thing since WSL)

[09:16:35.0759] <nbp>
:D

[09:17:29.0938] <nbp>
gen.hames: When we added IonMonkey, our optimizing JIT, this added 1MB to Firefox binary size. (might be larger today)

[09:18:42.0249] <gen.hames>
nbp so if I dropped ICU and ran in an interpreter am I looking at around 5MB or around 25MB?

[09:19:02.0845] <nbp>
I would be for less than 5 MB.

[09:19:07.0649] <nbp>
 * I would bet for less than 5 MB.

[09:19:09.0171] <gen.hames>
sorry I haven't built it and stripped debug symbols yet to know

[09:19:12.0714] <gen.hames>
oh wow ok

[09:19:33.0578] <sfink>
if I just strip the debug mozjs.so, it's still like 32MB

[09:19:45.0175] <nbp>
/me has not checked the size either.

[09:20:13.0099] <gen.hames>
yeah I was surprised jsshell was 32.3MB I imagined that would be pretty barebones?

[09:20:50.0730] <sfink>
the shell is intended for testing, and is definitely not barebones, but I wouldn't expect that to be a huge size difference

[09:23:52.0042] <sfink>
a stripped opt libmozjs.so with --disable-intl-api is 15MB

[09:24:19.0427] <gen.hames>
thank you for checking!

[09:29:21.0377] <tcampbell>
the libmozjs-78 debian package seems to be 13MB

[09:29:38.0641] <sfink>
a stripped opt libmozjs.so with --disable-intl-api --disable-jit is 13MB

[09:31:03.0883] <nbp>
hum … what makes the JS engine so big?

[09:31:26.0460] <tcampbell>
there are still two parsers :(

[09:31:40.0807] <nbp>
oh, right we got WASM since.

[09:32:03.0921] <nbp>
except that if we disable the JIT, no wasm code will ever run.

[09:32:04.0366] <tcampbell>
(oh, I mean utf8 and char16 parsers)

[09:32:44.0336] <nbp>
correct, the charset template which forks the parser code.

[09:35:32.0650] <nbp>
tcampbell: for the `MOZ_ATTACH_DEBUGGER`, feel free to do it … I do not think anybody will reject any patches which only goals is to make someone life simpler.

[09:35:49.0513] <nbp>
(except if this is a security issue)

[09:36:47.0186] <tcampbell>
/me is curious what it looks like if one strips the object files and looks at sizes per directory

[09:37:07.0712] <tcampbell>
/me is on windows today or would do himself

[09:40:04.0376] <sfink>
https://gist.githubusercontent.com/hotsphink/75d0ef814e5bb00d6d85411c30bec63b/raw/sizes.txt

[09:41:37.0627] <sfink>
and 5.4MB for js/src/*.o

[09:57:10.0567] <gen.hames>
> <@nbp:mozilla.org> hum … what makes the JS engine so big?

this might be comparable to V8 tho. I haven't tried building/shrinking V8 (some posts on the internet say it can be as small as 2.8MB but that's from 2014 and impossible today haha). the smallest V8 example I can find is "Just" which has a 16.4MB linux executable https://github.com/just-js/just/releases/tag/0.0.22.

[10:21:30.0615] <tcampbell>
The JS spec itself is 1.75MB

[10:21:32.0468] <mgaudet>
A slim embedding would be an interesting adventure, though not one I see us tackling any time soon. There's a variety of places that slimming could happen, and on a variety of dimensions. Things like limiting to a single accepted charset, removing all JIT compilation support (disabling WASM tho), cutting features like Reflect.parse etc. 

[10:22:40.0141] <tcampbell>
for very slim, moddable compiles javascript to AOT (and then disables eval), which is one way to go

[10:22:49.0060] <tcampbell>
 * for very slim, moddable compiles javascript AOT (and then disables eval), which is one way to go

[10:23:17.0614] <tcampbell>
 * The JS spec itself is 1.75MB (of text)

[10:29:48.0336] <mgaudet>
Yeah; depending on what gen.hames is looking for, Moddable might even be a good answer

[10:36:42.0382] <ptomato>
anyone want to take a look at https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/pull/37 ? the author's been waiting a while

[10:49:02.0971] <tcampbell>
sagu ptomato : does tracking beta or release make more sense?

[10:49:36.0639] <tcampbell>
I am leaning towards beta for spidermonkey

[10:49:55.0418] <ptomato>
I don't know the pros and cons of each. beta seems like it'd be best for noticing things that break embedders

[10:50:01.0016] <tcampbell>
(firefox sees a lot more stabalization between beta and release. SpiderMonkey is pretty robust)

[10:50:53.0058] <tcampbell>
eg. I don't consider release branch to be different quality than beta for SpiderMonkey purposes

[10:51:09.0173] <sagu>
tcampbell: I was more thinking of a cache 

[10:51:34.0822] <sagu>
 * tcampbell: I was more thinking of a cache impact of using new SM every few days.

[10:52:12.0398] <sagu>
> <@sagu:mozilla.org> tcampbell: I was more thinking of a cache impact of using new SM every few days.

Caches become useless, as new builds are always downloaded.

[10:54:18.0852] <tcampbell>
ah. Is that a particular problem here? (I've not used github actions very much)

[10:54:38.0322] <tcampbell>
interesting point, though

[10:56:54.0531] <tcampbell>
looks like the task runs for 30min

[10:57:44.0200] <sagu>
tcampbell: Well most of people are following ether ESRs or RELEASEs so it would be good to help them on miggration if they are foolowing Release schedule.

[10:58:13.0748] <tcampbell>
my main worry is we it is broken in release, it is too late

[10:58:40.0295] <sagu>
> <@tcampbell:mozilla.org> looks like the task runs for 30min

This is for first run. All sequential runs containing same mozjs version should be faster.

[10:59:06.0675] <tcampbell>
I'm tempted to suggest we start with beta and see how annoying it is

[11:00:10.0449] <sagu>
> <@tcampbell:mozilla.org> my main worry is we it is broken in release, it is too late

Good point.

[11:00:42.0065] <tcampbell>
release is every 4 weeks, so it is pretty annoying as an embedding target as it is

[11:01:19.0174] <sagu>
Also there are only few commits per month so it shouldn't be very noticable.

[11:01:41.0287] <sagu>
> <@tcampbell:mozilla.org> I'm tempted to suggest we start with beta and see how annoying it is

Will revert back to beta.

[11:01:48.0464] <tcampbell>
yeah. I think this CI is a good step to making this easier for people

[11:01:49.0425] <tcampbell>
:)

[15:05:45.0439] <mgaudet>
confession: Played with [`swc`'s parser](https://swc.rs/). Quick ballpark estimate I'd say our parser is 2-3x faster

[15:05:47.0987] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2021-05-30
[22:29:20.0869] <er.das.surajeet>
When can I expect any review on Bug 1673913 ?

[22:29:23.0101] <botzilla>
https://bugzil.la/1673913 — ASSIGNED (surajeet310) — ContentIterator.cpp: do not use 'else' after 'return'

[23:11:48.0052] <er.das.surajeet>
> <@er.das.surajeet:mozilla.org> When can I expect any review on Bug 1673913 ?

Submitted it almost 3 days back .

[00:19:16.0223] <arai>
I'd suggest waiting for 4 more days

[00:23:03.0761] <arai>
also, given it's weekend, it's less likely you get quick response

[00:51:07.0007] <arai>
er.das.surajeet: also, if you haven't, it would be nice to verify your changes by running testcases while waiting for review

[00:54:29.0672] <arai>
if you've already verified by building/testing, it's nice to mention that in the bug comment or phabricator comment

[06:02:44.0682] <er.das.surajeet>
arai: Okay Sure.


2021-05-31
[22:32:23.0197] <ptomato>
I'm curious why mach requires me to install pulseaudio-libs-devel in order to run `./mach clang-format`...

[06:10:05.0851] <tcampbell>
ugh.. I wonder if it is trying to run `./mach bootstrap` under the covers to make sure it is up to date. When running bootstrap directly, there is a `--no-system-changes`. Maybe that needs to apply to clang-format

[06:35:14.0808] <nbp>
mgaudet: the actual speed of our current parser is part of the difficulties we were facing when implementing SmooshMonkey.

[06:36:09.0593] <nbp>
and LR parsers are comceptually nice, but do not play well with branch predictors.

[06:36:32.0560] <mgaudet>
> <@nbp:mozilla.org> mgaudet: the actual speed of our current parser is part of the difficulties we were facing when implementing SmooshMonkey.

Yeah; I was mostly curious if it would be 2-3x slower, or 5-10x 

[06:37:02.0961] <nbp>
 * and LR parsers are conceptually nice, but do not play well with branch predictors.

[06:37:06.0442] <mgaudet>
(This was only the most cursory testing tho)

[06:38:42.0372] <nbp>
tcampbell: I was wondering whether it would be better to focus on optimizing JIT frames or focusing on eager-delazification.

[06:39:06.0044] <tcampbell>
nbp: which aspect of jit frames?

[06:39:16.0103] <nbp>
the stack dumping aspect of it.

[06:39:28.0305] <tcampbell>
I'm not sure I follow

[06:40:32.0020] <tcampbell>
oh, you mean the callvm stuff?

[06:40:35.0593] <tcampbell>
 * oh, you mean the callvm perf stuff?

[06:40:52.0658] <nbp>
the fact that every argument is written on the stack, the fact that the caller is responsible for all fields, the fact that frame-pointers are not usable for frame recovery in debuggers

[06:41:02.0904] <nbp>
 * the fact that every arguments are written on the stack, the fact that the caller is responsible for all fields, the fact that frame-pointers are not usable for frame recovery in debuggers

[06:41:56.0113] <tcampbell>
I think delazification is still the priority. We have a clearer sense of the expected upside there.

[06:42:50.0137] <nbp>
callVM is a tiny aspect of it, JIT-2-JIT frames sounds like a bigger problem

[06:43:18.0913] <tcampbell>
nbp: do you have some bug numbers you can point me to?

[06:43:39.0196] <nbp>
and the complexity of descriptor can probably be removed from all the stack computations.

[06:44:11.0760] <nbp>
/me wonders if anybody ever opened a bug or just complain orally before …

[06:45:18.0467] <tcampbell>
nbp: I guess my question is what brings this to mind for you now?

[06:45:26.0801] <tcampbell>
(just looking at priorities for what is next?)

[06:46:25.0667] <tcampbell>
Delazification is definitely one of our larger remaining problems for page load these days

[06:47:24.0756] <nbp>
Bug 1426134 is one non-performance aspect of it.

[06:47:26.0067] <botzilla>
https://bugzil.la/1426134 — NEW (nobody) — preserve frame pointer in all JIT code

[06:48:12.0450] <nbp>
What brings this to mind is the v8 blog post on sparkplug, with the graphics of their stack layout

[06:48:28.0138] <tcampbell>
ah

[06:49:31.0621] <nbp>
as well as an old envy that we should be able to support extremely high number of arguments as a constant vector, by giving an argument vector pointer in a register.

[06:49:51.0282] <nbp>
with heap allocated vectors.

[06:50:14.0795] <nbp>
and the complexity of frame descriptors.

[06:50:54.0744] <tcampbell>
haha

[06:52:05.0706] <tcampbell>
nbp: I'd suggest you capture the thoughts in a bug to describe the rough scope of what changes would fit together with the current state of the JITs

[06:52:24.0299] <tcampbell>
I do think the delazification stuff is worth finishing first though

[06:54:50.0817] <nbp>
I guess, I should probably collect stats on the number of free registers per architecture per Ion compile / ICs …

[06:56:26.0898] <tcampbell>
What is the expected upside? warp, wasm, baseline, ???

[06:56:55.0019] <tcampbell>
 * What is the expected upside? warp, wasm, baseline, ??? (Do we think baseline could see a speedup, or mainly things in higher tiers)

[07:02:18.0348] <nbp>
I guess baseline could see a speed-up if we were to map more stack space to registers.

[07:03:06.0515] <nbp>
even if this would likely be architecture dependent as x86 would be here to remind us about it.

[07:11:29.0808] <tcampbell>
If x86 would still be restricted, we'd have the same virtual-register usage in baseline we have today, wouldn't we?

[07:18:16.0936] <nbp>
except that we do not have virtual registers, yes.

[07:33:42.0957] <tcampbell>
I mean the R0/R1/R2 hardcoding

[07:33:55.0796] <tcampbell>
"virtual" is probably the wrong word

[08:43:27.0655] <tcampbell>
iain: do you know why the instrumentation removal changes JSCLASS_GLOBAL_SLOT_COUNT ?

[08:44:31.0120] <tcampbell>
 * iain: do you know why the instrumentation removal changes *JSCLASS_GLOBAL_SLOT_COUNT ?

[08:46:18.0306] <iain>
We're removing the INSTRUMENTATION slot in GlobalObject.h

[08:47:04.0592] <tcampbell>
ah, there it is. thanks

[08:47:26.0943] <iain>
There's a static assert to verify we keep the numbers synced: https://searchfox.org/mozilla-central/source/js/src/vm/GlobalObject.h#139

[09:00:21.0644] <er.das.surajeet>
what is the difference between mozilla-unified and mozilla-central ?

[09:01:24.0123] <iain>
mozilla-central is the main development branch. Nightly is built from mozilla-central. mozilla-unified contains mozilla-central as well as our other branches: beta, release, esr, etc...

[14:59:43.0282] <mgaudet>
confession: Arai's fantastic test requests are dramatically improving the debugger-invoking-private-methods patch; figured out a key thinko on my part 

[14:59:45.0550] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

