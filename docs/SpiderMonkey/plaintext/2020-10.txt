2020-10-01
[20:42:57.0802] <Waldo>
/me misses the office network right now

[20:44:04.0824] <Waldo>
For some strange reason, `git clone https://github.com/llvm/llvm-project.git` is progressing at ~300-800KB/s.  üêå

[02:27:23.0286] <smaug>
Curious, how is the implementation side different for  `foo${1+2}bar` vs "foo" + (1 + 2) + "bar" ?  At least parsing the former is a tiny bit more complicated. Are there other possible performance differences ?

[02:36:07.0515] <Waldo>
smaug: At a glance, https://tc39.es/ecma262/#sec-template-literals-runtime-semantics-evaluation suggests the semantics look identical.  I don't believe we convert `"foo" + expr + "bar"` to statically `ToString` the `expr` as template literals would, so the concatenation operation is going to have to do some type-checking ultimately implement that string+something as string(string-concatenate)ToString(something).  But I suspect that type-checking is pretty negligible impact (if any at all).  So I don't think offhand there's a perf difference.

[02:37:02.0533] <Waldo>
In principle we could guarantee a speedup by using to-string and string-concat ops for template literals.  In practice it probably doesn't gain enough to be worth the effort.

[02:38:34.0847] <smaug>
ok, thanks

[02:40:34.0996] <Waldo>
FWIW I should have a functional compiler shortly, so I'll be dumping some more AbortSignal-related patches on you in somewhat short order.

[03:41:44.0377] <nbp>
confession: Bring back to life an ARM64 computer ‚Ä¶ üå©Ô∏èüå©Ô∏èüå©Ô∏è IT¬†IS¬†ALIVE!!! Now is the time to test the callWithABI patches.

[03:41:49.0527] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[03:58:07.0095] <CosminS|sheriffduty>
hi, could someone have a look over Bug 1668489? it's failing quite often and don't know for sure where it's from. thanks in advance

[03:58:08.0715] <botzilla>
https://bugzil.la/1668489 ‚Äî NEW (nobody) ‚Äî Intermittent hazards | unrooted 'se' of type 'js::frontend::SwitchEmitter' live across GC call at js/src/frontend/BytecodeEmitter.cpp:2217 + other unrooted failures

[04:00:27.0170] <Aryx>
further info: code sheriffs are seeing spidermonkey hazard failures on autoland and central:
https://treeherder.mozilla.org/#/jobs?repo=mozilla-central&selectedTaskRun=UQGuY9HaR8inFqtBXgRVPA.0&searchStr=hazard
https://treeherder.mozilla.org/#/jobs?repo=autoland&selectedTaskRun=ZkXTqqQRSPmGgO3HAbhvSg.0&resultStatus=success%2Ctestfailed%2Cbusted%2Cexception&fromchange=9742d6bf7d2517d511045ec5aa1e3dfd321552c2&searchStr=hazar
First such failure was: https://treeherder.mozilla.org/#/jobs?repo=autoland&selectedTaskRun=fGcT6_8lRVWw1g3FqeUoBg.0&searchStr=hazard&tochange=3316a16b835990b3dacef0c7f549e90a5c41a17d&fromchange=4054397df43732ea40416a097d7452108d3cfa1f
Does anybody have insight what is causing this?

[04:02:54.0964] <Aryx>
nvm, arai commented in the bug

[04:04:05.0276] <arai>
honestly, I have no idea why that happens

[04:04:31.0545] <arai>
now bisecting between patch parts

[04:05:44.0556] <CosminS|sheriffduty>
hopefully this fixes it for now: https://hg.mozilla.org/integration/autoland/rev/2224900e3db5d978e2b2207336a6cfa412595ded

[04:11:52.0749] <arai>
perhaps there's some special handling for `RefPtr` in rooting analysis, and maybe I need some annotation?

[04:29:02.0503] <Waldo>
`js/src/devtools/rootAnalysis/analyzeHeapWrites.js` mentions `RefPtr` a few places.

[04:33:28.0076] <arai>
similar failure happens even after backout https://treeherder.mozilla.org/#/jobs?repo=autoland&revision=2224900e3db5d978e2b2207336a6cfa412595ded&searchStr=haz&selectedTaskRun=Jd7hyjiQQH2l0nVED1UaFg.0

[04:41:29.0692] <CosminS|sheriffduty>
arai: yes, will reland your patch, maybe it's from jonco https://treeherder.mozilla.org/#/jobs?repo=autoland&selectedTaskRun=OCB2qN7gRn6aghJEePUybw.0&searchStr=hazard&tochange=00e795e5aeb16945e822e0e8dc33974326d3c014&fromchange=9a5e08c779234c36a7e2e71df5626e637180a1be

[04:41:47.0683] <arai>
thanks :)

[05:13:55.0037] <jonco>
CosminS|sheriffduty: that doesn't look like the kind of thing my patch would cause

[05:15:26.0249] <CosminS|sheriffduty>
then any other candidate? https://treeherder.mozilla.org/#/jobs?repo=autoland&searchStr=hazard&tochange=00e795e5aeb16945e822e0e8dc33974326d3c014&fromchange=a405b9663b93de760f38361775a24ab5c6911d82 :D

[05:15:56.0612] <jonco>
looking

[05:16:13.0077] <jonco>
the hazards builds are supposed to be deterministic, which is slightly concerning

[05:16:18.0853] <CosminS|sheriffduty>
thank you

[05:18:35.0871] <tcampbell>
Did we break the shell that runs the hazard analysis?

[05:18:56.0266] <tcampbell>
I've managed that in the past by breaking jit in a very slight way

[05:28:53.0495] <jonco>
it's complaining about a bunch of stuff in the frontend being unrooted across indirect calls but I can't see why it thinks e.g. TokenPos needs to be rooted

[05:29:17.0249] <jonco>
sfink: can you take a look when you're around ^

[05:30:41.0683] <jonco>
retriggers are blaming my patch, what

[05:34:18.0618] <tcampbell>
profiling-pro-tip: If you click the "Firefox" in top-left of UI, you can edit tab title so you don't mix up your before/after profiles like me :)

[05:35:14.0768] <jonco>
CosminS|sheriffduty: I guess you should back my patch out then

[05:35:57.0620] <bogdant|sheriffduty>
jonco:  loading backout

[05:36:59.0830] <bogdant|sheriffduty>
 * jonco:  loading autoland backout

[06:05:50.0393] <yulia>
I have a question, possibly for jonco, related to top level await

[06:06:05.0980] <jonco>
yulia: sure

[06:06:26.0101] <yulia>
One of the changes that is happening with top level await, is that we are returning a promise capability from `ModuleEvaluate`

[06:06:48.0337] <yulia>
at the moment, dynamic import uses the value from `ModuleEvaluate`, and expects a `Value`, this will be changed to a promise

[06:06:52.0340] <yulia>
as per https://whatpr.org/html/4352/29b75ea...ea79a7f/webappapis.html#hostimportmoduledynamically(referencingscriptormodule,-specifier,-promisecapability)

[06:07:09.0458] <yulia>
i sort of have two questions, this was trickier than i thought

[06:07:44.0544] <yulia>
the first is: we will likely need to have this behind a flag for a little while -- should I keep two implementations around, one with the capability and one without? What is the best way to flag this off?

[06:09:01.0214] <yulia>
the second is, the html spec requires unwrapping the promise and just reporting the error. I am playing around with dom promises right now... but since you implemented dynamic imports you might have a good sense of how promises should be treated on the dom side: Should I be working with a dom defined promise here, and pulling the error out of that, or should i pass it back to spidermonkey? I am not sure how exactly to report the error

[06:09:18.0736] <yulia>
the added bonus is that it needs to work in jsshell

[06:09:31.0310] <yulia>
 * the added bonus is that it needs to work in jsshell (or the tests fail)

[06:10:06.0987] <yulia>
I have been staring at this for two days so, i might not be making sense

[06:10:58.0556] <jonco>
ok let me think about that...

[06:11:19.0283] <yulia>
also, extra bonus: the spec text is currently unresolved for how dynamic import should work exactly: https://github.com/tc39/proposal-dynamic-import/pull/71 -- i think we can just do something that makes sense for now and fix it later

[06:11:54.0863] <yulia>
 * also, extra bonus: the spec text is currently unresolved for how dynamic import should work exactly: https://github.com/tc39/proposal-dynamic-import/pull/71 -- i think we can just do something that makes sense based on the pr for now and fix it later

[06:12:45.0412] <yulia>
 * also, extra bonus: the spec text is currently unresolved for how dynamic import should work exactly: https://github.com/tc39/proposal-dynamic-import/pull/71 -- i think we can just do something that makes sense based on the pr for now and fix it later. It works about how you would expect though, so no surprises.

[06:14:40.0977] <jonco>
re configuration, the best way might be to make ModuleEvaluate always return a promise (works for both situations) and disallow the actual top level await part depending on the flag

[06:16:35.0658] <yulia>
The section in the html spec that is giving me some grief is https://whatpr.org/html/4352/29b75ea...ea79a7f/webappapis.html#calling-scripts inn "To run a module script given a module script script ,..."

[06:17:40.0699] <yulia>
I have the unresolved promise reporting correctly (and i thought i was unwrapping it, but i wasn't doing it quite right). the issue is rather than reporting `Uncaught exception[..] TypeError` we should be reporting `TypeError`

[06:18:28.0048] <jonco>
hmmm

[06:18:32.0296] <jonco>
not sure about that

[06:18:50.0867] <jonco>
what is adding the 'uncaught exception' part - is that spidermonkey doing that?

[06:19:19.0643] <yulia>
in the jsshell we add it if we have an uncaught exception and no other erroors

[06:19:43.0190] <yulia>
i forgot where exactly that happens in the browser though.. i can look

[06:20:00.0214] <yulia>
its not coming from spidermonkey though

[06:20:45.0343] <jonco>
hmm I can't find it with searchfox

[06:20:57.0864] <yulia>
In the dom code, we don't seem to add it except for in devtools so it might be devtools specific..

[06:21:07.0523] <yulia>
(as in, logs in the terminal show the right thing)

[06:21:52.0873] <yulia>
I think in the shell we go through this code path: https://searchfox.org/mozilla-central/source/js/src/shell/js.cpp#10853

[06:22:09.0803] <yulia>
 * I think in the shell we go through this code path: https://searchfox.org/mozilla-central/rev/f21850ca45036ddb84cd25aa355a6969d7c94c4f/js/src/shell/js.cpp#10853

[06:22:52.0887] <jonco>
oh, so you want to add a catch action to the promise (can't remember the exact terminology) to report this to the console

[06:23:23.0998] <yulia>
yeah, i guess... so that we are reporting this not as an unhandled promise error, but as an error

[06:24:36.0254] <jonco>
so maybe JS::AddPromiseReactions? I don't know too much about promises though, there may be a better way

[06:25:09.0776] <jonco>
it would be nice if you could do this without creating JS function objects etc but not sure whether that's possible

[06:25:57.0917] <yulia>
Hmm, ok -- i will play around with it. it sounds like the right place to handle this would be within spidermonkey, rather than the dom/script

[06:27:53.0014] <jonco>
yeah, if that works - the SM/browser API is modelled after the spec which means it might not be the most convenient boundary

[06:28:43.0269] <yulia>
yeah that was also what made me unsure, I don't think anything would rely on it... but its not specified in ecma262, and we were following that boundary pretty closely so far

[06:28:49.0985] <yulia>
i could also just expose an api that can be called by the dom

[06:29:55.0138] <jonco>
yeah, I don't think anything relies on it, it's just easier to see we are following the spec

[06:38:59.0842] <arai>
the issue about the rooting hazard seems to be whether `mozilla::detail::MaybeStorage::NonConstT` is marked as GC pointer or not

[06:40:25.0861] <arai>
it's listed under `GCInvalidated` in typeInfo.txt, only in failing case

[07:12:10.0072] <jonco>
thanks arai

[09:26:14.0460] <jorendorff>
djvj: tcampbell: bug 1668335 is maybe interesting

[09:26:16.0173] <botzilla>
https://bugzil.la/1668335 ‚Äî NEW (nobody) ‚Äî Crash in [@ js::frontend::ParserAtomEntry::toJSAtom]

[09:26:49.0962] <djvj>
jorendorff: taking a look now, thanks.

[09:27:02.0151] <jorendorff>
cool

[09:28:50.0773] <jorendorff>
tcampbell: What do you think about this assertion stack? https://treeherder.mozilla.org/logviewer.html#/jobs?job_id=317277398&repo=autoland&lineNumber=11650-11693

[09:29:33.0609] <tcampbell>
try yoshi

[09:30:36.0276] <jorendorff>
cool

[09:31:46.0651] <jorendorff>
@allstarschh|afk: ^

[09:35:32.0142] <jorendorff>
denispal: going to cc you too -- this is re: bug 1666724

[09:35:33.0544] <botzilla>
https://bugzil.la/1666724 ‚Äî NEW (nobody) ‚Äî Intermittent PROCESS-CRASH | Main app process exited normally | application crashed [@ mozilla::LinkedList<js::ParseTask>::~LinkedList()]

[09:52:30.0047] <denispal>
jorendorff: sure.  seems we need something like https://searchfox.org/mozilla-central/source/js/src/vm/HelperThreads.cpp#861 but at the beginning of shutdown.  I can play around with it.

[09:53:05.0880] <jorendorff>
That seems right. Thanks.

[11:12:55.0756] <syg>
marco: jorendorff: ping

[11:13:04.0739] <jorendorff>
pong

[11:13:56.0980] <jorendorff>
syg: pong

[11:14:37.0758] <syg>
i saw in passing on github that SM is omitting String.prototype.item from the item implementation

[11:15:02.0683] <jorendorff>
!

[11:15:04.0742] <syg>
is there a plan to bring it back to committee?

[11:15:50.0745] <syg>
(https://github.com/mozilla/gecko-dev/commit/4859a3db51b8bde768a6f6e829d519e97c6fd1a8)

[11:16:08.0684] <syg>
not sure why i pinged marco, i must've misread a commit with them as the author. guess evilpie implemented it

[11:21:16.0638] <jorendorff>
syg: I don't plan to bring it back to committee. The conversation was bad enough in the September meeting

[11:21:22.0635] <jorendorff>
I'll file the follow-up

[11:21:51.0919] <jorendorff>
...though it seems possible we'll be backing this out anyway, for unrelated compat reasons

[11:21:59.0914] <syg>
oh fascinating

[11:22:11.0111] <syg>
do tell

[11:22:33.0779] <jorendorff>
just https://bugzilla.mozilla.org/show_bug.cgi?id=1668342

[11:22:55.0975] <jorendorff>
= https://github.com/tc39/proposal-item-method/issues/28

[11:23:38.0354] <syg>
ah i don't do a very good job of monitoring GH and had missed that, thanks for the pointers

[11:25:47.0993] <jorendorff>
np

[11:27:46.0295] <syg>
aw man, i wonder if that's a common pattern, where presence of `.length` and `.item` are used to duck-type HTML collections...

[11:28:44.0822] <sfink>
The Resurrection Of `nth()`

[11:29:58.0920] <jorendorff>
I keep realizing weeks later that something about TC39 seems messed up

[11:31:00.0932] <jorendorff>
like, the committee theoretically runs on consensus, yet this feature goes to stage 3 which ... obviously did not have achieve anything a normal person would call "consensus"

[11:31:50.0103] <jorendorff>
because Waldemar and one or two others indicated willingness to spike `.item` entirely if strings didn't also get it

[11:33:22.0728] <sfink>
Not having `String#item` will make template metaprogramming harder in JS. Not quite as much as the lack of template metaprogramming in JS, but still.

[11:33:29.0890] <jorendorff>
 * because Waldemar and one or two others said they'd spike `.item` entirely if strings didn't also get it

[11:33:33.0633] <sfink>
/me shuts up

[11:39:11.0896] <jorendorff>
syg: this won't happen, but it would be hilarious if it turned out there was a counter-bug that made it work fine if strings also counted as HTML collections

[12:23:27.0516] <syg>
sorry was in a meeting

[12:23:43.0352] <syg>
jorendorff: yeah i'm not a fan of process

[12:23:57.0705] <syg>
i'm one of those pro-voting people actually, but i guess i'm in a minority

[12:24:18.0321] <jorendorff>
i like voting better than what we have now

[12:32:10.0875] <syg>
i really want functional escalation paths that are a good use of my time. i see it as a major problem that the only real escalation path we have are either 1) significant personal undertaking to backchannel or 2) debate to death over the course of many meetings


2020-10-02
[23:54:50.0729] <yulia>
syg: jorendorff that is a good point about the september meeting. it wasn't really consensus and it seemed to get pushed through via "all or nothing"

[00:49:13.0510] <jandem>
heads up: warp is now enabled by default also for the JS shell, use `--no-warp` to disable

[00:49:21.0979] <jandem>
decoder: ^

[00:49:40.0833] <decoder>
does --warp still work?

[00:50:03.0699] <jandem>
yeah but it's a no-op

[00:50:09.0479] <decoder>
great. thx

[02:15:30.0684] <yulia>
I am thinking of taking on https://bugzilla.mozilla.org/show_bug.cgi?id=1666401 for the stream as a quick one off

[02:15:38.0045] <yulia>
mgaudet: do you have any concerns?

[02:18:57.0120] <yulia>
looks like it is just changing an error message, but will be a chance to look at what a helpful error message is, and introduce private fields to the audience if they don't know about them already

[05:19:48.0952] <mgaudet>
yulia: go for it :) I've been shamefully ducking that ni? for a week now... 

[05:20:49.0277] <yulia>
haha cool

[05:47:44.0450] <djvj>
nbp: which patch introduces '#define ABIFUNCTIONSIG_LIST(_) \' ?

[05:48:00.0409] <nbp>
djvj: part 14?

[05:48:12.0030] <djvj>
nbp: one of the ones in my review queue shows an empty declaration of that being added to, just want to find where the empty declaration was aadded

[05:48:23.0502] <djvj>
cool, i'll check

[05:48:33.0254] <nbp>
djvj: otherwise, there is a big patch which aggregate all of them, where you can find it.

[05:48:48.0181] <nbp>
the one with [DO NOT COMMIT] in the title

[05:49:33.0010] <nbp>
(it is out-dated a bit and missing some of the lastest changes, but good enough)

[05:49:44.0829] <djvj>
Patch 14 had it, thanks1

[07:04:25.0325] <yulia>
for the upcoming stream

[07:58:15.0758] <sfink>
I downloaded all the patches and imported them. Not all of them applied cleanly, I had to do a bit of fixup.

[08:51:30.0939] <nbp>
sfink: Speaking about the callWithABI bug?

[08:51:39.0323] <sfink>
yes

[08:51:55.0178] <nbp>
jandem: the test case should now be in a working state for arm64.

[08:52:14.0567] <sfink>
I wanted to play around with the code, since I'm never confident enough with templates to request things without trying them out.

[08:52:18.0808] <nbp>
sfink: I will rebase, do you want me to share my current branch on github?

[08:53:13.0822] <sfink>
at the moment, I have a stack of patches on top of something locally. I'll probably just send them to you. Whether you attempt to apply them to the current code, or just do the same change manually, is up to you.

[08:54:20.0652] <sfink>
btw, one of the changes is that the test case took way too long to run, so I hacked up the test harness so that it allowed opt-in reuse of a cx & global, for a 322x speedup. Makes it much easier to rerun the test while modifying things.

[08:55:24.0110] <nbp>
That would definitely be an improvement to not initialize a new runtime each time.

[08:55:37.0809] <sfink>
all the time goes to recompiling self-hosted code

[08:56:21.0437] <nbp>
you changed it by making a single test case for all functions?

[08:56:44.0271] <nbp>
or added a way to ask for a clean one or reuse.

[08:56:58.0303] <sfink>
No. I added a `reuseGlobal` bool field. If both a test and the previous test have it set, it reuses.

[08:57:15.0857] <nbp>
Nice!

[08:57:33.0529] <sfink>
also, I changed the autogenerated test names to start with "JITABI" so you can run `.../jsapi-tests JITABI` and have it just run those.

[08:58:06.0246] <nbp>
oh ‚Ä¶ I did not knew we could use prefixes for selecting tests.

[08:58:15.0766] <sfink>
substrings

[08:58:29.0124] <sfink>
it's really nice; otherwise jsapi-tests takes forever to run

[08:58:29.0492] <nbp>
Thanks for this involed review!

[09:01:42.0141] <nbp>
I've been wondering lately, maybe this whole thing about building a buffer with templates can be replaced by a single buffer which is reused by all test cases ‚Ä¶ which would be simpler than this template soup.  I came up with this strategy after trying to use `mozilla::Tuple`.

[09:02:39.0765] <nbp>
but then I had to introduce padding to satisfy MoveOperands loads :/

[09:03:10.0873] <nbp>
I guess this might be problematic if we ever add the BigEndian variant of this ‚Ä¶

[09:03:54.0120] <nbp>
/me ^ thinking aloud

[09:50:39.0849] <mgaudet>
yulia: Good stream :) 

[09:50:46.0752] <mgaudet>
sdetar: Can we send yulia a faster computer 

[09:50:50.0941] <mgaudet>
please :P 

[09:55:15.0201] <nbp>
iain: I wish we could x2 in real life.

[09:58:40.0266] <yulia>
yeah that was rough

[09:59:15.0517] <yulia>
For unscripted sessions my computer might just be too slow

[10:00:18.0125] <nbp>
yulia: do you want access to a computer?

[10:00:22.0533] <yulia>
I have a second machine, but its stuck at the office

[10:00:30.0956] <yulia>
its also a laptop, its a used linux machine

[10:00:43.0120] <yulia>
I had it for when i was testing windows/linux and mac for devtools

[10:01:51.0638] <yulia>
I wasn't allowed to grab it in march because of the pandemic, but maybe that changed now

[10:02:09.0043] <nbp>
I think you should be able to request it now.

[10:03:00.0782] <nbp>
Also, some people have a system where you can use the monitor output and get it recorded by another computer. Florian used that in the past to record the screen of the reference device.

[10:04:10.0506] <yulia>
i think using ssh should be enough

[10:04:17.0270] <yulia>
the only issue will be if i ever need to show the browser

[10:05:59.0456] <mgaudet>
doable (with caveats) with vnc; I have it rigged up here and can show of my setup

[10:06:03.0843] <mgaudet>
 * doable (with caveats) with vnc; I have it rigged up here and can show off my setup

[10:08:03.0351] <yulia>
mgaudet: maybe lets set up a time next week to take a look?

[10:08:11.0218] <mgaudet>
Sure thing :) 

[10:08:26.0066] <mgaudet>
toss something on the calendar :) 

[10:08:27.0785] <yulia>
because doing this unscripted is a much lower burden for me as well, as I don't have to have everything planned in advance -- so it would ease the work load

[10:08:39.0137] <yulia>
but i haven't been doing that because of compile times..

[10:08:55.0230] <yulia>
aight, ill put something on monday

[10:09:09.0264] <yulia>
like, not for monday, but you'll get an invite

[10:09:19.0173] <mgaudet>
OK

[10:56:36.0309] <jorendorff>
this if statement was supposed to be easy but it's not super easy

[10:56:52.0242] <jorendorff>
turns out the frontend really wants to decide which bindings are aliased as it exits scopes

[10:57:41.0683] <jorendorff>
(the if statement in question is: if this generator has more than 100 fixed slots, mark all the locals as aliased instead)

[10:58:36.0763] <jorendorff>
so as I exit each scope, I can make that determination _for that scope_, but not for all scopes together. Maybe that's good enough.

[10:59:18.0032] <jorendorff>
Suppose I let leaf scopes (the most-nested ones) with <100 bindings slip through

[11:00:09.0924] <jorendorff>
but the enclosing scopes are somehow aware of those nested scopes and include them in their count ... it would make sure there are <100 fixed slots altogether, i think

[11:26:41.0901] <evilpie>
mgaudet: it's unfortunate that we are reusing "expando" for private slots

[11:26:47.0070] <evilpie>
* fields

[11:27:13.0876] <evilpie>
I just spent 15 minutes convincing myself that `CacheIRCompiler::emitLoadDOMExpandoValue` is loading the right thing

[12:03:56.0297] <mgaudet>
evilpie: Just name wise, or conceptually? 

[12:15:43.0767] <evilpie>
yeah, the name clash with DOM expandos

[12:16:09.0114] <evilpie>
and DOM expandos are stored in the proxy privateSlot, which is right next to the expandoSlot

[12:30:28.0083] <mgaudet>
hrm. It's true, it's awkward. Though, I thought the name was good because of the conceptual rhyme with DOM expandos


2020-10-03
[03:28:10.0105] <decoder>
Waldo: the bug you just commented on with the mRawPtr assertion is for fuzzing builds only, are you sure that is what you are seeing?

[03:28:14.0675] <decoder>
the code is not present in normal builds

[03:29:50.0201] <Waldo>
decoder: It's definitely that variable...and it seems I do have `ac_add_options --enable-fuzzing` in my `mozconfig` from some previous bug and had forgotten about it.  I can remove that and move on, sure.

[03:30:05.0905] <decoder>
yea, that is the reason then.

[03:30:10.0432] <decoder>
i need to look into the bug again


2020-10-05
[01:53:07.0288] <jonco>
yulia: I'm happy to review patches for bug 1669153

[01:53:08.0907] <botzilla>
https://bugzil.la/1669153 ‚Äî NEW (yulia) ‚Äî Migrate Module.js code to ModuleObject.cpp

[01:53:29.0574] <yulia>
jonco: yeyyy 

[01:53:36.0675] <yulia>
I was planning on sending them your way anyway :P

[01:53:47.0886] <jonco>
ok cool :)

[01:53:48.0037] <yulia>
you will probably get something today, should have made the bug earlier

[01:54:18.0819] <jonco>
great

[02:54:48.0215] <miles>
Hi. I'm trying to move from mozjs-76 to mozjs-78 and it looks like JS_DefineConstDoubles and JSConstDoubleSpec have been removed. Now that they no longer exist is the preferred way to create static constants to use JSPropertySpec and the static_ps argument in JS_InitClass (defining the properties as JSPROP_READONLY|JSPROP_PERMANENT) or is there something else I should be doing/using? Can anybody confirm/help?

[03:14:32.0950] <jandem>
miles: you could do something like this: https://searchfox.org/mozilla-central/rev/4352fb7b0d17c1febff9569ed311e0e42c93093e/js/src/jsnum.cpp#1314

[03:17:52.0295] <jandem>
(so yes, what you said)

[03:18:41.0327] <miles>
OK. Thanks

[06:43:12.0718] <evilpie>
Am I the only one who keeps seeing warnings in ICU when compiling?

[06:43:14.0018] <evilpie>
> home/tom/projects/mozilla/intl/icu/source/i18n/formatted_string_builder.h:227:34: warning: possible misuse of comma operator here [-Wcomma]

[06:43:22.0593] <evilpie>
Would be nice to disable if possible

[06:59:37.0850] <tcampbell>
sfink warned me there might be horrors there, but looking again I wonder if it is just not here we change: https://searchfox.org/mozilla-central/rev/4352fb7b0d17c1febff9569ed311e0e42c93093e/config/external/icu/defs.mozbuild#52-57

[07:06:39.0974] <evilpie>
clang-cl is some windows thing

[07:21:51.0752] <tcampbell>
hmm

[08:00:09.0081] <nbp>
the next person who goes there owns it üòÄ

[08:30:28.0417] <sfink>
I think I was only talking about the horrors of the icu code itself.

[08:31:02.0649] <Ms2ger>
I don't gaze into ICU... Afraid it will gaze back

[08:31:38.0882] <sfink>
I'd be all for disabling those warnings. I guess I've been too lazy to do it myself; I just get irritated everytime I see them (ie, my console gets filled with pages and pages of them)

[08:33:00.0076] <sfink>
I have enough trouble gazing into mirrors. Why do people have them, when they show such awful things? I've never understood that.

[08:38:54.0297] <yulia>
jonco: i didn't get to cleaning up the module move yet

[08:39:01.0684] <yulia>
just a heads up

[08:43:36.0951] <jonco>
yulia: np!

[08:44:59.0702] <yulia>
I got distracted for part of the day with consolidating ModuleBuilder, and having the stencil stuff independent from ModuleObject -- is that worthwhile? I might do it later if it is

[08:45:32.0430] <yulia>
 * I got distracted for part of the day with consolidating ModuleBuilder, and having the stencil stuff independent from ModuleObject -- but it took too long -- is that worthwhile? I might do it later if it is

[08:51:09.0229] <nbp>
sfink: Do you want to make the `reuseGlobal` patch as a standalone patch that I can review?

[08:52:03.0279] <sfink>
yes, I intended to do that, but then decided to wait until you told me whether it was a ridiculously bad (unsafe) idea or that there was a better way to achieve the same thing more safely. ;-)

[08:52:38.0628] <sfink>
oh, and I forgot to mention -- `jsapi-tests "JIT ABI"` will run your tests (I think that's the string I ended up with)

[08:53:25.0187] <nbp>
I have not yet imported the patches, I will do that next, after pushing the 36 previous one.

[08:54:43.0269] <sfink>
but yes, I'll split it out

[09:53:44.0807] <jonco>
yulia: oh sorry missed your reply - I'm not sure how import that is tbh

[09:54:04.0835] <jonco>
 * yulia: oh sorry missed your reply - I'm not sure how important that is tbh

[09:54:40.0076] <yulia>
ok

[11:46:17.0854] <syg>
yulia: continuing last week's convo, why isn't that considered consensus?

[11:46:54.0810] <syg>
we don't formally define consensus to mean a particular thing -- in practice it means lack of objections. i asked for objections and nobody spoke up

[11:58:10.0715] <iain>
syg: I believe the issue is that there clearly were objections, but nobody wanted to speak up about them because it had been framed as "all or nothing"

[11:59:25.0819] <syg>
there were certainly strong feelings; i don't like how that's how our "consensus" works sometimes but it's still consensus

[12:00:42.0172] <iain>
I guess the question is whether we want to continue working that way

[12:02:10.0984] <iain>
With the disclaimer that I wasn't there and all my information is secondhand, it seems like by the current standards of consensus, consensus was reached

[12:02:54.0661] <iain>
But it's hard to say that consensus was reached by the standard dictionary definition of the word

[12:03:30.0054] <syg>
i'd say definitely not for the standard dictionary definition of that word

[12:03:42.0710] <syg>
though i don't know what the general dictionary definition of "general agreement" means, supermajority?

[12:03:59.0824] <syg>
i personally would not like to continue working this way

[12:10:31.0774] <iain>
My personal opinion is that it would be good to normalize splitting out the contentious parts of proposals into their own proposals, similarly to cleanupSome from the weakref proposal

[12:10:55.0720] <iain>
So that the parts that everybody agrees on can move forward while we sort out the details where we lack consensus

[12:11:09.0807] <syg>
some people don't like overincrementality either

[12:13:55.0432] <syg>
my slightly hot take for resolving contention is that sometimes i want to move forward at the cost of debating things even more. you can interpret this particular issue as a failure of not heeding all voices; i interpret it as inability to recognize that not all contention imply "worth more debate"

[12:22:48.0918] <iain>
I guess it depends on what the alternative is. For better or worse, "consensus" provides a framework for deciding when it's time to move forward.

[12:25:57.0636] <syg>
well, if that time is when "almost everyone is happy", it'll always favor more discussion, no?

[12:29:26.0015] <iain>
Sure. What I'm saying is that if you think we should sometimes skip the debate and move forward, it would help to propose a standard for how we decide to do that

[12:30:06.0972] <iain>
Stuff like "you can't block moving to stage 4 because you dislike the entire premise of the proposal" is a step in this direction

[12:30:13.0969] <syg>
ah, yes, agreed

[13:23:07.0763] <tcampbell>
confession: XPConnect is a scary place

[13:23:10.0557] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[13:50:39.0329] <tcampbell>
kmag: I forgot to mention, but this work is also the gateway to having ESMs work in bytecode caches which was a (perf) blocker for esm-ification


2020-10-06
[05:12:35.0227] <annevk>
So WebKit implemented TextDecoderStream/TextEncoderStream meaning they probably have WriteableStream/TransferableStream implemented as well; that makes us the last browser to not do that. Thoughts?

[05:28:55.0964] <jandem>
Waldo: ^ (he's working on this, see recent patches in bug 1502355)

[05:28:57.0780] <botzilla>
https://bugzil.la/1502355 ‚Äî REOPENED (Waldo) ‚Äî Implement ReadableStream.prototype.pipeTo and pipeThrough

[06:04:02.0517] <annevk>
cool cool

[08:28:52.0447] <yulia>
jonco: do you know where the XDR module code is used? (for example https://searchfox.org/mozilla-central/source/js/src/builtin/ModuleObject.cpp#1977)

[08:29:53.0793] <jonco>
yulia: doesn't look like it's used so far but tcampbell  may know more... I think this is for the bytecode cache support for modules

[08:30:47.0143] <yulia>
hmm ok... one more question then -- we use arrays to represent lists: https://searchfox.org/mozilla-central/source/js/src/builtin/ModuleObject.cpp#1365-1368,1373-1376,1381-1384,1389-1392,1397-1400

[08:31:19.0038] <tcampbell>
we can remove `XDRRequestedModuleObject` if it is annoying

[08:31:20.0536] <yulia>
When I did my first pass of this, I made my async module loading implementation in cpp to begin with, so I used a ListObject instead of ArrayObjects

[08:31:51.0342] <tcampbell>
we were hoping to use it while stencil was still in progress, but at this point any XDR of modules will only be via stencil

[08:32:06.0193] <yulia>
I was under the impression that we were using ArrayObjects for the selfhosted code, but maybe we are using this elsewhere somehow?

[08:32:41.0240] <tcampbell>
those ArrayObjects were for self-hosted module.js code, yes

[08:33:25.0366] <yulia>
ok, so it shouldn't be a issue if i switch things to lists, unless there is an easy way to work with ArrayObjects within cpp, i haven't found a good way of iterating and extracting values so far..

[08:33:44.0645] <jonco>
yulia: the test code peeks at the module internals at the momenty

[08:33:52.0901] <jonco>
 * yulia: the test code peeks at the module internals at the moment

[08:34:01.0403] <yulia>
oh, yeah that might be an issue

[08:34:21.0675] <jonco>
so that's one think to take account of

[08:34:33.0062] <jonco>
there's no reason they need to be Arrays though 

[08:34:40.0517] <tcampbell>
by "list", do you mean "ListObject"?

[08:35:04.0670] <tcampbell>
 * yulia: by "list", do you mean "ListObject"?

[08:35:48.0213] <yulia>
yes

[08:35:53.0257] <jonco>
what's a ListObject?

[08:35:58.0423] <tcampbell>
yeah, switch Array to List is totally fine

[08:36:11.0089] <yulia>
its relatively new: https://searchfox.org/mozilla-central/source/js/src/vm/List.h#32

[08:36:26.0524] <tcampbell>
a ListObject is just a type we use when spec says "List" in indicate internal list structure

[08:36:51.0371] <jonco>
yulia: JS::GetArrayLength and JS_GetElement can be used to work with array objects in c++

[08:36:55.0695] <tcampbell>
rather than using an Array which makes it hard to know if this is implementation detail or exposed to script

[08:37:18.0939] <tcampbell>
I think we did it because there was a bunch of code manually doing stuff with dense-elements

[08:37:42.0365] <tcampbell>
(accessing ListObject from self-hosted is fine. It is a real object)

[08:37:57.0582] <syg>
yulia: a friendly reminder since i'm going through this now and you're also implementing TLA. don't forget about service worker integration! i completely did

[08:38:18.0678] <yulia>
syg: ah, good tip thanks!

[08:38:23.0204] <jonco>
yulia: ah neat

[08:38:41.0362] <tcampbell>
syg: do worklets get TLA? I just noticed they use module contexts

[08:38:46.0109] <jonco>
tcampbell: right, working with arrays can be a pain

[08:39:22.0099] <yulia>
syg: regarding the question you had yesterday, about `.item` is that all cleared up?

[08:40:11.0211] <syg>
tcampbell: worklets do, afaik. the only worker context that doesn't is ServiceWorker

[08:40:22.0446] <syg>
and it checks for the presence of [[Async]] in the graph post-linking, pre-evaluation, and throws a TypeError

[08:40:54.0951] <tcampbell>
ah, interesting

[08:41:16.0168] <syg>
yulia: re: `.item`, i think so? jorendorff said y'all will implement `String#item`. though that's all on hold until we hear back from the Magic 360 folks

[08:41:50.0022] <jorendorff>
syg: let's chat

[08:41:56.0499] <syg>
tcampbell: the rationale is that they don't want service workers to stall during registration

[08:42:17.0366] <jorendorff>
syg: we'll implement the standard

[08:43:56.0778] <jorendorff>
@syg: I wasn't super thrilled with the way this issue was decided at TC39. I agree with Kevin's post here: https://github.com/tc39/proposal-item-method/issues/20#issuecomment-696825745

[08:45:03.0522] <jorendorff>
syg: If it happens that a lot of folks want to revisit this issue, to determine what the consensus view of the committee really is, we'll reiterate our opinion, which is that developers are a little better off without this

[08:45:28.0898] <jorendorff>
we don't plan to insist on revisiting/reopening the issue

[08:45:38.0164] <syg>
okay, that's a different concern from my concern

[08:46:33.0446] <syg>
i'm not against reopening the issue (despite thinking it's not a good use of time), if someone wants to do the work to not stall the entire thing given the other side's feelings of not unbundling

[08:47:08.0082] <syg>
my concern here is that i dislike the not implementing part because of disagreement with the consensus reached, or the way consensus was reached

[08:47:14.0058] <syg>
if there's disagreement with consensus, please bring that back up

[08:47:26.0625] <syg>
instead of not implementing a part of the consensus, then waiting and seeing

[08:47:37.0422] <jorendorff>
syg: please don't overrotate on us taking a volunteer patch that's in Nightly only

[08:48:05.0524] <syg>
ah, that's fair. i may have misinterpreted the intention of that patch

[08:48:07.0978] <jorendorff>
we'll conform before shipping it to Release

[08:49:05.0585] <yulia>
syg: We aren't intending on using our implementation as a way to modify what happens at tc39 -- its not something we would do. At the time it was implemented there were some open questions regarding the status of string (tom started before we went into the meeting)

[08:49:16.0973] <syg>
okay, we can table discussion about the patch. that sounds all good then, i didn't want us to get in a situation where browsers are doing the unbundling themselves, that's all

[08:49:50.0119] <yulia>
I do have concerns about the consensus process in part, as we have recently added this line as part of my patch to the process document: https://github.com/tc39/process-document/pull/29/files#diff-eacf331f0ffc35d4b482f1d15a887d3bR188

[08:51:11.0171] <yulia>
that, and the arguments we can use for stage 3 being protected, depends on how we move things into stage 3, thats my overarching process concern

[08:51:12.0832] <syg>
let's dig into the "not thrilled" part for a bit. a failure mode we've had for a while is that whoever is not afraid of committing the social capital to block can tend to sway "consensus", is that the concern on your end?

[08:52:09.0830] <syg>
i've also heard the concern that it was because it was pushed as "all or nothing", and that could be interpreted either as a concern that i should not have pushed for consensus in that situation, or as an implication of the "people who aren't afraid to block can bully" concern

[08:53:40.0176] <jorendorff>
I think the way you proceeded was basically carrying on how TC39 apparently does things these days; it'd be hard to say you shouldn't have

[08:53:45.0484] <jorendorff>
and unfair

[08:53:52.0165] <jorendorff>
I haven't read the process document patch, btw

[08:55:16.0895] <yulia>
From my perspective, one of the more important things that comes from the process document update is that we are writing down that stage 3 is protected, and that implementer can invest in the implementatioon. In some ways, what happened with item would give  cause to argue against this, as the current issue tracker demonstrates -- that people are unhappy with things progressing to stage 3 without further discussion. What I would propose in a case like item, which was introduced this year (so it has progress quite quickly) would have been to allow a bit more time for discussion, rather than pushing for consensus. It may not mean that we achieve a different result, but on the other hand it is important for trust across organizations

[08:55:28.0291] <jorendorff>
syg: to be totally honest, I have a clearer picture of what I think is bogus than of how to fix it

[08:56:13.0591] <yulia>
I don't have any request that we change things now, but I would be interested in what your thoughts are there, and whether you see this as a potential risk as I do

[08:56:35.0075] <syg>
yulia: i disagree with that "spend more time" is a good blanket solution. i don't think that there is contention means more time should be spent

[08:57:51.0148] <syg>
in other words, i think contention is an input into a prioritization decision, but not the main one

[08:58:13.0853] <syg>
we love to debate ad nauseum, and i don't want to encourage it

[08:59:08.0050] <yulia>
I would agree if we were discussing a long running proposal, but this one has moved very quickly, and had broad support

[08:59:47.0480] <jorendorff>
syg: To answer your earlier question ("is that the concern on your end"): yes, it's a concern that we somehow end up with veto brinksmanship instead of deliberation that eventually converges on a consensus, or fails to

[08:59:55.0956] <yulia>
Deferring the decision by one meeting would not have resulted in significant time lost, and would likely have resulted with a similar outcome but less dissent

[08:59:59.0553] <syg>
yes, i agree with that concern and would love to change it

[09:00:15.0240] <syg>
(to jorendorff's)

[09:00:36.0305] <syg>
yulia: what makes you think there would be less dissent by waiting a meeting in this case?

[09:00:43.0490] <yulia>
I don't think deferring is the answer here, for the record

[09:01:13.0225] <syg>
(i don't mean to be flippant, i just mean that i honestly don't see what new info i could learn here in a meeting that would change anything)

[09:01:15.0319] <yulia>
I would be interested in thinking through some better ways to manage something like this

[09:01:58.0204] <syg>
my personal preference is as i've said before, an agreed upon escalation path for things that are both contentious and come down to some non-design-aroundable disagreement, i.e. voting

[09:04:08.0009] <yulia>
syg: from a technical perspective, new information is unlikely to have surfaced. However it would have given time for people to discuss and come to clearer conclusions -- possibly opening up the way of splitting the proposal, or assuaging the concerns that people had. 

[09:05:03.0916] <yulia>
again, I don't think we need to change anything per se, but I am concerned about our process and how people will feel about stage 3, given that this became a brinkmanship situation. 

[09:05:41.0108] <jorendorff>
(sorry, meeting)

[09:05:43.0831] <sfink>
(re: voting) are we packing the Supreme Court yet? Or does each participating org get two senators plus a number of delegates proportional to... uh... never mind.

[09:07:37.0068] <syg>
yeah i got a mtg too

[09:07:40.0739] <yulia>
With regard to an escalation path for things that are contentious, I would be interested in discussing that further

[09:07:44.0495] <yulia>
it might be a better direction overall

[09:07:48.0123] <yulia>
And, I also have a meeting

[11:02:05.0055] <syg>
yulia: IMO until we get rid of lone objectors, brinksmanship will continue to be the failure mode, and since most people rightfully feel bad about playing that game, it in practice puts a lot of backchanneling burden onto a select few (most often champions) to resolve things behind the scenes so committee can appear more civil

[11:56:43.0298] <iain>
Oh, neat! Somebody added code coverage info to searchfox, in the little colour-coded bar on the left

[12:23:53.0024] <sfink>
yep, asuth's latest thing. I enjoyed his post about it (that didn't show up on my dev-platform, but replies did.)

[16:07:28.0027] <jorendorff>
I want to rename "isGeneratorOrAsync" to "canSuspend" everywhere

[16:12:39.0095] <sfink>
`isGAsy` is shorter

[16:55:38.0360] <Waldo>
canSuspend is probably not the name I would want to type out, for cases where I'd want to ask that question. For some VM implementation internals, maybe, but outside there definitely not. 


2020-10-07
[00:36:34.0445] <yulia>
jorendorff: i would be very much in favor of renaming it to something more generic

[00:38:15.0505] <yulia>
maybe `isPausable` or `isSuspendable` would address waldo's concern? Reads a little funny though

[01:13:48.0092] <yulia>
jonco: Looking at some of the module stuff, translating it to cpp is doable but a bit ambiguous. For example, we make use of things likee Export Records and ResolvedBinding records -- we represented those as plain js objects in the self hosted code. I took a look at how we do records and came across our finalization records (https://searchfox.org/mozilla-central/rev/1a973762afcbc5066f73f1508b0c846872fe3952/js/src/builtin/FinalizationRegistryObject.cpp#25-67) but this looks a bit heavy weight. What is the best way to do this?

[01:14:03.0687] <yulia>
 * jonco: Looking at some of the module stuff, translating it to cpp is doable but a bit ambiguous. For example, we make use of things like Export Records and ResolvedBinding records -- we represented those as plain js objects in the self hosted code. I took a look at how we do records and came across our finalization records (https://searchfox.org/mozilla-central/rev/1a973762afcbc5066f73f1508b0c846872fe3952/js/src/builtin/FinalizationRegistryObject.cpp#25-67) but this looks a bit heavy weight. What is the best way to do this?

[01:16:15.0222] <yulia>
 * jonco: Looking at some of the module stuff, translating it to cpp is doable but a bit ambiguous. For example, we make use of things like Export Records and ResolvedBinding records -- we represented those as plain js objects in the self hosted code. I took a look at how we do records and came across our finalization records (https://searchfox.org/mozilla-central/source/js/src/builtin/FinalizationRegistryObject.h#116-131) but this looks a bit heavy weight since we don't need to do much with these once they are made. What is the best way to do this?

[01:17:49.0069] <yulia>
 * jonco: Looking at some of the module stuff, translating it to cpp is doable but a bit ambiguous. For example, the spec makes use of things like Export Records and ResolvedBinding records -- we represented those as plain js objects in the self hosted code. I took a look at how we do records and came across our finalization records (https://searchfox.org/mozilla-central/source/js/src/builtin/FinalizationRegistryObject.h#116-131) but this looks a bit heavy weight since we don't need to do much with these once they are made. What is the best way to do this?

[01:30:50.0909] <jonco>
yulia: you can leave them as plain JSObjects

[01:31:24.0411] <jonco>
yulia: potentially they could be replaced with C++ objects but that doesn't gain that much IMO

[01:32:14.0959] <jonco>
*looks at FinalizationRecord*

[01:32:38.0224] <jonco>
oh yeah, something like that is usually how we do this

[01:32:44.0486] <jonco>
inherit NativeObject and add reserved slots

[01:34:54.0687] <jonco>
*reads more*

[01:35:19.0087] <jonco>
not all spec objects will necessarily need to be represented I guess

[01:35:49.0443] <jonco>
export / import records do since they are part of the module metadata

[01:37:09.0107] <jonco>
but resolved binding records are only used as the return value from the ResolveExport method

[01:37:49.0737] <jonco>
as far as I can see

[01:38:56.0500] <jonco>
so this could just be done with out params on the stack

[01:40:29.0282] <yulia>
right, that was what i was thinking for the resolvedBindings (and returning an enum to check for ambiguity if necessary)

[01:40:46.0105] <yulia>
since in that case we might not be able to use a boolean

[01:41:12.0762] <yulia>
and i can just use two out params for the resolution case

[01:41:33.0713] <jonco>
ye

[01:41:38.0991] <jonco>
 * yes

[01:41:48.0555] <yulia>
ok, great, i have a clear way forward then

[01:41:54.0539] <jonco>
cool

[02:16:21.0350] <bnjbvr>
cool webassembly emulator ports there: https://www.retrogames.cc

[05:23:04.0414] <mgaudet>
jandem: Hey: I'm starting to investigate in more detail the idea of Warp compiling generators, and wanted to hear your initial thoughts before I start diving in deeply myself. Did you have a plan laid out, or foresee some bumpy bits? 

[05:28:49.0626] <jandem>
mgaudet: it's probably easiest to focus on making OSR work, so we don't have to handle resuming after a yield. For yielding I imagine we'd have MIR instructions to store the locals and stack slots. What could be annoying is the graph structure after a yield, maybe that could be handled similar to what JSOp::Try does

[05:32:13.0602] <mgaudet>
My brain got poisoned when I worked at IBM, and so OSR is an ambiguous term for me. When you say make OSR work, do you mean transitioning to a lower tier (baseline) implementation when we hit yield, or, being able to tier back into Warp code at a 'sensible point' after a yield; (ie, imagine two hot loops with a yield in the middle: `for () {}; yield; for() { }` 

[05:32:17.0635] <mgaudet>
 * My brain got poisoned when I worked at IBM, and so OSR is an ambiguous term for me. When you say make OSR work, do you mean transitioning to a lower tier (baseline) implementation when we hit yield, or, being able to tier back into Warp code at a 'sensible point' after a yield; (ie, imagine two hot loops with a yield in the middle: `for () {}; yield; for() { }`)

[05:33:32.0474] <jandem>
going from Baseline to Warp code at a loop header

[05:35:58.0598] <mgaudet>
So in your thinking, Generator.next would re-enter the function in baseline, but we'd OSR to warp at loop headers if it's hot enough

[05:37:15.0917] <jandem>
I think that's the best way to get started because that path already works

[05:37:58.0617] <jandem>
question is if eventually we have to support resuming in warp code directly. That's more complicated, multiple OSR points?

[05:40:57.0774] <mgaudet>
jandem: What do you think about JSC's generator-ificiation system (https://webkit.org/blog/7536/jsc-loves-es6/); they express their generators in bytecode as a function with a switch at the top which jumps to resume points; (i've not given it deep thought about what it implies if we were to attempt yet) 

[05:41:00.0887] <tcampbell>
I think the minimal starting point is being able to compile code with no yield/await in it to cover the accidental-async cases

[05:42:42.0015] <mgaudet>
I mostly want to make sure we are free to consider larger changes if it makes things work better; if we need to rework bytecode to make Warp smooth, that's an investment I'm arguing (foreshadowing) we should make

[05:42:53.0076] <jandem>
mgaudet: what jsc does is interesting (v8 does something similar I think) but I wonder how it interacts with MIR control flow (especially loops..)

[05:44:03.0209] <jandem>
on the other hand, it's not unlike the current OSR-block/entry strategy so maybe it would be fine

[05:44:38.0371] <mgaudet>
jandem: Ok, that's a good hint that I should look at our OSR strategy in quite a bit more detail than I have now (0) 

[05:46:39.0445] <jandem>
for OSR the graph has a second entry block that "merges" with the normal control flow before the loop

[05:47:59.0082] <mgaudet>
I think Ted hinted at the answer when I was talking to him yesterday, but when you say 'the' loop: we can only OSR into a function at one loop header? or do we support arbitrary entry points. 

[05:49:46.0453] <jandem>
only at one loop header

[05:53:32.0903] <mgaudet>
(Ted's note is a good one, that hitting the cases where there is no middle-of-the-function yield would be a good starting point, as it sidesteps OSR and covers some of the cases that are accidental cliffs) 

So if we then did want to do OSR after yields, a hypothetical `loop; yield; loop; yield;` would require making us able to OSR multiple entries.   

[05:55:06.0036] <mgaudet>
Has anyone given any thought about inlining generator bodies into enclosing functions, and how we'd do that? 

[05:55:41.0843] <mgaudet>
(Gut says bytecode rewrite style like JSC makes that easier than OSR style; but very little thought so ffar) 

[05:55:44.0000] <mgaudet>
 * (Gut says bytecode rewrite style like JSC makes that easier than OSR style; but very little thought so far) 

[05:56:11.0935] <tcampbell>
/me wonders if as starting point we avoid scripts that yield in loops to avoid bailout hell

[05:58:48.0447] <evilpie>
isn't that like most common use case?

[05:59:23.0749] <evilpie>
I care  a lot more about `await` than `yield` anyway

[06:00:21.0129] <jandem>
keep in mind that even if there's no yield/await there's still the implicit `initialyield`

[06:00:23.0237] <tcampbell>
oh it is important, I just expect starting without that case gives us an incremental way to land things. And yes, awaits are important

[06:00:34.0868] <tcampbell>
oh bleh

[06:02:12.0749] <mgaudet>
yeah - i was trying to think if there was a way around that :) 

[06:03:36.0822] <tcampbell>
unrelated: I wonder about adding a `(void)JSOp::OP;` to the definition of `CASE` macro in interpreter so that it shows up in find-uses

[06:05:54.0808] <mgaudet>
I'd argue that we ought to find some data to support the hypothesis that un-necessary generators/asyncs exist; I'm thinking of something like instrumentation of the BCE that finds functions with only InitialYield/FinalYield; the outcome of which, if they are prevalent, could be an argument that we should special case handle them -- which could be easier to do as there's only two (3?) entry points, rather than an arbitrary set. 

[06:06:09.0273] <tcampbell>
 * unrelated: I wonder about adding a `(void)JSOp::OP;` to the definition of `CASE` macro in interpreter so that it shows up in find-uses. (I'll give it a try and maybe open a bug)

[06:06:21.0015] <mgaudet>
but; too early to do exactly that. I need to do some digging still :) 
=

[06:06:25.0122] <mgaudet>
 *  but; too early to do exactly that. I need to do some digging still :)

[06:06:31.0033] <mgaudet>
 * but; too early to do exactly that. I need to do some digging still :)

[06:06:38.0354] <nbp>
Having a big switch as a replacement of OSR would cause some register allocator issue when optimizing it.

[06:07:35.0033] <nbp>
I guess this could be avoided if we could annotate the switch as being a very unlikely path.

[06:10:44.0835] <mgaudet>
I don't know that it necessarily would be unlikely; the classic generator you'd hit the switch once per call to Generator.next. Though, if it's a bytecode level switch we'd effectively have profiling data which tells us which arms are the most likely, and could use that to drive things. 

[07:42:04.0688] <jorendorff>
I wonder how the JSC thing works... a lot of assertions would be pretty broken for us if we tried that, though admittedly, it is all just software

[07:43:22.0692] <jorendorff>
when i think about how much pain our "unstructured exit" bytecode paths are, unstructured entry seems ...not so attractive

[07:47:21.0718] <jorendorff>
My phone bricked, and I'm locked out of everything but chat. Any idea where I can go for help?

[07:54:03.0091] <jorendorff>
ooh, got into slack üòÖ

[08:00:16.0488] <mgaudet>
jorendorff: could you elaborate a bit on an example of an assertion that would be broken? 

[08:00:58.0485] <jorendorff>
sec

[08:01:35.0169] <mgaudet>
no rush

[08:03:01.0019] <tcampbell>
mgaudet: the stack depth stuff was the big example I was given in past

[08:03:30.0748] <tcampbell>
eg the dispatch jumps somewhere and we don't see explicit push/pop to adjust it

[08:06:25.0706] <mgaudet>
That seems surmountable... which is to say, I imagine a 'switch-at-entry' would jump to an intermidate block to do stack fixing, then, subsequently jump to after-yield; 

[08:11:16.0524] <jorendorff>
it's all surmountable

[08:13:11.0980] <jorendorff>
It sounds like it might end up being kind of a lot of bytecode. I'm imagining: every call and every resume enters at the top

[08:13:48.0408] <jorendorff>
oh, wait, where do arguments come from if you're resuming, and how do you also get the next/throw/return argument into the frame?

[08:14:10.0361] <jorendorff>
maybe it's pushed to the expression stack on entry

[08:14:19.0473] <mgaudet>
heh; not sure yet. I always forget generator.next takes an argument 

[08:14:28.0555] <mgaudet>
(and that yield gets one) 

[08:16:18.0058] <jorendorff>
ok, so now when you enter a generator you need to have the generator itself somewhere (currently smuggled in via a `.generator` binding in the environment) and the resumption info (the argument and the kind of resumption) on the stack. then we could do an "if generator exists"

[08:18:09.0740] <jorendorff>
and inside of that, a tableswitch; for each resume point, we need a case with bytecode to e.g. reload the env pointer from the generator object

[08:18:54.0379] <jorendorff>
and copy locals and expression stack slots from the generator to the frame

[08:19:09.0185] <jorendorff>
doing that with bytecode isn't super attractive, maybe there's a better way

[08:19:25.0211] <jorendorff>
and after all that, Jump into the body, to an AfterYield instruction?

[08:19:50.0104] <jorendorff>
i think you very much want to make all that prelude code non-debugger-observable

[08:20:11.0751] <iain>
Does it make sense to wrap this up in one mega-op?

[08:20:42.0379] <iain>
Like a table switch, but with an extra argument per-resume-point with the current stack depth?

[08:21:06.0193] <jorendorff>
is that different from how Resume works now though?

[08:21:27.0876] <jorendorff>
I don't know what's wrong with JSOp::Resume, actually

[08:22:38.0948] <mgaudet>
:) That's a fair criticism. I don't have the  whole picture top to bottom in my head yet -- but aspirationally, I'd love for us to be able to warp compile generators, and also ensure that we're able to inline a generator into caller where possible

[08:23:29.0000] <jorendorff>
well, i do wish we could inline generators; the trick is always falling back and reconstructing the correct heap state if some jerk monkeypatches something

[08:23:40.0918] <jorendorff>
at least, i think that's the hardest part

[08:24:24.0881] <jorendorff>
another nontrivial part is how the caller interacts with the coroutine

[08:25:54.0615] <jorendorff>
because... it seems like the natural goal of inlining is, you want the generator stack frame to be merged into the caller's stack. (both can call out to other code that uses arbitrary stack space, but they alternate, so that's fine. you don't need to heap-allocate that generator's stack state if you know the generator doesn't escape)

[08:26:07.0945] <jorendorff>
 * because... it seems like the natural goal of inlining is, you want the generator stack frame to be merged into the caller's stack frame. (both can call out to other code that uses arbitrary stack space, but they alternate, so that's fine. you don't need to heap-allocate that generator's stack state if you know the generator doesn't escape)

[08:27:21.0956] <jorendorff>
the above refers to inlining stuff like `for (let val of gen())` or `[...gen()]`; and equivalently `await obj.myAsyncMethod()`

[08:27:59.0505] <jorendorff>
what you're really inlining is a bunch of implied `.next` calls; inlining the initial `gen()` or `asyncMethod()` call is not super interesting

[08:30:11.0967] <jorendorff>
(I don't know how inlining worked in Ion or how it works now; do we reconstruct baseline frames if an exception falls out of the inlined callee?)

[08:30:29.0529] <jorendorff>
 * (I don't know how inlining worked in Ion or how it works now; do we bail out to baseline if an exception falls out of the inlined callee?)

[08:30:30.0924] <sfink>
wat? They just renamed another thing within Mozilla to Ion. (Some data collection thingamabobber.)

[08:31:08.0506] <mgaudet>
jorendorff: I also don't have insight into this; I imagine yes, but I can't be sure. 

[08:31:20.0506] <jorendorff>
sfink: Ion: "i'm not dead yet"

[08:31:49.0097] <sfink>
:-)

[08:32:01.0720] <sfink>
They didn't have to take that name. "Persona" is still available, yeesh.

[08:32:34.0313] <jorendorff>
mgaudet: anyway, inlining seems tough and we can leave it at that

[08:37:37.0306] <iain>
Ion/Warp can throw an exception but not catch it. We bail to baseline if we need to catch (or do a `Finally`).

[08:56:02.0121] <jonco>
sfink: ping

[09:25:26.0385] <sfink>
@allstarschh|afk: the patch is part of bug 1658866

[09:25:28.0031] <botzilla>
https://bugzil.la/1658866 ‚Äî ASSIGNED (sfink) ‚Äî Gather various statistics related to strings

[09:25:32.0428] <nbp>
https://telemetry.mozilla.org/new-pipeline/dist.html#!cumulative=0&end_date=2020-10-05&include_spill=0&keys=__none__!__none__!__none__&max_channel_version=nightly%252F83&measure=SCALARS_JS.RUN_TIME_US&min_channel_version=null&processType=*&product=Firefox&sanitize=1&sort_by_value=0&sort_keys=submissions&start_date=2020-09-21&table=0&trim=1&use_submission_date=0 ‚Ä¶ sounds like a bug if every JS execution takes more than 10ms.

[09:26:03.0166] <sfink>
hm, though looking at it, I'm not sure if I was counting allocations

[09:26:05.0780] <sfink>
so I may have lied

[09:30:56.0420] <sfink>
@allstarschh|afk: yes, it looks like I do *not* collect allocation counts. The closest to example code would be in the one labeled "Collect rope transitions", which has an example of incrementing a counter in the JIT.

[09:33:45.0008] <@allstarschh|afk>
> <@sfink:mozilla.org> @allstarschh|afk: yes, it looks like I do *not* collect allocation counts. The closest to example code would be in the one labeled "Collect rope transitions", which has an example of incrementing a counter in the JIT.

cool, thanks for the pointer 

[09:41:31.0511] <tcampbell>
nbp: that probe is in microseconds

[09:42:06.0825] <nbp>
tcampbell: 10000 ¬µs = ‚Ä¶ ms ?

[09:42:08.0953] <tcampbell>
and is probably fuzzy-foxed

[09:42:37.0673] <nbp>
hum ‚Ä¶ that is a good point.

[09:42:42.0361] <tcampbell>
https://searchfox.org/mozilla-central/source/js/src/vm/Time.cpp#48

[09:43:53.0355] <nbp>
Great, denis is changing that to be RealyNow, making it useful once more. Except I might have like to not have this telemetry stop before a single frame count.

[12:00:10.0279] <sfink>
mgaudetnit-style comments: slide 11 has typo "Quantiative" and you probably want s/deployed/employed/. But as an outsider, my main comment would be "wtf does 'investing in bytecode' mean and why would it matter?"

[12:18:17.0923] <mgaudet>
sfink: Adding a comment to that box "Improve the quality and structure of the bytecode we emit", which hopefully helps clarity a bit. 

[12:18:48.0425] <sfink>
it does, thanks

[12:19:02.0833] <sfink>
(I'm still curious about specifics, but at least I know what you're talking about)

[12:20:48.0137] <mgaudet>
sfink: more detail in the top level report, but it's more a problem statement than a solution. Given the state of the engine, my gut (along with -some- analysis) is telling me that Bytecode is one of our highest leverage investments.

[12:21:52.0310] <mgaudet>
With thought, I think it may be possible for us to reduce interpreter overheads, collect better information for Warp, and -potentially- make it much easier and much less costly to write things in JS (self hosted in particular on my mind, but Ted reminds me to be mindful of Firefox code too) 

[12:22:41.0321] <mgaudet>
So, I'm planning on doing some background investigation and work on what -exactly- could we do  with bytecode over the next few months; 

[12:22:53.0497] <sfink>
Huh. Given that self-hosted code can barely use JS, I'm surprised it would be able to use newer features.

[12:23:02.0956] <mgaudet>
(Open call: Send me your bytecode ideas people.  I know they're out there) 

[12:25:49.0380] <mgaudet>
Self-hosted will also be a weird world; but to give you a flavour of what I'm thinking about, I'm imagining teaching self hosted code to be able to do scalar replacement of an object literal return; i.e. replace `return {a: x, b: y}` with a pair of stack pushes;  then we could (with effort; I want to emphasize none of this is easy) potentially change GeneratorNext to not allocate the `{done: ..., value: ...}` pair where not observable 

[12:26:20.0862] <mgaudet>
which would help us stop thrashing the nursery when we have a tight `for-of` loop

[12:27:39.0611] <evilpie>
With warp we almost never inline self-hosted code, and because we don't have TI scalar replacement doesn't even work for iterator#next

[12:28:03.0103] <mgaudet>
JSC has really complicated macro ops in their interpreter; as a thought experiment I'm trying to imagine if there's a way to have similar complication for implementation, without having to eat up opcode space with boutique ops 

[12:28:19.0200] <mgaudet>
finding common techniques that give us leverage

[12:28:49.0207] <iain>
We've talked about improving scalar replacement in Warp to handle arguments optimization

[12:28:51.0581] <mgaudet>
evilpie: So the thinking for me is to hoist that 'scalar replacement' directly to the bytecode level, so that Warp doesn't need to 'figure it out' at all. It's just -there-, in the bytecdoe

[12:29:02.0672] <mgaudet>
 * evilpie: So the thinking for me is to hoist that 'scalar replacement' directly to the bytecode level, so that Warp doesn't need to 'figure it out' at all. It's just -there-, in the bytecode

[12:29:25.0677] <Waldo>
`JSOp::JetStream2`

[12:29:35.0898] <mgaudet>
my thinking about leverage here being that if we do it well at bytecode, it helps the interpreters, baseline, *and* Warp

[12:29:59.0193] <mgaudet>
whereas improving scalar replacement in Warp helps warp, but we'll still allocate objects while we're below that level

[12:31:03.0641] <evilpie>
seems like this would somehow brake the function call boundary, it doubt this will be easy to do

[12:31:20.0089] <evilpie>
I guess we could add some amount of special casing for this?

[12:31:21.0921] <iain>
I'm not sure how code below Warp is supposed to figure out that the result object is not observable

[12:31:31.0746] <mgaudet>
evilpie: just because it's not easy doesn't mean it's not worth it :) 

[12:32:02.0402] <mgaudet>
These are early stage ideas remember -- I want, personally, and for everyone on the team, to be free to propose and hash out some wild end states

[12:32:12.0192] <mgaudet>
and then we can figure out what / where we can apply them 

[12:32:45.0433] <iain>
One version of this is to change the semantics of the Yield op so that it implicitly creates the result object, instead of having that in bytecode

[12:33:13.0114] <mgaudet>
iain: I mean; if you guard on Object.prototype being 'pristine', then For..of loops, destructuring and spread calls all should be 'unobservable' users of the result object with builtin generators

[12:33:37.0266] <iain>
The question is how the callee knows that it's being called from one of those places

[12:34:01.0193] <mgaudet>
We could build alternate entries; or emit two scripts per generator

[12:34:13.0977] <mgaudet>
Spitballing here! 

[12:35:11.0533] <iain>
Actually, we could probably just store it as a flag on the generator

[12:35:37.0629] <iain>
If you are called with "JSOp::ResumeUnobservable", set the flag

[12:35:59.0060] <iain>
Then Yield will allocate an object if the flag is not set, and return the bare value otherwise

[12:38:11.0808] <sfink>
[spec] I wonder what the justification for generator result objects having a prototype of Object.prototype (rather than null) is. I guess it's just the "normal" way to do things. It seems like making it null would highlight that "this is kinda sorta internal, people".

[12:38:36.0771] <sfink>
(not that changing it would solve much, just wondering)

[12:41:03.0386] <mgaudet>
(IIRC generators have a gross property that makes this all worse, I can't recall the name at the moment and in a meeting) 


2020-10-08
[06:03:24.0203] <Caspy7>
question currently at the top of /r/firefox https://www.reddit.com/r/firefox/comments/j7a292/damn_what_perf_win_landed_yesterday/

[06:03:36.0304] <Caspy7>
thought maybe someone in here could give insight

[06:03:59.0010] <Caspy7>
 * question currently at the top of /r/firefox https://www.reddit.com/r/firefox/comments/j7a292/damn_what_perf_win_landed_yesterday/
> Damn, what perf win landed yesterday?

[06:06:15.0994] <jandem>
Caspy7: I suspect it's from bug 1666264. That was backed out and if you look at the graph, it goes back to normal at the end

[06:06:17.0670] <botzilla>
https://bugzil.la/1666264 ‚Äî RESOLVED (Bebe) ‚Äî [Mozproxy] Implement a recording .zip file manager

[06:06:35.0883] <Caspy7>
thanks

[06:06:58.0444] <jandem>
probably broke the test infra somehow

[06:08:39.0424] <Caspy7>
jandem: forgive me as I'm real short on sleep and not taking in information great. It's likely that once the regression is fixed this will re-land, yes?

[06:09:23.0021] <jandem>
Caspy7: no I *think* it broke the perf test harness somehow

[06:10:04.0148] <Caspy7>
jandem: ah, ok, so this was not a genuine perf improvement, but something broke and make it appear it was in the graphs

[06:10:27.0078] <jandem>
yeah I think so

[06:11:45.0906] <Caspy7>
cool cool, thanks for the info

[06:16:09.0030] <Caspy7>
I have left a comment on the post letting them know of the less-than-exciting news

[08:27:08.0357] <jorendorff>
haha

[08:27:28.0350] <jorendorff>
evilpie: https://bugzilla.mozilla.org/show_bug.cgi?id=1669867 is not great news :-\

[08:27:56.0712] <evilpie>
yeah. I was hoping we could keep at least for Arrays and TypedArrays

[08:28:43.0423] <yulia>
hm :/

[08:29:34.0251] <jorendorff>
this seems like it'll kill it, at least under the name `"item"`

[08:29:45.0122] <jorendorff>
maybe `elem`? :-\

[08:29:57.0336] <jorendorff>
i guess we have been living without it, another option

[08:30:11.0675] <evilpie>
Btw I think the Yui2 code might be broken as well for arrays

[08:30:17.0031] <jorendorff>
`.at()` and `.get()` are other possibilities

[08:30:34.0962] <evilpie>
`el = (el && (el[TAG_NAME] || el.item)) ? el : Y.Dom.get(el); `

[08:30:52.0608] <evilpie>
for arrays it now returns el not Y.DOM.get

[08:32:22.0214] <jorendorff>
ok, looks like flickr is using yui, so this is a dup

[08:32:35.0670] <jorendorff>
I filed it separately because it was definitely `Array`, not `String`

[08:33:00.0191] <evilpie>
make sense I think

[08:33:12.0118] <evilpie>
there is probably too much code that assumes .item means HTMLCollection

[08:51:55.0478] <jorendorff>
evilpie: I think we should back the whole thing out for now...

[08:53:02.0177] <jorendorff>
It'll probably just be renamed. Unless the committee goes berserk and decides to make this function pretend to be `undefined`, like `document.all`

[08:53:18.0726] <jorendorff>
wouldn't bet against it ü§Æ

[08:55:49.0096] <evilpie>
I think there enough people opposed to that at least

[08:58:52.0403] <evilpie>
 * I think there are enough people opposed to that at least

[10:10:31.0326] <nbp>
sfink: Thanks for the patches!! I did not knew about the c++14 TEMPLATE_t and TEMPLATE_v conventions, this is way easier to read!

[10:11:00.0674] <sfink>
Waldo told me about those fairly recently

[10:11:05.0182] <nbp>
sfink: I do not know if there is any way to co-author a patch in git ‚Ä¶

[10:11:14.0902] <sfink>
bleh, it doesn't matter

[10:11:26.0064] <sfink>
besides, I'd rather you take the full blame :-)

[10:12:50.0294] <nbp>
haha, glad that Waldo has not seen this code yet :P

[11:22:30.0705] <DerekNonGeneric>
Yes, there is a way to co-author a patch in git

[11:24:08.0647] <DerekNonGeneric>
https://github.blog/2018-01-29-commit-together-with-co-authors/

[11:25:01.0968] <DerekNonGeneric>
simply add `Co-authored-by: ...` to the commit message

[12:43:20.0524] <syg>
evilpie: thank you for all the compat investigations

[12:44:01.0958] <syg>
jorendorff: i agree, i plan to propose a rename instead of a [[IsHTMLDDA]] treatment

[12:44:21.0093] <evilpie>
Well actually the web compat team has been collecting all those 

[12:44:25.0949] <syg>
it is also a chance to do over the String#item inclusion discussion; so please do bring those points to the table when it comes up again

[12:44:39.0538] <syg>
evilpie: well thank you for diligently compiling them, filing issues, and linking to the offending code :)

[12:45:12.0142] <syg>
i also have no good ideas for renames

[12:45:16.0996] <syg>
`at`?

[12:45:39.0438] <syg>
the COM throwback, `item2`

[12:47:52.0745] <tcampbell>
`ƒ±tem`

[12:48:00.0683] <jorendorff>
syg: `at` seems like pretty much it

[12:48:32.0803] <syg>
i was jokingly considering `atem`

[12:49:00.0924] <Waldo>
...was there a reason for `item` other than for filling in an interface compatible with DOM stuff?

[12:49:08.0389] <syg>
Waldo: nope, that was it

[12:49:12.0474] <Waldo>
I had though it was only for DOM consistency, but I haven't been watching closely.

[12:49:35.0717] <Waldo>
Hrm.  If you can't do DOM consistency because people are _trying_ to differentiate using it, is there a reason any more to do anything?

[12:49:38.0238] <jorendorff>
I thought according to the proposal it was also to permit negative indices, like slice

[12:49:40.0865] <syg>
Waldo: the hope was to use `ObservableArray` as the One True IDL Array Type that can be used uniformly across DOM APIs and JS

[12:49:56.0127] <syg>
Waldo: but since we can't have that, it'll just be for relative indexing now

[12:49:58.0394] <syg>
so the name can be whatever

[12:50:21.0893] <Waldo>
Mm.  And `ObservableArray` can't just be a typedef in WebIDL for a union of array and DOM stuff, or something like that?

[12:50:27.0163] <syg>
sorry i misinterpreted the question. the motivation has always been twofold: relative indexing + an opportunity to unify IDL array-likes while we're at it

[12:50:30.0102] <syg>
the latter constrained the name

[12:50:36.0113] <Waldo>
Oh, relative indexing is the desire.  Blah.

[12:50:59.0545] <Waldo>
o/~ everything is terrible, everything is wrong o/~

[12:51:07.0224] <syg>
you dislike relative indexing?

[12:51:35.0807] <Waldo>
No, just that having to do both means there's not a simple fix that plugs nicely into what's already there.

[12:51:55.0827] <syg>
well, the simple fix is we give up on the unification of IDL array-likes part, since there's no way to fix that

[12:51:56.0108] <Waldo>
Relative indexing is not a bad thing, at absolute minimum.

[12:52:40.0147] <Waldo>
I know I have seen people argue it is slightly more frail, in that someone accidentally passing in a negative number doesn't get "failure"-looking behavior, but I think the tradeoff is a plausible one to make anyway.

[13:59:47.0537] <Waldo>
/me grmbls

[14:00:07.0906] <Waldo>
Apparently unstable Chromium builds are no longer produced for Linux, or something.

[15:09:47.0107] <ewlsh>
they've always had a dev-beta-release chain on Linux I think and Arch still has a dev package?

[15:25:16.0795] <Waldo>
/me shrugs

[15:25:51.0716] <ewlsh>
ü§∑‚Äç‚ôÇÔ∏è

[15:26:13.0115] <Waldo>
Just needed it to quickly test something, I've had the unstable version installed in the past, but I guess it went away between last time I updated my system and a week ago when I wiped it and restored most stuff (but not system package things) from backup.

[15:27:16.0131] <ewlsh>
Google provides unstable Chrome built packages, if your distro doesn't provide Chromium built.

[15:29:13.0296] <Waldo>
https://www.google.com/chrome/canary/ says "Linux is not supported. Please switch to a supported OS to download Chrome Canary."

[15:29:36.0714] <Waldo>
Also, oddly, the yellow "Download Chrome Canary" link starts a download of stable.

[15:30:00.0940] <ewlsh>
Oh yeah, I don't think they've ever released Canary for linux. But the dev channel is updated weekly at least.

[15:30:35.0299] <Waldo>
I've had `/opt/google/chrome-unstable/google-chrome-unstable` in my shell autocomplete for awhile, so clearly it did exist at one time.

[15:30:49.0906] <ewlsh>
-unstable is the dev channel not canary

[15:30:55.0939] <ewlsh>
canary is their daily build

[15:31:16.0174] <Waldo>
Hmm.

[15:31:34.0737] <Waldo>
Anyway, I should actually do an errand now before the local post office closes, -> out for now

[15:32:01.0371] <ewlsh>
-> good luck


2020-10-09
[00:33:36.0630] <yulia>
jonco: do we still have to do some work around the preference for weakrefs here? https://bugzilla.mozilla.org/show_bug.cgi?id=1561074

[00:54:33.0279] <jonco>
yulia: I'm not sure what you mean about 'preference for weakrefs'?  The bug is still open because of lack of WPT tests, which depends on some facility being added to the WPT test harness for triggering a GC, which is under discussion I believe (although I haven't been following it)

[00:55:01.0405] <yulia>
ah, ok. I was wondering if it was only available on nightly or not

[01:02:07.0076] <jonco>
yulia: no it's shipping

[01:02:28.0195] <yulia>
ok, sounds good

[01:03:31.0482] <yulia>
I just did a review of where we are with all of our bugs, weak refs is the only stage 4 proposal we have that is still open but from what you just said its mostly done -- just the tests need to be figured out. I wonder if we should break that into a separate bug? but at the same time its not a big concernn

[01:33:31.0914] <yulia>
Our current status is looking pretty good: https://github.com/codehag/proposals

[02:35:40.0570] <yulia>
In one place, we have this listed as done in Fx50, but it looks like it is still open: https://bugzilla.mozilla.org/show_bug.cgi?id=1306461 does anyone have further info?

[02:37:11.0693] <yulia>
possibly arai would know?

[02:50:27.0456] <arai>
yulia: if the spec hasn't changed, I think we haven't implemented any of the changes

[02:50:50.0873] <yulia>
ok, good to know

[03:03:01.0495] <nbp>
DerekNonGeneric: Thanks, this sounds like a github specific free-form extension.

[05:28:35.0980] <tcampbell>
jonco: [testing tag](https://groups.google.com/g/mozilla.dev.platform/c/KofXE2dQ1Zg) ping for [this](https://phabricator.services.mozilla.com/D92986) and [this](https://phabricator.services.mozilla.com/D92804)

[05:29:12.0055] <jonco>
tcampbell: oh am I supposed to do this as part of review now?

[05:29:21.0836] <tcampbell>
yep

[05:30:07.0195] <tcampbell>
(probably "unchanged" for first one, "accepted" for second?)

[05:30:08.0672] <jonco>
*reads dev-platform*

[05:30:14.0773] <jonco>
sorry about that!

[05:30:28.0849] <tcampbell>
no worries

[05:31:24.0645] <jonco>
done

[06:19:50.0524] <yulia>
jonco: module rewrite was much more involved than i thought it would be, so im going to set it aside for now and finish up top level, and come back to it later

[06:20:09.0758] <jorendorff>
nbp: 
```

template <typename T>
constexpr size_t ActualSizeOf() {
    struct RealStruct { T field; };
    return sizeof(RealStruct);
}
```

[06:20:13.0604] <jorendorff>
 * nbp:
```
template <typename T>
constexpr size_t ActualSizeOf() {
    struct RealStruct { T field; };
    return sizeof(RealStruct);
}
```

[06:22:07.0430] <nbp>
sfink: ^ r?

[06:42:27.0509] <jonco>
yulia: fair enough :)

[07:35:26.0704] <nbp>
/me upload patches with no modification because Lando/mercurial are unable to apply them otherwise ‚Ä¶

[08:43:26.0205] <DerekNonGeneric>
nbp: yes, the commit messages get parsed (they're free-form). A lot of orgs are using this, but I presume you wanted to have multiple commit authors, which I don't think exists

[08:50:45.0527] <sfink>
nbp: sure works for me.

[08:50:52.0672] <sfink>
 * nbp: sure, works for me.

[08:54:17.0741] <@allstarschh|afk>
sfink:  hi, I have one question regarding the hardcoded number for nursery string pretenuing, 30000,where does the number come from? I thought I have read it somewhere but I cannot find it in bug 1442481 nor bug 903519

[08:54:19.0219] <botzilla>
https://bugzil.la/1442481 ‚Äî RESOLVED (sfink) ‚Äî Enable strings in the nursery

[08:54:19.0908] <botzilla>
https://bugzil.la/903519 ‚Äî RESOLVED (sfink) ‚Äî GC: allocate JSStrings and string data in the Nursery

[08:55:00.0311] <sfink>
I think somebody just completely made it up.

[08:55:32.0514] <sfink>
(the somebody might have been me, I don't remember)

[08:55:44.0412] <sfink>
it's probably something that worked ok for Octane?

[08:55:47.0427] <@allstarschh|afk>
ha, okay :P

[08:55:52.0084] <jonco>
I think it was some guy who lived on a boat

[08:56:28.0944] <jonco>
it came from the object pre-tenuring case, where it worked ok for octane

[08:57:17.0230] <@allstarschh|afk>
oh I see, thanks @jonco

[08:59:22.0522] <sfink>
it would be better to pick something that works well for something like Speedometer. But for all I know, string pretenuring might be irrelevant there.

[08:59:32.0107] <sfink>
so Octane might still be a decent way of picking something.

[09:00:10.0341] <sfink>
but it's weird -- we don't have a way to stop pretenuring strings, so in a single Octane shell run we'll start pretenuring halfway through and the second half of the tests will run without nursery strings.

[09:00:14.0743] <sfink>
(that's the way it is right now)

[09:00:45.0175] <sfink>
it is definitely easier to run Octane locally for quick tests

[09:01:31.0529] <sfink>
when was Warp enabled, again? I'm looking at arewefastyet and wondering which of these jumps are from Warp

[09:01:53.0783] <nbp>
sfink: This is sooo fast!!! Thanks for making this reuseGlobal patch.

[09:02:02.0829] <nbp>
sfink++

[09:02:40.0069] <sfink>
yeah, it's nice to have a 0.5 second check instead of waiting over 2 minutes

[09:03:00.0644] <sfink>
I still need to fix that patch according to your review

[09:04:44.0609] <sfink>
and why are Chrome and Chromium so different? Are they based on the same version of the V8 code?

[09:06:07.0680] <sfink>
ouch, something bad happened to the wasm Godot test on Oct 7: https://treeherder.mozilla.org/perf.html#/graphs?highlightAlerts=1&selected=1931779,1234829652&series=mozilla-central,1931779,1,10&series=mozilla-central,1982142,1,10&series=mozilla-central,1931785,1,10&timerange=5184000

[09:07:43.0061] <mgaudet>
https://bugzilla.mozilla.org/show_bug.cgi?id=1655042 is the only wasm one in that pushlog

[09:12:34.0686] <iain>
sfink: Warp in the browser, or Warp in the shell?

[09:13:10.0097] <sfink>
oh, good point! Uh... whatever perfherder is reporting on. But when were both?

[09:13:47.0837] <iain>
Shell: https://bugzilla.mozilla.org/show_bug.cgi?id=1666417

[09:13:50.0548] <iain>
Browser: https://bugzilla.mozilla.org/show_bug.cgi?id=1666417

[09:14:17.0101] <iain>
So 16 days ago for the browser

[09:14:37.0482] <sfink>
(those are the same bug)

[09:14:43.0268] <sfink>
Oct 1 for the shell

[09:14:47.0800] <iain>
Yeah, just noticed that it was patch 3 and patch 10 for the same bug

[09:14:59.0128] <iain>
I got there via phabricator reviews

[09:16:11.0368] <sfink>
Sep 22 for the browser

[09:18:07.0072] <sfink>
hm, Tp6 Office seems suspicious: there was a big regression on Aug 15 -- but it affected both Chromium and Firefox. Maybe the Office code updated?

[09:18:45.0732] <sfink>
I miss having the logarithmic time zooming

[09:20:01.0676] <sfink>
interesting how little of a difference it made in SunSpider

[09:20:58.0741] <evilpie>
sunspider is probably too short to actually run in ion/warp much

[09:20:59.0593] <sfink>
the Speedometer gain is sweet, though it's a little disturbing how well it matches pre-Aug21 numbers. What's up with that?

[09:21:59.0936] <sfink>
the Kraken is not happy

[09:22:33.0033] <sfink>
Gl Video shows a similar regression (though much! larger) as did Godot, on Oct 7

[09:22:59.0393] <evilpie>
sfink: please file a bug

[09:23:07.0982] <sfink>
ok

[10:29:09.0148] <nbp>
/me hate code reformatting ‚Ä¶

[10:54:54.0278] <iain>
Is the try server really backed up for anybody else? My speedometer runs (not the build, just the ~4 minute run itself) have been queued for 800+ minutes 

[11:05:47.0765] <mgaudet>
iain: I am in same boat; blaming https://bugzilla.mozilla.org/show_bug.cgi?id=1670189

[11:05:57.0791] <mgaudet>
(I have perf runs from yesterday afternoon stuck) 

[13:33:29.0564] <ewlsh>
yulia: is there a current way in SM to resolve named module exports dynamically?

[13:36:44.0836] <tcampbell>
ewlsh: Can you elaborate on what you mean by resolving dynamically?

[13:37:01.0383] <tcampbell>
like the export name being computed?

[13:40:30.0689] <ewlsh>
tcampbell: I'm trying to expose a native library as a JS module, so I know all the exports - I just don't want to create JS classes and functions for every native class/function until they're actually imported.

I'm looking for something (roughly) equivalent to v8/node's synthetic modules: https://chromium.googlesource.com/v8/v8.git/+/master/src/objects/synthetic-module.cc

[13:40:58.0785] <ewlsh>
Though, I know all exports at module creation time so I don't need all the functionality of synthetic modules.

[13:43:42.0058] <tcampbell>
Ah, the current modules in SM are focused on scripted modules right now so it is a bit awkward

[13:46:24.0451] <tcampbell>
I wonder if something like the following would help at all.
```js
// foo_lib.mjs
export let A;
export let B;
export let C;

{A, B, C} = do_InitInCpp()
```

[13:47:08.0343] <ewlsh>
Yeah, currently I'm wrapping the existing object in

```
const lib = loadNative('name')

export default lib;
```

[13:51:34.0186] <ewlsh>

A hacky thing I've been mulling is something like...
```
const lib = loadNative('name');

export let A;
export let B;
export let C;

import.meta.onImport = (identifier) => {
   // initialize identifier
   eval(`${identifier} = lib.${identifier}`)
}

```

[13:53:06.0315] <ewlsh>
The question would be if (and how) to hook up onImport on the C++ side

[13:53:07.0536] <ewlsh>
:\

[13:53:55.0082] <ewlsh>
In your example I don't think the resolution of A, B, C are delayed ... or are they?

[13:54:15.0379] <ewlsh>
 * In your example I don't think the resolution of A, B, C is delayed ... or are they?

[13:54:38.0005] <tcampbell>
resolution is delayed, yes. The module doesn't run top level code until after the imports/exports are hoooked up

[13:54:59.0816] <ewlsh>
but the minute you import the module A, B, and C are all resolved

[13:56:00.0691] <tcampbell>
are you trying to resolve them on first use?

[13:56:28.0351] <ewlsh>
I only want A to be resolved when

import { A } from 'lib' occurs

[13:58:57.0153] <tcampbell>
I don't think the modules have any way to know that only `A` was requested. Especially with dynamic-import stuff

[14:04:58.0749] <tcampbell>
Hmm.. If you are using a [ModuleResolveHook](https://searchfox.org/mozilla-central/rev/165e8d8f80c02605c2f3e89c5de462abfce91c32/js/public/Modules.h#34) then you can probably replace the `resolveExport` method on the ModuleObject.

[14:05:53.0687] <tcampbell>
If you replaced `resolveExport` before returning from the hook, you'd be able to have your own export-resolve code be triggered by the real loader

[14:06:13.0731] <ewlsh>
Interesting, we are using a ModuleResolveHook

[14:08:46.0734] <tcampbell>
the original implementation would still be available on your ModuleObject's prototype

[14:09:55.0826] <ewlsh>
this is helpful üòÄ

[14:11:25.0416] <tcampbell>
cool. I think I vaguely understand what is going on in this code now. And I think what I suggest is basically how non-js modules would work anyways

[14:12:43.0064] <ewlsh>
I'm exposing the GNOME ecosystem via modules so we're dealing with libraries like Gtk (https://gitlab.gnome.org/ewlsh/playground.gi.ts/-/blob/master/types/gtk.d.ts) which expose at least a thousand potential exports

[14:13:10.0341] <ewlsh>
Currently they're objects with custom resolve functions

[14:13:40.0429] <ewlsh>
So ideally we don't create JS wrappers for every possible export by default üò¨

[14:14:41.0659] <tcampbell>
ha, that makes sense

[14:24:30.0900] <tcampbell>
I'm not sure the public API gives you anything to be able to initialize those exports from the hook though. You could still track the set of requests though and only initialize them.

[14:26:17.0435] <ewlsh>
I've found `import.meta` to be my backdoor into modules.

[14:26:46.0127] <ewlsh>
```
import.meta.setExportResolveHook(resolveFunction)
```

in the module should do the trick

[14:27:02.0949] <ewlsh>
(assuming we define `setExportResolveHook` on the meta object)

[14:28:13.0872] <tcampbell>
I think the resolving happens before the module itself runs?

[14:28:23.0944] <ewlsh>
Oo, you're right

[14:28:52.0117] <tcampbell>
you are using esr78, right?

[14:29:03.0818] <ewlsh>
yes

[14:29:30.0039] <ewlsh>
Well I can populate the module with a bunch of 

`export let Identifier = null`

keep track of the resolves

and then call the resolve hook for them when the module executes

[14:29:47.0361] <tcampbell>
yep

[14:29:49.0886] <ewlsh>
somewhat complicated but ü§∑‚Äç‚ôÇÔ∏è

[14:30:02.0524] <ewlsh>
i'm here for the ES modules and I'm not leaving without them üòÜ

[14:30:18.0284] <tcampbell>
If this all makes sense, it may be possible to add some sort of `GetInitialEnvironmentForModule` C++ method. You could then call from your `resolveExport` hook and fill in the initialenvironment with bindings

[14:31:02.0348] <tcampbell>
*may be possible for me to add to esr78

[14:31:46.0801] <ewlsh>
that would be helpful for esr78, I'll try to adapt the current modules code for this though and see if it makes sense

[14:32:22.0367] <tcampbell>
sounds good. We'd need to have a working example first

[14:33:31.0124] <tcampbell>
The Modules API is pretty barebones. I think the expectation was that it might become a bit richer once other module types were spec'd but there seems to still be debate about json, wasm, etc

[14:35:01.0822] <ewlsh>
Ideally we're releasing modules in March so we've got some time. Hopefully we can then update to 88esr by August, I've got an 82 branch that I need to update for 83/84

[14:35:23.0082] <ewlsh>
I'm trying to track the pre-ESR releases so we notice if we're missing APIs and such

[14:35:33.0817] <tcampbell>
sounds good

[14:37:25.0715] <ewlsh>
can't wait to try out warp and everything else on the desktop üôÇ


2020-10-10
[01:12:23.0749] <yulia>
joining a bit late to the conversation, but i think we have a test function that does `GetInitialEnvironmentForModule`, https://searchfox.org/mozilla-central/rev/165e8d8f80c02605c2f3e89c5de462abfce91c32/js/src/builtin/TestingFunctions.cpp#5358-5365 

[07:26:55.0452] <tcampbell>
That is a bit awkward to access from an embedding. Although I suppose you could have a scratch global once that you use friend-API to define testing functions on. Then you could smuggle out the function you need. Hmm

[07:49:12.0603] <denispal>
In bug 1664475 I fixed up the measurement for the JS_TELEMETRY_RUN_TIME_US  probe, but it looks like the corresponding telemetry metric, JS_RUN_TIME_US, was never originally added to Histograms.json which I believe is causing the crash in bug 1670348.    Can I just remove this metric altogether and then someone can follow up with the proper data review, etc, to add it back if it's still needed?  Looks like it's been broken for a while now.

[07:49:14.0443] <botzilla>
https://bugzil.la/1664475 ‚Äî RESOLVED (denispal) ‚Äî Collect more telemetry for JS execution and compilation

[07:49:15.0067] <botzilla>
https://bugzil.la/1670348 ‚Äî ASSIGNED (denispal) ‚Äî Crash in [@ IPC::ParamTraits<mozilla::Telemetry::ScalarAction>::Write]

[07:57:37.0106] <denispal>
same for JS_TELEMETRY_WASM_COMPILE_TIME_BASELINE_US, JS_TELEMETRY_WASM_COMPILE_TIME_ION_US & JS_TELEMETRY_WASM_COMPILE_TIME_CRANELIFT_US

[09:07:12.0224] <ewlsh>
yulia: thank you!


2020-10-12
[21:03:29.0150] <Waldo>
decoder: Now that `--enable-undefined-sanitizer` exists and takes a comma-separated list of sanitizers, is there any reason for the one-off command line arguments for signed and unsigned overflow sanitizers to exist any more?  Seems like no to me.  (Although, `--enable-undefined-sanitizer` is maybe not a good UI, because there's no way to say "give me the default sanitizers, but add and remove these particular sanitizers".)

[22:08:04.0176] <decoder>
Waldo: --enable-undefined-sanitizer was particularly made to allow us to enable these sanitizers progressively in the ASan build. I believe you can specify =foo,bar to enable specific ones

[22:08:36.0158] <decoder>
i dont have a strong opinion about the signed and unsigned overflow sanitizers, other than the unsigned one not being undefined behavior. 

[22:10:29.0082] <Waldo>
decoder: You can specify `foo,bar`, but the default list of sanitizers seems to be randomly encoded https://searchfox.org/mozilla-central/source/build/moz.configure/toolchain.configure#1542 and I don't see that it can be specifically invoked to then add/subtract from it.

[22:10:55.0192] <decoder>
Waldo: it is not randomly encoded, that is the supported one

[22:11:06.0163] <decoder>
(supported by us)

[22:11:20.0917] <Waldo>
decoder: If I read the current code correctly, the two one-off sanitizers' handling is identical to what you'd get with `--enable-undefined-sanitizer=signed-overflow,unsigned-overflow`.  Which seems like a good reason to get rid of the one-offs.

[22:11:22.0656] <decoder>
we dont support all flags for ubsan

[22:12:01.0118] <Waldo>
decoder: No, I mean someone who wants the supported ones, but then wants to experiment with additional ones, has no stable way to do it.  They have to copy the list of defaults and add their own atop.

[22:12:38.0220] <decoder>
yes, there is no good way to do that in our build system without adding yet another configure flag

[22:12:44.0370] <Waldo>
And so for example as clang adds more sanitizers, it's not possible to just say "ooh, let's try out this foobar sanitizer as well as teh defaults and see what happens".

[22:12:47.0376] <decoder>
and it would require parsing and merging stuff

[22:13:33.0955] <Waldo>
decoder: Maybe we could say if you don't specify any, you get the defaults; but if you pass in `--enable-undefined-sanitizer=defaults,signed-overflow` or something, you get the defaults _plus_ the extra options.

[22:14:16.0339] <Waldo>
This doesn't seem like a hard problem to solve, basically -- and it'd mean I wouldn't have a random list of entries (going out of date over time) added to my build-options.

[22:15:05.0509] <decoder>
if we can implement that "defaults" part easily, sure.

[22:15:34.0495] <decoder>
essentially parsing and expanding that I guess

[22:16:10.0793] <Waldo>
Okay.  If I remove the existing options, am I going to break tinderboxen or anything?  Or should I add the defaults thing, then leave removal to a separate bug or something?  (I'm not terribly sure how easily I could make the one-off options just feed into the defaults.)

[22:16:32.0335] <decoder>
why would you want to do that?

[22:16:38.0241] <decoder>
please dont break backward compatibility

[22:17:14.0513] <Waldo>
decoder: Have you looked at how the one-off integer sanitizers and `--enable-undefined-sanitizer` are coded up?  It's basically the exact same code repeated three times.

[22:17:52.0647] <decoder>
make it so `--enable-undefined-sanitizer` is equal to `--enable-undefined-sanitizer=defaults` and then defaults expands to what we have in `default_checks` right now. then the jobs should be happy

[22:18:20.0180] <decoder>
id tackle the integer sanitizers in another bug, I dont remember what logic is tied to that. there are suppression lists in use for those and we havent used this code for a whole while

[22:18:32.0701] <decoder>
the `--enable-undefined-sanitizer` code is used in CI

[22:19:09.0750] <Waldo>
decoder: As to why I'm investigating, for some unclear reason my local clang setup, when I build with any of these in place, is complaining at the final link step about undefined references to particular ubsan symbols.  And figuring out the problem, required looking at all three places to see if any one of them was doing a right thing, that the others should have done.  (It doesn't appear they do different things.)

[22:19:31.0298] <decoder>
with the mozbuild clang?

[22:20:17.0740] <Waldo>
decoder: https://paste.mozilla.org/6mLqjg11 is I believe a minimized mozconfig that was hitting the undefined symbols.

[22:21:17.0566] <Waldo>
decoder: The custom CC/CXX/LLVM* refer to a clang tip that's maybe within the last month or two old.  Otherwise nothing special about it.

[22:58:31.0306] <decoder>
I'll look at the mozconfig in a few

[23:02:33.0626] <decoder>
Waldo: I think you need to add back at least the disable-jemalloc flag but other than that I don't see anything that sticks out immediately. Please try the mozbuild clang to ensure it isn't some sort of regression from that.

[23:03:16.0222] <Waldo>
Will give a look soonish, hopefully.

[23:03:45.0615] <Waldo>
Odds are it's a problem with my home-built clang, but danged if I can see how, as I can compile programs that sanitize stuff using the compiler directly.

[23:04:06.0409] <Waldo>
Hence why I was grunging through the build stuff to see how it implemented sanitizer support.

[06:00:05.0955] <nbp>
jandem: The test case should have the red light to be tested on Apple AArch64.

[06:00:20.0373] <nbp>
 * jandem: The test case should have the <del>red</del> green light to be tested on Apple AArch64.

[06:06:43.0844] <jandem>
nbp: great. Probably easiest to get everything landed and then we can run jsapi-tests on the device 

[06:07:06.0244] <nbp>
either is good to me!

[06:44:50.0889] <yulia>
I think I might move the postscript from my tc39 emails to somewhere static and link to it, rather than having the massive list of links

[06:44:59.0655] <yulia>
jandem: do you think the website would be a good place?

[06:46:03.0802] <jandem>
yulia: you mean like a blog post per meeting? I think that would be great 

[06:46:12.0539] <yulia>
Oh, thats also a good idea

[06:49:23.0340] <yulia>
Should I just start doing that?

[06:49:33.0043] <yulia>
In fact, we can migrate the tc39 updates to the blog

[07:06:08.0259] <jandem>
yulia: yes, makes a lot of sense to have it on there I think

[07:06:37.0496] <yulia>
Ok, ill find some time to do that


2020-10-13
[19:55:12.0071] <arai>
what's the status of bug 1668489 ?  is it fine to land patch that hits the failure?

[19:55:13.0958] <botzilla>
https://bugzil.la/1668489 ‚Äî REOPENED (nobody) ‚Äî Intermittent hazards | unrooted 'se' of type 'js::frontend::SwitchEmitter' live across GC call at js/src/frontend/BytecodeEmitter.cpp:2217 + other unrooted failures

[21:18:34.0738] <sfink>
I have a fix, except it triggers a gcc crash elsewhere. I'm trying to upgrade gcc in hopes that it will have fixed the bug. If not, I'll have to make a more targeted fix.

[21:19:16.0056] <sfink>
if the patch hits the failure but still only intermittently, I would guess that it's ok to land, but I'm sure the sheriffs will later back you out if the intermittent rate rises significantly.

[21:39:11.0336] <arai>
okay, thanks :)  it looks still intermittent. I'll land my patch stack

[21:41:30.0800] <Waldo>
jorendorff: Idle poke about bug 1652830 last comment.

[21:41:32.0187] <botzilla>
https://bugzil.la/1652830 ‚Äî UNCONFIRMED (leonardo.balter) ‚Äî Update Test262 from the project's main branch

[05:14:41.0600] <jorendorff>
Waldo: Thanks!

[06:29:49.0548] <sfink>
nbp: can you give me a testing project tag on https://phabricator.services.mozilla.com/D92475 ? You also might want to glance at the two test file updates that I needed (they were overriding the base class initialization & teardown and needed to be adjusted.)

[06:37:07.0628] <nbp>
I'll look at it in a few minutes. 

[06:39:37.0394] <jorendorff>
mgaudet: I looked at the graph and realized the test case uses enough locals to disable the optimization

[06:40:37.0585] <mgaudet>
jorendorff: this is the artificial test case of 500, 1000, 10,000 `let` bindings? 

[06:40:52.0659] <jorendorff>
yes, there's an arbitrary limit... looking for it now

[06:41:01.0571] <jorendorff>
mgaudet: to really test this it's necessary to bump the limit out past 10,000

[06:42:10.0877] <jorendorff>
It's in frontend/ParseContext.h

[06:42:20.0564] <jorendorff>
`GeneratorFixedSlotLimit`

[06:43:19.0920] <mgaudet>
Oh; hah. That'd do it :) 

[06:43:46.0488] <jorendorff>
( ‚òëÔ∏è confirmed the limit is doing its thing)

[06:46:42.0599] <mgaudet>
Think it would be better to measure -at- the limit, or better to alter the limit? (Honestly, from what I've seen almost everywhere else, slot clearing doesn't seem impactful 

[06:46:47.0932] <mgaudet>
 * Think it would be better to measure -at- the limit, or better to alter the limit? (Honestly, from what I've seen almost everywhere else, slot clearing doesn't seem impactful) 

[06:58:28.0801] <jorendorff>
mgaudet: I'm confused :(

[06:59:36.0750] <jorendorff>
mgaudet: How can the performance gains for 10,000 let bindings be explained?

[06:59:56.0240] <jorendorff>
doesn't Part Five include the limit?

[07:00:26.0196] <mgaudet>
no

[07:00:28.0469] <mgaudet>
it does not 

[07:00:43.0664] <jorendorff>
ahhhh, good

[07:00:58.0040] <jorendorff>
ok, i do want to try altering the limit because the limit was not set heuristically

[07:01:00.0987] <jorendorff>
it's just a guess

[07:01:39.0534] <jorendorff>
tcampbell: on my way, just a sec

[07:02:45.0876] <mgaudet>
jorendorff: Ok, so that might be worth investigating as well; I'm going to go eat some breakfast, but I'll try to work out a shapely experiment that will help elucidate the options

[07:03:35.0250] <jorendorff>
mgaudet: the test case i gave you... I think it might not be very good. it doesn't do `yield` repeatedly (to test the memcpy overhead) and it doesn't exit the `let` scope repeatedly (to test the slot-clearing overhead)

[07:03:59.0954] <jorendorff>
i meant it to be a worst-case test that would definitely show the fraying edges of the thing

[07:04:22.0905] <mgaudet>
Ok; maybe building a pair of test cases to evaluate the two pieces individually would be better

[07:06:27.0776] <jorendorff>
meanwhile a few debugger tests are stubbornly holding on.

[07:06:37.0521] <jorendorff>
soft freeze coming Thursday :(

[07:17:53.0080] <nbp>
sfink: This sounds good to me. that's unfortunate for the OOM test but minor. :/

[07:21:43.0044] <nbp>
oh ‚Ä¶ testing tag ‚Ä¶ sorry.

[07:23:41.0459] <nbp>
sfink: done

[07:24:52.0115] <sfink>
yeah, the OOM test thing is pretty ugly. But I guess it's doing a kind of weird thing in the first place. I'm sure there's a better way of factoring this, but it doesn't seem worth much effort.

[07:24:54.0551] <sfink>
thanks

[07:25:38.0562] <nbp>
Thank you, for making this optimization, which we should later use for all JIT tests, such as the one with Range Analysis.

[07:26:08.0841] <sfink>
it's not straightforward to apply yet, if the test isn't manually constructing its own test subclass.

[07:26:27.0109] <sfink>
I have a patch that applies it to an atomics test, which required some weird macro stuff

[07:26:35.0855] <sfink>
it needs to be wedged into the BEGIN_TEST macro

[07:26:49.0489] <nbp>
I think we could make a new begin macro, or adding a parameter to the macro.

[07:26:50.0779] <sfink>
(I made a BEGIN_REUSABLE_TEST variant, but it's not pretty)

[07:28:51.0589] <nbp>
Another option would be to replace END_TEST

[07:29:06.0692] <sfink>
yeah, that would be easier, but would look kind of weird

[07:29:13.0979] <nbp>
agreed

[07:30:20.0443] <nbp>
Or to split the class declaration to be DEFINE_TEST(NAME, REUSE) BEGIN_TEST() END_TEST()

[07:33:28.0056] <nbp>
or to have a virtual function which can be overwritten which return the reuseGlobal  flag.

[07:33:34.0444] <sfink>
I uploaded my patch if you want to see what it looks like: https://phabricator.services.mozilla.com/D93344

[07:34:16.0434] <sfink>
I thought about the virtual `reuseGlobal()` option but didn't pursue it. It might be the nicest way.

[07:36:29.0782] <nbp>
It would still be defined after the END_TEST.

[07:37:34.0598] <nbp>
unless, ‚Ä¶ we were to split BEGIN_TEST into DECLARE_TEST, and START_TEST, where DECLARE_TEST explicit the whole class, and START_TEST defines the run function.

[07:37:50.0345] <nbp>
in the mean time, BEGIN_REUSABLE_TEST is good enough.

[07:42:12.0560] <jorendorff>
yulia: I want to rename everything called `isGeneratorOrAsync()` to be `isSuspendable()` instead

[07:42:36.0574] <jorendorff>
start using "suspend" more as the term for this, instead of `yield`

[07:42:42.0524] <jorendorff>
 * start using "suspend" more as the term for this, instead of "yield"

[07:42:53.0524] <nbp>
canHang() with a JSString Rope ?

[07:43:30.0644] <yulia>
jorendorff: do it!

[07:43:35.0148] <jorendorff>
ok

[07:44:12.0322] <yulia>
jorendorff: did you change the behavior around closed over variable names already?

[07:45:02.0249] <jorendorff>
It hasn't landed yet. I was going to try to get it under review this morning.

[07:47:47.0337] <jorendorff>
This is bug 1412202.

The main changes:
- variables in suspendable scripts aren't automatically considered closed-over anymore; they can be optimized in stack slots like any other local
- when we suspend, we copy their values into the GeneratorObject, and when we resume, we copy them back to the stack
- in suspendable scripts, we now emit bytecode to blank out stack locals when we exit a lexical scope (to avoid copying garbage values into the GeneratorObject and thus keeping them alive too long)

[07:47:48.0754] <botzilla>
https://bugzil.la/1412202 ‚Äî NEW (jorendorff) ‚Äî Optimize lexical variables in generator.

[07:48:02.0285] <jorendorff>
 * It hasn't landed yet. I am going to try to get it under review this morning.

[07:48:53.0154] <yulia>
ok, great

[07:49:03.0928] <yulia>
I am cleaning up all the patches right now, I'm about halfway done

[07:49:24.0075] <yulia>
I will rebase once you land

[07:51:44.0183] <jorendorff>
actually not sure about isSuspendable right now, because the spec uses "suspend" in too many senses :-\

[07:52:51.0185] <yulia>
I guess the closest thing would be "isYieldable" as await is built on top of it, but its also misleading

[10:06:00.0839] <iain>
AutoSuppressGC has a [scary comment](https://searchfox.org/mozilla-central/source/js/src/gc/GC.h#158-165) about how it should only be used in extremely rare error-handling cases, which is not reflected in [our current usage](https://searchfox.org/mozilla-central/search?q=symbol:T_js%3A%3Agc%3A%3AAutoSuppressGC&redirect=false). Can we replace that comment with something less ominous?

[10:16:37.0117] <sfink>
I kind of side with the comment, though it looks like it the comment could be relaxed slightly to cover the JIT related cases. It might be worthwhile to review the existing uses, though; I am surprised by how many have crept in. We tend to be pretty hard-nosed about it.

[10:23:55.0049] <iain>
It's possible that I don't understand all the effects. It seems like it shouldn't be too risky to say "if anything in this scope would trigger a GC, instead just OOM and let me handle it".

[10:25:05.0078] <iain>
 * sfink: It's possible that I don't understand all the effects. It seems like it shouldn't be too risky to say "if anything in this scope would trigger a GC, instead just OOM and let me handle it".

[10:25:20.0007] <sfink>
(sorry, out for a bit)

[10:35:50.0805] <mgaudet>
jorendorff: ping regarding measuring memcpy costs. If you look in the document, I've got a test methodology that essentially shows how bad we can make the worst case scenario for your patch... but I'm not sure how valuable that is? 

[11:22:00.0280] <sfink>
iain: right, that makes sense. I think part of the kneejerk response is because people *love* to reach for the "let's just disable the GC here" solution, and it can be hard to claw it back after it escapes to a larger scope. (If you do repeated failed allocation attempts, we may also do some strenuous last-ditch handling for each, too; I'm not sure.) But I agree that if you limit the scope and handle the allocation failure, it doesn't seem too bad.

[11:22:59.0700] <sfink>
I'll bring it up at our GC meeting tomorrow, to at least clarify what these dragons are

[11:36:02.0627] <sfink>
ugh, `JSObject*` vs `GlobalObject*` bites again. (They're unrelated types in the public API.)

[11:36:14.0177] <sfink>
would it be so hard to allow forward declarations of class hierarchy?

[11:36:22.0245] <sfink>
(given that this is C++, the answer is probably "yes")

[12:24:23.0612] <iain>
sfink: Another way of looking at this: in many cases, we have <NoGC> template specializations that allow us to fallibly perform an operation that might trigger GC. If you try doing something that doesn't already have those specializations, your solutions are:

[12:24:54.0851] <iain>
1. Plumb an AllowGC template parameter through N levels of abstraction

[12:25:13.0946] <iain>
2. Rewrite the context of your code to make it safe to GC

[12:25:20.0479] <iain>
3. Suppress GC

[12:25:31.0173] <iain>
Maybe there are other options I'm not thinking of

[12:27:21.0752] <iain>
1 and 2 have costs of their own, so it would be good if we could get a clear-eyed description of the costs of 3.


2020-10-14
[02:47:30.0068] <jonco>
iain: suppressing GC allows you to continue allocating memory past the point at which heap thresholds would have triggered a GC

[02:47:59.0470] <jonco>
it doesn't fail allocations that would have otherwise GCed, unless you exhaust the system's memory

[02:48:27.0931] <jonco>
so the danger is that it makes latter more likely

[02:50:55.0102] <jonco>
the real problem would be if it were possible to allocate a user-controlled number of objects from the web with a suppression in place

[02:52:49.0767] <jonco>
I was going to file a bug, but it seems sfink beat me to it: bug 948739

[02:52:51.0207] <botzilla>
https://bugzil.la/948739 ‚Äî NEW (nobody) ‚Äî Audit AutoSuppressGC uses

[06:39:10.0114] <denispal>
jandem iain evilpie  I see some further optimization ideas under bug 1613592, is there any idea on how much additional perf we can possibly expect from those (or any other upcoming warp work)?

[06:39:11.0884] <botzilla>
https://bugzil.la/1613592 ‚Äî NEW (nobody) ‚Äî [meta] Replace IonBuilder with a new MIR builder (WarpBuilder)

[06:41:27.0992] <denispal>
(mostly just trying to quantify any perf work in the pipeline such as the off thread delazification, some scheduling ideas we have, possible work opts, etc)

[06:41:38.0704] <denispal>
warp*

[06:42:50.0193] <jandem>
denispal: hard to say. I'm hoping that removing IonBuilder/TI will help a little too, and we have some future ideas, for example to optimize object allocations and to bring back a limited form of invalidation

[06:44:11.0158] <denispal>
jandem: Is all of that under bug 1613592, or are there other bugs I can subscribe to ?

[06:44:48.0555] <jandem>
denispal: also the work Jason is doing in bug 1412202 will help on code using generators/async, for example ARES6

[06:44:49.0935] <botzilla>
https://bugzil.la/1412202 ‚Äî NEW (jorendorff) ‚Äî Optimize lexical variables in generator.

[06:45:50.0681] <denispal>
ah thanks, that will be helpful

[06:46:15.0315] <jandem>
no bugs filed for the other things yet. Hopefully we can start planning that work the coming weeks now that warp is enabled

[06:47:25.0217] <denispal>
Okay, cool.  ty!

[06:55:07.0278] <denispal>
jandem: btw, the baseline compile time probe I added shows that it almost never takes more than 5% of the execution time.   Any thoughts on maybe lowering that threshold?

[06:56:12.0058] <jandem>
denispal: we could measure to see if that has any impact, but I'm pretty happy to hear that

[06:56:45.0705] <denispal>
yeah it looks quite good, almost no reports above the 1-7% bucket

[06:59:39.0916] <jandem>
sweet

[08:47:53.0162] <jonco>
sfink: ping

[08:48:56.0706] <jib>
jorendorff: Hi, I had some questions around WHATWG streams and threads.

WHATWG streams are integral in new specs and proposals where processing media data off main thread is key. A complication is that the core transport control objects (in WebRTC & WebTransport) still remain main-thread only. 

My understanding of https://streams.spec.whatwg.org/#ref-for-in-parallel is it allows for composing (piping) browser objects (e.g. that may have been postMessaged from a worker) together in main-thread JS, but still have the data "stream" itself off main-thread as an optimization as long as there's no main-thread JS in the pipe. Is my understanding here correct, and do you know of any examples of such optimization in implementations today?

[08:53:17.0128] <jorendorff>
jib: hi. good questions. My limited understanding of the design intent of `pipeTo` agrees with yours.

[08:53:48.0329] <jorendorff>
Let me try to connect you with people who might know more...

[08:53:57.0637] <jib>
cool thanks

[08:57:34.0490] <jorendorff>
Waldo: ^

[08:58:16.0046] <jorendorff>
jib: Andreas Marchesini implemented the browser stream objects for Firefox. You can find him in #developers as @baku

[08:58:26.0799] <jorendorff>
 * jib: Andrea Marchesini implemented the browser stream objects for Firefox. You can find him in #developers as @baku

[08:59:19.0931] <jorendorff>
We haven't landed `pipeTo` yet, though.

[09:03:34.0016] <jib>
Great, I'll check with him

[09:13:03.0922] <jorendorff>
jonco: I have a stack of patches that fixes the memory leak in bug 1664463, but the test still fails. Is there a testing function I need to call to get finalizers to run in the shell?

[09:13:07.0651] <botzilla>
https://bugzil.la/1664463 ‚Äî RESOLVED (nobody) ‚Äî FinalizationRegistry callbacks never run

[09:13:26.0208] <jorendorff>
(it could easily be another memory leak or a bug in my patches)

[09:14:56.0651] <jorendorff>
oh, if I add an explicit call to `.cleanupSome()` on the registry, it works

[09:31:08.0500] <jonco>
jorendorff: you probably need to call gc() and drainJobQueue() to ensure that GC happens and then the callbacks run

[09:32:28.0146] <jorendorff>
jonco: hmm. I'm already in an async function that uses `await(new Promise(resolve => { enqueueJob(resolve); }))`

[09:32:38.0527] <jorendorff>
let me try it though

[09:33:19.0227] <jorendorff>
huh. that works but `enqueueJob` does not

[09:33:29.0908] <jonco>
great

[09:34:18.0607] <jorendorff>
oh, i see wingo mentioned this in the bug

[09:35:21.0629] <jonco>
could be something to do with promises being based on microtasks whereas finalization callbacks happen as a separate task after those have run

[09:35:31.0541] <jonco>
(but I don't know exactly what enqueueJob does)

[09:37:02.0668] <yulia>
jonco: just in case it landed in your inbox. I uploaded the patches for top level await. there are still some rough edges but if you want to get an early look before i delete the spec text: https://phabricator.services.mozilla.com/D93524

[09:37:42.0746] <jonco>
yulia: thanks, I'll take a look

[09:38:04.0054] <yulia>
It's not quite done yet, but probably if you look early you might catch some stuff that I can fix before i push again

[13:48:12.0022] <mconca>
Can someone provide me with current status on .item?  I know we started seeing webcompat issues.  What's the current plan forward?

[13:52:29.0712] <iain>
mconca: It turns out that `.item` is not web-compatible. The plan for the November meeting is to try renaming it to `.at` and revisit the question of whether it should be provided on strings. See https://github.com/tc39/proposal-item-method/issues/34

[13:57:35.0760] <mconca>
That was timely.  Thanks iain.

[13:59:25.0658] <Waldo>
jorendorff, jib: In principle, yes, I think you could pipe/stream no-copy off the main thread, if the pieces were written to allow it.  I'm moderately sure we don't have any parts that do that right now.

[14:00:07.0222] <Waldo>
jorendorff, jib: Also note that such zero-copy behavior is probably a better fit, more intentional, with byte streams -- functionality from the streams spec that we do not now support.

[14:00:41.0936] <Waldo>
You could pipe through handles to off-thread info to avoid copying/etc., but that's even less likely to be a thing we do right now, and it's probably more likely to be a bad long-term API.

[14:10:14.0246] <jib>
Waldo: Thanks

[14:24:39.0653] <jorendorff>
@Waldo: "

[14:24:46.0838] <jorendorff>
 * Waldo: "

[14:31:16.0487] <jorendorff>
Waldo: I think it's "easy" to implement; I think piping behaves like creating a reader and a writer that are never exposed, so from the embedder's perspective, the parts they need are
(1) enough QueryInterface-ishness to determine when both ends are the right sort of stream support the optimization (which maybe they already have);
(2) the ability to say "lock this stream forever" and then the JS end of things just stops working.

[14:33:10.0050] <jorendorff>
ideally the API for (2) would null out all the fields, which ordinarily makes me think, ugh, another object that has an "empty" state. but in this case, there's already a "locked" state that we implement

[14:33:55.0831] <jorendorff>
And our side of things would be done; all the rest is up to the embedding

[14:34:00.0641] <jorendorff>
afk


2020-10-15
[04:18:40.0200] <jorendorff>
mgaudet: Thanks for all the work you put into https://docs.google.com/document/d/1ueSm2aNs3-1RsEGXh619CVVLUKqgSZ6F-7VyIqRsOTo/edit#

[04:19:12.0510] <jorendorff>
mgaudet: Do you think we should change the GeneratorFixedSlotLimit or otherwise tweak the heuristic?

[04:19:36.0747] <jorendorff>
dueling worst cases

[04:20:01.0511] <jorendorff>
The right answer is to store all "unaliased" bindings in the CallObject, eliminate the memcpy altogether :-\

[04:20:40.0971] <jorendorff>
But if you think changing it from 256 to something more like 64 is prudent...

[04:21:54.0617] <jorendorff>
 * The right answer is to store unaliased bindings in the CallObject, eliminate the memcpy altogether :-\

[04:22:01.0968] <jorendorff>
 * But for today, if you think changing it from 256 to something more like 64 is prudent...

[05:14:34.0811] <mgaudet>
jorendorff: Honestly; I think heuristic tweaks like this are something we can mostly punt for later. If you wanted to be more conservative and change the limit to  64, that'd be fine, but I also think that it's a bunch more work to tune this; finding a perfect count may not be worth the effort of doing a defensible empirical evaluation 

[05:29:01.0851] <jorendorff>
OK, thanks.

[05:29:07.0977] <jorendorff>
I will be landing this in the next few hours

[05:36:51.0975] <jorendorff>
yulia: Does your stack change GetGeneratorObjectForFrame? Currently it requires a CallObject https://searchfox.org/mozilla-central/source/js/src/vm/GeneratorObject.cpp#116

[07:20:34.0761] <yulia>
No, I hacked around it

[07:20:38.0409] <yulia>
https://phabricator.services.mozilla.com/D93523 jorendorff 

[07:21:13.0437] <yulia>
see `createModuleGenerator`

[07:21:19.0716] <yulia>
i use a fake function as the callObject

[07:21:27.0605] <jorendorff>
yulia: Got it. great

[07:36:44.0981] <jorendorff>
Does anyone else get "Error fetching runnable jobs: Failed to fetch task ID (TypeError: e is undefined)" from Treeherder when selecting Add New Jobs from this menu? 

[07:37:00.0916] <jorendorff>
 * Does anyone else get "Error fetching runnable jobs: Failed to fetch task ID (TypeError: e is undefined)" from Treeherder when selecting "Add new jobs" from this menu? 

[07:37:26.0935] <jorendorff>
seems to happen intermittently for me

[07:55:20.0556] <sfink>
same here

[07:55:52.0137] <sfink>
I've never bothered to file it or track it down

[08:26:42.0107] <sdetar>
Great job Ted and Jan

[08:26:56.0050] <caroline>
GREAT JOB jandem  and tcampbell !!

[08:29:13.0705] <Ms2ger>
‚ÅâÔ∏è

[08:30:27.0088] <iain>
They just gave presentations in the Platform meeting

[12:27:42.0442] <yulia>
jonco: you are the best: that one weird bit where i accidently read the spec wrong is where the bug that ive been trying to fix this week was hiding. It was the last thing that was still outstanding

[12:56:59.0789] <yulia>
whyyyy does uploading to phabricator take so long

[12:59:55.0977] <iain>
yulia: Are you touching a lot of files? There's this bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1635298

[15:04:20.0812] <Waldo>
yulia: https://phabricator.services.mozilla.com/D93305#inline-528006 may be relevant to your interests.  (no points for guessing in advance who initially provided the helpful nugget of wisdom)


2020-10-16
[00:59:38.0201] <jonco>
yulia: ah, great that that caught it!

[01:00:22.0849] <jonco>
doing this translation from spec to code is tricky and requires much patience

[01:21:04.0263] <annevk>
Now that we parse JavaScript from UTF-8 bytes, how likely are Latin1 buffers to contain non-ASCII? I guess that still happens sometimes for inline scripts and event handlers?

[01:24:24.0723] <Waldo>
annevk: I'm about done for the day, but making https://searchfox.org/mozilla-central/source/dom/script/ScriptLoader.cpp#2405 convert to UTF-8 and avoid a copy is an easy first step that would give you something to add telemetry to pretty simply.

[01:25:23.0806] <Waldo>
Although, note that inline scripts like that can contain WTF-16, and our UTF-8 code is _only_ UTF-8, not WTF-8.

[03:19:48.0970] <nbp>
jandem: Thanks for the review, I did not noticed that constexpr had become so powerful. Replacing the declarative style by an imperative style.

[03:54:36.0576] <jandem>
nbp: fold expressions are nice too.. this would have been a lot more complicated before c++14/17

[03:55:57.0010] <nbp>
indeed, do you recall how oolCallVM was implemented before variadic templates ;)

[03:57:04.0355] <nbp>
Waldo suggested that I should be fired for adding such thing to the code base.

[03:59:39.0362] <jandem>
haha. The current version is a lot less scary

[04:01:24.0589] <Ms2ger>
Well, interesting how that played out, huh :)

[06:07:25.0947] <tcampbell>
Currently our source limit is 4GB, and the column offset limit (eg if this were in an inline script in html) is 1GB. I'd like to change the limits so that `(source-length + first-line-column-offset) < 4GB` to ensure column numbers never overflow. Surely 4GB inline scripts with 1GB of single-line HTML beforehand is not a thing of value...

[06:07:49.0577] <tcampbell>
(In practice our bytecode limits kick in sooner..)

[06:08:40.0182] <tcampbell>
The objective is to make source-notes be column-relative so that bytecode is deduped better in minified code

[06:11:51.0879] <tcampbell>
evilpie: do you have any idea what "third party tests" may mean in https://bugzilla.mozilla.org/show_bug.cgi?id=1144340 

[06:12:32.0083] <evilpie>
devtools? I am not sure

[07:16:42.0578] <sfink>
ok, my mind has been utterly blown by template fold expressions

[08:01:36.0915] <yulia>
In case anyone wants to join: https://www.twitch.tv/codehag

[09:14:22.0121] <yulia>
That went way better with the extra machine, thanks nbp and (i think?) mgaudet who suggested it

[09:14:54.0887] <mgaudet>
yulia: you're welcome :) 

[09:19:54.0993] <yulia>
I am on PTO for the next week, so i might be hard to get a hold of -- for folks who got singled out for reviewing top-level await, you have the entire week; I will fix any comments on monday.

[09:20:03.0079] <yulia>
 * I am on PTO for the next week, so i might be hard to get a hold of -- for folks who got singled out for reviewing top-level await, you have the entire week; I will fix any comments on monday the week after.

[10:01:35.0152] <jonco>
sfink: there's a few places where allocating strings ignores the InitialHeap parameter (e.g. JSFatInlineString::new_)

[10:01:55.0492] <jonco>
sfink:  is that intentional?

[10:02:30.0432] <sfink>
Hm, I don't remember now. I know initially I made a minimal version that only changed some paths, but I thought I had expanded it to everything. I guess not.

[10:02:51.0458] <sfink>
definitely if it takes an InitialHeap, it seems like it ought to respect it

[10:02:57.0509] <jonco>
I don't think it's big deal, just trying to understand whether there's some dependency on always allocating in the nursery in some cases...

[10:04:04.0073] <sfink>
I can't promise there isn't, but we shouldn't make it work by ignoring the parameter

[10:04:24.0764] <sfink>
so anything that breaks by paying attention to that parameter should be fixed

[10:05:10.0199] <jonco>
that sounds logical to me

[10:42:39.0656] <jorendorff>
hey, would someone please confirm I'm not going crazy and check the value returned by this:
```js
(function f(a = class C{}) { var x; return x; })()
```

[10:43:44.0605] <iain>
jorendorff: Uh, yeah, that looks buggy to me too

[10:43:53.0053] <jorendorff>
thank you

[10:49:31.0097] <sfink>
how...

[10:49:47.0556] <sfink>
even more fun: `(function f(a = class C{}) { var x; return x + x; })()`

[10:50:38.0533] <sfink>
oh, it's a binding problem, so that's no different

[10:51:00.0341] <sfink>
(I was thinking the return value slot was getting clobbered)

[10:51:17.0723] <jorendorff>
yeah, this is bug 1671563

[10:51:25.0218] <botzilla>
https://bugzil.la/1671563 ‚Äî NEW (jorendorff) ‚Äî Assertion failure: next == JSOp::CheckThis || next == JSOp::CheckReturn || next == JSOp::CheckThisReinit || next == JSOp::CheckLexical, at vm/Interpreter.cpp:3754 or Crash [@ js::GetProperty]

[10:51:37.0902] <jorendorff>
At first, I thought I introduced it, but it must be longstanding. Yikes.

[10:52:23.0463] <jorendorff>
...Is there a way to get a _mutable_ binding onto the stack in an expression? I can't think of one

[10:53:48.0259] <jorendorff>
that class binding is immutable, which I think makes this impossible to abuse

[10:54:27.0408] <jorendorff>
...maybe a private field that's never used?

[10:55:09.0952] <jorendorff>
no, they are always used :\

[10:55:44.0868] <jorendorff>
I don't quite see _how_ they are used, maybe mgaudet knows

[10:56:04.0240] <jorendorff>
oh, there's probably an initializer function for each one, even if they're never called

[10:56:17.0723] <jorendorff>
well ‚Äî anyway

[10:58:37.0313] <mgaudet>
O.o. No idea off the top of my head. 

[11:05:06.0007] <jorendorff>
yeah, i don't know what causes `.initializers` to be aliased, but it seems it is, even if the constructor doesn't use it

[12:32:48.0351] <nbp>
jandem: Adding test for the full width of the types just raised some issues on x86 ‚Ä¶ I am investigating and I will push the fix on Monday.

[13:21:54.0474] <jorendorff>
tfw dumping the scope crashes

[13:25:07.0803] <jorendorff>
don't tell the C++ standard committee, but the lack of `#[derive(Debug)]` is a real deal-breaker

[14:19:13.0717] <jorendorff>
mgaudet: well, i have a fix here ... I wonder if I should send it to you, or to Jan (who reviewed my generator patches)

[14:19:55.0366] <jorendorff>
mgaudet: The review mostly requires knowing how bindings work in the frontend.

[14:20:02.0981] <jorendorff>
But ... nobody knows htat.

[14:20:05.0045] <jorendorff>
 * But ... nobody knows that.

[14:20:08.0594] <mgaudet>
Hah. 

[14:20:30.0491] <mgaudet>
Uhm. I can take it, with the caveat I will probably not look till Monday (not that I think Jan would necessarily beat me to it) 

[14:20:39.0144] <jorendorff>
OK.

[14:20:56.0001] <mgaudet>
I'm certainly interested in seeing -what happened- 

[14:20:57.0779] <mgaudet>
that's for sure.

[14:21:04.0591] <mgaudet>
because it was quite the surprising bug

[14:41:23.0952] <jorendorff>
it was a cool bug :)

[14:41:33.0532] <jorendorff>
i mean, still is, until tests pass :)


2020-10-19
[06:16:05.0217] <haggar>
I'm taking a look at JS HTMLDocument (NativeObject), but it has no shape, and therefore no properties, is this normal?

[06:24:32.0700] <Ms2ger>
Is it a proxy?

[06:25:31.0042] <haggar>
It's the 'wrapper' on a C++ object.

[06:26:31.0900] <Ms2ger>
I know, I still think it's a proxy

[06:26:44.0372] <haggar>
What I'm trying to do is find the link between a C++ mozilla::dom::document, and the JS wrapper around it, but the wrapper doesn't seem to contain any identifier information, so I'm not sure how it knows what it is.  If that makes any sense.

[06:28:08.0723] <Ms2ger>
I don't have much time right now, but you could start here: https://searchfox.org/mozilla-central/source/dom/html/nsHTMLDocument.cpp#138

[06:28:37.0380] <haggar>
I'll have a read, thanks

[06:42:55.0892] <nbp>
https://paste.mozilla.org/gfGsyL1H If someone can figure this one ‚Ä¶ All 3 functions are called the same way ‚Ä¶ calling the same code, and called the same way ‚Ä¶

[06:43:35.0254] <nbp>
jandem: ^ I am adding the test case ‚Ä¶ just having some trouble figuring out what goes wrong.

[06:46:26.0304] <jandem>
nbp: curious.. maybe step through it with rr? 

[06:47:06.0221] <nbp>
I am not sure rr would be pleased by the x86 part of this execution, but I should try.

[06:47:50.0790] <jandem>
ah 32 bit. Hm 

[06:53:59.0694] <haggar>
Looking in the about:memory GC verbose about, I can see '00000320653F00C0 [gc.marked] JS Object (HTMLDocument)', how does it know that this object is an 'HTMLDocument'.  Is there a GUID or similar for it?

[06:54:17.0052] <haggar>
 * Looking in the about:memory GC verbose output, I can see '00000320653F00C0 [gc.marked] JS Object (HTMLDocument)', how does it know that this object is an 'HTMLDocument'.  Is there a GUID or similar for it?

[06:55:28.0563] <jandem>
the JSClass name (something like obj->group->clasp->name)

[06:55:38.0800] <jandem>
 * the JSClass name (something like `obj->group->clasp->name`)

[06:55:57.0110] <haggar>
Ahh OK, thanks.  I'll check that out

[06:57:21.0335] <jandem>
haggar: because it's a proxy, it's calling [the hook here](https://searchfox.org/mozilla-central/source/__GENERATED__/dom/bindings/HTMLDocumentBinding.cpp#798-800) I think

[06:57:58.0777] <jandem>
proxy handlers can override the class name

[07:03:07.0534] <haggar>
Gotcha, I'll go take a look at the group->clasp, thanks

[07:14:27.0198] <nbp>
jandem: it seems to be either the `fldl` or `fstpl`: `fldl (eax) ; fstpl -0x40(ebp)`, reading the memory at `eax` gives the expected pattern, but doing the same with `ebp - 0x40` show the nan one.

[07:18:52.0547] <jandem>
nbp: is the problem that it's a nan value that gets canonicalized?

[07:19:23.0906] <nbp>
That's what I had though, but I toogled one bit of the exponent ‚Ä¶ :/

[07:19:39.0386] <nbp>
 * That's what I had thought, but I toogled one bit of the exponent ‚Ä¶ :/

[07:20:24.0375] <nbp>
and it might also be related to the FP stack, as this does not do it for the previous one.

[07:24:09.0011] <nbp>
the funny thing is that the same instruction are executed once more after, but no such truncation happen.

[07:25:47.0819] <nbp>
I wonder if I could have a bug in my CPU which overly round to NaN for one FP stack entry :P

[07:56:40.0125] <haggar>
jandem: I've taken a look at the group->clasp, and it's empty, so how do I deal with the object, if it's a proxy?

[07:57:15.0860] <jandem>
haggar: what do you mean by empty? is the `clasp->name` an empty string?

[07:57:33.0741] <haggar>
Well I'm currently working with a memory dump, so..

[07:57:44.0515] <haggar>
dt js::nativeobject 320653F00C0
xul!js::NativeObject
   +0x000 headerAndGroup_  : js::gc::CellHeaderWithTenuredGCPointer<js::ObjectGroup>


[07:57:57.0805] <haggar>
RESERVED_MASK    : 0x7 [Type: unsigned __int64]
    FORWARD_BIT      : 0x1 [Type: unsigned __int64]
    [+0x000] header_          : 0x320653de760 [Type: unsigned __int64]
3:056> dt jsclass 320653de760
xul!JSClass
   +0x000 name             : 0x00007ff9`826b05e8  "o???"
   +0x008 flags            : 0x653e20d0
   +0x010 cOps             : 0x0000019e`07f05c00 JSClassOps
   +0x018 spec             : 0x00000000`40000000 js::ClassSpec
   +0x020 ext              : (null) 
   +0x028 oOps             : (null) 


[07:59:55.0942] <haggar>
So the value in the header isn't a valid pointer.

[08:00:06.0036] <jandem>
isn't the value at 0x320653de760 an ObjectGroup instead of a JSClass?

[08:00:34.0757] <haggar>
Yes, sorry, let me correct that

[08:01:56.0244] <haggar>
OK, there's a bug in my code, not to worry :)

[08:02:00.0950] <haggar>
Thanks

[08:03:47.0968] <nbp>
jandem: ok, I think I found the issue, I do not call callWithABI with the proper MoveOp for popping the return value, which causes it to remain on the FP¬†stack and to overflow the FP stack (which is quite short)

[08:04:53.0793] <jandem>
nbp: good find!

[08:06:32.0173] <jandem>
the FP stack is a pain

[09:56:08.0170] <jorendorff>
mgaudet: You're right that if that code clobbered any slots for let/const/class bindings, it just so happens we would emit bytecode to re-re-clobber those with `UninitializedValue` later; BUG

[09:56:10.0294] <jorendorff>
 * mgaudet: You're right that if that code clobbered any slots for let/const/class bindings, it just so happens we would emit bytecode to re-re-clobber those with `UninitializedValue` later; BUT

[09:56:21.0567] <jorendorff>
mgaudet: more immediately, there are only vars in this scope

[09:56:37.0621] <jorendorff>
so that won't happen to begin with. i'm adding an assertion and a comment to that effect now

[09:56:54.0688] <jorendorff>
or rather, i have, and now i'm running unit tests and biting my nails

[09:57:50.0653] <jorendorff>
(for everyone else: these remarks are about <https://phabricator.services.mozilla.com/D93859#inline-531493>)

[10:02:07.0195] <mgaudet>
this scope being the expression parameter scope? 

[10:02:54.0991] <jorendorff>
mgaudet: ah, i see. _No_, and it's important

[10:03:28.0697] <jorendorff>
there's something we call an "extra body var"

[10:03:36.0012] <jorendorff>
 * there's something we call an "extra body var" scope

[10:04:30.0789] <mgaudet>
(I feel like I'm executing the socratic method with you, except I've got no idea of what's going on :P) 

[10:04:57.0088] <jorendorff>
well... and i don't either, which only makes it more socratic

[10:05:05.0668] <mgaudet>
heh 

[10:05:11.0991] <jorendorff>
ok, step 28 of https://tc39.es/ecma262/#sec-functiondeclarationinstantiation

[10:05:50.0900] <mgaudet>
oi. OK. I follow a bit :) 

[10:06:31.0940] <jorendorff>
The method where I added new `undefined`-blitting is `EmitterScope::enterFunctionExtraBodyVar`

[10:06:56.0756] <mgaudet>
This scope will exist -wherever- we have expression parameters? 

[10:07:12.0209] <mgaudet>
(attempting to understand if it's a complete solution) 

[10:07:51.0771] <jorendorff>
mgaudet: That I really don't know. It's unclear just how much we differ from the spec.

[10:10:31.0769] <jorendorff>
mgaudet: OK, it looks like this is the only place where the bit controlling this scope is set: https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.cpp#1866

[10:11:26.0533] <jorendorff>
so it's like `parameterExprs && (bodyVars || bodyDirectEval)`

[10:12:21.0136] <jorendorff>
I think the reason all this is so muddy in my head is that the spec

[10:12:44.0818] <jorendorff>
kind of treats the `var` scope and the body-block `let/const/class` scope as the same, for the purpose of early errors

[10:12:59.0534] <jorendorff>
but in terms of how it all actually mechanically works at run time, they're clearly distinct

[10:13:43.0801] <jorendorff>
(`bodyVars` in my pseudocode also counts function-local `function`s)

[10:14:14.0672] <mgaudet>
(Sorry -- had to run away; having home maintenence done at the moment). 

[10:14:57.0022] <jorendorff>
(it's ok, you're autopunished by my unchecked bloviation :-P )

[10:17:39.0365] <mgaudet>
Ok. So; we have an extra function var scope, this is where corresponds to the environment where direct eval created bindings would go. As well, if you have a parameter expression, that same scope is used, to avoid function bindings leaking into parameters. 

The slots corresponding to this scope are the ones you're resetting to Undefined, to avoid leaking the contents of those slots after we've finished evaluating the parameters. 

[10:18:12.0950] <mgaudet>
these slots are then the only set that are shared in a frame; so the only ones we need to worry about resetting 

[11:24:12.0081] <smaug>
Waldo: hopefully I didn't miss anything too critical in the reviews. At least there is a full cycle to catch leaks :)

[11:29:27.0655] <jorendorff>
mgaudet: OK, I uploaded a patch with a bit more in the comments. You mentioned also possibly commenting on when slots are initialized to `undefined`

[11:30:20.0735] <jorendorff>
mgaudet: I think that is best seen as a property of the "spec" of the bytecode language, or whatever we call that contract that function script stencils are supposed to follow

[11:30:43.0951] <jorendorff>
rather than something that happens on a particular line of code, as that varies from one execution engine to the next

[11:32:36.0357] <jorendorff>
mgaudet: for the interpreter, it happens here https://searchfox.org/mozilla-central/source/js/src/vm/Stack-inl.h#261,264

[11:34:16.0347] <jorendorff>
mgaudet: anyway, will comment whatever helps, feel free to throw it back to me again

[11:34:21.0708] <jorendorff>
afk for a bit

[11:35:04.0358] <jorendorff>
btw I still have a few odds and ends, and dump functions, from this generator stuff that I want to get into phabricator before starting on private methods


2020-10-20
[03:16:18.0183] <haggar>
I'm looking at a JS::NativeObject, with a class of 'HTMLDocument', I can see there's a 'UnwrapDOMObject' which points to the C++ object I'm interested in.  However I'm not sure what kind of JS object this actually is?

[03:18:24.0231] <haggar>
If I treat it as a js::nativeobject, I see the 32 bytes of the pointers to (group, shape, slots, elements), and then the 'UnwrapDOMObject' is at offset 0x28 from the start of the object.

[03:25:09.0224] <haggar>
Actually no, it's not, ignore me, sorry.  As this JSObject doesn't have an associated shape, there aren't any named properties, so I guess the data I need is stored in the elements?

[03:27:07.0488] <jandem>
I think HTMLDocument is a ProxyObject instead of a NativeObject

[03:33:56.0072] <haggar>
Ahh OK, I'll look into that, thanks

[04:19:56.0578] <Ms2ger>
Didn't I say that yesterday?

[04:28:15.0957] <haggar>
You said it was a proxy object, but I didn't make the connection that there was actually a ProxyObject class :)

[06:38:10.0145] <haggar>
For a mozilla::StyleRGBA, if the values aren't set, they are all zero, how does Firefox determine they are not set, rather than the literal value of zero?

[06:40:23.0167] <Ms2ger>
Not really a question for this channel, but short answer: it can't

[06:40:56.0623] <haggar>
OK, I'll ask in the other channel, thanks

[11:08:03.0895] <jorendorff>
tcampbell: sanity check‚ÄîI don't see anything in ImmutableScriptData that tells me if the script is for a generator/async function. Am I just missing it?

[11:09:32.0199] <tcampbell>
nope, that lives on BaseScript

[16:37:07.0928] <Waldo>
smaug: One comment for you to respond to on https://phabricator.services.mozilla.com/D92326 and then I should be able to land all the patches, I think -- give it a look when you can.  Try-run of everything requested (except the `mConsumer` assertion addition, for the moment) is here: https://treeherder.mozilla.org/#/jobs?repo=try&revision=d008408ff2215ee49300f722cc093ee15f88adf5


2020-10-21
[22:04:29.0087] <Waldo>
...or maybe not quite land, blah.  Hopefully I can figure out at least some of this tonight, so I can pocket a bunch of partial wins even if the final state isn't ready yet...

[23:44:42.0846] <annevk>
Seems Chrome is starting to prototype bring-your-own-buffer streams

[07:05:32.0337] <nbp>
tcampbell: I missed the beginning of the meeting. What is the conclusion of the question you had on the test suite?

[07:06:04.0559] <tcampbell>
nbp: I missed it too. I think we are reordering items

[07:07:37.0342] <iain>
We jumped straight into the OKRs. You didn't miss anything before that.

[07:07:47.0113] <nbp>
Thanks.

[07:08:14.0600] <sdetar>
Correct, we skip to talking about OKRs first

[07:45:08.0051] <bhearsum>
Hi folks. How do I get `jsapi-tests` built? It doesn't seem to build with `--enable-application=js` and `--enable-tests`.

[07:48:43.0894] <Ms2ger>
You'll need --enable-js-shell

[07:49:44.0912] <sfink>
that's unfortunate

[07:50:08.0421] <Ms2ger>
sfink: do you know anyone who's paid to work on this? :)

[07:50:15.0861] <sfink>
(I checked, and I do have both set in my mozconfig; I had assumed --enable-js-shell was redundant)

[07:50:50.0684] <sfink>
yeah, that bhearsum guy is doing some stuff with mach commands, I hear

[07:50:57.0097] <sfink>
:-)

[07:51:22.0112] <bhearsum>
Hey!

[07:51:38.0222] <bhearsum>
I'm going to get added to blame to so many things this week...

[07:52:52.0657] <sfink>
the build configuration stuff scares me, but I'll take a quick look to see if this would be easy

[07:55:18.0181] <evilpie>
I have --enable-application=js and jsapi-tests seems to exist in dist/bin

[07:55:19.0901] <sfink>
hrm, jsapi-tests is dependent on `CONFIG['JS_DISABLE_SHELL']`, which is controlled by `--enable-js-shell`.

[07:55:30.0634] <sfink>
evilpie: you don't have --enable-js-shell as well?

[07:57:20.0995] <bhearsum>
oh, i have artifact builds enabled, that's probably not helping

[07:57:42.0883] <bhearsum>
i'm building right now without that, and with --enable-js-shell; i can try again without the latter after this is done

[07:59:39.0458] <sfink>
I just kicked off a run with --enable-application=js and without --enable-js-shell, so I'll see just as soon as my kinda slow laptop can tell me

[07:59:49.0571] <evilpie>
my mozconfig is just https://paste.mozilla.org/VPBHYxmQ

[08:00:04.0157] <evilpie>
I just re-ran it on a clean dir and it does build jsapi-tests

[08:00:19.0464] <sfink>
huh. Ok.

[08:00:51.0701] <bhearsum>
i didn't enable/disable debug or optimize

[08:01:06.0746] <sfink>
that shouldn't change whether or not jsapi-tests gets built

[08:01:38.0911] <sfink>
I could definitely imagine artifact builds being involved, though

[08:01:45.0160] <sfink>
I've never used that

[08:02:08.0021] <sfink>
and yes, my build agrees with what evilpie said

[08:02:26.0300] <bhearsum>
```
# Automatically download and use compiled C++ components:
ac_add_options --disable-artifact-builds

ac_add_options --enable-application=js
ac_add_options --enable-tests
ac_add_options --enable-js-shell
```
got me jsapi-tests -- is there any other configuration that would be useful for me to test?

[08:02:54.0224] <sfink>
it seems like we've covered everything interesting. It looks like it was the artifact builds.

[08:03:08.0228] <bhearsum>
cool!

[08:03:11.0852] <bhearsum>
thanks folks

[08:03:22.0380] <sfink>
though I guess it would be nice if jsapi-tests were packaged up in artifact builds, but I *think* I saw a bug for that not long ago?

[08:03:33.0595] <sfink>
or maybe that was for the JS shell

[08:04:02.0399] <sfink>
anyway, not important unless someone needs it

[08:50:47.0791] <tcampbell>
jonco: I won't make it to gc meeting

[09:29:05.0422] <jorendorff>
tcampbell: I tagged you for review in bug 1671391, but before you look at the patches

[09:29:07.0178] <botzilla>
https://bugzil.la/1671391 ‚Äî NEW (jorendorff) ‚Äî Fix debugger quality-of-life regressions from bug 1412202

[09:30:38.0525] <jorendorff>
tcampbell: Remember I previously changed code in onPopCall/onPopLexical so that it happens even for generators, even if we're just suspending. Which doesn't make a ton of sense

[09:31:33.0023] <jorendorff>
tcampbell: My current patches don't go back and re-add the if-statements, I just leave it this way

[09:33:24.0658] <jorendorff>
tcampbell: My reasoning is, it probably doesn't hurt anybody, it's debugger-only, the code is already complex enough, and fixing it would require telling those methods whether or not we are suspending, information that would have to be added to some of the non-debugger-only parts of the path that leads to them

[09:34:25.0103] <jorendorff>
but, it's a lightly held opinion. thoughts?

[09:35:38.0000] <tcampbell>
So, we snapshot on each suspend, but use the unaliased frame if it was suspended when we query the environment proxy?

[10:24:57.0864] <jorendorff>
tcampbell: if we query an environment proxy for a suspended generator, we use the state stashed in the generator

[10:25:42.0226] <jorendorff>
(after the two patches in that bug)

[10:26:16.0241] <tcampbell>
jorendorff but there are also cloned values that are junk?

[10:26:44.0912] <jorendorff>
yes, right now two clonings are happening :-P

[10:27:08.0112] <jorendorff>
(arguably all this is too dumb to live and we should not be doing any copying at all)

[10:27:37.0675] <tcampbell>
Got it. And the onPop clone has a lot of optimized-out? While suspended generator does not?

[10:30:31.0229] <jorendorff>
ok so

[10:30:35.0647] <jorendorff>
The suspended generator certainly has everything it needs; but the onPop clones should too. we should only be missing stuff if there is not a snapshot‚Äîunrelated corner cases

[10:32:07.0479] <jorendorff>
Like if we're examining the environment of a closure that was created without debugger enabled

[10:32:26.0549] <jorendorff>
non-captured variables will be unavailable, as before

[14:39:28.0069] <ewlsh>
tcampbell: referring back to our conversation a few weeks ago about customizing module export resolution, it seems Module is not extensible ‚òπÔ∏è so you can't override resolveExport using a ModuleResolveHook


2020-10-22
[06:26:45.0173] <tcampbell>
Hmm.. that is unfortunate (but I guess not too surprising)

[07:58:44.0143] <tcampbell>
jorendorff: class fields are always enable nowadays, right?

[07:59:18.0958] <jorendorff>
public fields? yeah

[07:59:28.0067] <jorendorff>
either that or i have a pref set

[07:59:52.0803] <tcampbell>
yes, public fields. I think we removed the pref

[08:00:47.0924] <jorendorff>
that's what i remembered, but i always have to check

[08:00:55.0609] <jorendorff>
bugzilla's slow today

[08:01:12.0503] <tcampbell>
/me goes and removes the wild annotation from https://searchfox.org/mozilla-central/source/js/src/tests/non262/reflect-parse/class-fields.js#1

[08:12:37.0662] <jonco>
why does NativeObject need a 'private' slot when Value can store private pointers?

[08:16:31.0663] <jorendorff>
tcampbell: on by default in May 2019, FF69 according to bugzilla, bug 1555464; removed in March 2020, bug 1616882

[08:16:52.0528] <botzilla>
https://bugzil.la/1555464 ‚Äî RESOLVED (jorendorff) ‚Äî Turn the pref for public fields on by default

[08:16:53.0328] <botzilla>
https://bugzil.la/1616882 ‚Äî RESOLVED (anba) ‚Äî Remove options for class-fields and await-fix

[08:17:13.0902] <tcampbell>
@jonco I think largely historic reasons. PrivateValue used to have more restrictions than it does today. I suspect once we remove TI it probably makes sense to then remove the private slot.

[08:17:33.0927] <jonco>
tcampbell: that would be a nice simplification

[08:18:29.0131] <tcampbell>
there seem to be some barrier hooks for private though 

[08:18:48.0928] <tcampbell>
`privatePreWriteBarrier`

[08:18:58.0488] <jonco>
yes, you can set it to a Value, like it was a normal slot!

[08:19:52.0976] <jonco>
oh wait that does something else...

[08:21:21.0692] <jonco>
you can set it to a GC thing, in which case it has barriers in case it's a nursery object

[08:21:46.0885] <jonco>
I guess it doesn't work for say a nursery string though

[08:23:37.0076] <jonco>
tcampbell: did you mention TI because it makes use of private values (like, tracks their type or something)?

[08:24:11.0370] <tcampbell>
I mention because we wanted to do a bunch of tweaks to NativeObject after it is gone

[08:24:20.0641] <tcampbell>
I don't believe we have any TI data for that slot

[08:24:26.0243] <jonco>
ah ok that's good

[08:24:38.0248] <jonco>
what tweaks did you have in mind?

[08:25:30.0345] <tcampbell>
index-properties only on elements is one I want to see. I think jandem had changes around COW in mind. And there is always the shuple exploration to redo Shapes.

[08:25:50.0180] <jonco>
ok great

[08:26:29.0877] <jonco>
I'm looking at ways of simplifying marking at the moment

[08:27:05.0471] <tcampbell>
jorendorff: do you think we can remove 'uneval' tests now that code is all removed?

[08:28:28.0674] <jorendorff>
tcampbell: i dunno, it's still a big blob of C++ code

[08:28:36.0718] <jorendorff>
and we do use the ValueToSource stuff in some error messages sometimes, right?

[08:28:52.0865] <jorendorff>
tcampbell: or did i miss something about uneval

[08:29:05.0494] <tcampbell>
https://searchfox.org/mozilla-central/search?q=this.uneval&path=&case=false&regexp=false

[08:29:53.0262] <tcampbell>
oh wait

[08:30:05.0579] <tcampbell>
I don't know why I thought the shell function wasn't there

[08:30:09.0024] <tcampbell>
nevermind!

[08:30:27.0135] <evilpie>
it's disabled in the browser

[09:16:09.0443] <ewlsh>
tcampbell: at least in our case, we've removed uneval from userland (like Firefox) but our debugging global still uses it internally - which I think is true of Firefox Debugging Tools too

[12:20:28.0597] <kmag>
So... is there any chance we can get the baseline interpreter to generate code with frame pointers so it can be unwound properly in crashes?

[12:23:05.0244] <jandem>
the baseline interpreter and jit use frame pointers (maybe not in all cases), it's Ion/Warp code that doesn't..

[12:24:58.0932] <kmag>
Hm. I've found that I have to disable the baseline interpreter to get useful stack traces from crashes lately...

[12:26:58.0056] <jandem>
disabling the baseline interpreter disables the baseline JIT and Ion/Warp too

[12:28:11.0101] <kmag>
Yeah, I tried just disabling both of those things individually first, and the broken stacks didn't go away until I disabled the baseline interpreter.

[12:28:32.0554] <kmag>
Which makes sense, since it was happening in startup crashes that I was surprised to see JIT code for at all...

[12:31:11.0047] <jandem>
yeah it's a pain. Would be nice if the baseline interp/JIT had reliable stacks at least

[12:45:00.0497] <kmag>
Yeah, that's what I was asking for :)

[13:17:00.0183] <tcampbell>
This is just silly syntax..
```js
class C {
  'foo \
   bar'
}
```

[13:18:38.0538] <tcampbell>
is equivalent to `class C { ['foo\n  bar'] = undefined }`

[13:47:13.0033] <tcampbell>
jorendorff: I have some annoying questions about parser locations

[13:47:29.0307] <jorendorff>
i saw that bug go by

[13:47:40.0856] <jorendorff>
what's up?

[13:48:04.0284] <tcampbell>
https://searchfox.org/mozilla-central/rev/25d5a4443a7e13cfa58eff38f1faa5e69f0b170f/js/src/frontend/Parser.cpp#8035

[13:48:59.0500] <jorendorff>
you're right, this is going to be annoying

[13:49:06.0501] <tcampbell>
```
class C { 'aa' }
//            ^     ^
```

[13:49:10.0409] <tcampbell>
 * ```
class C { 'aa' }
//         ^     ^
```

[13:49:12.0709] <tcampbell>
 * ```
class C { 'aa' }
//        ^     ^
```

[13:49:17.0467] <tcampbell>
 * ```
class C { 'aa' }
//        ^   ^
```

[13:50:14.0321] <tcampbell>
so, the default definition of `newThisName` binds the token at `pos()`, which is the first ^, while other parts of field initializer code use the second^ location.

[13:51:00.0738] <tcampbell>
jorendorff: Should I be adding an overload of `newThisName` that takes a position? Or should I be figuring out why `pos()` is behind?

[13:51:48.0389] <tcampbell>
(it is kind of weird we have a source note for the implicit .this also)

[13:52:17.0706] <tcampbell>
I'm trying to tighten up definitions of function line/column so that the body of a function is actually inside the function

[13:52:49.0877] <jorendorff>
/me looks

[13:53:04.0022] <jorendorff>
my instinct is to check and see if the behavior of `pos` is something familiar

[13:53:58.0032] <tcampbell>
I guess all behaviour of `pos()` is unfamiliar to me, and I've only be looking at hard cases like fields and default constructors..

[13:55:08.0859] <jorendorff>
ok, well, `pos()` is the position of the "current token" which means the one most recently got

[13:55:11.0419] <tcampbell>
Actually, I guess I don't understand this part https://searchfox.org/mozilla-central/rev/25d5a4443a7e13cfa58eff38f1faa5e69f0b170f/js/src/frontend/Parser.cpp#7943-7953

[13:56:34.0640] <jorendorff>
tcampbell: oh, good call, I don't know why that is good

[13:58:23.0768] <jorendorff>
it seems better to always use the field name token, even if it's a string literal or other troll-name

[13:58:48.0417] <tcampbell>
that branch seems to differentiate between field or no-field

[13:59:21.0491] <jorendorff>
oh, I thought it was differentiating on `a = expr;` vs. `a;`

[13:59:25.0096] <tcampbell>
the troll-name trips my assert, but isn't really even to blame. If I had a column-assert too, it would be wrong for very normal fields

[13:59:28.0238] <jorendorff>
initializer or no-initializer

[13:59:42.0430] <tcampbell>
sorry, what you said is right

[14:00:08.0019] <jorendorff>
Yes‚ÄîI can't think of any reason it should do that, unless we're trying to dodge other frontend assertions

[14:00:15.0733] <jorendorff>
about things properly nesting

[14:01:38.0114] <jorendorff>
tcampbell: actually, how much does this matter‚Äîwhy are we looking at this?

[14:02:03.0307] <tcampbell>
it matters, not much. I'm making source-notes relative to the start of functions

[14:02:16.0482] <jorendorff>
from the user's point of view, if the assignment fails because (for example) the base class constructor returned a frozen object, I just want the error to point to the field; any location that indicates the field seems good enough

[14:02:48.0104] <tcampbell>
and ideally, all notes are after the function starts. This being the one exception

[14:04:30.0049] <jorendorff>
(i wish we had all initializers in a single function.)

[14:07:18.0851] <tcampbell>
I'll try making it always the point to the start of the field and if that passes tests, I'll probably land it

[14:08:44.0192] <mgaudet>
confession: Can OSR into a Warp compiled body of an async function; crash on return into baseline Resume tho. (To set expectations: I suspect there's weeks of work left here... the implementation is [like this](http://blogs.solidworks.com/tech/wp-content/uploads/sites/4/redneck-bailing-wire.jpg) right now) 

[14:08:47.0222] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[15:34:29.0206] <Waldo>
wat

[15:34:32.0861] <Waldo>
https://searchfox.org/mozilla-central/source/js/src/vm/TypedArrayObject.cpp#2534

[15:34:58.0440] <Waldo>
Am I stupid, or are we missing a `!` in that line, and have been missing it forever?  Compare https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-defineownproperty-p-desc

[15:35:30.0919] <Waldo>
New test262 test detects this, and it's frankly shocking that this would be the very first time it would be tested.

[15:42:36.0015] <iain>
I do not believe that you are stupid

[15:43:04.0932] <iain>
So I am forced to conclude that our code has been broken for the last five years: https://hg.mozilla.org/mozilla-central/rev/10f6a2d813581a199b9b90c33ebd7e1f6fffdc17#l1.24

[15:43:42.0750] <Waldo>
Well, turns out no.  O_O  https://raw.githubusercontent.com/tc39/ecma262/7461eea82908b2c5742e4d6e5f57dc0cd4b43a60/spec.html has what our code has (that dating to early 2016).  Maybe the spec had a bug and it got fixt.

[15:43:57.0820] <Waldo>
"1. If _Desc_ has a [[Configurable]] field and if _Desc_.[[Configurable]] is *true*, return *false*."

[15:47:34.0204] <Waldo>
Huh.  This only changed a week ago in the spec.

[15:47:45.0035] <Waldo>
So I guess the new test really _is_ the first test of it.

[15:48:25.0670] <Waldo>
Ah, "To ensure that we don't violate EIM invariants for typed arrays, we must also:

    Make integer-indexed elements [[Configurable]]" from https://github.com/tc39/ecma262/pull/2164

[15:48:34.0293] <Waldo>
 * Ah, "To ensure that we don't violate EIM invariants for typed arrays, we must also:
```
Make integer-indexed elements [[Configurable]]"from https://github.com/tc39/ecma262/pull/2164
```

[15:48:47.0381] <Waldo>
 * Ah, "To ensure that we don't violate EIM invariants for typed arrays, we must also:
```
Make integer-indexed elements [[Configurable]]"
```

[15:49:06.0851] <Waldo>
 * Ah, "To ensure that we don't violate EIM invariants for typed arrays, we must also: Make integer-indexed elements [[Configurable]]"
" from https://github.com/tc39/ecma262/pull/2164

[15:49:41.0756] <Waldo>
Okay, yeah, that's no longer a one-character one-line fix, most likely.  Time to file.


2020-10-23
[19:50:15.0395] <arch-element>
Hey so, I have a list of functions, and I want to dynamically generate a new function that calls every function in the list, in such a way that all of the functions in the list can get inlined.

[19:52:57.0477] <arch-element>
For example, I would have [function a(){}, function b(){}], and then I would want my javascript to generate something like, function c() {list[0](); list[1]();}

[19:53:14.0947] <arch-element>
 * For example, I would have [function a(){}, function b(){}], and then I would want my javascript to generate something like, `function c() {list[0](); list[1]();}`

[19:53:43.0610] <arch-element>
The trouble is, I am not sure if Spidermonkey will realize that `list[0]()` always calls the same function

[19:55:14.0562] <arch-element>
Another approach would be for my code to get `a.source` and `b.source` and concatenate them, but that wouldn't work for anything that resolves to `[native code]`.

[19:57:03.0244] <Waldo>
I think the overhead of calling the functions is sufficiently low that you shouldn't worry about it, most likely.

[19:58:27.0244] <arch-element>
One use-case I want to support is when the functions on the list are simple arithmetic operations

[20:01:28.0135] <Waldo>
If your overall function isn't going to be called hundreds or thousands of times, it's not going to matter.

[20:02:09.0352] <arch-element>
I'm expecting it to be :)

[20:02:49.0434] <arch-element>
To give you some more details, I am imagining generating a function that sets flags and coordinates state in an object, and then having that function get called every frame for every object in a big list of objects.

[20:03:22.0183] <arch-element>
So most of the sub-functions will be as thin as boolean expressions, and the composed function will be called several thousands of times a second

[20:03:27.0298] <iain>
If it always calls the same function, we will be able to tell and inline it.

[20:05:26.0451] <iain>
We still have to look at the array to make sure that the contents haven't changed, but if the call always goes to the same place, then it should be well-optimized.

[20:06:24.0784] <arch-element>
Is there something other than an array that I could use to make it even faster?

[20:07:34.0860] <arch-element>
I'm setting up both the data structure that stores the functions as well as the composed function, I can do any preparatory work necessary.

[20:09:34.0241] <arch-element>
I could even attach the functions to `window` if that would somehow be helpful.

[20:11:50.0630] <iain>
I can't think of anything in particular that would help

[20:12:09.0225] <iain>
The quality of code will depend a little bit on what's inside the functions you're calling

[20:12:52.0917] <iain>
But the system you've described should be optimized well

[20:13:12.0981] <iain>
And I would not put any more effort into it until you've written your code and can profile it for hot spots

[20:13:26.0900] <iain>
Premature optimization is the root of all evil, and so on

[20:14:30.0990] <arch-element>
Just as long as generating a function with `eval` will not curse it to be interpreted forever, or anything like that. :)

[20:14:57.0715] <iain>
Functions that *contain* an eval don't get optimized as much

[20:15:08.0472] <iain>
But functions that are *created* by eval are fine

[20:15:30.0081] <arch-element>
That does make sense

[20:16:35.0190] <arch-element>
So I am hoping to call these sub-functions with `apply(this,args)` so that they run in exactly the same context as the composed function

[20:17:25.0598] <iain>
Ah, that's less good

[20:17:43.0864] <arch-element>
Good thing I mentioned it :) 

[20:18:51.0497] <iain>
It's something that we *could* optimize better, but hasn't been a priority

[20:19:22.0633] <iain>
Our inlining is most effective with regular calls

[20:20:05.0856] <arch-element>
`foo(...args)` does that still count as a regular call?

[20:21:10.0307] <iain>
It's a spread call, and no, unfortunately

[20:21:52.0221] <iain>
But we'll get around to it eventually

[20:22:44.0408] <arch-element>
Well, I can work around that because I am generating the calling code. I can have it write out `foo(a,b,c)` because foo.toString has the function signature in it.

[20:23:02.0662] <iain>
That should be faster on SpiderMonkey

[20:23:18.0725] <iain>
And it should be no slower in other engines

[20:23:24.0663] <iain>
Maybe faster there, too

[20:23:44.0103] <arch-element>
Is there any way for me to get `this` set right?

[20:24:47.0260] <iain>
We do inline through Function.prototype.call

[20:25:00.0604] <arch-element>
I could tell everyone to put an explicit `self` in their function arguments if necessary but it would be mildly more friendly to propagate `this`.

[20:25:35.0398] <iain>
If you generate `foo.call(this, a, b, c)` then it should optimize well

[20:25:59.0513] <iain>
But all of this is probably premature optimization

[20:26:09.0813] <iain>
My actual advice is: write something that works, then profile it

[21:02:16.0040] <arch-element>
Knowing whether or not I can propagate `this` was important for writing even the first slow version, because it matters for the interface that's exposed to other code. But yes that is always good advice.

[21:03:37.0064] <arch-element>
Thanks for telling me about `call`, I am glad I can use `this` in the sub-functions.

[12:50:46.0144] <mgaudet>
jorendorff: The frame dumping code you wrote while trying to optimize generators; did it get landed? (and under that name...) 

[12:50:51.0660] <mgaudet>
 * jorendorff: The frame dumping code you wrote while trying to optimize generators; did it get landed? (and under what name...)

[12:51:04.0566] <jorendorff>
no, it needs a new reviewer, hang on

[12:51:25.0591] <jorendorff>
mgaudet: bug 1670962

[12:51:27.0293] <botzilla>
https://bugzil.la/1670962 ‚Äî NEW (jorendorff) ‚Äî Add DumpStackBytes debug function

[12:52:59.0609] <mgaudet>
Fantastic. Thanks. I'm probably going to play with this a bit :) 

[12:53:28.0499] <jorendorff>
it's very incomplete, there's even stuff commented out in there :-\

[12:56:38.0779] <mgaudet>
Still, at the very least the code will act as a helpful guide :) 


2020-10-24
[01:53:49.0928] <redfire>
Hello, I just followed the guide on how to build spidermonkey but I got this error when running the `../configure` line
```ERROR: *** The pkg-config script could not be found. Make sure it is                                                                                                    *** in your path, or set the PKG_CONFIG environment variable                                                                                                            *** to the full path to pkg-config. ```

[06:24:50.0654] <evilpie>
redfire I would suggest following these instructions: https://firefox-source-docs.mozilla.org/js/build.html

[06:28:01.0786] <redfire>
evilpie: I followed https://firefox-source-docs.mozilla.org/setup/windows_build.html#building-firefox-on-windows until I got the entire repository cloned when I tried to run that configure command

[06:28:50.0511] <evilpie>
Okay sorry, can't help you with windows

[06:29:27.0398] <evilpie>
Make sure you bootstrap though

[06:31:42.0287] <redfire>
Already bootstrapped, but I'm kind of lost now

[06:34:12.0443] <evilpie>
Maybe asking in #introduction.


2020-10-25
[02:23:44.0291] <redfire>
Ok, so, after some troubleshooting, I've managed to build SpiderMonkey and run the js "repl"
How do I set the compiler to produce a `.so` instead of a `.exe`

[07:01:22.0046] <redfire>
basically, I need to figure out what options to put in my mozconfig to be able to get a file that I can use to embed in another application

[08:37:32.0116] <sstangl>
redfire: it might be easier to use js/src/make-source-package.py to create a SpiderMonkey source package, and then build the library from that. That script *may* be out of date, but it's worth a shot.

[08:41:13.0336] <sfink>
maybe it wouldn't be the best way if you're modifying the source, but if you want a recent source package it's easier to grab it from a recent SM(pkg) job.

[08:41:29.0997] <sfink>
https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/O1YeX8ZZTsWyJiaczjnYmQ/runs/0/artifacts/public/build/mozjs-84.0a1.0.tar.xz is from yesterday's mozilla-central


2020-10-26
[03:33:40.0752] <yulia>
arai: who would be thee best person to ping for stencil reviews?

[03:33:57.0232] <arai>
I can

[03:35:47.0775] <yulia>
ok, i will update the review to be for you, thanks

[03:37:50.0685] <jandem>
arai++ for the [DITM addon](https://addons.mozilla.org/en-US/firefox/addon/ditm/), it just saved me a lot of time

[03:38:20.0670] <arai>
:)

[04:00:55.0415] <arai>
yulia: ping me if you need help for Stencil XDR and dump

[04:04:48.0529] <yulia>
arai: thanks, working through your comments now

[04:36:22.0709] <yulia>
arai: I have something that should implement the new field in stencil... but I am not too sure how to test it. What would be the way to run a module that is decoded from Xdr?

[04:36:36.0759] <yulia>
I can also just push what I have for you to take a look if that is easier

[04:37:41.0312] <arai>
shell `evaluate` function has an option to test XDR.  and you can enable stencil-xdr by passing `--no-off-thread-parse-global` option to the shell

[04:38:11.0280] <yulia>
great, thanks

[04:38:13.0841] <arai>
but I'm not sure if `evaluate` supports module

[04:38:31.0244] <yulia>
ah... i guess i will find out in a minute

[04:39:07.0034] <arai>
files in js/src/jit-test/tests/xdr uses it

[04:39:31.0576] <arai>
looks like there's another shell function to code modules

[04:39:45.0419] <arai>
https://searchfox.org/mozilla-central/source/js/src/jit-test/tests/xdr/module.js

[04:40:07.0910] <arai>
codeModule + decodeModule, after parseModule

[04:42:11.0398] <yulia>
cool

[04:42:18.0182] <arai>
err, wait

[04:42:24.0243] <arai>
it doesn't use stencil XDR :P

[04:43:03.0246] <arai>
we should modify those 2 methods to conditionally use stencil XDR

[04:43:11.0418] <arai>
https://searchfox.org/mozilla-central/rev/e1d1f043957191616721b9e8bf811c0aab8a203a/js/src/shell/js.cpp#5206-5269

[04:44:45.0597] <yulia>
ok, i will try that

[04:48:04.0149] <yulia>
I will be back in an hour and try that...

[04:48:33.0298] <arai>
sorry, I think those methods doesn't fit stencil XDR

[04:48:50.0902] <arai>
because it first compiles to ModuleObject and encode/decode ModuleObject

[04:49:29.0706] <arai>
to support stencil XDR, it should compile to stencil and encode it before instantiating the stencil to ModuleObject

[04:55:23.0352] <arai>
and we don't yet have `CompileModuleToStencil` API :P

[04:55:30.0146] <arai>
yulia: please just submit your patch

[04:57:29.0512] <arai>
a bunch of preparation is necessary before testing module stencil XDR

[05:35:01.0861] <yulia>
ok

[06:37:26.0311] <tcampbell>
_sigh_, javascript... `class C { static async * [x => y]() { } 0 }`

[08:30:01.0904] <mgaudet>
tcampbell: I had to run that in the shell and do some introspection to figure that out (and even then... that zero becoming a field is not an obvious outcome to me) 

[08:32:04.0197] <tcampbell>
lol.. yeah, `class C { 0 }` bothers me a lot..

[08:33:31.0062] <nbp>
/me reads aboiut yet another startup cache ‚Ä¶ ‚òπÔ∏è

[08:33:37.0401] <nbp>
/me  * reads about yet another startup cache ‚Ä¶ ‚òπÔ∏è

[09:14:19.0582] <sfink>
lth: I'm not sure I want to propose this on the bug yet, but I would think that the SM(pkg) build is not as important as the work you're trying to land, and it might make sense to demote SM(pkg) temporarily to tier 3 just to be able to land.

[09:15:18.0091] <djvj>
jorendorff: took a first pass through that patch, I need to re-familiarize myself with the stack layout stuff, it's been a while

[09:16:09.0224] <lth>
sfink: ok.  can you perhaps note that on the bug?  more authority coming from you ;-)

[09:16:21.0921] <sfink>
I haz authority? Cool!

[09:17:03.0059] <sfink>
(or maybe I just have less conflict of interest. That'll work.)

[09:29:24.0395] <jorendorff>
djvj: üëã hi! thanks for looking.

[09:36:24.0340] <evilpie>
Do we have some way to encode a single unicode code point to UTF-8?

[09:46:32.0469] <sfink>
evilpie: there's a static function that implements it https://searchfox.org/mozilla-central/source/toolkit/components/jsoncpp/src/lib_json/json_tool.h#39 fwiw

[09:48:11.0901] <sfink>
(I didn't see anything that you could call)

[09:50:29.0688] <evilpie>
weird


2020-10-27
[06:27:24.0755] <nbp>
confession: I finally managed to reproduce the test case failures of JS ABI tests which are happening on the CI on my laptop ‚Ä¶ time to investigate more ‚Ä¶

[06:27:27.0444] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[08:30:06.0448] <evilpie>
we have a lot more jsapi-tests than I remember 

[13:36:06.0204] <barret>
Is there a way to call EncodeURI from C++ without constructing a JSString ?

[13:36:27.0892] <barret>
or is there a c++ equivalent that operates on nsString?

[13:40:49.0388] <sfink>
I see stuff like https://searchfox.org/mozilla-central/source/gfx/thebes/gfxUtils.cpp#1031 if that's somehow accessible to you

[13:41:10.0995] <sfink>
oh wait, no, that's not what you want


2020-10-28
[08:36:48.0900] <sfink>
am I a bad person?

[08:36:55.0957] <sfink>
wait, don't answer that until I ask the real question.

[08:37:24.0262] <sfink>
when a patch is obviously tested or obviously doesn't need testing, and the reviewer neglects to set the project tags, I'm setting them myself

[08:37:34.0623] <sfink>
will mean people do bad things to me as a result?

[08:40:06.0425] <Ms2ger>
I hope not

[08:40:16.0229] <Ms2ger>
Still "yes" to the first, though

[08:40:59.0739] <sfink>
I can't argue with that

[08:53:39.0223] <tcampbell>
Probably just goes in the "can firefox engineers follow basic instructions?" dashboard..

[09:12:11.0854] <iain>
arewereadingthemanualyet.com

[09:23:02.0049] <nbp>
No!

[09:26:05.0682] <nbp>
sfink I just use the checkbox to ignore the overhead when landing. So you are not the only bad person... If any. 

[09:26:24.0385] <sfink>
I guess I've done that a few times too

[10:26:50.0626] <sfink>
https://github.com/firefox-devtools/profiler/issues/3011

[10:56:38.0429] <nbp>
confession: Why is there always a new blocker everytime I attempt to merge the ABI test case ‚Ä¶ this time ASan is eagerly checking gibberish and complain about it ‚òπÔ∏è

[11:00:11.0512] <nbp>
jandem: if I cannot get this test case merged by next week, I will ask you to try building it out of the patches, such that we still have time to fix the ABI if needed.

[11:01:51.0950] <jandem>
nbp: ok works for me

[11:02:31.0519] <nbp>
Thanks

[11:25:45.0787] <nbp>
grmbl ‚Ä¶ `UndefinedBehaviorSanitizer: load of value 4, which is not a valid value for type 'js::NewObjectKind'`

[11:40:29.0174] <nbp>
is there a way to check if UBSan is enabled? I really want to check for the signature of functions using the associated type, otherwise I would have to replace these with equivalent int types :/

[11:40:50.0375] <nbp>
 * is there a way to check if UBSan is enabled? I really want to check for the signature of functions using the real signature, otherwise I would have to replace these with equivalent int types :/

[12:03:41.0449] <sfink>
I guess it would be a pain to use 1 (or 0) for all enum types, instead of the incrementing integral values. (And I guess the incrementing values could start at 100 or something to avoid colliding.)

[12:06:29.0558] <sfink>
would making `FillBits` for any `enum` return 1 do it? I'm not sure how that's used.

[12:07:39.0564] <sfink>
no, that's only used for one subtest. Darn.

[14:01:20.0336] <tcampbell>
jorendorff: I'm looking at the generator/debug patch. Is it intentional you did not check for a suspended generator here too? #0  0x0000555557e00fec in js::EnvironmentIter::environment (this=0x7fffffff1210)
    at /home/tcampbell/projects/gecko.dev/js/src/vm/EnvironmentObject.h:790
#1  0x0000555557de44f4 in GetThisValueForDebuggerEnvironmentIterMaybeOptimizedOut (cx=0x7ffff6934000, 
    originalIter=..., scopeChain=..., pc=0x7ffff57678a1 "\273\001", res=...)
    at /home/tcampbell/projects/gecko.dev/js/src/vm/EnvironmentObject.cpp:3468
#2  0x0000555557de3dc4 in js::GetThisValueForDebuggerFrameMaybeOptimizedOut (cx=0x7ffff6934000, 
    frame=..., pc=0x7ffff57678a1 "\273\001", res=...)
    at /home/tcampbell/projects/gecko.dev/js/src/vm/EnvironmentObject.cpp:3498
#3  0x0000555558435254 in js::DebuggerFrame::getThis (cx=0x7ffff6934000, frame=..., result=...)
    at /home/tcampbell/projects/gecko.dev/js/src/debugger/Frame.cpp:681
#4  0x00005555584395ce in js::DebuggerFrame::CallData::thisGetter (this=0x7fffffff1948)
    at /home/tcampbell/projects/gecko.dev/js/src/debugger/Frame.cpp:1544
#5  0x000055555846163e in js::DebuggerFrame::CallData::ToNative<&js::DebuggerFrame::CallData::thisGetter>
    (cx=0x7ffff6934000, argc=0, vp=0x7fffffff1d48)
    at /home/tcampbell/projects/gecko.dev/js/src/debugger/Frame.cpp:1298
#6  0x0000555557b69ae5 in CallJSNative (cx=0x7ffff6934000, 
    native=0x5555584614b0 <js::DebuggerFrame::CallData::ToNative<&js::DebuggerFrame::CallData::thisGetter>(JSContext*, unsigned int, JS::Value*)>, reason=js::CallReason::Getter, args=...)

[14:01:42.0831] <tcampbell>
 * jorendorff: I'm looking at the generator/debug patch. Is it intentional you did not check for a suspended generator here too? https://searchfox.org/mozilla-central/rev/a147181ece866c1ecd176ac49f112785f960aac0/js/src/vm/EnvironmentObject.cpp#1555-1593

[14:03:03.0034] <jorendorff>
...maybe it is time to break that function up a little bit

[14:08:04.0099] <jorendorff>
tcampbell: oh, this is the branch for argument slots

[14:08:32.0550] <jorendorff>
tcampbell: yeah, generators still store all arguments in the Call object, never in slots. it wasn't a perf concern so I didn't change it.

[14:08:44.0839] <jorendorff>
 * tcampbell: yeah, generators still store all arguments in the Call object, never in frame slots. it wasn't a perf concern so I didn't change it.

[14:08:53.0698] <jorendorff>
but it could definitely assert

[14:09:02.0710] <tcampbell>
ah, makes sense

[14:09:20.0410] <jorendorff>
i guess the broader question is by what right do we believe this code is correct

[14:09:40.0622] <jorendorff>
the whole function is a stinging indictment of our story on scopes and environments :(

[14:09:51.0549] <jorendorff>
ideas SUPER welcome

[14:10:21.0388] <tcampbell>
yeah.. this is a mess

[14:10:50.0161] <jorendorff>
it ought to look more like an interpreter, or virtual method call, on existing data/types

[14:15:54.0815] <tcampbell>
Hmm.. how would you even describe the family of LiveEnvironment, SuspendedGenerator, and Snapshot.

[14:17:03.0527] <tcampbell>
seems like at the very least this method should switch on that at the beginning rather than on each branch

[14:48:53.0199] <tcampbell>
I'm not sure how some of this code is even triggered? I think it is dead code


2020-10-29
[17:43:44.0030] <Waldo>
Anyone else seen stuff like this with moz-phab lately?  Tacking on `--trace` to a regular old submit command,

```
ERROR    2020-10-28 17:25:14,150 Traceback (most recent call last):
  File "/home/jwalden/.local/lib/python3.8/site-packages/mozphab/mozphab.py", line 83, in main
    args.func(repo, args)
  File "/home/jwalden/.local/lib/python3.8/site-packages/mozphab/commands/submit.py", line 565, in submit
    diff = repo.get_diff(commit)
  File "/home/jwalden/.local/lib/python3.8/site-packages/mozphab/mercurial.py", line 784, in get_diff
    file_modes = self._get_file_modes(commit)
  File "/home/jwalden/.local/lib/python3.8/site-packages/mozphab/mercurial.py", line 760, in _get_file_modes
    self.hg_out(
  File "/home/jwalden/.local/lib/python3.8/site-packages/mozphab/mercurial.py", line 177, in hg_out
    out = self.repository.rawcommand(command, eh=error_handler)
  File "/home/jwalden/.local/lib/python3.8/site-packages/hglib/client.py", line 265, in rawcommand
    return eh(ret, out, err)
  File "/home/jwalden/.local/lib/python3.8/site-packages/mozphab/mercurial.py", line 169, in error_handler
    raise CommandError(
mozphab.exceptions.CommandError: command 'b'files'' failed to complete successfully
```

[03:37:12.0032] <jonco>
Waldo: bug 1673394 if you didn't find that already

[03:37:13.0671] <botzilla>
https://bugzil.la/1673394 ‚Äî RESOLVED (glob) ‚Äî moz-phab in subdirectory of source tree crashes

[03:37:48.0591] <Waldo>
Ah, nice.

[03:38:13.0551] <Waldo>
Hopefully the next self-update will pick it up and I won't even notice.

[05:48:27.0282] <yulia>
jorendorff: what was the name you ended up going with for "suspendable" functions?

[05:48:58.0578] <yulia>
I saw GeneratorOrAsync flying around, and i need a similar name to share behavior between modules and functions

[05:50:24.0231] <jorendorff>
yulia: I didn't change it.

[05:51:35.0313] <yulia>
ok, ill cc you in the patch -- i am not too sure what to name it

[05:51:47.0429] <jorendorff>
I was going to rename to "suspendable" but I found out there's an AgentCanSuspend bit in the spec that is actually unrelated to generators/async

[05:51:52.0040] <jorendorff>
ok

[05:52:13.0597] <yulia>
yeah... thats what i am worried about too

[05:52:22.0699] <yulia>
but generatorOrAsync is a bit long

[05:52:38.0890] <yulia>
there is also deferrable, pausable...

[05:52:53.0055] <yulia>
i can do the renaming once we verify that the approach is a good one as well

[06:52:59.0620] <nbp>
sfink: That would not work for `FillBits` which attempts to fill every bits to check whether they are correctly readable as it would be expected.

[06:53:29.0547] <nbp>
sfink: I tested the "shut-up ubsan" strategy at the moment and this seems to be working.

[06:54:34.0972] <nbp>
The alternative would to map the types used in the signature with `is_enum_v<Arg>` and replace the enumerated type by the equivalent integral type.

[06:55:12.0993] <nbp>
but this is the least of my preferred solutions, as this would no longer check the actual type given as arguments.

[06:56:14.0226] <nbp>
Identically, if one were to pass by value a structure composed of 2 enumerated values, the `is_enum_v` approach would not work, and we would have to specialize the mapping function.

[08:05:17.0660] <sfink>
bleh, yeah, too complicated. Shutting up ubsan sounds good to me.

[10:18:16.0121] <nbp>
denispal: does your last comment on Bug 1673249, is a way to say WONTFIX?

[10:18:19.0521] <botzilla>
https://bugzil.la/1673249 ‚Äî NEW (nobody) ‚Äî Page load consistently hits slow page warning bar

[10:18:26.0524] <nbp>
 * denispal: is your last comment on Bug 1673249, is a way to say WONTFIX?

[10:20:07.0492] <denispal>
nbp: I submitted a message to the company through their contact page.  Maybe needs to be moved to webcompat for follow up?  Unless there is a solution to lessen the race condition in SpiderMonkey

[10:24:07.0645] <denispal>
nbp: I actually can't seem to reproduce it anymore, maybe they fixed it.  It was almost 100% of the time

[10:24:50.0359] <nbp>
denispal: ok,feel free to close it as WFM ;)

[10:26:38.0631] <denispal>
nbp: sure

[11:04:56.0843] <yulia>
I seem to be developing a rather sore throat and my voice is getting weak, so if anyone was going to join in on compiler compiler tomorrow, it is cancelled this week

[11:40:36.0023] <DerekNonGeneric>
hope you get well soon

[11:41:38.0798] <DerekNonGeneric>
orange juice, soup, and sunshine

[12:08:46.0944] <mgaudet>
Feel better Yulia; I'm likely off sick tomorrow too. I've been working with a cough and am feeling particularly dumb. 

[12:08:58.0021] <mgaudet>
Speaking of which... Baseline v. Baseline Interpreter. 

[12:09:45.0405] <mgaudet>
I'm trying to reconstruct BaselineFrameReg after baseline executes the Resume'd function for a generator

[12:10:09.0283] <mgaudet>
I have a (slightly hacky) calculation that works for Baseline interpreter; but it turns out to be wildly wrong for baseline. 

[12:11:04.0793] <mgaudet>
It appears the machine stack has a bunch more stuff on it than I expected, at the point where I'm trying to do this

[12:13:11.0917] <mgaudet>
I guess the Question I have is... do we have any documentaiton about how Baseline vs Baseline interpreter are expected to manage the machine stack? 

[12:20:13.0097] <iain>
A baseline frame should be interchangeable with a baseline interpreter frame

[12:21:03.0441] <iain>
OSR is a matter of changing a few fields: https://searchfox.org/mozilla-central/source/js/src/jit/BaselineFrame.h#226

[12:21:33.0386] <iain>
I suspect that the problem you're hitting is somehow specific to resume

[12:22:45.0038] <mgaudet>
I agree; So -- and again, I'm having a very slow week apparently -- can we take a second to talk about a JitActivation; is that just a pointer to a region of the machine stack? 

[12:24:37.0407] <iain>
We keep a stack of JitActivation records, which can either be InterpreterActivation (running in C++ interpreter) or JitActivation (running in jit code)

[12:25:15.0226] <iain>
The names are a bit awkward post baseline interpreter

[12:25:43.0245] <iain>
Activations appear to track a fair bit of state

[12:25:50.0407] <iain>
I haven't spent much time looking at them

[12:26:35.0749] <mgaudet>
To be clear about what I'm trying (and failing) to do: In the Baseline Interpreter compiled version of `emit_Resume`, we push a frame descriptor [here](https://searchfox.org/mozilla-central/source/js/src/jit/BaselineCodeGen.cpp#6069). When we return [here](https://searchfox.org/mozilla-central/source/js/src/jit/BaselineCodeGen.cpp#6206), the stack pointer is pointing at the previously pushed frame descriptor. Using that frame descriptor, I'm able to reconstruct BaselineFrameReg. 

[12:27:23.0444] <mgaudet>
but, when we actually have the method baseline compiled, and we get to that label (`returnTarget`), the stack pointer is pointing at some Value, not the frame descriptor. 

[12:27:52.0840] <mgaudet>
which, using some logging+rr, is 0x160 bytes down the stack. 

[12:28:30.0060] <iain>
Where are you returning from?

[12:28:54.0800] <iain>
As in, what is happening immediately before you hit `returnTarget`?

[12:30:00.0806] <mgaudet>
It should be the invocation of the .next() function, which has a jit-script (there's an alternative path I have to consider if you resume in the C++ interpreter; but as near as I can tell, in that scenario I needn't worry about BaselineFrame getting clobbered) 

[12:33:09.0613] <mgaudet>
(more specifically, you'll have 'called' the region of code under the label genStart); but after that 'returns', you jump to the label.

[12:33:33.0827] <iain>
Are you calling addressOfStackValue to help reconstruct?

[12:34:14.0993] <iain>
Because it looks like the interpreter implementation of that function uses the stack pointer, while the baseline implementation uses BaselineFrameReg

[12:34:19.0713] <mgaudet>
So, I wasn't; though, I did check, and masm.framePushed() is zero there... so I think what I had should still have gotten the 'right' answer

[12:34:54.0776] <mgaudet>
could you explain what you mean (and what you're seeing)? It definitely sound relevant, but I don't follow

[12:36:27.0695] <iain>
We call `frame.addressOfStackValue` [here](https://searchfox.org/mozilla-central/source/js/src/jit/BaselineCodeGen.cpp#6207)

[12:37:17.0926] <mgaudet>
OH 

[12:37:26.0213] <mgaudet>
I didn't catch that as being specialized

[12:37:49.0485] <iain>
Depending on whether we're calling the blinterp or baseline instantiation of emit_Resume, that will end up either [here](https://searchfox.org/mozilla-central/source/js/src/jit/BaselineFrameInfo.h#379) or [here](https://searchfox.org/mozilla-central/source/js/src/jit/BaselineFrameInfo.h#323)

[12:37:49.0725] <mgaudet>
That'd definitely cause issues for me. 

[12:38:54.0757] <iain>
Yeah, given that the version that's broken is using the register you are trying to reconstruct, it raised some suspicions for me

[12:41:13.0410] <iain>
Does that explain what you're seeing?

[12:42:22.0048] <mgaudet>
It doesn't, because I wasn't using that helper; but it is helpful to know that they don't use the same register to get at the stack. 

[12:42:48.0355] <mgaudet>
it does however mean I'll probably have to specialize my solution to interp/compiler


2020-10-30
[01:37:52.0668] <jandem>
large ArrayBuffer/DataView/TypedArray support is starting to just work with local patch stack: https://paste.mozilla.org/pDcMueT8

[01:38:43.0681] <jandem>
the hard part will be making *everything* work well (including JITs) but it's a start

[01:44:30.0501] <annevk>
jandem: large being >4GiB? Seems neat

[01:45:16.0524] <jandem>
annevk: yeah on 64-bit (32-bit will keep 2 GB max, can't really do more of course..). Wasm folks want this

[01:45:59.0257] <jandem>
a lot of code is using uint32_t, I'm changing that to (a wrapper around) size_t

[01:47:24.0974] <annevk>
jandem: I was curious if the fact that ABs are detachable is still a bit of a pain

[01:47:53.0874] <Waldo>
It will never not be a pain.

[01:48:25.0857] <jandem>
yeah it is a pain, also makes JIT optimization of length/byteLength harder, but it's orthogonal to this work

[01:50:03.0960] <annevk>
Yeah fair, I was wondering about it in the context of https://github.com/tc39/proposal-resizablearraybuffer/issues/9 (yet more types of buffers). I guess the thing I don't really know is how often transferring happens in practice. It doesn't seem like that would be important for Wasm whereas I think the resizing ability is motivated by Wasm.

[01:50:47.0436] <Waldo>
The frequency or rarity of transferring has some relevance to performance figures.  It has almost no relevance to complexity and potential for serious error.

[02:11:46.0530] <annevk>
The thing is more that if transferring isn't that important, we would not have to detach, right?

[02:12:05.0780] <annevk>
Other spec thing, anyone here have thoughts on https://github.com/heycam/webidl/issues/933?

[02:17:05.0228] <yulia>
Waldo was doing our streams implementation. From reading the issue I had the same reaction as you, that if we return a promise the whole thing should be treated as a promise.. From the perspective of a JS developer, something like this would be useful and I don't see any issue with it.

[02:19:18.0359] <yulia>
Regarding the detachable array buffers: I don't have much experience in that area but from speaking to Luke, the new proposal for resizable array buffers is pretty much in line with the existing behavior that array buffers have, and that we've already paid the price for it. If this was extended to shared array buffers we would have had a problem for it -- the `ResizableArrayBuffers` wouldn't be used by wasm, only `GrowableSharedArrayBuffers` and those don't have transfer semantics

[02:24:40.0536] <annevk>
yulia: that doesn't seem to match the discussion in https://github.com/tc39/proposal-resizablearraybuffer/issues/5

[02:25:04.0164] <annevk>
It seems fine if that's the outcome, though I wonder why we'd invest in ResizableArrayBuffer then.

[02:27:35.0146] <yulia>
I see -- I _think_ the idea is that resizeableArrayBuffer is basically a counterpart to ArrayBuffer and would interact with wasm in the same way as ArrayBuffer, and what shu says there about throwing on shrinking is more or less what I expected. 

[02:29:03.0162] <yulia>
But, at the same time -- I am not an expert on this, its the first proposal that I look at involving SABs and ABs -- I think jorendorff and jandem might have more nuanced opinions from our team

[02:30:40.0139] <yulia>
from this part in the explainer I expected that wasm would primarily work with growable array buffers: https://github.com/tc39/proposal-resizablearraybuffer#sync-up-capability-with-webassembly-memorygrow

[02:32:00.0789] <yulia>
But I can see how you can use Resizable now, interesting

[02:33:53.0608] <annevk>
I guess it's also worth checking with Jeff Gilbert/kvark if WebGPU wants to use these as advertised in the explainer and what properties they are looking for.

[02:34:47.0460] <yulia>
That's a good idea -- should I do that or will you ping them?

[02:35:18.0947] <annevk>
yulia: please go for it :-)

[03:07:39.0573] <Yoric>
When an Error is launched, is there a way to determine whether this error was launched by SpiderMonkey vs. by the DOM?

[03:08:36.0044] <Yoric>
I have a much-delayed patch that makes any `TypeError` (even one that is caught) fail our test suites, but it seems that we have DOM functions throwing `TypeError` for things that are most definitely not type errors.

[03:08:43.0143] <Yoric>
(e.g. "Cannot fetch resource")

[03:09:14.0492] <Yoric>
Filtering by origin looks like the only way to save my patch.

[03:13:21.0119] <jandem>
yeah [a lot](https://searchfox.org/mozilla-central/search?q=JSEXN_TYPEERR%2C&path=&case=false&regexp=false) of things can throw TypeErrors

[03:29:22.0114] <annevk>
Yoric: they should be indistinguishable...

[03:29:56.0770] <Yoric>
That's what I'm afraid of.

[03:31:06.0028] <annevk>
(And the reason APIs use TypeError is mostly because it's the catch-all error for something went wrong and there's not a lot of interest in branching on exception types within the JavaScript ecosystem. And for some APIs giving detailed exceptions isn't great for security.)

[03:54:26.0708] <Yoric>
annevk: I would argue that `TypeError` is a really bad catch-all error, but that ship has sailed a loooooong time ago :)

[03:55:26.0249] <annevk>
It's not the worst name... (I know that's not a great look.)

[03:55:49.0947] <Yoric>
Well, I now have two possibilities:
1. introduce a new manner of throwing `TypeError` that lets SpiderMonkey APIs determine why we threw it and pick a behavior accordingly; or
2. weaken my patch so that it only works with `SyntaxError`.

[03:55:59.0700] <Yoric>
Given that today is my last day at Mozilla, I guess I'll pick option 2.

[03:57:07.0578] <annevk>
Sorry to hear that, all the best!

[03:58:39.0072] <yulia>
ugh dumb question (i always forget how to read our release schedule) next release is 84 is that right?

[03:58:57.0687] <Yoric>
Would someone be available for a quick review?

[03:59:05.0470] <yulia>
as in, stuff that gets merged in now will be released in 84

[04:00:49.0556] <Yoric>
yulia: jandem Would either of you be up for reviewing this (two-liner) patch quickly?

[04:01:49.0335] <yulia>
I can take a look but im not familiar with the issue

[04:05:44.0516] <Yoric>
Thanks.

[04:11:29.0665] <Yoric>
yulia: If you need any context, I'm available for a few more hours :)

[04:11:42.0155] <yulia>
ok, ill ping in dms

[04:14:22.0001] <jandem>
yes this is the 84 cycle

[04:39:59.0121] <kvark>
> <@annevk:mozilla.org> I guess it's also worth checking with Jeff Gilbert/kvark if WebGPU wants to use these as advertised in the explainer and what properties they are looking for.

Reading up on this, I don't yet see how "resizeable" ability helps us. We want to be able to re-point array buffers (although that's not a hard requirement for us) , but we don't need resizing.

[04:40:56.0543] <kvark>
We need to repoint it to a different *external* storage, so "resize + overwrite" doesn't seem right

[04:41:40.0198] <annevk>
kvark: could you file an issue against https://github.com/tc39/proposal-resizablearraybuffer?

[04:45:41.0697] <kvark>
will do!

[04:47:37.0396] <nbp>
confession: Bug 1661256 is fully landed now! You won't be able to add JIT to C++ function calls which could miss-interpret the arguments without getting a hard failure now (assuming the test case is actually executed in CI)

[04:47:40.0203] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[04:47:41.0433] <botzilla>
https://bugzil.la/1661256 ‚Äî RESOLVED (nbp) ‚Äî Create a jsapi-test test case to collect all CallWithABI signatures.

[07:48:04.0659] <nbp>
jandem: The JIT ABI tests should now be part of the tree, as part of the jsapi-tests, how do we proceed to get this executed on the hardware?

[07:56:42.0026] <jandem>
nbp: nice, I'll try to run it. I didn't use that machine recently, hopefully the build environment isn't too old..

[07:57:02.0194] <nbp>
Thanks! üëçÔ∏è 

[08:21:21.0851] <jandem>
nbp: it works üéâ https://paste.mozilla.org/X855OebL

[08:33:59.0143] <iain>
yulia: Have you seen http://whattrainisitnow.com/ ? That's my go-to for figuring out releases.

[09:14:28.0865] <nbp>
arewetrainedyet.com ?

[09:20:03.0678] <mconley>
nbp: ping

[09:20:17.0289] <nbp>
mconley: pong

[09:20:57.0564] <mconley>
Hi! Suppose I have two profiles. One has the about:home startup cache enabled. The other does not. Suppose that I'm profiling at the point where the cache has already been consumed, so we're not trying to pull from it - we're loading the about:home document scripts from omni.ja like we always would

[09:21:32.0239] <mconley>
now suppose that the subscript loader is taking roughly _twice_ the amount of time to load the about:home scripts when the cache is enabled (despite it not being used for this page load)

[09:21:39.0104] <mconley>
What could account for this?

[09:21:50.0816] <mconley>
Here's a profile with the cache disabled: https://share.firefox.dev/37Z58iu

[09:22:08.0225] <mconley>
And here it is with the cache enabled: https://share.firefox.dev/34HKr8T

[09:22:16.0030] <mconley>
note the SubScript marker durations in the Marker Chart in both

[09:22:44.0523] <nbp>
The subscript loader, is the ScriptLoader from the document, or is this something else?

[09:23:12.0980] <mconley>
It'll be this, I believe: https://searchfox.org/mozilla-central/rev/d866b96d74ec2a63f09ee418f048d23f4fd379a2/browser/actors/AboutNewTabChild.jsm#81

[09:24:58.0032] <nbp>
I admit that I am not familliar with the subscript loader yet, I will look if I can see it branching to something which rings a bell. tcampbell might have some insight that I do not have yet.

[09:26:26.0661] <mconley>
I wonder if we're somehow skipping the ScriptPreloader

[09:27:14.0619] <mconley>
y'know what, I'll bet that's it

[09:28:00.0062] <nbp>
mconley: One thing I note is that the subscript loader attempts to load the from the startup cache. https://searchfox.org/mozilla-central/source/js/xpconnect/loader/mozJSSubScriptLoader.cpp#469

[09:28:11.0149] <nbp>
I wonder if we load or ignore the startup cache here.

[09:28:41.0042] <mconley>
I'll bet that's exactly what's happening

[09:29:47.0234] <mconley>
nbp: Where's the best place to add a profiler marker to confirm if we're skipping the cache?

[09:30:27.0394] <nbp>
Maybe in ReadCachedScript: https://searchfox.org/mozilla-central/source/js/xpconnect/loader/mozJSLoaderUtils.cpp#21

[09:31:24.0881] <nbp>
/me notices that he actually seen this code before‚Ä¶

[09:31:36.0394] <nbp>
/me  * notices that he actually saw this code before‚Ä¶

[09:32:19.0725] <mconley>
I'll bet you what's going on is that those script resources, because they're being loaded via <script> tags in the initial about:home load from the about:home startup cache, aren't getting written to the older script cache

[09:32:37.0562] <mconley>
so subsequent loads of about:home skip the older script cache

[09:32:44.0900] <mconley>
so we incur the cost of parsing each time

[09:33:29.0386] <nbp>
hum ‚Ä¶ this function is called before, and I presume it might short-circuit the one which is reading bytes: https://searchfox.org/mozilla-central/source/js/xpconnect/loader/ScriptPreloader.cpp#867

[09:36:45.0706] <tcampbell>
nbp: mconley I believe when the startupcache is disabled (rather then enabled-but-not-yet-generated), that we use lazy-parsing, whereas with startupcache we force non-lazy parsing

[09:36:54.0733] <nbp>
> <@mconley:mozilla.org> I'll bet you what's going on is that those script resources, because they're being loaded via <script> tags in the initial about:home load from the about:home startup cache, aren't getting written to the older script cache

This is plausible, knowing that the StartupCache is a one shot snapshot of what is being requested when we start Firefox.

[09:37:21.0841] <tcampbell>
(Stencil aims to fix this all though over next few months)

[09:40:25.0382] <nbp>
tcampbell: We have both `ScriptPreloader` and a `StartupCache`, I presume the first one is made for caching non-startup script such as non-JSM files, whereas the second one captures a set of JSM files used for starting Firefox?

[09:41:13.0885] <tcampbell>
Preloader is used for parent+content during early startup. StartupCache is available only in parent but can be read/write at any time

[09:42:41.0219] <nbp>
where are scripts registered in the `ScriptPreloader`?

[09:44:33.0623] <tcampbell>
nbp: ScriptPreloader::NoteScript

[09:44:34.0744] <tcampbell>
 * nbp: `ScriptPreloader::NoteScript`

[09:45:36.0803] <tcampbell>
There is an "isActive" check inside it which determines if _writes_ will still be accepted. Even if the preloader is no longer active, we me still be able to fetch from it.

[09:46:19.0968] <nbp>
ok, got it: https://searchfox.org/mozilla-central/source/js/xpconnect/loader/mozJSSubScriptLoader.cpp#209

[09:52:34.0548] <nbp>
mconley: ^ does that answer your questions?

[09:53:17.0144] <nbp>
mconley: That does not answer why it takes twice the time, but if you enable C++ stack, you should see whether it is decoding or parsing.

[09:55:14.0569] <mconley>
Thanks!

[09:58:03.0870] <tcampbell>
mconley: In the profile (for startupcache disabled), is there a lot of time in frames that have the word `SyntaxParseHandler`?

[10:02:38.0629] <Yoric>
Goodbye everyone!

[10:03:07.0874] <jesup>
Good working with you over all these years!

[10:04:03.0534] <mconley>
Yoric: thank you for your work!

[10:04:30.0418] <mconley>
tcampbell: I'm afraid I can only reproduce the regression if sampling is disabled. :/

[10:04:54.0184] <tcampbell>
hah

[10:04:55.0753] <mconley>
so I'm using markers to figure out what's going on here

[10:05:31.0255] <nbp>
Yoric: You cannot leave, I bet someone has a shutdown-kill bug somewhere to be closed!

[10:05:47.0619] <nbp>
 * Yoric: You cannot leave, I bet someone has a shutdown-kill bug somewhere to be <del>closed</del> fixed!

[10:05:48.0955] <Yoric>
nooooooooo

[10:19:23.0535] <mconley>
Okay, I've confirmed it - we're skipping the ScriptPreloader when the about:home startup cache is enabled

[10:20:12.0900] <mconley>
I seem to recall that we only note scripts for the ScriptPreloader with they're loaded using the subscript loader... when we use the about:home startup cache, the scripts are loaded using `<script>` tags

[10:20:24.0355] <mconley>
is there a reason why chrome:// scripts loaded via `<script>` tags can't be noted by the ScriptPreloader?

[10:20:41.0730] <mconley>
 * is there a reason why chrome:// scripts loaded via `<script>` tags in the privileged about content process can't be noted by the ScriptPreloader?

[10:25:47.0735] <mconley>
tcampbell: ^-- ?

[10:27:05.0230] <tcampbell>
mconley: up for a call on this today?

[10:27:13.0439] <mconley>
Yeah for sure - do you have time now?

[10:27:18.0488] <tcampbell>
yep

[10:27:18.0523] <mconley>
(I have a meeting at 2, but can meet up until then)

[10:27:25.0603] <tcampbell>
give me 2 min

[10:27:32.0317] <mconley>
Sure thing

[10:29:06.0593] <mconley>
tcampbell: https://mozilla.zoom.us/my/mconley when you're ready

[12:06:16.0612] <jorendorff>
mconca: sdetar: Waldo: ok, so, regarding shipping WritableStream

[12:06:42.0758] <jorendorff>
to recap: whether `WritableStream`, `.pipeTo`, `TransformStream`, and `.pipeThrough` are separately shippable is up to the web, not up to us

[12:07:08.0386] <jorendorff>
that is, it depends on how fine-grained web developers' feature testing, on already-existing web content, is

[12:07:41.0067] <jorendorff>
I asked Waldo to join us and sanity-check our plan

[12:07:57.0216] <sdetar>
Also jorendorff  you had made this distinction to me earlier:  

[12:07:57.0993] <sdetar>
.pipeTo is designed for piping a ReadableStream to a WritableStream
.pipeThrough is designed for piping a ReadableStream through a TransformStream

[12:08:29.0512] <jorendorff>
Right, so I speculate that (WritableStream + pipeTo) is more likely shippable than WritableStream alone.

[12:08:51.0979] <jorendorff>
Waldo: We won't know until we try, but do you have a hunch either way?

[12:08:55.0482] <Waldo>
This has been my speculation as well.

[12:09:02.0284] <jorendorff>
OK, cool.

[12:09:12.0606] <Waldo>
And also that `WritableStream` on its own...doesn't really do anything.

[12:09:42.0851] <Waldo>
Like, you can take it and pass in your own user-defined sinks, but that's really it, and is there that much of a point in doing so?  Doesn't seem like it.

[12:09:56.0252] <jorendorff>
Waldo: Do you know what Web APIs are the providers/consumers of writable streams?

[12:10:15.0185] <jorendorff>
With readable streams, the big one was `fetch` (response bodies)

[12:10:25.0209] <Waldo>
jorendorff: There aren't any, last I checked.

[12:10:53.0428] <Waldo>
Granted, some may have arisen since then, but I haven't heard of them in passing.

[12:11:45.0469] <jorendorff>
Waldo: oh, OK, so as far as we know there's not a big compat risk if we ship `WritableStream` + `.pipeTo` but _not_ some particular DOM feature commonly used in conjunction

[12:12:01.0698] <Waldo>
jorendorff: Yes.

[12:12:40.0267] <Waldo>
Any DOM feature used in conjunction would be on the readable side, and I don't see why one readable would play any differently with `.pipeTo` than any other, if we implemented correctly.

[12:13:24.0304] <sdetar>
What is the current state of .pipeTo?  Is this now implemented?

[12:14:05.0643] <Waldo>
Bogged down in bug 1660555 right now.

[12:14:07.0191] <botzilla>
https://bugzil.la/1660555 ‚Äî ASSIGNED (Waldo) ‚Äî AbortSignal needs to keep strong references to its followers

[12:14:30.0777] <Waldo>
With a memory leak in the final patching for that bug, that doesn't appear on any Linux jobs, that only appears with "run this entire chunk of wpt".

[12:15:14.0517] <Waldo>
Then there's still patching atop that in bug 1502355 to add aborting support.  Off the top of my head, I don't remember what more needs to be done beyond that, for `.pipeTo` to be essentially complete.

[12:15:18.0834] <botzilla>
https://bugzil.la/1502355 ‚Äî REOPENED (Waldo) ‚Äî Implement ReadableStream.prototype.pipeTo and pipeThrough

[12:17:08.0589] <jorendorff>
Waldo: is that bug's summary correct, or should it just say "pipeTo"?

[12:17:37.0223] <Waldo>
jorendorff: It is not incorrect, but `.pipeThrough` probably could be a separate bug at this point.

[12:19:24.0326] <jorendorff>
Waldo: (still confused) Do the existing patches in the bug define a `.pipeThrough` method on `ReadableStream.prototype`?

[12:20:13.0485] <jorendorff>
epic stack, btw

[12:20:32.0186] <Waldo>
jorendorff: No.  The bug was just filed as lumping them together initially, and while `.pipeThrough` depends on the spec-internal method `ReadableStreamPipeTo` that is necessary for `.pipeTo`, they could be separated.

[12:20:55.0723] <Waldo>
If the patches pile up enough it could be split off, but that's just about convenience/readability/custom.

[12:21:37.0104] <jorendorff>
Waldo: To me, it seems like we should separate them, just because we are doubtful about being able to ship `.pipeThrough` without `TransformStream` (even though technically either one could exist without the other)

[12:22:04.0108] <jorendorff>
"If"! haha how many patches makes a "pile"

[12:22:06.0828] <jorendorff>
 * "If"! haha how many patches makes a "pile"?

[12:22:09.0408] <Waldo>
jorendorff: If there had been reason to act, I'd probably have split them already for administrative convenience.

[12:25:40.0139] <jorendorff>
Waldo: all right, so I think the conclusion here is: for now the only option we have would be to ship `WritableStream` alone, and we think that is low value and might even bounce due to web compat issues

[12:25:51.0085] <Waldo>
Yes.

[12:26:49.0123] <jorendorff>
so we will wait for `pipeTo`. now, we _do_ want to try to ship WritableStream + pipeTo

[12:27:28.0345] <jorendorff>
...when that becomes possible. so the user-visible `pipeThrough` will go behind a separate RealmOption or whatever.

[12:28:46.0950] <jorendorff>
Waldo: just noticed that if you search for "test" you hit By**teSt**ream. how very vexing

[12:30:30.0946] <jorendorff>
Waldo: I was searching in the bug for patches to do with the tests. do the web-platform-tests have a feature flag for pipeTo? is testing part of the existing stack in there?

[12:30:58.0092] <jorendorff>
while i've got you i'm just going to shamelessly ask every dumb question ever

[12:31:21.0550] <Waldo>
jorendorff: wpt has some tests for it.  I don't remember if they're behind a feature flag.  I think we just turn them off/add expected failures for them in the `.ini` for the relevant tests.

[12:39:10.0856] <sdetar>
Waldo: jorendorff I will send the conclusion of this discussion to Mike in email and cc both of you.

[12:39:28.0814] <jorendorff>
ok! makes sense.

[12:39:37.0627] <Waldo>
Note we can condition the running/expectations of a test on a pref being set, and so we do run all the `WritableStream` tests right now.  And the only ones that we fail, are the ones that further use `.pipeTo`, if memory serves.

[12:39:58.0326] <Waldo>
We can do basically the same thing to the tests that depend on `.pipeTo` when the time comes.

[12:40:54.0396] <jorendorff>
Waldo: ok, cool. last thing, you mentioned it's currently "bogged down" in a memory leak investigation. want help? anything else we can do?

[12:42:10.0999] <mgaudet>
if I have frame layout questions, who would be best to turn to? iain ? 

[12:42:16.0845] <Waldo>
jorendorff: I'm doing a few things to see if I can clear out some low-hanging explanations -- our `AbortSignal` holds onto all its followers (= the algorithms that run when an abort is signaled) in excess of how long the spec says, we should clear them when the spec says, for one.

[12:42:35.0961] <Waldo>
jorendorff: I've also landed a bunch of the non-functionality-modifying bits, that were more cosmetic.

[12:42:36.0370] <jorendorff>
oh, cool

[12:44:02.0358] <Waldo>
jorendorff: I should be just short of having the 5-6 patches that "finish" the bug, in a sensible ordering.  Everything was posted and reviewed already, then I found this last problem and have been finagling to try to get all the uninteresting parts landed, so that the interesting stuff is short and I can point someone at them to look and maybe brainstorm something.

[12:45:21.0404] <Waldo>
In principle everything but the final patch has always been landable without regression.  But I am a little concerned that too much rearranging of chairs might create some unrecognized problem, that isn't merely this memory leak, so I've nevertheless hesitated to land what "seems" landable.

[12:46:00.0322] <Waldo>
I've spent more time than I cared for in `hg histedit` and then manually changing parent-child rev relationships on phabricator.

[12:54:07.0388] <iain>
mgaudet: I can give it a shot.

[12:55:22.0399] <iain>
Zoom?

[12:55:36.0619] <mgaudet>
Uhm. Sure. 

[14:07:09.0055] <tcampbell>
jorendorff: aha! I found the existing tests you were talking about https://searchfox.org/mozilla-central/source/js/src/jit-test/lib/assert-offset-columns.js

[14:08:10.0844] <jorendorff>
üëçÔ∏è

[14:08:23.0260] <tcampbell>
(sorry, that wasn't important at all..)

[14:42:52.0258] <Waldo>
jorendorff: Landed another three patches from bug 1660555, landed one from bug 1502355, filed bug 1674495 to resolve a pre-existing "leak" hazard.  With those first four patches landed, I think the remainder of the queue is in shape for posting in fashion that won't leave everyone totally confused looking at it, at least.

[14:42:54.0234] <botzilla>
https://bugzil.la/1660555 ‚Äî ASSIGNED (Waldo) ‚Äî AbortSignal needs to keep strong references to its followers

[14:42:54.0992] <botzilla>
https://bugzil.la/1502355 ‚Äî REOPENED (Waldo) ‚Äî Implement ReadableStream.prototype.pipeTo and pipeThrough

[14:42:55.0608] <botzilla>
https://bugzil.la/1674495 ‚Äî ASSIGNED (Waldo) ‚Äî Signaling abort on an AbortSignal should immediately clear out the follower list

[14:44:00.0423] <Waldo>
...but til the landings resolve it seems tempting fate to post that remainder.

[14:44:16.0076] <jorendorff>
ok. thanks!


2020-10-31
[01:22:58.0460] <redfire>
i've been trying to compile the source package for spidermonkey for quite a while now and i'm getting super tired

[01:23:10.0071] <redfire>
i've installed rsync and autoconf which it needed

[01:23:54.0542] <redfire>
but now, i'm getting this error:
```INFO: Staging source tarball in \tmp\mozjs-src-pkg\mozjs-78.4.0...         WARNING: dist tree \tmp\mozjs-src-pkg\mozjs-78.4.0 already exists!
ssh: Could not resolve hostname c: no address associated with name
rsync: read error: Connection reset by peer (104)
rsync error: error in rsync protocol data stream (code 12) at /usr/src/rsync/rsync-3.0.8/io.c(760) [Receiver=3.0.8]```

[01:24:04.0937] <redfire>
 * but now, i'm getting this error:
```
INFO:
ssh: Could not resolve hostname c: no address associated with name
rsync: read error: Connection reset by peer (104)
rsync error: error in rsync protocol data stream (code 12) at /usr/src/rsync/rsync-3.0.8/io.c(760) [Receiver=3.0.8]```
```

[01:24:12.0081] <redfire>
 * but now, i'm getting this error:
```
INFO:
ssh: Could not resolve hostname c: no address associated with name
rsync: read error: Connection reset by peer (104)
rsync error: error in rsync protocol data stream (code 12) at /usr/src/rsync/rsync-3.0.8/io.c(760) [Receiver=3.0.8]
```

[01:24:28.0524] <redfire>
 * but now, i'm getting this error:
```
INFO: Staging source tarball in \tmp\mozjs-src-pkg\mozjs-78.4.0...         WARNING: dist tree \tmp\mozjs-src-pkg\mozjs-78.4.0 already exists!
ssh: Could not resolve hostname c: no address associated with name
rsync: read error: Connection reset by peer (104)
rsync error: error in rsync protocol data stream (code 12) at /usr/src/rsync/rsync-3.0.8/io.c(760) [Receiver=3.0.8]
```

[01:24:43.0858] <redfire>
 * but now, i'm getting this error:
```
INFO: Staging source tarball in \tmp\mozjs-src-pkg\mozjs-78.4.0...
WARNING: dist tree \tmp\mozjs-src-pkg\mozjs-78.4.0 already exists!
ssh: Could not resolve hostname c: no address associated with name
rsync: read error: Connection reset by peer (104)
rsync error: error in rsync protocol data stream (code 12) at /usr/src/rsync/rsync-3.0.8/io.c(760) [Receiver=3.0.8]
```

[04:14:52.0962] <evilpie>
why would you need rsnyc?

[07:15:14.0688] <sfink>
it's used for copying selected files to a staging area for constructing the tarball, mostly because it has powerful patterns for selecting stuff.

[07:16:09.0353] <sfink>
redfire: that packaging is only ever run on linux. It looks like you're running it on Windows, and it's interpreting a C:\... path as being the hostname 'C'.

[07:16:18.0211] <sfink>
why do you need to create the package yourself?

[07:16:37.0904] <sfink>
normally, you would take an existing package and unpack and build it locally

[07:16:43.0336] <sfink>
*that* should actually work on Windows

[07:17:03.0019] <sfink>
I recommend grabbing a recent one from our continuous integration system

[07:17:13.0372] <sfink>
let me find a url for esr78...

[07:17:43.0310] <sfink>
https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/NeatUP3NQlSufYkJqasn1w/runs/0/artifacts/public/build/mozjs-78.5.0.tar.bz2

[10:48:21.0179] <Caspy7>
this beta fenix user reports that when they try to upload a large file to "Synology" that it locks their phone

[10:49:22.0917] <Caspy7>
It reminded me of some sort of JS related error I saw mentioned in a comment on a bug recently, someone speculating that it may be why mega would blow up memory and browser perf

[10:49:45.0761] <Caspy7>
"js error" meaning a bug or something

[10:50:11.0310] <Caspy7>
 * this beta fenix user reports that when they try to upload a large file to "Synology" that it locks their phone
https://www.reddit.com/r/firefox/comments/jlffed/phone_locks_when_trying_to_upload_large_file/

[10:50:35.0519] <Caspy7>
sorry for the fuzzy, but I don't remember which bug it was but thought it could be of interest

