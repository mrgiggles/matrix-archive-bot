2020-07-01
[17:46:14.0992] <zbraniecki>
oh, well, would that be the right direction - https://github.com/unicode-org/icu4x/pull/141

[17:46:25.0261] <zbraniecki>
and if so, would we consider using ICU for now?

[17:47:22.0021] <zbraniecki>
there's definitely `to_string()` on float and there's `parse()` for String to float.

[17:47:26.0567] <zbraniecki>
in stdlib

[17:48:42.0433] <Waldo>
Well, `dtoa` the function in `dtoa.c` handles to{Fixed,Precision,Exponential} as well as just plain to-normal-string.  I don't know if all those modes of operation are used or exposed in Rust somehow.

[17:49:06.0574] <Waldo>
Also the semantics of Rust forms of those actions may well not exactly match JS semantics.

[17:50:04.0155] <zbraniecki>
right

[17:50:12.0943] <zbraniecki>
I think they conform to some IEEE mode but not sure

[17:50:52.0517] <Waldo>
I'm not sure that IEEE-754, or at least not the original edition, specifies string conversions.  Maybe the 2008 rev does.

[17:51:25.0632] <Waldo>
IEEE-754-1985 does not contain any string handling.

[17:52:15.0613] <Waldo>
Not sure about IEEE-754-2008, and I see now there's _also_ an IEEE-754-2019 about which I know literally nothing except that it exists, now...

[17:54:45.0864] <Waldo>
https://en.wikipedia.org/wiki/IEEE_754-2008_revision suggests no string conversion operations have been standardized.

[18:11:34.0852] <zbraniecki>
it'd be good to see if a) ICU is compatible with our needs, b) what does Chromium use, c) if Rust can match our needs

[06:56:40.0102] <ampdot>
sfink: hey, we were investigating GC causes, specifically ArrayBuffer allocation on old space, did you get a chance to look at my profile?

[07:04:30.0033] <padenot>
I was told by the Firefox Profiler people that GC people wanted to have custom visualization of profiler markers at some point, maybe to better understand jitter of periodic GC, or duration of incremental GC slices or something (I don't remember). https://blog.paul.cx/post/profiling-firefox-real-time-media-workloads/#the-solution-to-the-new-problem shows a way to do this, it turns out it's not hard to do, and my code can probably be hacked up in a few minutes

[07:11:51.0577] <tcampbell>
Ah, that is a really nice way to have a custom visualization

[07:14:01.0664] <padenot>
happy to chat. doing a little web extension was about 10 times less complicated than I thought it would be, overall, really cool

[08:02:13.0574] <tcampbell>
mccr8: can you CC me on https://bugzilla.mozilla.org/show_bug.cgi?id=1649765

[08:02:36.0509] <mccr8>
tcampbell: done

[08:02:42.0746] <tcampbell>
ty!

[08:48:32.0090] <@allstarschh|afk>
sfink: meeting?

[08:49:39.0725] <sfink>
yes, sorry, was in another mtg

[09:07:19.0542] <froydnj>
sfink: is there a reason we're not using sccache on all the spidermonkey builds?

[09:21:38.0039] <emilio>
tcampbell: sorry, had to go the other day...

[09:22:06.0911] <sfink>
jonco: @allstarschh|afk: https://share.firefox.dev/2NRUfnD is the profile I was talking about

[09:22:11.0049] <emilio>
tcampbell: my ping was mostly a question, which is... Do we do any sharing of parsed script and such across documents?

[09:23:39.0881] <sfink>
froydnj: there's a reason for everything. Whether it's a *good* reason or not, is the question...

[09:24:04.0862] <sfink>
I have a dim memory of running into some kind of issue with that, but I can't imagine what it could be.

[09:24:06.0023] <froydnj>
sfink: spoken like a person who has dealt with many reasons for many things

[09:24:09.0394] <sfink>
how do I enable sccache?

[09:24:54.0283] <sfink>
I should also note that now that we are largely moving over to building spidermonkey via mach, I plan to move over autospider.py to use mach as well, which should simplify a lot of things and perhaps make this sort of thing easier to do.

[09:25:44.0345] <froydnj>
sfink: step 1: make the task definitions depend on `linux64-sccache` or whatever, and then `--with-ccache=/path/to/sccache` as a configure arg

[09:26:22.0663] <sfink>
ampdot: I've been looking at your profile. What I'm seeing so far is that while you are getting major GCs, *most* of them are pretty short and so hopefully wouldn't cause any problems.

[09:26:29.0890] <froydnj>
there's some fancy stuff that gets done wrt to starting the sccache server; I'm not sure offhand if the SM jobs need to care about that

[09:27:02.0048] <sfink>
ampdot: but some of them are being given way too much time to run, so I'll be looking into that.

[09:27:18.0348] <sfink>
froydnj: well, that sounds easy enough to try, anyway. I'll do a push and see what happens.

[09:28:32.0070] <sfink>
ampdot: but there's something else I wanted you to try. I tried out the devtools memory tool on the old version of your game that you sent me (was that arras.io?), and it was very interesting.

[09:28:55.0042] <sfink>
specifically, it showed a bunch of ArrayBuffer allocations coming from the JS code

[09:29:10.0415] <sfink>
I wanted to see what you would get with your current code

[09:29:21.0482] <froydnj>
sfink: oh, bother, there's also bucket configuration in https://searchfox.org/mozilla-central/source/build/mozconfig.cache

[09:30:03.0418] <froydnj>
sfink: oh, and you do need something like https://searchfox.org/mozilla-central/source/client.mk#76-87 , which SM jobs might automagically get if you set the right variables

[09:30:29.0098] <sfink>
open up the memory tool, grab a snapshot (not sure if this part is necessary), play the game long enough to warm up your pools, then select the "Record call stacks" checkbox, run a little longer, and grab another snapshot.

[09:30:54.0412] <sfink>
that snapshot should have stacks for the memory that was allocated since you checked the box and you took the snapshot.

[09:32:06.0780] <sfink>
froydnj: I seem to remember getting partway down this road before and then getting lost and wandering off to do something else.

[09:32:20.0718] <sfink>
but let's see if I can follow along this time....

[09:41:50.0302] <sfink>
it looks like if you have a bucket set, you'll get the `MOZBUILD_MANAGE_SCCACHE_DAEMON` thing. Though I don't know whether our build will go through the right make target for that to work.

[09:42:03.0892] <sfink>
haven't figured out how to set the bucket yet

[09:43:15.0491] <sfink>
(but doing a push anyway in hopes that something magical will happen)

[09:44:25.0486] <sfink>
hm... why do a handful of spidermonkey jobs override the `fetches.toolchain` values?

[09:45:28.0185] <sfink>
seems to be for cbindgen in most cases, binutils for SM(tsan)

[09:45:57.0896] <sfink>
suckage. I don't suppose there's a way to append instead of override?

[09:46:28.0494] <froydnj>
not so far as I know

[09:54:20.0840] <sfink>
first attempt fall down go boom: can't find `/builds/worker/fetches/sccache/sccache`

[09:54:57.0503] <sfink>
oh. That's SM(tsan). Expected, for now.

[09:57:08.0295] <sfink>
froydnj: it's running without error at https://clwra5aaaaaxgdlpwthk3enfkoso4obazba52ws3sdsktuef.taskcluster-worker.net:32780/log/ZYjmyRmlRiGyPj8gTCN81A but I don't know how to tell whether it's actually working

[09:57:33.0265] <sfink>
(as in, the compile lines are correctly prefixed with a call to sccache, and the compile doesn't error out as a ersult)

[09:57:45.0494] <sfink>
 * (as in, the compile lines are correctly prefixed with a call to sccache, and the compile doesn't error out as a result)

[09:58:35.0367] <froydnj>
sfink: I think the crude way to tell that it's working is a) the jobs succeed and b) retriggers should take less time due to things being cached

[09:58:59.0254] <froydnj>
the extra mile would be making sure the jobs output all the sccache stats that get fed into perfherder and whatnot, but one step at a time

[09:59:01.0452] <sfink>
and that'll work for try jobs too?

[09:59:15.0906] <froydnj>
it ought to

[10:00:13.0112] <sfink>
do I only need to wait until the build part of the job is complete before retriggering?

[10:00:42.0147] <froydnj>
sfink: do you know what https://searchfox.org/mozilla-central/source/browser/config/tooltool-manifests/linux64/jsshell.manifest is pulling in?  (i.e. what is in that tar.xz)

[10:01:04.0874] <froydnj>
once the build has completed, you should be able to retrigger and get cached results from compilations, yes

[10:01:53.0580] <sfink>
froydnj: yes, I do. Are you sure you want to know?

[10:02:07.0774] <froydnj>
sfink: spoken like someone who has seen true horrors

[10:02:21.0300] <sfink>
perpetrated true horrors, more like

[10:02:37.0656] <froydnj>
/me sees sfink's name in blame

[10:03:03.0971] <sfink>
so it's an archive of a manually-built breakpad interceptor library that can be loaded with either dlopen() or LD_PRELOAD

[10:03:05.0553] <froydnj>
oh no, dll injection?

[10:03:09.0142] <sfink>
actually, it's the Windows equivalent

[10:03:09.0689] <sfink>
yes

[10:03:14.0683] <froydnj>
eeeeeee

[10:03:43.0088] <sfink>
I hacked up a copy of breakpad that does it by using libtool or something

[10:04:15.0484] <sfink>
ted very much did not like `libtoolize` and suggested I just set the compile flags manually

[10:04:21.0480] <sfink>
and I never bothered circling back to doing that

[10:04:50.0093] <sfink>
I've been hoping that whatever that latest rewrite of breakpad stuff is, it'll give me what I want

[10:08:50.0629] <sfink>
 * I hacked up a copy of breakpad that does it by using `libtoolize`

[10:11:10.0557] <sfink>
ok, will have to come back to check on this. Gotta go for a little bit.

[11:06:46.0428] <sfink>
doesn't look like it's working. 8:02 -> 8:10. I must be missing some bucket magic or something.

[11:15:04.0090] <froydnj>
if you are using some of the gecko magic above, you might be able to have an sccache.log in `MOZ_UPLOAD_DIR` or some stats printed out at the end of the job that would tell you whether you're actually hitting in the cache or not

[11:29:05.0244] <sfink>
I think that stuff only happens if you run through `client.mk`. I'm guessing that doesn't happen for a `configure; make` build?

[11:31:23.0140] <froydnj>
the ways of the makefiles are twisty and dark

[11:40:39.0967] <Waldo>
I dunno, they're not _that_ bad, it's easy to keep tabs on them...

[13:00:30.0856] <tcampbell>
emilio we do not currently, but I'm planning on looking at same-site navigation sharing of scripts at all that later this year. I suspect you are ahead of us on the styling stuff though

[13:02:20.0470] <tcampbell>
Step 1: finish the parser decoupling. Step 2: Replace format for parser results. Step 3: Get some sort of token from Necko telling us we are about to parse same script and directly instantiate the "stencil" instead of reparsing.

[13:02:51.0778] <tcampbell>
We probably should chat about this and coordinate if stylo is doing similar things.. :)

[13:04:54.0107] <emilio>
tcampbell: right, we're doing it without requiring necko support, much like the image cache

[13:05:19.0698] <emilio>
tcampbell: so I wondered if it made sense to unify all these "subresource caches" into one

[13:05:48.0976] <tcampbell>
My thinking is that I can't explain that a script is still valid for a URI without Necko, so I'd like a blackbox token

[13:06:34.0398] <tcampbell>
I want this sort of caching to be more in-memory-and-flush-async than it is today. 

[13:07:08.0911] <tcampbell>
emilio do you have time tomorrow before the Moco meeting to chat?

[13:08:30.0360] <emilio>
tcampbell: you mean how to know it's not expired and such? We use [this](https://searchfox.org/mozilla-central/rev/31d8600b73dc85b4cdbabf45ac3f1a9c11700d8e/dom/base/nsContentUtils.cpp#10240)

[13:09:07.0433] <emilio>
tcampbell: and sure that time should work, feel free to send me an invite

[13:11:00.0171] <tcampbell>
Sent.

[13:11:29.0308] <tcampbell>
JS bytecode caching is not ideal now since we flush it to Necko as an "alternate stream"

[13:11:49.0907] <tcampbell>
In practice, I see we often race this and reparse anyways

[13:12:11.0681] <emilio>
I see

[13:12:25.0118] <tcampbell>
I'd like same-site stuff to directly use the in memory version of this

[13:12:41.0123] <emilio>
Yeah, the nice thing of the stylesheet cache IMHO (obviously not quite partial) is that it's basically a hashmap lookup before doing the necko load

[13:13:00.0801] <emilio>
 * Yeah, the nice thing of the stylesheet cache IMHO (obviously not quite impartial) is that it's basically a hashmap lookup before doing the necko load

[13:13:26.0538] <emilio>
So if you hit it you can run away with your stylesheet sync, post a load event, and carry on

[13:13:41.0087] <emilio>
If you don't you either glom onto an existing load, or fire the load

[13:16:17.0821] <emilio>
tcampbell: the other nice thing that this allows is to be better at scheduling and prioritization of resource loads... For example, right now we trigger alternative stylesheet loads and loads with non-matching media queries once we run out of other stylesheets to load. But loading those is silly if there are scripts or images to load too

[13:17:23.0076] <tcampbell>
Cool. We definitely can coordinate better with different resource types

[14:35:52.0331] <Waldo>
jorendorff: Seeing as a bunch of date parsing bugs got touched/poked/dedup'd in the last few days, a part of me wants to dive into our date parsing algorithm, separate out the common-case parsing bits into coherent parts, then maybe add telemetry for the bizarre cases and start pruning them -- with ultimate aim of actually standardizing the algorithm.  I'm not sure when is a good time to devote particular time to doing this.

[14:59:57.0368] <jorendorff>
Waldo: It might be a better approach to see what V8 does and try to standardize a reasonable behavior in the neighborhood of that

[15:00:17.0653] <jorendorff>
because I think our Date.parse is much less reasonable

[15:00:22.0904] <jorendorff>
theirs isn't good either

[15:00:31.0139] <Waldo>
jorendorff: Their algorithm is as batty and un-understandable as ours, IMO.

[15:00:32.0522] <jorendorff>
i mean, not good enough you'd want to standardize it

[15:00:43.0190] <jorendorff>
/me looks skeptical

[15:01:06.0246] <jorendorff>
the bugs that get filed against ours... i mean...

[15:01:38.0290] <Waldo>
What would help everyone, is standardizing the particular patterns/sequential orderings of fields that are supported/supportable.  I think that can be done by having sub-modes to handle those, then leaving the dreck to the tail end of the parse loop.  But I don't think we can augment the current setup of the loop to achieve desired narrowing.

[15:02:34.0649] <Waldo>
I'm also trying to think about our code somewhat path-dependently, as in what can we reasonably do to it _that is understandable_ that can be improved into a standard.  Throwing away our current algorithm and replacing it with something clean seems...infeasible, the more I looked into the algorithm recently.

[15:27:02.0161] <Waldo>
At one time I figured we had to implement something that was vaguely close to a grammar of sorts.  It cannot be understated just how far from the truth that assumption was.  I do not understand how someone could have decided, "Hey, I've got strings that contain dates, let's parse them!" and then come up with the algorithm that we have.


2020-07-02
[21:19:29.0114] <Waldo>
I'm gonna be out tomorrow (thinking about doing a nice long bike ride, we'll see just how long I actually make it), and with July 4 (observed) that means I get a four-day weekend out of things.  Wouldn't surprise me if I popped in very briefly at some point, but you pretty much should assume I'm out through the weekend.  See you Monday!

[23:54:11.0585] <yulia>
i hear standardization of date.parse

[23:54:45.0576] <yulia>
there was some work to try and converge on a definition that encompasses all of the implementations. I can dig it up

[23:57:57.0935] <yulia>
and the notes:  https://github.com/tc39/notes/blob/master/meetings/2019-03/mar-26.md#uniform-parsing-of-quasi-standard-dateparse-input-for-stage-2

[23:59:20.0468] <yulia>
and https://github.com/tc39/notes/blob/master/meetings/2019-03/mar-27.md#dateparse-follow-up

[23:59:43.0627] <yulia>
the outcome from this session was to focus on temporal.

[00:00:57.0681] <jandem>
I think we should support attempts to standardize this better, [bug 1274354](https://bugzilla.mozilla.org/show_bug.cgi?id=1274354) is one of our bigger compat issues

[00:00:58.0968] <botzilla>
https://bugzil.la/1274354 — NEW (nobody) — [meta] Date.parse, amirite

[00:03:05.0354] <jandem>
 * I think we should support attempts to standardize this better, [bug 1274354](https://bugzilla.mozilla.org/show_bug.cgi?id=1274354) is one of our bigger web compat issues

[00:25:09.0399] <yulia>
jandem: yeah, i think we might want  to bring it up again

[00:25:36.0218] <yulia>
 * here are the notes (edit: slides and presentation are in the notes):  https://github.com/tc39/notes/blob/master/meetings/2019-03/mar-26.md#uniform-parsing-of-quasi-standard-dateparse-input-for-stage-2

[00:32:51.0155] <yulia>
couple of highlights: 

*   MB: To respond to DE's comments, I'm worried we may never get a full spec to solve all Date.parse()'s problems if we try to do it all in a single proposal. I think we should be open to accept smaller, incremental improvements.

*  BT: Do we have consensus on Stage 2?
   DE: I think we should really see more interoperability research first.

*  Discussion of ecma and RFC3339 and leap seconds

*  consensus on rejecting leap seconds (not clear why)

*  DE: Looking at a lot of cases and saying "we'll include this, we'll exclude this", is very useful. In V8, we implemented a use counter to determine how many times Date.parse came up at all.

*  RGN walks away from the  proposal -- but it is open to being raised again

[00:34:11.0064] <yulia>
I think we can more or less take the committee's suggestions here -- break it up into smaller chunks and get the interop data, and propose that

[00:35:07.0303] <yulia>
should i draft something to get the discussion going again?

[00:35:44.0419] <yulia>
cc Waldo jorendorff, once it is morning

[00:47:00.0612] <yulia>
 * the outcome from this session was to focus on temporal. I think one of the  issues is that the interop is a problem, but  this was trying to expand date.parse capabilities to include other formats

[00:47:51.0337] <yulia>
 * I think we can more or less take the committee's suggestions here -- break it up into smaller chunks and get the interop data, and propose that, while ignoring the discussion around bringing in rfc 3339 and ISO 8601

[08:09:58.0121] <jorendorff>
Did anyone else have problems connecting to the all-Moz meeting?

[08:10:43.0037] <nbp>
jorendorff: clear the onlinexperience cookie

[10:27:57.0691] <yulia>
what exactly, is a trampoline in the engine?

[10:28:05.0250] <yulia>
i understand that it reformats data.... 

[10:28:10.0868] <yulia>
but i don't have a clear picture

[10:29:12.0556] <iain>
A trampoline is code that you call to help you call something else

[10:29:18.0179] <yulia>
i am reading this function, for context -> https://searchfox.org/mozilla-central/source/js/src/jit/BaselineCodeGen.cpp#653-696

[10:29:21.0940] <nbp>
a trampoline is a piece of code which is used to transition between modes of executions

[10:29:49.0930] <yulia>
namely trying to understand what is going on here: https://searchfox.org/mozilla-central/source/js/src/jit/BaselineCodeGen.cpp#662

[10:30:00.0723] <nbp>
yulia: such as https://searchfox.org/mozilla-central/rev/55a4faa52f72918efa51150d127aebdc057dc6cf/js/src/jit/x64/Trampoline-x64.cpp

[10:30:24.0206] <iain>
If we are making a call from jit code to C++ code, there are a bunch of steps we need to do to make that happen

[10:31:01.0330] <iain>
Instead of generating code to perform all those steps whenever we are calling from jit code to C++ code, we generate one copy of that code (the trampoline)

[10:31:14.0053] <iain>
And then the jit code can call the trampoline

[10:31:23.0183] <iain>
And the trampoline will handle the rest of the work

[10:32:43.0321] <yulia>
hm

[10:32:48.0264] <yulia>
where do we generate the trampoline?

[10:32:58.0923] <yulia>
is it the thing nbp linked?

[10:33:39.0482] <iain>
The wrapper you linked is here specifically: https://searchfox.org/mozilla-central/source/js/src/jit/x64/Trampoline-x64.cpp#599

[10:34:12.0634] <iain>
We actually have one wrapper per function that we can VM call

[10:34:34.0888] <iain>
 * The trampoline you linked is here specifically: https://searchfox.org/mozilla-central/source/js/src/jit/x64/Trampoline-x64.cpp#599

[10:34:43.0601] <iain>
 * We actually have one trampoline per function that we can VM call

[10:34:48.0057] <iain>
As well as a few other general-purpose trampolines

[10:35:42.0692] <yulia>
> one trampoline per function that we can VM call

as in, one per one of these right?  https://searchfox.org/mozilla-central/source/js/src/jit/VMFunctionList-inl.h#35

[10:35:50.0083] <iain>
Precisely

[10:35:57.0846] <yulia>
ok, good, i understand

[10:36:14.0403] <yulia>
and a trampoline is all of the macro assembler steps that need to be done before we can call this

[10:36:50.0370] <iain>
The trampoline is the code generated by those masm steps, yeah

[10:37:00.0134] <yulia>
aha ok, thats better

[10:37:02.0920] <iain>
The metaphor is that you need to get somewhere, but it's hard, so you bounce off the trampoline

[10:38:42.0439] <iain>
On the wiki page for "trampoline (computing)", our use of trampolines is closest to "When interfacing pieces of code with incompatible calling conventions..."

[10:39:02.0330] <yulia>
oh nice

[10:39:57.0671] <nbp>
yulia:  `generateVMWrapper` handles all VM calls describe by  a VMFunction (from JIT to C++) and `generateEnterJIT` handles calls from C++ to the JIT.

[10:40:32.0617] <yulia>
great, this is making sense

[10:41:04.0249] <nbp>
In both cases, these are specific to the architecture. While most of the rest of the code is shared across architecture.

[10:42:19.0372] <nbp>
For example BaselineInterpreter, BaselineCompiler will use the MacroAssembler the same way, without worrying about the underlying architecture (x86, x64, Armv7, Aarch64, MIPS*, …)

[10:43:01.0779] <nbp>
(IonMonkey does some specialization per architecture as well)

[10:43:51.0677] <yulia>
fantastic, i am looking forward to digging into that next week....

[10:45:59.0509] <nbp>
if you are interested in spending extra time in the MAcroAssembler, there actually a lot to see on how this mash-up of architecture is handled ;)

[10:46:14.0270] <yulia>
actually i am

[10:46:19.0793] <yulia>
im just wondering how to draw it all out

[10:46:28.0861] <yulia>
it will all probably havee to go into next week...

[15:37:48.0127] <sfink>
confession: landed a broken patch to shortestPaths(), fuzzers caught me, made fixes and backed out the original. (bug 1648646)

[15:37:50.0771] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[15:37:51.0977] <botzilla>
https://bugzil.la/1648646 — RESOLVED (sfink) — Add capability of searching from roots to shortestPaths() testing function

[15:40:50.0395] <iain>
sfink: Oh good, I was just starting to look at that warp bug

[15:42:08.0059] <sfink>
oh, sorry about that. I was incorrectly blaming warp for not tracing stuff. Turns out I was just ripping the carpet out from underneath warp's feet.

[15:44:48.0025] <iain>
I had only gotten as far as determining that it was a `--no-ti` bug, not a `--warp` bug

[16:35:44.0018] <tcampbell>
What is a spaceship doing on the carpet anyways

[16:48:44.0444] <sfink>
jorendorff: I just had a random idea about a variant of your stupid questions session. Call it "really smart questions", maybe? People pick a tricky closed bug in some part of the codebase, the less understandable the better. Whoever fixed it explains just enough for everyone to understand both the problem and the solution.

[16:48:54.0780] <sfink>
and now, I need to go make dinner


2020-07-03
[17:01:48.0181] <tcampbell>
I'm not sure *more* people need to suffer the understanding of try-note/iteratorclose/debug-osr combo bugs

[17:50:30.0057] <jorendorff>
haha

[19:55:43.0732] <sfink>
great example, really. I see the stupid questions thing as breadth-first knowledge gathering, the smart question thing as depth-first.

[01:00:43.0260] <Waldo>
And, done. https://strava.app.link/ZpCCMmtyO7 Shower, sleep.

[04:07:15.0351] <yulia>
I wrote a micro-jit for today's stream: https://gist.github.com/codehag/53286fea5272591b3b9fdc82a39949a7

[04:07:21.0540] <yulia>
if anyone has a second to check it

[04:15:52.0901] <jandem>
LGTM! Maybe add a script type that contains the counter + the bytecode + maybe the compiled representation (instead of storing in compiledScripts) so that it better matches the engine

[04:16:25.0562] <yulia>
oh

[04:16:26.0393] <yulia>
right

[04:16:38.0666] <yulia>
so that the counter isn't arbitrarily counting

[04:16:42.0550] <yulia>
right right right

[04:16:57.0241] <yulia>
awesome

[04:18:32.0148] <nbp>
yulia: isn't there a missing new-line in the compiled code, or building a list and using the spread operator?

[04:19:34.0292] <yulia>
i was thinking that it visually shows a difference to have these two:

```
\\ Interpreter: 
duck
goose

\\ compiler
duckgoose
```

[04:19:38.0483] <yulia>
but im open to suggestions

[04:20:19.0063] <nbp>
yulia: I think the instruction would be easier to understand, if the instructions were literaly:
```js
        case "xD": {
          output += `console.log($[instruction.d})`;
          break;
        }
```

[04:20:50.0974] <nbp>
and then use `new Function("", output)` to generate the code.

[04:21:15.0629] <nbp>
 * yulia: I think the instruction would be easier to understand, if the instructions were literaly:
```js
        case "xD": {
          output += `console.log(${instruction.d})`;
          break;
        }
```

[04:21:28.0236] <yulia>
i like the suggestion of new Function

[04:21:29.0526] <nbp>
 * yulia: I think the instruction would be easier to understand, if the instructions were literaly:
```js
        case "xD": {
          output += `console.log(${instruction.d});`;
          break;
        }
```

[04:21:34.0574] <yulia>
i suppose we could also inspect function.toString

[04:22:38.0935] <yulia>
i want to somehow visually show the transition from the interpreter to the bytecode 🤔

[04:23:08.0420] <nbp>
I guess you could do it by stepping in the debugger.

[04:23:27.0628] <yulia>
i can add lightning emoji?

[04:23:35.0930] <nbp>
the interpreter overhead would be shown as you step into the for-switch.

[04:23:55.0624] <nbp>
🌩️ or 💡 ?

[04:24:07.0800] <yulia>
that, lightbulb

[04:24:10.0106] <yulia>
good idea

[04:24:19.0092] <yulia>
ugh still have to do _drawingssss_

[04:24:34.0960] <nbp>
/me lunch time

[04:33:03.0320] <yulia>
hm, maybe i shouldn't skip the ast

[04:33:34.0450] <yulia>
eh, i spent enough time on this

[04:47:58.0667] <Benjamin Bouvier>
in the tradition of spidermonkey naming, can i suggest naming your new JIT twitchmonkey?

[04:51:25.0958] <yulia>
omg

[04:51:55.0485] <yulia>
DONE

[04:52:14.0580] <yulia>
and it is _so_ getting its own poster

[04:52:54.0282] <yulia>
i made a tiny grammar for the fake language that it uses, if anyone wants to waste some time with me (i almost made it a lisp but stopped myself)

[05:00:04.0354] <yulia>
huh, using new  Function causes a CSP error

[05:20:29.0496] <Ms2ger [~half-time dedication]>
https://pbs.twimg.com/media/Eb_odAeWsAAiwTw?format=jpg&name=large

[05:22:52.0465] <yulia>
thar she blows: https://github.com/codehag/TwitchMonkey

[05:25:21.0033] <jandem>
goose/duck/swan/finch and now a monkey name, quite the zoo

[05:26:24.0729] <nbp>
> <@yulia:mozilla.org> huh, using new  Function causes a CSP error

even when using a python SimpleHTTPServer ?

[05:26:44.0285] <yulia>
lets be real, this will eventually be a lism

[05:26:46.0486] <yulia>
lisp*

[05:26:56.0120] <Ms2ger [~half-time dedication]>
🦆 🦢

[05:26:58.0970] <yulia>
nbp: the problem only happens if you run it in the console interestingly enpugh

[05:27:08.0359] <yulia>
 * nbp: the problem only happens if you run it in the console interestingly enough

[05:27:34.0281] <yulia>
the original syntax i had for this was `do 1 + 1.`

[05:27:45.0848] <yulia>
but then i realized that the ast should be handled at another time

[05:27:51.0608] <nbp>
yulia: in the worse case, there is still "eval"

[05:27:57.0684] <yulia>
and then i realized that if it is a lisp, its easier

[05:28:21.0249] <yulia>
ah i got it figured out, and people can clone the repo if they want to play with it

[05:28:32.0135] <yulia>
this is _serverless_ programming 

[05:28:36.0134] <yulia>
*waggles eyebrows*

[05:28:44.0681] <yulia>
like actually serverless

[05:29:19.0255] <jandem>
serverlisp

[08:15:20.0996] <tcampbell>
mgaudet: This patch is done now, right? https://phabricator.services.mozilla.com/D77934

[08:15:55.0757] <mgaudet>
tcampbell: yep, waiting on you and jason 

[08:16:31.0489] <tcampbell>
will do now

[08:16:39.0648] <mgaudet>
(I would have pinged about it, but I'm reworking the inline caches patch, which has some issues) 

[08:21:00.0292] <tcampbell>
mgaudet: do you have a try link I can download? moz-phab doesn't seem able to apply it

[08:23:03.0424] <mgaudet>
tcampbell: Away from keyboard at the moment, but my latest try push has it

[08:23:10.0944] <tcampbell>
ty

[09:08:59.0715] <Caspy7>
with Mac's move to ARM changing anything much for us other than some one-time changes to get it to compile?

[09:09:14.0022] <Caspy7>
like, does more effort need to go into ARM optimization

[09:13:25.0574] <tcampbell>
It will use the ARM64 backends which are already important for mobile.

[09:14:11.0471] <jandem>
we'll likely need to make some changes to get it working on mac (calling convention etc), hopefully nothing too bad

[09:26:07.0031] <nbp>
Caspy7: depends how much they put pressure on application for using PointerAuthentification. It might cause some harder issues back to us to make it work.

[09:27:08.0767] <Caspy7>
/me nods

[09:27:54.0022] <Caspy7>
thanks for the responses
yeah, I knew we already compiled to ARM for mobile, but wasn't sure how much difference there would be for desktop

[09:29:41.0105] <Caspy7>
will it change our web simd story?

[09:30:31.0864] <nbp>
We no longer have any SIMD story with JS. All this work moved to WebAssembly lately.

[09:31:05.0255] <nbp>
It probably will not change much, but you should double check in #WebAssembly

[09:31:17.0697] <nbp>
 * It probably will not change much, but you should double check in #webassembly:mozilla.org 

[09:50:45.0380] <tcampbell>
mgaudet: so we check for unbound fields when closing a class, and also at global scope?

[09:51:18.0138] <mgaudet>
tcampbell: yes. 

[09:52:52.0587] <mgaudet>
Top level is to handle something like `new C().#x`

[09:53:25.0324] <mgaudet>
which is a top level syntax error if it's not nested within a scope that includes a private identifier (via eval essentially) 

[10:43:52.0356] <mgaudet>
Hmm. Seems I'm misusing `HasOwnPropertyPure` and am looking for some guidance. It acts a bit peculiar relative to other JSAPI functions, in that it [will return `false` for cases where it cannot determine if the property exists or not](https://searchfox.org/mozilla-central/rev/e11d919cdc8a909354eb2c3e19904d9229c55d88/js/src/vm/JSObject.cpp#2380-2384)

As a consumer of it, I'd be required to disambiguate between this and throwing; correct? 

```
  if (!HasOwnDataPropertyPure(cx, obj, id, &hasOwn)) {
    // A resolve hook can trigger this to return false, even when not throwing
    if (cx->isThrowingOutOfMemory() || cx->isThrowingOverRecursed()) {
      return false;
    }
    *mayThrow = true;
    return true;
  }
```

Or is this a case of me using this incorrectly, and I ought to be instead checking for hooks ahead of this check? 

[10:45:14.0451] <evilpie>
mgaudet: pure methods can not throw

[10:45:53.0488] <mgaudet>
Oh; so I should assume true == "yes/no", false == ¯\_(ツ)_/¯. OK. That's nicer. Works with my goals

[10:46:55.0104] <evilpie>
yeah. return false means this can't be handled in a pure manner at the moment

[10:47:45.0066] <mgaudet>
thanks evilpie. That's one bit of convention I had yet to internalize

[10:58:57.0929] <mgaudet>
Do we have any SMDOC anywhere that documents these kind conventions? (thinking I should start curating one... somewhere) 

[10:59:34.0985] <evilpie>
I don't think so

[11:00:11.0575] <evilpie>
We should probably move the JSContext* parameter to the end, that is how normally indicate non-normal return behavior

[11:56:45.0257] <tcampbell>
mgaudet: did you ever explore the idea of a second UsedNamesTracker

[11:56:57.0362] <tcampbell>
 * mgaudet: did you ever explore the idea of a second UsedNamesTracker instance

[11:57:10.0718] <mgaudet>
tcampbell: I did not 

[11:57:16.0744] <mgaudet>
Didn’t occur to me!

[11:59:12.0324] <tcampbell>
I mostly wonder if it is a way to avoid adding costs to the ~100% of code that does not use fields

[11:59:16.0847] <tcampbell>
 * I mostly wonder if it is a way to avoid adding costs to the ~100% of code that does not use priv fields

[11:59:36.0191] <tcampbell>
especially the unbound check

[12:01:32.0191] <mgaudet>
It's certainly one approach. IMO, the "hasHadPrivateName" bit, which you suggested previously, would be my ideal short-term choice. Subclassing and extending the UsedNamesTracker to do PrivateNames separately could certainly come after, if we are concerned about the performance implications. 

[12:02:09.0908] <tcampbell>
I wasn't even thinking about subclassing, just two instances

[12:06:07.0453] <mgaudet>
You’d still be adding the private names to the public tracker so that bindings are propagated as the FE expects i think; so you’d use more memory

[12:06:24.0952] <tcampbell>
oh, hmm

[12:09:00.0890] <tcampbell>
mostly the scopedId seems to be the overhead

[12:09:10.0970] <tcampbell>
all fields would be "closed-over", right?

[12:09:56.0894] <tcampbell>
Anyways. Patch makes sense. I'm mostly just thinking aloud

[12:14:15.0148] <mgaudet>
I would have to sit and think a while on the 'all fields would be closed-over' question. I think I agree, but wouldn't want to commit here.

[12:15:17.0401] <tcampbell>
yeah.. I suspect we compute some sort of closed-over bit due to the machinery, but it would not be used for fields

[12:42:40.0370] <evilpie>
I just wasted 10 minutes trying to figure out why `xclip -o -t text/plain;charset=utf-8` doesn't work in the console :/

[12:42:49.0302] <evilpie>
 * I just wasted 10 minutes trying to figure out why `xclip -o -t text/plain;charset=utf-8` doesn't work in the terminal :/

[14:52:28.0240] <mgaudet>
confession: cleaned up my IC implementation patch, solved a bug in it that later test cases found. Starting to try to clean up proxy patches for review. 

[14:52:31.0541] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:53:20.0656] <mgaudet>
confession: Oh, and readied a patch that will enable test262 tests to be enabled on the bits that work, once the initial stack lands. 

[15:19:08.0595] <Waldo>
> <@evilpie:mozilla.org> I just wasted 10 minutes trying to figure out why `xclip -o -t text/plain;charset=utf-8` doesn't work in the terminal :/

Gotta love shell-quoting.

[15:21:28.0043] <Waldo>
jandem: FYI, "mountain biking" is term of art for biking on a bike with thick, probably knobbly tires on unpaved trails and rock and such.  If you're biking on roads on thin tires, even in mountains, it's still road biking, not mountain biking (unless one aims for pedantic misuse for comedic effect, because comedic effect and punning excuse everything).

[15:24:18.0422] <jandem>
yeah I just thought it was appropriate given the climbing. I have two bikes, one of them a mountain bike ish

[15:29:00.0951] <Waldo>
/me is so out of shape, he should have been able to do yesterday's riding far more easily than he did.

[15:33:51.0134] <jandem>
I'm planning to bike some tomorrow, hopefully the weather will be good

[15:36:58.0298] <Waldo>
It was maybe mid-50s most of the day yesterday, generally overcast, which probably helped a ton with not needing a lot of water.  End of day I think I'd only consumed maybe 150oz. or so, and I gained a pound of weight yesterday to today, so dehydration seems unlikely to have been an issue.

[15:37:53.0846] <Waldo>
Stopped for an hour or so at the beach -- pretty empty at 10:30, but people were starting to arrive in larger numbers when I left close to noon.  Still well short of anything worrisome.

[15:38:28.0302] <Waldo>
A part of me was considering biking to the beach July 4 just to see how bad it would be, but I probably can't be bothered, given it was for giggles and I got a little feel already.

[15:39:30.0788] <jandem>
that sounds good. Last weekend I biked to visit family and it was too hot to really enjoy the way back 

[15:40:29.0517] <Waldo>
I needed better food than energy bars to eat on the go.  Kept stopping places to eat, and in hindsight I think that was a signal I really just needed to eat, not that I was looking for excuses to stop.

[15:41:09.0072] <Waldo>
I went to make some sammiches to take with me...then realized I didn't have any bread for it.  So, nothing doing but carrying an excess of Clif bars and finding food on the go.

[15:43:46.0870] <jandem>
I'm not as sportive, a few months ago I did ~55 km on a Saturday afternoon and that was far enough


2020-07-04
[10:05:06.0168] <jandem>
evilpie: I wonder if we should unship $+ substitution, it's not even documented on MDN

[10:18:37.0933] <jandem>
added some needinfos to see what folks think (bug 1650518)

[10:18:39.0182] <botzilla>
https://bugzil.la/1650518 — UNCONFIRMED (nobody) — Invalid String.prototype.replace with string search value: "a>".replace(/>/, "$+") returns "a"

[10:44:42.0490] <evilpie>
jandem: probably

[13:01:32.0173] <Waldo>
Do we have time for some nightly telemetry on it?

[13:20:56.0238] <evilpie>
I don't really think we need to rush


2020-07-05
[02:20:11.0400] <brent>
Hi - I’m having a swing at my first issue - https://bugzilla.mozilla.org/show_bug.cgi?id=1337723#c14 and Lars has helped me take a few baby steps.

From https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Introduction_to_the_JavaScript_shell it gives the step: `installing the built shell using make install`

I have built firefox - and `./mach run` launches `.../mozilla-unified/obj-x86_64-pc-linux-gnu/dist/bin/firefox`

What is the command I need to run from which directory to install the JS shell?

[02:27:22.0505] <evilpie>
@brent sounds like you just build the browser instead of the shell

[02:27:52.0832] <evilpie>
the build documentation is here https://firefox-source-docs.mozilla.org/js/build.html

[02:28:00.0406] <evilpie>
make sure MOZCONFIG is set

[02:38:33.0975] <brent>
💡riiight
Is the option I need 

`ac_add_options --enable-application=js`


[03:00:46.0377] <jandem>
yep, then you'll build just the shell 

[04:30:07.0288] <brent>
👍️ 
Is there a way to launch the shell to allow debugging? I'm working from vs-code at the moment; so any pointers on being able to connect a vs-code debug session would be great. Else; open to suggestions on any other approaches.


[04:59:03.0578] <jandem>
I'm not sure. Personally I mostly use `./mach run --debug` in the vs-code terminal

[05:11:02.0169] <brent>
Sorry for the basic question; but what do I do after ``?

I'm getting a gdb console; and am not sure how to use it from there.
```brent@brent:~/repos/mozilla-unified$ ./mach run --debug
 0:00.25 /usr/bin/gdb -q --args /home/brent/repos/mozilla-unified/obj-x86_64-pc-linux-gnu/dist/bin/firefox -no-remote -profile /home/brent/repos/mozilla-unified/obj-x86_64-pc-linux-gnu/tmp/profile-default
Reading symbols from /home/brent/repos/mozilla-unified/obj-x86_64-pc-linux-gnu/dist/bin/firefox...
(gdb) 
```

[05:11:19.0414] <brent>
 * Sorry for the basic question; but what do I do after `./mach run --debug`?

I'm getting a gdb console; and am not sure how to use it from there.
```brent@brent:~/repos/mozilla-unified$
 0:00.25 /usr/bin/gdb -q --args /home/brent/repos/mozilla-unified/obj-x86_64-pc-linux-gnu/dist/bin/firefox -no-remote -profile /home/brent/repos/mozilla-unified/obj-x86_64-pc-linux-gnu/tmp/profile-default
Reading symbols from /home/brent/repos/mozilla-unified/obj-x86_64-pc-linux-gnu/dist/bin/firefox...
(gdb) 
```

[05:31:26.0609] <jandem>
you can do "r" (run) to start the program, in this case the interactive shell. If you pass a .js file name to `mach run` it will run that

[05:33:52.0232] <jandem>
it's probably possible to use vscode's debugger or to connect it to gdb somehow, but I've never done that

[05:34:50.0627] <jandem>
oh reading your output above, this is still running the browser. Did you change the mozconfig to one that's for just the shell?

[05:35:01.0169] <jandem>
/me back later

[05:37:01.0515] <brent>
Right; `r` the keys to the kingdom; thannnks

I'm (also) having trouble re-triggering the build; so for now still only a debuggable browser built
Any thoughts on https://matrix.to/#/!xvpXYXuzAHqpZoejxX:mozilla.org/$kNsUCO6OZgAKjcUX8wcu1gS2zD3tN-GQnayi-lib-eU?via=mozilla.org&via=matrix.org&via=archlinux.org also welcome :) Sunday learning-curves

[05:55:29.0670] <jandem>
maybe try a mach clobber after you changed your mozconfig

[05:55:58.0333] <jandem>
* maybe try a `mach clobber` after you changed your mozconfig

[05:56:26.0945] <jandem>
that will remove the object directory so you can start with a clean slate 

[06:16:37.0202] <brent>
whoop; `mach clobber` gave me a working next build
And I have a js executable in bin
Thank you very much for the help 


2020-07-06
[17:23:52.0864] <Caspy7>
Dunno if someone feels like commenting, but I'm wondering what tangible benefits end users should expect from WarpBuilder?

[17:24:33.0553] <Caspy7>
faster JS execution in some places? Lower memory?
better parity for performance as compared to V8?

[18:58:29.0444] <arai>
is there anything that replaces Parsemark?  https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Running_Parsemark

[18:59:23.0453] <arai>
or is it still the best way to test frontend perf?

[20:54:36.0863] <arai>
compare_bench.py says "Meh." for all tests :P

[20:59:16.0921] <iain>
Caspy7: There's still lots of tuning to do, but our expectation is that Warp will score a little bit worse on number-crunching benchmarks with a few hot loops, but be faster for regular webby code

[20:59:28.0560] <iain>
We're already slightly faster on google docs, for example

[20:59:50.0989] <iain>
 * Caspy7: There's still lots of code to write and tuning to do, but our expectation is that Warp will score a little bit worse on number-crunching benchmarks with a few hot loops, but be faster for regular webby code

[21:00:11.0554] <Caspy7>
ah, very good

[21:00:53.0449] <Caspy7>
iain: perhaps most of the time when number crunching perf counts is when needed repeatedly (for hot loops)?

[21:03:10.0652] <iain>
Yeah, for that kind of code where one hot loop dominates everything - say a matrix multiplication benchmark - Ion will probably generate slightly tighter code

[21:03:30.0216] <iain>
But the vast majority of JS that gets run is not matrix multiplication benchmark

[21:03:41.0931] <iain>
 * But the vast majority of JS that gets run is not matrix multiplication benchmarks

[21:05:24.0914] <iain>
Instead of getting great results for some code but falling over when things go wrong, the goal for Warp is to get good results for most code

[21:05:41.0869] <Caspy7>
iain: so guessing this should help us some on the Speedometer benchmark? (that's the one that does a whole bunch of user interactions with different libraries, right?

[21:05:57.0738] <iain>
Yeah, I think we are already at par or a little bit ahead of Ion on Speedometer

[21:06:12.0187] <Caspy7>
excellent

[21:06:35.0622] <iain>
Basically in our testing so far, the closer the testcase is to the actual web, the better we do

[21:07:00.0678] <iain>
Which is really reassuring

[21:08:54.0912] <Caspy7>
🎉

[21:09:53.0475] <Caspy7>
sounds like this should leave us more competitive as compared to V8

[21:10:11.0370] <Caspy7>
or perhaps Chrome rather

[23:02:49.0820] <jandem>
yeah, also when it comes to memory usage as warp doesn't use persistent type information

[06:23:42.0932] <tcampbell>
denispal: can you CC me on 1650745

[06:25:24.0789] <denispal>
tcampbell: yes, done

[06:29:02.0197] <denispal>
Is there a way to cancel an off thread parse task while it's still compiling?  The token to feed JS::CancelOffThreadScript isn't provided until the task is complete so I think there is a problem if the main thread needs to bail early but has no way to cancel

[06:42:16.0649] <tcampbell>
denispal: no, can't be interrupted

[06:43:06.0694] <denispal>
tcampbell: not necessarily interrupted, but at least schedule a cancel somehow

[06:43:45.0582] <denispal>
I think perhaps these are the leaks I'm seeing.  We compile early, then hit an XPComShutdown but when scriptloader tries to cancel the requests, the token is not available yet and they are never cleared

[06:43:52.0578] <tcampbell>
right now that logic is the loader's responsibility

[06:44:47.0406] <tcampbell>
(which I agree is bad... This all should be reworked with Stencil and a new loader...)

[06:45:24.0119] <denispal>
It seems perhaps JS::CompileOffThread needs to return a token identifier of some kind so scriptloader can cancel requests while they are still pending

[06:45:56.0807] <tcampbell>
/me looks at how AsyncScriptCompiler does it

[06:46:44.0861] <tcampbell>
I guess just in response to the callback https://searchfox.org/mozilla-central/source/js/xpconnect/loader/ChromeScriptLoader.cpp#130

[06:47:22.0307] <tcampbell>
Can you just have a flag on the request the marks it as abandoned and check from the callback?

[06:47:33.0173] <tcampbell>
Possibly need to have an implicit refcount

[06:47:36.0105] <denispal>
yeah but between calling JS::CompileOffThread and the callback, there is no way to cancel

[06:49:08.0740] <denispal>
I think with a flag the leaks will still occur in the asan build because we will have a race condition

[06:49:39.0137] <tcampbell>
are these shutdown leaks?

[06:49:40.0750] <denispal>
maybe just need to just force clear all the unfinished tasks in JS_ShutDown

[06:49:44.0113] <denispal>
yeah

[06:50:28.0606] <tcampbell>
we should check with yoshi when they are around. He has been studying the shutdown ordering with off-thread tasks

[06:51:33.0923] <tcampbell>
in the future, it might be reasonable to add in interrupt flag for off-thread parse that is checked in a few places and returns early

[06:51:59.0421] <tcampbell>
I'd consider that an optimization only though, and we should have a clear story for the leaks that works independantly

[06:52:41.0067] <tcampbell>
jandem: does interrupt check work off-thread?

[06:52:47.0285] <jandem>
the engine has code to cancel in-progress parse tasks when destroying a runtime (see CancelOffThreadParses)

[06:53:32.0561] <jandem>
tcampbell: I think it could be made to work, but ideally we'd cut the JSContext dependency for helper threads after Stencil...

[06:53:48.0046] <tcampbell>
oh right

[06:53:59.0063] <jandem>
oh are we leaking a runtime, maybe?

[06:54:02.0952] <tcampbell>
we still need stack overflow checks, right?

[06:54:32.0297] <jandem>
hm good point. Maybe we'd want a small ThreadContext or so for that?

[06:55:29.0439] <tcampbell>
that also includes the `MallocProvider`

[06:56:14.0237] <tcampbell>
hmm.. maybe it isn't too bad if all off-thread can use it and we make it clear there is no JSRuntime access

[07:00:40.0404] <jandem>
if CancelOffThreadParses isn't working because we're leaking a runtime, setting a process-wide flag or so from JS_Shutdown could make sense

[07:01:04.0303] <jandem>
but depends on the details

[08:36:31.0365] <mgaudet>
jorendorff: review ping re https://phabricator.services.mozilla.com/D77934 :) 

[09:45:13.0040] <jorendorff>
mgaudet: stamped

[09:50:06.0298] <mgaudet>
jorendorff: thanks!

[11:47:03.0025] <RyanVM>
Waldo: wow, the supreme court managed to agree on something!

[11:59:52.0566] <Waldo>
RyanVM: They agree on lots of things pretty regularly.  The cases that make news are the outliers.

[12:00:52.0188] <Waldo>
RyanVM: Incidentally either I'm really really wrong in my understanding of the history, or this just seems flatly wrong to me.  Whatever practice has collapsed into over the last two hundred years, right now it seems plain to me the original understanding was that electors had carte blanche to do whatever they wanted.

[12:46:19.0362] <loganfsmyth>
I'm curious, possibly for tcampbell would it seem reasonable to have a CompileOption like `ignoreCSPValidation(true);` that would propagate to child evals, kind of like `mutedErrors`, to be used so that scripts injected into a realm by the debugger could use eval and `new Function`?

[12:47:31.0282] <tcampbell>
seems like setting up for trouble

[12:47:45.0243] <Waldo>
Seems like opening Pandora's box to me.  Is there no other way to offer functionality like that to debugger scripts _only_?

[12:48:19.0006] <tcampbell>
attributing an injected script as being a debugger script also seems messy

[12:48:54.0280] <loganfsmyth>
the context in this case is that users can't use `eval` or `new Function` in the webconsole on pages that have CSP

[12:49:07.0764] <loganfsmyth>
https://bugzilla.mozilla.org/show_bug.cgi?id=1580514

[12:49:20.0496] <loganfsmyth>
and https://bugzilla.mozilla.org/show_bug.cgi?id=1650112

[12:50:18.0650] <loganfsmyth>
the devtools already has a special eval function to inject scripts it wants, but those scripts can't then use `eval` or `new Function`

[12:51:33.0656] <loganfsmyth>
I also realize when looking at this that it could maybe be an embedding hook on the source private object, since that is propagated to child evals/functions, and I wonder if `mutedErrors` could also be that instead of manually propagating everywhere

[12:53:39.0761] <loganfsmyth>
or anyway, idk about the hook, but it seems like there's more of this state that is meant to automatically propagate to eval/new Function

[12:55:52.0671] <tcampbell>
would such a `new Function` only be allowed while the debug-eval is running?

[12:56:15.0544] <tcampbell>
or would all debug-injected scripts be permanently blessed

[12:56:30.0577] <loganfsmyth>
I would expect it to be permanently blessed

[12:58:33.0403] <tcampbell>
hmm

[13:00:21.0342] <loganfsmyth>
alternatively I guess the CSP embedding hook could be passed the private pointer of the source performing the eval, to see validate all this with more minimal changes

[13:00:31.0096] <loganfsmyth>
 * alternatively I guess the CSP embedding hook could be passed the private pointer of the source performing the eval, to validate all this with more minimal changes

[13:01:04.0275] <loganfsmyth>
actually, but then the Debugger API itself would have to handle that somehow

[13:02:15.0825] <tcampbell>
I think if we did this, we'd want to add a flag to the CSP hook

[13:02:30.0975] <tcampbell>
so that the bypass logic is in one place

[13:02:50.0316] <tcampbell>
https://searchfox.org/mozilla-central/source/caps/nsScriptSecurityManager.cpp#403 some sort of `calledByDebugger`

[13:03:03.0301] <loganfsmyth>
what if we gave the Debugger API evaled sources a private object, and when we validate CSP, we checked if it was a debugger-injected source?

[13:03:37.0410] <tcampbell>
that seems the closest to reasonable

[13:05:15.0675] <loganfsmyth>
cool, that seems like it would keep amount of code touched to a minimum

[13:15:24.0278] <tcampbell>
I just want to be careful that we don't hide any of this from the nsScriptSecurityManager to reduce the risk of surprises

[13:16:06.0288] <loganfsmyth>
makes sense. I'm not working on this right now anyway, just trying to get a sense for what the options might be

[13:16:25.0747] <tcampbell>
sounds good

[15:24:44.0596] <mgaudet>
confession: Review feedback-- aiming to hopefully land first batch of private-fields (usable private-fields) code tomorrow. 

[15:24:47.0114] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[16:01:58.0384] <Waldo>
/me eyes `.rst` document syntax beadily


2020-07-07
[19:09:21.0467] <Waldo>
confession: More reviewing.

[07:53:30.0207] <mgaudet>
confession: Oof. XDR encode and decode of private field scope kinds disagree on nextFrameSlot... this is unexpected. 

[09:13:27.0388] <jonco>
confession: the patches make the nursery size more stable are still causing memory regressions

[12:38:45.0151] <mgaudet>
confession: Landed initial private fields stuff. 🤞 here's hoping it sticks!

[13:03:19.0349] <mgaudet>
Anyone around who can stamp a quick hazard fix? 

[13:03:27.0774] <mgaudet>
```
diff --git a/js/src/frontend/Parser.cpp b/js/src/frontend/Parser.cpp
--- a/js/src/frontend/Parser.cpp
+++ b/js/src/frontend/Parser.cpp
@@ -1424,7 +1424,7 @@ bool PerHandlerParser<ParseHandler>::che
   // For the given private name, search the enclosing scope chain
   // to see if there's an associated binding, and if not, issue an error.
   auto verifyPrivateName = [](JSContext* cx, auto* parser,
-                              js::Scope* enclosingScope,
+                              HandleScope enclosingScope,
                               UnboundPrivateName unboundName) {
     // Walk the enclosing scope chain looking for this private name;
     for (ScopeIter si(enclosingScope); si; si++) {
@@ -1452,7 +1452,7 @@ bool PerHandlerParser<ParseHandler>::che
     return false;
   };
 
-  js::Scope* enclosingScope = evalSc->compilationEnclosingScope();
+  RootedScope enclosingScope(cx_, evalSc->compilationEnclosingScope());
   // It's important that the unbound private names are sorted, as we
   // want our errors to always be issued to the first textually.
   for (UnboundPrivateName unboundName : unboundPrivateNames) {
``` 

Specifically

[13:04:02.0097] <mgaudet>
(aiming to push to autoland )

[13:04:48.0698] <mgaudet>
Actually -- I"ll just push bustage

[13:16:03.0530] <iain>
mgaudet: I can stamp if still needed

[13:16:41.0845] <mgaudet>
will set you as reviweer (https://phabricator.services.mozilla.com/D82592) 

[13:16:48.0572] <mgaudet>
think there was a bit of a miscommunication with the sherrifs

[13:17:12.0259] <mgaudet>
but a stamped change is even better

[13:17:12.0430] <iain>
Stamped

[13:19:34.0626] <mgaudet>
Thanks! 

[13:19:50.0514] <mgaudet>
I think it landed without your stamp, but I appreciate it nevertheless

[13:43:30.0244] <mgaudet>
ouch. https://bugzilla.mozilla.org/show_bug.cgi?id=1635298 is pretty bad! 

[13:44:52.0613] <Waldo>
53 minutes ought to be quick enough for anybody.

[13:56:53.0515] <tcampbell>
I've had it take 90+ minutes before

[13:57:39.0865] <tcampbell>
of course then lando just refused to deal

[14:06:01.0740] <Waldo>
landon't

[14:06:14.0741] <Waldo>
/me mutters about food

[14:07:18.0488] <mgaudet>
Well, wasn't quite how I foresaw ending my day, but I guess I'll just leave this till it finishes... sometime. 

[14:22:56.0678] <iain>
confession: Writing warpbuilder code to emit MIR for inlined scripts. Dog-at-keyboard mode activated.

[14:22:58.0770] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:25:43.0295] <ptomato>
Waldo: re. https://phabricator.services.mozilla.com/D82479, what did you have in mind? (and separately, should I replace the CharT*/size_t overloads with JS::ConstLatin1Chars and JS::ConstTwoByteChars?)

[14:29:28.0037] <mgaudet>
Well that's dumb; after all that waiting, phabricator effectively says ¯\_(ツ)_/¯ at the huge patch. https://phabricator.services.mozilla.com/D82608 (sorry Jason. Tomorrow I may split out the bits that require review and the bits that are machine generated into two patches. Because what's there is dumb) 

[14:31:15.0378] <ptomato>
oh, there is no JS::ConstLatin1Chars

[14:31:19.0971] <ptomato>
why not?

[14:31:42.0181] <Waldo>
ptomato: I'm still pondering, mostly, right now.

[14:32:55.0975] <Waldo>
The set of `JS::Const*Chars` sort of has grown as we've needed it, there's no rigorous logic to what exists and what doesn't.  And some parts really probably shouldn't exist, like null-termination is not an idiom we wish to encourage any more.


2020-07-08
[05:10:53.0061] <jonco>
@allstarschh|afk: can you reproduce bug 1651134?

[05:10:54.0559] <botzilla>
https://bugzil.la/1651134 — NEW (allstars.chh) — View Source shows source code of login page instead of current webpage on local django server

[05:11:13.0056] <jonco>
@allstarschh|afk: I don't understand what's happening here

[05:12:43.0160] <@allstarschh|afk>
jonco:  oh, I just look the code and find out maybeResizeNursery could affect the capicity

[05:13:01.0868] <jonco>
it can't set it to zero though, there's an assertion

[05:20:15.0347] <@allstarschh|afk>
jonco: but the assertion is only for debug build, so should we baill out js::Nursery::shrinkAllocableSpace if the newCapaicty is 0?

[05:21:00.0001] <jonco>
no, I mean I don't think that's whats happening, because there's an assertion that would tell us

[05:21:13.0756] <jonco>
you could try and reproduce this in a debug build if you want to check

[05:21:36.0005] <@allstarschh|afk>
jonco: okay, I'll try that

[05:21:55.0528] <jonco>
we should never attempt to shrink to zero size, because we limit it to one arena's worth somewhere

[05:21:56.0292] <jonco>
ok, great

[06:14:25.0441] <yulia>
for Benjamin Bouvier -> 

[06:18:54.0804] <nbp>
https://fr.wikipedia.org/wiki/Microc%C3%A8be_mignon#/media/Fichier:Microcebus_scale.svg

[06:19:30.0460] <yulia>
oo that is another potential primate

[06:19:57.0330] <yulia>
i used a tarsier from unsplash

[06:20:26.0143] <Benjamin Bouvier>
wow

[06:20:34.0353] <yulia>
are we doing this?

[06:20:34.0735] <Benjamin Bouvier>
surely in a jit you'll see stranger things\

[06:20:38.0213] <Benjamin Bouvier>
 * surely in a jit you'll see stranger things

[06:20:41.0473] <yulia>
hahah

[06:21:06.0394] <yulia>
ill see what devrel thinks... idk if the font will be a problem

[06:21:31.0206] <yulia>
i should make friends with the  local print shop. still gotta do intl.segmentor

[06:29:37.0637] <TheQwertiest>
hey everyone!

[06:29:48.0290] <TheQwertiest>
a small question regarding SM

[06:32:06.0834] <TheQwertiest>
nvm, while writing the question, I've found the answer :D

[06:32:22.0481] <TheQwertiest>
thanks for being a rubber duck :D

[06:36:45.0600] <nbp>
No problem, feel free to *type* questions ;)

[06:39:45.0678] <TheQwertiest>
haha, I will consider doing that next time =)

[06:55:08.0163] <nbp>
`(1 in [2]) == false`, `(1 in [2, 3]) == true` … hum this is probably not what I had expected from using this python-ism in JavaScript.

[06:55:23.0383] <nbp>
 * `(1 in [2]) == false`, `(1 in [2, 3]) == true` … hum this is not what I had expected from using this python-ism in JavaScript.

[06:58:00.0329] <evilpie>
@nbp weird. I really think that should work

[06:59:17.0995] <nbp>
it look for the property name, not the values in the array.

[06:59:34.0211] <nbp>
 * it looks for the property name, not the values in the array.

[07:03:01.0775] <evilpie>
@nbp no it doesn't?

[07:03:03.0294] <evilpie>
>>> 1 in [2]
False
>>> 1 in [2, 3]
False
>>> 1 in [1, 2, 3]
True


[07:06:30.0876] <evilpie>
oh sorry,

[07:06:42.0785] <evilpie>
you mean when using that code in JavaScript, not in Python

[07:06:48.0809] <evilpie>
nvm. JavaScript is dumb of course

[07:41:17.0412] <mgaudet>
Wow. Did not expect that. 

[08:37:14.0569] <sfink>
wait, in what environment do you see `1 in [2,3]` === False?

[08:37:26.0463] <sfink>
oops, sorry. Scroll fail.

[08:38:01.0311] <sfink>
my mouse has started scrolling backwards 1/3 the time. It's exciting.

[08:47:06.0271] <sfink>
jonco: ok with delaying the meeting until after the moco meeting?

[08:47:45.0748] <jonco>
sfink: sure

[08:47:53.0318] <jonco>
tcampbell: sdetar ^

[08:52:18.0263] <sdetar>
Sounds good to me

[09:19:22.0989] <decoder>
mgaudet: so that private fields support you landed so far is just fields, not methods, correct?

[09:19:54.0675] <mgaudet>
decoder: correct. Methods will come later -- slight semantic tweak required. 

[09:20:28.0217] <mgaudet>
(Thanks for noticing; I take it this obviates the need for the email I was going to send you this afternoon letting you know that it had landed? ) 

[09:20:52.0069] <decoder>
yes, I saw the bugmail, thanks :D

[09:21:10.0339] <decoder>
I just noticed a lot of "bad method definition" errors when fuzzing, coming from v8 tests that seem to use private methods

[10:07:02.0377] <mgaudet>
loganfsmyth: I'm planning on correcting the private fields devtools bug: Can you point me at the test cases for instant evaluation? my searchfox skills are failing me 

[10:07:28.0134] <loganfsmyth>
yeah let me look, 1 sec

[10:07:55.0618] <loganfsmyth>
https://searchfox.org/mozilla-central/source/devtools/server/tests/xpcshell/test_console_eval-01.js#24

[10:10:08.0842] <mgaudet>
loganfsmyth: so reading that, `eager: true` is the trick; so I should be able to do an `eager: true` evaluateJSAsync, then a regular one to verify that side effects didn't occur. 

[10:10:39.0308] <loganfsmyth>
yep

[10:14:45.0445] <mgaudet>
Awesome. Thanks!

[10:35:37.0740] <mgaudet>
loganfsmyth: How does one tell if evaluateJSAsync threw an exception? 

[10:36:10.0133] <mgaudet>
`response.result.type == "undefined"`? (I am sort of reverse engineering this but if there's a great documentation piece I'm missing I'd take that too!) 

[10:37:57.0054] <loganfsmyth>
I think there is a `response.exceptionMessage`

[10:38:06.0578] <loganfsmyth>
it's from here: https://searchfox.org/mozilla-central/source/devtools/server/actors/webconsole.js#1300

[10:38:39.0320] <mgaudet>
ah; hasException looks about right!

[12:04:16.0845] <evilpie>
nbp: I think you shared something that showed the error telemetry + MDN docs. Can you give me that link again? Thanks

[12:24:32.0774] <mgaudet>
> <@evilpie:mozilla.org> nbp: I think you shared something that showed the error telemetry + MDN docs. Can you give me that link again? Thanks

I feel like you might be looking for this: https://nbp.github.io/arewedocumentedyet/ 

[12:28:44.0259] <evilpie>
mgaudet: thanks

[12:46:50.0627] <mgaudet>
jorendorff: ping? 

[12:47:10.0354] <jorendorff>
mgaudet: pong.

[12:48:08.0301] <mgaudet>
jorendorff: Regarding https://phabricator.services.mozilla.com/D82608... it's a disaster of a diff. I'm wondering if it's actually -helpful- or not for me to try to split the change to jstests.list off, or if that just makes things worse because it would create a revision that wouldn't pass tests. I can still do it, or we can keep it as is.

[12:49:12.0889] <jorendorff>
mgaudet: i'm just going to rubber-stamp that

[12:49:40.0205] <mgaudet>
jorendorff: do take a peek at jstests.list to make sure you are OK with that approach at least :P

[12:50:16.0218] <mgaudet>
it's slightly peculiar relative to others, because we have both a skip-if + shell-option

[12:51:22.0921] <jorendorff>
oh... hmm.

[12:53:20.0373] <jorendorff>
well, we didn't do this with public fields, but what we did with public fields was also gruesome

[12:54:07.0312] <jorendorff>
```
FEATURE_CHECK_NEEDED = {
...
    # Syntax is a bit weird, because this string cannot have spaces in it
    "class-fields-public":
        "(function(){try{eval('c=class{x;}');return(false);}catch{return(true);}})()",
}
```

[12:54:26.0303] <jorendorff>
before even getting to the shell-option

[12:55:08.0231] <mgaudet>
TIL: I didn't realize the FEATURE_CHECK_NEEDED functionality existed. Ooops. Came up with this hammer first

[12:55:31.0594] <jorendorff>
I'd rather add a `SHELL_OPTION_NEEDED` and keep working toward this stuff being easy

[12:55:39.0745] <jorendorff>
but I could also stamp this if needed

[12:55:55.0029] <mgaudet>
lemme see what that would look like. 

[12:56:01.0309] <jorendorff>
I want you to have tests and not have to worry too much about it

[12:56:12.0105] <jorendorff>
so just let me know

[12:58:17.0291] <mgaudet>
(if you were designing this, would SHELL_OPTION_NEEDED imply `skip-if(!xulRuntime.shell) `?) 

[14:00:14.0508] <mgaudet>
jorendorff: I think we should probably design SHELL_OPTION_NEEDED in another bug. There's lots of interplay questions. I think the manual process I've got is good enough for now. (I have a partial SHELL_OPTION_NEEDED patch... but I don't like it) 

[15:06:43.0584] <jorendorff>
ok!

[15:07:09.0809] <jorendorff>
stamped

[16:50:58.0986] <iain>
confession: I think I somehow managed to inline my first scripted function

[16:51:02.0602] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2020-07-09
[19:16:41.0265] <mgaudet>
confession: spent the day working on followups now that the initial private fields patch has stuck ( :tada: ). All good stuff, including some lovely little fuzz bugs to help nail this down.   

[20:56:39.0129] <jya>
hi.

[20:57:23.0355] <jya>
I got backout for breaking the hazard test like here: https://treeherder.mozilla.org/logviewer.html#/jobs?job_id=308963824&repo=autoland&lineNumber=73953

[20:58:17.0247] <jya>
what's weird is that my changes have nothing to do with webgl where the error occurs; any ideas on how I could go about fixing that?

[21:03:05.0426] <jya>
I see in the hazards.txt.gz a reference to WeakPtr which I did change to keep a reference to the thread, but that should make no difference to JS

[21:31:44.0875] <sfink>
jya: for some reason, it's unable to find the virtual implementations of `nsIEventTarget::IsOnCurrentThreadInfallible`. It's worried that some implementation will call back into the JSAPI and trigger a GC. I think you're safe using a `JS::AutoSuppressGCAnalysis nogc;` within `IsOnCurrentThread`.

[21:32:03.0354] <sfink>
(leave me a message here if you need help doing that, I'll see it in the morning)

[21:32:51.0165] <jya>
sfink: I see.

[21:34:35.0327] <sfink>
or if there are multiple implementations of that, maybe `nsAutoOwningEventTarget::IsCurrentThread` is a single chokepoint?

[21:35:05.0537] <sfink>
yeah, that might be easier

[21:36:09.0927] <sfink>
Hm, there are quite a few uses of the suppression. I should audit them sometime.

[21:38:44.0120] <jya>
that API is marked as noscript

[21:38:56.0655] <jya>
so why would it think it could go back to JS GC?

[21:43:35.0701] <jya>
sfink: let me know if you want to review that change ; it's blocking a fair bit of changes here.

[04:05:18.0521] <yulia>
I am stuck on the jits, namely baseline compiler is doing something i don't expect

[04:05:27.0850] <yulia>
does anyone have about 10-20 min to jump on a video call with me?

[04:08:15.0346] <yulia>
hah, ok i guess i got it?

[04:09:42.0915] <yulia>
not gunna lie, not sure why it works so help would still be appreciated

[04:12:08.0869] <jandem>
what's going on?

[04:12:22.0977] <yulia>
it works in ion and i don't know why

[04:12:54.0628] <yulia>
so, before, i had a slight mistake in baseline -- i was popping both values and putting them both back on the stack. for some reason this wasn't working

[04:13:04.0687] <yulia>
now i only pop the top value, modify it, and put it back (arguably better)

[04:13:16.0926] <yulia>
but now i am looking at my ion implementation and i have _no_ idea why it works

[04:13:24.0932] <jandem>
can you pastebin it?

[04:13:29.0495] <jandem>
confession: added support for nursery objects to the transpiler/Warp. Now looking into making IsPackedArray not depend on TI

[04:13:31.0765] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[04:15:48.0732] <yulia>
hm, my editor inserted some random stuff in there

[04:16:22.0113] <yulia>
here it is again without the text editor artifacts

[04:16:22.0563] <yulia>
https://pastebin.com/dMsx19ZS

[04:16:45.0267] <jandem>
ok so it replaces the top-of-stack value

[04:17:01.0314] <yulia>
yes, which isn't actually right

[04:17:10.0386] <yulia>
i expected something to explode

[04:17:26.0470] <jandem>
oh it also has to pop the second value?

[04:17:59.0534] <yulia>
the stack looks like this -> [maybeObj, key]

[04:18:14.0649] <yulia>
and right now we are running "checkObjCoercible" on key

[04:18:19.0778] <yulia>
but it should be on maybeObj

[04:18:31.0241] <yulia>
from what i understand, the code at the top is the success case?

[04:19:00.0923] <yulia>
in which case we do want the top value of the stack, "key", which we pop, transform into a property key, and carry on

[04:19:51.0663] <yulia>
and, iiuc, that second half of the code is "fail without checking" but i was expecting it to not work

[04:20:05.0367] <yulia>
like, in some way at least -- it even throws the right error message

[04:20:19.0746] <jandem>
ok so the question is why the MCheckObjCoercible path works?

[04:20:26.0091] <yulia>
yes

[04:21:40.0934] <jandem>
is that with --no-threads? to disable off-thread compilation.. 

[04:21:48.0374] <jandem>
if the value isn't null/undefined, MCheckObjCoercible does nothing

[04:21:52.0020] <yulia>
not yet, i can run it

[04:23:45.0180] <yulia>
jandem: is it a runtime argument or a compile argument?

[04:23:52.0737] <yulia>
with the runtime argument, behavior is the same

[04:24:19.0855] <jandem>
runtime. The idea is that sometimes the script finishes before the compilation backend is done so you don't run it

[04:24:45.0236] <jandem>
if you add a `masm.breakpoint()` to `CodeGenerator::visitCheckObjCoercible` you can see if we're actually running that code

[04:25:01.0869] <yulia>
ok

[04:26:51.0753] <jandem>
btw the warp story here is a bit different, I think we need the IC to take both arguments and emit CacheIR guards for it that we can then transpile to MIR

[04:27:20.0764] <jandem>
adding a new IC like that is a bit of a pain right now, which is why I was hesitant about fixing this bug

[04:27:45.0136] <yulia>
right, i am about to look at IC once i get this running in a sensible way...

[04:28:55.0218] <yulia>
is there any kind of compile flag needed to hit that breakpoint?

[04:29:51.0765] <yulia>
ah, found it in the hacking tips

[04:33:15.0395] <yulia>
hm. don't know the  lldb equivalent for `command`

[04:36:57.0954] <jandem>
oh I meant just add the masm.breakpoint() to the CodeGenerator code, then recompile and run the shell and see if it hits

[04:37:26.0198] <yulia>
ok

[04:37:50.0633] <yulia>
it does not

[04:38:25.0703] <yulia>
i wonder if we are falling back to baseline somehow

[04:40:32.0014] <jandem>
you're sure we add this MIR instruction in IonBuilder?

[04:41:00.0929] <yulia>
for PrepareSetElem?

[04:41:07.0178] <yulia>
I did not add that instruction yet

[04:41:12.0106] <yulia>
that might be it

[04:41:38.0705] <jandem>
I mean we do reach the MCheckObjCoercible code path in IonBuilder?

[04:41:59.0900] <yulia>
the code is definitely being run

[04:42:08.0628] <jandem>
ok great

[04:42:09.0627] <yulia>
i can make it fail and inspect it

[04:42:38.0802] <jandem>
maybe you can set a breakpoint in the debugger on MCheckObjCoercible::foldsTo

[04:43:18.0529] <jandem>
actually that doesn't matter because you said we're throwing an exception anyway

[04:44:00.0970] <jandem>
you can set the IONFLAGS=scripts,aborts environment variable and see if that prints anything useful

[04:44:53.0877] <yulia>
ok

[04:45:05.0882] <yulia>
maybe foldsTo is useful actually..

[04:46:57.0057] <jandem>
I was wondering if we were optimizing the MIR instruction away and you didn't hit the breakpoint because of that, but that doesn't explain why it throws the right exception

[04:47:48.0561] <yulia>
could it be that we are optimizing something away and it falls back  on either baseline or interpretere?

[04:47:52.0393] <yulia>
 * could it be that we are optimizing something away and it falls back  on either baseline or interpreter?

[04:48:55.0488] <jandem>
it's possible we're bailing out of Ion code somewhere, you can try IONFLAGS=bl-bails 

[04:49:02.0601] <jandem>
it prints info about bailouts

[04:52:19.0189] <yulia>
here is what i get with all of the flags

[04:52:22.0102] <yulia>
```
⇒  dist/bin/js --ion-eager
found tag: bl-bails
found tag: scripts
found tag: aborts
[IonScripts] Compiling script self-hosted:1:0 (134c08c6f920) (warmup-counter=1, level=Optimization_Full)
[IonAbort] Unsupported opcode: SetIntrinsic
[IonAbort] aborted @ self-hosted:1:0
[IonAbort] Disabling Ion compilation of script self-hosted:1:0
[IonScripts] Compiling script self-hosted:6:15 (134c08c6f880) (warmup-counter=1, level=Optimization_Full)
js> null[0]++
[IonScripts] Compiling script typein:1:0 (134c08ca4060) (warmup-counter=1, level=Optimization_Full)
typein:1:1 TypeError: can't access property 0 of null
Stack:
  @typein:1:1
js>

```

[04:53:03.0983] <jandem>
ok so you want to add --no-threads too

[04:53:21.0175] <yulia>
oh neat

[04:53:57.0456] <yulia>
here is the output: https://pastebin.com/WkmiTn3V

[04:55:58.0655] <jandem>
maybe put this in a separate function you call N times (with a try-catch in the caller function) and see if that changes anything

[04:56:47.0331] <jandem>
Ion/Warp depend on type information so running something once means we often bail out somewhere

[04:59:27.0524] <yulia>
is this more or less what you meant? 
```js
function test() {
  null[0]++;
}

for (let i = 0; i < 10000; i++) {
  try {
    test();
  } catch (e) {
    print(e);
  }
}

```

[05:00:12.0998] <yulia>
this is the output for that script (repeated many times) : https://pastebin.com/Vab36qFk

[05:01:15.0562] <jandem>
ok try this with `--no-threads --ion-inlining=off`

[05:01:19.0560] <jandem>
without --ion-eager

[05:02:17.0128] <yulia>
that results ins a lot of `TypeError: can't access property 0 of null
`

[05:02:45.0406] <jandem>
so we expect to hit the breakpoint you added to CodeGenerator?

[05:03:01.0327] <yulia>
that break point is still there

[05:03:04.0945] <yulia>
so, i guess yes

[05:03:50.0088] <yulia>
i don't know if this is useful, but the previous prepareSetElem call does not do any IC work, and `JOF_IC` is not added to the bytecode

[05:04:46.0110] <yulia>
I am surprised that I am hitting this code, but it isn't acting as expected..

[05:04:54.0819] <jandem>
try adding `dump-mir-expr` to IONFLAGS, that prints all the MIR so we can double check checkobjcoercible is in it

[05:05:00.0179] <yulia>
ok

[05:05:34.0108] <yulia>
without --ion-inlining=off ?

[05:05:42.0850] <jandem>
with

[05:05:51.0191] <jandem>
and keep --no-threads too

[05:06:04.0397] <yulia>
ok, in that case it doesnt print anything new

[05:06:12.0513] <yulia>
its just `TypeError: can't access property 0 of null`

[05:06:49.0873] <yulia>
maybe the test code i am using is off? it always throws

[05:07:19.0960] <jandem>
do you get any `[IonScripts]` lines in the output still? from IONFLAGS=scripts

[05:07:40.0909] <jandem>
even if it throws I'd expect us to compile the "test" function

[05:08:16.0170] <yulia>
i get stuff like that: `[IonScripts] Compiling script self-hosted:892:22 (34dc943a2100) (warmup-counter=1000, level=Optimization_Normal)
`

[05:09:21.0987] <yulia>
but it looks like it is only showing on selfhosted code

[05:09:31.0745] <jandem>
but not for your "test" function? that's curious 

[05:09:53.0185] <yulia>
ah

[05:09:57.0159] <yulia>
i didn't look far enough

[05:10:54.0104] <yulia>
https://pastebin.com/h1S7RPtk

[05:11:30.0798] <yulia>
wow thats cool

[05:12:09.0601] <jandem>
right so we have checkobjcoercible with the 0 as input

[05:12:32.0640] <yulia>
ok, right, that matches what i suspected the code was doing

[05:12:55.0309] <jandem>
but in the BeforeLIR output you notice the checkobjcoercible is gone

[05:13:36.0405] <yulia>
right

[05:13:39.0904] <jandem>
can you try with --ion-gvn=off added too?

[05:13:51.0637] <jandem>
to see if it hits the breakpoint if we don't discard it

[05:14:58.0219] <yulia>
https://pastebin.com/PSa4WnA1

[05:16:10.0321] <yulia>
and this hits: [1]    81082 trace trap  dist/bin/js --ion-inlining=off --ion-gvn=off --no-threads well.js


[05:16:44.0147] <jandem>
ok if we now remove the masm.breakpoint()

[05:16:56.0710] <jandem>
and add some assertions to the JS code in the caller

[05:17:01.0740] <jandem>
we should be able to observe the bug

[05:17:07.0770] <jandem>
(no exception thrown)

[05:17:38.0464] <jandem>
or maybe we throw it for a later bytecode op. Hm

[05:17:58.0606] <jandem>
maybe a different message

[05:18:42.0689] <yulia>
what kind of assertions should i add?

[05:19:17.0807] <jandem>
if you still print the exception + the loop iteration, can you see if there are any changes after the Ion-compile output?

[05:19:24.0357] <yulia>
ok

[05:20:03.0310] <yulia>
hm, there is no change to the message

[05:20:28.0489] <yulia>
could it be that we fall back to prepareSetElem?

[05:21:21.0356] <jandem>
I think what happens is that the getprop throws the exception now instead of your op. `null[0] => TypeError: can't access property 0 of null`

[05:22:01.0313] <yulia>
Oh, wait that is totally right

[05:22:08.0193] <yulia>
that is it

[05:22:25.0721] <yulia>
let me change one thing

[05:23:21.0904] <yulia>
yes thats it

[05:23:29.0447] <jandem>
\o/

[05:24:23.0749] <yulia>
before we compile -> TypeError: can't access property "Error" of null

[05:24:32.0178] <yulia>
after -> TypeError: can't access property "Error" of null

[05:24:45.0617] <yulia>
wow that is some cool stuff

[05:24:49.0987] <yulia>
er

[05:24:50.0741] <yulia>
oops

[05:24:51.0920] <yulia>
i mean

[05:24:56.0651] <yulia>
TypeError: null has no properties

[05:24:59.0849] <yulia>
thats the change

[05:25:29.0265] <jandem>
great

[05:26:56.0658] <yulia>
ok, last question and i think i can do it on my own. Is there a way to check that object, without popping two elements from the stack?

[05:27:24.0803] <jandem>
`current->peek(-2)` in IonBuilder

[05:27:37.0069] <jandem>
-1 is the value on top of the stack

[05:27:50.0955] <yulia>
and, i don't need to push to the stack the checkObjCoercible value?

[05:28:28.0594] <jandem>
maybe simplest is to pop both values and then push your MCheckObjCoercible

[05:28:47.0617] <jandem>
so [obj, key] => [result]

[05:28:55.0591] <yulia>
and maybe also undefined to make sure we have two items..

[05:29:07.0789] <yulia>
because we need [obj, key] => [a, b]

[05:29:54.0494] <jandem>
oh right in that case push the key again?

[05:30:25.0189] <yulia>
ok

[05:31:08.0077] <nbp>
yulia: if you are interested in displaying the IonMonkey content, I suggest using iongraph: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Hacking_Tips#Using_IonMonkey_spew_JS_shell , and if one day you are looking at setting up a Linux VM with gdb/rr you can even run it from gdb: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Hacking_Tips#Viewing_the_MIRGraph_of_IonOdin_compilations_from_gdb

[05:31:35.0043] <yulia>
oh thats cool

[05:44:10.0073] <yulia>
huh, i  wonder if this could  just make an html page

[05:45:00.0592] <yulia>
i guess that wouldn't be hard to do

[05:46:28.0375] <nbp>
I guess you could make a simple tool which take a list of png images and returns an html which embedded these.

[05:46:37.0099] <yulia>
yeah exactly

[05:49:04.0745] <yulia>
that is very cool though

[05:49:57.0865] <yulia>
one thing is pretty clear... i am not going to get through all of this in an hour

[05:56:45.0992] <yulia>
I am gunna have to drop content... I don't think i can afford another week of this level  of prep

[06:16:24.0459] <nbp>
I think iongraph is you best way to present IonMonkey and its phases.

[06:16:34.0507] <nbp>
 * I think iongraph is your best way to present IonMonkey and its phases.

[06:17:01.0454] <nbp>
while it might be a lot of information, you get a dump in-between every phases of the compiler.

[06:21:04.0900] <yulia>
i think i could spend an entire episode on ion passes... but i also still need to cover the IC, cacheIR, and what MIR and LIR are

[06:22:19.0215] <yulia>
should i skip any of those? 

[06:26:28.0303] <tcampbell>
/me shakes fist at `moz-phab`..

[06:29:03.0021] <iain>
I think ICs and CacheIR are a pretty big chunk of content on their own and could easily sustain an entire episode

[06:29:21.0393] <nbp>
I have a presentation with a representation of the relation between baseline / MIR and LIR.

[06:29:32.0848] <nbp>
it should be in the list of Matthew

[06:30:10.0325] <yulia>
ok, i am guessing i just need to do two episodes

[06:30:21.0974] <iain>
The alternative is that you could save some of this content for the next cycle

[06:30:22.0702] <nbp>
yulia: https://nbp.github.io/slides/RInstruction/?full#cfg-resume-points-idea and https://nbp.github.io/slides/RInstruction/?full#snapshot-build

[06:30:52.0694] <iain>
Like, talk about Ion but don't go into the CacheIR / IC code in depth this time

[06:30:58.0802] <yulia>
iain: i was thinking that. I essentially lose 2 days per week prepping this stuff

[06:31:12.0321] <iain>
Or vice versa

[06:31:23.0240] <yulia>
ok, maybe i skip ic this time, so far i have a partial implementation of the LIR/MIR ready to go

[06:32:58.0934] <yulia>
hm

[06:33:08.0197] <yulia>
well, more like i have ion based on toPropertyKey ready

[08:07:49.0458] <sfink>
jya: `[noscript]` only means a function is not callable from JS. `[builtinclass]` is closer; it would mean that you couldn't implement it in JS. But neither of them prevents the C++ implementation from calling stuff that eventually calls something in the JSAPI that could GC.

[08:07:57.0426] <sfink>
but I see you put something up for review, so I'll look there

[08:08:34.0233] <sfink>
er... I thought?

[08:09:08.0418] <sfink>
ah, I see. Added me then removed. Ok, I'll skim over it anyway.

[08:10:40.0372] <mgaudet>
jorendorff: Q: A while ago we were talking about some prototype patches I had for proxy+private fields, [and you suggested adding some operations to `ObjectOperations-inl.h`](https://chat.mozilla.org/#/room/!CZEbuMfGYVdQMIBKeP:mozilla.org/$7IG0Al1PViJWo76fwovD_1FprFG-x3Fwdek7COiF69M?via=mozilla.org&via=igalia.com&via=matrix.org) -- I'm very much still dog-at-keyboarding some of this stuff, so could we chat in a bit more detail about what you mean? 

[08:12:15.0138] <jorendorff>
OK! (sorry, clicked the link and the back button didn't work)

[08:12:24.0345] <mgaudet>
trap link :) Sorry 

[08:12:33.0470] <jorendorff>
i'm theoretically in a triage meeting but no one else has showed up yet

[08:13:27.0866] <jorendorff>
ok, so abstractions generally -- interfaces that hide information, so you can use a thing without knowing its internals -- are thin on the ground in SM...

[08:13:38.0820] <jorendorff>
but we do have them, they help

[08:14:40.0089] <jorendorff>
and one of them is the object interface, which is in ObjectOperations-inl.h. This interface is unfortunately slow.

[08:15:10.0056] <jorendorff>
doesn't surface shapes

[08:15:41.0478] <jorendorff>
but it's meant to give you all the high-level operations on objects, and be safe, and always do the right thing with proxies and wrappers

[08:16:42.0307] <jorendorff>
also, the design intent is that every operation a proxy/wrapper can trap should be in there

[08:17:22.0380] <jorendorff>
ISTR the various ProxyHandler hooks that have defaults are pretty uniform in just delegating to one of them

[08:17:30.0668] <jorendorff>
 * ISTR the various ProxyHandler hooks that have defaults are pretty uniform in just delegating to one of the ObjectOperations functions

[08:18:15.0384] <mgaudet>
That sounds right; I guess the thing I'm tied up in knots a bit about is whether or not the specializations proxies require for private fields consist of a public interface that deserves to go there or if it's an implementation detail of proxies that doesn't need a public interfaces

[08:19:12.0567] <mgaudet>
like; `[[HasOwnProperty]](#x)` has special case code in the BaseProxyHandler to deal with the fact that we allocate and search an expando object for `#x`, since proxies don't have their own slots

[08:20:07.0599] <mgaudet>
but I don't feel like we'd want `HasPrivate` in ObjectOperations-inl, because you'd always prefer to call `HasOwnProperty` (naming is a little funny here just because private names are always `Own` properties reallY) 

[08:20:09.0828] <mgaudet>
 * but I don't feel like we'd want `HasPrivate` in ObjectOperations-inl, because you'd always prefer to call `HasOwnProperty` (naming is a little funny here just because private names are always `Own` properties really)

[10:41:27.0311] <tcampbell>
jorendorff: review ping on https://phabricator.services.mozilla.com/D80777 . I'm trying to figure out if I should rebase other work over or under it. I'm happy to push this back to 81 if you think it will need more care than we have time for

[10:41:41.0178] <jorendorff>
sorry, will get to it today

[15:40:10.0916] <jya>
sfink I thought my thing of creating a dummy class with the right extension would work, but somehow it didn't.

[15:40:31.0339] <jya>
It takes over 2 hours to get the result so I thought that it failed on try around 11pm

[15:41:10.0114] <jya>
I'm not sure why it didn't work, maybe it needs to be in the JS namespace?

[15:47:59.0341] <sfink>
jya: sorry, I'm pto half day. And I pushed something that I hoped would work, but my push failed. I re-pushed https://treeherder.mozilla.org/#/jobs?repo=try&revision=d0588273437db6f0015a4d080e6c5ab29ff318f1 just now

[15:48:10.0606] <sfink>
if that works, I'd suggest going with it

[15:58:41.0595] <jya>
sfink: I feel like that solution is cheating :)

[16:00:15.0340] <sfink>
given the thread issues, it feels like the right for now. The other main option would make `AutoSuppressGCAnalysisButDontActuallyCheckMkay`, and maybe I'll end up doing that, but I'd rather do that a little later and unblock you now.

[16:01:33.0343] <jya>
sounds fair, you'd be happy if I merge that in my existing patch and push ?

[16:05:36.0781] <jya>
oh I see you already had a similar exception for the workerthread: "void mozilla::dom::WorkerPrivate::AssertIsOnWorkerThread() const" : true,

[16:07:47.0913] <jya>
seems like you're missing the : true at the end (if it's to be like the others)


2020-07-10
[17:30:18.0999] <sfink>
oops, did I mess that up?

[17:30:26.0016] <sfink>
yes, feel free to merge and push

[17:31:18.0923] <sfink>
jya: yep, all of my pushes with it failed. Darn, I wanted to be sure it would work. I'll cross my fingers.

[17:39:09.0598] <jya>
I've made a push

[17:39:24.0137] <jya>
sfink: the JS-Hazzard is green already 

[17:39:34.0370] <jya>
https://treeherder.mozilla.org/#/jobs?repo=try&revision=092037b2a200c4776f585aa92775afae7c42b91f

[18:04:16.0966] <jya>
Green!

[18:39:43.0979] <jya>
sfink: thanks again for helping me out on this.

[20:36:18.0025] <arai>
I'm wondering about comment after `#include` line, that lists up imported identifiers.  for example, if `Stencil.h` includes `vm/Scope.h`, and `Stencil.cpp` includes `Stencil.h` and uses `CreateEnvironmentShape` from `vm/Scope.h`, where `Stencil.h` doesn't use it, should we include `vm/Scope.h` in `Stencil.cpp` and list `CreateEnvironmentShape` there?

[20:36:59.0937] <arai>
Waldo: ^

[20:37:30.0970] <Waldo>
arai: Yeah, vm/Scope.h should be included.

[20:37:46.0682] <Waldo>
Don't bootleg stuff, include the headers that supply the symbols you use.

[20:38:03.0558] <arai>
Okay, thanks :)

[20:42:46.0055] <Waldo>
/me mutters at riot-web only displaying the last-scroll-position for so long, so when you're 200 messages behind and need to respond to something new you're likely to lose your place

[01:18:54.0577] <Benjamin Bouvier>
do people need to be marked as a component peer so as to be able to review code in phabricator?

[05:13:41.0047] <mgaudet>
I don't believe so; it's a social policy, not a techinically enforced one (mostly -- some places have code to enforce stuff) 

[07:53:07.0133] <froydnj>
what are the spidermonkey warp builds for?  do we need to be uploading the hundreds of MB for js and jsapi-tests from this job?

[07:54:36.0894] <froydnj>
same question for the cgc and nojit builds, I guess

[07:59:26.0284] <sfink>
I think we can probably treat them all the same. I think only the sanitizer builds are used regularly for regressions.

[08:00:02.0023] <sfink>
(as in, make an easy override to enable the uploads on retriggers, upload a README)

[08:00:38.0436] <sfink>
I should really mark that as Request Changes so it's not in my review queue

[08:00:50.0672] <sfink>
oh, wait... you did that

[08:01:02.0464] <sfink>
uh, oops, I thought I was still waiting

[08:06:12.0836] <froydnj>
I updated this morning, but was considering adding more builds to not upload

[08:08:18.0411] <sfink>
r=me, with a MOREJOBSOK rider

[08:14:34.0902] <tcampbell>
sfink: I wonder if we should just strip those sanitizer builds

[08:14:42.0463] <tcampbell>
*strip debug-info

[08:14:52.0274] <sfink>
ooh, that's a good thought

[08:14:56.0050] <sfink>
decoder: ^ ?

[08:15:20.0547] <sfink>
come to think of it... I wonder if the space issue would largely go away if we stripped everything by default, and allowed an override to not?

[08:15:21.0373] <froydnj>
kinda makes backtraces less useful, no?

[08:15:25.0863] <decoder>
sfink: tcampbell: sanitizer builds need the debug information

[08:15:30.0354] <sfink>
ah, ok

[08:15:34.0872] <decoder>
otherwise they wont produce backtraces

[08:15:45.0447] <decoder>
we already build them with -gline-tables-only to reduce the debug info to the relevant stuff

[08:25:47.0280] <nbp>
iain: (replying from the stream) there is more phases which are unique to IonMonkey, such as BranchPruning / Sink / RecoverInstruction

[08:52:17.0940] <mgaudet>
sfink: Can you help me understand what [this assert](https://searchfox.org/mozilla-central/rev/622dbd3409610ad3f71b56c9a6a92da905dab0aa/js/src/vm/ProxyObject.cpp#265-266) is trying to say -- I'm aping this method for private fields, and would like to know if/why I should also have the same assert.

[08:55:28.0224] <sfink>
generally speaking, we do not allow black -> gray edges in the GC. Where black==reachable from regular JS roots of any sort, gray==not black, but reachable from potentially cycle-collected C++ objects.

[08:55:51.0935] <sfink>
I guess I should say it as: we do not allow black -> gray edges in the GC heap.

[08:56:56.0369] <mgaudet>
OK. And a thing can only go grey if it can be reached from the cycle collector

[08:56:59.0655] <sfink>
because if you had such an edge, then the CC could decide to collect the cycle including that gray object. And then later, someone would come along through the black object, traverse through the gray object to some dead C++ goop, and get indigestion.

[08:57:23.0236] <sfink>
yes, reachable from cycle-collected objects

[08:57:34.0800] <mgaudet>
 * OK. And a thing can only go grey if it can be reached from the cycle collector?

[08:57:49.0307] <mgaudet>
Sweet. Ok! I understand. Thanks!

[08:57:55.0990] <sfink>
the ProxyObject here is sort of concealing an edge via a private, which is why it gets its very own assert

[08:59:48.0969] <sfink>
jonco: last night I realized what might be happening with that deduplication crash. If I'm right, the supposedly conservative bit setting won't help.

[09:00:15.0271] <jonco>
sfink: oh, what do you think it is?

[09:00:18.0944] <sfink>
so I'm going to expand it to do more and try to land that first

[09:00:36.0693] <jonco>
yeah, the AutoStableStringChars does look OK

[09:01:06.0338] <sfink>
I think it might be that the `AutoStableStringChars` is holding onto a dependent string that is using chars from another nursery string, and it's only makring the dependent string as non-deduplicatable

[09:01:21.0763] <sfink>
which allows the actual owner of the chars to be deduplicated

[09:01:31.0823] <jonco>
oh, and not the original? yeah that sounds bad

[09:01:53.0416] <sfink>
so the quick fix would be to mark its base (recursively if needed)

[09:01:55.0437] <jonco>
cool, well this is fixable then

[09:02:56.0154] <sfink>
I'm still not crazy about that as the final fix, though. For one, it's overmarking the nondeduplicatable bit (it really ought to be cleared in the destructor, to prevent every nursery string that was ever in ASSC from being ineligible).

[09:03:33.0828] <sfink>
but the correctness of unmarking depends on nothing else setting that bit. Which is true today, but easy to change.

[09:03:47.0360] <sfink>
(because something else might set the bit within the ASSC scope, so clearing it at the end would be wrong)

[09:04:05.0275] <sfink>
I could use an ASSC-specific bit

[09:04:44.0098] <sfink>
but I think a better fix might be to have ASSC make a tenured -> nursery edge, recorded in the store buffer, and then that'll do the appropriate marking if there happens to be a GC

[09:05:00.0199] <sfink>
but that seems a little too complicated to rush in right now

[09:05:44.0342] <sfink>
 * but I think a better fix might be to have ASSC make a tenured -> nursery edge, recorded in the store buffer, and then that'll do the appropriate marking if there happens to be a (minor) GC

[09:06:12.0658] <jonco>
fair enough

[09:07:33.0299] <jonco>
I agree with you comment about minimising the nursery

[09:08:23.0534] <jonco>
the time limit needs to be short enough to happen before workers go idle and stop running and JS engine code

[09:08:36.0085] <jonco>
but maybe I can handle workers differently

[09:15:11.0318] <mgaudet>
/me grumbles about jstest**s** vs jit-test 

[09:15:26.0146] <mgaudet>
/me  * grumbles about ./mach jstest**s** vs ./mach jit-test

[09:19:12.0431] <jandem>
maybe we should add an alias?

[09:23:38.0392] <sfink>
jonco: ok, it compiles and seems to pass relevant tests. I re-requested review: https://phabricator.services.mozilla.com/D82791

[09:24:31.0194] <jonco>
sfink: I'll take a look

[09:27:14.0965] <jonco>
sfink: if a string has been marked non-deduplicatable, does that mean all of its bases must have as well?

[09:27:29.0727] <sfink>
I'll also try to make a test case, now that (I think!) I understand what's going on, but that may take some trickery

[09:27:45.0860] <sfink>
I'm not sure I understand the question

[09:27:58.0443] <sfink>
if you mark a string non-deduplicatable, you must also mark its bases

[09:28:19.0599] <jonco>
can we skip checking the bases if the string is not deduplicatable

[09:28:21.0473] <sfink>
during the minor GC, that's done in PreventDeduplicationOfReachableStrings

[09:28:44.0881] <sfink>
checking or marking? We can't skip marking them non-deduplicatable

[09:28:52.0503] <sfink>
but when checking, we only need to look at the string in question

[09:29:27.0175] <mgaudet>
> <@jandem:mozilla.org> maybe we should add an alias?

oh -- I didn't think about that being an option. I will open a bug (and hopefully look into it at some point) 

[09:29:58.0601] <sfink>
there's a weird alias system that reads out of a text file or something, which I found difficult to use to provide built-in aliases

[09:30:43.0951] <sfink>
though maybe that was because I needed an alias that was slightly different from the original? I can't remember the details.

[09:30:49.0643] <jonco>
sfink: right, I'm just checking that second part of the condition |  if (!linearString->isTenured() && linearString->isDeduplicatable()) { | is OK and it sounds like it is

[09:30:53.0677] <sfink>
you can always define a new command that just dispatches to the same place

[09:31:03.0266] <sfink>
ah!

[09:32:28.0405] <sfink>
hm, it seems a little dangerous

[09:32:54.0429] <sfink>
there doesn't exist a way to break it now, but I think your intuition is right -- I should be setting the bit regardless of the original string

[09:32:55.0191] <sfink>
doh!

[09:33:16.0179] <jonco>
well I guess we could assert

[09:33:27.0561] <jonco>
that bases are set correctly

[09:34:07.0323] <sfink>
it seems easier to force them to be set, so that when you add some other weird path that sets the bit, you don't have to rely on the assert failing

[09:34:29.0728] <sfink>
I guess the followup question is whether the `isTenured()` check should be there

[09:34:51.0999] <sfink>
it's harmless, because if it *is* tenured then the regular machinery will do the right thing

[09:34:52.0214] <jonco>
oh, because the base could be in the nursery even if the string is not?

[09:34:58.0132] <sfink>
yes

[09:35:06.0669] <jonco>
wait, how does that happen again?

[09:35:10.0239] <sfink>
in fact, I should move that check into the bit setting

[09:35:43.0169] <sfink>
I mean, into the loop body

[09:36:12.0847] <sfink>
darn it, I can't remember

[09:36:15.0897] <sfink>
I know it can happen

[09:36:18.0731] <jonco>
oh, rope flattening?

[09:36:19.0896] <jonco>
yeah

[09:36:28.0434] <jonco>
I remember it can happen

[09:36:54.0945] <sfink>
I think you're right

[09:37:05.0998] <sfink>
if you have a nursery rope with tenured leaves and then flatten it

[09:37:17.0099] <jonco>
right

[09:38:02.0344] <sfink>
uh, I have a rather large mistake in my patch, too

[09:38:06.0551] <sfink>
I'm going to upload a new one

[09:38:16.0645] <jonco>
ok cool

[09:39:57.0588] <sfink>
ok, uploaded. 

[09:40:19.0785] <sfink>
the truly stupid mistake was that I was setting the bit for `linearString` over and over, rather than `s` :(

[09:41:16.0917] <sfink>
er.... this is still wrong. Now I'm not setting the bit for the final string at all.

[09:42:26.0296] <sfink>
I guess I shouldn't be trying to rush this

[09:44:56.0845] <sfink>
ok. Ugly wrapping now, but it now iterates over the full chain. Uploaded.

[09:46:02.0202] <sfink>
Oh, I see your review comment. Yes, you're right.

[09:46:44.0662] <sfink>
I'm tempted to templatize all of `::init<CharT>`, but not now.

[09:50:33.0316] <sfink>
jonco: ok, sorry, uploaded yet another version with the code factored out.

[10:06:29.0999] <jonco>
sfink: accepted

[10:06:39.0350] <sfink>
thanks!

[10:09:52.0836] <jonco>
sfink: np

[10:10:36.0601] <jonco>
I'm going to test yet another approach to nursery minimisation - do it for GC_SHRINK collections and see if that's enough (we should probably be doing that already)

[10:11:06.0964] <sfink>
you're still seeing the regression after the latest round of patches?

[10:11:30.0349] <jonco>
no, if I don't do the shrinking after 2 seconds of no allocation

[10:11:50.0370] <jonco>
 * no, I'm testing without the patch to do shrinking after 2 seconds of no allocation

[10:11:51.0393] <sfink>
but that fixes it?

[10:12:27.0471] <sfink>
ah, ok, you haven't tested that variation yet

[10:18:08.0976] <sfink>
RyanVM: just a head's up on bug 1645415. I believe I have an actual fix now. I'll again be on PTO for half the day, but I'll see pings here and I'll be checking to see when it's allowed to land.

[10:18:10.0581] <botzilla>
https://bugzil.la/1645415

[10:19:10.0389] <RyanVM>
sounds good, thanks

[10:21:07.0792] <sfink>
oh crud, my other patch crashlanded and I didn't notice

[10:28:08.0486] <sfink>
it turns out that I create more wreckage than I can keep up with while working half time

[10:28:45.0873] <sfink>
(er, the keeping up is half time. Full time when creating the wreckage. Perhaps part of the problem?)

[10:29:38.0600] <froydnj>
full time creating the wreckage?  I admire your dedication

[10:30:22.0542] <sfink>
it's kind of an accurate description of what I do around here... ;-)

[10:53:17.0842] <jorendorff>
tcampbell: reviewing the module namespace-re-export patch. do we need a bytecode-cache test?

[10:54:19.0858] <tcampbell>
probably a good idea

[13:49:37.0662] <jorendorff>
sfink: i'm looking at `ProxyObject::trace` https://searchfox.org/mozilla-central/source/js/src/proxy/Proxy.cpp#663

[13:50:21.0131] <jorendorff>
trying to find whether the `privateSlot` is traced. I guess it isn't?

[13:52:17.0721] <mgaudet>
confession: Why am I out of disk space?.. oh

110G    /home/matthew/.local/share/rr


[13:52:21.0187] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:04:18.0823] <tcampbell>
jorendorff: ProxyObject::trace -> Proxy::trace -> Handler::trace -> privateSlot (if appropriate)

[14:05:16.0911] <tcampbell>
oh maybe I'm confusing myself too

[14:05:40.0342] <jorendorff>
that does appear to be a thing that happens

[14:05:41.0693] <jorendorff>
"thanks, i hate it" as they say

[14:06:08.0282] <jorendorff>
"thanks, i hate it" as they say

[14:06:15.0042] <jorendorff>
 * https://searchfox.org/mozilla-central/source/dom/bindings/DOMJSProxyHandler.cpp#313-323

[14:06:25.0330] <mgaudet>
confession: Fixed two fuzzbugs (1 backout because browser), fought mochitests (and lost). Uploaded initial private-field proxy support. 


2020-07-12
[18:04:50.0113] <loganfsmyth>
jorendorff: How do feel about Debugger's attempt at exposing a C++ API? We have all of these static functions in each debugger wrapper type (https://searchfox.org/mozilla-central/rev/ae81637193d6687398669169f9808000a96996ee/js/src/debugger/Object.h#51) that all have exactly 1 callsite, and exist as far as I know, only because at one point there was a desire to have the debugger be usable directly in C++. Do you think that is still a worthwhile goal? I ask because we're in kind of an intermediate state where some things have these statics and some like https://searchfox.org/mozilla-central/rev/ae81637193d6687398669169f9808000a96996ee/js/src/debugger/Object.cpp#381 are just implemented for the JS API, and the inconsistency is frustrating when refactoring and trying to make things behave in a consistent way.

[09:10:34.0889] <ampdot>
sfink: Hi, sorry, I forgot about our little GC project.

[09:11:24.0284] <ampdot>
sfink: I remember you said something about Firefox not detecting it as an animation, leading to longer GC pauses. Is that true, and was it fixed?

[09:13:05.0850] <ampdot>
> <@sfink:mozilla.org> specifically, it showed a bunch of ArrayBuffer allocations coming from the JS code

I have carefully read the ArrayBuffer-using code of both versions. ArrayBuffers are either immediately passed to the WebSocket and never recycled, or they are never escaped from a function.

[09:13:14.0908] <ampdot>
> <@sfink:mozilla.org> open up the memory tool, grab a snapshot (not sure if this part is necessary), play the game long enough to warm up your pools, then select the "Record call stacks" checkbox, run a little longer, and grab another snapshot.

I will try this sometime

[09:13:55.0699] <ampdot>
I am genuinely sorry about taking so long to respond-- I forgot we were working on this.


2020-07-13
[07:25:04.0826] <tcampbell>
jonco: This might be testing your memory, but I'm wondering why we have `FreezeObject` in the module code. https://searchfox.org/mozilla-central/rev/af5cff556a9482d7aa2267a82f2ccfaf18e797e9/js/src/builtin/ModuleObject.cpp#1642

[07:25:39.0146] <tcampbell>
I thought these were internal-only objects. Is it for sanity-checking reasons?

[07:33:10.0754] <iain>
tcampbell: Is this relevant? https://bugzilla.mozilla.org/show_bug.cgi?id=1283448

[07:33:46.0422] <tcampbell>
lol damnit

[07:33:52.0521] <tcampbell>
/me shakes fist at testing functions

[07:55:40.0555] <jonco>
tcampbell: sorry I missed your question!

[07:57:03.0783] <jonco>
currently looking at realm marking: "// The way GC works with compartments is basically incomprehensible" 

[08:19:24.0108] <jesup>
Is this a known issue?   Crashing here:   #7  0x00007fffeed1cd9c in mozilla::LinkedList<js::ParseTask>::~LinkedList (this=0x7fffcd3085e0) at ../../dist/include/mozilla/LinkedList.h:437
437	    MOZ_ASSERT(isEmpty(),
#8  0x00007fffeed1c678 in js::GlobalHelperThreadState::~GlobalHelperThreadState (this=0x7fffcd308400) at ../../../js/src/vm/HelperThreads.h:81
#9  0x00007fffeece47a0 in js_delete<js::GlobalHelperThreadState> (p=0x7fffcd308400) at ../../dist/include/js/Utility.h:572
#10 0x00007fffeece47ef in js::DestroyHelperThreadsState () at /home/jesup/src/mozilla/pageload/js/src/vm/HelperThreads.cpp:88
88	  js_delete(gHelperThreadState);
#11 0x00007fffeed00396 in JS_ShutDown () at /home/jesup/src/mozilla/pageload/js/src/vm/Initialization.cpp:237


[08:22:36.0554] <iain>
Is that the bug Denis was looking at? https://bugzilla.mozilla.org/show_bug.cgi?id=1652126

[08:23:09.0079] <iain>
 * jesup: That might be the same as this bug Denis is looking at: https://bugzilla.mozilla.org/show_bug.cgi?id=1652126

[08:27:35.0086] <jesup>
denispal: iain here's a gdb dump of the stack and other stuff.  Sorry I've killed the session but and gather stuff if I hit it again.  https://paste.mozilla.org/AVm8Dd44/raw

[08:27:53.0577] <jesup>
 * denispal: iain here's a gdb dump of the stack and other stuff.  Sorry I've killed the session but I can gather stuff if I hit it again.  https://paste.mozilla.org/AVm8Dd44/raw

[08:28:44.0263] <denispal>
jesup: I think I have a good idea of what's going on.  should have a patch up soon for it

[09:10:56.0025] <mgaudet>
If someone has a browser build of a recent tree with testing enabled, can they please do me a favour and run ` ./mach test --headless js/xpconnect/tests/chrome/test_cows.xhtml` and let me know if they get a result? 

[09:11:09.0380] <mgaudet>
all my browser testing is just timing out and I dont understand why.

[09:11:31.0409] <mgaudet>
(Hmmm. will try rebooting machine. Maybe stuck socket or something) 

[09:20:30.0284] <jorendorff>
I think the situation is we were _confused_ about the proposal when it was `with`, and we should be confused about it when it's `if` (which checks out)

[09:41:47.0007] <sfink>
mgaudet: "Ran 50 checks (1 asserts, 48 subtests, 1 tests)"

[09:41:50.0648] <sfink>
(they all passed)

[09:42:28.0404] <mgaudet>
urk 

[09:42:46.0373] <mgaudet>
My machine appears to have caught ghosts

[09:42:49.0287] <sfink>
I regularly have problems with tests leaving various servers and things lying around.

[09:43:06.0683] <sfink>
or at least, regularly in the rare instances when I run browser-based tests

[09:43:08.0258] <mgaudet>
I will try another incantation (clobber, reboot, rebuild, run) 

[09:44:50.0770] <sfink>
I think there's an ssltunnel process that seems to linger. And I tend to do `killall -v python` after a mochitest run to clear things out. Obviously not recommended if you are running python stuff you care about.

[09:45:56.0233] <mgaudet>
I mean... I need to do something to exorcise this machine.

[10:08:42.0166] <mgaudet>
Alright. That seems to have done it. (clobber, delete objdir, reboot, rebuild, run) 

[10:14:45.0732] <Waldo>
Okay, I'm _probably_ out for the rest of the day now -- was in for the meeting, caught up on a little scrollback, now I expect only to be back if I get through packing everything to move tomorrow morning much faster than expected.  Feel free to ping if something comes up, it's at least conceivable I might notice it on phone, tho.

[10:15:16.0261] <mgaudet>
Good luck on your move! 

[11:19:50.0525] <loganfsmyth>
 * jorendorff: How do you feel about Debugger's attempt at exposing a C++ API? We have all of these static functions in each debugger wrapper type (https://searchfox.org/mozilla-central/rev/ae81637193d6687398669169f9808000a96996ee/js/src/debugger/Object.h#51) that all have exactly 1 callsite, and exist as far as I know, only because at one point there was a desire to have the debugger be usable directly in C++. Do you think that is still a worthwhile goal? I ask because we're in kind of an intermediate state where some things have these statics and some like https://searchfox.org/mozilla-central/rev/ae81637193d6687398669169f9808000a96996ee/js/src/debugger/Object.cpp#381 are just implemented for the JS API, and the inconsistency is frustrating when refactoring and trying to make things behave in a consistent way.

[11:21:45.0620] <loganfsmyth>
> <@loganfsmyth:mozilla.org> jorendorff: How do you feel about Debugger's attempt at exposing a C++ API? We have all of these static functions in each debugger wrapper type (https://searchfox.org/mozilla-central/rev/ae81637193d6687398669169f9808000a96996ee/js/src/debugger/Object.h#51) that all have exactly 1 callsite, and exist as far as I know, only because at one point there was a desire to have the debugger be usable directly in C++. Do you think that is still a worthwhile goal? I ask because we're in kind of an intermediate state where some things have these statics and some like https://searchfox.org/mozilla-central/rev/ae81637193d6687398669169f9808000a96996ee/js/src/debugger/Object.cpp#381 are just implemented for the JS API, and the inconsistency is frustrating when refactoring and trying to make things behave in a consistent way.

jorendorff: Any thoughts on this?

[11:21:59.0688] <jorendorff>
Yes, hello

[11:22:20.0299] <jorendorff>
I was never a fan of the C++ API. I believe it was added on the theory that it might be useful for Servo.

[11:22:24.0332] <jorendorff>
But I don't know that it's used.

[11:22:56.0019] <jorendorff>
Please feel free to remove it if no one is currently using it.

[11:23:07.0688] <loganfsmyth>
okie doke

[11:26:26.0494] <tcampbell>
survey.. Is `uint32_t funcIndex` or `GCThingIndex funcIndex` preferable in Opcodes.h https://searchfox.org/mozilla-central/rev/89814940895946b48b4c04c702efd2c676ec8e7e/js/src/vm/Opcodes.h#1591

[11:27:26.0392] <tcampbell>
I am leaning towards `uint32_t` for the bytecode documentation to make understanding the cost and layout of bytecode clearer.

[11:27:49.0649] <tcampbell>
Either way the accessor in the C++ will give you a GCThingIndex

[11:55:45.0089] <mgaudet>
Agreed (though no reason you can't also include mention of the GCThingIndex in the comment) 

[15:50:21.0767] <timeless>
Could someone suggest a place where I could get an opinion about this change? :-/
```js
diff --git a/public/app/core/table_model.ts b/public/app/core/table_model.ts
index 5e54f15c5f..ae6dcda697 100644
--- a/public/app/core/table_model.ts
+++ b/public/app/core/table_model.ts
@@ -48,11 +48,42 @@ export default class TableModel implements TableData {
     this.rows.sort((a, b) => {
       a = a[options.col];
       b = b[options.col];
-      // Sort null or undefined separately from comparable values
-      return +(a == null) - +(b == null) || +(a > b) || -(a < b);
+
+      function comparator(a: any, b: any) {
+        function classifier(x: any) {
+          // Sort hierarchy: null / undefined
+          if (x == null || x === '') {
+            return 0;
+          }
+          // Then NaN
+          if (Number.isNaN(x)) {
+            return -1;
+          }
+          // Then Numbers
+          if (+x === +x) {
+            return -2;
+          }
+          // Then Strings
+          return -3;
+        }
+
+        var aType = classifier(a);
+        var bType = classifier(b);
+        console.log(a, aType, b, bType);
+        if (aType !== bType) {
+          return +(aType > bType) || -(aType < bType);
+        }
+        if (aType === -2) {
+          return -(+a > +b) || +(+a < +b);
+        }
+        return -(a > b) || +(a < b);
+      }
+
+      return comparator(a, b);
     });
 
-    if (options.desc) {
+    this.rows.reverse();
+    if (!options.desc) {
       this.rows.reverse();
     }
 
```


2020-07-14
[18:21:08.0291] <arai>
what kind of opinion?  correctness, or performance, or something?

[19:29:07.0637] <timeless>
Definitely wondering about performance, obviously it's way more complicated than the thing it's replacing. Somewhat about correctness. Maybe also readability/alternate approaches.

[19:31:08.0522] <timeless>
Note: the double reverse is because `Array.prototype.sort` sorts `undefined` to the end of the list, but I think that's wrong -- I'd expect larger things to be the end of an increasing list (e.g. amount of memory / disk space / ...). I'm not really sure whether to sort Strings before or after Numbers -- open to feedback on that as well. 

[19:41:49.0564] <arai>
I don't see any difference between `-(+a > +b) || +(+a < +b)` for non-string and `-(a > b) || +(a < b)` for both-string, so `if (aType === -2) ...` can be removed I guess

[19:44:25.0817] <arai>
also, it treats a string with numeric content as a numbers (because `+"1"`  is 1), is it expected?

[20:15:41.0991] <timeless>
Yeah, I'm choosing to treat them as the same. I'm not actually sure what the range of inputs really looks like.

[20:17:16.0032] <timeless>
Hmm.. I think what it's trying to do is generate values of `-1` and `1` instead of just `0`/`1`

[20:17:23.0468] <timeless>
I'd have to go read the rules for the sort function

[20:18:57.0786] <timeless>
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Description

[20:21:17.0382] <timeless>
```js
> [1,"2","1",2].concat().sort()
[ 1, '1', '2', 2 ]
```

[20:23:44.0966] <timeless>
The thing I'm replacing just tried to special case `undefined` to be the same as `null` -- but it did it in a really strange way. (I'm 98% certain they could have used `=== null` instead of `== null`

[20:24:50.0523] <timeless>
(What it actually did was sort `null` to the end -- right before `undefined` -- because `undefined` is explicitly excluded from sorting and merely left at the end of the array.)

[20:29:42.0834] <timeless>
 * Could someone suggest a place where I could get an opinion about this change? :-/
```typescript
diff --git a/public/app/core/table_model.ts b/public/app/core/table_model.ts
index 5e54f15c5f..3902cce3ba 100644
--- a/public/app/core/table_model.ts
+++ b/public/app/core/table_model.ts
@@ -48,11 +48,43 @@ export default class TableModel implements TableData {
     this.rows.sort((a, b) => {
       a = a[options.col];
       b = b[options.col];
-      // Sort null or undefined separately from comparable values
-      return +(a == null) - +(b == null) || +(a > b) || -(a < b);
+
+      function comparator(a: any, b: any) {
+        function classifier(x: any) {
+          // Sort hierarchy: undefined
+          // -- which is excluded from the sort comparator entirely.
+          // Then undefined and empty
+          if (x === null || x === '') {
+            return 0;
+          }
+          // Then NaN
+          if (Number.isNaN(x)) {
+            return -1;
+          }
+          // Then Numbers
+          if (+x === +x) {
+            return -2;
+          }
+          // Then Strings
+          return -3;
+        }
+
+        var aType = classifier(a);
+        var bType = classifier(b);
+        if (aType !== bType) {
+          return +(aType > bType) || -(aType < bType);
+        }
+        if (aType === -2) {
+          return -(+a > +b) || +(+a < +b);
+        }
+        return -(a > b) || +(a < b);
+      }
+
+      return comparator(a, b);
     });

-    if (options.desc) {
+    this.rows.reverse();
+    if (!options.desc) {
       this.rows.reverse();
     }
 
```

[05:02:35.0635] <tcampbell>
jandem: did you already start a patch to change CHECK_THREAD? I'm tempted to just do it

[05:04:03.0376] <jandem>
tcampbell: no I didn't. I hope it works

[05:05:07.0613] <tcampbell>
based on my other test, I expect it to be fine.

[05:05:28.0380] <jandem>
makes sense

[05:13:42.0895] <tcampbell>
heh.. the only exception was off-thread-parse atomize calls

[05:47:55.0688] <yulia>
Ms2ger [~half-time dedication]: Don't know if you have had a chance to review this yet, but what should be done about this section? https://github.com/tc39/proposal-top-level-await/pull/141/commits/58263f39c55da71ead36a142f75e0edf357ab3d5

[05:54:34.0514] <Ms2ger [~half-time dedication]>
Going to try and look later today

[06:05:23.0274] <yulia>
thank you!

[12:08:29.0033] <TheQwertiest>
oooooooooh

[12:08:29.0982] <TheQwertiest>
https://hg.mozilla.org/releases/mozilla-esr78/file/98bc457deb77edd24ce283f3986eaae252b20b54/js/public/MemoryFunctions.h#l87

[12:08:57.0174] <TheQwertiest>
does that mean that SM can finally keep track of the size of `private` part of JS objects?

[12:21:37.0141] <TheQwertiest>
darn, it seems that the total allocation size via these methods it's not accessible through public api =(

[12:30:06.0556] <TheQwertiest>
 * darn, it seems that the total allocation size via these methods is not accessible through public api =(

[12:56:45.0204] <gkw>
jandem: bug 1652854

[12:56:48.0341] <botzilla>
https://bugzil.la/1652854

[12:56:50.0046] <gkw>
ohai

[13:09:13.0072] <mgaudet>
gkw: 👋

[13:09:31.0018] <mgaudet>
(Rolls into channel and drops sec bug) 

[13:09:38.0750] <mgaudet>
😎

[13:11:59.0923] <gkw>
I had stayed away for 5-6 months to make things fair for everyone, took some convincing, but I hope most are glad to have me back

[13:12:17.0208] <gkw>
mgaudet: ^ hope everyone didn't miss me too much :P

[13:12:28.0262] <mgaudet>
Oh, I missed you. 

[13:12:34.0491] <mgaudet>
You were missed for sure.

[13:13:23.0354] <gkw>
I'm always open for discussions w/Mozilla folks - ohai sdetar 

[13:13:45.0707] <sfink>
gary! good to see you around

[13:14:01.0384] <froydnj>
oh hai @gkw

[13:14:11.0977] <gkw>
sfink: I've got several needinfos for you already - the past few days' worth of bugs :D

[13:14:20.0763] <gkw>
hey hey froydnj 

[13:14:35.0465] <sfink>
yeah, I'm lagging behind on things right now

[13:15:31.0869] <gkw>
sfink: now that I'm community / external, I don't know people's plans / workloads / projects anymore, so please redirect as necessary

[13:16:11.0745] <sfink>
will do. Though I really ought to be better at giving things a quick look.

[13:18:04.0262] <iain>
Gary! Good to have you back around!

[13:18:47.0244] <gkw>
hi iain ! I've been overly-conservative and marking most as s-s so feel free to open up / resolve as they keep coming

[13:19:12.0466] <gkw>
I don't have cloud infrastructure backing me up when finding SpiderMonkey bugs

[13:20:25.0929] <sfink>
starting up your own fuzzing consultancy?

[13:20:41.0205] <sdetar>
gkw: Hi Gary, nice to hear from you and see you back

[13:20:46.0691] <gkw>
I don't know. Need to find something worthy first

[13:20:56.0625] <gkw>
hey @sdeta

[13:21:21.0656] <gkw>
hey sdetar always good to work with teams that appreciate me (fuzzing team too)

[13:23:09.0092] <sdetar>
gkw: help is welcome. are you still living in Vancouver 

[13:24:19.0996] <gkw>
sdetar: yep, I'm here in Vancouver, BC

[13:24:40.0878] <sfink>
argh, I went and broke the prettyprinter loading, and although I'm trying to stick to fixing these sec bugs, it's really annoying to have to load them manually

[13:25:38.0942] <sdetar>
gkw: Cool, maybe we could find some in the near future and catchup

[13:26:18.0165] <gkw>
of course, anybody is welcome should the US border open up

[13:27:37.0144] <gkw>
sdetar: let me know! Weather here is very very nice in the summer, snow in the winter compared to the Bay Area, and not as freezing as Toronto (sorry East Coast folks, I grew up in the tropics)

[13:28:30.0735] <mgaudet>
Well. At least the masthead gives a good idea of what to expect

[13:30:06.0868] <sdetar>
gkw: If the border was open, I would be spending some time at Whistler on the mountain bike.  Just dreaming for now.

[14:00:18.0843] <mgaudet>
confession: Wrote down my vague unease about WindowProxy in as much detail as possible to seek help. ¯\_(ツ)_/¯ Here's hoping what we have already does the right thing. 

[14:00:24.0758] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:10:17.0664] <RyanVM>
gkw: ❤️

[14:17:50.0696] <decoder>
gkw: langfuzz found the same bug, unfortunately :/

[14:31:35.0998] <gkw>
decoder: well, 3 hour time period split, right ? :)

[14:32:35.0718] <decoder>
gkw: there is a 72h period and I believe the current policy for internal findings is sec-bounty-

[14:32:38.0883] <decoder>
i am clarifying that now

[14:34:10.0869] <gkw>
https://www.mozilla.org/en-US/security/bug-bounty/

[14:34:26.0628] <gkw>
"The security bug must be original and previously unreported. Duplicate submissions within 72 hours will split the bounty between reporters. If duplicate submissions are of unequal quality, the split will be at the level of the lesser report, and the greater report will receive a pro-rated additional bounty on top of the split."

[14:34:36.0240] <gkw>
-> split the bounty between reporters

[14:38:54.0696] <ampdot>
Where is the TC39 proposal for removing subclassing from JS builtins?

[14:40:12.0717] <ptomato>
https://github.com/syg/proposal-rm-builtin-subclassing

[15:07:34.0060] <timeless>
> <@arai:mozilla.org> I don't see any difference between `-(+a > +b) || +(+a < +b)` for non-string and `-(a > b) || +(a < b)` for both-string, so `if (aType === -2) ...` can be removed I guess

Wow, I'm out of it. Finally awake enough to properly parse. Yes, the inner `+`s can be dropped, and thus the `aType===-2` case is indeed no longer special and can be dropped. Thanks for the feedback.

[15:29:37.0834] <gkw>
 * decoder: well, 3 hour time period split, right ? :) - edit: I meant 3 day time period split, d'oh!

[15:34:29.0065] <gkw>
sfink: please review https://phabricator.services.mozilla.com/D83467 ?

[15:36:44.0684] <sfink>
r+ and pushed


2020-07-15
[17:22:52.0920] <Waldo>
> <@mgaudet:mozilla.org> confession: Wrote down my vague unease about WindowProxy in as much detail as possible to seek help. ¯\_(ツ)_/¯ Here's hoping what we have already does the right thing. 

Where? Would be interested to read once I'm not moving again. 

[17:23:47.0437] <mgaudet>
Waldo: https://bugzilla.mozilla.org/show_bug.cgi?id=1652868

[17:25:27.0008] <Waldo>
Movers shifted to afternoon, then the previous move they did went long, they got here maybe 45 minutes ago or so. Hopefully I can be settled enough to be on all tomorrow. Tho I still have taxes to do, but that shouldn't be too horrific...

[17:29:31.0327] <Waldo>
Hrm, Bugzilla CSS isn't terribly well sized for mobile...

[19:41:59.0671] <Waldo>
Welp.  I am moved in.  And I have no idea where in the boxes I have, are the things I need most urgently, because they seem to be oriented not absolutely most helpfully.  This is gonna be fun.

[22:53:54.0346] <arai>
does anyone have data about how many uncaught rejection can be appended to `CycleCollectedJSContext.mUncaughtRejections` usually/at maximum ?

[22:54:01.0270] <arai>
I'm looking at bug 1646258

[22:54:02.0637] <botzilla>
https://bugzil.la/1646258 — NEW (nobody) — Crash in [@ IPCError-browser | ShutDownKill | mozilla::dom::PromiseDebugging::AddConsumedRejection]

[22:54:54.0514] <arai>
according to the crash report, there are ~800k rejections (including consumed later) before getting flush

[22:55:21.0538] <arai>
I wonder if that's possible/reasonable

[22:56:38.0263] <arai>
now building with logging enabled, and I'm going to use it for a while

[23:15:19.0358] <jandem>
gkw: hey, good to have you here! 🙂 I'll look at that fuzz bug in a bit, thanks

[02:14:49.0960] <arai>
waited 3 hours. playing YouTube, with devtools opened.  there were at most 5 rejections before flush.  I wonder how ~800k rejections can happen

[02:20:18.0941] <arai>
(of course I can write a small JS code that leaves 800k unhandled rejections tho, I'm not sure how such case can happen in wild, without intention

[05:36:22.0739] <yulia>
I think I asked this before but forgot -- how do you print stencil information? I think it was a property for dis?

[06:13:33.0934] <tcampbell>
yulia: there isn't a specific dump of stencil info right now, but I think the conversation you are recalling was about this https://searchfox.org/mozilla-central/source/js/src/shell/js.cpp#3350

[06:14:24.0576] <yulia>
ah, yep.

[06:14:45.0087] <yulia>
tcampbell: im currently adding a check for if "await" was found in the body of a module, and marking it as async

[06:15:12.0221] <yulia>
And i am thinking of how to verify that it is doing what I want it to do before implementing the rest of the behavior

[06:17:03.0329] <tcampbell>
mgaudet: did you improve the dumpTree patch I sent you? We should probably land something similar..

[06:17:30.0408] <mgaudet>
tcampbell: I did a bit... lemme see if I -committed- the change or not :P 

[06:17:40.0998] <tcampbell>
(I'd probably start with printf's in the right code to being with.. lol)

[06:18:09.0983] <yulia>
sounds good, ill ddo that

[06:18:15.0820] <yulia>
 * sounds good, ill do that

[06:18:29.0828] <mgaudet>
tcampbell: the only thing I did was add `script->hasBytecode()` to the dump 

[06:18:39.0786] <mgaudet>
IIRC

[06:20:00.0267] <tcampbell>
yulia: are you using the exising `ImmutableScriptFlags::IsAsync`?

[06:22:34.0531] <yulia>
tcampbell: yes, i added a ModuleAsync enum

[06:23:12.0217] <tcampbell>
makes sense. The existing one is very specific for functions, but we should fix it

[06:43:01.0650] <emilio>
jandem: can you cc me in bug 1652854 (mostly out of curiosity, assuming the issue is nightly-only)

[06:43:03.0199] <botzilla>
https://bugzil.la/1652854

[06:47:01.0366] <jandem>
emilio: done!

[07:12:54.0508] <tcampbell>
hmm.. why is `SM(mozjs-crate)` called a debug build if it builds without asserts?

[07:16:56.0812] <emilio>
thanks!

[07:17:57.0732] <tcampbell>
> <@tcampbell:mozilla.org> hmm.. why is `SM(mozjs-crate)` called a debug build if it builds without asserts?

Oh, because it builds twice. Once with debug and once without.

[07:45:40.0631] <yulia>
tcampbell: i think this is a quick question: Why do we have ModuleBuilder mixed with ModuleObject in builtins/ModuleObject? I am not sure I am reading it right, but it looks like ModuleBuilder helps generate the stencil script, while ModuleObject is responsible for the instance?

[07:46:37.0372] <tcampbell>
yulia: a `ModuleObject` is a gc-thing associated with a js::BaseScript, in the same way a JSFunction can be

[07:47:04.0628] <tcampbell>
the ModuleBuilder exists only in parsing and was to perform some of the processing steps that linking requireds

[07:47:48.0394] <tcampbell>
(eg. `import a from "mod"; export a;` behaves like `import a from "mod"; export a from "mod"`)

[07:48:44.0339] <tcampbell>
these sort of issues are resolved during parsing and the modulebuilder is used to create the stencil.

[07:49:42.0665] <tcampbell>
during stencil-instantiate we convert the stencil to ModuleObject. *Then* the module linking code further processes the ModuleObject to resolve stuff *across* modules. 

[07:49:53.0484] <yulia>
ok so if i am reading it right, we are defining them in the same place because there is some shared behavior when we link stuff

[07:50:15.0499] <yulia>
namely, live links between modules i guess

[07:50:28.0524] <tcampbell>
I think in future it would be ideal if the linking used the stencil directly

[07:50:41.0773] <tcampbell>
and also for parts of modulebuilder to be absorbed into parser

[07:51:11.0589] <yulia>
right

[07:51:26.0923] <tcampbell>
when processing imports/exports we transform the list a few times and en d up with these temporary arrays

[07:52:38.0343] <tcampbell>
right now StencilModuleMetadata is why *I* think the right cut point in the operation to save to disk might be

[07:53:04.0881] <tcampbell>
so any steps that can be resolved looking at just the single module are done

[07:53:24.0637] <yulia>
that reflects my interpretation so far actually

[07:53:34.0703] <tcampbell>
but we don't do anything cross-module, which will allow us to use the same stencil in different module graphs

[07:53:49.0202] <tcampbell>
 * right now StencilModuleMetadata is what _I_ think the right cut point in the operation to save to disk might be

[07:54:39.0531] <tcampbell>
an example that is weird is "function-declarations". We copy it from ModuleBuilder -> StencilModuleMetadata -> ModuleObject, and then delete it during the es linking step

[07:54:58.0532] <yulia>
ill post my patch in a bit and have you take a look at it. its the first time i touch a stencil so i might have gotten a few things wrong. but im using StencilModuleMetadata to track what i can determine from the parsing step

[07:55:26.0248] <yulia>
which, as far as i can tell, is only marking it as async so far (i might realize there are more later)

[07:55:52.0837] <yulia>
what i don't think i can do is determine what its parents are, or how many unresolved modules it has

[07:56:02.0669] <yulia>
 * what i don't think i can do is determine what its parents are, or how many unresolved async modules it has

[07:56:22.0213] <yulia>
but its going surprisingly smoothly so far? building on the work you landed yesterday

[07:56:31.0801] <tcampbell>
hot off the presses

[07:57:40.0782] <tcampbell>
I think for your understanding, thinking that modulebuilder is just a storage place inside parser that will be going away is probably best. (Hopefully we can *actually* do that)

[07:58:12.0873] <yulia>
ok, good. that was my impression but its placement signalled that it might be used for more, and it looks like it is. Good context to have. 

[07:58:22.0311] <tcampbell>
The async marking might already be better situated in ScriptStencil::immutableFlags

[07:58:29.0427] <tcampbell>
 * The async status might already be better situated in ScriptStencil::immutableFlags

[07:58:36.0269] <yulia>
right so i am a little lost about how those get set

[07:58:48.0066] <tcampbell>
/me looks for easiest example

[07:58:51.0640] <yulia>
as far as i can tell, in Function it is set in CreateFunction

[07:59:18.0700] <yulia>
but we don't know when we create a StencileModuleMetadata if we are working with something async afaik?

[07:59:37.0840] <tcampbell>
https://searchfox.org/mozilla-central/search?path=&q=hasdirecteval

[08:00:14.0406] <tcampbell>
the SharedContext accessors encode their flags into `immutableFlags` that is automatically propegated all the way to the JSScript

[08:02:42.0932] <tcampbell>
(The distinction between what lives in ModuleObject and what in BaseScript is arbitrary and I'll struggle to put my justifications into words)

[08:02:46.0974] <yulia>
ugh ok dumb c++ question, legit dumb sorry

[08:03:02.0854] <yulia>
we have this declaration that a class ModuleSharedContext exists

[08:03:03.0636] <yulia>
https://searchfox.org/mozilla-central/source/js/src/frontend/SharedContext.h#108

[08:03:26.0892] <yulia>
this is distinct from FunctionBox, which inherits from SharedContext

[08:03:27.0497] <yulia>
https://searchfox.org/mozilla-central/source/js/src/frontend/SharedContext.h#307

[08:04:04.0007] <yulia>
but it looks like ModuleSharedContext has knowledge of what is going on in SharedContext, how is this?

[08:04:40.0554] <yulia>
sorry, my passable cpp is failing here

[08:05:01.0831] <jandem>
ModuleSharedContext.h includes SharedContext.h which defines the class, so it has the definition

[08:05:27.0878] <yulia>
I see. ok that clears it up

[08:05:41.0267] <tcampbell>
btw, "SharedContext" means shared between bytecode emitter and parser. It took me a looong time to realize this

[08:05:55.0271] <yulia>
ah. thats good to know

[08:06:00.0988] <yulia>
i thought it was shared between multiple contexts

[08:06:08.0198] <yulia>
as in, modules / functions 

[08:06:37.0498] <tcampbell>
modulesharedcontext / functionbox, etc correspond to our rough catagories of scripts (to match the ES spec): Module, Global, Function, Eval

[08:06:46.0915] <tcampbell>
 * modulesharedcontext / functionbox, etc correspond to our rough catagories of scripts (to match the ES spec.. roughly): Module, Global, Function, Eval

[08:06:48.0426] <yulia>
right

[08:07:42.0101] <tcampbell>
Function may be standalone (eg `new Function` in JS), or nested in another script. None of the other types can nest

[08:09:43.0456] <tcampbell>
JSFunction vs BaseScript is arbitrary in spec, but roughly JSFunction is the real functions in the spec, and BaseScript is vaguely related to source text where spec says things like "Return the result of EvaluateBody of the parsed code that is F.[[ECMAScriptCode]] "

[08:49:35.0803] <sfink>
https://treeherder.mozilla.org/logviewer.html#/jobs?job_id=309810862&repo=autoland&lineNumber=7528

[08:50:14.0813] <sfink>
https://treeherder.mozilla.org/logviewer.html#/jobs?job_id=309810419&repo=autoland&lineNumber=3660

[08:57:54.0259] <sfink>
bug 1652891 	

[08:57:55.0607] <botzilla>
https://bugzil.la/1652891 — NEW (nobody) — WeakMap key delegate could fail to preserve key if map zone is not collected

[09:12:37.0584] <mgaudet>
To mark a MIR op as 'might throw' is it sufficient to call `setGuard()`, are there other gotchas I should watch out for (debating trying to extend `{M,L}InitElem` to support private fields, vs starting fresh and defining `{M,L}InitPrivateElem`)

[09:22:11.0611] <Benjamin Bouvier>
mgaudet: i think yes, this makes the instruction unmovable and unDCEable, at least

[09:25:59.0504] <iain>
mgaudet: Is there any hope for making LInitElem infallible in the private field case by guarding beforehand?

[09:29:11.0672] <mgaudet>
Hmm. So, my recollection (though weak -- boy it's been a long time since I've done Ion work!) is that it's not really feasible to generate control flow inside ion. Now I don't know how that ties into exceptions. I suppose if I could generate a `ConditionalThrowPrivate` that does `obj.[[HasOwnProperty]](#privateName)` and throws (or doesn't depending on Init/Get/Set). 

[09:30:14.0443] <mgaudet>
Then If I have that, I can simply do `ConditionalThrowPrivate` + the normal Init/Set/Get code path. 

[09:30:59.0327] <jandem>
MInitElem has side-effects so it's never eliminated (setGuard has no effect)

[09:35:51.0705] <mgaudet>
The more I think about it, the more I think the conditional throw op makes the most sense . 

[09:36:15.0151] <mgaudet>
Least amount of changes required around other code paths.

[09:37:21.0054] <nbp>
mgaudet: `setGuard()` is the most invading flag, it prevents most of the optimizations coming after.

[09:37:54.0332] <nbp>
mgaudet: One way to do it is to add a new instruction to guard for the reserved space ahead.

[09:38:37.0259] <jandem>
mgaudet: what's the problem with an instruction like MInitElem (MInitPrivateElem) that does just a VM call? maybe an IC later

[09:38:41.0908] <mgaudet>
Hrmm. Or. The big swing (admitting I goofed ) would be to instead go back to the drawing board for everything, then implement a HasPrivate opcode, and instead change the ElemOpEmitter to emit HasPrivate, and replace {Init,Has,Get}PrivateElem with HasPrivate + {Init,Has,Get}Elem

[09:38:59.0714] <mgaudet>
This has the advantage of subsequently making the egnomic brand checks proposal easier to implement

[09:39:37.0400] <nbp>
Also the ability to fold the check for private fields, if multiple have the same checks.

[09:40:14.0851] <mgaudet>
I ruled that out ages ago... but now I don't remember why. I should revisit that. 

[09:40:53.0212] <nbp>
Are you familiar with our AliasSet?

[09:41:17.0175] <mgaudet>
Not the Ion one particularly

[09:41:26.0160] <jandem>
factoring out the HasPrivate check could be interesting if that lets you reuse more bytecode ops

[09:43:19.0414] <nbp>
mgaudet: They are likely to be what you expect, apart from being a bit coarse grain by detailing the kind-of-aliased-data, then functions are used to identify each of the fields (`M…::congruentTo`)

[09:43:49.0601] <nbp>
as well as `foldsTo` for actually replacing congruent instructions.

[09:48:17.0276] <jandem>
`JSOp::CheckNoPrivateFIeld` or so? it would be a no-op if there's no field yet. Later we could apply the IC hammer to that op

[09:48:42.0924] <mgaudet>
Yeah, was sort of thinking something along those lines

[09:48:43.0783] <nbp>
> <@jandem:mozilla.org> MInitElem has side-effects so it's never eliminated (setGuard has no effect)

hum … I would have expected to see it in ScalarReplacement.cpp , strange …

[09:49:20.0663] <jandem>
MInitElem is the slow path that's not super hot (hopefully)

[09:49:30.0009] <mgaudet>
right now thinking about error messages a bit; is there precedent for passing an error message in bytecode? 

[09:49:59.0911] <mgaudet>
ie. `CheckPrivateField obj, <bool; throw condition>, jsmsg`

[09:50:31.0721] <mgaudet>
 * ie. `CheckPrivateField obj, id, <bool; throw condition>, jsmsg`

[09:50:41.0612] <jandem>
we use an enum for it sometimes, like ThrowMsgKind (I think a.rai changed from jsmsg to enum to decouple)

[09:51:05.0758] <mgaudet>
fair. 

[09:51:10.0217] <nbp>
mgaudet: we use the bytecode position to reconstruct the expression in which the error occured.

[09:52:09.0529] <nbp>
we have an expression decompiler which is dedicated to that, and also used by the handy `dis` function.

[09:52:51.0632] <mgaudet>
/me nods. I am only about 60% it's working correctly right now, but I do have a note to validate it.

[09:53:10.0560] <mgaudet>
(It's definitely not working entirely, as dis is a bit funky) 

[09:54:16.0673] <mgaudet>
Re-reading my discussion about how I ended up with the three new opcodes, I think I hadn't quite processed everything about private fields yet. Honestly, I think it would only be sensible for me to prototype cutting this down to one op. 

[10:44:16.0814] <chaircrusher>
Hey, how exactly would one add a named variable to a SpiderMonkey execution context?

[10:44:52.0180] <chaircrusher>
Like, I want to try and use C++ API to add variables with values instead of making a string and evaluating it as a script.

[10:45:14.0361] <tcampbell>
Is adding them to the global object acceptable?

[10:46:41.0018] <chaircrusher>
Well right now I have an instance of SpiderMonkey interpreter set up and to set MyVar to "hello" I make a little script "var MyVar='hello';" and evaluate it.

[10:47:21.0766] <chaircrusher>
How would I add a variable to the global object, and does that end up the same way as running that script?

[10:48:13.0234] <tcampbell>
if you add to global object (using JS_SetPRoperty, etc) it will be visible to any scripts you run in that global object. They act similar to a `var MyVar='hello';`

[10:48:47.0764] <tcampbell>
If you want these to be temporary for the a single script and not poluting the global, there are very unstable APIs like https://searchfox.org/mozilla-central/source/js/public/CompilationAndEvaluation.h#184-186

[10:49:16.0481] <chaircrusher>
so properties on the global show up as named vars when you run a script.

[10:49:59.0755] <tcampbell>
yep

[10:50:24.0062] <chaircrusher>
thanks

[10:50:32.0692] <tcampbell>
named top-level vars become properties on the global (or window in browser)

[10:50:59.0523] <tcampbell>
so if you ran evaluate `var a = 3;` and then another file `print(a)`, you would see 3

[10:51:20.0660] <chaircrusher>
and you can look them up with GetProperty

[10:52:16.0044] <tcampbell>
Yep

[10:52:50.0046] <tcampbell>
Let/const will be different, but I don't remember precise details

[10:53:49.0595] <tcampbell>
(I think scripts see eachothers top-level let's, but the normal JS_GetProperty does not without special tricks)

[10:59:21.0538] <chaircrusher>
well, for now everyone expects them as Vars. Is there anything to search for to find documentation on Let and Const in this context?

[12:52:38.0161] <Waldo>
jorendorff++

[12:52:45.0077] <Waldo>
(bug 1485588)

[12:52:47.0898] <botzilla>
https://bugzil.la/1485588 — REOPENED (jorendorff) — [clang-tidy] Prohibit the use of the C standard library for character classification

[13:53:32.0074] <Waldo>
mgaudet: Science-dogging!  🙌

[13:54:03.0282] <Waldo>
mgaudet: So I will throw out some basics, it's possible there are holes and omissions in this, but at least it'll give you a leg up when peterv comments.

[13:54:25.0042] <mgaudet>
Anything would be helpful! 

[13:54:34.0255] <mgaudet>
I'm wayyyyy over my head about this stuff

[13:55:30.0504] <Waldo>
mgaudet: Basically, `Window` objects shouldn't be accessible to script at all, only `WindowProxy` objects.  When you have a WP, private field interactions should first attempt to unwrap the proxy into a `Window` -- implying a security check.  If that check fails, all is good.  If that check passes, it should be presumed you have access to the actual underlying window.

[13:56:04.0055] <Waldo>
mgaudet: I think in your weakmap, you want to have the `Window` as the key, and the value as the value, and you would query that after the prior security check occurs.

[13:57:02.0491] <mgaudet>
Ok. So that's a great start: It's probably -wrong- right now then.

[13:57:40.0876] <Waldo>
mgaudet: Note that if you unwrap a WP, you get a W, but if you unwrap some other random proxy, you should just get back that proxy.

[13:57:54.0615] <Waldo>
How shocking.  🙂

[13:59:14.0199] <mgaudet>
Given the WHATWG blog's subheading... I'll take it 

[14:02:12.0223] <mgaudet>
Waldo: So, when it's said that the WindowProxy stays the same, while the underlying window is changed; do you know what this looks like in HTML? I'm wondering if this is like getting a handle to an iframe's 'window', but then navigating -- what is actually held is the window proxy, which remains the same, but the -window- changes

[14:02:43.0407] <Waldo>
mgaudet: Yes.  Script never directly accesses `Window`, only through a `WindowProxy` that wraps it.

[14:03:20.0067] <mgaudet>
Ok. Hmm. Need to spend some time writing some test cases with this newfound knowledge (Thanks BTW)! 

[14:03:40.0524] <mgaudet>
I'm going to leave a link to this conversating in that bug, just so peter.v knows where we are :P 

[14:04:56.0136] <Waldo>
Well, he _is_ in channel, I did mention him, so there's that.  🙂

[14:05:00.0136] <mgaudet>
 * I'm going to leave a link to this conversation in that bug, just so peter.v knows where we are :P 

[14:05:57.0938] <mgaudet>
true-- but backscroll :P

[14:31:30.0893] <mgaudet>
confession. Huh. So I did a first stab at the 1-opcode version of private fields (skipping JITs for now).... and it passed my tests. !? Anyhow. Will revisit this tomorrow... 

[14:31:37.0589] <mgaudet>
/me is suspicious 

[14:32:06.0370] <mgaudet>
Hah. Wrong punctuation for the bot. 


2020-07-16
[04:42:14.0411] <yulia>
hm, exciting times. i am now at the bytecode part of implementing async await

[04:42:35.0402] <yulia>
and its very heavily oriented around functions. I am wondering if we need to substantially change it in order to make it work with modules

[04:42:54.0468] <yulia>
it relies on generators, which it looks like might rely on being in a function?

[04:43:27.0969] <yulia>
i suspect this is the pattern that is closest to what i need to do

[04:43:28.0815] <yulia>
https://searchfox.org/mozilla-central/source/js/src/vm/Opcodes.h#2186-2191

[04:57:00.0275] <yulia>
hm, maybe not so bad actually...

[04:57:10.0266] <littledan>
huh, what do you mean without modules?

[04:57:55.0903] <yulia>
littledan: our async/await implementation relies heavily on generators, and i am trying to make sense of how to make it work for modules

[05:01:10.0118] <littledan>
oh, you're looking at TLA

[05:01:32.0347] <littledan>
so, I don't know how SM works, but V8 parses modules and scripts sort of as functions

[05:01:38.0107] <littledan>
with TLA, you parse it as an async function

[05:01:45.0916] <littledan>
so, as a generator

[05:03:14.0447] <yulia>
right.. just trying to think of how to do it... i think i am starting to grasp our implementation

[05:07:46.0647] <littledan>
good, sorry, I don't really know anything about SpiderMonkey's mechanics

[05:13:32.0372] <littledan>
sorry, wrong channel!

[05:54:46.0106] <nbp>
https://youtu.be/TPm-UhWkiq8?list=PLNYkxOF6rcIBhuGsbO6t8-OBE5-fVPe7K&t=13 Hum … I know this person!

[06:55:32.0914] <jorendorff>
mgaudet: So I'm guessing the one-op version of private fields just has a "check access" opcode, followed by a regular get/set/hasprop op?

[06:55:50.0853] <mgaudet>
> <@jorendorff:mozilla.org> mgaudet: So I'm guessing the one-op version of private fields just has a "check access" opcode, followed by a regular get/set/hasprop op?

Right. 

[06:56:58.0367] <mgaudet>
Previously I hadn’t realized 1) there -is- a reasonably efficient design for it, 2) if designed correctly it will make ergonomic brand checks trivial to implement. 

[06:57:15.0767] <jorendorff>
OK. That means the ProxyHandler interface in the patch I'm looking at (bug 1644160) basically has to be redone from scratch, right?

[06:57:17.0111] <botzilla>
https://bugzil.la/1644160 — ASSIGNED (mgaudet) — Proxy Support for Private Fields

[06:57:54.0797] <jorendorff>
wait, we _could_ keep that... it's just a little weird

[06:57:57.0628] <mgaudet>
Not really no. Proxies still need special casing, because we are special casing the ‘spec algorithms’ not the butecode. 

[06:58:05.0618] <mgaudet>
Bytecode.  

[06:58:20.0503] <mgaudet>
(Sorry, typing on phone will making. Breakfast)

[06:58:26.0124] <jorendorff>
sure, no rush

[06:58:48.0525] <mgaudet>
That patch still seems to work in my tests. 

[06:58:56.0031] <jorendorff>
so when someone does a GetProperty on an object, it could actually be a private field access, and nobody really need to know because all the mechanics are the same. If it _is_ a private field access, we can assert that the caller _already_ checked that the field exists

[07:00:01.0096] <jorendorff>
In the case of a scripted proxy, the proxy handler has to detect that the "property-key" we're checking is actually a private field key

[07:00:16.0647] <jorendorff>
and we can do that upstream of these virtual methods

[07:00:31.0044] <mgaudet>
Yes. 

[07:01:45.0863] <mgaudet>
It was actually the proxy thing that made me realize this single operation made sense, because originally I had the proxy’s throwing, But we didn’t need to have that there because it was a superfluous check

[07:13:07.0613] <tcampbell>
Should I be sending an intent-to-ship for a needs-consensus-PR that adds syntax? `export ns as foo from "mod";`

[07:24:11.0093] <tcampbell>
 * Should I be sending an intent-to-ship for a needs-consensus-PR that adds syntax? `export * as ns from "mod";`

[07:24:30.0830] <yulia>
oh, hm that is a good question

[07:24:41.0807] <yulia>
it feels kind of like we ... should?

[07:33:29.0184] <jorendorff>
yes

[07:55:23.0882] <tcampbell>
sent. hopefully it isn't too much word salad

[08:02:43.0103] <tcampbell>
confession: Pushed my first ever syntax change for spidermonkey! (Bug 1496852)

[08:02:45.0305] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[08:02:46.0473] <botzilla>
https://bugzil.la/1496852 — NEW (tcampbell) — Implement export-ns-from syntax

[08:03:04.0467] <tcampbell>
as opposed to my usual shuffling of deck chairs

[08:07:49.0539] <Ms2ger [~half-time dedication]>
Does the "t" in your name stand for "titanic"?

[08:09:57.0369] <tcampbell>
ha

[08:20:16.0702] <sfink>
hehehe. mgaudet said buttcode.

[08:31:47.0960] <yulia>
what exactly is a dotGenerator?

[08:31:52.0502] <yulia>
https://searchfox.org/mozilla-central/search?q=symbol:F_%3CT_JSAtomState%3E_dotGenerator&redirect=false

[08:33:53.0881] <Ms2ger [~half-time dedication]>
It's a string ".generator"

[08:34:07.0447] <Ms2ger [~half-time dedication]>
Why? I dunno

[08:35:29.0887] <yulia>
hm, ok i see

[08:40:31.0511] <iain>
I believe `.generator` is a fake var that we use to store the state of the generator

[08:40:44.0032] <iain>
We also have `.this`

[08:41:10.0762] <iain>
I think they start with dots to prevent them from colliding with actual vars

[08:43:09.0413] <iain>
See the first comment here: https://bugzilla.mozilla.org/show_bug.cgi?id=987560

[08:48:48.0841] <yulia>
ok, great. If i got it right,  then it looks like i can create an async emitter that covers the async behavior in https://searchfox.org/mozilla-central/source/js/src/frontend/FunctionEmitter.cpp#406,434,588

[08:49:01.0562] <yulia>
and reuse it in for module

[08:57:59.0122] <sfink>
jonco: did you see anba's comment https://phabricator.services.mozilla.com/D83613#inline-478058 ?

[08:58:21.0639] <nbp>
> <@tcampbell:mozilla.org> confession: Pushed my first ever syntax change for spidermonkey! (Bug 1496852)

You scared me, I thought this was yet another rewrite-the-codebase kind of bug.

[08:58:48.0529] <jonco>
sfink: ah, no I didn't see that

[09:02:33.0532] <jonco>
hmm, promises don't always uses that method though

[09:13:11.0500] <jonco>
anba: yes that sounds like it could be a problem

[09:14:17.0262] <jonco>
thanks

[11:31:55.0421] <sfink>
jonco: the incumbent global isn't already the global object of that realm? I thought `object->nonCCWGlobal()` would always be a no-op.

[12:01:38.0952] <mgaudet>
jorendorff: Ok. Having gotten to parity with the previous implementation approach, I strongly prefer this single-op approach. It's not -quite- ready for review (need to inject a few asserts, comment a few things), but I wanted to give you a heads up. 

Apologies to all the reviewers on private fields already, but I am reasonably sure this is just the better approach.

[12:01:54.0717] <jorendorff>
no, this is greaet

[12:03:38.0017] <jorendorff>
mgaudet: I'm just looking at the proxy patches and still wondering if it's a good idea to have separate methods. I don't understand what the layering is then; is there an implementation layer at which only the property operations exist, and a higher level at which there are separate PrivateName operations?

[12:05:32.0039] <jorendorff>
leaning toward: there should only be one meta-object protocol, private field accesses should consistently be treated as property accesses, and all places that want to special-case private fields should use an if-statement

[12:07:08.0705] <mgaudet>
Externally to proxies, I think we agree. Internal to proxies I think we'll need special dispatch in the handler for private fields regardless to handle the difference between scripted and forwarding proxies

[12:07:58.0038] <mgaudet>
I'm open to more concrete suggestions around what you're thinking tho -- I'll be honest, there's a non-zero chance you're going -whoosh- over my head and I'm just not noticing

[12:08:56.0426] <jorendorff>
ok, i'll keep looking. thanks

[12:09:31.0406] <sfink>
let's unship scripted proxies

[12:09:41.0432] <jorendorff>
:D

[12:10:12.0956] <mgaudet>
I mean... the spec only really talks about scripted proxies... so I guess to your point Jason, we could always put the special casing inside the ScriptedProxyHandler

[12:10:40.0752] <mgaudet>
Though we'd still need to have Proxy expandos... 

[12:12:24.0926] <mgaudet>
I don't know that really works out... would need to do a more serious think about it. 

[12:40:00.0604] <RyanVM>
sfink: ping

[12:49:43.0955] <RyanVM>
un-ping

[13:03:22.0739] <Itms>
Hello!

[13:06:41.0142] <Itms>
I am a developer of 0 A.D., we embed SpiderMonkey and I am maintaining this. Due to my absence the past years we have fallen way behind upstream and we are still using SM45! I am currently working on upgrading it. However, I am blocked by an issue under SM45 and I could use some help... Thankfully the issue should affect up to SM68 so my question should not be too stale

[13:08:27.0745] <Itms>
Basically we have, in our codebase, an "ObjectToIDMap" code which is mostly copy-pasted from js/ipc/JavaScriptShared.{h,cpp}. I would like to perform the equivalent of this commit: https://hg.mozilla.org/mozilla-central/rev/fa3bffbe3ec8

[13:09:10.0719] <jorendorff>
wow

[13:09:19.0895] <Itms>
So I would like to use, just like upstream SpiderMonkey up to SM68, a js::MovableCellHasher<JS::Heap<JSObject*>>

[13:09:37.0978] <Itms>
jorendorff: I'm so ashamed just to write that!

[13:10:02.0256] <jorendorff>
well, don't be, obviously, it's awesome that project is still alive and kicking

[13:10:32.0206] <jorendorff>
mgaudet: hey, so it seems like most proxies do want expando behavior, all except for transparent CCWs (which forward), COWs (banned), and DeadObjectProxies (always throw)

[13:11:52.0191] <Itms>
and unfortunately this doesn't build on MSVC and it segfaults on GCC. I don't understand how it can work, because js::MovableCellHasher<JS::Heap<T>> has a definition I do not understand

[13:12:09.0463] <mgaudet>
/me curses destructuring

[13:13:00.0224] <Itms>
it has
```
using Key = JS::Heap<T>;
static void rekey(Key& k, const Key& newKey) { k.unsafeSet(newKey); }
```
but `JS::Heap` does not seem to have a `unsafeSet` method

[13:13:21.0458] <Itms>
am I wrong?

[13:18:39.0704] <jorendorff>
Itms: The only `unsafeSet` method I see is https://searchfox.org/mozilla-central/source/js/src/gc/Barrier.h#450

[13:18:47.0327] <jorendorff>
...today, that is

[13:19:08.0182] <Itms>
jorendorff: exactly. that's the same in SM45

[13:19:44.0654] <jorendorff>
HeapPtr inherits that https://searchfox.org/mozilla-central/source/js/src/gc/Barrier.h#653

[13:20:21.0543] <Itms>
but `JS::Heap` is not a `HeapPtr`, is it?

[13:21:08.0097] <jorendorff>
right, it isn't

[13:21:30.0159] <jorendorff>
i'm at a loss

[13:21:53.0792] <jorendorff>
I can't help but imagine that what it means is, do an unbarriered write

[13:22:17.0615] <jorendorff>
to update the value during GC without modifying GC state

[13:22:49.0201] <ptomato>
is it possible that that template was just wrong, but nothing ever instantiated it within the SM codebase?

[13:22:52.0929] <jorendorff>
ltms, does this exist in SM45? https://searchfox.org/mozilla-central/source/js/public/RootingAPI.h#350

[13:24:48.0987] <jorendorff>
it gets better, the exact line of code is still there today https://searchfox.org/mozilla-central/source/js/public/RootingAPI.h#854

[13:26:13.0961] <Itms>
> <@jorendorff:mozilla.org> ltms, does this exist in SM45? https://searchfox.org/mozilla-central/source/js/public/RootingAPI.h#350

No, it doesn't exist

[13:27:34.0429] <Itms>
Hello ptomato ! Apparently `ipc::ObjectMapID` used it until SM68 (https://hg.mozilla.org/mozilla-central/rev/fa3bffbe3ec8)

[13:28:29.0923] <jorendorff>
I changed that line to `k.gloooooooorp(newKey)` to see if it still compiles. I expect no, the browser appears to use it...

[13:28:34.0671] <jorendorff>
building now

[13:28:37.0399] <jorendorff>
we'll see

[13:28:44.0477] <Itms>
and if you look at all the tickets linked to https://bugzilla.mozilla.org/show_bug.cgi?id=1194544, `js::MovableCellHasher<JS::Heap<JSObject*>>` was widely used to make JSObject stable maps

[13:28:45.0449] <jorendorff>
mgaudet: I do want to chat about proxies

[13:29:37.0232] <mgaudet>
jorendorff: Can do! Does... 10-15 min from now work for you? 

[13:30:20.0881] <jorendorff>
sure!

[13:30:44.0113] <mgaudet>
Ok. I'll ping you 

[13:33:44.0771] <Itms>
by the way, if you folks have a better suggestion than `js::GCHashMap` based on `js::MovableCellHasher<JS::Heap<JSObject*>>`, for keeping a map of `JSObject`s, I'm also interested. If it removes the need for an obscure API I'm all for it 😀

[13:34:14.0236] <Itms>
I was just trying to match upstream changes here

[13:36:20.0122] <ptomato>
hmm, in GNOME we don't have any hashmaps with JSObject as the key type, only the value type

[13:37:45.0473] <ptomato>
but we do have a few with JSString, for which we are just using `JS::GCHashMap<JS::Heap<JSString*>, ..., js::DefaultHasher<JSString*>, ...>`

[13:38:03.0931] <ptomato>
is this actually dangerous because the hasher should be a MovableCellHasher?

[13:41:47.0443] <Itms>
to be honest, I am not sure we are doing this correctly

[13:42:47.0220] <Itms>
but since I don't even understand how this MovableCellHasher is supposed to work with heaps, I'm not risking it :D

[13:42:59.0966] <Itms>
let me see..

[13:44:52.0294] <Itms>
I think we are doing this the wrong way. We try to assign IDs to JSObjects and our structure is a hash map with JSObject keys, and our IDs (u32 and strings) as values

[13:45:09.0347] <jorendorff>
paging sfink: 

[13:46:15.0599] <Itms>
but we are just following SM's ipc::ObjectToIdMap 🤷‍♂️

[13:48:40.0829] <Itms>
yeah it's just because we always have the object first and we look the ID up, never the opposite. ptomato : in GNOME you always need it the other way?

[13:49:29.0373] <ptomato>
yeah, that's right

[14:05:44.0977] <mgaudet>
Itms: Extremely silly question: The ID's your keeping track of... you can't just add them as properties to the objects themselves? (like, define a symbol key and then have the C++ version of obj[@YourSpecialSymbol])

[14:06:22.0330] <mgaudet>
(Mostly because you say ObjectToId map... and I think; well, if you already have the object... and objects themselves are maps...) 

[14:08:04.0099] <Itms>
um, I don't know if it would be easy to implement in our case

[14:10:25.0596] <Itms>
ah, no, you're correct, it would be possible in fact

[14:11:45.0689] <Itms>
I would need to add a map for the ID->object lookup but since Philip says that works in GNOME, it would be enough

[14:13:01.0944] <mgaudet>
I could imagine performance reasons why you wouldn't want to do this; but it's certainly potentially simpler to try to keep the things that JS is good at together 

[14:13:13.0309] <ptomato>
("works" in that now I'm not sure whether we should be using MovableCellHasher for that)

[14:14:31.0599] <Itms>
I don't think we use that object<->id map in performance-critical parts

[14:14:58.0958] <Itms>
"works" as in "compiles" is good enough for me right now 😆

[14:16:41.0313] <Itms>
ptomato: How do you root your GCHashMaps in general? in a persistentrooted?

[14:27:10.0075] <jorendorff>
paging nbp https://twitter.com/domenic/status/1283873562907103235

[14:33:25.0427] <mgaudet>
confession: Finished implementing one-op private names. Passes all tests locally. Smaller, easier to read implementation (`25 files changed, 272 insertions(+), 381 deletions(-)`), though baseline support is currently using a callVM. The good news is that I think doing an IC should be relatively easy (and probably reuse the HasPropIRGenerator). 

[14:33:29.0906] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:34:39.0062] <mgaudet>
avandolder: regarding the above: While it will impact you looking at the expression decompiler, I'll be honest, I'd still love to have you take a closer look at it. I spent about 10 minutes trying ot get it to work and went nowhere. If you wanted a preview of what'll go up for review, it's been pushed to try [here](https://hg.mozilla.org/try/rev/7cc759e8d7bd11378234087f53c28222b3bfaaf3). 

[14:41:43.0471] <avandolder>
Alright

[14:51:13.0613] <ptomato>
Itms: as a member of a private C++ struct which is traced

[15:12:44.0344] <sfink>
Itms: sorry, on half-day PTO. I'll take a look tomorrow.

[15:29:23.0387] <gkw>
does --no-sse3 turn off some sort of wasm compilation thing?

[15:30:02.0882] <gkw>
jandem: is --no-sse3 useful for differential testing in other areas, if it causes such false positives for wasm compilation?


2020-07-17
[17:33:11.0777] <Waldo>
> <@jonco:mozilla.org> anba: yes that sounds like it could be a problem

FYI, anba may exist in this channel, but last time I mentioned poking him here in Bugzilla he said he hadn't checked in here since Berlin.  So I wouldn't expect a ping here to be an effective way to reach him.

[19:47:19.0768] <Waldo>
ptomato: Only a bit more nitpickery to go, mostly -- tho the missing exception-clearing is not a nit and conceivably could hide issues.  (Tho I don't think it would hide any.)

[20:52:24.0047] <ptomato>
ok, thanks! I will see if I can get it done tomorrow

[22:57:05.0355] <jandem>
gkw: maybe SIMD-related? not sure. It could still be useful for JS

[01:12:28.0398] <gkw>
jandem: yes, SIMD! Who should I ask about wasm-simd - maybe Benjamin Bouvier ?

[01:12:46.0392] <jandem>
lars, but he's on PTO

[01:13:02.0595] <gkw>
got it, thanks

[02:03:44.0984] <Benjamin Bouvier>
gkw: hi

[02:04:08.0657] <Benjamin Bouvier>
gkw, jandem, the baseline SSE configuration for wasm simd is sse4.2, as far as i can tel

[02:04:29.0645] <Benjamin Bouvier>
but iirc, other wasm instructions that are in mvp may require more than that (e.g. popcnt) and might be emulated if we don't haev sse3

[02:04:37.0607] <Benjamin Bouvier>
 * but iirc, other wasm instructions that are in mvp may require more than that (e.g. popcnt) and might be emulated if we don't have sse3

[02:56:43.0985] <nbp>
That would have been a really good monkey to have around: https://github.com/Netflix/chaosmonkey

[02:59:05.0595] <Benjamin Bouvier>
we can still have lokimonkey

[02:59:27.0013] <Benjamin Bouvier>
in fact, it would be the most logical name after baldrmonkey, since loki is ultimately the root cause of baldr's doom in nordic mythology

[02:59:39.0047] <Benjamin Bouvier>
and most importantly: it sounds great!

[03:05:09.0907] <nbp>
loki smooshs baldr?

[05:15:29.0373] <Ms2ger [~half-time dedication]>
lomonki

[05:18:57.0393] <Ms2ger [~half-time dedication]>
don't @ me

[05:23:08.0406] <yulia>
... smooshki

[05:30:25.0768] <Benjamin Bouvier>
... sushimonkey

[05:30:30.0733] <Benjamin Bouvier>
that could make a cute logo

[05:31:41.0723] <yulia>
omg

[05:39:46.0615] <Benjamin Bouvier>
any word that ends with the E sound (sushi, loki) makes a nice assonance, add a K sound before the E sound and it adds up an alliteration

[05:40:01.0160] <Benjamin Bouvier>
(#spidermonkey, it's all about JS JITs and poetry)

[07:58:30.0941] <mgaudet>
I've been working on this [template for good-first-bugs](https://github.com/mgaudet/spidermonkey-good-first-bug-template) for a while. You may have seen bugs I've opened using it. I want to share it here, so that we can collaborate on it. My goal is that we'd eventually bless this or something like it as our 'official' good first bug template for the team, to try to reduce the overhead of opening bugs that have a good chance of being picked up by community members. 

[08:10:57.0809] <sfink>
ptomato: ok, I'm trying to work through this now. Yes, a `GCHashMap<JSString*>` (or rather, the type you gave which is more correct) seems wrong to me if any of the string keys could be nursery strings.

[08:11:12.0607] <sfink>
`DefaultHasher<JSString*>` just uses the pointer

[08:12:15.0423] <sfink>
one option would be to hash and match on the string contents. We have a couple of instances of that in the tree. One for string deduplication, one for counting duplicate strings for `about:memory`.

[08:12:47.0751] <tcampbell>
what version did we turn on nursery strings?

[08:12:53.0474] <tcampbell>
this probably needs a good note and example in the examples repo..

[08:12:55.0607] <sfink>
another option would be `NurseryAwareHashMap`, though that's strangely specific for use as the `StringWrapperMap`. It *might* be usable, though.

[08:13:33.0775] <sfink>
the most straightforward option would probably be `GCRekeyableHashMap`, if you can figure out how to trigger the rekeying.

[08:13:51.0704] <sfink>
I was surprised that we make so little of strings as keys; there's not much prior art in the tree.

[08:15:14.0439] <sfink>
it looks nursery strings were Fx67, from bug 1442481

[08:15:16.0757] <botzilla>
https://bugzil.la/1442481 — RESOLVED (sfink) — Enable strings in the nursery

[08:16:48.0006] <sfink>
Itms: it sounds like you may have a solution with the ID property and separate ID -> object mapping. (Updatable pointers as values are *much* easier to deal with than keys, at least if you're using pointer values in your hashing and matching.)

[08:17:13.0828] <sfink>
but I'm getting stuck on one thing, which maybe I should just let go of:

[08:18:52.0312] <sfink>
the way MovableCellHasher works is that we have an internal `JSObject* → ID` mapping table. It seems unfortunate to have to build `JSObject* →ID1 → ID2`... I wonder if we expose those IDs in any way.

[08:19:05.0405] <sfink>
 * the way MovableCellHasher works is that we have an internal `JSObject* → ID` mapping table. It seems unfortunate to have to build `JSObject* → ID1 → ID2`... I wonder if we expose those IDs in any way.

[08:19:50.0071] <sfink>
(we only make table entries for objects you actually use with `MovableCellHasher`, with the assumption that it is a small minority of total objects)

[08:20:36.0159] <sfink>
and note that we only have the mechanism for objects, not strings

[08:21:30.0242] <jonco>
sfink: the unique ID table should work for other GC cells too

[08:21:41.0789] <sfink>
oh! ok

[08:21:54.0616] <sfink>
I guess that's why it's Movable*Cell*Hasher ;-)

[08:22:47.0166] <sfink>
though honestly, it feels a weird to key a table off of a string's pointer value. Would you not want to find the entry via another string with identical contents?

[08:23:29.0435] <sfink>
(obviously, it depends on what you're doing, but for most embedder uses, it seems like content-based lookup is more what you'd want)

[08:25:38.0144] <sfink>
uh oh. Riot is now Element. That'll be fun for Googling. And it looks like the upgrade changed some fundamental things, like how you know there are new messages in a channel.

[08:26:13.0874] <nbp>
sfink: maybe, but now there is an IRC-like view.

[08:26:32.0617] <mgaudet>
(and also, when the sidebar is collapsed you can see there -is- a new mssage \o/) 

[08:26:42.0451] <sfink>
jonco: can you explain what's going on with the incumbent global in https://phabricator.services.mozilla.com/D83831 ?

[08:26:42.0467] <mgaudet>
 * (and also, when the sidebar is collapsed you can see there -is- a new mwssage \o/)

[08:26:46.0948] <mgaudet>
 * (and also, when the sidebar is collapsed you can see there -is- a new message \o/)

[08:26:48.0503] <sfink>
we can do a video call if it's easier

[08:27:06.0325] <mgaudet>
nbp: oh? What's it look like / how do you turn it on?

[08:27:20.0137] <sfink>
oh wait, it's still using highlighting, the difference is just more subtle now

[08:27:42.0582] <sfink>
but they added a white dot on the right, which is clear enough once I get used to it

[08:28:00.0524] <nbp>
mgaudet: All settings > Appearance > Show advanced > Enable experimental, compact IRC style layout 

[08:28:43.0783] <mgaudet>
nbp: Ooooh. I may just keep this

[08:29:17.0336] <sfink>
yeah, this is... nice. I think?

[08:29:17.0957] <mgaudet>
We'll see. I definitely missed it a lot when I lost it from IRCCloud, but got used to the larger layout. We'll see. :D Thanks for the pointer!

[08:29:40.0955] <sfink>
I'd probably prefer it did not repeat the username for every message, but maybe that's just my omgchange kicking in.

[08:30:39.0019] <sfink>
I may have to hide the sidebar now, though; it looks ridiculously large and stretched out in comparison. ;-)

[08:30:53.0504] <jonco>
sfink: well, I'm no expert here, but see this comment: https://searchfox.org/mozilla-central/source/js/src/vm/JSObject.cpp#2059-2075 

[08:31:26.0701] <jonco>
sfink: the problem seems to be that global can itself be a proxy, and when unwrapping a CCW to a global we don't know when to stop unwrapping

[08:31:59.0460] <jonco>
promises do this thing where they store a CCW to a known non-proxy in the same compartment as the global and then get the global of that when they need it

[08:32:02.0829] <jonco>
I copied the same thing

[08:32:47.0962] <sfink>
Oh, wow. That makes sense, I was just assuming that a global could never be a CCW.

[08:33:28.0444] <sfink>
or a wrapper, I guess. But on the web, maybe that's pretty much always the case?

[08:34:44.0846] <Ms2ger [~half-time dedication]>
Is WindowProxy actually the global?

[08:34:50.0446] <sfink>
there is the stopAtWindowProxy parameter that I thought was meant for things like this, but maybe it's not adequate or maybe you'd have to change too much stuff to use it (or pass through a boolean for whether to use it).

[08:35:03.0991] <sfink>
anyway, I'm good with mimicking Promises here.

[08:35:35.0262] <jonco>
yeah I just noticed that

[08:35:48.0479] <jonco>
that might be a better solution

[08:36:16.0444] <jonco>
Ms2ger [~half-time dedication]: good question

[08:36:34.0842] <jonco>
I'm trying to find the patch that added this for promises and searchfox blame is completely wrong

[08:36:46.0060] <sfink>
mostly, I've always seen that parameter, and wondered what it was for. And now we hit a situation that sounds like what it must be for, and we don't use it.

[08:37:22.0259] <sfink>
but I'm quite happy to stick my fingers in my ears and use a workaround to avoid thinking about it. ;-)

[08:38:42.0080] <Ms2ger [~half-time dedication]>
I don't think it's a `GlobalObject*`

[08:39:37.0673] <sfink>
1125423 comment 0 seems to be saying that a content global is the `WindowProxy` if I'm reading it correctly

[08:40:59.0023] <sfink>
ye gods. There's gut swapping involved.

[08:41:56.0656] <sfink>
that bug does seem to provide all the answers to these questions. If only I could make out 1/10th of what they were talking about...

[08:47:04.0208] <jonco>
Ms2ger [~half-time dedication]: I'm trying to work out how this works... do you know where does the wrapper for nsGlobalWindowInner get created?

[08:47:20.0517] <jonco>
 * Ms2ger [~half-time dedication]: I'm trying to work out how this works... do you know where the wrapper for nsGlobalWindowInner gets created?

[08:47:23.0271] <Ms2ger [~half-time dedication]>
Once I probably did :)

[08:47:54.0939] <Ms2ger [~half-time dedication]>
/me takes a look

[08:51:10.0528] <Ms2ger [~half-time dedication]>
jonco: https://searchfox.org/mozilla-central/source/dom/base/nsGlobalWindowOuter.cpp#2021

[08:53:37.0518] <sfink>
jonco: I marked it r+, but with an obnoxious suggestion for renaming everything. You can take a look, and if it seems like it would add more confusion than resolve it, I'm fine with that. And of course, if you want to chase all the way down this rabbit hole and then explain it to me, feel free. ;-)

[08:57:45.0158] <jonco>
Ms2ger [~half-time dedication]: thanks, yeah it doesn't look like it's a proxy

[08:57:57.0232] <jonco>
I'm confused now as to why this was necessary for proxies

[08:58:03.0099] <jonco>
 * I'm confused now as to why this was necessary for promises

[08:59:15.0195] <chaircrusher>
Here's a question. I've got an experimental mod to SpiderMonkey that uses an unused bit in the flags to mark strings 'dirty' - i.e. need to be escaped before they're output.


[08:59:20.0413] <Ms2ger [~half-time dedication]>
Assuming it was :)

[08:59:56.0665] <chaircrusher>
And I want the dirty bit to propogate through assignments and concatenations.

[09:01:43.0367] <jonco>
sfink: I'm tempted to add a release mode assert that this doesn't happen and land without that patch

[09:02:49.0705] <chaircrusher>
This works for statements like this:

var x = 'hello';
SetStringDirty(x, true);
var y = ' world';  // defaults to clean
x = x + y; // dirty propogates via JS::StringConcat
var z = 'Hello '; // new clean var
z += x; // add dirty var,  but z is still clean

[09:05:56.0282] <sfink>
jonco: sounds ok to me

[09:06:34.0496] <sfink>
I was trying to understand why `getIncumbentGlobal()` is able to return a `GlobalObject*` when it seems like there are cases where the global will be a CCW.

[09:07:15.0563] <sfink>
the code itself makes sense, and only returns globals

[09:07:37.0213] <sfink>
I think "the global will be a CCW" is probably an incorrect phrasing

[09:08:18.0159] <jonco>
did I write that?  yeah that's definitely wrong

[09:08:20.0491] <sfink>
but maybe as Ms2ger [~half-time dedication] suggested, the `WindowProxy` stuff is separate from the global

[09:08:25.0439] <sfink>
no, I wrote that

[09:08:31.0125] <jonco>
oh right

[09:09:22.0347] <sfink>
it's just that the bug I was talking about above seemed to be talking about the "content global" in the same was as the `WindowProxy`

[09:09:38.0741] <sfink>
oh well. It seems to me like the C++ type system is on your side.

[09:10:20.0919] <sfink>
chaircrusher: theoretically possible, but you'd need to change a lot of code. Including in the JITs.

[09:11:08.0541] <sfink>
nbp has mentored someone (or some people?) doing things with taint analysis in the past

[09:12:29.0252] <sfink>
hm... though there's something a little weird with your formulation. Strings are immutable, and to the extent possible you'd probably want the dirty bit to be part of that immutability.

[09:13:16.0664] <sfink>
`z += x` should not set the immutable bit on an existing string `z`. It would instead be creating a dirty string from the concatenation and assigning that to z.

[09:14:06.0095] <sfink>
 * `z += x` should not set the dirty bit on an existing string `z`. It would instead be creating a dirty string from the concatenation and assigning that to z.

[09:14:52.0384] <sfink>
chaircrusher: (though don't necessarily be scared off by the JITs. You can just disable them.)

[09:15:24.0656] <nbp>
chaircrusher: I did not mentored anybody, as nothing went into code. However we had a discussion at the time on what would be the best approach to implement some taint analysis without making it too costly. Doing at runtime adds way too much overhead to make any solution practical, especially when considering cases `String.fromCharCodes(...)`, as we would have to flag primitives as well.

[09:15:53.0193] <chaircrusher>
@sfink the reason I'm even trying is that my boss wants to be able to tell when potentially insecure data (i.e. from formdata, databases, random text files) hasn't been sanitized before being used.

[09:16:39.0446] <nbp>
The best option so far, as a result of a meeting was to use our JIT engines to incrementally analyze the clusters of taint, as code is being considered. At the time what was suggested was to eagerly compile with IonMonkey to do so.

[09:16:46.0494] <sfink>
the project looks very different depending on whether it's something you'd want permanently in Firefox, vs something runnable as a testing tool

[09:17:15.0919] <chaircrusher>
it's a testing tool

[09:17:22.0398] <sfink>
since that determines things like "do I need to care about performance at all?", which makes things 100x harder

[09:17:56.0817] <nbp>
chaircrusher: In practice, I think it might even be practical to do at on Baseline and CacheIR instructions, without adding too much overhead at runtime.

[09:18:12.0295] <chaircrusher>
whoa

[09:18:23.0574] <nbp>
but this would require that we are always using the Baseline compiler, which would add some overhead for page-loads.

[09:18:41.0230] <chaircrusher>
This would always be server-side-only

[09:19:06.0310] <gkw>
Benjamin Bouvier: so still worth reporting --no-sse3 or --no-sse42 differential testing issues for wasm simd, if we are going to emulate the instructions when these capabilities are not present?

[09:20:38.0416] <gkw>
sfink: I'm glad my persistence seems to have been worth it - ref https://bugzilla.mozilla.org/show_bug.cgi?id=1652391#c8 :)

[09:20:46.0231] <chaircrusher>
I embed SpiderMonkey in a C++ program that runs as a CGI

[09:21:23.0174] <sfink>
gkw: yep, thanks!

[09:21:26.0548] <Benjamin Bouvier>
gkw: hmm, i'd expect that it would crash in this case, so maybe not. Can you please open one example bug, cc :lth and me?

[09:38:56.0407] <ptomato>
sfink: so conversely, if you know your strings are atoms then it's ok to use DefaultHasher?

[09:39:18.0111] <ptomato>
sfink: tcampbell: https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/issues/29 😃

[09:52:27.0047] <sfink>
ptomato: as long as you only use atoms when doing lookups, too

[09:56:47.0352] <jonco>
sfink: well, I can't get that to work for the shell so I'm going to land the original patch with your comments addressed and we can figure things out when anba replies

[09:57:03.0655] <sfink>
ok

[09:57:22.0211] <sfink>
"can't get that to work for the shell" as in the assertion fires?

[09:58:48.0909] <jonco>
there's a problem with unwrapping, and I think it might be that we need to make UncheckedUnwrapWithoutExpose also take this stopAtWindowProxy argument... but I don't understand this well enough right now, so I think we should go with what promises do for now

[09:59:24.0518] <sfink>
yep, ok

[09:59:46.0610] <tcampbell>
what is bug number? (I'm gonna regret this..)

[10:00:37.0691] <jonco>
tcampbell: https://phabricator.services.mozilla.com/D83831

[10:00:54.0453] <tcampbell>
thanks

[10:02:15.0357] <sfink>
jonco: you've got a hazard, too. It wants you to root functionObj in ` JSObject* functionObj = JS_GetFunctionObject(callback.mCallbackFunction);`, CycleCollectedJSContext.cpp

[10:02:38.0199] <jonco>
sfink: yes, I fixed that after I got backed out the second time :)

[10:02:47.0024] <sfink>
whoops, ok

[10:13:21.0529] <nbp>
wuwei: Welcome back! ;)

[12:34:47.0562] <chaircrusher>
nbp: So  I have changes to StringType.cpp that work except for the case of concatenating two strings.
I thought (naively that instrumenting stuff in js/src/vm/StringType.cpp was enough.

[12:35:25.0435] <chaircrusher>
Where really should I be looking to detect string concat and propogating the "dirty" bit?

[12:37:32.0406] <chaircrusher>
I thought js::ConcatStrings would be the obvious place to start, but that doesn't appear to get called from the interpreter.

[12:41:09.0974] <iain>
chaircrusher: The interpreter should call AddOperation when concatenating strings: https://searchfox.org/mozilla-central/source/js/src/vm/Interpreter.cpp#2753-2762

[12:41:39.0205] <iain>
Which in turn should call ConcatStrings: https://searchfox.org/mozilla-central/source/js/src/vm/Interpreter.cpp#1447-1454

[12:42:11.0220] <chaircrusher>
thx

[12:42:32.0973] <chaircrusher>
I also figured out that I need to instrument JSRope::flatten

[12:46:13.0228] <iain>
It looks like baseline also calls into concat: https://searchfox.org/mozilla-central/source/js/src/jit/CacheIR.cpp#8096-8102

[12:47:02.0437] <chaircrusher>
iain: I don't know if I caught every possible case, but I found that I'd missed a path through js::ConcatStrings and once I accounted for that my test works.

[12:48:40.0340] <iain>
chaircrusher: There's an optimized path called from Ion generated here: https://searchfox.org/mozilla-central/source/js/src/jit/CodeGenerator.cpp#9340

[12:50:15.0981] <iain>
Which won't be affected by changing StringType.cpp

[12:52:34.0630] <chaircrusher>
OK

[12:52:39.0073] <iain>
But you can disable Ion or change this to always use the out-of-line fallback (which does call ConcatStrings): https://searchfox.org/mozilla-central/source/js/src/jit/CodeGenerator.cpp#9073-9088

[12:52:59.0108] <chaircrusher>
Gotcha.

[12:53:23.0520] <chaircrusher>
I have to do a release build of this and test it. Right now I've got a debug build.

[12:53:32.0554] <chaircrusher>
thanks a lot for your help!

[12:58:14.0561] <chaircrusher>
the Jit stuff is wacky. Totally don't see if/how it relates to stuff happening to JSString objects.  It's like C++ writing assembly language.

[12:59:03.0120] <iain>
That's exactly what's happening, yeah

[12:59:42.0966] <chaircrusher>
It's actually pretty clear but there is some feeling of having a turned over a rock to see all the potato bugs scurrying

[13:05:18.0893] <iain>
chaircrusher: Adding `masm.jump(&failure)` right after this bit should go straight to the fallback case: https://searchfox.org/mozilla-central/source/js/src/jit/CodeGenerator.cpp#9352-9355

[13:07:35.0741] <chaircrusher>
@iain

[13:08:02.0940] <chaircrusher>
iain: the fallback case being not to bypass the StringType stuff?

[13:15:35.0384] <iain>
chaircrusher: All the code we generate in the stub is to optimistically attempt to concatenate strings without calling into C++ code. But sometimes (if we are attempting to concatenate ropes, if we don't have enough room in the nursery to allocate a string, etc...) we give up and use a fallback path, which just calls StringConcat: https://searchfox.org/mozilla-central/source/js/src/jit/CodeGenerator.cpp#9073-9088

[13:18:57.0807] <iain>
Just to give a quick description of what's going on here: generateStringConcatStub is called once, and generates a bit of jitcode. After that, whenever Ion (our highest optimization tier) tries compiling a string concatenation, it generates code that jumps to the string concat stub to see if we can do the concatenation without calling into C++. If we can, we continue. If we can't, we jump to an out-of-line fallback, which calls into StringConcat

[13:20:28.0961] <iain>
So if you jump straight to the failure label in the string concat stub, then Ion will always call into StringConcat, and whatever changes you've made there will execute

[13:21:27.0187] <iain>
Obviously we won't make that change in upstream SM, but if you're just using this as a testing tool it's probably the fastest way to get things working

[13:58:46.0693] <mgaudet>
confession: Spent today doing some administrative work, and cleaned up my private field + Proxy patches for landing. 

I sorely want to YOLO these patches today, but it's a Friday, and I'm definitely not going to hang around. Monday I guess :) 

[13:58:51.0313] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:08:21.0214] <Waldo>
No rest for the wicked.


2020-07-18
[17:32:52.0742] <gkw>
froydnj: any hope for a quick r+ for https://phabricator.services.mozilla.com/D83837 ?


2020-07-19
[04:08:39.0888] <yulia>
jorendorff: do you substantial experience with lisp? or maybe you know someone who does?

[04:08:57.0769] <yulia>
I came across an interesting comment: https://news.ycombinator.com/item?id=23811382 and I am trying to understand how this form of development worked

[04:09:08.0965] <yulia>
what I can't quite figure out is how a review process would work in this scenario

[09:51:20.0815] <tcampbell>
That sounds like https://en.m.wikipedia.org/wiki/Smalltalk#Image-based_persistence

[09:52:46.0650] <tcampbell>
I would just expect there is no code review, but that is probably just my cynicism.

[10:37:46.0247] <jorendorff>
...i don't think i'm going to read that

[10:38:12.0031] <jorendorff>
People write migrations for their data, because it is unavoidable

[10:38:27.0463] <jorendorff>
no programmers want to write migrations for anything else

[10:39:08.0010] <jorendorff>
without migrations, this idea doesn't initially make sense to me, and i don't think i want to invest the time to get straightened out

[10:48:06.0178] <yulia>
ok! thanks. yeah i also  had a feeling maybe this wasn't a full picture

[10:48:58.0457] <yulia>
tcampbell: that sounds exactly like what was described.


2020-07-20
[23:04:12.0816] <pbone>
jonco, sfink @allstarschh|afk Hi GC folk.  I'm working on memshrink stuff for fission and I'll be visiting the GC and maybe the JS engine a little bit.  A while ago it was suggested that we move the GCTelemetry code from JS to C++ because it'll consume less memory.  But I don't know if anyone is actually using this, last time I asked no-one used it. This is the complex objects that describe whole GC events.  Because no-one uses them I propose to remove them completely, is that cool with you?

[00:58:01.0872] <jonco>
pbone: Hi Paul.  Is this the JSON telemetry data added in bug 1308040?  We are not using that as far as I know.  If that's what you mean I'm happy for that to be removed.

[00:58:05.0199] <botzilla>
https://bugzil.la/1308040 — RESOLVED (billm) — Better GC telemetry

[02:11:04.0455] <nbp>
chaircrusher: taint tracing is the general principle, which comes from the principle that data can be converted from one type to another. I guess setting any string dirty except when they are issued from a specific location is a shortcut which avoid more advanced taint tracing and analysis.

[03:05:36.0489] <pbone>
jonco: Yep. that one. Thanks, I know I've asked about it before and I thought the answer was "no" but wanted to double check incase things changed.  We can always reimplement it or something like it in C++ if we need to later.  FWIW I like the profiler better anyway.

[07:57:59.0343] <jorendorff>
mgaudet: hey, quick question about private methods: how to pref them

[07:58:31.0688] <jorendorff>
mgaudet: is it likely we will want to ship private fields without private methods? if extremely unlikely, then avandolder can piggy-back on the existing pref

[07:58:54.0747] <jorendorff>
but if it's plausible, he has to make a new one

[09:21:38.0718] <mgaudet>
jorendorff: sorry for the delay. I'd use the same pref -- I'm OK with waiting till methods are complete before we ship the whole hting

[09:21:42.0647] <mgaudet>
 * jorendorff: sorry for the delay. I'd use the same pref -- I'm OK with waiting till methods are complete before we ship the whole thin

[09:21:44.0617] <mgaudet>
 * jorendorff: sorry for the delay. I'd use the same pref -- I'm OK with waiting till methods are complete before we ship the whole thing

[09:21:58.0578] <jorendorff>
avandolder: ☝️

[09:22:39.0184] <avandolder>
Sounds good

[09:23:04.0658] <mgaudet>
avandolder: So you're doing methods? Lemme know if there are any questions. You'll want to build off of https://phabricator.services.mozilla.com/D83941 which has CheckPrivateField, which was designed to make the brand checks for methods substantially easier

[09:23:21.0913] <mgaudet>
(Not yet reviewed and landed) 

[09:24:18.0608] <evilpie>
mgaudet: did you add a new slot for expandos to all proxies?

[09:24:29.0491] <mgaudet>
evilpie: Yes. 

[09:24:57.0602] <mgaudet>
(I mean, that patch bounced this morning. But yes, that's the design. For DOM proxies that have a pre-existing expando, we piggy back on that. 

[09:25:07.0969] <mgaudet>
but the slot is there regardless)

[09:25:21.0000] <evilpie>
so we re-use the same slot for DOM proxies?

[09:25:38.0050] <evilpie>
I don't really care about normal proxies, but DOM proxies are somewhat important

[09:26:25.0807] <evilpie>
(in the sense that I don't want us to waste slots)

[09:26:47.0786] <mgaudet>
We re-use the same slot and expando yes; but, we do have an empty slot. 

[09:27:09.0457] <evilpie>
mhm ok. You mean pre-existing?

[09:27:25.0399] <mgaudet>
evilpie: see https://phabricator.services.mozilla.com/D83145 Proxy.h 

[09:30:54.0126] <evilpie>
Adding an unused slot to DOM proxies isn't great

[09:33:24.0819] <evilpie>
I really wish we wouldn't have to support private names on proxies at all :/

[09:35:40.0699] <mgaudet>
I definitely agree; but it's hard to avoid. 

[09:37:30.0064] <mgaudet>
The alternative implementations I've thought about either really impact performance, or implementation complexity or both

[09:39:00.0564] <evilpie>
I am still busy at the moment. I will have a closer look in a few weeks

[09:44:06.0649] <mgaudet>
Given I've been backed out, what I'll do is take some time to do some memory tests. 

[09:45:49.0409] <mgaudet>
So we have a clear view of what we're looking at; then i can also open a followup bug to see if we can't find something more clever. The good news is that for -proxies- I'm OK with slowness. I'd prefer still to have as little complexity as possible though. 

[11:52:52.0543] <jorendorff>
sfink: js/public/RootingAPI.h contains a line `static void rekey(Key& k, const Key& newKey) { k.unsafeSet(newKey); }` that I'm pretty sure would never compile; but it's apparently never instantiated

[11:53:04.0972] <jorendorff>
sfink: do you want a bug for this, or nah

[11:53:36.0897] <sfink>
bug please, yes

[12:05:25.0251] <jorendorff>
sfink:  you got it, https://bugzilla.mozilla.org/show_bug.cgi?id=1654058

[12:06:06.0786] <sfink>
thx

[15:02:02.0627] <mgaudet>
confession: Landed preliminary proxy support for private fields (twice). Fought various test harnesses for a good chunk of time; working on enhancing test coverage and shaking out any bugs I -can- find. 

[15:02:05.0424] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2020-07-21
[05:10:27.0255] <nbp>
https://github.com/playXE/masm-rs/tree/master

[08:40:19.0636] <jonco>
does anyone monitor our benchmark results since they moved to perfherder?

[08:41:03.0894] <jonco>
there don't seem to have ever been any alerts for the js-bench suite

[09:00:41.0100] <smaug>
tcampbell: one thing to remember is that main thread scriptloader and worker script loader are rather different

[09:01:48.0846] <djvj>
Man we really could use a standardized JS::TaggedPtr<PtrT, TagT> where you can just define TagT to have the right properties, and get a relatively sane tagged pointer type without too much work.  We use them all over the place.

[09:02:52.0423] <tcampbell>
Good point

[09:08:36.0052] <djvj>
It's a bit tricky to think about how to express it.  It seems like something that would resemble the mozilla::Variant type, but it stores pointers to variants, and the type-code mapping is provided by TagT.  A TagT would provide methods to map a (Type, Payload) => BitTag, and functions to project from BitTag -> Type, and BitTag -> Payload.

[09:09:22.0521] <djvj>
er.. not pointers to variants, but variants over pointer types.

[09:12:17.0601] <djvj>
> <@nbp:mozilla.org> https://github.com/playXE/masm-rs/tree/master

Neat!

[10:12:29.0639] <nbp>
tcampbell: Benjamin Bouvier  \o/ "turning on cranelift for arm64?" — https://bugzil.la/1552132

[10:13:38.0279] <tcampbell>
yeah, I didn't realized we were close on it :)

[10:14:06.0741] <nbp>
me neither.

[10:20:32.0045] <cfallin>
We're indeed quite close! https://bugzilla.mozilla.org/show_bug.cgi?id=1649932

[10:21:04.0663] <cfallin>
Basically we need wasm atomics and ... that's it

[10:48:01.0706] <sfink>
cfallin: for bug 1649928, do you want android hw, or windows10-aarch64? I'm just seeing some existing configuration for the latter that looks like it almost gives what you want, though I don't see those jobs in the full list.

[10:48:03.0225] <botzilla>
https://bugzil.la/1649928 — NEW (nobody) — Establish CI/taskherder jobs for SpiderMonkey Wasm tests with Cranelift/aarch64

[10:48:59.0684] <sfink>
I'm still looking for a least-effort path to get something up ;-)

[10:57:33.0553] <cfallin>
sfink: ideally we'd have Linux/aarch64 build

[10:57:41.0044] <cfallin>
 * sfink: ideally we'd have Linux/aarch64 builds

[10:58:01.0318] <sfink>
do we have aarch64 linux hardware?

[10:58:08.0919] <cfallin>
I've managed to cross-compile from Linux/x86-64, so it's at least theoretically possible to do so without

[10:58:42.0230] <cfallin>
Otherwise, the Cranelift team does have access to an aarch64 machine running Ubuntu, but it's not part of taskcluster, so I'm not sure how useful it would be for this...

[10:59:11.0478] <sfink>
I have jobs working that cross-compile on x86-64. Unsurprisingly, they fail when trying to run the tests (locally).

[10:59:39.0879] <cfallin>
OK cool, so that's most of the way there. I've also (hackily) run aarch64 jit-tests on x86-64 by writing a wrapper shell script that invokes usermode qemu

[10:59:41.0456] <sfink>
yeah, I think we'll need to use whatever hardware is available to taskcluster

[11:00:00.0390] <cfallin>
I'm not sure if we'd want to reify that a bit better as part of the build/test system though

[11:00:32.0123] <sfink>
I think I'll pose this question in the bug

[11:00:41.0394] <cfallin>
Joel Maher (of the CI team?) was also looking into adding AWS aarch64 instances to taskcluster, but I'm not sure what came of this

[11:00:49.0549] <cfallin>
thanks for spending time on this!

[11:00:55.0965] <sfink>
ooh, that would make this easier!

[14:21:33.0505] <mgaudet>
confession: Investigated some xpcshell issues regarding prefs; what seemed like a harness issue turned out to be some weirdness about realms, creation order etc. Continued work on a test case around adopt node. 

[14:21:36.0253] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:26:37.0492] <sfink>
confession: found a bug hiding underneath the bug I fixed (bug 1651001)

[14:26:40.0303] <botzilla>
https://bugzil.la/1651001


2020-07-22
[21:51:55.0673] <loganfsmyth>
Are "compile-and-go" scripts still a thing? Looking at this comment https://searchfox.org/mozilla-central/rev/3b6958c26049c1e27b2790a43154caaba9f6dd4a/js/src/debugger/Debugger.cpp#2487 and I'm thinking it no longer applies? Looks like it was added by jorendorff  in https://bugzilla.mozilla.org/show_bug.cgi?id=738479

[22:15:08.0869] <jandem>
loganfsmyth : no, it was removed. Scripts always belong to a single global now and scripts are cloned if we want to run them against a different one 

[22:15:30.0589] <loganfsmyth>
cool, that matches what I thought to be the case

[02:36:09.0113] <nbp>
cfallin: We have a aarch64 simulator in SpiderMonkey, might be worth to try using it with Cranelift. This would help most developers without having to rely on setting up an emulator or having real hardware to run on.

[02:37:38.0617] <nbp>
The simulator works by compiling the JS shell to x64, while generating aarch64 assembly code, and running in in the simulator.

[02:38:26.0810] <Benjamin Bouvier>
nbp: it's kind of slowish to run tests, plus it might not be feature complete for SIMD opcodes that are mostly already implemented in cranelift

[02:38:42.0587] <nbp>
From my point of view, the best advantage is that you can run rr.

[02:40:31.0202] <Benjamin Bouvier>
I've done RR with the aarch64 simulator while we were implementing the cranelift backend, and actually staring at the generated assembly was a somewhat better experience

[02:46:00.0842] <Benjamin Bouvier>
going to the previous instruction on aarch64 simulator means: put a breakpoint on the simulator'

[02:46:20.0887] <Benjamin Bouvier>
 * going to the previous instruction on aarch64 simulator means: put a breakpoint on the simulator's process instruction, then step in a few times to find what's the actual aarch64 instruction, etc.

[03:11:06.0602] <nbp>
when I want to step in the simulator, I put a breakpoint on the instruction loop and use continue, or reverse-continue.

[03:11:30.0403] <nbp>
Then I also display the instruction at the PC using some of the dump functions of the simulator,

[06:25:35.0039] <froydnj>
does qemu have enough aarch simd emulation?

[06:26:53.0123] <decoder>
fwiw, I talked to jmaher yesterday and it should be possible to get the AWS AArch64 instances into TC

[06:27:02.0526] <decoder>
all we need is to build a docker worker image

[06:27:25.0793] <decoder>
We (fuzzing team), do this already in Travis, with our own fuzzing docker base image

[08:07:48.0277] <sfink>
yes, I talked to jmaher yesterday as well in the Firefox CI room (I don't know how to link to rooms), and it sounds like he can either start from the fuzzer stuff, or it may be that nss has something even closer.

[08:46:46.0178] <@allstarschh|afk>
@jonco @sfink my zoom has some problems , will join the meeting soon

[08:47:31.0099] <sfink>
the moco meeting hasn't quite finished up yet either

[09:16:17.0732] <sfink>
https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc

[09:16:25.0075] <jonco>
tcampbell: https://searchfox.org/mozilla-central/search?path=&q=MarkPagesUnusedSoft

[09:59:24.0504] <nbp>
Waldo: It might have been hard to package icu: `/intl/icu/source/i18n/formatted_string_builder.h:228:31: warning: possible misuse of comma operator here [-Wcomma]`

[10:03:15.0833] <sfink>
https://arewesmoothyet.com/?mode=track&trackedStat=All%20Hangs

[10:09:04.0816] <nbp>
sfink: This is a really nice view, and funny thing is to notice the variations of the uncategorized bucket relative to the categorized one.

[10:09:23.0922] <sfink>
nbp: it looks like it stopped updating in 10/2019

[10:10:05.0062] <nbp>
If I understand correctly, we could have a dramatic impact by simply killing script instead of displaying a popup and reporting something went wrong … do you want to reload?

[10:10:58.0441] <nbp>
 * If I understand correctly, we could have a dramatic impact by simply killing script instead of displaying a popup and instead killing the content scripts and reporting "something went wrong … do you want to reload"?

[10:11:52.0020] <nbp>
 * If I understand correctly, we could have a dramatic impact by killing the content scripts and reporting "something went wrong … do you want to reload" instead of displaying a popup asking the user.

[10:19:28.0318] <sfink>
(I didn't actually look closely at that; we were just looking for a source of "representative profiles" to answer a question about GC finalization cost.)

[12:48:10.0390] <evilpie>
Do we have any opinion on supporting structured cloning for native errors? https://bugzilla.mozilla.org/show_bug.cgi?id=1556604

[12:48:18.0879] <evilpie>
seems like mostly only bz was involved in that

[12:51:19.0172] <Waldo>
I have had a tab open to that bug, or a rev in it, for a very long time now.

[12:51:30.0871] <Waldo>
At surface level it doesn't seem obviously wrong.

[12:51:52.0966] <evilpie>
No. The patch is surprisingly good

[12:51:59.0269] <evilpie>
The spec changed in the meantime

[12:52:10.0922] <evilpie>
And some stuff like GetPropertyPure shouldn't be used

[13:24:57.0220] <mgaudet>
confession: I think I figured out the root cause of my wacky inflatable tube man Xray DOM adoptNode test case being incorrect. I am not sure I could have done it without pernosco. 

[13:24:59.0443] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[13:25:25.0481] <mgaudet>
(Now to go make an iced coffee to make sure the fix I'm thinking about is legit) 

[13:47:02.0119] <Waldo>
xray DOM adoptNode is a series of words that ought strike horror in all right-thinking individuals.

[13:47:16.0655] <mgaudet>
You're not wrong.

[13:49:26.0728] <mccr8>
Yeah, I was doing some stuff with xray waiver nuking for local window proxies which made me feel a little bad.

[13:50:08.0925] <jorendorff>
anybody know what js::InterpreterFrame::unused is for? https://searchfox.org/mozilla-central/source/js/src/vm/Stack.h#320

[13:51:07.0141] <mgaudet>
JSAPI design question: So, the root cause of the bug I am looking at is roughly this (I think): When we do `adoptNode`, the expando gets copied/moved as part of TransplantObjectRetainingXRayXpandos. The expando properties are copied with `JS_CopyPropertiesFrom` -- which right now cannot see private names, because they are intentionally hidden from our standard-ese property enumeration systems. 

So... it seems like the requirement here is that I add a new `JS_CopyPropertiesAndPrivateFields`... does that make sense? Or should JS_CopyPropertiesFrom already copy private fields? 

[13:51:21.0768] <mgaudet>
 * JSAPI design question: So, the root cause of the bug I am looking at is roughly this (I think): When we do `adoptNode`, the expando gets copied/moved as part of `TransplantObjectRetainingXRayXpandos`. The expando properties are copied with `JS_CopyPropertiesFrom` -- which right now cannot see private names, because they are intentionally hidden from our standard-ese property enumeration systems.

So... it seems like the requirement here is that I add a new `JS_CopyPropertiesAndPrivateFields`... does that make sense? Or should JS_CopyPropertiesFrom already copy private fields?

[13:52:50.0555] <mgaudet>
 * JSAPI design question: So, the root cause of the bug I am looking at is roughly this (I think): When we do `adoptNode`, the expando gets copied/moved as part of `TransplantObjectRetainingXRayXpandos`. The expando properties are copied with `JS_CopyPropertiesFrom` -- which right now cannot see private names, because they are intentionally hidden from our standard-ese property enumeration systems.

So... it seems like the requirement here is that I add a new `JS_CopyPropertiesAndPrivateFields`... does that make sense? Or should `JS_CopyPropertiesFrom` already copy private fields?

[13:54:09.0700] <evilpie>
mgaudet: seems like this function is mostly used for unspeakable crimes involving transplanting and copying expandos

[13:54:17.0954] <evilpie>
you should check what each call site requires

[13:54:24.0721] <mgaudet>
hahah; that was my impression too. 

[13:54:28.0717] <evilpie>
quite possibly all of them want this copying behavior

[13:54:55.0861] <evilpie>
should probably rename it to be more scary

[13:55:03.0870] <mgaudet>
do we consider stuff in `jsfriendapi.h` relatively breakable? 

[13:55:24.0003] <evilpie>
yeah

[13:55:52.0904] <evilpie>
this is the API only Gecko is supposed to use

[13:56:23.0475] <evilpie>
(in reality it has a bunch of other useful stuff for others embedders though)

[13:56:46.0008] <iain>
jorendorff: Looks like it is left over from here: https://bugzilla.mozilla.org/show_bug.cgi?id=1031881

[13:57:00.0086] <mccr8>
Hopefully no other embedders use brain transplants...

[13:57:07.0591] <mgaudet>
Ok. `JS_CopyPropertiesAndPropertyLikeThings`?

[13:57:55.0883] <jorendorff>
iain: thanks, and good grief

[14:01:19.0000] <evilpie>
mgaudet: mhm I guess private names aren't actually properties right

[14:02:12.0255] <evilpie>
CopyOwnPropertiesIncludesPrivates ? duno don't ask me to name things please

[14:02:20.0075] <mgaudet>
:P 

[14:15:00.0637] <Waldo>
Incidentally, about `jsfriendapi.h` -- this is the only file that defines `JSErrNum` and all the `JSMSG_*` enums/macros.  This seems like a sensible thing to move to its own header, because there are probably a bunch of files that depend on `jsfriendapi.h` _only_ for these message numbers.  Seem reasonable?  Not sure precisely where to put the header, tho, because it's semi-internal-use for sure, but it's not `js/public/experimental` -- we shouldn't have an intention of elevating this to being a first-class concept we intend to support, like source hooks (the only other `experimental` thing right now) are.

[14:15:21.0613] <Waldo>
I definitely have written/edited `.cpp` files that needed `jsfriendapi.h` only for the error numbers.

[14:20:06.0438] <mgaudet>
Sounds reasonable enough to break that in two 

[14:34:03.0105] <mgaudet>
confession: ignoring the irksome fact that my xpcshell tests crash for some not-related-to-me assert, fixed the adoptNode test case. Need to clean up patch badly for landing. Tomorrow. 

[14:34:05.0308] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2020-07-23
[22:43:40.0505] <annevk>
Anyone here with thoughts on how dynamic import() should work with IDL callbacks? https://github.com/heycam/webidl/pull/902

[01:31:52.0639] <jandem>
jonco: ^

[01:32:53.0287] <jonco>
annevk: I'll take a look but know little about IDL callbacks

[01:44:30.0048] <jonco>
annevk: this is about propagating the active script through IDL callbacks so this is largly a DOM change I think?  the 'import' is there because it exposes what we think the active script is.  of course, there may be changes necessary to that too, I don't remember how we get the relevant script for the URL base

[01:56:56.0987] <annevk>
jonco: yeah, but it seems like there might be some small changes on the JS side too; I guess that means you don't care strongly at least?

[01:57:01.0795] <annevk>
/me doesn't either

[01:58:06.0948] <jonco>
I don't are about the changes to import() to support this if DOM people think this is the right change

[01:58:47.0864] <jonco>
there's some discussion on the issue about the overhead of tracking both active script and incumbent global and how this can be done

[01:58:58.0877] <jonco>
I'm not the person to comment on that

[01:59:45.0517] <jonco>
 * I don't care about the changes to import() to support this if DOM people think this is the right change

[02:00:06.0350] <jonco>
 * there's some discussion on the issue about the overhead of tracking both active script and incumbent global (in IDL callbacks) and how this can be done

[02:01:07.0385] <annevk>
k, thanks

[05:11:16.0881] <mgaudet>
(Actually; that conflicts with something I landed yesterday; will change it anyhow) be back soon :P 

[05:59:13.0980] <Benjamin Bouvier>
annevk: hey, is https required to get SAB in content code? (context being https://bugzilla.mozilla.org/show_bug.cgi?id=1477743#c10) 

[06:26:27.0554] <padenot>
Benjamin Bouvier: yes

[06:28:09.0628] <evilpie>
localhost should be a secure context ...

[06:37:30.0818] <Benjamin Bouvier>
yeah, apparently it was a typo in doc

[06:37:33.0302] <Benjamin Bouvier>
padenot: thanks

[07:36:48.0589] <jorendorff>
mgaudet: ping

[07:37:01.0045] <mgaudet>
jorendorff: pong

[07:37:16.0490] <jorendorff>
mgaudet: avandolder is working on private methods, and it's time to talk about how we want them to be represented at runtime

[07:37:29.0552] <jorendorff>
mgaudet: got a sec?

[07:37:35.0119] <mgaudet>
Yep 

[07:38:18.0454] <jorendorff>
ok, i don't know how much you've already talked about it, but

[07:38:26.0015] <mgaudet>
zero :) 

[07:38:31.0687] <jorendorff>
ok

[07:38:34.0853] <jorendorff>
basically if we stored them the same way as private fields it'd be quite wasteful

[07:38:56.0106] <jorendorff>
a slot per private method per object, all of them have to be populated, obviously silly

[07:39:25.0355] <jorendorff>
at the same time, they are stamped onto objects by constructors, so the set of private methods an object has is infuriatingly dynamic

[07:40:44.0733] <mgaudet>
Hah. I mean; I definitely had been thinking we'd do the slot-per-method. So thinking about being more clever is further than I'd gotten. 

[07:40:59.0489] <jorendorff>
haha

[07:41:00.0844] <jorendorff>
hmm

[07:41:28.0181] <jorendorff>
maybe we should stage it, get that approach working first

[07:41:35.0787] <mgaudet>
(I'd also been thinking we'd do private bands as slot each as well) 

[07:42:12.0563] <mgaudet>
To handle the escaping invocation problem; though I guess if you do it with slot per method you don't need that

[07:42:33.0334] <mgaudet>
methods just need to ensure that their particular slot (as a brand) exists 

[07:42:40.0925] <jorendorff>
escaping invocation problem?

[07:42:42.0464] <mgaudet>
 * (I'd also been thinking we'd do private brands as slot each as well) 

[07:44:05.0736] <mgaudet>
This could be a misunderstanding, but the way I understood was that method bodies themselves need to check that their this value has the brand, which is required if you were to return method or use bind/call 

[07:44:17.0456] <jorendorff>
oh, hmm

[07:44:34.0180] <jorendorff>
I remember believing one way or the other about the proposal but can't remember now

[07:46:02.0515] <jorendorff>
I want to say I thought it was the other way 8-|

[07:47:05.0644] <mgaudet>
I'm writing some test cases here to figure this out; first one says you're right, i'm wrong. (If this is the case then I need to re-read the proposal again because I no longer understand why the brand check exists) 

[07:47:59.0088] <jorendorff>
test cases against v8?

[07:48:06.0010] <mgaudet>
yea

[07:48:08.0055] <mgaudet>
 * yes

[07:48:18.0651] <mgaudet>
(Well, edge beta; but close enough :P) 

[07:51:02.0826] <jorendorff>

"Let field be the result of performing PropertyDefinitionEvaluation for mClassElementEvaluation for e with arguments F and false." do what now

[07:55:15.0359] <jorendorff>
mgaudet: anyway, I think to have a brand-check-on-call, the proposal would have to do something to the method, either when it's created, or modify the semantics of method calls [here](https://tc39.es/ecma262/#sec-ecmascript-function-objects-call-thisargument-argumentslist), maybe in PrepareForOrdinaryCall or OrdinaryCallBindThis

[07:55:49.0734] <jorendorff>
or in FunctionDeclarationInstantiation, but I don't see any of that being done in the proposal

[07:56:03.0684] <mgaudet>
So -- I agree that this isn't how it works; testing seems to bear it out.

[07:56:22.0458] <jorendorff>
ok, so it's brand-check-on-get only, maybe. seems nice

[07:56:48.0791] <mgaudet>
I'm re-reading the proposal now, but don't really understand the brand check anymore. 

[07:57:10.0821] <jorendorff>
avandolder: can you explain it?

[07:58:17.0266] <avandolder>
I believe the idea is that the brand check is only on get, so private methods can be bound to a different `this` or returned by a different method

[07:58:30.0903] <avandolder>
there was an issue on the proposal discussing it, lemme see if i can find it

[07:58:32.0051] <mgaudet>
(this could be a mental model problem: I had figured that `class { #x() { return 10; } }` would be sugar essentially for `class { #x = () => { return 10; } }`

[07:58:38.0325] <mgaudet>
 * (this could be a mental model problem: I had figured that `class { #x() { return 10; } }` would be sugar essentially for `class { #x = () => { return 10; } }`) 

[07:59:19.0474] <avandolder>
https://github.com/tc39/proposal-private-methods/issues/1

[07:59:59.0389] <jorendorff>
right, avandolder  and I just talked about that—I think the proposal definitely doesn't say to create a `#x` per instance; they are at least shared across all instances of that class

[08:00:37.0800] <jorendorff>
avandolder: the proposal actually says the method is stored in the private name, which is like some kind of tasteless joke

[08:06:30.0475] <mgaudet>
Thanks for that link avandolder -- this clarifies that at least part of my confusion is that I don't understand the semantics behind call. 

[08:06:53.0364] <mgaudet>
Experimentally, it does seem the resolution has been that the receiver is -not- type checked; 

[08:07:46.0543] <mgaudet>
`class E { #x() { return 10; } do(o) { return this.#x.call(o) } }; e = new E; e.do({})` successfully returns 10

[08:09:11.0303] <avandolder>
Also https://github.com/tc39/proposal-private-methods/issues/4 discusses it a bit further

[08:09:34.0961] <avandolder>
> If we do type checking as described in #1, there are a couple times we could do it

    When accessing it from the instance
    When invoking the method
    Both times

I was imagining that we would do the check only when accessing (1), but I'd be interested in hearing any arguments for another version. This would match up with the "it's just a non-writable private field" spec representation.

I don't think a check at the beginning of a method would really give enough information for JITs to rely on. For example, it could get an object as a receiver which is in the state of having the private methods but not the private fields (e.g., if you call a private method from an initializer), or it can be called on an initialized instance. Type feedback would be needed to get anywhere anyway.

[08:09:57.0943] <avandolder>
 * > If we do type checking as described in #1, there are a couple times we could do it
> - When accessing it from the instance
> - When invoking the method
> - Both times

> I was imagining that we would do the check only when accessing (1), but I'd be interested in hearing any arguments for another version. This would match up with the "it's just a non-writable private field" spec representation.

> I don't think a check at the beginning of a method would really give enough information for JITs to rely on. For example, it could get an object as a receiver which is in the state of having the private methods but not the private fields (e.g., if you call a private method from an initializer), or it can be called on an initialized instance. Type feedback would be needed to get anywhere anyway.

[08:27:03.0381] <mgaudet>
Ok. So I think maybe I've gotten myself confused between the spec text and my imagined implementation (my imagination being the issue here). Yet again, I'm sort of being thwarted by the weak-map model.

[08:27:18.0097] <mgaudet>
Once I swap that in, I think it makes more sense.

[08:30:01.0422] <mgaudet>
https://searchfox.org/mozilla-central/source/js/src/tests/test262/language/expressions/class/elements/static-private-method-access-on-inner-arrow-function.js is a test I need to cogitate on a bit

[08:33:11.0808] <mgaudet>
I don't have a great idea about how to get this implemented in a strictly efficient way; private-fields-as-properties, our current implementation strategy sort of pushes down the road of private-methods-as-private-properties; which I think will work spec wise, but means lots of extra slots. I can't think of ways to avoid them

[08:33:16.0716] <mgaudet>
 * I don't have a great idea about how to get this implemented in a strictly efficient way; private-fields-as-properties, our current implementation strategy sort of pushes down the road of private-methods-as-private-properties; which I think will work spec wise, but means lots of extra slots. I can't think of ways to avoid them, yet.

[08:38:25.0773] <sfink>
clearly we just need to implement private prototypes that stick to an object without being visible to JS

[08:38:27.0849] <sfink>
(j/k)

[08:38:30.0193] <sfink>
(I think?)

[08:38:36.0058] <mgaudet>
you joke

[08:38:40.0440] <mgaudet>
but... 

[08:39:14.0014] <mgaudet>
that'd be one way to dramatically cut the duplication of the implementation. 

[08:41:26.0589] <mgaudet>
avandolder / jorendorff As I let the above idea of private prototypes stew... I do sort of like it. 

[08:42:13.0086] <jorendorff>
ok, but the spec allows you to have multiple private brands

[08:42:23.0276] <mgaudet>
right... so you have a private proto chain

[08:42:44.0273] <jorendorff>
it can be an arbitrary collection of them, though, not just based on class lineage

[08:43:06.0718] <sfink>
aren't they guaranteed to not intersect, at least?

[08:43:31.0701] <mgaudet>
Hmm. Yes. This falls apart a bit. 

[08:46:23.0703] <sfink>
I don't know the spec here at all. I was just thinking that if these private methods are guaranteed to be distinct, you can still use a private prototype chain in any arbitrary order.

[08:51:29.0115] <avandolder>
jorendorffmgaudet so the parser needs to `noteDeclaredName` for the private names, but it should only do so once in the case of having both a getter and setter for the same name. I'm not entirely how to go about that

[08:53:45.0314] <mgaudet>
avandolder: So right now you're tripping the redeclared error right? 

[08:53:55.0977] <avandolder>
Yes

[08:57:03.0501] <mgaudet>
Huh. I would have expected that normal getters/setters had to deal with this. TIL

[08:58:55.0279] <avandolder>
also, it seems like private methods, unlike regular ones, can only have either a getter/setter with the same name or a regular method with the name, not both. i.e. `class C { get #p() {} set #p() {} }` is fine, but `class C { get #p() {} #p() {} }` is not

[09:00:35.0907] <mgaudet>
Uhm. My first instinct (May be bad) is to extend the used names tracker to track the PropertyType; then, add `noteDeclaredPrivateName` which takes the property type, and analyzes the state of the used names tracker to figure out what's been declared, and issue an error if you're in one of the invalid states

[12:26:34.0887] <sfink>
jonco: I noticed something kind of weird. I was looking at `Zone::needsIncrementalBarrier()` to see whether how well it aligned with `Zone::isGCMarking()`. It's fine, but it appears that the *only* thing that ever sets `needsIncrementalBarrier_` to true is `~AutoDisableBarriers`. Which works fine, but seems a little cryptic. And yet, it's not straightforward to explicitly set it to true when leaving `State::NotActive`, since we want the barriers disabled during GC. Just leave it, I guess?

[12:26:50.0589] <sfink>
 * jonco: I noticed something kind of weird. I was looking at `Zone::needsIncrementalBarrier()` to see how well it aligns with `Zone::isGCMarking()`. It's fine, but it appears that the _only_ thing that ever sets `needsIncrementalBarrier_` to true is `~AutoDisableBarriers`. Which works fine, but seems a little cryptic. And yet, it's not straightforward to explicitly set it to true when leaving `State::NotActive`, since we want the barriers disabled during GC. Just leave it, I guess?

[13:01:30.0286] <jonco>
sfink:Yeah, that is a little cryptic.  Maybe if that didn't have 'disable' in the name it would be clearer.  AutoUpdateBarriers perhaps?  Or just more comments about how this works.

[13:02:36.0011] <sfink>
I like both! I can do the patch.

[14:22:13.0741] <mgaudet>
confession: Got distracted for a bit hunting down the history of why you can return from constructors, and how that works a bit. May post writeup eventually.

[14:22:17.0190] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[15:22:15.0318] <Waldo>
> <@mgaudet:mozilla.org> Sounds reasonable enough to break that in two

Thanks for volunteering to review!

[15:22:19.0730] <Waldo>
/me runs

[15:31:33.0940] <gkw>
jandem: https://bugzilla.mozilla.org/show_bug.cgi?id=1654930

[15:31:47.0214] <gkw>
As promised, potentially involving --no-sse3

[15:35:11.0357] <Waldo>
gkw: Huh, what component is that in?  Mildly surprised I can't see it.

[16:38:08.0048] <mccr8>
Waldo: I fixed the security group so you should be able to see it now.

[16:43:06.0933] <Waldo>
Oh, did he lose the ability to file bugs in the right group?  😕  Can we fix that somehow?

[16:51:08.0184] <gkw>
Waldo: I can only file bugs in the core-security group but not as core-security-javascript or something like that

[16:51:18.0613] <gkw>
Waldo: dveditz would know more

[16:51:40.0499] <gkw>
hah, I have another one coming up that doesn't involve --no-sse3, only Math.round

[16:57:46.0559] <gkw>
in case anyone is interested: https://bugzilla.mozilla.org/show_bug.cgi?id=1654947

[16:58:25.0198] <gkw>
Waldo: cc'ed you this time for ^


2020-07-24
[05:34:23.0058] <mgaudet>
confession: Published [yesterday's investigation into the return behaviour of JS constructors](https://www.mgaudet.ca/technical/2020/7/24/investigating-the-return-behaviour-of-js-constructors) 

[06:15:09.0150] <wesgarland>
Just checking in - is anyone out there aware of a spidermonkey N-API ("node API") port?  It's essentially an engine-agnostic JSAPI.   I'm aware of the old SpiderNode, but IIRC it just shims V8s API?   We're doing WebGPU-N-API work here, and it has crossed my mind that a jsapi N-API would let us run the Google WebGPU crap in a spidermonkey js shell. Which might not be practical, but it would be cool as hell.

[07:32:49.0472] <jorendorff>
mgaudet: Continuing the conversation yesterday, avandolder is going to implement private methods and accessors using extra slots on every instance

[07:32:52.0902] <jorendorff>
as a first stab

[07:33:35.0482] <jorendorff>
mgaudet: I still don't know about the long term... there are a lot of pieces to keep in mind at once

[07:39:10.0338] <mgaudet>
jorendorff: So an alternative idea: We could use this an an opportunity to try to directly implement the weak-map semantics; if we have the machinery then we could directly compare our weak map implementation for fields vs our property system

[07:39:18.0314] <mgaudet>
 * jorendorff: So an alternative idea: We _could_ use this an an opportunity to try to directly implement the weak-map semantics; if we have the machinery then we could directly compare our weak map implementation for fields vs our property system

[07:40:17.0624] <jorendorff>
mgaudet: isn't weakmap doomed to be permanently slower? how can we cache the weakmap query?

[07:40:49.0648] <jorendorff>
or did you mean weakmap as a fallback for weird objects

[07:41:19.0546] <mgaudet>
... actually. strike that. It falls apart the more I think about it.

[07:41:28.0360] <jorendorff>
ok, good :D

[07:41:36.0254] <jorendorff>
The "private methods are own properties" approach works for both private methods and private accessors, instance and static, and will work across proxies I think?

[07:42:03.0787] <mgaudet>
It should; 

[07:43:27.0592] <mgaudet>
(WeakMap might be implementable, but I think would require us to keep the three custom opcodes, and build up more complexity there; I'm really excited by getting rid of them and jumping down to one) 

[07:47:12.0909] <avandolder>
speaking of the custom opcodes, I was wondering when/if you were planning on landing the patch to remove them?

[07:50:07.0239] <jorendorff>
mgaudet: ^

[07:52:02.0852] <mgaudet>
Was trying for yesterday, but given soft freeze was thinking of waiting till Monday afternoon/tuesday?

[07:52:39.0130] <mgaudet>
The patch will be -very- similar though, when it lands. Review feedback wasn't too overwhelming.

[07:54:48.0377] <mgaudet>
avandolder: so I'd say you should be comfortable building atop the patch; rebase should me small. 

[07:55:15.0574] <avandolder>
Alright, sounds good

[07:58:24.0418] <mccr8>
Waldo: I think you can only file security bugs in groups you are a member of. Obviously it would be better if bugs were filed by default in an appropriate sec group...

[07:58:34.0143] <mccr8>
(well, except for Core, of course)

[07:59:04.0094] <TheQwertiest>
hey everyone!
a small question: I have an app with embedded SM. I've created a monitor thread that calls JS_RequestInterruptCallback if it detects a slow/hanging script. In the interrupt callback I'm calling a popup window (i.e. smth like  "Do you want to stop the script?").
So, the question: is it possible to continue script execution while inside the interrupt callback? (e.g. the script might complete by the time user read the whole popup) And how Firefox itself handles this? Does it stop the script execution when popup is shown?

[07:59:09.0340] <TheQwertiest>
thanks in advance =)

[07:59:50.0617] <TheQwertiest>
 * hey everyone!
a small question: I have an app with embedded SM. I've created a monitor thread that calls JS_RequestInterruptCallback if it detects a slow/hanging script. In the interrupt callback I'm calling a popup window (i.e. smth like  "Do you want to stop the script?").
So, the question: is it possible to continue script execution while inside the interrupt callback? (e.g. the script might complete by the time user reads and processes the info from the popup) And how Firefox itself handles this? Does it stop the script execution when popup is shown?

[08:00:32.0931] <jandem>
it depends on your return value from the interrupt callback

[08:00:38.0697] <TheQwertiest>
PS: I've tried to reproduce the scenario in FF, but I have ~zero HTML knowledge...

[08:01:27.0536] <jandem>
returning false means "terminate", returning true means "continue" I think

[08:01:45.0211] <yulia>
nicolo-ribaudo: are you already in this room?

[08:02:41.0088] <TheQwertiest>
 * hey everyone!
a small question: I have an app with embedded SM. I've created a monitor thread that calls JS_RequestInterruptCallback if it detects a slow/hanging script. In the interrupt callback I'm calling a popup window (i.e. smth like  "Do you want to stop the script?").
So, the question: is it possible to continue script execution while inside the interrupt callback? (e.g. the script might complete by the time user reads and processes the info from the popup) And how Firefox itself handles this? Does it suspend the script execution when popup is shown?

[08:03:02.0704] <yulia>
great

[08:03:09.0787] <jandem>
TheQwertiest: oh maybe I misunderstood what you asked. The interrupt callback is called on the JS-executing thread. You could continue execution while you show the dialog, that's what we do with e10s now (you get the slow-script notification but if the script finishes it disappears)

[08:03:20.0935] <jorendorff>
mgaudet: I think we have some ICs or other caching for some operations across some proxies. Maybe just DOM proxies. jandem I think you did reviews for bz patches about this?

[08:03:40.0196] <jorendorff>
mentioned because I think we should double-check that private names don't need special care there

[08:03:51.0516] <TheQwertiest>
@jandem, any tips on how to achieve that? =)

[08:04:21.0749] <TheQwertiest>
 * jandem: any tips on how to achieve that? =)

[08:06:14.0869] <jandem>
TheQwertiest: first interrupt callback shows the dialog, if the user selects an action you trigger a second interrupt fallback to terminate execution? And you need a check to hide the dialog after your JS execution finishes

[08:06:58.0052] <jandem>
jorendorff: yeah we have some [cases](https://searchfox.org/mozilla-central/rev/828f2319c0195d7f561ed35533aef6fe183e68e3/js/src/jit/CacheIR.cpp#245-247) we optimize

[08:07:09.0264] <jandem>
 * TheQwertiest: first interrupt callback shows the dialog, if the user selects an action you trigger a second interrupt callback to terminate execution? And you need a check to hide the dialog after your JS execution finishes

[08:08:09.0134] <TheQwertiest>
jandem: right, I was overthinking this too much :D (thought that there was smth like "JS_ContinueExecutionInInterruptCallback")...

[08:08:10.0995] <TheQwertiest>
thanks!

[08:13:12.0786] <jorendorff>
avandolder mgaudet: OK, I wanted to run another idea by you

[08:14:01.0931] <jorendorff>
suppose for private methods we add a new kind of Shape that adds a data property, such that the Shape contains the value as well as the name and attributes. No slot on the object.

[08:15:17.0581] <jorendorff>
The motivation is that instances will be bulky and slow to create, both O(n) for a class with n private methods.

[08:16:40.0372] <jorendorff>
with this approach the bulk is eliminated. This does require a ton of work—only every place that touches... properties 8-|

[08:17:36.0788] <mgaudet>
Uhm. 

I would need to cogitate on this a bit 

[08:18:19.0268] <jorendorff>
The idea here is that for private getters and setters, we are already able to share a Shape without adding any bulk to the instance

[08:18:28.0105] <jorendorff>
pleasant surprise

[08:20:29.0430] <jorendorff>
OK — the last part of the idea is that the last step is to merge all private method/getter/setter initialization into a single opcode that stamps all the private methods/accessors/brand for a class onto an instance at once

[08:21:21.0740] <jorendorff>
The IC for this instruction would be like for SetProp, only it never has to add a slot. I think it would be fast.

[08:22:35.0712] <jorendorff>
can't tell if sarcastic rocket :)

[08:24:21.0162] <jorendorff>
assuming this is too intrusive to consider, back to the drawing board...

[08:24:54.0994] <jandem>
lol no, I didn't really think about it, just seemed appropriate for things going fast

[08:25:09.0256] <mgaudet>
I think it's plausible for sure 

[08:25:14.0123] <jorendorff>
using ordinary property ops for private fields is a constraint

[08:25:48.0948] <mgaudet>
I'm trying to figure out what downsides there are; proxies would be weird to implement 

[08:25:52.0679] <mgaudet>
maybe? 

[08:26:12.0895] <jorendorff>
yeah

[08:26:25.0121] <jorendorff>
how about this... all private methods have a trivial getter

[08:27:51.0130] <jorendorff>
you know, i'm going about this all wrong

[08:27:57.0869] <jorendorff>
we should just handle it in the frontend

[08:28:24.0365] <jorendorff>
`obj.#x` is a property access if `#x` is a field, and something special if `#x` is a method. We know statically, right?

[08:28:43.0598] <jorendorff>
 * `obj.#x` is a property access if `#x` is a field or accessor, and something special if `#x` is a method. We know statically, right?

[08:29:24.0178] <mgaudet>
we do, yes

[08:30:21.0739] <jorendorff>
OK. Then we just have to figure out how to do the brand check, but getting the actual method value itself is straightforward: we can stash it in the same environment that holds `.initializers`.

[08:30:31.0788] <jorendorff>
it's like accessing a variable lol

[08:33:12.0597] <jorendorff>
ok, the private brand can be an accessor property with no getter and no setter, whose name is just the name of the first private method in the class

[08:37:41.0431] <mgaudet>
Could it just be testing for the existence of the first private field-or-method itself? 

[08:38:07.0668] <mgaudet>
not sure where you'd have this brand, but the fields/methods

[08:39:16.0594] <jorendorff>
yes

[08:39:46.0639] <jorendorff>
So if the class has any private fields or accessors,

[08:40:37.0100] <jorendorff>
that is sufficient to mark every instance, I think? little bit worried about cases where an exception is thrown from a private field initializer and we're supposed to end up with a partly-initialized object that nonetheless can still be used

[08:40:48.0748] <jorendorff>
this proposal 😬

[08:43:37.0903] <mgaudet>
wait what now

[08:43:48.0642] <mgaudet>
uuuuuuuurk

[08:44:25.0523] <mgaudet>
We... we need some test cases for this

[08:45:07.0065] <mgaudet>
(I don't think it's a problem right now; but I had thoughts about future optimizations, and hadn't considered this. I had assumed an all-or-nothing stamping

[08:45:11.0503] <mgaudet>
 * (I don't think it's a problem right now; but I had thoughts about future optimizations, and hadn't considered this. I had assumed an all-or-nothing stamping) 

[08:45:56.0133] <jorendorff>
it's all-or-nothing as far as the re-init check is concerned

[08:46:04.0895] <jorendorff>
but not other checks? at least that's what i think

[08:46:28.0089] <jorendorff>
maybe we should push back in committee

[08:46:43.0367] <jorendorff>
but the intent is that it's no worse than properties

[08:47:09.0162] <mgaudet>
I need to do a close read of the fields proposal to figure out what's going on here; and will need to write some test cases around this regardless. 

[08:48:57.0700] <jorendorff>
Private methods (including accessors) are all-or-nothing.

[08:49:04.0625] <mgaudet>
Maybe for the init check we're alright; You'd always throw on the first one if it already existed; and if it didn't exist, it's no different than not having been stamped. There's an order-of-operation questions (Does PrivateFieldAdd run after the initializer body is run or not -- I hope so) but I think we'd be ok.

[08:49:06.0124] <jorendorff>
They're stamped onto the object first, before private fields.

[08:49:25.0568] <mgaudet>
right; you can't make a private method throw during the stamping process 

[08:50:31.0127] <iain>
Dumb question: what do I have to do to get jitspew working in non-debug builds? For some reason `--enable-jitspew` isn't actually defining JS_JITSPEW for me

[08:53:10.0834] <jorendorff>
mgaudet: so, two cases
```
class B { constructor(obj) { return obj; } }
class C1 extends B {
  #m() {}
  #f = throwTheFirstTimeThisIsCalled1();
}
class C2 extends B {
  #f = throwTheFirstTimeThisIsCalled2();
}
```
I think you can stamp C2 on an object twice to get a fully initialized object with private field `#f`. But not C1.

[08:54:19.0448] <mgaudet>
Right. That seems sensible enough.

[09:31:44.0855] <jorendorff>
to finish the thought, I think `obj.#m()` could compile to different bytecode when `#m` is a method, which we know statically

[09:34:28.0140] <jorendorff>
and that bytecode would be like
`GetLocal obj; ...; CheckPrivateField ThrowHasNot; Pop; GetLocal <#m>; Swap; Call 0 `

[09:50:15.0812] <nbp>
mgaudet: https://github.com/softdevteam/warmup_experiment For your list in case it is missing.

[09:52:29.0097] <nbp>
^ some wisdom for WarpBuilder and CacheIR integration. (cc iain & jandem)

[09:53:32.0696] <mgaudet>
nbp: Weird. They have results for SM in there, but don't discuss it as a VM under investigatin

[09:53:35.0871] <mgaudet>
 * nbp: Weird. They have results for SM in there, but don't discuss it as a VM under investigation

[09:54:09.0650] <nbp>
They mentioned it as having a wramup counter which is excesively high …

[09:54:24.0650] <nbp>
for the Ion threshold

[09:56:14.0301] <mgaudet>
Where? 

[09:56:36.0824] <mgaudet>
(grepping shows only the results and revision. I have read this paper before but don't recall that particular piece of advice) 

[10:02:31.0046] <iain>
Okay, I've been trying to debug config issues for a while and I'm just confusing myself

[10:03:48.0112] <iain>
What is the sequence of events that connects `set_define(...)` in `js/moz.configure` to `#ifdef ...` in source files?

[10:05:54.0874] <iain>
It seems like it's supposed to be defined in `obj-dir/js/src/js-confdefs.h`

[10:07:19.0486] <iain>
But for reasons I can't make out, some of the definitions in `js/moz.configure` make it into that file in my opt build, and some don't

[10:09:07.0573] <Benjamin Bouvier>
iain: moz.configure is a bit magic. The `set_define` calls take a function in argument, and when this function returns true (based on parameters, inferred from annotations), the define is defined (otherwise it's not)

[10:09:45.0792] <Benjamin Bouvier>
for instance, --enable-smoosh at configure time makes [this function](https://searchfox.org/mozilla-central/source/js/moz.configure#29) return true, meaning taht (because of a few lines below) if --enable-smoosh was passed, then JS_ENABLE_SMOOSH will be defined

[10:11:00.0586] <Benjamin Bouvier>
the thing that took me long to realize was that returning false in one of these functions (which may define the name to 0) is different from returning (explicitly or implicitly) None (which doesn't define the name)

[10:11:27.0227] <Benjamin Bouvier>
iain: does it help?

[10:12:16.0853] <iain>
Benjamin Bouvier: Do you see anything wrong with the existing code for jitspew? https://searchfox.org/mozilla-central/source/js/moz.configure#341-349

[10:12:58.0605] <iain>
Because I'm passing`--enable-jitspew`, but (in opt builds only) it doesn't show up in `js-confdefs.h`

[10:13:10.0582] <iain>
 * Because I'm configuring with`--enable-jitspew`, but (in opt builds only) it doesn't show up in `js-confdefs.h`

[10:13:42.0526] <iain>
 * Because I'm configuring with`--enable-jitspew`, but (in --enable-optimize --disable-debug builds only) it doesn't show up in `js-confdefs.h`

[10:13:45.0869] <iain>
But it does show up in `js-confdefs.h` in debug builds

[10:13:58.0802] <iain>
 * Because I'm configuring with`--enable-jitspew`, but (in `--enable-optimize --disable-debug` builds only) it doesn't show up in `js-confdefs.h`

[10:14:44.0804] <iain>
Oddly, `-DJS_JITSPEW=1` does show up in the build output in at least one place

[10:15:27.0947] <Benjamin Bouvier>
iain: it doesn't seem wrong at a quick glance; indeed it should be set either in debug builds, or if --enable-jitspew has been passed to the configure line

[10:15:41.0768] <Benjamin Bouvier>
i just tried it and it seems to work fine here

[10:15:57.0049] <Benjamin Bouvier>
did you re-run configure? no typo in `--enable-jitspew`?

[10:16:20.0430] <iain>
Yeah, I've rerun configure a number of times

[10:16:20.0505] <Benjamin Bouvier>
clobbering the build directory might help too, sometimes

[10:16:29.0094] <iain>
That's what I'm thinking

[10:17:05.0453] <iain>
If/when that fixes it I am going to feel very dumb

[10:19:22.0755] <Benjamin Bouvier>
good luck, we're all counting on you, etc.

[10:19:42.0831] <Benjamin Bouvier>
(i'm genuinely curious to hear if it did the trick)

[10:20:17.0105] <jandem>
Is that with mach? If not, I think it handles these things better 

[10:22:12.0391] <iain>
No, I keep meaning to switch over to mach and not getting around to it

[10:22:23.0382] <iain>
Maybe this will be the kick in the pants I needed

[10:24:17.0526] <iain>
Yep, that fixed it

[10:24:55.0446] <iain>
Looks like `js-confdefs.h` doesn't get clobbered if you change configuration options?

[10:25:42.0288] <jandem>
(before I switched to Mach I had to clobber when adding/removing cpp files etc, I think configure/make doesn't invoke the full build system or so) 

[10:27:01.0277] <iain>
I've normally found that it's enough to reconfigure after adding a new cpp file, and I rarely have to clobber

[10:27:17.0400] <iain>
But the right answer here is obviously to just use mach

[10:27:33.0505] <jandem>
ah right, maybe reconfigure it was 

[10:29:51.0566] <nbp>
mgaudet: that's a long time since I read it, but I think they mention the 10000 threshold somewhere in the paper.

[11:05:03.0260] <tcampbell>
jorendorff: ping?

[11:05:16.0890] <jorendorff>
hi! sorry, sec

[12:58:41.0757] <Waldo>
avandolder: Any chance you could land a use of https://searchfox.org/mozilla-central/search?q=symbol:_ZL33AsyncIteratorHelperPrototypeClass&redirect=false or remove it?  It's breaking my local non-unified builds now.

[12:59:06.0130] <Waldo>
Not certain why an unused variable isn't breaking unified builds as well...

[13:12:45.0545] <avandolder>
yep, will do. I think that got just missed 

[14:16:55.0489] <mgaudet>
confession: Based on a review comment from Jason, got to a simper design for private field proxies; needs more testing, but I like the patch. 

[14:16:59.0122] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:21:35.0815] <sfink>
confession: taking a break from rewriting the same patch over and over again (well, waiting on sec-approval now) to try to write a test case for something I landed last week

[14:40:42.0791] <iain>
confession: Trial inlining for warp is working well enough to measure performance. With dumb untuned heuristics, we get a 3.5% speedup on octane and don't hurt speedometer. More tuning to come after I pack up all my worldly possessions and move to BC.

[14:54:25.0866] <Waldo>
avandolder: Gave you a review if you want to land that faster, hard to think a review from someone actually in the area is going to be any more incisive on this concern.  :-)

[15:04:29.0201] <avandolder>
ah thanks!

[16:22:28.0351] <Waldo>
Could that stable-string-chars bug be more reliably produced with a jsapi-test?

[16:22:48.0781] <Waldo>
(I didn't look, I'm assuming from the `JSON.parse` mention your test is not a jsapi-test.)

[16:23:02.0776] <sfink>
yes, it probably could

[16:23:05.0150] <sfink>
I should do that too

[16:23:11.0354] <sfink>
I still want the jit-test for fuzzer food

[16:24:35.0514] <sfink>
it worries me when I have a ~1 in 1000 intermittent crash in plain JS code, fix it, but don't have a corresponding plain JS test of some sort

[16:25:24.0977] <sfink>
though really, I guess what I mostly want to do is guard against a similar bug being introduced elsewhere, and this test isn't going to help much with that. Unless I get lucky with fuzzing.

[16:29:13.0184] <sfink>
I think I'm going to have to give up the job name `SM(waasm64)` for the AArch64 wasm cranelift tests. ☹️ It'll end up running more than those.

[16:30:55.0643] <sfink>
apropos to nothing: "assertion count 7 is less than expected 8 to 14 assertions"


2020-07-26
[17:29:14.0909] <DerekNonGeneric>
arai: building SpiderMonkey filled my hard drive, which is why I was never able to get back to you. I'm thinking about using pnpm to help out w/ this problem (need to solve for having several projects w/ huge `node_modules/`). I will keep you posted as soon as I have success, though!

[17:34:31.0572] <DerekNonGeneric>
the suggestion I was given in #build (not using a case-sensitive filesystem) looked extremely promising as I was able to move past that `String.h` compilation issue. TBD: if there are any other gotchas w/ building this on Debian WSL. I wish I would have communicated that sooner 😓

[21:24:58.0590] <Caspy7>
Maybe someone in here can help me track down an answer on this question...
The other day, in another channel, someone was asking about the UX issue by which the browser will tell you that **A** tab is slowing things down but now *which* tab.
someone else linked to bug 1241462 ...

[21:25:00.0045] <botzilla>
https://bugzil.la/1241462 — NEW (nobody) — hung tab notification should indicate which tab is hung

[21:25:33.0831] <Caspy7>
comment 1 there, which is five years old says:
> This is a process per tab related bug. currently a single hung tab means all tabs are hung.

[21:26:51.0269] <Caspy7>
so it sounds like Firefox can only detect when a *process* gets bogged down, but not which tab in it is the problem
is this correct?
Will fission basically resolve this?

[21:27:29.0809] <Caspy7>
also, will two instances of reddit tabs share a process?


2020-07-27
[19:28:07.0318] <DerekNonGeneric>
arai: thank you for your help and patience, mission accomplished :)

[19:28:11.0289] <arai>
congrats!

[07:08:50.0745] <jorendorff>
avandolder: https://docs.google.com/document/d/19UA2L1UDKOhrt7AO-CcKqTb1WZVRquCPYgMDPB8oHbY/edit?usp=sharing

[07:43:12.0689] <TheQwertiest>
hey everyone!
another small question: during interrupt callback (i.e. JS_RequestInterruptCallback) is it possible to stop script execution of a specific realm? Usage scenario: slow/hanging script detection/suspension.

[08:04:08.0821] <nbp>
TheQwertiest: it will simply stop the one which is currently running, the callback could check the stack to know which realm is on top of the stack and resume its execution if this is not the right one.

[08:04:37.0069] <nbp>
It does not have the capabilities of adding extra conditions on the interrupt.

[08:16:59.0959] <TheQwertiest>
nbp: 

[08:17:11.0701] <TheQwertiest>
 * nbp: I see, thanks for the info!

[08:17:52.0611] <loganfsmyth>
given that a callstack can have frames from multiple realms, what would it mean to stop execution of a single realm?

[08:21:24.0084] <nbp>
I have no idea, JS does not have a clear definition for what it means to stop the execution.

[08:22:47.0824] <nbp>
I guess the best you can have is uncatchable exceptions, in which case I wonder, are we still running finally code?

[08:33:13.0086] <sfink>
no, `finally` gets skipped

[08:33:40.0230] <sfink>
It seems strange that we don't have a `throwUncatchableException()` test function

[08:34:32.0259] <sfink>
I can add one. I'm not sure whether it should be in `--fuzzing-safe`, though -- it might mess up the harnesses

[08:56:51.0022] <sfink>
ah! There already is one, it's just called `terminate`

[11:01:34.0954] <loganfsmyth>
> <@loganfsmyth:mozilla.org> What are the limits of data that can be accessed in a `finalize` handler? Say you had some data on another object that can be cleared when this object is deleted. Right now Debugger instances do a lot of this by having its own `DebugAPI::sweepAll`, and I'm curious if that is something that could be simplified or made to use fewer special-cased APIs.

I want to revisit this question. Is the primary issue that you'd run the risk of accessing something that was already finalized? If the thing I want to access is a `JSScript` referenced by an object, are JSObject finalizers guaranteed to run before JSScript finalizers? 

Basically what I'm curious about doing is `script->setHasDebugScript(nullptr);` when an object is finalized. Right now we do this via `DebugAPI::sweepAll` and as far as I can tell, _if_ objects are finalized first, we could remove `sweepAll` in favor of some reference counting and running the logic from a finalizer. I don't have a good sense for whether the current `sweepAll` approach is desirable and consistent with other parts of SpiderMonkey, or whether the Debugger's `sweepAll` is kind of a weird thing that others would want to remove too.

[11:07:36.0295] <Waldo>
Anyone who's worked on fields or function name-setting more recently than I have might be interested in bug 1655405.  I'm slightly rusty on function name setting, so I'm not sure if this is the _only_ way we could hit this, or if this is an entirely new way of hitting this and we just want to relax the assertion in `js::SetFunctionName` and the assertion in `NameToFunctionName` to accommodate bigints.

[11:07:43.0084] <botzilla>
https://bugzil.la/1655405 — NEW (nobody) — Assertion failure: name.isString() || name.isSymbol() || name.isNumber(), at vm/JSFunction.cpp:2446 with Class and BigInt

[11:12:14.0515] <evilpie>
Waldo: what is the state of WritableStreams + piping?

[11:13:07.0923] <sfink>
loganfsmyth: generally speaking, we've been trying to minimize the number of other things accessed in finalizers. It causes various problems. But in this particular example, foreground-finalized objects *are* guaranteed to be finalized before scripts. This is assuming they're in the same zone sweep group, which I suspect is enforced for Debuggee stuff already?

[11:13:22.0076] <sfink>
this is very much jonco territory, though. I never get the ordering constraints right.

[11:14:08.0102] <loganfsmyth>
alright, got it

[11:14:37.0363] <loganfsmyth>
do you have any opinion on `DebugAPI::sweepAll` as an approach to handling cleanup of debugger objects, vs finalizers?

[11:14:53.0418] <loganfsmyth>
 * @sfink do you have any opinion on `DebugAPI::sweepAll` as an approach to handling cleanup of debugger objects, vs finalizers?

[11:15:28.0653] <loganfsmyth>
 * sfink do you have any opinion on `DebugAPI::sweepAll` as an approach to handling cleanup of debugger objects, vs finalizers? 

[11:15:59.0504] <Waldo>
evilpie: I'm figuring out how to recognize/act on `AbortRequest` instances supplied by the embedding.  Right now I think I can _detect_ them by having the embedding supply a `JSClass*` for it, similar to what we do for the embedding supplying a class for `Window` or maybe `WindowProxy`.  Still figuring how to do the "add an action" operation for it.

[11:16:15.0571] <sfink>
I just remember that `sweepAll` had various reasons for existing. It may be that enough of them have been eliminated at this point, that it could be reconsidered?

[11:16:44.0306] <sfink>
there are various comments within `sweepAll` talking about why it needs to happen before finalization. Are they still valid?

[11:17:10.0396] <evilpie>
Waldo: okay strange. So these AbortRequests aren't implemented in SpiderMonkey?

[11:17:18.0434] <sfink>
inter-object finalization ordering is not guaranteed

[11:18:40.0163] <loganfsmyth>
I've been tossing around ideas in my head, right now there's other stuff that would need to change too

[11:18:49.0761] <sfink>
I've always somewhat blindly assumed that `Debugger` has enough weirdness that it will need *some* level of special-casing.

[11:18:57.0115] <loganfsmyth>
Rhe exact order of destroying the datastructures the debugger uses would have to be handled via refcounting instead of iterating WeakMaps in`sweepAll`

[11:19:04.0223] <loganfsmyth>
 * The exact order of destroying the datastructures the debugger uses would have to be handled via refcounting instead of iterating WeakMaps in`sweepAll`

[11:19:27.0780] <Waldo>
evilpie: They are not, they're a DOM thing with all sorts of DOM dependencies.  I guess the shell will have to define a mockup class for them, to enable shell-based testing.

[11:19:52.0956] <loganfsmyth>
the link out to JSScript and Realm for the `isDebuggee` and `hasDebugScript` flags are the main pieces I can see that require special handling

[11:20:11.0154] <loganfsmyth>
and Realm isn't a GCThing so at least toggling a flag on that during a finalizer seems workable

[11:20:18.0817] <loganfsmyth>
so the JSScript side is the main one I was unsure about

[11:20:40.0497] <sfink>
the area I mostly run into is with weakmap marking, where `DebuggerWeakMap` is the only thing that has its keys in different zones than the map. Which means that if you're not collecting the map's zone but are collecting the key zone, you won't see the edge through the weakmap entry at all. (Everything else relies on the CCW map for this.)

[11:20:40.0956] <loganfsmyth>
assuming I'm understanding Realms right

[11:21:16.0530] <loganfsmyth>
I think all of that could be simplified if I tried hard enough

[11:21:45.0855] <evilpie>
Waldo: for that SetFunctionName bug, this should be relevant: https://tc39.es/proposal-class-fields/#sec-setfunctionname

[11:22:06.0274] <sfink>
Realms aren't GC things, but they can be collected during GC, so you have to be somewhat careful.

[11:22:16.0963] <evilpie>
actually no, I wonder where bigint is converted to string or something like that

[11:22:23.0914] <sfink>
(in fact, we have a `Rooted<Realm*>` instantiation)

[11:23:10.0387] <loganfsmyth>
Can a Realm be destroyed during JSObject* finalization?

[11:23:37.0435] <Waldo>
I thought I had vaguely remembered `var obj = { 2n: function() {} };` as setting a function name, but maybe that's just our un-visible extension for debugging and such.

[11:23:49.0446] <sfink>
no. Or at least, that would seem very unlikely to me. A Realm only dies when it's empty. Lemme look up where they are swept...

[11:23:55.0666] <Waldo>
Maybe class fields _are_ the first place where bigints can be the name of a function.

[11:24:05.0449] <Waldo>
(at least one set dynamically)

[11:25:51.0633] <sfink>
ok, you're safe there. Realms are deleted during `sweepZones`, which only happens after all finalization (foreground and background) is complete.

[11:26:10.0650] <evilpie>
Waldo: I think the spec treats bigint literals like numeric literal, so it should be a string per spec?

[11:26:21.0903] <evilpie>
https://tc39.es/ecma262/#sec-object-initializer-static-semantics-propname

[11:26:59.0110] <loganfsmyth>
sfink: perfect

[11:27:34.0339] <Waldo>
evilpie: Yeah, I meant the input to determining function name could be bigint.

[11:28:42.0037] <sfink>
and `DebugAPI::findSweepGroupEdges` ensures that debuggees are debuggers are swept in the same group, so it looks to me like you can rely on foreground object finalization happening before script finalization.

[11:29:11.0750] <sfink>
the relevant objects being finalized here are `Debugger.Object`s or `Debugger.Script`s, I hope, not arbitrary objects?

[11:29:25.0397] <sfink>
(because arbitrary objects might not be finalized at all, or be finalized in the background)

[11:31:07.0582] <loganfsmyth>
this entire exploration started on my side by wanting to try to use normal CCWs so that the Debugger objects wouldn't need the sweepGroup or special WeakMap logic

[11:31:51.0876] <loganfsmyth>
so in this case, my question from easier is basically, if I tried to introduce a DebugScriptObject to act as a debuggee-realm wrapper around JSScript, could it clear its `hasDebugScript` flag when the object is finalized

[11:31:58.0788] <loganfsmyth>
 * so in this case, my question from earlier is basically, if I tried to introduce a DebugScriptObject to act as a debuggee-realm wrapper around JSScript, could it clear its `hasDebugScript` flag when the object is finalized

[11:32:04.0495] <Waldo>
evilpie: Hrm, this spec looks like it doesn't canonicalize numbers or bigints into strings before it sets an anonymous function's name in that bug's syntax, i.e. this is a spec bug.

[11:32:22.0440] <loganfsmyth>
then DebugScript could just have a CCW referencing the `DebugScriptObject`

[11:32:26.0682] <loganfsmyth>
 * then Debugger.Script could just have a CCW referencing the `DebugScriptObject`

[11:32:52.0651] <evilpie>
Waldo: I couldn't actually figure out where the actual relevant SetFunctionName call happens

[11:33:11.0795] <sfink>
ah! Ok. That resolves all of my concerns. Though there's probably lots I'm not thinking of.

[11:33:59.0587] <sfink>
I think it's a great idea. Whether it'll work, and can't say with any confidence. ;-)

[11:34:04.0208] <Waldo>
evilpie: Via leaps of faith, I think it's probably https://tc39.es/proposal-class-fields/#sec-define-field where `fieldRecord.[[Name]]` is the result of evaluating the field name -- and so a number or bigint is going to be there having that type, not string.

[11:34:12.0742] <sfink>
 * I think it's a great idea. Whether it'll work, I can't say with any confidence. ;-)

[11:34:17.0416] <Waldo>
I could have cheated too hard to reach that conclusion, but it doesn't seem too likely.

[11:34:29.0067] <sfink>
I agree that it would be wonderful to remove this special-casing.

[11:35:24.0742] <loganfsmyth>
I think all this would also let me get rid of https://searchfox.org/mozilla-central/rev/c6676771df58c6e0098574bc6b11517acbf264cf/js/src/vm/Runtime.h#506 which I'd love

[11:35:53.0890] <evilpie>
So [[Name]] is probably set here https://tc39.es/proposal-class-fields/#runtime-semantics-class-field-definition-evaluation

[11:36:10.0880] <evilpie>
I think you are right, this doesn't use the "string" interpretation

[11:37:03.0064] <sfink>
tcampbell|pto was grumbling about scripts requiring foreground finalization just for things like code coverage and the debugger (and maybe one other?). But I wouldn't worry about that.

[11:38:07.0208] <loganfsmyth>
I have not dug into coverage data yet, but it's possible that stuff could end up stored the same way I'd ideally want to handle the debugger data

[11:38:58.0989] <sfink>
doesn't your scheme rely on scripts remaining foreground finalized?

[11:39:50.0510] <loganfsmyth>
I don't think I have a good grasp on why they are foreground right now, I'll have to look into that

[11:41:26.0154] <sfink>
seems like there's a list of reasons:  coverage, script counts, debugger, profiler, vtune, jit scripts

[11:42:15.0375] <sfink>
oh, hm. Never mind, your scheme only needs the scripts to be finalized after your DebugScriptObjects. So it would be fine even if they were background finalized.

[11:42:27.0455] <loganfsmyth>
oh yeah right now it has https://searchfox.org/mozilla-central/rev/c6676771df58c6e0098574bc6b11517acbf264cf/js/src/vm/JSScript.cpp#629 right now

[11:42:37.0264] <loganfsmyth>
I think I'd end up removing that

[11:42:46.0372] <sfink>
right

[11:42:59.0092] <sfink>
so you'd actually make it easier to stop foreground finalizing them

[11:43:09.0473] <loganfsmyth>
sounds like

[11:47:03.0679] <Waldo>
evilpie: Filed https://github.com/tc39/proposal-class-fields/issues/314 for the general concern.

[12:43:50.0926] <Waldo>
Or, I just misread, and we can change a couple asserts and be done with it.

[12:58:28.0466] <Waldo>
/me mutters about tests

[12:59:00.0139] <Waldo>
How is there not an upstream test for this already 😕

[13:00:12.0509] <evilpie>
Are there tests for fields?

[13:00:48.0536] <Waldo>
¯\_(ツ)_/¯

[13:01:04.0647] <Waldo>
If there's a proposal implemented in multiple engines, surely there are tests too...

[13:30:04.0591] <avandolder>
jorendorff: from what I can tell, the function which emits field initializers into a constructor, `emitInitializeInstanceFields`, has no context of the current class being emitted, and only knows length of the `.initializers` array. So if I want to insert bytecode to stamp the private methods in a similar way, i think I either need to either
- pass all the information (names and index they correspond to) about the private methods on the class through a bunch of layers
- store the information on the `BytecodeEmitter` directly
- or, and I'm not sure if this is really possible, store the code to stamp a private method inside a lambda in `.initializers`, and let `emitInitializeInstanceFields` emit the same bytecode for them as it already does for fields

[14:03:20.0752] <sfink>
ok, what does it mean when a page has 600-800MB each of Call, Array, Function, and Object objects? (And nothing else that is remotely as large.) Are those closures piling up?

[14:05:51.0184] <sfink>
I need to find some good victim to needinfo. (This is bug 1653088.)

[14:05:54.0605] <botzilla>
https://bugzil.la/1653088 — NEW (nobody) — Performance issue on voice.google.com - Site can hang from seconds to minutes

[14:06:12.0877] <sfink>
they're all live, fwiw

[14:09:19.0891] <ptomato>
sometime between ESR68 and ESR78 it became impossible to use `JS_DefineProperties()` on an object whose JSClass has a resolve operation, was that intentional?

[14:09:57.0817] <ptomato>
(you can no longer add `JSPROP_RESOLVE` to a JSPropertySpec because the flags field is private, and it asserts if you try to construct it with that flag)

[14:13:11.0283] <ptomato>
 * (you can no longer add `JSPROP_RESOLVING` to a JSPropertySpec because the flags field is private, and it asserts if you try to construct it with that flag)

[14:17:47.0486] <sfink>
it looks like `JSPROP_RESOLVING` is supposed to only be an internal recursion avoidance mechanism. Does anything break if you just don't pass it?

[14:19:53.0581] <sfink>
hm, the MDN page says hooks must pass it. Is your `JS_DefineProperties` call within a hook?

[14:22:12.0246] <ptomato>
I haven't recently tried, but back when I added that code it would go into an infinite loop if I didn't pass `JSPROP_RESOLVING`. I can check if it still does that :-)

[14:22:41.0974] <sfink>
it kinda looks like it's still required, but only when your invocation is from within the hook

[14:23:15.0829] <ptomato>
I'll check that and get back to you

[14:30:11.0389] <ptomato>
sfink: at least in esr68, it's still required when defining properties outside the hook, if your resolve hook might try to access one of the properties that you're pre-defining.

[14:30:57.0796] <ptomato>
it looks like I can remove `JSPROP_RESOLVING` from this particular `JS_DefineProperties()` call with no ill effects, but I'm a bit nervous about that since it leaves an evil trap lurking for future changes

[14:31:34.0561] <sfink>
bleh. Yeah, seems painful.

[14:34:49.0527] <mgaudet>
confession: queued some patches for landing (which land right at my EOD of course :P) Quite happy with some recent design improvements. 

[14:34:52.0703] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:52:13.0372] <djvj>
Is making the assumption that all ParseTasks which start on some runtime stay with that runtime until the end?  I.e. I can carry a JSRumtime* on the ParseTask and reliably use it for all operations related to that task?


2020-07-28
[22:34:42.0213] <jandem>
djvj: correct. ParseTasks can also use cx->runtime() to get the runtime

[22:38:24.0473] <jandem>
 * djvj: correct. ParseTasks can also use cx->runtime() to get the runtime while they're active

[01:22:38.0137] <jonco>
> <@sfink:mozilla.org> loganfsmyth: generally speaking, we've been trying to minimize the number of other things accessed in finalizers. It causes various problems. But in this particular example, foreground-finalized objects *are* guaranteed to be finalized before scripts. This is assuming they're in the same zone sweep group, which I suspect is enforced for Debuggee stuff already?

loganfsmyth: the ordering constraints end up being hard to reason about and obey correctly, which is why we've moved to the current sweepAll style approach where sweeping happens before anything gets finalized

[01:26:32.0275] <jonco>
(There are some ordering constrains between the different kinds of GC things, but not between GC things of the same kind.  There are some constraints between GC things in different zones, depending on whether CCWs exist between them.  But this has been a rich source of bugs and it's better not to go there)

[05:07:25.0907] <yulia>
confession: have the frontend part of top level await working afaict, moving on to the vm part

[06:28:45.0379] <miles>
Hi. I'm hoping someone can help me. I'm trying to use the Debugger API in my embedding. I'm using ESR76. I found that I was getting an assertion in  Promise.cpp in function JS::AutoDebuggerJobQueueInterruption::init
 MOZ_ASSERT(cx->jobQueue);
After a bit of investigation I found that I could call
js::UseInternalJobQueues(cx);
and that fixed the assert. However I'm now getting a different assert in jsfriendapi.cpp in function js::PrepareScriptEnvironmentAndInvoke
 MOZ_RELEASE_ASSERT(
      cx->runtime()->scriptEnvironmentPreparer,
      "Embedding needs to set a scriptEnvironmentPreparer callback");
and I don't know what I need to do to resolve/fix that. Can anybody help/advise? Many thanks...

[06:35:50.0903] <miles>
I think I might have found something in the shell. It looks like a class EnvironmentPreparer has been defined and this might be what I need. However I don't understand what this is trying to do... Am I on the right track here?

[06:44:57.0785] <Ms2ger [~half-time dedication]>
/me tries to remember what that was for

[06:47:37.0835] <Ms2ger [~half-time dedication]>
It mostly exists for a bunch of browser-side setup when running user script, if I understand correctly

[06:48:16.0600] <Ms2ger [~half-time dedication]>
Copying the one from the shell should be fine, I think

[06:49:00.0113] <Ms2ger [~half-time dedication]>
Dunno if the exception stuff is required

[06:50:08.0894] <miles>
Thanks. I'm in the middle of trying that so I'll see shortly! :-)

[07:10:21.0540] <miles>
Copying the implementation from the shell worked. I commented out the exception stuff too for the moment... Thanks.

[08:26:43.0991] <loganfsmyth>
miles: Out of curiosity, what are you using the Debugger to do? It's never been clear how many users it has outside of Firefox itself

[09:00:26.0695] <sfink|afk>
jonco: an offthread parse is angry at me in the extensible string patch because I'm accessing the zone to get a `ZoneAllocator` in order to call `addCellMemory()`. Is it safe to use `zoneFromAnyThread` from there? It's `TokenStreamSpecific::getStringOrTemplateToken() -> ... -> AllocateNewAtom -> ... -> morphAtomizedStringIntoAtom -> Cell::zone() -> ZoneAllocator::addCellMemory`

[09:01:32.0627] <sfink|afk>
oops, missed the actual call site: `... -> morphAtomizedStringIntoAtom -> AddCellMemory -> Cell::zone() -> ...`

[09:01:41.0688] <sfink|afk>
and now I'm afk for real

[09:28:39.0232] <jonco>
sfinI guess this is because it's the atoms zone and that's not owned by the helper thread

[09:28:47.0006] <jonco>
 * sfink|afk:  guess this is because it's the atoms zone and that's not owned by the helper thread

[09:28:56.0909] <jonco>
 * sfink|afk: I guess this is because it's the atoms zone and that's not owned by the helper thread

[09:29:26.0678] <jonco>
yes, addCellMemory is fine to use from helper threads (this needs to happen for off-thread parsing already)

[09:29:56.0662] <jonco>
 * addCellMemory is fine to use from helper threads (this needs to happen for off-thread parsing already)

[09:30:04.0905] <jonco>
so using zoneFromAnyThread is OK

[09:57:57.0108] <jorendorff>
mgaudet: I'm trying to help avandolder figure out this question: how do we mark the bindings that contain the private names as closed-over?

[09:58:20.0896] <jorendorff>
mgaudet avandolder: one approach is to make an initializer function that stamps all private methods onto the instance. That synthetic function would use the bindings (in the sence of `noteUsedName`), which would mark them as closed-over.

[09:59:07.0136] <jorendorff>
mgaudet: Is there any reason currently that we shouldn't use a single initializer function for all nonstatic fields?

[09:59:39.0896] <jorendorff>
mgaudet: At the time we implemented it, we expected decorators to come along and cause those initializer functions to be exposed to script as separate actual function objects

[10:08:44.0553] <avandolder>
I'm not really familiar with synthetic functions, but I had been considering whether something along that line would be possible

[10:21:56.0054] <sfink>
jonco: thanks. I did a grep for 'zone()' in frontend/, and it was barely used, so I wanted to be sure

[10:37:22.0190] <jorendorff>
avandolder: I think the closest things we have right now are (1) field initializer functions themselves; (2) constructors, when fields are present and no `constructor()` is explicitly defined

[10:50:16.0456] <jorendorff>
avandolder: `synthesizeConstructor` implements (2) https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.cpp#7457

[10:52:27.0386] <jorendorff>
That is, we actually generate a fake AST for the autogenerated constructor, when needed (== •user didn't provide a `constructor()` and •class contains at least one nonstatic field)

[10:53:34.0224] <jorendorff>
that check is implemented here. https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.cpp#7190-7191 (when there are no fields, we can use a shared self-hosted constructor and save a few bytes)

[10:56:08.0546] <avandolder>
right, I had gone in and changed that already. took a little bit to figure out how to check for private methods from a `NodeListType` but I figured something out

[10:56:58.0723] <mgaudet>
jorendorff: I'll admit: I don't entirely underrstand the question

[10:57:30.0546] <jorendorff>
avandolder: Right, but I meant that as an example of a case where we kind of ... macro-generate AST nodes as a way of creating a function body out of nothing

[10:57:39.0085] <mgaudet>
it's not clear to me why the used names tracker doesn't already just do the right thing; but I haven't been looking at the methods code so I don't entirely understand why they're special.

[10:57:49.0151] <mgaudet>
 * jorendorff: I'll admit: I don't entirely understand the question

[10:58:13.0227] <jorendorff>
mgaudet: ok, hmm, i think I can explain that but i need a minute

[10:58:36.0923] <mgaudet>
No rush; I'm about to run for baby's (and my) lunch

[10:59:50.0720] <jorendorff>
avandolder: We do a similar thing—create AST nodes out of thin air in the parser—when we parse field initializers. https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.cpp#7719-7829

[11:00:35.0472] <jorendorff>
these are the extra AST nodes needed to turn `x = foo();` into `(function () { this.x = foo(); })`.

[11:01:45.0855] <jorendorff>
lunch sounds like a good idea

[11:03:27.0886] <avandolder>
Alright, i'll look into that. it might be the more straightforward approach

[11:14:06.0528] <sfink>
ugh. I should be paying attention to release notes before they go out. The "weakly held references" section of Fx79 is deceptive with respect to WeakMap.

[11:15:30.0199] <sfink>
warning people away from `WeakRef` because it's "advanced", or as in the release notes, "garbage collectors are complicated", also rubs me the wrong way. People who like to think of themselves as advanced or power users will be *more* likely to want to use them.

[11:16:16.0356] <sfink>
I'm not sure what better terminology would be. "Unstable" is kinda right, but that means a different sort of instability (spec instability) in this context.

[11:17:24.0513] <sfink>
"the exact behavior is not portable across JS engines or versions of JS engines", perhaps.

[11:23:49.0144] <mccr8>
"strong references, weakly held"

[11:31:38.0787] <sfink>
heh

[14:28:24.0165] <gkw>
cfallin: I'm not sure if bug 1655848 is related to the other one - perhaps you'd like to take a look? I'll try to get more info if you need it

[14:28:25.0735] <botzilla>
https://bugzil.la/1655848

[15:46:44.0346] <loganfsmyth>
jonco: What's the logic behind https://searchfox.org/mozilla-central/rev/d9f92154813fbd4a528453c33886dc3a74f27abb/js/src/gc/GC.cpp#4797 ? That means
```
var g = newGlobal({ newCompartment: true });
g.eval(`
  var obj = {};
  var ref = new WeakRef(obj);
  Promise.resolve().then(() => {
    print(obj);
    print(ref.deref());
  });
`);
nukeCCW(g.ref);
```
prints 
```
[object Object]
undefined
```
even though the object is still live?

[15:50:00.0549] <Waldo>
confession: Randomly stumbled into a clang bug working on patchwork, reproduces with my local clang builds...then doesn't reproduce with current clang tip.  😒

[15:50:03.0120] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2020-07-29
[01:06:08.0076] <jonco>
> <@loganfsmyth:mozilla.org> jonco: What's the logic behind https://searchfox.org/mozilla-central/rev/d9f92154813fbd4a528453c33886dc3a74f27abb/js/src/gc/GC.cpp#4797 ? That means
> ```
> var g = newGlobal({ newCompartment: true });
> g.eval(`
>   var obj = {};
>   var ref = new WeakRef(obj);
>   Promise.resolve().then(() => {
>     print(obj);
>     print(ref.deref());
>   });
> `);
> nukeCCW(g.ref);
> ```
> prints 
> ```
> [object Object]
> undefined
> ```
> even though the object is still live?

loganfsmyth: the idea is that if you make a WeakRef to an object in another compartment, and the CCW between them is nuked then it appears that the target has died

[01:06:31.0056] <jonco>
loganfsmyth: your example looks like a bug though

[01:56:08.0700] <jonco>
filed bug 1655917

[01:56:10.0097] <botzilla>
https://bugzil.la/1655917 — NEW (jonco) — Nuking a CCW to a WeakRef clears the target of the WeakRef

[08:59:59.0714] <avandolder>
jorendorff: I have an implementation of adding the private fields through `FieldInitializers`, by adding an offset in the initializers array where the private methods start and a `ListNode*` to the class contents so I can iterate through all the private methods in order to get their names and accessor types. This sorta works, assuming the names get mark aliased, however, if you explicitly declare a constructor, then emitting the initializers happens lazily, and the `ListNode*` is invalid. Would it be alright to store a list of private name and accessor type pairs on the `FieldInitializers` struct directly instead?

[09:00:10.0598] <avandolder>
jorendorff: 

[09:00:22.0328] <jorendorff>
/me looks

[09:01:59.0876] <jorendorff>
avandolder: I think the easiest thing would be to emit a single function that fetches all private methods out of the environment and stamps them onto an instance. Store that function in the initializers array alongside any other initializers

[09:02:08.0593] <jorendorff>
then FieldInitializers doesn't have to change at all, i think?

[09:02:28.0285] <jorendorff>
i just came up with this yesterday afternoon

[09:05:40.0931] <jorendorff>
I put it into https://docs.google.com/document/d/19UA2L1UDKOhrt7AO-CcKqTb1WZVRquCPYgMDPB8oHbY/edit# this morning (the yellow bits)

[09:06:12.0740] <jorendorff>
just forgot to ...say anything about it

[09:10:05.0243] <froydnj>
Waldo: I would appreciate if you could review https://phabricator.services.mozilla.com/D85168 in a timely fashion to minimize rebase pain

[09:10:06.0153] <avandolder>
I looked at doing something along those lines, I wasn't sure how that would be able to handle accessors. it would still involve needing to store the actual methods in a lexical scope too right? so that we're not stamping a new copy of the method on each instance. so those would have to be referred to from the private method initializer function too somehow

[09:10:26.0284] <avandolder>
 * jorendorff: I looked at doing something along those lines, I wasn't sure how that would be able to handle accessors. it would still involve needing to store the actual methods in a lexical scope too right? so that we're not stamping a new copy of the method on each instance. so those would have to be referred to from the private method initializer function too somehow

[09:10:53.0186] <jorendorff>
Yes, that's all correct

[09:11:04.0948] <jorendorff>
The bytecode for the private-method-initializer-function would be like

[09:12:25.0732] <jorendorff>
`GetLocal this; GetAliasedVar #m_name; GetAliasedVar #m_function; InitHiddenProp` for normal methods

[09:12:47.0841] <jorendorff>
same thing but `InitHiddenPropGetter` for an accessor

[09:12:49.0255] <Waldo>
froydnj: Yeah, I'll look today.

[09:15:10.0891] <jorendorff>
 * `GetLocal this; GetAliasedVar #m_name; GetAliasedVar #m_function; InitHiddenElem` for normal methods

[09:15:16.0843] <jorendorff>
 * same thing but `InitHiddenElemGetter` for an accessor

[09:15:55.0760] <jorendorff>
avandolder: :point_up:

[09:19:11.0672] <avandolder>
I'll look into trying to get something like that working

[09:33:39.0810] <sfink>
https://gist.githubusercontent.com/hotsphink/d87430575cd6d3bdc2132864e86657b7/raw/text.txt

[09:41:33.0260] <sfink>
https://github.com/firefox-devtools/profiler/issues/2676

[12:18:56.0489] <iain>
Long post about speculative optimization in JSC: https://webkit.org/blog/10308/speculation-in-javascriptcore/

[13:40:17.0460] <froydnj>
not kidding about the "long" part either

[14:47:50.0982] <jorendorff>
Hmm. This patch I'm making duplicates most of the machinery that refers to frame slots and local names, adding a variant to everything that mentions JOF_LOCAL, NameLocation::Kind, BindingLocation::Kind, etc. It would be possible to say, instead, "when we're in a generator, 'FrameSlot/Local/Lexical' means a fixed slot on the generator."

[14:48:51.0694] <jorendorff>
no slowdown in baseline ... but in blinterp and the interpreter, I think it would slow down locals by a read.

[14:50:14.0011] <jorendorff>
the idea would be, `GetLocal i` means `PUSH(fp->locals[i])` where `InterpreterFrame::locals` has type `Value*`

[14:50:38.0381] <jorendorff>
that seems not quite good enough

[14:55:51.0412] <jorendorff>
oh well

[14:57:34.0284] <jorendorff>
wait a minute...

[14:58:29.0008] <jorendorff>
hmm, the current thing is `(Value*)(this + 1)`

[14:58:31.0992] <iain>
My instinct is that it would be fine. A single load that nearly always hits in L1 is ~free for anything but the tightest of code, which the interpreters aren't

[14:59:42.0928] <iain>
What is the upside? Faster generators?

[15:01:38.0427] <iain>
(We would want to measure it, obviously)

[15:27:07.0638] <jorendorff>
no, the upside is just less code, less duplication

[15:28:11.0435] <jorendorff>
that locals slot would also need to be initialized on entry... i'm really not so sure about this, i'll probably get it working this way first.

[15:28:23.0197] <jorendorff>
get it working with doubled opcodes, i mean

[15:29:07.0244] <jorendorff>
this way has the weird benefit that the patch makes it really clear exactly what's being added, whereas reusing the existing opcodes but hacking a new meaning into them...

[15:29:10.0045] <jorendorff>
how do you review that

[15:29:43.0071] <iain>
Very carefully?

[15:30:02.0199] <iain>
Doubled opcodes sounds good

[15:30:10.0411] <jorendorff>
seems fine

[15:30:40.0775] <iain>
I vaguely remember a proposal for doing something vaguely similar with generators that would make it easier to handle them in Ion, but I don't remember the details


2020-07-30
[02:41:36.0065] <yulia>
that is one heck of a blog post: https://webkit.org/blog/10308/speculation-in-javascriptcore/

[03:03:10.0632] <Caspy7>
oof
yulia: Firefox reader mode estimates 184-234 minutes to read

[03:03:20.0937] <Caspy7>
/me skips to the conclusion

[03:04:46.0922] <Caspy7>
aside: Reader mode for some reason misses the subheadings such as Conclusion, Related Work, etc

[03:13:34.0648] <Caspy7>
****
so, based on my question I'm sure you can deduce that I'm no expert or even proficient in this area, but would it be possible for some type of javascript "helper" that, when you went to save your JS it analyzed it, deduced types, then annotated it asm.js style?
Then the compiler wouldn't have to jump through all the hoops it normally does for the lack of typing

[03:18:55.0898] <Benjamin Bouvier>
Caspy7: it's not a stupid question, it actually comes often in the context of asm.js/wasm: the answer is that this is equivalent to implement a JIT with type inference that could emit wasm

[03:19:12.0717] <Benjamin Bouvier>
so it's equivalent to compiling an existing JIT engine to wasm, and implement a wasm backend for this JIT engine

[03:19:41.0142] <Benjamin Bouvier>
(and you'd get the speed penalty in addition to this)

[03:20:14.0994] <Benjamin Bouvier>
we can't just look at JS code and infer types, because the same function can be called with very different types, and some side-effects can be triggered arbitrarily (think: valueOf, etc.)

[03:22:25.0652] <Caspy7>
Benjamin Bouvier: ok, so then, what you are saying is that static analysis can't really solve the problem of converting untyped JS into typed JS even if we know the JS isn't going to change after hitting save

[03:22:57.0974] <Caspy7>
sorry, trying to convert it into my [less complex?] understanding of things

[03:23:12.0798] <Caspy7>
I'm no coder or dev

[03:24:07.0575] <Benjamin Bouvier>
Caspy7: yes, that is correct

[03:24:29.0360] <Benjamin Bouvier>
the asm.js annotations were ensuring static types that would be enforced at runtime

[03:25:17.0627] <Caspy7>
seems like it would be best if JS retired

[03:36:00.0951] <nbp>
> <@iain:mozilla.org> Long post about speculative optimization in JSC: https://webkit.org/blog/10308/speculation-in-javascriptcore/

That's great, now with their blog post they show that they understand what is the bailout cost, like I presented to the team in London … before starting to think about different way to reimplement our compilers to get rid of the compilation cost.

[03:36:20.0404] <nbp>
Soon they might come up with HolyJIT as well!

[03:37:46.0188] <nbp>
“Since the cost of speculation failure is so enormous, we only want to speculate when we know that we won’t fail.”  aka "do not speculate" which implies that a JIT would never do better than a static compiler unless we change the compiler.

[03:44:19.0161] <nbp>
yulia: the "Related Work" section at the very end is a good summary.

[03:46:03.0168] <nbp>
 * yulia: the "Related Work" section at the very end is a good summary of JIT in JavaScript and the inspiration sources.

[04:17:21.0033] <yulia>
nbp ill try to find some time to do a full read this week

[04:37:14.0129] <jandem>
the Perseverance Mars rover will [launch](https://www.youtube.com/watch?v=JIB3JbIIbPU) soon

[14:18:32.0010] <mgaudet>
confession: implemented IC support for `CheckPrivateField` 

[14:18:34.0692] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2020-07-31
[18:47:08.0343] <gkw>
jandem: an interesting one involving typed arrays and baseline JIT: https://bugzilla.mozilla.org/show_bug.cgi?id=1656409

[18:52:18.0953] <gkw>
(also potentially about 3.5 years old)

[03:17:07.0891] <jandem>
gkw: thanks! will take a look today

[07:36:08.0133] <yulia>
jandem: would you have time on monday to help me understand how to do cacheIR properly? (this is prep for the stream)

[07:36:26.0221] <yulia>
I would propose the morning? from 10 maybe

[07:37:08.0405] <jandem>
yulia : sure, that time works for me

[07:38:10.0121] <yulia>
great

[07:38:13.0357] <yulia>
ill send an invite now

[07:46:22.0894] <mgaudet>
jandem: Thanks for the review comments: Agreed about splitting into a new IR Generator; I'd waffled on it, but think you're right that it's better to split. About the try-attach *before* we do the operation: What about an operation that throws? I had been using the attach-after to act as a filter, to avoid attaching where throwing could happen. Would you suggest instead we repeat the checks for the operation as part of the tryAttach logic?

[07:49:33.0121] <jandem>
mgaudet: yeah that's what I was thinking. Maybe we can factor our some `CheckPrivateFieldShouldThrow(ThrowCondition, bool hasOwn)` helper and call that in both places?

[07:49:52.0592] <mgaudet>
jandem: that sounds perfectly reasonable :D 

[07:50:01.0796] <mgaudet>
I'll get to that after some breakfast. 

[07:50:18.0247] <jandem>
mgaudet: is this only relevant for native objects or can there be other receiver objects? wrappers?

[07:51:06.0289] <mgaudet>
jandem: Proxies, wrappers can all have private fields applied. I'll probably only optimize natives in cache IR for a first pass tho

[07:51:29.0689] <mgaudet>
no need to go wild without evidence, and people stamping private fields onto random objects is -not- expected to be the common path

[07:51:54.0834] <jandem>
great, yeah I was hoping we could get away with just supporting native objects in the IRGenerator

[07:52:17.0988] <mgaudet>
👍️

[07:53:01.0360] <jandem>
 * mgaudet: yeah that's what I was thinking. Maybe we can factor out some `CheckPrivateFieldShouldThrow(ThrowCondition, bool hasOwn)` helper and call that in both places?

[08:14:23.0459] <gkw>
jandem: thanks for looking at them so quickly

[08:14:29.0291] <gkw>
(my fuzzbugs :) )

[13:35:26.0684] <lth>
did anyone see my message to dev-tech-js-engine-internals?  I got a weird bounce.

[13:37:05.0936] <iain>
lth: This one? https://lists.mozilla.org/pipermail/dev-tech-js-engine-internals/2020-July/002527.html

[13:37:18.0658] <lth>
yeah

[13:37:33.0662] <lth>
/me is embarrassed he did not think to check that himself

[14:13:47.0053] <mgaudet>
chat: Spent far too long trying to figure out how to write a test case with workers, such that you can get an answer back. Gonna need to use promises... which means I need to learn promises. Monday. 

