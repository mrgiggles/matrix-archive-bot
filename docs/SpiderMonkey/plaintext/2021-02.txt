2021-02-01
[16:49:51.0998] <jarred>
@jandem there're some usages of WASM in other JS contexts, but these SABs are not part of it and the worker loading the map data doesn't use any WASM. On Chrome, it shows 145,646 SharedArrayBuffer objects totaling 163 MB after everything loads. This includes mesh geometry data and other stuff. I will try to make a simple way to reproduce this


[17:07:30.0279] <jarred>
@jandem I'm able to reproduce the issue. `MaximumLiveMappedBuffers` seems to apply to all `SharedArrayBuffer` objects, regardless of whether or not WASM is in use. In other words, Firefox currently has a limit of `MaximumLiveMappedBuffers` allocated shared array buffer objects regardless of the amount of memory they use.

If you paste this code into the console of any site with `crossOriginIsolated` set to `true`, it will throw an error while creating the `SharedArrayBuffer` objects (but not while creating the `ArrayBuffer` objects):

```js
const ab = [];
for (let i = 0; i < 1000; i++) { ab.push(new Uint8Array(new ArrayBuffer(1))) }
console.log("Created ", ab.length, "ArrayBuffer objects")

const sab = [];
for (let i = 0; i < 1000; i++) { sab.push(new Uint8Array(new SharedArrayBuffer(1))) }
console.log("Created ", sab.length, "SharedArrayBuffer objects")
```

For testing, I just clicked the first site that showed up when googling crossOriginIsolation (https://labs.jxck.io/site-isolation/crossOriginIsolated/index.html)

[17:09:29.0842] <jarred>
It does not happen if the SABs are created but have no more references (so if you don't push them onto the array, it won't throw) 

[17:21:43.0928] <jarred>
A unit test might look something like this:
```js

 // Not sure how you expose cpp constants in js
import {MaximumLiveMappedBuffers} from './ArrayBufferObject.constants';

it("can create more than `MaximumLiveMappedBuffers` SharedArrayBuffer objects", () => {
   let strong = new Array(MaximumLiveMappedBuffers + 2)

   expect(() => {
    for (let i = 0; i < strong.length; i++) {
      strong[i] = new SharedArrayBuffer(1);
    }
   }).not.toThrow()
  
})

```

[17:30:05.0122] <jarred>
 * A unit test might look something like this:
```js

 // Not sure how you expose cpp constants in js
import {MaximumLiveMappedBuffers} from './ArrayBufferObject.constants';

it("can create more than `MaximumLiveMappedBuffers` SharedArrayBuffer objects", () => {
   let strong = new Array(MaximumLiveMappedBuffers + 2)

   expect(() => {
    for (let i = 0; i < strong.length; i++) {
      strong[i] = new SharedArrayBuffer(1);
    }
   }).not.toThrow()
  
})

```

but with another test for memory usage instead of buffer count? Maybe `MaximumLiveMappedBuffers` should be based on `byteLength` of the SharedArrayBuffer objects instead of the count of the instances?

[00:18:40.0898] <jandem>
jarred: I filed bug 1689948, thanks for reporting this!

[00:18:42.0528] <botzilla>
https://bugzil.la/1689948 — NEW (nobody) — Creating many small SharedArrayBuffers can easily exceed MaximumLiveMappedBuffers

[01:17:20.0718] <jarred>
np! thanks for filing and for being open to receiving bug reports from random people on the internet 

[01:30:38.0258] <jandem>
we depend on these bug reports :) 

[05:24:22.0071] <stratan>
Hello folks, I hope you're doing well. I've got a question regarding SM's optimizing JIT. I think I understood the code pipeline that goes from the interpreter, to baseline, to CacheIR, to the transpiler and so on. I'm now interested in understanding the various compiler optimizations of the engine. It seems that everything takes place in `OptimizeMIR` inside `Ion.cpp`. I thought maybe the way to learn is to step through each optimization pass in the code and try to understand what and why it does it. However, I have no compiler engineering background and I'm afraid it may not be so approachable. Any tips on how to approach all these JIT optimizations?

[05:25:06.0574] <stratan>
 * Hello folks, I hope you're doing well. I've got a question regarding SM's optimizing JIT. I think I understood the code pipeline that goes from the interpreter, to baseline, to CacheIR, to the transpiler and so on. I'm now interested in understanding the various compiler optimizations of the engine. It seems that everything takes place in `OptimizeMIR` inside `Ion.cpp`. I thought maybe the way to learn is to step through each optimization pass in the code and try to understand what and why it does it (while also staring at the iongraph output). However, I have no compiler engineering background and I'm afraid it may not be so approachable. Any tips on how to approach all these JIT optimizations?

[05:35:27.0740] <jandem>
the optimization passes where it's easiest to see the effect on the graph are probably LICM (hoisting things before loops if possible), GVN (eliminating 'duplicate' instructions) and DCE (dead code elimination)

[05:37:14.0789] <jandem>
to see information about LICM for example you can use `IONFLAGS=licm` (requires a debug build)

[07:07:16.0069] <tcampbell>
confession: Prototyping the removal of self-hosting Global/Zone entirely. (Bug 1688794)

[07:07:18.0481] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[07:09:19.0957] <botzilla>
https://bugzil.la/1688794 — NEW (tcampbell) — Consider replacing self-hosted cloning with stencil-instantiate

[08:55:53.0520] <sfink>
when I grow up, I want to learn to write code like the fuzzer does. `function main() { new main; }; try { main() } catch(e) {}; ...`

[08:56:08.0740] <sfink>
just needs a helpful comment at the beginning: `// pre-warm the stack`

[10:23:00.0336] <iain>
stratan: I don't think we have a description of all our MIR passes anywhere, so I wrote up a [very quick summary](https://docs.google.com/document/d/1t1K6Y2KJuAsugsVTarpQsk2ztHeD3nxTcItxE63zqHE/edit?usp=sharing). Seems like a useful thing to have lying around.

[10:26:27.0405] <evilpie>
iain: perfect, add it to the source-docs 🚀

[10:34:51.0714] <iain>
No rest for the wicked

[10:36:49.0904] <evilpie>
iain: cheers https://paste.mozilla.org/4rJFzhF7

[10:37:47.0507] <iain>
No worries, I'm already polishing it up with a bit more of an intro / etc

[10:48:16.0916] <stratan>
iain: thank you so much! Much appreciated :)

[11:56:52.0866] <iain>
Does anybody know how I can build the source-docs locally?

[11:57:31.0058] <sfink>
`mach doc` does something. Dunno what.

[12:03:18.0703] <tcampbell>
there is some python/pip finagling  that needs to be done, but then it does nice auto-refresh-on-save

[12:03:47.0885] <iain>
Sweet, thanks, that works

[12:07:20.0861] <iain>
Anybody want to volunteer to review?

[12:09:36.0117] <sfink>
I would be a crappy reviewer, because just about everything you wrote was new to me. Or in other words: it was *awesome*, thanks!

[12:19:53.0790] <iain>
Okay, I've arbitrarily picked Ted as a reviewer to ensure that I didn't do anything stupid with source-docs, but if anybody else wants to read through and point out any glaring errors, the phabricator revision is here: https://phabricator.services.mozilla.com/D103707

[12:22:47.0839] <evilpie>
iain: I think you attached the wrong patch

[12:23:48.0672] <tcampbell>
iain: the lint-bots will post a rendered version in a few minutes to tell you about formatting

[12:24:09.0797] <tcampbell>
but also what Tom said. lol

[12:24:32.0390] <tcampbell>
"glaring error" indeed

[12:39:39.0670] <iain>
hahaha oops

[12:39:54.0723] <iain>
I split my current diff into two patches but got the names swapped

[12:50:59.0164] <iain>
Should be better now

[15:25:57.0379] <iain>
tcampbell: I've rebased onto m-c and repushed. Not sure if something is broken with the preview generation.

[15:27:54.0282] <tcampbell>
I think it is running now? the rebase warning seem to be gone


2021-02-03
[09:39:13.0317] <arai>
we still have JS1.7 reference in code :P  https://searchfox.org/mozilla-central/rev/927e525f481a93a8f63d27a78ae6201e42b1b1fb/js/src/frontend/ReservedWords.h#76

[09:42:55.0220] <jandem>
that brings back some bad memories :P 

[10:14:41.0717] <jandem>
(two different generator/iterator implementations, two forms of array comprehensions both non-standard, expression closures that were somewhat like arrow functions..)

[10:18:42.0501] <arai>
haha

[12:19:30.0521] <Waldo>
"The last remnants of the old proprietary extensions have been swept away." 

[12:20:05.0114] <Waldo>
Gonna get to the ICU reviews shortly, FWIW, if people wonder. 


2021-02-04
[18:39:38.0673] <jdm>
has anybody seen https://gist.github.com/jdm/f68ef2d266a27107222cd9dda03b5d84 before?

[18:39:56.0139] <jdm>
I'm hitting it while upgrading servo to use mozjs84

[19:16:07.0385] <sfink>
I haven't seen it. What compiler?

[23:13:09.0356] <Ms2ger>
👋 jdm 

[23:54:52.0581] <jandem>
lth: ping? wasm and asm.js jit-tests are crashing on Linux x86 (32-bit), m-c tip, in generated code. Is that a known issue?

[23:55:21.0854] <jandem>
else I can bisect..

[00:05:15.0365] <jandem>
ok I found the regressor and needinfo'd asumu 

[00:12:39.0434] <Ms2ger>
oh no

[00:13:46.0094] <jdm>
> <@sfink:mozilla.org> I haven't seen it. What compiler?

MSVC

[00:20:49.0421] <Ms2ger>
/me eyes the clock

[00:24:38.0892] <jandem>
I don't think we're testing MSVC in automation anymore so compile errors in our public headers show up sometimes for embedders..

[00:41:33.0398] <jandem>
the static_assert that's failing is [this one](https://hg.mozilla.org/mozilla-unified/annotate/FIREFOX_84_0_2_RELEASE/mfbt/Result.h#l238). Probably from sg's `mozilla::Result` refactorings


2021-02-05
[01:29:33.0820] <willdurand>
hey, is it the right channel to ask a question about `ChromeScriptLoader`?

[01:32:40.0866] <arai>
I think so

[01:37:23.0354] <willdurand>
thanks. I am wondering if we have some docs about `ChromeScriptLoader` and how it loads a js file. I am seeing errors when attempting to load a file that does not end with a "valid" js file extension, and I cannot find anything that would check that.

[01:39:20.0205] <willdurand>
the browser console prints an error that comes from https://searchfox.org/mozilla-central/source/js/xpconnect/loader/ChromeScriptLoader.cpp#240 I believe (I didn't find any other reference of this string)

[01:40:32.0431] <arai>
I wonder if it fails to ensure MIME type?

[01:40:44.0010] <arai>
https://searchfox.org/mozilla-central/rev/40205f1b55f1ba8a26fcbd362c20d843e8718a87/netwerk/protocol/http/HttpBaseChannel.cpp#2506-2509

[01:41:06.0940] <arai>
err, maybe the above isn't right plae

[01:41:09.0262] <arai>
 * err, maybe the above isn't right place

[01:44:21.0786] <arai>
hmm, I cannot find the code I vaguely remember :/

[01:44:59.0564] <willdurand>
yeah, I am trying to understand where this `nsresult` comes from in the `OnStreamComplete` method but it's a bit hard to navigate (never opened this file before)

[01:51:50.0399] <arai>
where is the file located?

[01:59:42.0970] <arai>
if it's not online (so, MIME-type doesn't come from response), I think it's from extension->MIME-Type map https://searchfox.org/mozilla-central/rev/40205f1b55f1ba8a26fcbd362c20d843e8718a87/uriloader/exthandler/nsExternalHelperAppService.cpp#495-496 and MIME-Type check for script https://searchfox.org/mozilla-central/rev/40205f1b55f1ba8a26fcbd362c20d843e8718a87/dom/base/nsContentUtils.cpp#7219-7246

[02:02:34.0221] <arai>
if it's extracted from jar, maybe here https://searchfox.org/mozilla-central/rev/40205f1b55f1ba8a26fcbd362c20d843e8718a87/modules/libjar/nsJARChannel.cpp#1021-1024

[02:05:54.0434] <arai>
so, if the file extension really needs to be handled as javascript file, adding it to `extraMimeEntries` in nsExternalHelperAppService.cpp would work

[02:07:01.0249] <willdurand>
one thing that I noticed is that when the file is loaded from a webpage, the response does not contain a `content-type` header but FF loads the script anyway with a warning `The script from “http://localhost:5000/file.ejs” was loaded even though its MIME type (“”) is not a valid JavaScript MIME type.`

[02:07:37.0312] <willdurand>
that being said, in another context, it doesn't load the file

[02:33:47.0179] <evilpie>
willdurand: are you trying to load a module?

[05:06:06.0466] <jandem>
confession: added a `SM(p)` job for linux32 (x86) to fix missing jit-test coverage for that architecture

[05:06:09.0572] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[05:17:18.0765] <yulia>
Who is a good contact person for code coverage at mozilla?

[05:24:28.0768] <jandem>
yulia: marco 

[05:26:47.0344] <yulia>
Thanks!

[05:28:14.0764] <jandem>
np

[05:50:46.0782] <nbp>
yulia: which part of code coverage?

[05:51:31.0147] <yulia>
I am tracing a comment from a discussion with a component that chose to use CommonJS rather than ESMs due to some trouble with code coverage in their test suite

[05:52:27.0192] <yulia>
I want to verify if that has been resolved already or if there might be other similar blockers in some spots, so I am looking for someone with a broad overview

[06:03:00.0631] <stratan>
Hello! Is this the right channel to ask a question about JSActors?

[06:04:43.0231] <annevk>
stratan: I think you want #fission:mozilla.org 

[06:05:40.0783] <stratan>
Sweet thank you

[06:14:33.0971] <arai>
is `--without-intl-api` still used somewhere?

[06:29:25.0348] <Ms2ger>
I hope not

[06:32:04.0191] <arai>
I wonder if we can simplify the code and macro around that 

[06:45:03.0886] <jandem>
wraitii: ^ (0AD [uses --without-intl-api](https://github.com/0ad/0ad/blob/83e81362d850cc6f2b3b598255b873b6d04d5809/libraries/source/spidermonkey/build.sh#L39) but I don't know if there's a good reason for that?)

[06:46:41.0467] <jandem>
removing that option makes sense to me though

[07:26:14.0481] <tcampbell>
confession: Synthesize missing constructors in bytecode instead of cloning from self-hosting. (Bug 1690943)

[07:26:21.0060] <botzilla>
https://bugzil.la/1690943 — NEW (tcampbell) — Synthesize all missing class constructors in the JS Parser

[07:29:45.0774] <willdurand>
evilpie: heh sorry, no, not a module.

[08:07:08.0971] <jorendorff>
tcampbell: I'm triaging bugs. Do you know what https://bugzilla.mozilla.org/show_bug.cgi?id=1690708 is? Who could confirm this is (as I suspect) probably totally normal operation? And why do we collect these as crashes?

[08:07:58.0274] <tcampbell>
jorendorff: I got as far as finding https://bugzilla.mozilla.org/show_bug.cgi?id=1279293 and then got distracted

[08:08:20.0757] <tcampbell>
(I don't know the answer..)

[08:09:16.0872] <tcampbell>
I believe we collect these crashes to see if there are patterns to what is slow so we can avoid the crash? I believe the process is given some small amount of time to shutdown

[08:18:36.0595] <jorendorff>
tcampbell: Wow, that's sad, the bug has been around for 5 years and nobody ever looks at it. resolved as duplicate

[08:18:56.0593] <jorendorff>
this is not a great user experience

[08:20:17.0577] <jandem>
I don't think users notice those? we just kill the content process if it's taking too long to go away 

[08:21:25.0840] <tcampbell>
they just end up populating about:crashes

[08:24:18.0024] <jorendorff>
isn't there UI that tells people "you have unsubmitted crashes"?

[08:31:56.0297] <mccr8>
There is, but I think not on release or beta.

[08:32:48.0827] <mccr8>
And yes, the shutdown kill stuff should mostly be invisible to users, because it means we automatically killed a process that took too long to shut down. We do fix issues here and there where it is actionable.

[08:34:47.0387] <mccr8>
I fixed a few places where we'd schedule a new GC after the parent process told us to shut down, for instance. There have also been a number of DOM worker shutdown hangs that have gotten fixed, though those at least show up in automation.

[08:42:25.0184] <jorendorff>
ok, thanks.

[08:42:31.0547] <jorendorff>
this bug should probably be closed WONTFIX, then?

[08:42:47.0618] <jorendorff>
going to continue conversation in the bug

[08:43:06.0027] <jorendorff>
never mind, dropping it

[08:47:33.0472] <jandem>
confession: renamed `JSOp::IfEq/IfNe` to `JSOp::JumpIfFalse/JumpIfTrue`

[08:47:39.0296] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[09:03:45.0459] <jorendorff>
jandem: !!!

[09:03:51.0236] <jorendorff>
what a day

[09:04:01.0452] <jorendorff>
:D

[09:04:30.0613] <jandem>
yeah it was long overdue, I still have to think hard about which is which

[09:05:45.0871] <nbp>
jandem: I would have thought you were used to knowing how the MacroAssembler branch functions are named.

[09:05:56.0361] <nbp>
 * jandem: I would have thought you were used to, knowing how the MacroAssembler branch functions are named.

[09:10:48.0701] <jandem>
nbp: it helps a little but it's confusing because this is more like a Test instead of Cmp and there I use the Zero/NonZero conditions without thinking about Eq/Ne


2021-02-07
[16:13:33.0819] <Waldo>
ifeq/ifne renaming was _unbelievably_ overdue.


2021-02-09
[19:53:12.0285] <Waldo>
Hoooooo, boy, https://phabricator.services.mozilla.com/D101398 gonna be fun times.

[23:26:07.0043] <jandem>
Waldo: talking about fun times, https://phabricator.services.mozilla.com/D79606 is now on my plate too

[23:26:33.0784] <Waldo>
jandem: I just want to tell you good luck, we're all counting on you.

[23:26:39.0369] <jandem>
should we just accept it? it matches code in other engines. I honestly don't know what else to do with it

[23:28:13.0800] <Waldo>
jandem: Uh...maybe?  If it matches code elsewhere I guess it's not absolutely terrible.

[23:32:16.0001] <jandem>
Waldo: ok I'll check the history of dtoa code elsewhere to see what happened

[23:46:30.0413] <jandem>
hm I wonder if we can use DoubleToStringConverter::ToExponential, that's what JSC seems to be doing

[23:46:58.0606] <jandem>
the more code we can move off dtoa the better

[23:58:13.0841] <jandem>
/me tries that..

[23:59:37.0140] <Ms2ger>
How many dtoa clones do we have now?

[00:12:19.0137] <jandem>
ok that passes all shell tests and fixes the bug

[00:47:16.0269] <wingo>
yolo

[02:32:35.0910] <nbp>
> <@jandem:mozilla.org> Waldo: talking about fun times, https://phabricator.services.mozilla.com/D79606 is now on my plate too

From what I understand, this code seems to be similar to some counding code, where we round toward odd numbers. Also, if the change is made the second part of the condition is no longer necessary, as covered by the first part.

[02:34:05.0925] <nbp>
`++*s++;` oh! This is something I could have coded when I was younger. Now I have got enough blame from Waldo to even think about doing these kind of tricks.

[04:37:26.0831] <wingo>
++*s++.  amazing that someone would choose to do that

[07:20:46.0587] <jandem>
confession: converted {toExponential, toPrecision, toFixed} from dtoa to double-conversion to avoid having to review a dtoa fix

[07:20:54.0065] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[09:48:53.0812] <arai>
does the patch remove all dtoa consumer?

[09:50:25.0644] <arai>
I think I had trouble converting in-tree dtoa to Rust, while working in smoosh

[09:53:55.0117] <nbp>
arai: why would we need dtoa in Smoosh?

[09:55:23.0140] <arai>
I don't remember the whole context, but maybe numeric property name, or perhpas a part of constant folding

[09:55:53.0944] <arai>
* I don't remember the whole context, but maybe numeric property name, or perhaps a part of constant folding

[10:42:31.0059] <tcampbell>
floating-point property names are silly. We should just do at runtime. For bigints we now do a "synthetic computed property name".

[10:50:03.0793] <jandem>
arai: there's another caller of `js_dtostr` in the JSONPrinter that we can replace easily after this. Then there's `js_dtobasestr` called from `FracNumberToCString`, we could either clean that up or use another implementation but I think it's a lot less code (it's not in dtoa.c)

[10:51:08.0426] <jandem>
so hopefully we can remove `js_dtostr` / `dtoa.c` soon, fingers crossed

[10:51:18.0070] <arai>
great :D


2021-02-10
[02:09:59.0862] <TheQwertiest>
hey everyone!
a small question: is it possible to implement a custom handler for a custom object for `for ... of` loop? 
Scenario: object is not subscriptable, but has a forward iterator

[02:11:12.0138] <nbp>
TheQwertiest: can't you already do that with the iterator symbols?

[02:15:53.0275] <arai>
TheQwertiest: is it about implementing in JavaScript, or C++?

[02:16:27.0154] <TheQwertiest>
@nbp @arai in C++

[02:16:55.0775] <TheQwertiest>
 * nbp, arai:  in C++

[02:17:04.0183] <arai>
fwiw, here's the iteration's protocol https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols

[02:17:59.0348] <arai>
that's the same also in C++ case

[02:18:07.0603] <arai>
so, try adding those methods and objects, to the custom object

[02:20:12.0281] <arai>
basically, `[Symbol.iterator]` should return an iterator object that iterates over the custom object, and the iterator should return the result for each `next` call, in `{ done: false, value: VALUE }`, and at last, it should return `{ done: true, value: undefined }`

[02:21:35.0292] <arai>
https://searchfox.org/mozilla-central/rev/7067bbd8194f4346ec59d77c33cd88f06763e090/js/src/builtin/MapObject.cpp#422

[02:22:05.0654] <arai>
https://searchfox.org/mozilla-central/rev/7067bbd8194f4346ec59d77c33cd88f06763e090/js/src/builtin/MapObject.cpp#866-908

[02:22:21.0055] <arai>
and https://searchfox.org/mozilla-central/rev/7067bbd8194f4346ec59d77c33cd88f06763e090/js/src/builtin/MapObject.h#188-223

[02:22:31.0854] <arai>
that's implementation of Map's iterator

[02:22:39.0061] <arai>
so, doing the same thing should work

[02:25:50.0542] <TheQwertiest>
thanks! I'll take a look

[02:27:55.0416] <arai>
(the Map's case has some indirection, because of requirement that `entries` and `[@@iterator]` should have same value, but you don't have to follow that)

[02:28:17.0365] <TheQwertiest>
arai: would it be possible to hook it in runtime? I.e. generate iterable only if requested? Smth like `ForwardingProxyHandler` for `get` and `set`

[02:28:49.0042] <arai>
"iterable" is your custom object

[02:29:10.0249] <arai>
and yes, "iterator" is created on demand

[02:29:33.0321] <arai>
when calling `[Symbol.iterator]`

[02:30:17.0548] <arai>
for Map, it's created here https://searchfox.org/mozilla-central/rev/7067bbd8194f4346ec59d77c33cd88f06763e090/js/src/builtin/MapObject.cpp#869

[02:31:12.0750] <arai>
to be clear, iterator needs to be created for each call

[02:31:35.0608] <arai>
to have internal state about iteration separately for each call

[02:31:37.0914] <TheQwertiest>
I mean that finding out if the object is iterable is not free, so I am trying to delay that to the moment it's actually requested

[02:32:29.0885] <arai>
what do you mean by "finding out if the object is iterable" ?

[02:32:44.0200] <arai>
is your custom object only sometimes iterable?

[02:33:30.0288] <TheQwertiest>
my custom object is a wrapper around ActiveXObject (aka COM), so it does not have a fixed interface

[02:33:48.0996] <arai>
then, the request done by `for..of` is, "get [Symbol.iterator] property, and call it"

[02:34:12.0968] <arai>
so, you don't have to create iterator until that point

[02:34:19.0101] <TheQwertiest>
oh, so that means I can hook it with ForwardingProxyHandler as well!

[02:34:45.0927] <arai>
you just need to define [Symbol.iterator] property for your custom object, with a function that performs it

[02:35:05.0427] <TheQwertiest>
thanks, that's exactly what I need!

[02:35:17.0595] <arai>
 * you just need to define [Symbol.iterator] property for your custom object, with a function that performs "checks if it's iterable, and creates iterator if so"

[02:40:31.0397] <TheQwertiest>
yup, just've tested it - `get` in proxy does receive the symbol request

[02:41:05.0088] <TheQwertiest>
ps: authorization scheme for chat.mozilla.org is still horrible and unreliable

[03:29:14.0219] <jandem>
heads up `mach jstests` is broken on central tip, due to bug 1690784 + jstests [requiring python 2](https://searchfox.org/mozilla-central/rev/7067bbd8194f4346ec59d77c33cd88f06763e090/mach#19)

[03:29:15.0979] <botzilla>
https://bugzil.la/1690784 — RESOLVED (mozilla.org) — [wpt-sync] Sync PR 27479 - [python3] Remove more `six` usages in tools/

[03:29:25.0462] <jandem>
 * heads up: `mach jstests` is broken on central tip, due to bug 1690784 + jstests [requiring python 2](https://searchfox.org/mozilla-central/rev/7067bbd8194f4346ec59d77c33cd88f06763e090/mach#19)

[03:30:38.0434] <jandem>
it works if I remove `jstests` from `py2commands`, will submit a patch...

[08:47:19.0276] <jonco>
sfink: ping

[08:48:18.0820] <evilpie>
anyone here on mac that can build a browser for me?

[08:55:45.0875] <arai>
for x86_64 without pgo, I can

[08:57:25.0271] <evilpie>
actually you can just use the pre-builds: https://treeherder.mozilla.org/jobs?repo=try&revision=ee81ff7aa0866229901db2b0d85e58bfbe83c00e&selectedTaskRun=ZXM5zXpITcGoNxoAhsvFCA.0

[08:58:09.0173] <evilpie>
can you try setting `browser.quitShortcut.disabled` to true. After a restart CTRL (or mac something) + Q should not work

[08:58:31.0384] <evilpie>
and file menu and app menu should not have a shortcut label on Quit

[09:01:49.0226] <arai>
evilpie: confirmed that setting the pref disables Cmd+Q shortcut, and in the menu "Quit Nightly" item doesn't have the shortcut label

[09:02:06.0672] <evilpie>
arai: thank you!

[10:01:10.0929] <sfink>
tcampbell: jonco: actually, the callbacks are all set up. It looks like XPConnect hasn't initialized yet -- `nsXPConnect::GetRuntimeInstance()` returns null. `nsXPConnect::InitJSContext` will set that a bit later in startup.

[10:07:02.0916] <nbp>
anba: I will double check for Range Analysis, but the fact where we do not consider bailout in `computeRange` is possibly due to cases where the flags are set after Range Analysis, not for cases where it is set in stone.

[10:08:39.0143] <nbp>
 * jandem: I will double check for Range Analysis, but the fact where we do not consider bailout in `computeRange` is possibly due to cases where the flags are set after Range Analysis, not for cases where it is set in stone.

[10:09:23.0336] <nbp>
The MBoundsCheck might be the exception to the rule, as this instruction is meant to be removed.

[10:56:20.0186] <nbp>
caroline: my comment in Bug 1686592, was meant as a way to amend what I had infer from the gecko profiler, not from RateMyCacheIR.

[10:56:21.0876] <botzilla>
https://bugzil.la/1686592 — NEW (nobody) — Responsiveness: On Twitter, switching from Home to Explore takes 2.5x as long as in Chrome

[10:57:23.0143] <caroline>
nbp: Ahhhhh that makes sense

[10:58:58.0642] <nbp>
caroline: by the way, do you think any of the reported ICs are actionable?

[11:00:25.0703] <nbp>
Or I should re-phrase differently, the output gives us the information about polymorphic cases, and the Healthyness of these is to rewrite most of them with the MacroAssembler instead of making calls?

[11:00:37.0362] <TheQwertiest>
another small question: I've implemented my custom iterator symbol handler (in C++) and now I'm testing in in JS. But I have the following problem:
```
let o = MyIterableObject();

for (i of o){
    // works fine
    console.log(i)
}

const iterator_fn = o[Symbol.iterator];
iterator_fn(); ///< *this* context is not passed to the handler method
```

Am I missing something?

According to docs and examples(https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols):  "Note that when this zero-argument function is called, it is invoked as a method on the iterable object. Therefore inside of the function, the this keyword can be used to access the properties of the iterable object, to decide what to provide during the iteration."

[11:01:06.0062] <TheQwertiest>
 * another small question: I've implemented my custom iterator symbol handler (in C++) and now I'm testing in in JS. But I have the following problem:
```
let o = MyIterableObject();

for (i of o){
    // works fine
    console.log(i)
}

const iterator_fn = o[Symbol.iterator];
iterator_fn(); ///< *this* context is not passed to the handler method, hence it fails
```

Am I missing something?

According to docs and examples(https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols):  "Note that when this zero-argument function is called, it is invoked as a method on the iterable object. Therefore inside of the function, the this keyword can be used to access the properties of the iterable object, to decide what to provide during the iteration."

[11:01:22.0719] <TheQwertiest>
 * another small question: I've implemented my custom iterator symbol handler (in C++) and now I'm testing in in JS. But I have the following problem:
```
let o = MyIterableObject();

for (let i of o){
    // works fine
    console.log(i)
}

const iterator_fn = o[Symbol.iterator];
iterator_fn(); ///< *this* context is not passed to the handler method, hence it fails
```

Am I missing something?

According to docs and examples(https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols):  "Note that when this zero-argument function is called, it is invoked as a method on the iterable object. Therefore inside of the function, the this keyword can be used to access the properties of the iterable object, to decide what to provide during the iteration."

[11:02:15.0368] <TheQwertiest>
 * another small question: I've implemented my custom iterator symbol handler (in C++) and now I'm testing in in JS. But I have the following problem:
```
let o = MyIterableObject();

for (let i of o){
    // works fine
    console.log(i)
}

const iterator_fn = o[Symbol.iterator];
iterator_fn(); ///< *this* context is not passed to the handler method (i.e. undefined) and method fails
```

Am I missing something?

According to docs and examples(https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols):  "Note that when this zero-argument function is called, it is invoked as a method on the iterable object. Therefore inside of the function, the this keyword can be used to access the properties of the iterable object, to decide what to provide during the iteration."

[11:02:52.0496] <TheQwertiest>
 * another small question: I've implemented my custom iterator symbol handler (in C++) and now I'm testing in in JS. But I have the following problem:
```
let obj = MyIterableObject();

for (let i of obj){
    // works fine
    console.log(i)
}

const iterator_fn = obj[Symbol.iterator];
iterator_fn(); ///< *this* context is not passed to the handler method (i.e. undefined) and method fails
```

Am I missing something?

According to docs and examples(https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols):  "Note that when this zero-argument function is called, it is invoked as a method on the iterable object. Therefore inside of the function, the this keyword can be used to access the properties of the iterable object, to decide what to provide during the iteration."

[11:03:24.0763] <TheQwertiest>
PS: I'm using ESR68.8

[11:05:24.0660] <caroline>
nbp:  Honestly not sure yet, iain and i started going over the report on friday to look for something actionable based on the report but didnt quite finish. I will talk about it with him again today. 

[11:06:53.0660] <arai>
TheQwertiest: `obj[Symbol.iterator]()` and `var f = obj[Symbol.iterator]; f()` are completely different operation in term of `this` value

[11:07:32.0952] <TheQwertiest>
arai: oh! so it's working as intended! thanks!

[11:07:40.0925] <nbp>
`const iterator_fn = obj[Symbol.iterator].bind(obj);` , maybe? (I do not know the answer)

[11:08:47.0911] <arai>
the latter case, `this` value is set to `undefined` in strict mode, and global object in non-strict mode

[11:10:51.0833] <TheQwertiest>
nbp: this was not intended as a js question =) I was thinking that my implementation was wrong somehow, hence the wrong *this* context

[12:13:30.0626] <Chris Peterson (:cpeterson)>
I'm the EPM for the Fission project. We run some automated tests in both Fission and non-Fission (e10s) mode until we can enable Fission by default for all users (and tests). I'm making a list of automated tests that we are not yet running in Fission mode. Do we need to run spidermonkey's jstests and jit-tests in Fission mode? Do the jstests or jit-tests execute any Gecko code paths related to content processes?

[12:14:13.0109] <nika>
Chris Peterson (:cpeterson): I doubt it

[12:14:31.0511] <nika>
spidermonkey tests are generally fission-oblivious, as they're oblivious to all of gecko

[12:14:50.0762] <Chris Peterson (:cpeterson)>
nika: good to know! thanks

[12:20:36.0469] <Chris Peterson (:cpeterson)>
nika: are gtests and cppunit tests also fission-oblivious?

[12:20:37.0321] <arai>
in in-browser jstests, we use iframe to implement `newGlobal` function

[12:20:41.0297] <arai>
https://searchfox.org/mozilla-central/rev/04f921656dfd19a5afa503c9b9780a1a389f14c4/js/src/tests/browser.js#168

[12:21:00.0690] <arai>
does it hit fission case?

[12:21:16.0987] <nika>
oh, in that case perhaps in-browser tests could use fission variants?

[12:21:28.0216] <nika>
Chris Peterson (:cpeterson): Yeah, I think they are right now

[12:22:52.0570] <arai>
the iframe doesn't load any external resource, but the testharness uses the global object there

[12:23:23.0687] <Chris Peterson (:cpeterson)>
Do jsreftests run in-browser?

[12:23:44.0529] <mgaudet>
jsreftests are the in browser jstests I think ?

[12:24:07.0575] <arai>
yes

[12:24:41.0112] <arai>
(I forgot the "jsreftest" name :P

[12:25:35.0162] <mgaudet>
(What's worse is I think the mach command has yet a third name; jstestbrowser) 

[12:32:42.0482] <sfink>
yeah, it really ought to be "browjstestser"

[12:38:08.0828] <mgaudet>
You joke but... 

[13:04:39.0189] <tcampbell>
/me proposes the refined test runner be 'mach jester'

[13:13:20.0639] <tcampbell>
sfink: does the hazard analysis take into account if a pointer is null? (I presume know, but I'm not sure..)

[13:13:47.0145] <tcampbell>
 * sfink: does the hazard analysis take into account if a pointer is null? (I presume no, but I'm not sure..)

[13:32:25.0379] <arai>
I guess we can use `JS_HAZ_NON_GC_POINTER` somehow

[13:32:31.0524] <arai>
https://searchfox.org/mozilla-central/rev/04f921656dfd19a5afa503c9b9780a1a389f14c4/js/public/GCAnnotations.h#40-48

[13:39:49.0877] <arai>
adding the attribute to some wrapper class, with runtime assertion that GC pointers inside the fields are all null

[13:49:39.0021] <sfink>
tcampbell: in limited ways. The statement `obj = nullptr;` will make `obj` "safe" across GCs, at least until it next acquires a value.

[13:50:13.0721] <sfink>
it understands `Maybe` and `UniquePtr` getting reset as well.

[13:52:48.0909] <tcampbell>
yeah, I'm doing something much more reckless

[13:53:13.0878] <tcampbell>
really, we just need to get the fields moved to another struct


2021-02-11
[03:52:57.0478] <Ms2ger>
> <@mgaudet:mozilla.org> (What's worse is I think the mach command has yet a third name; jstestbrowser)

Is there a `jsreftest` alias, at least?

[07:10:21.0501] <jorendorff>
tcampbell: Do you know what is special about default constructors in https://bugzilla.mozilla.org/show_bug.cgi?id=1691941 ?

[07:10:29.0884] <jorendorff>
I couldn't tell why the same problem doesn't affect all spread-calls

[07:11:19.0515] <jorendorff>
tcampbell: FWIW the debugger can't pause in self-hosted code and doesn't even see frames in self-hosted code. It's as if it's C++.

[07:15:06.0053] <tcampbell>
jorendorff: the synthetic constructors don't seem to be hidden (but probably should)?

[07:16:18.0520] <tcampbell>
in this default constructor case it is `args` -> stack -> `call`, while a spreadcall is `args` -> stack -> checkspreadoptimizable -> `call`

[07:17:01.0852] <tcampbell>
so anba changes `args` to `.args` which means it is hidden similar to if it was just on expression stack

[07:22:07.0009] <jorendorff>
tcampbell: the synthetic constructors are new, though, right? instead of renaming to `.args` it seems better to make them hidden from the debugger.

[07:22:18.0718] <jorendorff>
...or emit the usual bytecode

[07:29:21.0936] <tcampbell>
The usual bytecode is changed by tc39 PR

[07:29:53.0361] <tcampbell>
The synthetic constructors already existed when we had fields

[07:30:09.0679] <tcampbell>
Hiding probably makes sense

[08:16:02.0201] <nbp>
tcampbell: Ok, so the hypothesis about adb being the reason why android tests are slow is definitely it.  With adb each tests takes at least 400ms to run.

[08:16:58.0326] <tcampbell>
lol.. yikes

[08:17:09.0891] <tcampbell>
are there straightforward fixes?

[08:17:49.0183] <nbp>
Yes-ish, I had to modify mozdevice to make it fit with our test harness.

[08:18:25.0183] <nbp>
and I still have an issue to match failing tests: https://treeherder.mozilla.org/jobs?repo=try&collapsedPushes=810961%2C809570%2C808715%2C808674%2C807659%2C807635%2C494637%2C491572%2C490401%2C814298%2C837057%2C837145%2C837040%2C837018%2C836564%2C836545%2C836520%2C836498%2C836418%2C841442%2C837181%2C837161%2C859382%2C859523%2C859437%2C858734%2C858680%2C860923%2C860947&selectedTaskRun=UIaKrylzT_2Jhs7lam_now.0&revision=af36717d07b7b24404f2e831078a4b866549edb8

[08:19:55.0741] <nbp>
but the results are promising, 8min, 14min, 29min instead of 32min, 42min, 53min

[08:25:57.0356] <nbp>
anba: Does this sounds good to you? https://phabricator.services.mozilla.com/D96755

[08:36:29.0194] <nbp>
> <@nbp:mozilla.org> but the results are promising, 8min, 14min, 29min instead of 32min, 42min, 53min

Whoa, doing the math … with 10 jobs, on 6 configurations, and removing 24 minutes on each … This means that by I can save 1 day of computation where we are not calling adb!

[08:40:36.0101] <TheQwertiest>
another day, another question =)
is there a way to handle stack overflow caused by JS in SM? 

[08:40:50.0734] <TheQwertiest>
e.g. configurable max stack depth

[08:43:26.0409] <TheQwertiest>
example code that causes such overflow:
```
class OverflowMe{
    constructor() {
        this.state = -1;
    }
    get state() {
        return this.state;
    }
    set state(v) {
         this.state = v;
    }
};
new OverflowMe();
```

[08:45:07.0145] <TheQwertiest>
i.e. I would ideally abort the JS execution (with error), rather than the whole application, when encountering such code

[08:45:42.0056] <arai>
"too much recursion" is reported in those places  https://searchfox.org/mozilla-central/search?q=symbol:_ZN2js18ReportOverRecursedEP9JSContext&redirect=false

[08:47:53.0331] <arai>
in some case, it's limited by stack pointer (CheckRecursionLimit etc), and in some case, it's limited by the number of frames (InterpreterStack::allocateFrame)

[08:49:34.0440] <TheQwertiest>
arai: well, it crashes app in my case (i.e. it causes actual c++ stack overflow)

[08:49:48.0756] <TheQwertiest>
this is on esr68.8

[08:50:16.0417] <arai>
where does that happen?

[08:50:48.0695] <TheQwertiest>
oh, sorry, right. This is in my embedded SM

[08:51:28.0534] <arai>
sorry, I mean, can you pastebin the backtrace?

[08:53:37.0772] <TheQwertiest>
Don't have much, it seems that most of the stack info is lost on stack overflow:


[08:54:59.0531] <TheQwertiest>
Unparsed addresses continue for a long time

[08:55:17.0205] <arai>
yeah, that's JIT

[08:55:45.0114] <arai>
I wonder if calling `JS_SetNativeStackQuota` helps there

[08:56:18.0276] <arai>
it's for the stack pointer case above

[08:56:36.0439] <arai>
example usage: https://searchfox.org/mozilla-central/search?q=JS_SetNativeStackQuota&path=

[08:56:59.0372] <arai>
so, if your application doesn't call it, try calling it with some small number and see if it changes the behavior

[09:00:05.0339] <TheQwertiest>
thanks, I'll try it!

[09:11:08.0141] <TheQwertiest>
arai: yup, that fixed it, thanks!

[09:11:16.0731] <arai>
:D

[09:20:04.0973] <tcampbell>
nbp: that sounds really great


2021-02-12
[08:08:41.0841] <tcampbell>
oh yikes.. that `[[nodiscard]]` change created some fun conflicts..

[08:09:50.0499] <mgaudet>
/me gently misses `MOZ_MUST_USE` 

[08:15:28.0049] <evilpie>
`nodiscard` is not a great name

[08:35:44.0818] <jandem>
it's interesting that you can also apply it to classes, similar to `MOZ_MUST_USE_TYPE`. `class [[nodiscard]] Foo {};`

[08:35:55.0032] <jandem>
 * it's interesting that you can also apply it to classes, similar to `MOZ_MUST_USE_TYPE`... `class [[nodiscard]] Foo {};`

[08:39:37.0428] <jandem>
or to enum classes, that could be nice for us: `enum class [[nodiscard]] FooResult { Ok, Error, ... }`

[08:49:02.0867] <jandem>
 * or to enums, that could be nice for us: `enum class [[nodiscard]] FooResult { Ok, Error, ... }`

[09:05:25.0698] <mgaudet>
Would anyone object if I dropped the `good-first-bug` and `helpwanted` tags off of https://bugzilla.mozilla.org/show_bug.cgi?id=1414683 ? 

[09:07:59.0965] <iain>
No objections here

[09:42:43.0054] <sfink>
pbone: (when you're awake) does the `sGCRunner` merge interfere with the stuff you're working on? I'm worried that I might be stepping on your toes.

[09:46:53.0192] <mccr8>
It is Saturday in Australia so it is a bit more than a matter of "when he's awake".

[10:15:38.0901] <mgaudet>
Can we swap which bug got closed between Bug 1428672 and Bug 1564825; the newer one much more clearly describes what is going on, vs. the older one which is sort of a carry on of an even older issue... 

[10:15:40.0539] <botzilla>
https://bugzil.la/1428672 — NEW (nobody) — Redeclaration of a class needs a specific error

[10:15:41.0289] <botzilla>
https://bugzil.la/1564825 — RESOLVED (nobody) — Misleading Syntax Error when re-declaring an ES6 class


2021-02-13
[18:13:42.0204] <iain>
confession: Implemented regexp captures today, and had the lovely experience of watching my implementation fail every single 262 test, only to realize that the *tests* were wrong. (The patch to update them to use the /d flag is still waiting for review upstream.)

[18:13:44.0219] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[18:16:26.0183] <iain>
 * confession: Implemented regexp captures indices today, and had the lovely experience of watching my implementation fail every single 262 test, only to realize that the _tests_ were wrong. (The patch to update them to use the /d flag is still waiting for review upstream.)


2021-02-14
[18:16:46.0986] <jorendorff>
I just found out why nbp  likes Nix so much. It has `with`-expressions https://nixos.org/manual/nix/stable/#idm140737321913344

[01:07:26.0013] <pbone>
> <@sfink:mozilla.org> pbone: (when you're awake) does the `sGCRunner` merge interfere with the stuff you're working on? I'm worried that I might be stepping on your toes.

It does interfere, but only in the sense of merge conflicts, not in any real conceptional way.  If you're ready to land it this week go ahead, mine still needs more testing and reviews so I'll fix it up the conflicts.


2021-02-15
[03:20:05.0538] <nbp>
jorendorff: I will also note that I probably added a large number of `with({}) {}` to the SpiderMonkey test suite.

[06:37:42.0933] <yulia>
If I want a searchable list, I probably want an arrayObject? or do we have another structure I can use?

[06:37:56.0002] <yulia>
Wondering if i can avoid using ArrayIncludes

[06:41:59.0396] <nbp>
yulia: What for? https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/find ?

[06:42:48.0219] <yulia>
given a list of modules, i want to find if a given module is in that list

[06:43:15.0906] <yulia>
im wondering if i need to rely on the self hosted method "arrayInclude" or if we have another data structure i can sue

[06:43:24.0527] <yulia>
it doesn't appear to be possible to use ListObject

[06:43:33.0974] <arai>
is it on C++ ?

[06:43:38.0291] <yulia>
yes

[06:44:21.0294] <yulia>
It is a sketch, so it doesn't need to be the best approach for now... just wondering if i missed something

[06:44:38.0397] <arai>
HashSet or HashMap, or maybe GC* variant

[06:44:54.0426] <arai>
depends on how the search is performed tho

[06:44:55.0010] <yulia>
oh, interesting

[06:46:58.0738] <arai>
or maybe Ordered* variant in js/src/ds/OrderedHashTable.h if you need to keep the insertion order as well

[06:47:48.0424] <yulia>
yes, that is necessary

[06:48:42.0069] <yulia>
this looks like exactly what i need, thanks

[06:49:35.0390] <yulia>
(at least, enough to sketch anyway)

[09:28:31.0682] <nbp>
https://treeherder.mozilla.org/logviewer?job_id=329811371&repo=try&lineNumber=1872 hum … how such a simple loop can take so much time even in the interpreter?

[09:35:19.0657] <nbp>
Sadly we did not got such opportunity, as this was our original design choice … https://twitter.com/v8js/status/1361337569057865735

[09:37:15.0400] <jandem>
yeah apart from some minor headaches, the arguments rectifier has served us well

[09:44:38.0074] <iain>
Yeah, I saw that article this morning and thought: "wait, isn't this just describing our existing approach?"

[11:09:40.0544] <nbp>
confession: I am almost ready to land the big android test suite improvement … I just need to figure out how a test case such as `jit-test/tests/parser/bug-1263355-3.js` can timeout.

[11:09:42.0867] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[11:49:35.0675] <sfink>
maybe it received a phone call


2021-02-16
[05:46:05.0321] <nbp>
jseward: I did not knew that you could take over others patches in phabricator.

[05:48:15.0847] <nbp>
How did you do that?

[05:51:08.0803] <wingo>
i think you "commandeer" the patch, right?

[05:51:18.0279] <wingo>
is an action

[05:55:05.0833] <jseward>
nbp: yes, "Commandeer"

[05:56:13.0866] <nbp>
ok, this is an action in the dropdown list, like where we accept reviews.

[07:05:18.0665] <yulia>
hm... is there a way to get the failing part of a test 262 in our setup?

[07:06:53.0797] <yulia>
I tried with verbose output but it isn't telling me much about what is failing

[07:08:53.0608] <mgaudet>
yulia: a test262 update you mean? 

[07:09:25.0627] <yulia>
no, i am testing the change to the top level await algorithm, it is causing the existing changes to fail

[07:09:35.0289] <yulia>
 * no, i am testing the change to the top level await algorithm, it is causing the existing tests to fail

[07:09:45.0288] <yulia>
and im trying to narrow it down. i think i got the impl right but maybe not

[07:09:58.0321] <yulia>
all i get is 

[07:10:00.0981] <yulia>
```
## test262/language/module-code/top-level-await/dynamic-import-rejection.js: rc = 0, run time = 0.061924
REGRESSION - test262/language/module-code/top-level-await/dynamic-import-rejection.js
[0|1|0|0] 100% ========================================================[0|1|0|0] 100% ==========================================================>|   0.3s
REGRESSIONS
    --enable-top-level-await test262/language/module-code/top-level-await/dynamic-import-rejection.js
FAIL

```

[07:10:10.0431] <yulia>
and, afaict all of the assertions pass

[07:10:14.0642] <yulia>
so im not too sure how it is failing

[07:11:10.0183] <mgaudet>
curious; I like print debugging in situations like this 

[07:11:15.0695] <mgaudet>
just to ensure I am following control flow

[07:12:14.0897] <mgaudet>
potentially helpful harness flags include `-s` for show the command line that's actually getting run. and `-o` for show output; I think in theory it should show output if the test fails, but `-o` will ensure it happens even if the test passes

[07:12:23.0456] <mgaudet>
(I'm about to disappear for a bit; sorry) 

[07:16:16.0090] <yulia>
oh weird

[07:16:27.0078] <yulia>
it works if the test is explictly awaited

[07:17:17.0522] <yulia>
ugh that is weird

[12:22:55.0420] <smaug>
sfink: perhaps IdleTaskRunner's delay should be called something like maxWaitTime to be easier to understand.

[12:39:08.0653] <sfink>
smaug:  yeah, I definitely get confused. Also between delay and deadline, since I think of it as "try to run this thing in idle time, but there's a deadline for waiting for idle time to appear" which is *not* what deadline means here.

[12:41:05.0567] <sfink>
do we have any idle time during startup? As in, "false" idle time, where an IdleTaskRunner would be called but we're really not done with startup yet and might accidentally stall off something important.

[12:41:16.0692] <smaug>
ah, right. Perhaps deadline should be minIdlePeriodLength 

[12:42:06.0039] <smaug>
there can be some small amount of idleness also during startup if the main thread is waiting for some I/O to finish

[12:43:01.0274] <sfink>
another question: is `IdleTaskRunner` considered to be up to date with respect to the new `TaskController`/`TaskManager` stuff?

[12:43:52.0526] <smaug>
it uses higher level APIs, so yes. Switch to TaskController shouldn't have affected it.

[12:45:16.0897] <sfink>
ok. I was wondering if it was a pending item to "port" `IdleTaskRunner` to `TaskController`, which would make it a problem to modify features on the "old" stuff. (Not that I have anything in mind right now.)

[12:46:25.0718] <smaug>
Dispatching idle runnables should work the same way as before.  (There is a low level IdleTaskManager which TaskController uses)

[12:47:14.0067] <sfink>
I think you're right, my patch ought to badly regress -- or at least, change -- GC timing. I wish I had a CI perf test that would show a problem, so I'd know if I did it again.

[12:47:50.0774] <sfink>
I'll have to rethink how to incorporate the MaybeGC stuff

[12:49:00.0240] <smaug>
It is unfortunate that telemetry is basically the perf test for many GC/CC scheduling cases.

[12:49:18.0888] <smaug>
Though, it is also good way to validate that the telemetry probes measure something useful.

[12:49:24.0960] <sfink>
heh

[12:49:26.0258] <smaug>
 * Though, it is also a good way to validate that the telemetry probes measure something useful.


2021-02-17
[03:13:44.0533] <nbp>
I wonder if someone is asking us to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1693256 in order to build an exploit?

[03:16:34.0059] <evilpie>
you don't know Jukka?

[03:21:33.0878] <nbp>
I do, but this bug definitely sounds like what any exploit will try to do.

[05:04:43.0712] <yulia>
Dumb question, what is the "private" in a Script source object?

[05:36:41.0912] <yulia>
i figured it out!

[07:15:25.0862] <stratan>
Hello there! Not sure if that's the right channel, but does anybody know how to parse .dmp files on macOS? i.e I'd like to know the register values at the time of crash.

[07:16:01.0211] <stratan>
 * Hello there! Not sure if that's the right channel, but does anybody know how to parse .dmp files on macOS? i.e I'd like to know the register values at the time of crash. What's the conventional way to do it? Thank you :)

[07:19:13.0464] <stratan>
Never mind, I was pointed to the #breakpad channel :)

[07:23:35.0094] <tcampbell>
stratan: I don't know if any of these recommendations still work, but here they are: https://firefox-source-docs.mozilla.org/contributing/debugging/debugging_a_minidump.html#using-other-tools-to-inspect-minidump-data

[07:24:14.0729] <stratan>
tcampbell: I did check it out but there's no reference for macOS apparently

[07:24:47.0055] <stratan>
 * tcampbell: I did check it out but there's no reference for macOS-specific tooling apparently

[07:24:54.0811] <stratan>
but I guess I'll give it a try

[07:44:07.0437] <@allstarschh|afk>
sfink: jonco : I assume we will have our GC meeting after the monthly internal call ? 

[07:45:04.0268] <jonco>
 @allstarschh|afk yes, if everyone's ok with that

[07:45:17.0657] <jonco>
it will push the meeting back 45 mins

[07:45:39.0089] <jonco>
sfink, tcampbell does that work for you?

[07:46:27.0894] <sfink>
it works great for me, but it pushes your side of the world kind of late. I don't actually have much to share, so just to check: do we want to have the meeting today?

[07:46:49.0222] <tcampbell>
I wanted to chat about the concurrent marking prototype

[07:47:11.0936] <jonco>
it's OK for me but we can try and keep it brief

[07:48:47.0265] <@allstarschh|afk>
jonco sfink  : I'll see if I can join at that time, if I cannot join I will update the status to you later (it's dinner time and I need to handle two little cute monsters......)

[07:49:23.0685] <jonco>
@allstarschh|afk: fine by me

[07:50:43.0880] <jandem>
I'll try to make it, but may have to leave after 15 min or so

[08:27:26.0988] <jandem>
confession: looking into [removing ObjectGroup](https://bugzilla.mozilla.org/show_bug.cgi?id=1689413#c3) and shrinking all JS objects

[08:27:33.0287] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[09:19:41.0340] <sfink>
jonco: @allstarschh|afk: jandem: meeting time?

[09:24:38.0846] <stratan>
jandem: how can I track the actual code changes of this issue? Are they up somewhere? Or how can I know when they will be pushed on stable?

[09:26:15.0240] <jandem>
stratan: best way is to follow the bug. Still have to write most of the patches, something unexpected could come up, etc

[09:28:57.0955] <jandem>
("follow" as in CC yourself)

[09:29:48.0361] <stratan>
jandem: alright, thank you

[09:36:25.0314] <stratan>
jandem: I'm a bit confused with the issue's title and the comments. As far as I understood you're trying to remove `BaseShape` and not `ObjectGroup`? Unless I'm missing something. I'm new to the codebase sorry.

[09:37:55.0559] <jandem>
stratan: oh sorry, that's my fault, I changed the title in comment 3 (see end of that comment). It used to be about removing `BaseShape`

[09:38:17.0144] <jandem>
maybe I should have filed a new bug instead...

[09:40:25.0974] <jandem>
(in a meeting now, I can edit the bug comments tomorrow to make that clearer)

[09:40:55.0113] <stratan>
jandem: sure no worries. thank you for the clarification!

[09:42:30.0925] <jandem>
np!


2021-02-18
[17:08:44.0214] <Waldo>
Be It Hereby Resolved That anba is a god among men.  https://phabricator.services.mozilla.com/D101398#3425016

[17:09:06.0460] <Waldo>
/me gestures in the direction of an obligatory Ghostbusters reference

[23:49:51.0650] <Ms2ger>
anba: might be nice to put that comment somewhere more permanent

[00:03:25.0947] <Waldo>
He's "on" Matrix, but also not actively on, in that I'm not sure he's logged on here since Berlin.

[00:04:23.0024] <Waldo>
But yeah, maybe worth shoving some of that into the patch, or something.  Or getting UTS35 rejiggered to unroll the loop, ideally, so no one has to think it through so much.

[00:13:58.0704] <Ms2ger>
🕰️

[00:14:27.0762] <Waldo>
Gotta eat a late dinner first.

[04:30:40.0114] <evilpie>
jandem: the objectgroup removal sounds exciting

[04:30:55.0475] <evilpie>
I hope moving the realm into the baseshape doesn't regress stuff like gmail

[04:31:36.0263] <jandem>
evilpie: I hope it's ok also because most objects have an object proto like Object.prototype and that already forces a realm-specific shape

[04:32:03.0455] <evilpie>
oh I hadn't considered that

[04:33:20.0711] <jandem>
but yes it is exciting. Actually there are some ideas on object/shape changes we can make after this that are really exciting

[04:33:33.0445] <jandem>
 * but yes it is exciting. Actually there are some ideas on object/shape changes we can make after this that are even more exciting

[04:34:01.0336] <jandem>
I should write that up somewhere

[09:03:07.0245] <mgaudet>
erik has a question in #developers about whether or not re-injecting a webext script means re-jit compiling it that I feel like I should have a concrete answer to, but I don't. Anyone have a better answer than "I think we'll recompile" 

[09:14:00.0468] <tcampbell>
mgaudet: different tab -> different global -> script clone -> different jitscript

[09:14:22.0638] <tcampbell>
even with stencil, we would have different instantiation -> different script -> different jitscript

[09:15:24.0592] <tcampbell>
In our hypothetical future where stencil-nav is magical and we are doing mixed-resource-type caching and we consider caching JIT hinting, *then* we might be closer.

[09:16:31.0649] <tcampbell>
The JIT'ed code still currently bakes in GlobalObject so that would be a very large leap to share directly so that is highly unlikely in any of my currently envisioned probabalistic futures

[09:20:06.0894] <dana>
yulia: are you around? I could still use some help with https://phabricator.services.mozilla.com/D102956 and I feel like doing this asynchronously is dragging it out longer than necessary

[09:21:12.0967] <yulia>
Yes

[09:21:44.0423] <dana>
ok - thanks! the issue I'm having is that there are a couple of different files and module types I'm trying to juggle

[09:22:16.0184] <dana>
so `certDecoder.js` is currently an ES6 module, which as we've discussed can't be loaded in the devtools

[09:23:04.0636] <dana>
so my plan is to turn it into a JSM. the problem there is that it expects some symbols from `pvutils_bundle.js`, etc. to be available in the global scope

[09:23:12.0983] <dana>
(`pvutils_bundle.js` is a commonJS module)

[09:23:43.0870] <dana>
so I guess my question is, how do I convert `certDecoder.js` to a JSM (i.e. how do I make the symbols provided by the commonJS modules available to it?)

[09:24:04.0941] <dana>
this is all in `toolkit/components/certviewer/content/` btw

[09:24:16.0116] <yulia>
isn't certDecoder.js a requirejs file?

[09:24:18.0915] <mgaudet>
> <@tcampbell:mozilla.org> even with stencil, we would have different instantiation -> different script -> different jitscript

Right; do we share bytecode across realms tho? 

[09:24:23.0326] <yulia>
unless there was an update recently

[09:24:28.0351] <dana>
> <@yulia:mozilla.org> isn't certDecoder.js a requirejs file?

no

[09:24:42.0479] <dana>
it never was, to my knowledge

[09:25:20.0582] <yulia>
hmm can you point me to the file ? that might help. I was looking at a require js file in the pr

[09:25:30.0967] <dana>
https://searchfox.org/mozilla-central/source/toolkit/components/certviewer/content/certDecoder.js

[09:25:50.0526] <yulia>
oh, but doesn't the pr turn it into a commonjs file?

[09:25:58.0554] <yulia>
this one: https://phabricator.services.mozilla.com/D102956

[09:25:58.0588] <dana>
yes, but Johann said we shouldn't do that

[09:26:01.0944] <yulia>
ah

[09:26:26.0005] <yulia>
this is in response to Gijs' comments about JSMs?

[09:27:07.0712] <dana>
well, what he said he didn't want was to bundle it, but the problem there is I don't know how to make it available to browser code without bundling it

[09:27:45.0501] <dana>
(if there's a way to do that, then I guess my only question is how to load commonJS modules in non-module contexts, like the cert error page)

[09:28:02.0750] <yulia>
hm. so different teams do different things. Let me take another look

[09:28:25.0854] <yulia>
you can load as JSM, but as alex pointed out -- if it is running in the debugger it can be tricky so everything in devtools is done as commonjs to be safe

[09:28:42.0278] <yulia>
 * you can load as JSM, but as alex pointed out -- if it is running in the debugger is paused it can be tricky so everything in devtools is done as commonjs to be safe

[09:29:20.0973] <dana>
my sense is it won't be running in the debugger? but I don't actually know how to tell for sure

[09:29:42.0871] <yulia>
it um, can be tricky, but i trust what alex is saying there. just a sec. looking again

[09:29:50.0132] <dana>
sure thing

[09:38:56.0884] <yulia>
ok, I thought in alex's comment he was saying that using es6 should be possible. I don't see that in the codebase anywhere so i think that referenced a potential future. Summoning ochameau in case I am wrong here. He is the expert in the DevTools module loading system, it is quite complex and I don't know all of the corners

[09:39:13.0411] <yulia>
to answer your first question, how do you rewrite this as jsm

[09:40:01.0736] <yulia>
you would need to redo the import statements from `import { foo } from 'bar'` to something like 

```
const {utils: Cu} = Components;
const {foo} = Cu.import("resource://bar.jsm");
```

[09:40:22.0449] <yulia>
the second part of this is exports need to be export symbols

[09:40:23.0939] <yulia>
ie

[09:40:26.0146] <yulia>
`var EXPORTED_SYMBOLS = ["Stuff", "Whatever"];`

[09:40:44.0277] <yulia>
there exists a rewriting tool that transforms to jsms to es6 modules

[09:40:44.0811] <yulia>
https://github.com/k88hudson/babel-plugin-jsm-to-esmodules

[09:40:52.0513] <yulia>
though it is a bit sad to see it go the other way

[09:40:57.0084] <dana>
right

[09:41:57.0593] <dana>
> <@yulia:mozilla.org> you would need to redo the import statements from `import { foo } from 'bar'` to something like 
> 
> ```
> const {utils: Cu} = Components;
> const {foo} = Cu.import("resource://bar.jsm");
> ```

can this code load commonJS modules? `certDecoder.js` (which will become `certDecoder.jsm`) relies on `pvutils_bundle.js`, which is a vendored bundle of commonJS modules

[09:42:30.0490] <tcampbell>
> <@yulia:mozilla.org> though it is a bit sad to see it go the other way

At least we'll know there is a smooth transition backwards

[09:43:14.0371] <yulia>
I think jsms can pull in plain js files, correct me if i am wrong tcampbell ?

[09:43:30.0739] <tcampbell>
that is a question for the loader

[09:43:34.0958] <tcampbell>
so devtools in this case

[09:43:55.0791] <dana>
but again, to be clear, this is happening in a jsm that isn't in devtools

[09:44:04.0402] <yulia>
yeah this is a shared jsm

[09:44:08.0497] <yulia>
iiuc

[09:44:32.0446] <tcampbell>
yulia.. remember my rant about loadSubscript?

[09:44:36.0300] <yulia>
yes

[09:44:40.0138] <tcampbell>
might be the tool here =\

[09:44:55.0056] <yulia>
right now i am wondering if the simplest thing would be the newTab approach... 

[09:45:13.0259] <yulia>
what they do is compile jsm to es6 and then to requirejs bundle

[09:45:32.0350] <yulia>
they had a similar problem, two contexts one that understood requirejs and the other understood jsms

[09:45:42.0292] <yulia>
i don't really like that though

[09:45:51.0002] <yulia>
thats what that plugin is fromm..

[09:46:38.0197] <yulia>
ok, looking into loadSubscript, just a sec

[09:47:35.0956] <yulia>
also properly summoning ochameau one moment

[09:49:26.0694] <yulia>
dana: where else is the file being used?

[09:49:53.0672] <dana>
https://searchfox.org/mozilla-central/source/browser/base/content/aboutNetError.js#7

[09:49:55.0340] <yulia>
ah

[09:50:08.0899] <dana>
and I want to use it in https://searchfox.org/mozilla-central/source/security/manager/pki/resources/content/clientauthask.js, among other places

[09:50:39.0616] <dana>
(and right now in aboutNetError we're loading the bundle resources as separate scripts in the associated xhtml files, which feels not great)

[09:50:40.0468] <ochameau>
and if I recall correctly it is meant to be used from there: https://searchfox.org/mozilla-central/source/devtools/shared/webconsole/network-helper.js#706

[09:50:40.0503] <yulia>
ok, and these are content and can use es6 modules

[09:50:52.0962] <dana>
 * (and right now in aboutNetError we're loading the bundle resources as separate scripts in the associated xhtml file, which feels not great)

[09:50:59.0913] <dana>
right

[09:51:53.0389] <ochameau>
if you make your dependency be a JSM, then it should be easy to use it from this method. This module already use a JSM, so it sounds like we don't have any trouble with breakpoints

[09:52:14.0375] <ochameau>
so that you could use such new JSM, like NetUtil.jsm that we import in the header of this file:

[09:52:14.0849] <ochameau>
https://searchfox.org/mozilla-central/source/devtools/shared/webconsole/network-helper.js#66

[09:52:22.0081] <ochameau>
would that be ok to use a JSM?

[09:52:27.0153] <dana>
dependency as in `pvutils_bundle.js` et. al.?

[09:52:27.0449] <ochameau>
 * would that be ok for you to use a JSM?

[09:53:02.0801] <yulia>
they have a requirejs dependency imported by the module

[09:53:08.0662] <yulia>
iirc, devtools can handle that?

[09:53:42.0303] <ochameau>
if you keep the bundle thing, yes, you might be able to load it thanks to the devtools loader

[09:53:59.0725] <ochameau>
i.e. via `require("chrome://global/content/certviewer/pvutils_bundle.js")`

[09:54:10.0330] <ochameau>
Let me give it a try to see what happens

[09:54:19.0144] <ochameau>
never tried such thing so far ;)

[09:54:40.0958] <yulia>
but this would make it specific to the devtools loader, if i get it right

[09:54:54.0463] <dana>
yeah - this needs to be usable elsewhere too

[09:56:23.0855] <ochameau>
well we use that bundle trick in some places in devtools, for ex the debugger does that a lot. Thanks to some boilerplate code in header/footer it can be loaded in different ways. Plain JS <script>, worker script, common js and even JSM!

[09:57:01.0593] <ochameau>
the real issue with bundle isn't that, it is that this isn't the real source code. but it isn't an issue to be loaded in different ways.

[09:58:25.0952] <ochameau>
here is for example a commonjs module that can be loaded as a jsm:

[09:58:26.0492] <ochameau>
https://searchfox.org/mozilla-central/source/devtools/client/performance-new/popup/background.jsm.js#620

[10:00:07.0987] <yulia>
i just noticed, you are loading pvutils_bundle.js like this in aboutNetError: https://searchfox.org/mozilla-central/source/browser/base/content/aboutNetError.xhtml#212

[10:00:13.0875] <yulia>
so it is being accessed from the global

[10:00:31.0422] <dana>
right - that's been an issue

[10:00:34.0468] <yulia>
is that right?

[10:00:51.0761] <yulia>
ok

[10:00:52.0537] <dana>
(that was one of the hurdles I encountered when trying to make `certDecoder.js` a jsm)

[10:01:09.0257] <ochameau>
such thing works today from devtools: `const { pvutils } = require("chrome://global/content/certviewer/pvutils_bundle.js")`

[10:01:44.0869] <dana>
right, but that doesn't help us in other contexts

[10:02:50.0228] <ochameau>
if that's fine keeping the bundle, you can make it load as a JSM thanks to a code similar to this at the end of the file `var EXPORTED_SYMBOLS = Object.keys(module.exports);`

[10:04:02.0377] <dana>
well, is there a way to un-bundle it? we only do that to pack up the vendored code, really

[10:04:55.0970] <dana>
or maybe it would be best to just keep it as a bundle and only load it into the new `certDecoder.jsm` as a jsm using that addition

[10:05:50.0555] <yulia>
you need access to the globals from pvutils if i got it right

[10:06:31.0574] <yulia>
the exported globals (because i don't see pvutils being called anywhere in certDecoder)

[10:06:45.0457] <yulia>
im just wondering if you can import the two separately in devtools

[10:06:47.0577] <ochameau>
is that the source file of pvutils? https://github.com/PeculiarVentures/pvutils/blob/master/src/utils.js

[10:06:53.0400] <dana>
yes

[10:06:56.0125] <yulia>
one using the require thing ochameau mentioned and the other as a jsm

[10:07:04.0947] <yulia>
then, the rest of your code stays mostly the same

[10:07:07.0257] <yulia>
its a bit messy

[10:07:32.0996] <dana>
well, it's honestly a bit messy right now

[10:08:02.0927] <ochameau>
given that the source file is fairly trivial, doing a one time fork to migrate it to become just a plain JSM sounds like a viable option

[10:08:28.0634] <ochameau>
it would complexify updating if the upstream file changes... but well are we updating this file at all?

[10:08:59.0773] <dana>
so that's not the only dependency - there's `asn1js_bundle.js` and `pkijs_bundle.js`

[10:09:16.0024] <dana>
I don't think we've updated the files, but it would be conceivable that we would

[10:09:54.0096] <dana>
looks like we did update pkijs once

[10:10:02.0133] <dana>
and pvutils

[10:10:08.0155] <yulia>
that would also be a possibility tbh

[10:10:36.0337] <yulia>
I honestly think that the easiest way for now is commonjs

[10:10:41.0698] <yulia>
it will work in both contexts

[10:10:44.0668] <ochameau>
ASN1 would be harder to convert given that's made of many modules

[10:10:57.0798] <yulia>
we need to handle the transition from commonjs to esm anyway, as part of moving devtools over

[10:11:12.0362] <ochameau>
https://github.com/PeculiarVentures/ASN1.js/blob/master/src/asn1.js

[10:11:54.0364] <ochameau>
the complexity here is quite specific to the fact that's a bundle rather than commonjs

[10:12:36.0971] <yulia>
well, there are a few things -- one is that we have two consumers: content scripts and devtools. if we switch to jsm we have different loadders

[10:12:46.0092] <yulia>
 * well, there are a few things -- one is that we have two consumers: content scripts and devtools. if we switch to jsm we have different loaders

[10:12:53.0097] <yulia>
if i got it right, using require needs a bundling step

[10:12:59.0060] <ochameau>
the original sources are ESM... so if we were able to use ESM... we wouldn't even mention bundles and commonjs :p

[10:13:07.0943] <yulia>
TRUE.

[10:13:13.0860] <yulia>
I am working on it!

[10:13:21.0226] <ochameau>
:)

[10:14:02.0885] <yulia>
which loader do content scripts use? that is the other thing that could be adjusted

[10:14:53.0624] <ochameau>
I don't know how to move forward here as I don't know what are the real blockers here. From devtools points of view there is no issue. We can load it as a commonJS bundle today, via require. If the bundle becomes a JSM, we should also be able to use it from devtools.

[10:15:39.0353] <ochameau>
Is that the fact that's a bundle the issue ? or that we can't load it from a JSM ?

[10:15:52.0456] <ochameau>
or... both?

[10:15:56.0720] <dana>
mostly the latter, but I suppose a combination of the two

[10:16:19.0310] <dana>
the problem is that `certDecoder.js`, whatever it is, needs to be loaded from devtools and other contexts

[10:16:22.0821] <ochameau>
if we can keep it as a bundle, then, you can hack something at the end of the bundle to make it loadable as a JSM

[10:16:25.0447] <dana>
but it uses the bundle

[10:16:40.0384] <dana>
that seems like a reasonable solution for now

[10:17:14.0413] <dana>
I'll give that a try and come back if I encounter an issue

[10:17:23.0412] <yulia>
sorry you are going through this

[10:17:32.0074] <dana>
😅

[10:17:45.0254] <dana>
well, thank you for all of your help, both of you!

[10:19:32.0138] <tcampbell>
🍝

[10:20:42.0467] <tcampbell>
At least this looks promising that a unified ESM world for ChromeUtils, DevTools, XHTML will go a huge way.

[10:20:52.0610] <ochameau>
With something like this:

[10:20:53.0769] <ochameau>
diff --git a/toolkit/components/certviewer/content/vendor/pvutils_bundle.js b/toolkit/components/certviewer/content/vendor/pvutils_bundle.js
index 4ecec5e223300..95b224a08d34d 100644
--- a/toolkit/components/certviewer/content/vendor/pvutils_bundle.js
+++ b/toolkit/components/certviewer/content/vendor/pvutils_bundle.js
@@ -1,3 +1,4 @@
+var global = this;
 (function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.pvutils = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
 "use strict";
 
@@ -789,3 +790,5 @@ module.exports = {
  
 },{"pvutils":1}]},{},[2])(2)
 });
+
+var EXPORTED_SYMBOLS = ["pvutils"];


[10:21:17.0049] <ochameau>
you can do this: `const {pvutils} = ChromeUtils.import("chrome://global/content/certviewer/pvutils_bundle.js")`

[10:21:47.0064] <ochameau>
this is gross, and doesn't help regarding the messiness of bundles... but... works

[10:22:02.0709] <dana>
"works" is kind-of what I need right now...

[10:22:27.0782] <tcampbell>
(using "```diff" on a line before, and "```" on a line after will pretty-print the diff on matrix)

[10:22:44.0280] <tcampbell>
 * (using "```diff" on a line before, will pretty-print the diff on matrix)

[10:23:07.0300] <ochameau>
I'm still sooo bad with multiline matrix, I just don't get how that works

[10:23:10.0083] <yulia>
another thought: if you are relying on the global pvutils in all other cases, you can check for the existence of pvutil and require, and load pvutils at the top of the JSM file if its not there. 

[10:23:34.0924] <yulia>
that would be the devtools case and would fallback on the devtools loader (pretty fragile though)

[10:23:59.0080] <yulia>
but, you would have to do that for all similar modules

[10:25:18.0231] <dana>
I'm really not a fan of relying on those globals, honestly

[10:25:38.0436] <yulia>
totally fair

[10:25:48.0545] <yulia>
i gotta get offline, its late here

[10:25:57.0549] <yulia>
ill be back in the morning

[10:27:23.0840] <dana>
thank you for your help! have a good night

[10:43:40.0235] <iain>
New v8 blog post about speeding up super access: https://v8.dev/blog/fast-super

[10:44:30.0648] <iain>
Similarly to their argument rectification post a few days ago, it seems like this might be an area where they're playing catch up with stuff we've already got?

[10:51:13.0067] <tcampbell>
jorendorff: I have some questions about debugging and default class constructors

[10:51:27.0463] <jorendorff>
ok, shoot!

[10:51:55.0448] <jorendorff>
It seems best for default class constructors not to appear in the debugger at all

[10:52:05.0586] <jorendorff>
which was the status quo, right?

[10:52:24.0643] <tcampbell>
I.. think so?

[10:52:36.0411] <tcampbell>
What I'm trying now is to hide the frame but not the class

[10:52:45.0174] <tcampbell>
I *think* that is what happened before

[10:53:21.0098] <jorendorff>
do you mean: hide the frame from stacks, but allow breakpoints on the constructor anyway?

[10:53:32.0516] <tcampbell>
so now when I do:
```js
class C { constructor() { debugger; } }
class D extends C { }
new D
```
I have the stack frame hidden in debugger

[10:53:38.0557] <jorendorff>
i don't know what "but not the class" means

[10:53:54.0779] <tcampbell>
If I s/debugger/throw/, then I get an exception stack that does show both C and D

[10:54:14.0294] <tcampbell>
I'm not sure if it is surprising for my exception stack and my debugger stack to be different?

[10:54:58.0990] <jorendorff>
It's not likely to break anything, though it seems a little better to be consistent

[10:55:41.0896] <jorendorff>
If there is no reasonable line number, I think users have no use for it

[10:56:01.0186] <tcampbell>
For exceptions, it seems useful to have?

[11:00:12.0306] <tcampbell>
Right now in m-c, there the debugger has the same frame for "D" but it also shows an `args` binding that is mutable... :|

[11:01:00.0306] <jorendorff>
Right, I saw that bug

[11:01:21.0006] <jorendorff>
No, I honestly don't think this is valuable for most developers, having D in the stack trace

[11:01:48.0039] <jorendorff>
because if you go to look for the source code, you won't find any, and that's puzzling which is counterproductive

[11:02:23.0951] <jorendorff>
It does tell you the class hierarchy; but you can see that anyway

[11:03:54.0748] <tcampbell>
chrome shows D in the stack

[11:04:02.0895] <tcampbell>
 * chrome shows D in the error stack

[11:04:04.0926] <jorendorff>
haha, i was just checking htat

[11:04:09.0610] <jorendorff>
 * haha, i was just checking that

[11:04:12.0946] <jorendorff>
ok, fine

[11:04:34.0829] <jorendorff>
But, what's the question?

[11:05:30.0815] <tcampbell>
uh.. I guess question was is it okay to hide "D" from the debugger (but leave in error stack)

[11:06:08.0187] <tcampbell>
q2: is there a better option?

[11:06:23.0755] <tcampbell>
the "args" does not appear in chrome

[11:06:55.0656] <tcampbell>
the `.args` approach that anba tried just crashed devtools, but maybe that should be fixed?

[11:07:48.0050] <jorendorff>
oh, `.args` is what I was going to suggest

[11:08:01.0803] <jorendorff>
https://searchfox.org/mozilla-central/source/js/src/debugger/Environment.cpp#532 seems like it shouldn't show up in the UI at least

[11:08:34.0104] <tcampbell>
yeah, maybe I should figure what we missed

[11:08:54.0013] <tcampbell>
might be something silly because it is an argument

[11:09:06.0585] <jorendorff>
oh

[11:10:40.0482] <tcampbell>
thanks. I'll see if fixing that is the better option

[11:11:50.0631] <jorendorff>
tcampbell: possibly this needs the same treatment https://searchfox.org/mozilla-central/source/js/src/debugger/Debugger.cpp#177

[11:12:19.0708] <tcampbell>
ooh, probably 

[11:22:23.0343] <tcampbell>
jorendorff: so your suggestion worked, but I think we have another bug with missing parameter names..

[11:22:51.0884] <tcampbell>
`function foo([a,b]) { debugger }; foo([1,2])`

[11:23:06.0904] <tcampbell>
 * `function foo([a,b]) { debugger }; foo([1,2])` will show something labelled as "undefined"

[11:30:21.0620] <tcampbell>
apparently the [docs](https://firefox-source-docs.mozilla.org/js/Debugger/Debugger.Script.html#parameternames) are already correct here and I even reviewed them.. I probably am supposed to know this

[11:45:54.0659] <tcampbell>
On the surface, the simple fix of devtools seems like we get to a reasonable place


2021-02-19
[17:46:32.0212] <jorendorff>
that's a relief.

[17:46:51.0813] <jorendorff>
yeah, at one point it was "specified" that we were going to expose the destructuring arguments to the debugger, but uh

[17:47:04.0496] <jorendorff>
did not seem like a great use of time once we got down to writing code

[17:48:48.0380] <jorendorff>
sdetar: I was thinking today about the crash reports we occasionally get that are unactionable and how we don't know if it's bad DRAM, solar flares, a bug in our code, a gc hazard...

[17:49:21.0494] <jorendorff>
sdetar: and it just occurred to me, it would be funny if crash dumps contained the price of the machine where they occurred

[17:49:27.0656] <jorendorff>
slightly privacy-violating

[17:50:18.0932] <jorendorff>
but it would be so helpful to know a random FoldConstants crash happened on a $125 refurb chromebooik

[17:50:21.0170] <jorendorff>
 * but it would be so helpful to know a random FoldConstants crash happened on a $125 refurb chromebook

[02:30:11.0430] <l11d>
I'm currently profiling spidermonkey with a valgrind-style heap-tracer. one of the issues I ran into is LifoAlloc, as the tracer is unware of the allocation/free functions. manually adding tracing support for LifoAlloc is not an issue. are there any other instances of custom memory allocators used in firefox, particularly spidermonkey?

[03:00:20.0881] <jonco>
l11d: there's GC allocation

[03:01:13.0396] <jonco>
l11d: you may be able to add instrumentation in the functions defined in gc/GCProbes.h

[03:07:26.0280] <l11d>
I'll look into that, thanks

[07:20:24.0204] <jorendorff>
...Come to think of it, maybe we do have information about what kind of RAM is in the machine... or at least how many cores it has ...which correlate with what I really want to know, which is "is this *really* a bitflip"

[07:22:51.0371] <tcampbell>
I often lookup CPU model numbers to find manufacture date..

[07:52:20.0156] <jorendorff>
tcampbell: on this line of code: https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.cpp#3279

[07:53:41.0292] <tcampbell>
The source of that flag is symbol:_ZN2js8frontend11FunctionBox21setMemberInitializersENS_18MemberInitializersE

[07:53:49.0985] <tcampbell>
 * The source of that flag is https://searchfox.org/mozilla-central/search?q=symbol:_ZN2js8frontend11FunctionBox21setMemberInitializersENS_18MemberInitializersE&redirect=false

[07:54:24.0206] <jorendorff>
tcampbell: mmmm, this is what I'm asking -- that can't be the only source.

[07:54:53.0456] <jorendorff>
because

[07:55:05.0938] <jorendorff>
that method also sets the MemberInitializers, which would make this redundant

[07:55:09.0910] <jorendorff>
it must be that the flag is copied to this nested standalone lazy function that we're now compiling

[07:55:11.0905] <jorendorff>
from its parent

[07:55:15.0991] <jorendorff>
without also copying the MemberInitializers

[07:55:27.0125] <tcampbell>
https://searchfox.org/mozilla-central/source/js/src/frontend/SharedContext.cpp#144

[07:55:51.0368] <jorendorff>
That's the one. thanks

[07:56:16.0577] <tcampbell>
yeah, sorry that is super easy to lose in searchfox and is a critical part of delazification

[07:57:07.0466] <tcampbell>
immutableFlags are computed in initial parse and are actually immutable through execution and delazification

[08:12:45.0685] <jorendorff>
It's easy to lose because flags are an integer in one place and a bit in the next. Maybe if the flag type were a struct with a bunch of bitfields instead... it would still be copied and serialized as a single n-bit unit though :-\

[08:13:08.0293] <jorendorff>
it is weird, but feels like progress, to even be thinking about coding for searchfoxability

[08:14:03.0800] <jorendorff>
The macros didn't help searchfox help me

[08:19:17.0748] <dana>
yulia: I have some follow-up questions from what we talked about yesterday if you're around

[08:22:01.0348] <jorendorff>
tcampbell: If a type isn't mentioned in StencilXdr, can I assume it isn't serialized/deserialized in the bytecode cache? Specifically, MemberInitializers

[08:22:34.0038] <jorendorff>
some types are serialized in a big slab, but I didn't think MemberInitializers was one of them

[08:22:45.0756] <iain>
dana: Yulia is currently streaming live on Twitch

[08:22:50.0816] <iain>
https://www.twitch.tv/codehag

[08:24:33.0463] <dana>
ah - thanks!

[08:39:41.0695] <tcampbell>
jorendorff: https://searchfox.org/mozilla-central/source/js/src/frontend/Stencil.h#878

[09:43:06.0460] <yulia>
dana: im back but brain dead

[09:43:11.0073] <yulia>
is it ok if we look on monday?

[09:55:16.0439] <nbp>
tcampbell: Apparently we have a non-halting thread on Android: https://treeherder.mozilla.org/logviewer?job_id=330541272&repo=try&lineNumber=5244 (timeout reports pthread_join being on the stack)

[09:56:27.0509] <nbp>
The stack is printed with a modification I made to the JS shell, so this is not the timeout command, and rr did not reported any races while spawning it 20000 times with the chaos mode.

[09:57:08.0867] <nbp>
So, for reasons that I cna't explain the race was not present before the modification, but is reported now.

[09:57:24.0922] <nbp>
 * So, for reasons that I cna't explain the `pthread_join` hang was not present before the modification, but is reported now.

[10:01:54.0661] <dana>
yulia: works for me - talk to you then!

[11:28:58.0983] <nika>
tcampbell: I've been occasionally seeing what seems like spurious oom exceptions coming from spidermonkey in crashes etc. I'm curious if you have any insight into what might be causing them?

[11:34:55.0527] <tcampbell>
nika: we do currently have a 4GB GC heap limit I think. There are also "uncacheable" OOMs when they happen during a critical step

[11:35:06.0352] <tcampbell>
 * nika: we do currently have a 4GB GC heap limit I think. There are also "uncatchable" OOMs when they happen during a critical step

[11:35:17.0934] <nika>
"uncatchable" OOMs?

[11:35:30.0237] <tcampbell>
Those uncatachable OOMs can be actionable if we see them a lot.

[11:35:45.0294] <nika>
I didn't realize the GC heap was limited to 4GB - is that per-realm or global?

[11:35:53.0009] <tcampbell>
process I think

[11:36:00.0649] <nika>
woah

[11:36:13.0651] <tcampbell>
I don't remember what it includes

[11:36:41.0305] <tcampbell>
GC things point to C++ allocations which would not be part of the limit

[11:36:58.0161] <nika>
so that could potentially explain how I'm seeing OOMs from allocating e.g. small JS reflectors?

[11:37:05.0293] <nika>
if the process is near the 4GB limit

[11:39:02.0929] <tcampbell>
yes

[11:39:13.0151] <tcampbell>
do you have an example?

[11:41:16.0310] <nika>
A while back we were running into issues where deserializing structured clone data in JSWindowActors was failing, and we noticed they were very small types (https://bugzilla.mozilla.org/show_bug.cgi?id=1563825)

[11:41:26.0237] <nika>
and I recently got cc-ed on https://bugzilla.mozilla.org/show_bug.cgi?id=1645865

[11:42:42.0377] <nika>
the first one theoretically could be something other than ooms (though based on the messages it's apparently related to, it seems unlikely that e.g. a`{foo: false}` would fail to deserialize any other way), and the second one I think should only be able to fail if there was an oom

[11:42:50.0049] <nika>
because it's just minting wrappers around native types

[11:44:12.0632] <nika>
I don't suppose we record GC heap usage somewhere which is visible to a crash report?

[11:46:43.0544] <mccr8>
crash reports can include memory reports

[11:46:46.0176] <tcampbell>
here is a concrete example of the uncatchable OOM case. This wouldn't return to caller though https://searchfox.org/mozilla-central/rev/281009d3b7e1e1496b9524d5478ff4f0b7369573/js/src/gc/Nursery.cpp#704-712

[11:47:06.0856] <nika>
mmm, so probably not what we're seeing

[11:47:25.0126] <mccr8>
but the memory report aren't always there for some reason, and we only record them periodically, so it memory spikes up and we crash there's no record of it.

[11:51:12.0116] <tcampbell>
nika: did you look at the pernosco trace for the second one? I just hit the button to refresh it

[11:57:19.0351] <nika>
oh, I somehow missed that that existed oops 

[11:57:25.0887] <nika>
so no :p

[11:57:40.0759] <tcampbell>
sfink: A victim is you! Can you take a quick look at the pernosco trace in an hour or so when it loads and see if the nullptr came from spidermonkey and where?

[11:57:53.0084] <tcampbell>
Bug 1645865

[11:57:55.0834] <botzilla>
https://bugzil.la/1645865 — NEW (nobody) — MOZ_CRASH("Unhandlable OOM while clearing document dependent slots.") [@ nsGlobalWindowInner::InitDocumentDependentState]

[11:58:11.0611] <tcampbell>
I'm suspicous that it is OOM and not some other exception

[11:58:24.0982] <nika>
definitely

[11:58:30.0527] <nika>
that's my suspicion too

[11:58:44.0737] <nika>
but I couldn't figure out what it owuld be

[11:59:20.0551] <tcampbell>
some wrapper security check? dunno

[12:01:25.0920] <nika>
random other question: I'm guessing at least some of the reason why crash reports don't include native JS stacks is because keeping track of that information in a way which would be safe to read from the memory dumper is probably difficult

[12:01:35.0739] <nika>
or expensive

[12:01:47.0272] <nika>
 * random other question: I'm guessing at least some of the reason why crash reports don't include native JS stacks is because keeping track of that information in a way which would be safe to read from the minidump generator is probably difficult

[12:03:04.0968] <tcampbell>
probably privacy too

[12:03:19.0303] <nika>
Well, we wouldn't include arbitrary frames - just system-privileged ones

[12:03:20.0754] <tcampbell>
but yes, js-stacks need a lot of metadata to traverse

[12:03:39.0490] <nika>
I mean, at dumping time we have the entire process' address space

[12:04:01.0839] <nika>
so theoretically I think we should have the metadata available?

[12:04:04.0460] <tcampbell>
a crashing process isn't known for its data-structure integrity..

[12:04:17.0655] <tcampbell>
It is something that could be explored, yeah

[12:04:22.0134] <nika>
This is true, we'd have to make it resillient to corruption

[12:04:39.0669] <nika>
like, if it's a memory corruption crash, we obviously don't want to start walking through the JS heap

[12:05:26.0971] <nika>
It'd be super useful even if we only even try to collect them after seeing a null-deref/MOZ_CRASH

[12:21:04.0587] <sfink>
Oops sorry I didn't label myself as pto. Out hiking right now. Gone forthe day


2021-02-20
[16:20:28.0015] <jimb>
jonco: Hi! I'm looking at https://phabricator.services.mozilla.com/D105789

[16:20:51.0434] <jimb>
Just to make sure I'm understanding what's weak and what it is not:

[16:21:44.0679] <jimb>
The edge from a JSScript to its DebugScript is still strong, right? We're just using weak maps according to the standard "annotation" pattern, right?

[16:46:05.0397] <nika>
tcampbell: I decided to take a look at the pernosco trace - that error in particular is not an OOM, it's actually coming from https://searchfox.org/mozilla-central/rev/281009d3b7e1e1496b9524d5478ff4f0b7369573/js/src/vm/JSContext-inl.h#279-281

[16:46:22.0157] <tcampbell>
derp

[16:46:40.0322] <nika>
which is calling `ReportOverRecursed`

[16:46:54.0479] <tcampbell>
so at the stack limit I guess?

[16:47:16.0467] <nika>
yeah, there's at least 1 nested event loop going on

[16:47:21.0636] <nika>
probably more

[16:47:32.0827] <tcampbell>
yikes

[16:47:34.0034] <nika>
(`p DumpJSStack()` caused pernosco's gdb terminal to hang)

[16:48:32.0134] <tcampbell>
do nested event loops have any of their own over-recursion checks outside of spidermonkey?

[16:48:47.0842] <tcampbell>
or would they just hard-crash in C++ somewhere

[16:50:21.0278] <nika>
We do track it, I'm not sure if we check it

[16:50:45.0410] <nika>
e.g. https://searchfox.org/mozilla-central/rev/281009d3b7e1e1496b9524d5478ff4f0b7369573/xpcom/threads/nsThread.cpp#1054

[16:51:11.0266] <nika>
I'm not actually sure if there is more than one though - doesn't seem obvious there would be based on the poc - I should perhaps poke around in pernosco more

[16:53:28.0488] <nika>
hmm

[16:56:09.0166] <nika>
oh, I didn't realize that overrecursion checks use the native stack, that makes sense. Perhaps we have some unnecessarially large stack frames

[01:49:29.0383] <jonco>
jimb: Yes that's right.  The DebugScript is kept alive as long as the JSScript is alive.

[08:16:05.0359] <Caspy7>
dunno if this is of interest, but saw it and thought it might be https://www.reddit.com/r/rust/comments/lo0hii/starlight_js_engine_focused_on_performance_in_rust/

[15:57:33.0694] <timvde>
caspy7: if that's mostly a single dev, I somehow doubt that he will reach SM/V8/JSC performance

[15:58:16.0054] <timvde>
TODO: JIT compiler, hmm :)

[15:59:52.0074] <timvde>
But an interesting project nevertheless!


2021-02-21
[16:10:39.0995] <Caspy7>
timvde: indeed. I sorta skimmed the description and think it was high up or top of the sub and have a certain amount of respect for r/Rust users so figured I'd share it here. Though I did read comments immediately had me thinking, "oh, this is an egg"

[17:26:21.0197] <slimshader>
Hey arai , thanks for all the support

[17:27:15.0417] <slimshader>
So i assume what im looking to do would be realted to code in js/src/vm ?

[17:27:23.0000] <slimshader>
or just js/src

[17:28:02.0637] <arai>
yes

[17:29:06.0345] <arai>
then, SpiderMonkey's code is a bit separated from remaining Gecko code, and Gecko's logging system isn't available there

[17:29:27.0696] <arai>
so you'll need to use something different (maybe just printf)

[17:29:48.0788] <arai>
anyway, you want to hook property access of an object, right?

[17:30:09.0298] <slimshader>
Okok i was able to use the logging system in a class inside js/src/vm

[17:30:17.0032] <slimshader>
i guess i was able beaucse its part of vm ?

[17:30:37.0028] <slimshader>
Yea im trying to hook the access of a int in a array of ints

[17:30:59.0560] <slimshader>
GetArrayElement i assume, just found it in Array.cpp in js/src/bultin

[17:31:07.0760] <arai>
vm means JavaScript VM (interpreter, object, scope, etc)

[17:31:31.0741] <slimshader>
Ok and src is like V8 ?

[17:31:42.0482] <slimshader>
Sorry im new to all of this, only played a bit with chrome source

[17:31:50.0557] <arai>
I'm not sure about V8's directory structure

[17:32:21.0179] <slimshader>
Okok, i will try some stuff. Thanks for answering me and showing me the right rooms :)

[17:32:35.0977] <slimshader>
 * Okok, i will try some stuff. Thanks for answering my questions and showing me the right rooms :)

[17:32:57.0559] <arai>
then, the function to hook into depends on in what level you want to hook

[17:35:01.0085] <arai>
array in JavaScript is `js::ArrayObject` in C++

[17:36:08.0171] <arai>
and `array[index]` access is done by `JSOp::GetElem` opcode,  https://searchfox.org/mozilla-central/rev/5ed61e3b12dae63e9a684f155028a72672cc5587/js/src/vm/Interpreter.cpp#3040-3058

[17:37:26.0924] <slimshader>
Thanks aloott

[17:38:27.0911] <arai>
then, the opcode calls this https://searchfox.org/mozilla-central/rev/5ed61e3b12dae63e9a684f155028a72672cc5587/js/src/vm/Interpreter-inl.h#411

[17:38:51.0214] <slimshader>
Ok will look into both

[17:38:57.0280] <arai>
there, some kind of optimization is done to quickly access the element

[17:40:22.0680] <slimshader>
Yea i can see that, will play around and test some stuff :)

[17:42:39.0184] <arai>
then, once the code becomes hot (executed several times), the code will be JIT compiled, and the element access will be performed in different place, possibly in generated code

[17:44:26.0618] <arai>
so, if your purpose is some experiment that doesn't require performance, you could disable JIT, so that all array element access can be caught by the above Interpreter.cpp code

[17:45:26.0196] <slimshader>
Ok thanks for the tip

[17:47:32.0815] <slimshader>
CASE(GetElem)

[17:47:43.0845] <slimshader>
seem to trigger lots of log when i log there

[17:48:35.0868] <arai>
yeah, it's used by all `a[b]` expression

[17:48:37.0700] <slimshader>
btw i just discoverd https://searchfox.org/ and its amazing

[17:49:08.0232] <slimshader>
What is REGS ?

[17:49:21.0189] <slimshader>
it reference like 600 time in Interpreter.cpp

[17:49:25.0121] <arai>
https://searchfox.org/mozilla-central/rev/5ed61e3b12dae63e9a684f155028a72672cc5587/js/src/vm/Interpreter.cpp#1266

[17:49:53.0025] <arai>
(the interpreter is full of macros :P

[17:50:47.0318] <arai>
it's basically current frame's information (stack pointer, instruction pointer)

[17:50:56.0668] <arai>
https://searchfox.org/mozilla-central/rev/5ed61e3b12dae63e9a684f155028a72672cc5587/js/src/vm/Stack.h#740

[17:51:04.0267] <slimshader>
Okok, wow i have alot to learn

[17:51:05.0008] <slimshader>
hehe


2021-02-22
[21:37:04.0899] <zbraniecki>
Hi SpiderMonkey Community, I'd appreciate help in finding the right place to install a telemetry probe for when `omni.ja` JS script is broken in result of interrupted load - https://bugzilla.mozilla.org/show_bug.cgi?id=1694067

[21:46:16.0712] <arai>
zbraniecki: I think you can add a probe around `frontend::CompileGlobalScript`, or `parser->globalBody` call inside it

[21:46:28.0582] <arai>
https://searchfox.org/mozilla-central/rev/7bb1cc6abf6634b2a20f71935e1e519e73402b63/js/src/frontend/BytecodeCompiler.cpp#625

[21:48:43.0611] <arai>
if `pn` is `nullptr` and `stencil.source.filename()` is jar file URL, it would be interrupted load

[21:50:58.0229] <arai>
`pn` can be `nullptr` only when there's syntax-related error

[21:53:51.0806] <arai>
the function is for global script and eval script (`sc->isEvalContext()` case),  so, the error around top-level script can be caught on global script case

[21:54:32.0646] <arai>
if omni.ja contains ES module, it can be caught here https://searchfox.org/mozilla-central/rev/7bb1cc6abf6634b2a20f71935e1e519e73402b63/js/src/frontend/BytecodeCompiler.cpp#694

[22:06:03.0925] <arai>
commented to the bug as well

[04:32:56.0007] <tcampbell>
commented on bug, but there is a nightly error interceptor which is very similar, but may just need a few more edge cases added

[06:27:23.0691] <zbraniecki>
tcampbell: is the interceptor used for any telemetry?

[06:29:55.0748] <tcampbell>
Bug 1409852 aspired to do telemetry. Reading it now to figure out if it actually did or not

[06:29:57.0119] <botzilla>
https://bugzil.la/1409852 — RESOLVED (Yoric) — Expose a hook to be informed upon any chrome JS errors on the main thread

[06:34:20.0182] <tcampbell>
zbraniecki: Looks like it was never hooked up to telemetry but there is a `ChromeUtils.recentJSDevError`

[06:36:14.0800] <zbraniecki>
Ok. I'm going to follow Arai's route for hooking up telemetry because I'm not sure how the interception is meant to work fully and am worried that some of its behavior may affect the probe. 

[06:36:39.0667] <zbraniecki>
Once we have it, we can refactor to move the probe to intercept and see if it impacts results in unexpected way

[06:46:17.0688] <yulia>
How do i run jsreftest?

[06:46:48.0055] <yulia>
I am trying with jstestbrowser but it looks like that isn't maintained? I get an error that the command is followed by something it can't recognize (marionette)

[06:52:42.0454] <Ms2ger>
That should work (though I haven't tried it in a long time). What's the error?

[06:53:20.0431] <yulia>
running ./mach jstestbrowser ends up with "command followed by junk: --marionette"

[06:53:34.0609] <yulia>
and its because the shell is treating the flags as flags sent to the shell

[06:53:48.0815] <Ms2ger>
?!

[06:53:50.0543] <yulia>
here it is

[06:54:02.0485] <yulia>
```
REFTEST INFO | Application command: /Users/yuliastartsev/Work/mozilla-central/objdir-frontend-js/dist/bin/js -marionette -foreground -profile /var/folders/0f/7y79c7jj18q1533mkb73wn7m0000gn/T/tmp5ywv98s4.mozrunner
Error: Short option followed by junk: -marionette
```

[06:54:20.0753] <mgaudet>
yulia: You're running with a shell mozconfig

[06:54:27.0541] <mgaudet>
I suspect

[06:54:27.0828] <arai>
I guess you haven't built browser?

[06:54:32.0437] <yulia>
right, im also a bit lost about what it wants

[06:54:38.0371] <Ms2ger>
Ah, that seems plausible

[06:54:42.0158] <yulia>
it said that i cant run it without --enable-js-shell

[06:54:53.0567] <yulia>
i guess, i got confused and thought that it meant that i needed to run it with the js shell application

[06:55:01.0837] <yulia>
(i also added the flag

[06:55:06.0759] <yulia>
 * (i also added the flag)

[06:55:14.0406] <yulia>
let me try with the browser build of it

[06:55:36.0275] <mgaudet>
I suspect if you have a browser build mozconfig it'll work as expected 

[06:55:51.0948] <yulia>
ok, let me try -- i think i just got confused by the options it wanted me to use

[06:56:15.0895] <yulia>
haven't run these locally before

[06:58:42.0246] <sfink>
which do you want? The jstests run in the browser, or are you ok with the jstests running in the shell?

[06:58:48.0085] <sfink>
`mach jstests` will do the latter

[06:58:57.0148] <yulia>
eh, i have a failure that only happens in the reftests

[06:59:19.0236] <yulia>
jstests and jits pass just fine

[06:59:23.0845] <yulia>
first time i have that

[06:59:59.0356] <sfink>
ah, ok, then it sounds like you do need to run in the browser

[07:00:01.0788] <sfink>
carry on

[07:05:24.0182] <yulia>
yey that was it, it works

[07:15:48.0243] <sfink>
jonco: I'm 2 days early with my stupid question, but: I'm looking at your `WeakMap` simplifications, and I'm trying to understand why I thought all the unbarriered goop was needed and why it isn't. In particular, it seems like I'm guarding against a key type of `Heap<T>`, which would have a read barrier.

[07:16:11.0165] <sfink>
but when I look at the instantiated types, I only see `HeapPtr<T>`, which is fine.

[07:16:30.0831] <sfink>
Did we change that at some point, or have I always been smoking whatever it is that I'm smoking?

[07:16:56.0352] <sfink>
let me take another drag of it to clear my head...

[07:18:04.0459] <arai>
tcampbell: I wasn't aware of interceptor.  it sounds like it can catch parser error as well

[07:18:29.0183] <jonco>
sfink: We should only use HeapPtr inside the engine, and WeakMap is internal so there shouldn't be any use of it with Heap<T>.  Maybe there used to be and it got removed.

[07:19:07.0373] <sfink>
ok, good enough. I wonder if anything would assert if someone tried.

[07:19:27.0005] <jonco>
I'm pretty sure nothing would assert :(

[07:19:51.0815] <jonco>
Also, nothing related to WeakMaps is a stupid question :)

[07:19:55.0657] <sfink>
well, the assert might be in the innard of the weakmap marking stuff, where a color changed unexpectedly. But that wouldn't be a very friendly assert.

[07:20:33.0309] <sfink>
is something like `template <typename T> class WeakMap<Heap<T>, ...> = delete` is valid syntax, I wonder

[07:20:42.0627] <sfink>
 * is something like `template <typename T> class WeakMap<Heap<T>, ...> = delete` valid syntax, I wonder

[07:21:09.0830] <sfink>
well, it's mostly that I wouldn't have gone through the unbarriered contortions unless something blew up in my face

[07:21:25.0748] <jonco>
Ah, right

[07:25:08.0923] <sfink>
ok, it's not too bad. If you try to instantiate a `Heap<T>` key, it gives: `error: no type named 'Type' in 'js::detail::RemoveBarrier<JS::Heap<JSObject *>>'
   using UnbarrieredKey = typename detail::RemoveBarrier<Key>::Type;`

[07:31:12.0665] <sfink>
I can add a specialization for `Heap<T>` to a class containing only a `static_assert` and make it produce `error: static_assert failed "Do not instantiate with Heap"`

[07:31:45.0280] <sfink>
not all that general, I guess

[07:40:21.0020] <yulia>
ok, great new question about jsbrowsertests

[07:40:25.0120] <yulia>
how does the --filter option work?

[07:40:39.0050] <yulia>
I have been trying to use it to narrow down the list of tests that it runs, but so far no luck

[07:40:52.0968] <yulia>
I tried forms of test262/some/path

[07:41:10.0788] <yulia>
as well as the urls found in the try

[07:41:34.0326] <yulia>
and a couple of versions of rejex

[07:41:38.0612] <yulia>
 * and a couple of versions of regex

[07:42:08.0612] <yulia>
I want to run two tests:

[07:42:25.0603] <yulia>
js/src/tests/test262/language/module-code/verify-dfs.js and js/src/tests/non262/module/bug1689499.js

[07:42:35.0063] <sfink>
ugh, I feel like I fought through that at some point, but I'm not finding it in my notes

[07:43:06.0060] <yulia>
ill write it down and put a patch up

[07:43:23.0105] <yulia>
once i discover the secret sauce to making this do what i want, at any rate

[07:43:59.0030] <Ms2ger>
I'd try with the .html paths next, or the directory

[07:44:13.0804] <yulia>
from the project root?

[07:44:24.0112] <yulia>
or test root?

[07:44:38.0876] <Ms2ger>
Good question. I dunno :)

[07:44:44.0997] <yulia>
i will try it all!

[07:44:57.0852] <Ms2ger>
If I had a build, I'd try

[07:45:11.0659] <jonco>
sfink: I considered making WeakMap add the HeapPtr wrappers itself as I don't think it's used without them.  It makes it a bit different to GCHashMap though which requires the users adds these wrappers.

[07:46:14.0095] <sfink>
currently, it *is* used without them

[07:47:36.0314] <sfink>
I'm looking for it (it's a Debugger thing)

[07:48:10.0200] <sfink>
hm, though maybe I should look closer. There's `js::DebuggerWeakMap<JSObject, js::DebuggerObject>`

[07:48:32.0084] <sfink>
ah! and that adds the `HeapPtr` automatically.

[07:49:31.0185] <sfink>
so I'm wrong, it looks like it's always there

[07:49:54.0965] <sfink>
hm, then maybe it's worth adding a `static_assert`, at least

[07:51:47.0100] <sfink>
yulia: https://bugzilla.mozilla.org/show_bug.cgi?id=1391853

[07:52:16.0417] <yulia>
oh no..

[07:52:51.0313] <sfink>
sorry. I fixed a couple of problems when I ran into this before, but it looks like more remain.

[07:53:24.0484] <sfink>
`"...I'll leave this alone until I look into what's actually happening, assuming I ever do."`

[07:56:02.0915] <yulia>
I think i will make myself some coffee

[08:06:07.0520] <mgaudet>
Oh!

[08:06:11.0202] <mgaudet>
I have a note about this in my notes

[08:06:26.0247] <mgaudet>
yulia: "* supposed to reference tests by the stage-directory name, not by the actual test path name (silly) `/mach jstestbrowser --disable-e10s  --headless obj-x86_64-pc-linux-gnu/dist/test-stage/jsreftest/tests/js/src/tests/non262/PrivateName/not-iterable.js`" 

[08:06:37.0288] <mgaudet>
 * yulia: "supposed to reference tests by the stage-directory name, not by the actual test path name (silly) `./mach jstestbrowser --disable-e10s  --headless obj-x86_64-pc-linux-gnu/dist/test-stage/jsreftest/tests/js/src/tests/non262/PrivateName/not-iterable.js`"

[08:06:58.0709] <Ms2ger>
Can we put that in docs somewhere?

[08:07:09.0246] <Ms2ger>
Or, fix

[08:07:17.0118] <mgaudet>
There's also some commentary attached to this bug https://bugzilla.mozilla.org/show_bug.cgi?id=1642661

[08:11:07.0160] <mgaudet>
 Ms2ger There's this; https://bugzilla.mozilla.org/show_bug.cgi?id=1642709 but I tend to agree this would be better fixed 

[08:12:05.0194] <yulia>
hmm

[08:12:10.0150] <yulia>
i am now getting 

```
REFTEST ERROR | Exactly one of reftest.manifests or reftest.tests must be specified.
REFTEST ERROR | reftest.tests is: null
REFTEST INFO | Slowest test took 0ms (undefined)
REFTEST INFO | Total canvas count = 0

```

[08:12:21.0500] <yulia>
At least it is different

[08:12:57.0198] <yulia>
oh wait

[08:12:59.0116] <yulia>
i have an idea

[08:13:54.0341] <yulia>
huh. ok back to the old error

[08:14:06.0231] <mgaudet>
Hmm. So I saw that exact error in 1642661 linked above

[08:14:23.0037] <mgaudet>
in your browser mozconfig, do you _also_ have `--enable-js-shell` ?

[08:14:28.0291] <yulia>
maybe its because "js/src/tests/non262/module/jstests.list" is empty?

[08:14:43.0547] <mgaudet>
(in theory bc fixed it to error explicitly, but I wonder if it's regressed) 

[08:14:44.0601] <yulia>
lemme double check, i thought i did

[08:14:49.0816] <arai>
so far I found that the filter is passed here https://searchfox.org/mozilla-central/rev/c8ce16e4299a3afd560320d8d094556f2b5504cd/layout/tools/reftest/reftest.jsm#406

[08:14:56.0858] <yulia>
ok, yes, it is there

[08:15:25.0810] <yulia>
This is the output now :

```
REFTEST INFO | Reading manifest file:///Users/yuliastartsev/Work/mozilla-central/objdir-frontend/dist/test-stage/jsreftest/tests/js/src/tests/non262/module/jstests.list
REFTEST SUITE-START | Running 0 tests
REFTEST ERROR | EXCEPTION: No tests to run
REFTEST INFO | Result summary:
REFTEST INFO | Successful: 0 (0 pass, 0 load only)
REFTEST INFO | Unexpected: 1 (0 unexpected fail, 0 unexpected pass, 0 unexpected asserts, 0 failed load, 1 exception)
REFTEST INFO | Known problems: 0 (0 known fail, 0 known asserts, 0 random, 0 skipped, 0 slow)
REFTEST SUITE-END | Shutdown
REFTEST INFO | Slowest test took 0ms (undefined)
REFTEST INFO | Total canvas count = 0

```

[08:15:29.0820] <yulia>
but that file _is_ empty

[08:15:57.0703] <yulia>
though, i thought it was just for failing stuff

[08:16:06.0596] <mgaudet>
and did you see the stage-jstest thing in your output? 

[08:16:31.0936] <yulia>
this one?  0:01.94 /usr/bin/make -j8 -s stage-jstests


[08:16:36.0520] <yulia>
 * this one?  `0:01.94 /usr/bin/make -j8 -s stage-jstests`


[08:16:44.0092] <mgaudet>
yeah; it succeeds I take it

[08:16:49.0961] <yulia>
yep

[08:17:15.0282] <mgaudet>
Alright. Different bug (or at least root cause) than 1642661; what's the exact command line you're running? 

[08:17:21.0740] <mgaudet>
(I can try to run same and see what happens here) 

[08:17:36.0048] <yulia>
right now i am basing it off yours -> `./mach jstestbrowser --disable-e10s --headless objdir-frontend/dist/test-stage/jsreftest/tests/js/src/tests/non262/module/bug1689499.js`

[08:17:37.0779] <mgaudet>
(in a few min; my browser build is busted at the moment) 

[08:17:52.0614] <yulia>
you probably don't have that test though

[08:18:21.0317] <yulia>
we can test off `./mach jstestbrowser --disable-e10s --headless objdir-frontend/dist/test-stage/jsreftest/tests/js/src/tests/non262/module/bug1488117.js` -- let me see what happens on my end

[08:20:04.0255] <yulia>
it would be funny if it worked ngl

[08:20:17.0608] <yulia>
phew, it didn't

[08:21:43.0630] <mgaudet>
and while I wait for this build to actually finish; so we're on the same page: `objdir-frontend/dist/test-stage/jsreftest/tests/js/src/tests/non262/module/bug1488117.js` actually -exists- right? 

[08:22:44.0664] <yulia>
checking and double checking

[08:24:10.0189] <yulia>
yes it does -- just checking with and without the --filter option before the filename

[08:24:38.0911] <yulia>
yep, it exists -- but the filter does not appear to work

[08:25:01.0954] <mgaudet>
Yeah, I have never been able to get --filter to work

[08:25:47.0163] <yulia>
ok, this works

[08:25:57.0510] <yulia>
`./mach jstestbrowser --disable-e10s --headless objdir-frontend/dist/test-stage/jsreftest/tests/js/src/tests/non262/`

[08:26:16.0110] <yulia>
 * `./mach jstestbrowser --headless objdir-frontend/dist/test-stage/jsreftest/tests/js/src/tests/non262/`

[08:26:24.0329] <mgaudet>
(PS: You probably don't need --disable-e10s) 

[08:26:44.0038] <mgaudet>
It's in my notes because I think I needed it at that time

[08:26:59.0558] <yulia>
aha, and this works: `./mach jstestbrowser --headless objdir-frontend/dist/test-stage/jsreftest/tests/js/src/tests/non262/module`

[08:27:03.0139] <yulia>
ok, that is good enough for me

[08:27:16.0611] <yulia>
i can work with this

[08:28:35.0521] <yulia>
it doesn't solve the underlying problem, but if anyone runs into it again before we have time to fix it, i can add this to either bugs or the jstestbrowser documentation?

[08:29:30.0994] <arai>
oh, it wasn't --filter parameter?  surprising

[08:32:46.0545] <arai>
hmmm, I think the `filter` isn't working properly for jsreftest case

[08:33:22.0964] <arai>
it's passed to RegExp constructor here  https://searchfox.org/mozilla-central/rev/c8ce16e4299a3afd560320d8d094556f2b5504cd/layout/tools/reftest/reftest.jsm#406

[08:33:35.0772] <arai>
but `manifests[""]` isn't filter itself, but an array

[08:35:23.0472] <nbp>
Does anybody knows a reason for `pthread_join` to hang? Assuming the thread terminates properly in due time.

[08:35:55.0046] <dana>
yulia: seems like you're in the middle of something else, but when you get a chance, I was hoping we could follow-up on the certDecoder.js module/jsm issue we were talking about last week

[08:36:55.0271] <yulia>
dana: since i am getting to the end of my day, i probably won't finish it, so I am happy to unblock you

[08:37:08.0481] <yulia>
Do you want to jump on a video call?

[08:37:15.0760] <dana>
sure - one sec

[08:37:42.0029] <arai>
okay, it works if I fix the line to `new RegExp(manifests[""][0])`

[08:37:42.0342] <yulia>
mgaudet: i can finally reproduce the issue, I will get back to it tomorrow. thanks for all the help!

[08:37:48.0460] <arai>
 * okay, --filter works if I fix the line to `new RegExp(manifests[""][0])`

[08:37:50.0160] <yulia>
arai: brilliant!

[08:38:31.0676] <mgaudet>
Nice :D Sounds like you've got a patch for a four year old bug there arai ! 

[08:38:42.0213] <yulia>
arai: i will try that tomorrow as well. would be nice to just run the two problem tests..

[08:39:33.0863] <dana>
yulia: ok, I'm ready

[08:51:55.0991] <nbp>
jandem: tcampbell: What do you think about ignoring timeout in our ARM/ARM64 test suite for the moment and landing the changes? Even if we have 4 orange caused by timeout, restarting a few tests would still be a huge time saving for our CI.

[08:53:16.0127] <jandem>
why do the tests timeout? Maybe disable just those tests on that platform? 

[08:53:29.0947] <nbp>
I can't explain why we hang in `pthread_join` yet, I've seen it for worker-threads as well as Helper-threads so far.

[08:53:58.0617] <tcampbell>
Why disable timeout instead of test?

[08:54:03.0330] <tcampbell>
 * Why disable timeout instead of just the test?

[08:54:05.0717] <nbp>
jandem: the timeout also happen in skip test, these timeout appear on random tests.

[08:54:16.0454] <nbp>
 * jandem: the timeout also happen in skip test as well, these timeout appear on random tests.

[08:54:34.0855] <nbp>
These are not always the same tests which are causing timeout.

[08:55:04.0453] <tcampbell>
the outer loop still has a timeout, right?

[08:55:14.0693] <nbp>
the outer loop?

[08:55:14.0751] <tcampbell>
*the host has a timeout, right?

[08:55:25.0180] <tcampbell>
you are just talking about the on-device timeout, right?

[08:55:34.0223] <nbp>
The `timeout` commands sens the signal which kills the process.

[08:56:31.0909] <nbp>
I am talking about the JS shell running on Android ARM/ARM64 opt/dbg which randomly timeout while `pthread_join` hangs.

[08:56:56.0891] <tcampbell>
so you are proposing dropping the timeout wrapper on device?

[08:57:43.0033] <nbp>
I am proposing, to keep the timeout, as oranges, and just get the sheriff to restart the jobs if they are orange.

[08:58:08.0932] <jandem>
It's not tier 1?

[08:58:26.0085] <nbp>
the randomness and the likelyhood of a single `pthread_join` hang is quite low, but enough to get ~4 oranges per 60 jobs.

[08:58:57.0935] <nbp>
indeed, these are all tier2, but ARM64 as well.

[09:00:07.0959] <tcampbell>
so this will turn into an intermittent with the sunday-night nag emails?

[09:00:44.0443] <sfink>
arai: I should have been watching this window. You beat me to it. Your fix looks correct to me; I made it as far as displaying `globalFilter` as the `/myfilter,/` and working out what the comma was there for.

[09:00:49.0115] <nbp>
One thing I could do, is ignore the timeout if `pthread_join` is on the stack, but in such case this would imply to keep the stack walking in the signal handler, but this might not be reliable.

[09:01:06.0663] <sfink>
it comes from https://searchfox.org/mozilla-central/source/layout/tools/reftest/runreftest.py#697

[09:01:20.0904] <jandem>
is it always the same 'join' in our code (up the stack)? 

[09:01:38.0643] <tcampbell>
nbp: can you point to an example try failure?

[09:01:42.0411] <sfink>
it's a rather horrible setup, manifests[""] means special thing #1, manifests[null] means special thing #2, ... why oh why oh why

[09:01:47.0099] <arai>
yeah, it looks like only the python side is modified and JS side is left

[09:01:55.0784] <nbp>
jandem: no, so far I've seen it on the `HelperThread` and on the `WorkerThread` of the JS shell

[09:02:04.0971] <jandem>
curious 

[09:03:01.0897] <tcampbell>
hmm.. weird

[09:06:04.0980] <nbp>
https://treeherder.mozilla.org/jobs?repo=try&collapsedPushes=810961%2C809570%2C808715%2C808674%2C807659%2C807635%2C494637%2C491572%2C490401%2C814298%2C837057%2C837145%2C837040%2C837018%2C836564%2C836545%2C836520%2C836498%2C836418%2C841442%2C837181%2C837161%2C859382%2C859523%2C859437%2C858734%2C858680%2C860923%2C841394&selectedTaskRun=J3IzvzQaSRutsX_IqKDzNQ.0&revision=8b6daf8d8a754e9785f24239c6cbb6a32ad87eef https://treeherder.mozilla.org/jobs?repo=try&collapsedPushes=810961%2C809570%2C808715%2C808674%2C807659%2C807635%2C494637%2C491572%2C490401%2C814298%2C837057%2C837145%2C837040%2C837018%2C836564%2C836545%2C836520%2C836498%2C836418%2C841442%2C837181%2C837161%2C859382%2C859523%2C859437%2C858734%2C858680%2C860923%2C841394&selectedTaskRun=J3IzvzQaSRutsX_IqKDzNQ.0&revision=72f8ada623c44c3b757a5ccdeaf126421e8916f7 (<-- with instrumentation) https://treeherder.mozilla.org/jobs?repo=try&revision=67a66d5ddd6ecc8037f3f746e24a58262acf93e1&selectedTaskRun=O0azHS_jTXiFdFQy-S_UYA.0 (<-- without instrumentation, not all are timeout)

[09:06:59.0147] <tcampbell>
oh right.. these on phone tests not the SM(arm) jobs

[09:07:45.0489] <nbp>
So far the instrumentation changes the exit code of the timeout :/

[09:07:59.0776] <sfink>
nbp: Matrix accepts `[`description`](`link`)` syntax, if you want those to look less messy

[09:08:56.0969] <nbp>
 * [try push 1](https://treeherder.mozilla.org/jobs?repo=try&collapsedPushes=810961%2C809570%2C808715%2C808674%2C807659%2C807635%2C494637%2C491572%2C490401%2C814298%2C837057%2C837145%2C837040%2C837018%2C836564%2C836545%2C836520%2C836498%2C836418%2C841442%2C837181%2C837161%2C859382%2C859523%2C859437%2C858734%2C858680%2C860923%2C841394&selectedTaskRun=J3IzvzQaSRutsX_IqKDzNQ.0&revision=8b6daf8d8a754e9785f24239c6cbb6a32ad87eef ) [try push 2](https://treeherder.mozilla.org/jobs?repo=try&collapsedPushes=810961%2C809570%2C808715%2C808674%2C807659%2C807635%2C494637%2C491572%2C490401%2C814298%2C837057%2C837145%2C837040%2C837018%2C836564%2C836545%2C836520%2C836498%2C836418%2C841442%2C837181%2C837161%2C859382%2C859523%2C859437%2C858734%2C858680%2C860923%2C841394&selectedTaskRun=J3IzvzQaSRutsX_IqKDzNQ.0&revision=72f8ada623c44c3b757a5ccdeaf126421e8916f7) (<-- with instrumentation) [try push 3](https://treeherder.mozilla.org/jobs?repo=try&revision=67a66d5ddd6ecc8037f3f746e24a58262acf93e1&selectedTaskRun=O0azHS_jTXiFdFQy-S_UYA.0) (<-- without instrumentation, not all are timeout)

[09:14:23.0354] <tcampbell>
nbp: are you testing with or with selfhost.xdr here?

[09:14:56.0362] <nbp>
tcampbell: I think so, it might depends on which patch stack I pushed to try

[09:15:04.0290] <nbp>
I did both.

[09:16:00.0338] <nbp>
the latest push to try are not, but I would not submit the patch, as this was only for testing purposes.

[09:16:50.0246] <nbp>
But this should not change anything about the timeout story.

[09:17:24.0020] <nbp>
Tests which are usually running in less than 200ms, which suddently take 150s (before getting killed by the timeout command)

[09:17:27.0592] <tcampbell>
so it seems related to "timeout" wrapper and runner script?

[09:18:26.0208] <nbp>
no, I do not think so, I checked the code, ran it under `rr record -h` (chaos mode), and I was not able to reproduce any issue on x86_64.

[09:18:46.0979] <mgaudet>
(My opinion: Creating this amount of orange creates a lot of externalities, and costs that are human, that may outweigh the machine savings, and so I'd argue this shouldn't land in this state) 

[09:18:53.0811] <nbp>
Also, if this was the timeout command, I would not expect to have any stack reported when the signal is received in the JS shell.

[09:19:38.0027] <nbp>
mgaudet: the machine savings are 1.3125 days down to 0.3125 days.

[09:20:22.0329] <nbp>
For the 60 jobs, in a single push

[09:20:45.0171] <mgaudet>
for sure! I'm not saying it's insignficant; but you're reducing everyone else's confidence in testing some amount, and creating work for sheriffs 

[09:22:00.0533] <nbp>
My point is that restarting the job if almost effortless, and as these are never the same tests which are causing timeout, it is unlikely to be a problem.

[09:22:14.0241] <nbp>
As we would only care if we have frequent oranges.

[09:22:46.0917] <sfink>
is there a way to make it report the failure in a way that triggers taskcluster's auto-retry logic?

[09:23:06.0940] <sfink>
for infrastructure failures 

[09:23:38.0918] <nbp>
Otherwise, I can push the stack walking code, and we can void the test cases where `pthread_join` appears on the stack, but I have a low confidence in this.

[09:23:50.0662] <nbp>
sfink: do we have any mechanism to auto-retry?

[09:24:20.0166] <sfink>
some types of task failures are auto-retried. I think they're colored blue?

[09:24:40.0711] <sfink>
(and I have no idea whether using it for this would be acceptable to CI people)

[09:26:47.0836] <nbp>
(I forwarded the question to #conduit:mozilla.org )

[09:27:51.0796] <sfink>
it might be for #Firefox-CI

[09:29:48.0513] <nbp>
 * (I forwarded the question to #firefox-ci:mozilla.org  )

[09:29:52.0972] <nbp>
 * (I forwarded the question to #firefox-ci:mozilla.org)

[09:33:37.0392] <tcampbell>
I thought auto-retries were about AWS spot-instances being evicted

[09:34:30.0683] <sfink>
I think that's a common cause, but I'm pretty sure I've seen them happen for other reasons as well.

[09:36:06.0934] <tcampbell>
Could you retry the single job in the runner script itself?

[09:38:09.0894] <sfink>
sure. I guess it's a matter of which supposedly temporary hack we feel comfortable with. ;-)

[09:40:34.0685] <nbp>
ok, so making a "hack" to mute these non-reproducible timeout would be good enough?

[09:44:54.0843] <tcampbell>
could we just output a message during shutdown (if there are any workers) and filter in test harness?

[09:46:48.0710] <nbp>
tcampbell: I am not sure Iunderstand your proposal?

[09:46:53.0278] <nbp>
 * tcampbell: I am not sure I understand your proposal?

[09:47:48.0720] <tcampbell>
If I understand correctly, a single test jsshell invocation is killed by "timeout"?

[09:47:55.0342] <nbp>
I guess we could reloop any timeout, and fail if we reproduce it twice, which would reduce the likelyhood of such report.

[09:50:43.0668] <sfink>
sounds good. Maybe have a `--retry-timeouts=N` option.

[09:51:03.0415] <sfink>
especially since it doesn't look like the CI retry will be straightforward, given the `generic-worker` thing.

[10:00:53.0281] <nbp>
tcampbell: I might take the shell functions you suggested, this would be simpler for retstarting failures without doubling the size of the uploaded script.

[10:01:05.0684] <nbp>
 * tcampbell: I might take the shell functions you suggested, this would be simpler for restarting failures without doubling the size of the uploaded script.

[10:05:00.0864] <tcampbell>
great

[11:00:36.0266] <tcampbell>
confession: Unifying various versions of LookupProperty to be consistent (Bug 1694044)

[11:00:38.0235] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[11:00:39.0416] <botzilla>
https://bugzil.la/1694044 — NEW (tcampbell) — Cleanup js::LookupProperty and friends


2021-02-23
[02:31:31.0209] <wingo>
jandem: i asked around and i think for the spidermonkey newsletter it's just asumu & ioanna's work, and that's in.  cheers

[02:39:01.0217] <jandem>
wingo: perfect, thanks for checking! 

[08:56:32.0857] <slimshader>
Hi everyone, im quite new to playing with firefox source code and i have been trying to hook and log certain stuff and its been tricky hehe

[08:56:49.0013] <slimshader>
Im trying to hook all the get and sets to signed arrays and regular array

[08:57:55.0088] <slimshader>
Im into the interpreter.cc class in js/vm and im trying stuff with the SetElem swtich case 

[08:58:43.0167] <slimshader>
But it seems to log A LOT of setelem (probably some backend stuff of the js engine ??) Would there be a way to only log what is set from the JavaScript executed on the page.

[08:58:51.0496] <slimshader>
Thanks alot 🙂

[09:00:05.0499] <arai>
do you mean filter based on the URL ?

[09:01:09.0989] <slimshader>
Could be a solution, i just feel like A LOT of big ints are being set on arrays of 2 lenght

[09:01:12.0205] <slimshader>
like non stop

[09:01:17.0693] <slimshader>
 * Could be a solution, i just feel like A LOT of big ints are being set on arrays of 2 length

[09:01:40.0206] <slimshader>
 * like non stop, and i wonder if its not some kind of backend function not related to script that are executed client side

[09:02:43.0091] <arai>
inside `Interepret` function, there's `script` variable that represents a script (either top level, or function), and you can get filename of the file that contains the script by `script->scriptSource()->filename()`

[09:03:11.0874] <arai>
so, you can filter based on the string

[09:03:12.0801] <tcampbell>
the browser UI also has a lot of javascript

[09:03:28.0374] <slimshader>
Ok that script name is very clever will have a look, thanks again arai 

[09:03:42.0190] <tcampbell>
It may be useful to look at existing spewer code and add a channel in https://searchfox.org/mozilla-central/source/js/src/jit/JitSpewer.h#25

[09:03:58.0599] <tcampbell>
that has support for using environment variables to filter

[09:04:13.0405] <tcampbell>
and the engine will optimize those filename comparisons for you

[09:05:35.0992] <tcampbell>
https://searchfox.org/mozilla-central/rev/f47a4b67643b3048ef9a2e2ac0c34edf6d1ebff3/js/src/jit/BacktrackingAllocator.cpp#1633-1635 is an example with format strings

[09:06:15.0084] <tcampbell>
(The hope was that this spewer stuff would avoid too much repeated code when people do these sorts of experiments..)

[09:07:55.0740] <tcampbell>
actually, this might be a better example https://searchfox.org/mozilla-central/rev/f47a4b67643b3048ef9a2e2ac0c34edf6d1ebff3/js/src/jit/JitScript.cpp#558-561,564-565

[09:08:10.0740] <slimshader>
Thanks tcampbell will have a look

[09:08:58.0396] <nbp>
https://searchfox.org/mozilla-central/source/js/src/util/StructuredSpewer.h#30-68

[09:46:06.0604] <jonco>
sfink: thanks for the comments, I'm going to think more about this and we can talk about it tomorrow

[09:48:55.0014] <sfink>
jonco: thanks for the patches removing the weakmap insertion barrier, since that clued me in to how I could delete large parts of the weakmap support code and hopefully make it faster too.

[09:49:01.0919] <sfink>
 5 files changed, 67 insertions(+), 191 deletions(-)

[09:49:06.0846] <sfink>
and nothing has exploded yet

[09:50:12.0765] <jorendorff>
nbp: in bug 1668361, does the test harness run a special command to create this shell.xdr file? what command?

[09:50:14.0302] <botzilla>
https://bugzil.la/1668361 — RESOLVED (nbp) — Add support for executing JS shell with self-hosted code loaded from stencil XDR

[09:51:10.0383] <jonco>
sfink: ooh, nice

[09:51:40.0107] <jorendorff>
looks like no

[09:51:41.0376] <nbp>
jorendorff:  yes, it run the shell with command line arguments to encode/decode.

[09:51:45.0362] <jorendorff>
it just uses `encode` for the first test

[09:51:49.0964] <jorendorff>
and `decode` for subsequent tests

[09:51:56.0077] <nbp>
yes

[09:52:22.0147] <jorendorff>
great, makes sense

[09:52:45.0114] <jorendorff>
...wait, the harness does run many tests at once, right? do they race with the first test?

[09:52:50.0335] <jorendorff>
 * nbp: ...wait, the harness does run many tests at once, right? do they race with the first test?

[09:53:15.0525] <nbp>
No, they do not, I modified the harness to execute the encoding test case before all others.

[09:53:26.0939] <jorendorff>
ok

[09:53:28.0409] <sfink>
huh. The only jit-test with "weak" in the name that fails is the one you just added.

[09:53:37.0626] <nbp>
then the decoding test case are run concurrently

[09:55:07.0029] <sfink>
does that work ok if you run a whole separate command concurrently? I'm asking because I *just* did this; I had a full `mach jit-test` running, then got impatient and ran `mach jit-test weak` in a separate terminal.

[09:56:51.0193] <nbp>
sfink: yes, it creates a temporary file (with random letters in it) for each harness instance

[09:56:59.0865] <sfink>
great, thanks!

[09:57:57.0862] <nbp>
 * sfink: yes, it creates a temporary <del>file</del> directory (with random letters in it) for each harness instance


2021-02-24
[16:15:10.0298] <Caspy7>
https://www.reddit.com/r/firefox/comments/lqp8pt/ff_86_speedometer/

[16:46:50.0904] <sfink>
this is so weird. emacs was failing to word-wrap a code comment, so I ran `mach clang-format`, and it rewrapped it but badly.

[16:46:59.0592] <sfink>
there's really nothing special that I can see about the comment

[16:47:51.0838] <sfink>
well, emacs is happy to fix up `clang-format`'s version, and then `clang-format` leaves it alone. Tools are tricky.

[16:51:07.0992] <sfink>
confession: shifted the core data structure in the weakmap marking code. FInal score: 9 files changed, 196 insertions(+), 306 deletions(-). Will hopefully magically fix the incremental mode. (It removes the code I was suspicious of, at least.)

[16:51:09.0780] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[03:35:29.0157] <nbp>
confession: reviewing `InvertCondition` usage … nothing standing out, this function should probably be renamed `SwapDestinations`, to not be confused with cases where we want to `SwapOperands`.

[09:06:19.0152] <tcampbell>
that was fun

[09:22:14.0345] <jorendorff>
sfink: The chapter I mentioned is 6 pages long, of which 4 pages are in google books. I think the title turns out to have only the most oblique, tenuous connection to the content

[09:22:33.0667] <jorendorff>
https://www.google.com/books/edition/Scientific_Approaches_to_Consciousness/QehHAwAAQBAJ?hl=en&gbpv=1&dq=between+a+duck&pg=PA445&printsec=frontcover

[09:24:12.0617] <jorendorff>
OK, this is better: https://scholar.smu.edu/cgi/viewcontent.cgi?article=1001&context=art_etds

[09:24:59.0845] <jorendorff>
> Q: What is the difference between a duck?
> A: One of its legs is both the same.
>
> The question “What is the difference between a duck?” is a finished joke in that the joke is unfinished. [...]
>
> You can only “get it” when you realize there is nothing to “get” in the first place.

[09:25:24.0361] <jorendorff>
 * > Q: What is the difference between a duck?
> A: One of its legs is both the same.
> The question “What is the difference between a duck?” is a finished joke in that the joke is unfinished. [...]
> You can only “get it” when you realize there is nothing to “get” in the first place.


[09:25:55.0274] <jorendorff>
thanks, art thesis writer

[09:27:39.0154] <nbp>
So a proper answer would: “The left wing are both”

[09:27:43.0741] <jorendorff>
yes

[09:28:15.0669] <jorendorff>
I need to wash my brain after closing that tab.

[09:28:40.0232] <nbp>
donþ worry, it would come back once you re-open it ;)

[09:28:46.0440] <nbp>
 * don't worry, it would come back once you re-open it ;)

[09:37:37.0823] <annevk>
Congrats yulia & jandem!

[09:38:31.0875] <yulia>
Thank you! Also congratulations to tcampbell (very much deserved)

[09:39:52.0309] <mgaudet>
and a congrats to decoder too!

[09:40:33.0240] <decoder>
ty and congratz to the others ^.^

[09:51:53.0349] <mgaudet>
Here's a dumb qestion I forgot to ask: When can we assume we have a JSContext and when can we not? 

I seem to recall there's off-thread situations where we don't have one, but what I'm seeing doesn't quite jibe with what I had thought was the case

[09:54:42.0305] <sfink>
jorendorff: thank you! Or perhaps, "thank you...?" My dad inherited it from his dad, who as far as any of us knew, also had no idea what it might be getting at. Which, apparently, is kind of the point? Maybe? My "don't care" field is rapidly rising in strength here.

[09:54:57.0849] <jorendorff>
same

[09:56:24.0685] <sfink>
It does confirm, however, that I did in fact succeed in asking a properly stupid question.

[10:04:37.0174] <iain>
I think of "What is the difference between a duck?" as being in the same linguistic category as sentences like "More people have been to France than I have", where the whole point is that it seems like a perfectly reasonable sentence until you try to figure out what it means

[10:05:10.0955] <iain>
The syntax is valid but it doesn't typecheck?

[10:47:09.0498] <jorendorff>
I suspect "between" is syntactically unique and the sentence is actually not valid syntax

[10:47:28.0242] <jorendorff>
(Many words are syntactically unique.)

[10:47:50.0951] <jorendorff>
Can't believe I missed this part of the meeting:

> [tcampbell] nbp, how much of your day is spent with a parrot on your head?
> *   [nbp] Every hour of the day …


[10:49:01.0274] <jandem>
mgaudet: the only helper thread tasks that have a jscontext are parser/xdr and some gc ones I think. With stencil we could kill helper thread contexts eventually, would be a nice simplification 

[10:50:40.0717] <mgaudet>
we're generally not a fan of helper thread contexts then? (The reason I ask is because I'm auditing CompileOptions, and there's a number of options that seem to exit only to cache a JSContext option. The duplication doesn't make a lot of sense unless we're building to a world where the parser/bce/decoder don't have access to a JSContext) 

[10:51:16.0450] <tcampbell>
mgaudet: my motivation was to cut down the number of sources of input to parser

[10:51:30.0461] <tcampbell>
because it turned out we just read whatever we wanted from the engine..

[10:51:49.0386] <tcampbell>
existing scripts, globals, options, whatever

[10:52:12.0465] <jandem>
we're not a fan, in your case you'd also have to ensure the helper thread context (shared by all runtimes) matches the main thread context options

[10:52:33.0416] <mgaudet>
👍️ 

[10:52:33.0572] <tcampbell>
and would need to figure out how to round-trip to disk

[10:52:48.0337] <mgaudet>
Thanks (ted and jan)!

[12:03:43.0549] <jorendorff>
sfink, jonco: I have some tests timing out locally, and the common thread is creating lots of globalas

[12:03:45.0939] <jorendorff>
 * sfink, jonco: I have some tests timing out locally, and the common thread is creating lots of globals

[12:04:08.0742] <jorendorff>
and some gcZeal

[12:04:09.0445] <jorendorff>
are there significant recent changes?

[12:07:32.0637] <jorendorff>
apparently we do `oomTest(...newGlobal...)`in ...a number of tests

[12:37:18.0912] <jorendorff>
oh wow https://searchfox.org/mozilla-central/search?q=symbol:M_6607e96211e2d0e8&redirect=false

[13:14:54.0948] <dana>
hi folks - would anyone know how to get properties that are normally exposed on the window to be available to devtools code? (specifically, window.crypto)

[13:20:14.0803] <mccr8>
dana: that's probably more of a DOM question.

[13:20:56.0222] <dana>
ok - thanks! (although https://searchfox.org/mozilla-central/source/devtools/shared/builtin-modules.js#46 is looking promising...)

[13:21:29.0527] <mccr8>
dana: ah yeah, that looks like the thing for devtools stuff.

[13:21:54.0438] <mccr8>
We also have some other mechanisms for exposing things on chrome globals, but it does look like devtools already has a mechanism for dealing with that.

[13:22:41.0369] <mccr8>
I guess wantGlobalProperties is some kind of argument you pass in when creating a sandbox or something.

[13:23:17.0679] <mccr8>
dana: looks like crypto is supported already. https://searchfox.org/mozilla-central/source/js/xpconnect/src/Sandbox.cpp#909

[13:24:14.0669] <dana>
hmmm - either I'm missing something or I've done this wrong. I'll keep looking, and also ask in DOM

[13:28:51.0803] <dana>
oh maybe I have to re-export it at the bottom of that file

[13:30:15.0871] <sfink>
jorendorff: nothing comes to mind, though there have been a fair number of random changes recently. I'll confess that I always run with DEBUG locally and expect some number of timeouts, so I've trained myself to ignore timeouts for some time now.

[13:30:33.0981] <dana>
> <@dana:mozilla.org> oh maybe I have to re-export it at the bottom of that file

ah - that was it!

[13:31:05.0441] <dana>
thanks @mccr8!

[13:31:38.0064] <mccr8>
Hah. I'm glad you figured it out. That's a lot of redundancy there.

[13:32:11.0968] <dana>
yeah

[13:34:08.0238] <mccr8>
It looked like there's yet another place (in some eslint file) that you are also supposed to update.

[13:34:26.0043] <dana>
ah

[15:00:09.0542] <mgaudet>
confession: Experimenting with shifting work day by 1hr (in case anyone notices :P) 

In other news, I am attempting to plot the downfall of CompileOptions 🔪. 

[15:00:17.0448] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[15:07:49.0801] <mccr8>
jonco: this is a "fun" combination of conservative stack scanning and FinalizationRegistry to bypass ASLR in Chrome. https://bugs.chromium.org/p/chromium/issues/detail?id=1144662

[15:16:24.0301] <slimshader>
Hi everyone :)

[15:16:30.0545] <slimshader>
What would be the to convert a nameAtom

[15:16:37.0787] <slimshader>
to a string for logging it :)

[15:16:38.0878] <slimshader>
Thanks

[15:17:09.0421] <slimshader>
I would like to log 
RefPtr<nsAtom> nameAtom = mNodeInfo->NameAtom();

[15:17:30.0537] <slimshader>
that nameAtom 🙂

[15:17:31.0858] <evilpie>
That seems like a #DOM question

[15:17:50.0300] <slimshader>
Ok thanks i will ask in #DOM

[15:18:25.0417] <slimshader>
I might be stupid but i cant find dom Room

[15:18:27.0010] <slimshader>
lol

[15:18:52.0304] <sfink>
#dom:mozilla.org <-- maybe this is clickable?

[15:19:05.0448] <slimshader>
It is thanks

[15:39:29.0290] <sfink>
jonco: (for your scrollback reading pleasure) I lied about not checking the value color. It still does. But it doesn't really need to; it could continue to set the mark color based on the map and key, and then unconditionally trace the value(s). The only tricky part is returning whether anything got marked, but it looks like we have a `markCount` that could do that instead of propagating things through like it does now.

[15:58:42.0615] <slimshader>
What would be the best to get all values in a TypedArrayObject from tobj in this context :

Handle<TypedArrayObject*> tobj = obj.as<TypedArrayObject>();

Im trying to get length and looping to get each value but there must be a easier way.

Thanks

[15:59:40.0061] <slimshader>
https://searchfox.org/mozilla-central/source/js/src/vm/TypedArrayObject.cpp, i see a fromArray method but not a toArray method :(


2021-02-25
[16:00:54.0796] <slimshader>
Also if a array is not a typed array its considered a JSObject am i right ?

[16:05:36.0362] <arai>
to iterate over the `TypedArrayObject`, you can use `length` and `getElement` methods  https://searchfox.org/mozilla-central/rev/31a3457890b5698af1277413ee9d9bd6c5955183/js/src/vm/TypedArrayObject.h#99-101

[16:06:36.0036] <arai>
then, both `TypedArrayObject` and `ArrayObject` inherit from `JSObject` (via `NativeObject`)

[16:07:36.0486] <slimshader>
Thanks

[16:10:20.0188] <arai>
if the type of the typed array object is known, you can use `TypedArrayObjectTemplate::getIndex` instead, so that it skips `JS::Value`

[16:10:36.0282] <arai>
https://searchfox.org/mozilla-central/rev/31a3457890b5698af1277413ee9d9bd6c5955183/js/src/vm/TypedArrayObject.cpp#922

[16:11:03.0537] <arai>
 * if the element type of the typed array object is known, you can use `TypedArrayObjectTemplate::getIndex` instead, so that it skips `JS::Value`

[18:45:25.0374] <slimshader>
How can i format code in chat ?

[18:45:44.0661] <slimshader>
Looking for the markup info, cannot find thanks

[18:47:55.0663] <slimshader>
arai: this is my attempt at getting all values from the array hehe
            
```
TypedArrayObject*> tobj = obj.as<TypedArrayObject>();
            size_t len = tobj->length().get();
            for(int i = 0; i < (int)len; i ++) {
                HandleValue value = tobj->getElement(cx,len,i);
               MOZ_LOG(sLogger, LogLevel::Info, ("Loop value : %i",value.toInt32());
            }
```

[18:48:21.0953] <slimshader>
 * arai: this is my attempt at getting all values from the array hehe
```
            TypedArrayObject*> tobj = obj.as<TypedArrayObject>();
            size_t len = tobj->length().get();
            for(int i = 0; i < (int)len; i ++) {
                    HandleValue value = tobj->getElement(cx,len,i);
                   MOZ_LOG(sLogger, LogLevel::Info, ("Loop value : %i",value.toInt32());
            }
```

[18:48:58.0877] <slimshader>
 * arai: this is my attempt at getting all values from the array hehe
```
TypedArrayObject*> tobj = obj.as<TypedArrayObject>();
size_t len = tobj->length().get();
     for(int i = 0; i < (int)len; i ++) {
        HandleValue value = tobj->getElement(cx,len,i);
        MOZ_LOG(sLogger, LogLevel::Info, ("Loop value : %i",value.toInt32());}
```

[18:49:05.0841] <slimshader>
 * arai: this is my attempt at getting all values from the array hehe
```
TypedArrayObject*> tobj = obj.as<TypedArrayObject>();
size_t len = tobj->length().get();
     for(int i = 0; i < (int)len; i ++) {
        HandleValue value = tobj->getElement(cx,len,i);
        MOZ_LOG(sLogger, LogLevel::Info, ("Loop value : %i",value.toInt32());
     }
```

[18:49:14.0772] <slimshader>
 * arai: this is my sad attempt at getting all values from the array hehe
```
TypedArrayObject*> tobj = obj.as<TypedArrayObject>();
size_t len = tobj->length().get();
     for(int i = 0; i < (int)len; i ++) {
        HandleValue value = tobj->getElement(cx,len,i);
        MOZ_LOG(sLogger, LogLevel::Info, ("Loop value : %i",value.toInt32());
     }
```

[18:50:47.0921] <slimshader>
 * arai: this is my sad attempt at getting all values from the array hehe
```
Handle<TypedArrayObject*> tobj = obj.as<TypedArrayObject>();
size_t len = tobj->length().get();
     for(int i = 0; i < (int)len; i ++) {
        HandleValue value = tobj->getElement(cx,len,i);
        MOZ_LOG(sLogger, LogLevel::Info, ("Loop value : %i",value.toInt32());
     }
```

[19:15:18.0741] <Waldo>
slimshader: Single backticks for code embedded in text, triple-backticks to delimit blocks of code.

[19:15:51.0440] <slimshader>
 * arai: this is my sad attempt at getting all values from the array hehe
``
Handle<TypedArrayObject*> tobj = obj.as<TypedArrayObject>();
size_t len = tobj->length().get();
     for(int i = 0; i < (int)len; i ++) {
        HandleValue value = tobj->getElement(cx,len,i);
        MOZ_LOG(sLogger, LogLevel::Info, ("Loop value : %i",value.toInt32());
     }
``

[19:16:04.0544] <slimshader>
 * arai: this is my sad attempt at getting all values from the array hehe
```Handle<TypedArrayObject*> tobj = obj.as<TypedArrayObject>(); size_t len = tobj->length().get(); for(int i = 0; i < (int)len; i ++) { HandleValue value = tobj->getElement(cx,len,i); MOZ_LOG(sLogger, LogLevel::Info, ("Loop value : %i",value.toInt32()); }```

[19:16:36.0519] <slimshader>
 * arai: this is my sad attempt at getting all values from the array hehe
```Handle<TypedArrayObject*> tobj = obj.as<TypedArrayObject>(); 
size_t len = tobj->length().get(); 
for(int i = 0; i < (int)len; i ++) { 
HandleValue value = tobj->getElement(cx,len,i); 
MOZ_LOG(sLogger, LogLevel::Info, ("Loop value : %i",value.toInt32());
 }```

[19:16:41.0059] <slimshader>
 * arai: this is my sad attempt at getting all values from the array hehe
```Handle<TypedArrayObject*>
size_t len = tobj->length().get(); 
for(int i = 0; i < (int)len; i ++) { 
HandleValue value = tobj->getElement(cx,len,i); 
MOZ_LOG(sLogger, LogLevel::Info, ("Loop value : %i",value.toInt32());
 }```

[19:16:45.0544] <slimshader>
 * arai: this is my sad attempt at getting all values from the array hehe
```Handle<TypedArrayObject*>
size_t len = tobj->length().get(); 
for(int i = 0; i < (int)len; i ++) { 
HandleValue value = tobj->getElement(cx,len,i); 
MOZ_LOG(sLogger, LogLevel::Info, ("Loop value : %i",value.toInt32());
 }
```

[19:17:08.0927] <slimshader>
 * arai: this is my sad attempt at getting all values from the array hehe
```
size_t len = tobj->length().get(); 
for(int i = 0; i < (int)len; i ++) { 
HandleValue value = tobj->getElement(cx,len,i); 
MOZ_LOG(sLogger, LogLevel::Info, ("Loop value : %i",value.toInt32());
 }
```

[19:17:13.0429] <slimshader>
 * arai: this is my sad attempt at getting all values from the array hehe
```
Handle<TypedArrayObject*> tobj = obj.as<TypedArrayObject>();
size_t len = tobj->length().get(); 
for(int i = 0; i < (int)len; i ++) { 
HandleValue value = tobj->getElement(cx,len,i); 
MOZ_LOG(sLogger, LogLevel::Info, ("Loop value : %i",value.toInt32());
 }
```

[19:45:55.0881] <sfink>
slimshader: generally, you don't use `Handle` in your code. (It should mostly just show up as a parameter type.) You want `Rooted<TypedArrayObject*> tobj(cx, &obj.as<TypedArrayObject>());` and `RootedValue value(cx, robj->getElement(...));`. It'll autoconvert to `Handle` when passed into things. (A `Handle<JSObject*>` is really just a `JSObject**` that the type system knows points at a rooted pointer.)

[23:03:32.0094] <jandem>
heads-up: the js rust crates are being removed in [this bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1694318)

[23:04:12.0859] <jandem>
servo has their own version that has diverged from ours

[00:45:11.0050] <Ms2ger>
I'd always hoped Servo'd be able to move to the upstream ones at some point

[00:45:17.0550] <Ms2ger>
Too bad that never worked out

[00:47:43.0275] <Ms2ger>
/me wonders what yesterday's congratulations were about

[00:55:21.0043] <yulia>
promotions were announced

[01:00:25.0276] <Ms2ger>
I see

[01:00:32.0718] <Ms2ger>
Congratulations to all involved, then :)

[01:26:37.0266] <jandem>
Ms2ger: to be honest, I thought that (servo using upstream crates) was the case until this week

[01:27:16.0403] <jandem>
now that I think about it, we never got patches or bug reports..

[01:27:23.0387] <Ms2ger>
I'm not sure why we didn't

[01:27:33.0178] <Ms2ger>
Besides always being years out of date :)

[01:28:20.0612] <jandem>
heh. I saw they're now on 84 and [updating](https://github.com/servo/mozjs/pull/268) to 86 so that seems to be better :)

[01:31:14.0772] <Ms2ger>
Update to 84 only took a month, that wasn't too bad

[01:32:54.0984] <jonco>
sfink: Interesting.  The markCount was only added for telemetry purposes and I'd rather not depend on it, but that does sound like it would work.

[01:33:06.0969] <jandem>
all these months I thought I was helping them out by diligently updating the mozjs crates on API changes..

[01:33:28.0517] <jandem>
 * all these months I thought I was helping them out by diligently updating the mozjs crates on API changes 🙂

[01:37:26.0809] <jonco>
> <@jorendorff:mozilla.org> sfink, jonco: I have some tests timing out locally, and the common thread is creating lots of globals

There are bunch of timeouts expected when running tests with GC zeal, if that's what's happening

[01:38:27.0332] <jonco>
oomTest found several problems related to newGlobal so it ended up in a few test cases

[01:43:03.0490] <jonco>
mccr8: wow really interesting!  I didn't think oilpan was conservative but it looks like it is in some places

[01:43:16.0808] <jonco>
Glad to hear this bug doesn't affect us 😀

[01:56:16.0747] <evilpie>
Anyone knows why this is complaining? https://bugzilla.mozilla.org/show_bug.cgi?id=1670124#c13

[01:57:12.0096] <evilpie>
DeprecatedContent has four values so two bits should be enough?

[02:03:04.0343] <arai>
sounds like a bug in gcc, that's fixed in later version

[02:03:16.0710] <arai>
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61414

[02:03:39.0180] <arai>
according to the log, the automation is using gcc 7.4.0

[02:03:45.0451] <arai>
and the fix is in 8.4

[02:04:37.0673] <arai>
and current minimal requirement for gcc is 7.1, unfortunately  https://firefox-source-docs.mozilla.org/code-quality/coding-style/using_cxx_in_firefox_code.html

[02:06:53.0986] <arai>
so I guess it needs to use raw value in the field, and add accessors to cast from/to enum class?

[02:09:17.0194] <evilpie>
d'uh f

[02:09:24.0159] <evilpie>
thanks for looking that up

[02:43:21.0263] <evilpie>
arai: what do you think https://phabricator.services.mozilla.com/D95580#change-lrpF5RXKjU5V ?

[02:43:33.0167] <evilpie>
I changed it to a raw uint8_t ☹️

[02:46:53.0054] <arai>
looks good :)  might be nice to add link to the above gcc bug, so that it's clear when (in which minimum version requirement bump) we can remove the workaround

[02:48:58.0689] <annevk>
TIL: "use strict" is even weirder than I thought

[02:54:03.0966] <evilpie>
> <@arai:mozilla.org> looks good :)  might be nice to add link to the above gcc bug, so that it's clear when (in which minimum version requirement bump) we can remove the workaround

Thanks. I added a link to the bug you posted before

[06:32:20.0046] <tcampbell>
nbp++ for taming the android test runner! Bug 1690570

[06:32:21.0840] <botzilla>
https://bugzil.la/1690570 — ASSIGNED (nbp) — Testing on Android: Delegate test runner to run on Android

[06:33:39.0874] <tcampbell>
lol 32min -> 9min for the example I looked at on autoland. That is wild

[06:36:39.0660] <tcampbell>
nbp: do we need to file a bug to change the chunking? I don't know what the "target" execution time for a chunk is

[06:37:08.0148] <nbp>
tcampbell: I was tempted to … until I noticed the Jit10 takes 59 minutes with debug builds.

[06:37:45.0668] <tcampbell>
I think opt and debug get different chunk counts

[06:38:14.0480] <nbp>
We can configure opt and debug to have different chunks, yes.

[06:39:34.0326] <nbp>
This is where we can do the modification: https://searchfox.org/mozilla-central/source/taskcluster/ci/test/compiled.yml#83

[06:41:48.0115] <nbp>
However, we might keep things split, and land Bug 1692178, which would have roughly the same effect, by reducing the setup time.

[06:41:49.0579] <botzilla>
https://bugzil.la/1692178 — ASSIGNED (nbp) — Testing on Android: Only push necessary test files.

[06:42:34.0632] <nbp>
 * However, we might keep things split, and land Bug 1692178, which would have roughly the same effect, by reducing the setup time per test.

[06:44:50.0420] <tcampbell>
oh nice, you are already looking at that. The 173MB of test262 is silly to push around for jit-tests

[06:46:48.0488] <tcampbell>
nbp: If it is easy, it might be nice to remove the `tests/tests` path on the device side. This was an artifact from when we copied a lot of different directories and had tests reference with ../..

[06:47:27.0175] <tcampbell>
(eg. when I use `adb shell`, I need to go several directories deep to find the test file)

[06:49:58.0562] <nbp>
I think this should be easy to remove the extra `tests` level

[06:51:25.0049] <tcampbell>
nice

[06:52:10.0954] <nbp>
tcampbell: what might be interesting for you, is to change the test root on the command line after.

[06:56:10.0170] <tcampbell>
https://bugzilla.mozilla.org/show_bug.cgi?id=1486004#c33 test_root directory name probably shouldn't change

[06:58:31.0747] <tcampbell>
(I guess we say "test root" for a number of different paths, depending on where in the code we are..)

[07:05:57.0131] <nbp>
definitely agree, and this can be fixed at the same time as the extra `tests` removal.

[07:19:03.0802] <mccr8>
> <@jonco:mozilla.org> mccr8: wow really interesting!  I didn't think oilpan was conservative but it looks like it is in some places

IIRC it only does conservative scanning for the stack. It tries to wait until the stack is empty so that it doesn't need to do it, but you can always force it with things like sync XHR that force a nested event loop.

[07:31:52.0104] <sfink>
arai evilpie: this is probably scope creep for your bug, but there probably wouldn't be a lot of resistance to raising the minimum gcc version. Within Mozilla, I think the hazard analysis is about the last thing using it, and it's using gcc 9. (I also have it working on gcc 10.)

[07:32:13.0825] <sfink>
it's possible that distributions want to support older versions, I guess.

[07:34:12.0955] <nbp>
sfink: do we have a mrgiggle like to ask supod questions about 0x4b?

[07:34:19.0770] <nbp>
 * sfink: do we have a mrgiggle like to ask supid questions about 0x4b?

[07:34:44.0453] <sfink>
no, sadly I never ported over to bbouvier's bot

[07:34:51.0019] <sfink>
I keep wanting it

[07:35:16.0317] <sfink>
I guess it might be easier to keep it in Python and port over to some Python framework instead

[07:35:29.0942] <nbp>
botzilla: help?

[07:38:32.0750] <jandem>
almost a year since mrgiggles sent [its last message](https://mozilla.logbot.info/jsapi/20200302#c16894690) :/ 

[07:44:42.0232] <Ms2ger>
✝️

[07:49:33.0104] <jorendorff>
tcampbell: Would you mind writing up your work on assessing crash blame? Or, did heycam write anything...? It seems like valuable work for a lot of Gecko people

[07:50:05.0298] <sfink>
He lived on for a while longer [through a gateway](https://matrix.to/#/!vDRhzIYLVKpXXrtvVr:matrix.org/$MGRgUzXNSJqtCYYgIMGbLGEqpjhXkVRlNqh92Yp7z-4?via=matrix.org&via=mozilla.org&via=t2bot.io), but given that squatted in a machine under Waldo's desk in the MTV office, things aren't looking good. First they came for mrgiggles, then for Waldo, then for the desk.

[07:50:46.0224] <Ms2ger>
Then for the MTV office?

[07:51:12.0952] <sfink>
yep

[07:51:13.0789] <jorendorff>
tcampbell: like: link to the meta bug, how to get minidumps, any code you used to parse them, how to compare against the build -- seems like you might have some throwaway scripts lying around somewhere...?

[07:51:21.0441] <sfink>
hm, Matrix formatting fail

[07:51:38.0718] <sfink>
 * He lived on for a while longer [through a gateway]( https://matrix.to/#/!vDRhzIYLVKpXXrtvVr:matrix.org/$MGRgUzXNSJqtCYYgIMGbLGEqpjhXkVRlNqh92Yp7z-4?via=matrix.org&via=mozilla.org&via=t2bot.io ), but given that squatted in a machine under Waldo's desk in the MTV office, things aren't looking good. First they came for mrgiggles, then for Waldo, then for the desk.

[07:52:13.0833] <jorendorff>
tcampbell: you mentioned there's something on ark.intel.com that lets you look up a chip by model and stepping, but I don't see it. triage people want your work :)

[07:53:05.0365] <sfink>
 * He lived on for a while longer [through a gateway](https://matrix.to/#/%21vDRhzIYLVKpXXrtvVr:matrix.org/$MGRgUzXNSJqtCYYgIMGbLGEqpjhXkVRlNqh92Yp7z-4?via=matrix.org&via=mozilla.org&via=t2bot.io), but given that squatted in a machine under Waldo's desk in the MTV office, things aren't looking good. First they came for mrgiggles, then for Waldo, then for the desk.

[07:53:49.0318] <sfink>
 * He lived on for a while longer through a gateway https://matrix.to/#/!vDRhzIYLVKpXXrtvVr:matrix.org/$MGRgUzXNSJqtCYYgIMGbLGEqpjhXkVRlNqh92Yp7z-4?via=matrix.org&via=mozilla.org&via=t2bot.io, but given that squatted in a machine under Waldo's desk in the MTV office, things aren't looking good. First they came for mrgiggles, then for Waldo, then for the desk.

[07:54:12.0114] <sfink>
 * He lived on for a while longer through a gateway https://matrix.to/#/!vDRhzIYLVKpXXrtvVr:matrix.org/$MGRgUzXNSJqtCYYgIMGbLGEqpjhXkVRlNqh92Yp7z-4?via=matrix.org&via=mozilla.org&via=t2bot.io, but given that he squatted in a machine under Waldo's desk in the MTV office, things aren't looking good. First they came for mrgiggles, then for Waldo, then for the desk.

[07:58:48.0498] <tcampbell>
jorendorff: oh, I think I took the model/family/stepping and looked up on google to find random tables people built that give intel product name, then I take that to ark

[07:59:14.0995] <jorendorff>
/me nods

[07:59:21.0056] <tcampbell>
yeah, writing it up a bit more makes sense..

[07:59:52.0570] <jorendorff>
would appreciate it :-|

[08:00:02.0528] <tcampbell>
jorendorff: https://bugzilla.mozilla.org/show_bug.cgi?id=1274628

[08:01:17.0599] <jandem>
I keep hoping crash-stats will get the "show instruction bytes around pc in crash-stats" feature. Would be great for jit crashes. Doing that locally is a lot more work

[08:02:51.0403] <jandem>
 * I keep hoping crash-stats will get the "show instructions around crash pc in crash-stats" feature. Would be great for jit crashes; doing that locally is a lot more work

[08:11:50.0452] <nbp>
I wanted to make a tool which could reverse-engineer the CodeGenerator code path based on the generated code around the pc … but this would require more time to finish it.

[08:12:15.0677] <nbp>
https://github.com/nbp/seqrec

[08:12:20.0518] <jorendorff>
tcampbell: heycam talks about relocs in the last comment there, but (for crashes in non-jit code) doesn't breakpad give you `"module"` and `"module_offset"`?

[09:01:03.0922] <tcampbell>
yeah, the dumps of module/module_offset

[09:02:16.0935] <tcampbell>
 * yeah, the dumps have the module/module_offset

[09:14:05.0902] <sfink>
jandem: ted had most of that implemented at some point. I was really hoping that would happen.

[09:26:22.0753] <mccr8>
Well, it won't happen if you just wish for it. Have you talked to crash stats people? (And by "people", I mean the one person who works on it.)

[09:29:20.0538] <sfink>
not in a while, no

[09:29:38.0897] <tcampbell>
I think we touched base with Will in whistler?

[09:29:41.0797] <tcampbell>
 * I think we touched base with Will in whistler

[09:36:50.0616] <tcampbell>
 * I think we touched base with Will in whistler, but that was a long time ago now.

[09:37:45.0645] <sfink>
I thought I had filed a bug at some point, but I can't find it

[11:14:15.0561] <nbp>
tcampbell: I think I have a fix for the tests/tests directory, I'll push that tomorrow.

[11:53:10.0364] <robert.mader>
Hi there. Does somebody know if there has been any attempts to speed up simple `Math.*` functions lately? In Gnome-shell we are using mozjs-78 and just found it to be beneficial to e.g. use `~~()` over `Math.trunc()`. Apparently v8 uses some inlining for trivial math functions for that. Now we're pondering whether it makes sense for us to introduce some slim layer. Is there a chance that we'd get that for free with the next mozjs version? :)

[11:55:10.0625] <tcampbell>
                                                                                                                                                                                                                                                                        iain ^

[11:55:28.0965] <tcampbell>
 * iain: ^

[11:57:28.0756] <robert.mader>
For context, this is the commit under discussion: https://gitlab.gnome.org/GNOME/gnome-shell/-/commit/211f04b33b0ed989219cb84df06a61d30476d812?merge_request_iid=1713

[11:57:29.0187] <Waldo>
The semantics of those two operations are not precisely identical, so it's not totally crazy that there might be some performance difference between them.  That said, there shouldn't be too many cases where the difference is massive.

[11:58:39.0346] <Waldo>
Oh hey, someone renamed the gross `MCallOptimize.cpp` to be actually sensibly named...

[11:59:09.0896] <iain>
MCallOptimize is no more.

[11:59:40.0879] <Waldo>
`Math.trunc` has inlining support, so I don't see why those two would be massively different in perf.

[11:59:48.0198] <Waldo>
At least on trunk.

[12:00:08.0076] <iain>
The new approach is that calls to native functions that we want to optimize get handled in CacheIR, then transpiled to MIR in WarpCacheIRTranspiler.

[12:00:25.0054] <Waldo>
Same song, second verse.  :-)

[12:00:32.0484] <tcampbell>
warp was enabled after 78, right?

[12:00:44.0649] <iain>
Yeah

[12:02:00.0805] <iain>
To give a concrete answer: all of the Math operations that are touched in that patch are specially inlined in Warp

[12:02:21.0273] <iain>
But they were also inlined in Ion, so it's not clear that you should expect a performance improvement

[12:02:48.0165] <Waldo>
robert.mader: At a very quick glance, while those math functions are inlinable, SpiderMonkey is not likely to inline them unless the surrounding code is "hot".  That patch appears to indicate the enclosing function might be biggish, in which case you might only stay in the baseline compiler, and then you'd be calling into the functions up to the point where the enclosing function gets fully optimized (including based on runtime call frequency).

[12:03:07.0380] <iain>
Oh, actually, that might be a change

[12:03:23.0782] <iain>
In the new CacheIR-based world, we optimize as soon as Baseline attaches an IC

[12:04:38.0856] <tcampbell>
Looks like FF91 is next scheduled ESR build

[12:04:51.0798] <tcampbell>
 * Looks like FF91 is next scheduled ESR build (and we are in FF88 now)

[12:06:14.0556] <robert.mader>
cool, thanks - that should hopefully work for gnome 41 then

[12:06:53.0624] <robert.mader>
/me looks at ptomato with big eyes

[12:10:19.0398] <ptomato>
> <@tcampbell:mozilla.org> Looks like FF91 is next scheduled ESR build (and we are in FF88 now)

oh, this is good information. I assumed 88 would be the next one

[12:11:10.0908] <verdre>
I wonder how well the hot-path detection works in our case anyway, those functions are very very hot paths, is it somehow possible to find out what the optimization level is?

[12:12:06.0340] <tcampbell>
For all, https://wiki.mozilla.org/Release_Management/Calendar

[12:14:15.0224] <robert.mader>
verdre: that would indeed be very helpful. It's quite easy in FF profiles - ptomato , is there something similar in GJS?

[12:15:10.0164] <tcampbell>
I think jandem was looking at adding minimal profiling support to the jsshell, which if it happened could be used in a similar approach for GJS

[12:15:52.0157] <ptomato>
I don't know. I haven't worked much on the profiling support in GJS, but it uses GeckoProfiler

[12:16:04.0345] <tcampbell>
ah cool

[12:17:35.0190] <verdre>
hmm, does GeckoProfiler expose that info?

[12:18:30.0660] <tcampbell>
yes

[12:25:09.0159] <iain>
robert.mader: Two other things that I wanted to add before I remembered I had a meeting: 

[12:25:44.0768] <iain>
1. Each of the Math.* functions is optimized separately, so even if Math.trunc (say) is slower, the same would not necessarily be true of Math.max

[12:26:18.0035] <iain>
2. `x | 0` was the asm.js idiom for truncating to integer, and is fairly well optimized, so if you don't need the specific behaviour of Math.trunc, you could consider using that instead of `~~x`

[12:27:00.0688] <iain>
(But be warned that it truncates to int32, so you have to be careful about overflow)

[12:42:51.0995] <robert.mader>
Thanks! I'm also very eager so see how the warp stuff works out for our use-case.

[12:48:54.0679] <robert.mader>
On a totally unrelated note: I've been trying to pinpoint a slow js case in FF on the notorious webgl aquarium demo. I'd like to properly label the bug but find it hard to read the profile right. Is somebody around who could have a look into the profile at https://bugzilla.mozilla.org/show_bug.cgi?id=1684224#c12 so it can be properly assigned and turned away from the linux graphics layer? :)

[12:58:39.0969] <Waldo>
AMAZING PROTIP: If you change the CSS rule for `.remarkup-code .sd` to use `color: #766510;` instead of `color: #000;`, Python triple-quoted strings will display with correct syntax highlighting on Phabricator.

[12:59:17.0911] <Waldo>
Gonna file a bug to get us to fix that, but not til I finish reviewing this patch that has become remarkably easier to read now that all its large triple-quoted sections display correctly...

[13:28:20.0506] <tcampbell>
> <@robert.mader:gnome.org> On a totally unrelated note: I've been trying to pinpoint a slow js case in FF on the notorious webgl aquarium demo. I'd like to properly label the bug but find it hard to read the profile right. Is somebody around who could have a look into the profile at https://bugzilla.mozilla.org/show_bug.cgi?id=1684224#c12 so it can be properly assigned and turned away from the linux graphics layer? :)

iain, with the fixed profiler it seems that the js time is in `tdl.math.pseudoRandom` which makes me think warp doesn't have optimal code gen here..

[13:28:56.0747] <tcampbell>
```js
tdl.math.pseudoRandom = function() {
  var math = tdl.math;
  return (math.randomSeed_ =
          (134775813 * math.randomSeed_ + 1) %
          math.RANDOM_RANGE_) / math.RANDOM_RANGE_;
};
```

[13:29:26.0244] <tcampbell>
a nice and short test cases for once 

[13:30:22.0902] <tcampbell>
might be something that TI used to be good at..

[13:48:17.0781] <Waldo>
[Boo-urns](https://www.python.org/dev/peps/pep-0498/)!  Apparently Python's tokenizing is busted compared to JavaScript's tokenizing.

> Due to Python's string tokenizing rules, the f-string f'abc {a['x']} def' is invalid. The tokenizer parses this as 3 tokens: f'abc {a[', x, and ']} def'. Just like regular strings, this cannot be fixed by using raw strings. There are a number of correct ways to write this f-string: with a different quote character:
>
>     f"abc {a['x']} def"
>
> Or with triple quotes:
>
>     f'''abc {a['x']} def'''

[13:48:58.0711] <Waldo>
It's almost enough to make me want to do the work of a PEP to fix it, and to dive into a community I've never been involved in before...

[15:49:46.0035] <iain>
tcampbell: Took a look. Doesn't look like it's Ion->Warp regression in particular, although anba pointed out that our float mod implementation might be bad. Wrote up a comment in the bug.

[15:50:17.0235] <tcampbell>
thanks


2021-02-26
[21:00:56.0111] <zbraniecki>
hi SpiderMonkey team, may I take a moment of your time to bring you this beautiful profile - https://share.firefox.dev/2NX29iF ?

[21:01:15.0417] <zbraniecki>
If I read it correctly there's *a lot* of JS and GC going on

[21:01:29.0670] <zbraniecki>
you can reproduce it yourself if you're logged in to Mozilla LDAP and you venture to https://sql.telemetry.mozilla.org/dashboard/ui-resource-network-errors

[23:05:46.0130] <jandem>
that's some pretty bad jank. I'm seeing a lot of layout/DOM time too

[23:24:55.0406] <jandem>
can you file a bug? maybe in Core : Performance as a start

[03:22:16.0523] <nbp>
> <@tcampbell:mozilla.org> nbp: If it is easy, it might be nice to remove the `tests/tests` path on the device side. This was an artifact from when we copied a lot of different directories and had tests reference with ../..

This is done, as part of Bug 1692178 😉

[03:22:18.0763] <botzilla>
https://bugzil.la/1692178 — ASSIGNED (nbp) — Testing on Android: Only push necessary test files.

[05:06:30.0703] <tcampbell>
so nice to see the android js-shell workflow becoming much better

[05:34:03.0232] <tcampbell>
neat, and the `disnative` stuff works directly on phone too

[06:50:09.0580] <zbraniecki>
> <@jandem:mozilla.org> can you file a bug? maybe in Core : Performance as a start

https://bugzilla.mozilla.org/show_bug.cgi?id=1695232 - who to NI?

[06:50:56.0322] <Ms2ger>
j-andem, duh :)

[07:14:45.0417] <jandem>
heh, thanks for filing. Looking into it..

[08:11:49.0060] <nbp>
https://www.jsparty.com/ Probably not the right JS

[09:42:06.0415] <slimshader>
Des gens de montréal ici ? haha

[09:42:20.0002] <slimshader>
This last link haha

[10:20:28.0679] <slimshader>
What would be the best way to get cookie value in string from a CookieStruct ?

[10:20:30.0069] <slimshader>
thanks

[10:21:13.0080] <smaug>
I thought self hosting code was supposed to be shared somehow, but https://share.firefox.dev/3pVvA1J hints that isn't the case 

[10:22:25.0964] <slimshader>
i get value by aCookieData.value() i always ended up struggling with converting types to string, is ther like a maste helper function to convert stuff to printable string ?

[10:23:02.0092] <slimshader>
in this case its a  nsCString, i try to go to nsCString class to find somekind of conversion function

[10:23:33.0229] <sfink>
that's all DOM stuff

[10:24:18.0088] <smaug>
or networking

[10:25:45.0851] <sfink>
tcampbell or nbp : ^ smaug's question about self-hosting. Should it be doing the XDR stuff in the browser yet?

[10:25:57.0532] <nbp>
/me reads

[10:26:25.0594] <nbp>
smaug: self-hosted code should be shared within processes.

[10:26:31.0666] <nbp>
not yet across processes.

[10:26:47.0173] <smaug>
I see

[10:26:56.0914] <smaug>
are there plans to support cross-process?

[10:27:04.0156] <nbp>
smaug: However, the self-hosted code leave in its own compartment and the code has to be clone in the windows compartment when used.

[10:27:27.0363] <nbp>
This is changing to something where we would "instantiate" the stencil.

[10:27:47.0017] <nbp>
This is equivalent to the previous code without the extra compartment

[10:27:49.0951] <smaug>
I'm interested in the cross-process case since this stuff shows up a bit during process launch 

[10:28:01.0625] <smaug>
and optimizing that is rather important for Fission

[10:28:18.0796] <nbp>
Yes, there are plan to support cross-process sharing of self-hosted code, and this is one my goals for H1 2021

[10:28:47.0324] <smaug>
ah, sounds great

[10:28:54.0345] <nbp>
smaug: I would definitely be interested in number around the process launch cost …

[10:29:05.0822] <smaug>
see that profile

[10:29:20.0969] <nbp>
My hand wavy calculation suggest that we could save up to 16ms on Fenix, per process.

[10:30:13.0856] <nbp>
Is that the range of optimization we are looking at?

[10:30:14.0475] <slimshader>
Just found https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Guide/Internal_strings i will read all of it lol

[10:30:35.0415] <smaug>
slimshader: what are you possibly trying to do?

[10:30:53.0359] <slimshader>
Im just always confuse on string convertion but this article just helped me alot

[10:31:33.0272] <smaug>
slimshader: I mean mostly that why you're dealing with CookieStruct?

[10:31:57.0099] <slimshader>
Im just trying to log certain activity on the dom for debug

[10:32:12.0477] <slimshader>
Cookie is of many thing im trying to log

[10:32:38.0204] <nbp>
smaug: Are we really looking at ~12ms optimization (at most) on a 1.5s profile?

[10:33:26.0646] <smaug>
that isn't 12ms, but samples

[10:33:38.0082] <smaug>
and the process startup is more like 100ms

[10:34:00.0232] <nbp>
`Traced running time 12.1ms`

[10:34:21.0932] <smaug>
ah, you mean some other titming

[10:34:24.0899] <smaug>
timing

[10:34:36.0566] <smaug>
but if it is actually 12ms, then it is a lot of that 100ms

[10:34:48.0535] <sfink>
yeah, the flame graph shows 12.1ms for the `initSelfHosting`

[10:34:50.0081] <nbp>
Thanks, this is the information I was looking for.

[10:35:11.0796] <smaug>
oh, I never use flame graph

[10:36:46.0580] <tcampbell>
yes, nbp is working on the sharing. We have it all running in shell tests on CI already, and browser integration is next.

[10:37:05.0108] <nbp>
smaug: how do you get these profile, with the environement variable?

[10:37:30.0354] <smaug>
This is actually from https://bugzilla.mozilla.org/show_bug.cgi?id=1689703

[10:37:43.0112] <tcampbell>
Overall metabug is https://bugzilla.mozilla.org/show_bug.cgi?id=1662149

[10:37:52.0724] <tcampbell>
 * Overall metabug for self-hosted tricks is https://bugzilla.mozilla.org/show_bug.cgi?id=1662149

[10:38:01.0092] <smaug>
but normal profiling should work fine

[10:39:46.0598] <nbp>
ok.

[10:50:29.0511] <nbp>
sfink: about Bug 1695005, if all is fine, feel free to land it next week, as I would be on pto.

[10:50:31.0116] <botzilla>
https://bugzil.la/1695005 — ASSIGNED (nbp) — selfhosted XDR decoding asserts if it cannot load file

[10:51:32.0751] <sfink>
confession: in the process of writing a test for weakmap behavior that from code inspection seemed like it ought to be wrong, stumbled across a comment in another test from past-me: "Note that this is currently buggy...". Thanks for nothing, past-me.

[10:51:35.0623] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[10:52:36.0981] <sfink>
ah, thank you for doing that one. I agree, I like the new behavior better.

[10:55:04.0181] <slimshader>
should i be able to use printf in interppreter.cpp ?

[10:55:13.0652] <slimshader>
I was using MOZ_LOG

[10:55:38.0429] <slimshader>
but would prefer to use printf, is there documentation on what can be used in different part of the source code ?

[10:56:02.0583] <slimshader>
it seems like printf works in netwerk lets say, but doesnt seem to work in js/vm

[10:56:31.0669] <sfink>
nbp: I'll push it as soon as I fix my authentication problem

[10:57:31.0165] <tcampbell>
slimshader: if you are doing this on browser, you might need to turn off sandbox

[10:57:45.0889] <tcampbell>
since what you are interested in is probably in a content process

[10:57:57.0434] <slimshader>
ok thanks will have a look

[10:58:28.0452] <tcampbell>
in config, security.sandbox.content.level -> 0. Dragons ahead, so make sure to make a new profile for the experiment.

[10:58:50.0605] <sfink>
or the env var MOZ_DISABLE_CONTENT_SANDBOX=1

[12:11:34.0710] <iain>
evilpie: Oh good, I was just about to update test262 for the capture indices changes, but you saved me the effort

[13:59:33.0832] <arai>
what's the reason why we use little endian (I mean, instead of native endian) in bytecode?  simplicity around emit?

[14:07:19.0851] <arai>
the context is bug 1695349.  that I'm about to make XDR (at least except bytecode) fully native endian

[14:07:25.0923] <botzilla>
https://bugzil.la/1695349 — NEW (nobody) — Remove endian handling from XDR

[14:42:52.0064] <tcampbell>
arai: I think only for bad reasons.. https://en.wikipedia.org/wiki/External_Data_Representation

[14:43:07.0126] <tcampbell>
our XDR was once vaguely that XDR

[14:43:24.0509] <tcampbell>
and there was probably a hope that this might be "portable"

[14:44:05.0560] <tcampbell>
but as we've learned in practice, touching nearly any file in the frontend directory probably changes semantics such that bytecode is not portable

[14:44:38.0193] <tcampbell>
/me sees Waldo lurking and wonders if there are even worse reasons..

[14:46:18.0463] <Waldo>
arai: Because profiles shouldn't be endian-specific?  Not too long ago at MIT there were both Solaris and Linux machines, and I ran Firefox on them, same profile, and they were different endianness...

[14:46:57.0291] <Waldo>
arai: URL bar autocomplete gave me Chinese on the Solaris boxes 😳

[14:47:08.0222] <Waldo>
(which bug was, eventually, fixed)

[14:47:37.0762] <arai>
oh

[14:48:16.0848] <arai>
sounds like I broke that setup?  stencil XDR in JSBC uses native endian

[14:48:27.0279] <Waldo>
You may have!

[14:48:53.0295] <tcampbell>
I think we broke that a while ago

[14:49:07.0061] <tcampbell>
caches are not shareable across endianess

[14:49:20.0781] <tcampbell>
(but that should be transparent)

[14:49:34.0480] <evilpie>
I think officially Firefox doesn't support copying profiles

[14:49:57.0924] <tcampbell>
The cache should safely be rejected.

[14:50:20.0728] <tcampbell>
It is no different than mixing cache files for similar-but-different buildIDs

[14:51:01.0466] <arai>
oh, `ScriptTranscodingBuildId` in the XDR header has `MOZ_LITTLE_ENDIAN()` info

[14:51:43.0867] <tcampbell>
correct

[14:51:53.0129] <arai>
so, the different-endian XDR won't be read, at least for JSBC (that uses the build id in MIME type)

[14:52:19.0299] <arai>
this may be different for ScriptPreloader/StartupCache, but IIUC they use endian name in the filename

[14:52:44.0437] <tcampbell>
they all do the same check

[14:52:54.0790] <tcampbell>
we had to get more serious about it with Warp pref toggle

[14:53:06.0285] <tcampbell>
since bytecode differs with / withou Warp

[15:00:00.0081] <arai>
yeah, the version check is done when reading XDR, but I wanted to make sure different-endian file won't even loaded/read, so that it doesn't result in decode error, but just treated like there wasn't such XDR data

[15:04:45.0435] <tcampbell>
yeah, the nice part of checking it the same as Warp flag is that the warp flag actually got testing :)


2021-02-28
[19:12:54.0624] <slimshader>
Hey everyone. stupid c++ noob at it again LOL Im trying to run getElementPure from TypedArrayObject.h.

https://searchfox.org/mozilla-central/source/js/src/vm/TypedArrayObject.h#132

[19:13:27.0424] <slimshader>
first param is a unsigned int second is a pointer to variable where i want the result i assume.

[19:15:16.0281] <slimshader>
 * Hey everyone. stupid c++ noob at it again LOL Im trying to run getElementPure from TypedArrayObject.CPP.

https://searchfox.org/mozilla-central/source/js/src/vm/TypedArrayObject.cpp#2016

[19:16:35.0566] <slimshader>
```
Handle<TypedArrayObject*> tobj = obj.as<TypedArrayObject>();
            size_t len = tobj->length().get();
            for(int i = 0; i < (int)len; i ++) {
              Value subvalue = new Value();
              tobj->getElementPure((int)len,*subvalue);
            }
```

[19:16:55.0333] <slimshader>
Im clear doing someshit wrong here LOL

[19:25:29.0414] <slimshader>
 * Im clear doing some stuff wrong here LOL

[19:27:36.0604] <iain>
slimshader: You may want to read this SMDOC comment: https://searchfox.org/mozilla-central/source/js/public/RootingAPI.h#34

[19:28:05.0606] <slimshader>
Thanks i will read it

[19:36:16.0704] <iain>
So you probably want to declare `RootedValue element(cx)` outside your loop, then call `tobj->getElementPure(index, &element)` inside your loop to get values. And then you can do whatever you want with them.

[19:38:01.0801] <slimshader>
Ok my brain is still in C# that new keyword was stupid if i understand constructor are just constructor()

[19:38:27.0960] <slimshader>
&element is returning me the pointer of element ?

[19:40:15.0318] <slimshader>
Actually what is element here ? 

[19:41:00.0300] <slimshader>
Sorry for all my stupid questions, im trying to learn the basic of c++ by doing hello world level stuff at the same time as playing around in a massive super evolve code base like firefox hahaha

[19:41:06.0365] <slimshader>
 * Actually what is element() here ? 

[19:43:39.0164] <loganfsmyth>
something like 
```
Rooted<TypedArrayObject*> tobj(cx, &obj.as<TypedArrayObject>());
RootedValue element(cx);
size_t len = tobj->length().get();
for(size_t i = 0; i < len; i ++) {
  tobj->getElementPure(i, &element);
}
```

[19:44:21.0923] <loganfsmyth>
so it gets the value from the array and puts it into `element`

[19:45:06.0198] <loganfsmyth>
&element passes a pointer into `getElementPure` so that it can modify the `element` variable in your function

[19:45:25.0982] <slimshader>
Ok yea thats the only part i understand i think hahah

[19:45:38.0930] <slimshader>
What is rooted referencing to

[19:46:01.0441] <slimshader>
Like the difference between RootedValue or Value

[19:46:06.0078] <slimshader>
memory allocation ?

[19:46:29.0097] <loganfsmyth>
It is the general system in SpiderMonkey for handling garbage collection

[19:47:23.0710] <loganfsmyth>
It needs to know everything that references anything else, so "Rooted" types are things the GC knows to inspect when finding what is in use

[19:47:43.0304] <slimshader>
Okok

[19:48:00.0631] <slimshader>
/js/src/vm/Interpreter.cpp(3128,48): error: taking the address of a temporary object of type 'JS::Handle<TypedArrayObject *>' [-Waddress-of-temporary]
 0:12.54             Rooted<TypedArrayObject*> tobj(cx, &obj.as<TypedArrayObject>());

[19:48:26.0407] <slimshader>
Seems like compiler did not like this line

[19:48:51.0057] <slimshader>
initialize a parameter of type 'JS::Value *' with an rvalue of type 'JS::RootedValue *' (aka 'Rooted<JS::Value> *')

[19:48:51.0320] <loganfsmyth>
oh maybe leave out the `&`, I haven't done with in a while :P

[19:49:16.0354] <slimshader>
If a function takes a value pointer as input

[19:49:20.0083] <slimshader>
can i pass a rootedvalue

[19:49:27.0428] <slimshader>
 * can i pass a rootedvalue pointer

[19:50:24.0351] <loganfsmyth>
yeah looks like that's an issue, I was just going off of Iain's recommendation

[19:50:41.0349] <slimshader>
Ok , may i ask one last question ?

[19:51:18.0120] <slimshader>
cx is the context ? what about element()

[19:51:27.0758] <slimshader>
Why is it called to construct a RootedValue

[19:52:30.0856] <iain>
Taking a step back: this is all because of garbage collection

[19:53:03.0744] <iain>
A `Value` might be a garbage-collected thing, like an object or a string

[19:53:32.0265] <slimshader>
Okok so RootedValue are like secured from GC ?

[19:53:47.0948] <loganfsmyth>
`RootedValue element(cx);` is declaring a new `element` variable, it is calling the `RootedValue` constructor

[19:53:50.0965] <slimshader>
The text say spidermonkey can GC at any moment

[19:53:59.0318] <slimshader>
 * The text says that  spidermonkey can GC at any moment

[19:54:07.0519] <iain>
So if a garbage collection gets triggered while you are looking at a value, you need to make sure that you've coordinated with the GC

[19:54:26.0633] <slimshader>
Okok yup make sense

[19:54:28.0453] <iain>
Because A) if you have the only copy of that value, you don't want it to be collected

[19:55:23.0310] <iain>
And B) if the GC moves the object that your value points to, you need to make sure that your pointer gets updated

[19:55:36.0311] <iain>
The way that you tell the GC that you're using a value is to root that value

[19:55:56.0494] <iain>
`RootedValue element(cx)` creates a new root.

[19:55:58.0267] <slimshader>
Yea or handle right ?

[19:56:04.0153] <slimshader>
Thats another way to deal with this ?

[19:56:13.0516] <iain>
Handles are related to roots

[19:56:25.0772] <iain>
Specifically, handles are pointers to roots

[19:56:33.0750] <slimshader>
Ok go it

[19:56:37.0483] <slimshader>
 * Ok got it

[19:56:51.0868] <iain>
When a GC happens, the garbage collector will walk through all the roots and trace everything that's reachable from there

[19:57:02.0452] <iain>
And if it moves anything, then it will update the roots

[19:57:07.0331] <iain>
But creating a root isn't free

[19:57:20.0961] <iain>
So once you have a root, you can pass a pointer to that root around

[19:57:27.0502] <iain>
(Which is a handle)

[19:57:43.0834] <slimshader>
Ok thats why having it out of the loops make more sense

[19:57:50.0256] <slimshader>
 * Ok thats why having it out of the loop make more sense

[19:57:55.0274] <iain>
Precisely

[19:58:32.0423] <slimshader>
Thanks alot for the help btw

[19:58:38.0335] <iain>
np

[19:58:41.0930] <iain>
This stuff is complicated

[19:58:49.0168] <iain>
Takes a while to wrap your head around

[19:58:58.0813] <slimshader>
So in the case of the getElementPure

[19:59:13.0125] <slimshader>
that ask for a Value (not rooted)

[19:59:21.0881] <slimshader>
Maybe its a internal function i should not use

[19:59:47.0764] <slimshader>
 getElement function takes a MutableHandleValue

[20:00:02.0526] <slimshader>
Maybe more suitable for what im trying to do

[20:00:11.0809] <slimshader>
 * getElement function takes a MutableHandleValue

[20:00:28.0799] <slimshader>
 * that takes a Value to set data (not rooted)

[20:01:17.0180] <iain>
In general, `Pure` means that the function will never GC, but might fail to return a value if it can't do so without potentially triggering a GC

[20:01:41.0715] <slimshader>
Okok

[20:01:45.0874] <iain>
See, for example, here: https://searchfox.org/mozilla-central/source/js/src/vm/TypedArrayObject.cpp#2079-2084

[20:02:59.0013] <slimshader>
Ok, may i ask you about element() ?

[20:03:05.0330] <slimshader>
Its killing me, LOOOL

[20:03:08.0738] <iain>
Sure

[20:03:19.0635] <slimshader>
How is this the constructor of a RootedValue

[20:04:29.0511] <slimshader>
like in : 
```
RootedValue element(cx);
```

[20:04:32.0908] <iain>
It's C++ syntax

[20:05:17.0887] <iain>
If you want to construct an instance on the stack, you can write `Type name(arg, arg, arg);`

[20:05:44.0753] <slimshader>
so creating a MutableHandleValue would be 
```
MutableHandleValue myMutableHandle(args);
```

[20:05:48.0344] <iain>
Which is similar to `Type name = new Type(arg, arg, arg)`, except the latter allocates new memory on the heap, and the former allocates it in the current stack frame

[20:07:19.0784] <iain>
The syntax is right, but MutableHandle is special

[20:08:45.0668] <iain>
A mutable handle is the address of a root, so we've done some operator overloading to make `&element` return a MutableHandleValue (assuming `element` is a RootedValue)

[20:09:27.0314] <iain>
That's what this beautiful ASCII art is about: https://searchfox.org/mozilla-central/source/js/public/RootingAPI.h#106-111

[20:09:31.0100] <slimshader>
Ok its like a pointer but for a root

[20:09:40.0708] <slimshader>
hehe

[20:11:38.0477] <slimshader>
so if i was to use https://searchfox.org/mozilla-central/source/js/src/vm/TypedArrayObject.cpp#2096

[20:11:51.0862] <slimshader>
getElement

[20:12:45.0310] <slimshader>
i need to pass (context,pointer to typpedarray object, pointer to mutableHandle Value)

[20:12:57.0256] <slimshader>
 * i need to pass (context,pointer to typpedarray object, pointer to mutableHandleValue)

[20:12:59.0339] <slimshader>
The function would place the data in the mutableHandle 

[20:13:15.0895] <slimshader>
and then i would call .get ->get on the mutableHandle  to retreive the data ?

[20:13:46.0104] <iain>
No, there's a simpler way

[20:13:47.0240] <slimshader>
 * i need to pass (context,pointer to typpedarray object, index,mutableHandleValue)

[20:13:56.0047] <slimshader>
 * The function would place the data in the MutableHandleValue

[20:14:08.0260] <iain>
You call `getElement(cx, typedArray, index, &element)`

[20:14:26.0803] <iain>
`element` is the `RootedValue` you created outside your loopo

[20:14:30.0805] <iain>
 * `element` is the `RootedValue` you created outside your loop

[20:14:58.0623] <iain>
`&element` creates a `MutableHandleValue` that points at that `RootedValue`

[20:15:09.0992] <slimshader>
ahhhhhhh ok 

[20:15:12.0669] <iain>
And `getElement` will store the element in the root

[20:15:22.0519] <iain>
And then you can just use that

[20:15:47.0521] <iain>
Most of the things you will want to do with the value will either take a `HandleValue` or a `Value*`

[20:15:56.0446] <slimshader>
```
 Handle<TypedArrayObject*> tobj = obj.as<TypedArrayObject>();
```

[20:16:15.0082] <slimshader>
Am i creatin my typedarrayobject the right way ^

[20:16:21.0660] <slimshader>
 * Am i creatin my TypedArrayObject the right way ^

[20:16:31.0114] <slimshader>
 * Am i creating my TypedArrayObject the right way ^

[20:17:01.0738] <iain>
You probably want `RootedTypedArrayObject tobj(cx, &obj.as<TypedArrayObject>())`

[20:17:50.0723] <slimshader>
Good old Root

[20:17:52.0695] <slimshader>
hehe

[20:18:38.0555] <iain>
(Unless you already have a `Handle<TypedArrayObject*>`, in which case you can just pass around the handle without rerooting)

[20:20:09.0927] <slimshader>
```
            Handle<TypedArrayObject*> tobj = obj.as<TypedArrayObject>();
            RootedValue element(cx);
            size_t len = tobj->length().get();
            for(size_t i = 0; i < len; i ++) {
              tobj->getElement(cx,tobj,i,&element);
              MOZ_LOG(sLogger, LogLevel::Info, ("Loop value : %i",element.toInt32()));
            }
```

[20:20:49.0577] <slimshader>
 * ```
Handle<TypedArrayObject*> tobj = obj.as<TypedArrayObject>();
RootedValue element(cx);
size_t len = tobj->length().get();
for(size_t i = 0; i < len; i ++) {
    tobj->getElement(cx,tobj,i,&element);
    MOZ_LOG(sLogger, LogLevel::Info, ("Loop value : %i",element.toInt32()));
}
```

[20:21:47.0539] <iain>
First line should probably root the object?

[20:22:07.0920] <iain>
 * You probably want `Rooted<TypedArrayObject*> tobj(cx, &obj.as<TypedArrayObject>())`

[20:22:09.0691] <slimshader>
RootedTypedArrayObject doesnt exist as a type i think

[20:22:59.0091] <iain>
Oh, yeah, I forgot to mention: we have a bunch of "convenience" typedefs

[20:23:13.0393] <iain>
But `Rooted<Value*>` and RootedValue are the same thing

[20:23:24.0250] <slimshader>
taking the address of a temporary object of type 'JS::Handle<TypedArrayObject *>' [-Waddress-of-temporary]
 0:12.63             Rooted<TypedArrayObject*> tobj(cx, &obj.as<TypedArrayObject>())

[20:23:33.0813] <slimshader>
Wow haha

[20:23:41.0819] <slimshader>
i want to cry but its also fun

[20:24:12.0937] <iain>
See here: https://searchfox.org/mozilla-central/source/js/public/TypeDecls.h#72-119

[20:25:27.0886] <iain>
(I think there's generally a consensus that this was a mistake, but not such a big mistake that anybody has been motivated to go back and rewrite all the code that uses these typedefs)

[20:26:07.0247] <slimshader>
Mmm so it seems like i took the address of a temporary object

[20:26:12.0050] <slimshader>
thats not good

[20:26:26.0212] <iain>
Where are you getting `obj` from?

[20:26:37.0739] <slimshader>
Im inside interpreter.cpp

[20:26:39.0274] <slimshader>
js/vm

[20:26:45.0102] <slimshader>
its in the setElem case

[20:26:56.0513] <slimshader>
of the crazy big loop with all the macros in it

[20:27:02.0259] <slimshader>
the REGS stuff

[20:27:18.0956] <iain>
Oh, it's already rooted

[20:27:32.0330] <slimshader>
Ah ok but its just a obj

[20:27:46.0816] <slimshader>
And im checking if obj is typedarray

[20:27:59.0659] <slimshader>
```
bool istyped = obj->is<TypedArrayObject>();
```

[20:28:03.0621] <slimshader>
like this

[20:28:15.0332] <slimshader>
could i just getElement on obj no need to convert to tobj

[20:28:27.0163] <iain>
Yes

[20:28:29.0942] <slimshader>
omg i lost all this time if thats the case

[20:28:30.0960] <slimshader>
LOL

[20:28:47.0926] <iain>
You still needed to understand rooting for the elements

[20:29:01.0109] <slimshader>
True and im happy i learn about it

[20:29:05.0135] <slimshader>
thanks again

[20:29:07.0982] <iain>
np

[20:29:39.0635] <iain>
My experience is that if you go back and read the smdoc comment about rooting every time you get confused, then sooner or later it all starts making sense

[20:29:51.0176] <slimshader>
Thanks

[20:29:55.0783] <slimshader>
trying with obj now

[20:30:40.0687] <slimshader>
But obj is a JSobject so there is no getElement seems like

[20:31:04.0696] <slimshader>
😩😩😩😩

[20:31:10.0961] <iain>
Oh, right, you need to convert it

[20:31:15.0558] <iain>
Okay, I lied, you do need the root

[20:31:39.0852] <slimshader>
okok

[20:31:53.0396] <slimshader>
So im back to this  [-Waddress-of-temporary]

[20:32:09.0134] <iain>
`Rooted<TypedArrayObject*> tobj(cx, &obj->as<TypedArrayObject>());`?

[20:33:02.0387] <slimshader>
Ok memory adress error is gone

[20:33:11.0531] <slimshader>
now it says  no matching member function for call to 'getElement'

[20:33:21.0388] <slimshader>
but i use -> not . to getElement

[20:33:52.0883] <slimshader>
So thats another thing i need to settle down and understand -> is for accessing from a pointer and . from the variable directly ?

[20:35:06.0848] <loganfsmyth>
I think you had an extra `tobj` in your function params?

[20:35:30.0566] <iain>
Broadly speaking, `*x` means "dereference this pointer", `x.y` means "get the y field from this object", and `x->y` means `(*x).y`

[20:35:42.0860] <slimshader>
so compiler is telling me first : 
Interpreter.cpp(3132,21): error: no matching member function for call to 'getElement'
but then : 
/TypedArrayObject.h(130,8): note: candidate function template not viable: requires 3 arguments, but 4 were provided

[20:35:49.0144] <iain>
But this is complicated by the fact that you can overload the behaviour of `*` in C++

[20:36:21.0656] <loganfsmyth>
> requires 3 arguments, but 4 were provided

[20:36:29.0107] <loganfsmyth>
you have an extra `tobj` in the function params

[20:36:41.0567] <loganfsmyth>
`tobj->getElement(cx, i, &element);`

[20:37:04.0236] <slimshader>
True

[20:37:06.0875] <slimshader>
but now : 
note: candidate template ignored: couldn't infer template argument 'allowGC'

[20:37:25.0118] <iain>
Actually I think you might want `TypedArrayObject::getElement(cx, tobj, index, &element)`

[20:37:56.0652] <slimshader>
Yup this : 
https://searchfox.org/mozilla-central/source/js/src/vm/TypedArrayObject.cpp#2119

[20:38:19.0589] <iain>
Er, wait, that might be wrong

[20:38:22.0620] <loganfsmyth>
iain: From what I can see, there is no static for that

[20:38:32.0194] <loganfsmyth>
slimshader: what are you actually doing with all this?

[20:38:35.0707] <iain>
TypedArrayObjects in particular are a little bit complicated

[20:38:46.0934] <slimshader>
Im a game dev

[20:38:50.0428] <slimshader>
and i work in unity

[20:39:04.0555] <slimshader>
And i do webgl builds

[20:39:10.0364] <iain>
I believe you want `tobj->getElement<NoGC>(cx, index, &element)`

[20:39:12.0198] <slimshader>
and it uses web asembly

[20:39:33.0262] <iain>
(Or alternatively `AllowGC`)

[20:39:43.0258] <slimshader>
What is NoGC

[20:40:15.0973] <slimshader>
Im trying to automate some tests to check how data is sent to webasembly

[20:40:32.0757] <slimshader>
i also just want to learn C++

[20:40:38.0200] <slimshader>
its been to long im avoiding it

[20:40:39.0038] <slimshader>
hehe

[20:40:44.0189] <iain>
It's some template wizardry so that the same function can be used in contexts where we are / aren't allowed to trigger a GC

[20:41:43.0013] <iain>
See here: https://searchfox.org/mozilla-central/source/js/src/gc/MaybeRooted.h#7-11

[20:42:07.0379] <iain>
(Probably `AllowGC` is better)

[20:43:57.0361] <loganfsmyth>
modifying the interpreter seems pretty drastic for changing test behavoir

[20:44:29.0784] <slimshader>
 note: candidate function template not viable: no known conversion from 'JS::RootedValue *' (aka 'Rooted<JS::Value> *') to 'typename MaybeRooted<Value, (AllowGC)0>::MutableHandleType' (aka 'FakeMutableHandle<JS::Value>') for 3rd argument

[20:44:36.0546] <slimshader>
Yea its really overkill

[20:44:55.0112] <slimshader>
but i wanted to try playing aroud with C++

[20:45:04.0220] <slimshader>
its a step intro to C++ i must say

[20:45:14.0141] <slimshader>
 * its a steep intro to C++ i must say

[20:46:37.0978] <loganfsmyth>
Where in this file are you adding your logic? https://searchfox.org/mozilla-central/source/js/src/vm/Interpreter.cpp

[20:47:31.0848] <slimshader>
https://searchfox.org/mozilla-central/source/js/src/vm/Interpreter.cpp#3080

[20:48:32.0320] <loganfsmyth>
```
if (!tobj->getElement<AllowGC>(cx, index, &element)) {
  goto error;
}
```
then is what should probably work

[20:48:50.0474] <loganfsmyth>
assuming before you had `tobj->getElement<NoGC>(cx, index, &element)`?

[20:48:59.0060] <slimshader>
Yep

[20:49:26.0446] <slimshader>
Is this like a try catch ?

[20:49:54.0076] <loganfsmyth>
pretty much

[20:50:29.0011] <slimshader>
if it returns false you throw error

[20:50:45.0378] <iain>
SM doesn't use C++ exceptions

[20:51:40.0681] <iain>
Instead, the convention is that anything that can fail takes `cx` as its first argument and returns false/nullptr if it fails

[20:51:51.0243] <iain>
Information about the exception is stored in the context

[20:51:54.0389] <loganfsmyth>
In this case it would pretty much only fail if you were working with a `UInt64Array`, and it failed to allocate a new `bigint`

[20:52:23.0055] <iain>
And then you have to check the return value of any fallible function you call, and propagate the error if needed

[20:52:56.0749] <iain>
For the interpreter specifically, this means jumping here: https://searchfox.org/mozilla-central/source/js/src/vm/Interpreter.cpp#4435

[20:53:11.0832] <slimshader>
Okok

[20:53:18.0000] <loganfsmyth>
normally in most of the codebase this is done as `return false;` which is why I asked about the specific line number. Inside that one function, you have to do `goto error;` instead

[20:53:42.0441] <slimshader>
Its a massive function LOL

[20:54:29.0400] <slimshader>
Im heading out thank you all for the knowledge

[20:55:10.0068] <loganfsmyth>
one last FYI is that not all code will end up calling that in the place you added

[20:55:22.0347] <loganfsmyth>
if SpiderMonkey decided to optimize the code more, that would not run

[20:55:24.0438] <slimshader>
im also working on a JS based solution to catch the set on the array that might be a easier way to achieve what i want, but i love to learn new stuff

[20:55:39.0327] <loganfsmyth>
seems like a better approach :)

[20:56:18.0130] <slimshader>
Yea i disabled JIT yesterday

[20:56:22.0139] <loganfsmyth>
cool

[20:56:23.0368] <slimshader>
to fix that

[20:56:36.0693] <slimshader>
Thanks again :)

[23:39:11.0662] <YaLTeR>
Hi! I'm adding profiling labels to GJS. I'm trying to find a way to get the current filename and line number given a `JSContext`, is that possible somehow?

[00:08:32.0131] <YaLTeR>
JS calls C code, and I'm adding a profiling label frame in the GJS function that calls the C code. But I want to add JS filename and line number to the dynamic string too

[00:09:07.0505] <arai>
YaLTeR: here's the code that fills error information for error report, that retrieves the current filename etc  https://searchfox.org/mozilla-central/rev/6a023272d590409c80458d373986e379b3ad86f4/js/src/vm/ErrorReporting.cpp#172-195

[00:09:13.0572] <arai>
so you can use the same way

[00:10:27.0036] <arai>
basically, it uses FrameIter (iterate over the JS frames), and get the inner most frame, and use its filename/line/column

[00:10:45.0112] <arai>
FrameIter's definition is here https://searchfox.org/mozilla-central/rev/6a023272d590409c80458d373986e379b3ad86f4/js/src/vm/FrameIter.h#197-214

[00:11:20.0810] <arai>
there's some variants, depending on the target (what to iterate/what to skip)

[00:11:31.0542] <arai>
so choose based on your purpose

[00:13:51.0385] <YaLTeR>
arai: are vm headers accessible from the outside? I don't have them in /usr/include/mozjs-78

[00:14:00.0843] <arai>
oh

[00:14:25.0798] <arai>
sorry I missed that it's embedding scenario

[00:18:11.0285] <arai>
is it performance critical?  what I can think of is to retrieve the full backtrace and perform some string operation to get the inner most frame

[00:19:23.0385] <arai>
(or temporarily report dummy error, and get the error report and its filename/line, and clear the exception

[00:19:26.0221] <YaLTeR>
I had the idea to put it into the profiler label, which would be performance-critical, but I'm no longer sure that's useful to do

[00:21:25.0811] <arai>
oh, I find `JS::DescribeScriptedCaller`

[00:21:51.0752] <arai>
YaLTeR: https://searchfox.org/mozilla-esr78/rev/e41f922bfb02e00f584724aa3f716878bedf1679/js/src/jsapi.h#2813-2823

[00:22:50.0674] <YaLTeR>
that sounds like exactly what I need!

[00:22:53.0649] <YaLTeR>
Thanks, I'll try it

[00:22:55.0629] <arai>
example usage: https://searchfox.org/mozilla-esr78/rev/e41f922bfb02e00f584724aa3f716878bedf1679/dom/base/Document.cpp#3821-3827

[07:51:42.0313] <tcampbell>
slimshader: I'm late to the party, but here is some other write-ups about Rooted too: https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr78/docs/GC%20Rooting%20Guide.md

[13:52:23.0573] <slimshader>
tcampbell: thanksss

