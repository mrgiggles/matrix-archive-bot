2020-03-01
[12:27:11.0222] <Waldo>
For anyone who wants in on that coat-of-arms stuff yulia|PTO mentioned awhile back here, this is a good way to get in on the ground floor, cheap: https://twitter.com/sarahemclaugh/status/1234175194677284865?s=19


2020-03-02
[02:08:55.0536] <wingo>
what is the equivalent of "arc diff HEAD^" with moz-phab?

[02:09:12.0537] <wingo>
(i use cinnabar but that's not relevant i think)

[02:10:13.0818] <emilio>
wingo moz-phab HEAD~

[02:10:26.0590] <wingo>
"diff" is a moz-phab command?

[02:10:30.0423] <emilio>
(IIUC)

[02:10:41.0948] <wingo>
not in help tho.  weird

[02:11:24.0813] <emilio>
I think `submit` is the command name but it is default so you can omit it

[02:11:49.0107] <wingo>
submit can update an existind patch?  cool, didn't know that

[02:12:23.0339] <wingo>
cool

[02:12:26.0658] <wingo>
thanks emilio :-))

[06:59:01.0663] <tcampbell>
jandem: If I use nodejs to run configure I get the same slowdown =\

[07:00:30.0165] <jandem>
tcampbell  hm weird 

[07:15:53.0512] <jandem>
tcampbell want to mention that in the bug? 

[07:17:12.0203] <tcampbell>
jandem: will do

[07:18:08.0140] <tcampbell>
I am trying to play with nodejs stuff and think I'm at my limit of understand weird unix pipe things. I'm not sure why sub- sub-processes are affected so much

[08:03:52.0415] <tcampbell>
the work-around for those following along is to run `ulimit -a 1024` in your vscode terminal and the configure step will be 3x faster

[09:01:31.0283] <jandem>
`Closing link: [Server shutdown] Failed to connect: Connection refused ` feels so weird after all these years

[09:01:43.0267] <jandem>
/me goes cancel his irccloud subscription

[09:02:13.0572] <mgaudet>
/me does same

[09:02:48.0255] <mgaudet>
> <@tcampbell:mozilla.org> the work-around for those following along is to run `ulimit -a 1024` in your vscode terminal and the configure step will be 3x faster

In your chat with the #build people, did the suggestion for a fix from their end come up? Seems like something that ought to at least be on their backlog? 

[09:04:09.0795] <jandem>
froydnj  is working on a patch for mach I think

[09:04:36.0693] <froydnj>
bug 1619339 if you want to follow along

[09:04:37.0872] <Botzilla demo>
https://bugzil.la/1619339 — NEW (nobody) — set max number of files from within mach prior to exec'ing python

[09:04:40.0765] <mgaudet>
ah, KK :) Thanks! 

[09:05:14.0240] <froydnj>
if people want to try the patch there and report varying amount of successes, that would help find corner cases :)

[09:05:42.0659] <mgaudet>
Of course, I'd need to actually finally get myself to building with `mach` first. 

[09:06:43.0176] <tcampbell>
mgaudet: doooo it

[09:06:58.0464] <tcampbell>
`./mach jit-test` is so convient

[09:07:27.0731] <froydnj>
mgaudet: I am almost frightened to ask what you *do* build with

[09:07:27.0956] <tcampbell>
and things like `./mach --debugger=rr jit-test bug1234` work as expected

[09:07:54.0310] <mgaudet>
I have a keyboard macro system that's been serving me super well, combined with four or so different objdirs

[09:08:10.0707] <froydnj>
("`make`" is acceptable; "I wrote my own cmake build system" is not)

[09:08:30.0871] <mgaudet>
(so I type `;debug`, and get `../configure --enable-warnings-as-errors  --enable-tests --disable-optimize --enable-debug --enable-build-backends=CompileDB,RecursiveMake  --enable-ccache=ccache --enable-fuzzing --enable-clang-plugin` an instant later; 

[09:08:32.0803] <mgaudet>
 * (so I type `;debug`, and get `../configure --enable-warnings-as-errors --enable-tests --disable-optimize --enable-debug --enable-build-backends=CompileDB,RecursiveMake --enable-ccache=ccache --enable-fuzzing --enable-clang-plugin` an instant later;)

[09:09:00.0328] <mgaudet>
(with a feature-picker atop this so I can enable and disable features quickly) 

[09:09:20.0625] <tcampbell>
mgaudet: you can dump all that into mozconfig files

[09:09:33.0127] <mgaudet>
I've never developed any level of comfort with `mozconfigs`, which is on me.

[09:09:56.0408] <mgaudet>
(like, how do you quickly switch from an opt-debug build to a real debug build for debugging an issue?) 

[09:10:11.0267] <mgaudet>
(I just `cd ../build_DBG.OBJ; make; <test>`) 

[09:10:16.0390] <froydnj>
mozconfigs allow you to specify an associated objdir

[09:10:24.0309] <jandem>
`MOZCONFIG=foo ./mach ...`

[09:10:36.0648] <tcampbell>
my less-than-ideal system is Ctrl+R dbg to find my `export MOZCONFIG=...`

[09:10:47.0071] <nox>
Interesting build discussions around here. Myself, I wish SM was a crate in mozilla-central itself, consumed as a crate by the rest of Gecko, completely free of mozbuild concepts.

[09:11:12.0010] <nox>
tcampbell: Yesterday I was like "maybe my build is slow because of VS Code", thanks for the lifehack.

[09:11:20.0143] <froydnj>
I have emacs keybindings to invoke `mach` with the right `MOZCONFIG` set

[09:11:25.0769] <tcampbell>
I usually set my default mozconfig file to something that says FORGOT_TO_SET_MOZCONFIG_ENVIRONMENT so I don't forget to set one

[09:11:32.0934] <mgaudet>
> <@froydnj:mozilla.org> ("`make`" is acceptable; "I wrote my own cmake build system" is not)

I have many a cut from `cmake`, not headed back down that road 

[09:11:46.0695] <froydnj>
mgaudet++

[09:12:15.0598] <mgaudet>
(Weirdly though, me explaining CMake variable scopes is the top hit post on my blog tho?) 

[09:12:35.0938] <froydnj>
SM being a rust crate would require building C code from `build.rs` which is a small dumpster fire

[09:14:29.0626] <tcampbell>
(Ideally I'd have a little vscode extension to switch my active mozconfig and show me current one)

[09:15:36.0311] <jandem>
hm maybe we could put it in the bash prompt

[09:21:20.0862] <nox>
froydnj: Emacs bindings for mozconfigs? Clearly you just need more keys https://deskthority.net/download/file.php?id=17657&t=

[09:21:51.0018] <nox>
froydnj: Not really, we are doing this for Servo obviously, and it's working great.

[09:22:17.0807] <nox>
froydnj: The moment you have frontend code in Rust will make our work way way more painful though (so far we have avoided needing to build Rust code from SM, but that will not be avoidable then).

[09:22:36.0532] <nox>
(This is why Servo doesn't make use of Cranelift, incidentally.)

[13:28:16.0720] <iain>
sfink: ping

[13:28:31.0861] <iain>
 * sfink: ping

[14:36:53.0023] <sfink>
iain: pong

[14:38:57.0551] <iain>
sfink: I have a question about hazards

[14:39:17.0467] <iain>
The irregexp code I'm importing has this code: https://searchfox.org/mozilla-central/source/js/src/new-regexp/regexp-compiler.cc#2307-2341

[14:39:59.0219] <iain>
Which is calling a sequence of passes using a function pointer

[14:40:20.0123] <iain>
Is there a way to get the hazard build to see through the function pointer?

[14:40:38.0684] <iain>
I know I can just assert that the function pointer doesn't GC

[14:40:46.0935] <sfink>
do you know the possible set of functions?

[14:41:01.0474] <sfink>
oh, wait

[14:41:03.0936] <sfink>
it's right there in the code

[14:41:12.0175] <iain>
Yeah

[14:41:41.0947] <iain>
Can I hook that up somehow?

[14:42:05.0575] <sfink>
I suppose you could do... uh... how do I type multiline stuff here?
#ifdef XGILL_PLUGIN
EmitAtomNonLetter(...);
EmitSimpleCharacter(...);
#endif

[14:42:32.0231] <sfink>
and then suppress analysis for the real call

[14:42:36.0986] <sfink>
but that's pretty gross

[14:44:25.0431] <iain>
It doesn't actually seem like this code needs function pointers. I could also just rewrite it to have a few explicit calls

[14:44:50.0842] <iain>
Since it doesn't seem like we have an easy way of telling the hazard analysis "for this function pointer, here's the set of things it can call"

[14:45:01.0131] <sfink>
another gross option would be to do
class Emitter { virtual emit(...) = 0; }; class EmitAtomNonLetter : public Emitter { override emit(...) { ... } }; etc. and then call through a vtable

[14:45:52.0023] <sfink>
I've often contemplated adding such a facility, and even prototyped it once, but I was doing it for slightly more complex cases where the function pointer was being passed in to std::function apparatus and called one or two levels deep.

[14:46:41.0099] <sfink>
"such a facility" meaning to track the set of possible functions that a function pointer could hold, and treating it as a call to any of them.

[14:47:15.0351] <iain>
Yeah, seems like it could get gross pretty fast

[14:47:35.0646] <iain>
The slight twist here is that this is code from V8, and I am doing my best not to get out of sync with upstream, so changing this to satisfy the hazard analysis is one more patch for me to upstream

[14:47:40.0793] <iain>
But I already have a bunch of those

[14:47:42.0520] <sfink>
right

[14:47:57.0099] <sfink>
wait, upstream will accept crazy stuff like this?

[14:48:11.0236] <sfink>
I guess removing the function pointer would probably be acceptable

[14:48:18.0267] <iain>
Yeah, that's what I'm thinking

[14:48:36.0139] <iain>
There's no real justification for a function pointer here

[14:48:46.0019] <sfink>
yeah, after reading it I agree

[14:50:09.0639] <sfink>
how common is this pattern? I don't see any more in this file

[14:50:37.0278] <iain>
This is the only place

[14:50:55.0440] <iain>
The only other function pointer in irregexp is being used for sorting

[14:53:50.0511] <iain>
There are a few other function pointers being used inside the implementation of ICU that don't leak past the API boundary

[14:54:27.0371] <iain>
This is the only one where I didn't feel comfortable just marking them in annotations.js and calling it a day

[14:54:27.0933] <sfink>
yeah, ICU is a tangled mess that I freely add suppressions for


2020-03-03
[18:49:21.0675] <Waldo>
> <@evilpie:mozilla.org> Waldo: I've been looking into some WPT failures recently. This comes up related to readable streams: https://jgraham.github.io/wptdash/?bugComponent=core%3A%3Ajavascript+engine

This is being patched in bug 1619485 now, for the peanut gallery.

[18:49:23.0226] <Botzilla demo>
https://bugzil.la/1619485 — ASSIGNED (Waldo) — new ReadableStream().getReader({ mode: "byob" }) should throw TypeError

[06:19:46.0941] <nbp>
jandem: Explaining the name change … hum? I presume, this is a name which was mostly rejected by the JS community, which carry all the joy of the ECMA and open minded aspect of the ECMA committee. 😂

[06:20:05.0897] <nbp>
 * jandem: Explaining the name change … hum? I presume, this is a name which was mostly rejected by the JS community, which carry all the joy and open minded aspect of the ECMA committee. 😂

[06:21:31.0903] <jandem>
nbp: I meant it's probably worth telling people that Visage from the last newsletter -> SmooshMonkey

[06:22:00.0899] <wingo>
is there a spidermonkey newsletter? :)

[06:22:33.0430] <nbp>
Yes, jandem started agregating and publishing them.

[06:22:54.0832] <nbp>
They are available on https://mozilla-spidermonkey.github.io/blog/

[06:23:02.0953] <wingo>
nice!

[08:09:04.0250] <wingo>
silly me, thinking that FixedList.allocateArray would run constructors 🤷‍♂️

[08:09:24.0589] <wingo>
 * silly me, thinking that TempAllocator.allocateArray would run constructors 🤷‍♂️

[08:25:12.0118] <froydnj>
it runs them temporarily

[08:26:40.0581] <wingo>
jandem: quick dumb question: what is the alignment of LInstruction?  is it uintptr_t (so maybe 4 bytes on 32-bit machines) or 8 bytes like most other things?

[08:27:55.0369] <wingo>
just asking because i realized a LAllocation* can be only uintptr_t aligned

[08:30:32.0060] <tcampbell>
wingo LInstruction shouldn't have any special requirements, so will be alignas(void*)

[08:30:38.0214] <tcampbell>
 * wingo: LInstruction shouldn't have any special requirements, so will be alignas(void*)

[08:30:50.0741] <tcampbell>
 * wingo:  LInstruction shouldn't have any special requirements, so will be alignas(void*)

[08:31:26.0368] <wingo>
tcampbell: tx!

[08:31:30.0048] <tcampbell>
it is just bump-allocated on a lifo-alloc

[08:31:36.0460] <tcampbell>
 * it is just bump-allocated on a LifoAlloc

[08:35:48.0114] <tcampbell>
hmm.. JSFunction / JSScript initialization order still has surprises.. :(

[10:02:50.0492] <mgaudet>
woah. I just figured out what the `estimates: ` lines from a try push are starting to report. I feel cool things coming down the pipe with this feature. 

[10:03:04.0869] <mgaudet>
Bug 1590410 is what clued me in

[10:03:05.0834] <Botzilla demo>
https://bugzil.la/1590410 — RESOLVED (sfraser) — 'mach try fuzzy' with show-estimates, show percentile

[10:41:37.0917] <tcampbell>
mgaudet: ping

[10:42:06.0049] <mgaudet>
tcampbell: pong

[12:47:10.0483] <evilpie>
I forgot how annoying it is repeatedly build the browser

[13:17:39.0363] <lth>
did anyone hear from jason?  (apropos tornadoes touching down in nashville)

[13:21:53.0811] <mccr8>
He tweeted 18 minutes ago.

[13:23:56.0777] <tcampbell>
He's busy in js-frontend channel. Scary news though

[14:22:15.0950] <bzbarsky>
protoHazardShape is long-gone, not just renamed, right?

[14:23:03.0524] <bzbarsky>
/me pretty sure

[15:37:53.0841] <Waldo>
tcampbell: 🙌


2020-03-04
[16:04:34.0431] <tcampbell>
Sooon

[03:41:17.0110] <jseward>
Greetings, SM folks!  Q: do we (mozilla) have an AVL tree, R-B tree, or other balanced tree implementation anywhere in-tree?

[03:43:35.0106] <Ms2ger [~half-time dedication]>
We've got a splay tree if that helps

[03:55:27.0066] <jseward>
Mhm, no, I think I prefer a no-mutate-on-query kind of tree

[07:00:29.0155] <nbp>
/me re-downloading Zoom … going to be late at the meeting :/

[07:23:19.0427] <Benjamin Bouvier>
/me sick, so no voice today

[07:47:52.0740] <Waldo>
The ambiguity of emoji rears its ugly head, "downcast face with sweat" fits, but ":shamed:" as the thing Matrix wants to invoke it is really not.

[07:50:11.0703] <nbp>
Yoric: if you have time to join the WebVM meeting, BinAST is being discussed.

[07:50:17.0836] <Benjamin Bouvier>
is sick-shaming a thing

[07:50:44.0034] <Waldo>
I dunno, but I can make shamming [sic] a thing!

[07:50:45.0886] <RyanVM>
something something "In the US..."

[07:51:34.0003] <froydnj>
nox: https://twitter.com/CatstreyDave/status/1212514580439732224

[07:58:52.0577] <Benjamin Bouvier>
but ragnarok is caused by Loki, so we should think about reviving LokiMonkey

[07:59:15.0951] <Benjamin Bouvier>
(sorry, backchannelling an internal meeting)

[08:00:52.0952] <Ms2ger [~half-time dedication]>
Y'all use Zoom now?

[08:01:06.0780] <jandem>
yep, we switched from vidyo to zoom

[08:02:19.0200] <Ms2ger [~half-time dedication]>
Can hardly be worse, I suppose

[08:02:41.0884] <Benjamin Bouvier>
at least zoom natively works on ubuntu without env variable hacks

[08:45:55.0834] <allstarschh>
sfink:   ping

[08:57:21.0934] <iain>
@allstarschh:mozilla.org: I believe he is on PTO

[08:58:36.0318] <iain>
(Although maybe I'm misremembering what people were saying on our call this morning...)

[08:59:59.0810] <Waldo>
I think that might -- might? -- only have been yesterday.

[09:06:27.0366] <allstarschh>
yeah, I saw his name just removed "|pto" , just to check

[09:16:29.0007] <bzbarsky>
evilpie: I asked for your review on that UTF8Array thing, but obviously feel free to punt if you think someone else should review

[09:16:32.0046] <Waldo>
He can't leave on PTO for too long, I have a scintillating review for him to do.  😁

[09:16:39.0015] <bzbarsky>
/me tried hard to not try to rearchitect the whole mess....

[09:17:13.0653] <evilpie>
bzbarsky: no sorry. I will do it. I actually started working on this and then got annoyed with having to introduce void**

[09:17:29.0872] <Waldo>
Not a time-critical one or anything, just it's in the back of the mind and stares back at me every time I stare into the aby^H^H^H`hg wip`

[09:17:43.0406] <bzbarsky>
Yeah, void** sucks, cause you can't pass char** to void**...

[09:17:51.0480] <bzbarsky>
So you have to pass as void* and then cast to char**

[09:18:29.0013] <Waldo>
froydnj: How soon til we can use/depend on `char8_`?  👀

[09:18:36.0446] <Waldo>
 * froydnj: How soon til we can use/depend on `char8_t`?  👀

[09:18:56.0920] <froydnj>
Waldo: is that C++17?

[09:18:59.0341] <bzbarsky>
And templating on the char type also sucks because of the dynamic branching on the other char type

[09:19:04.0229] <bzbarsky>
so it all kinda sucks

[09:19:47.0438] <Waldo>
froydnj: C++20!

[09:19:50.0497] <Waldo>
/me looks innocent

[09:19:56.0816] <bzbarsky>
(In a sane world, we would template on the ArgumentsAre* enum, have a trait that tells us what char type goes with which value of the enum so we can take the right type automatically, etc)

[09:20:12.0850] <froydnj>
Waldo: um, that is a ways away, think

[09:20:19.0373] <bzbarsky>
But that was exactly the rearchitecting I did not wish to do

[09:20:19.0556] <Waldo>
In a sane world we would only accept UTF-8.  ;-)

[09:20:28.0210] <bzbarsky>
Fine by me!

[09:20:38.0073] <bzbarsky>
That is why I am adding the UTF8Array thing

[09:20:52.0303] <Waldo>
That's a pond I will probably try to boil at some point, if incrementally.

[09:20:59.0612] <bzbarsky>
So I stop converting char* to UTF16 on the Gecko side just so SpiderMonkey can convert it back to UTF8

[09:21:10.0347] <bzbarsky>
Because that is Dumb (TM)

[09:35:53.0555] <sfink>
@allstarschh: oops, sorry, I'm not on PTO today but something did come up that I had to handle, and I forgot about our meeting.

[10:55:03.0265] <shu>
i will dumb where i please!

[11:29:26.0943] <sfink>
would you dumb on a boat?

[11:29:31.0152] <sfink>
would you  dumb with a goat?

[13:24:14.0261] <Waldo>
@anba You remember offhand if ECMA-402 has ever considered exposing a way to learn about default locale changes?  I'm reviewing a patch now where I kind of want one, tho it's mostly a polish thing where "it ought to behave this way in theory".  (I guess there would be complications if we ever changed from one default locale to one per type of functionality.)

[13:24:29.0282] <Waldo>
 * anba: You remember offhand if ECMA-402 has ever considered exposing a way to learn about default locale changes?  I'm reviewing a patch now where I kind of want one, tho it's mostly a polish thing where "it ought to behave this way in theory".  (I guess there would be complications if we ever changed from one default locale to one per type of functionality.)

[13:31:33.0014] <Waldo>
Definitely for now the issue is reasonably just ignored, but I dislike knowingly creating little burrs in the code/product like this if I can avoid them.

[14:44:08.0926] <iain>
Waldo: ping

[14:51:20.0551] <sfink>
oops. I just pushed something kinda platform-sensitive without testing on all platforms.

[14:51:25.0074] <sfink>
autoland is my try

[14:58:36.0067] <iain>
Is jonco on pto? Does anybody know when he'll be back?

[15:03:17.0869] <mccr8>
iain: His bugzilla user name says March 12

[15:11:25.0711] <iain>
Thanks!

[15:37:05.0428] <iain>
Waldo: unping

[15:40:48.0806] <Harald Kirschner :digitarald>
Spreading the SpiderMonkey ❤️ on hacks with jimb 's amazing article: https://hacks.mozilla.org/2020/03/future-proofing-firefoxs-javascript-debugger-implementation/

[15:47:09.0470] <Waldo>
iain: Tease.

[15:47:56.0118] <Waldo>
/me chills at Peet's while waiting for a spot of bike repair to be completed, after a bike fitting

[15:52:12.0014] <iain>
Waldo: It was going to be a question about what could go wrong if we had to reinterpret_cast between char16_t and uint16_t, but then I found a better approach

[15:52:25.0446] <Waldo>
lol

[15:53:36.0375] <Waldo>
As it happens, I _think_ the answer may be that nothing actually goes wrong.  `char16_t` is specified to have the same representation as `uint_least16_t`, and I want to say -- but would have to double-check -- that `uint_least16_t` and `uint16_t` (if the latter exists) are required to share the same representation.

[15:54:10.0558] <Waldo>
But I'm not 100% certain you couldn't have two _different_ unsigned 16-bit representations for them, if you were evil, that were incompatible.

[15:54:37.0760] <Waldo>
Most any normal setup would probably have them be the exact same type, but I'm not absolutely sure it's required.

[15:55:17.0526] <Waldo>
Bike's ready, off for a little walking back for it.


2020-03-05
[16:01:34.0603] <karlt>
-fno-strict-aliasing ftw

[16:06:57.0209] <Waldo>
Lies. That is what is known as #fakelanguage. 

[16:07:52.0192] <Waldo>
Not to mention it ends up killing a bunch of optimization opportunities knowing a write to a pointer can't affect other values. 

[16:08:43.0578] <karlt>
would char16_t be permitted to alias uint16_t?

[17:06:29.0993] <Waldo>
Depends whether uint16_t and uint_least16_t are required to have identical representation. I'm not sure. 

[20:40:27.0673] <katelyngadd>
btw, the docs list http://ftp.mozilla.org/pub/spidermonkey/ as the place to get source tarballs for SM but that doesn't seem to have been true for a while (https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Getting_SpiderMonkey_source_code)

[20:40:41.0916] <katelyngadd>
I'd fix the docs page myself but I don't know what the correct URL is

[21:10:30.0190] <ptomato>
katelyngadd: there are no more officially sanctioned source tarballs for spidermonkey, unfortunately

[21:10:43.0801] <ptomato>
on https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples/blob/esr68/docs/Building%20SpiderMonkey.md it's recommended to build it from the firefox tarball

[21:11:32.0701] <ptomato>
unofficially, you can search for "pkg" jobs on https://treeherder.mozilla.org/#/jobs?repo=mozilla-esr68&searchStr=pkg

[21:38:03.0096] <katelyngadd>
i just ended up cloning the whole tree

[21:39:48.0886] <katelyngadd>
the build instructions here are wrong too, or omitting some steps. there's no configure.in

[21:39:49.0985] <katelyngadd>
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Build_Documentation

[21:40:10.0735] <katelyngadd>
i'm guessing if i follow the build steps for the whole tree maybe one will be generated from something else

[00:48:30.0105] <nox>
ptomato: There are still SM(pkg) builds and Servo relies on the tarballs.

[00:56:45.0695] <katelyngadd>
oof, finished a full build before discovering the notes further down about destination directories so i have to configure and full build again :( i guess i should heavily edit this guide

[00:59:36.0932] <yulia|PTO>
katelyngadd: there should be a configure.in https://searchfox.org/mozilla-central/source/js/src/configure.in

[01:00:24.0789] <yulia|PTO>
its in js/src

[01:00:27.0218] <katelyngadd>
i found one but it's in the root of the tree

[01:00:44.0709] <yulia|PTO>
which directory are you in rn?

[01:01:17.0408] <katelyngadd>
i followed the insns, so i made an .OBJ dir and ran configure from inside it

[01:01:27.0321] <katelyngadd>
i used the configure.in from the root of the checkout and that seemed to work

[01:01:44.0949] <katelyngadd>
it passed my options down into the js configure from what it seemed to say in --help

[01:01:48.0154] <yulia|PTO>
did you get the full firefox install?

[01:01:53.0857] <katelyngadd>
i just cloned the hg repo

[01:01:57.0449] <yulia|PTO>
ok

[01:02:09.0557] <yulia|PTO>
and, if you cd into js/src, do you see a configure.in there?

[01:02:25.0994] <katelyngadd>
yeah

[01:02:45.0374] <katelyngadd>
so i guess the instructions work from js/src/x but not js/x

[01:02:50.0223] <katelyngadd>
i may have just misread them

[01:02:52.0080] <yulia|PTO>
yes

[01:03:02.0024] <yulia|PTO>
try creating the directory in js/src

[01:03:03.0116] <katelyngadd>
there being 'configure' files in js/ may have misled me

[01:03:10.0441] <yulia|PTO>
it is confusing :/

[01:03:29.0735] <yulia|PTO>
but, try doing the steps again in js/src and let us know if you have issues

[01:03:42.0844] <katelyngadd>
will do, i plan to create the PR or whatever with relevant edits once i have a working build

[01:03:48.0931] <katelyngadd>
seems like the instructions are just slightly aged and not wrong

[01:03:58.0655] <yulia|PTO>
so, unfortunately the mdn page is a wiki, we can't review changes

[01:04:07.0928] <katelyngadd>
ah i thought the mdn wiki went through PR flow

[01:04:09.0034] <yulia|PTO>
if you will make changes, can you double check them here just in case?

[01:04:12.0696] <katelyngadd>
will do yeah

[01:04:44.0844] <yulia|PTO>
im not sure if there is a review for external contributors... i have never had my stuff reviewed... but im not sure myself. lets do it step by step and see how it goes

[01:05:12.0763] <yulia|PTO>
i think we do need to update what you found with the tarball, thats def. out of date

[01:05:43.0988] <katelyngadd>
i may still have whatever flag bypasses review anyway from the old days

[01:05:51.0858] <yulia|PTO>
ok!

[01:05:59.0589] <katelyngadd>
thanks for the help!

[01:06:04.0932] <yulia|PTO>
of course :)

[01:21:51.0058] <nox>
ptomato: Also those guidelines to build SM seem a bit wrong to me, for example in Servo we don't rely on system ICU.

[01:40:43.0383] <yulia|PTO>
i believe we use ICU for internationalization on spidermonkey but not on gecko?

[01:42:33.0665] <nox>
Yes, but at least by default, it won't use the system one, but the one in the tree.

[01:43:02.0473] <nox>
https://searchfox.org/mozilla-central/source/intl/icu/source

[01:58:56.0332] <katelyngadd>
hm, it worked but i didn't get a js shell

[01:58:59.0947] <katelyngadd>
i wonder if the configure flags changed

[02:25:04.0339] <yulia|PTO>
katelyngadd: you didn't get a shell?

[02:26:01.0080] <yulia|PTO>
did you run `dist/bin/js` from `js/src/build_<whatever>.OBJ`?

[02:53:11.0446] <katelyngadd>
it broke cause i was in js/, i'm surprised it worked at all

[02:53:15.0619] <katelyngadd>
building under js/src gave me a shell

[02:56:14.0372] <yulia|PTO>
katelyngadd: do you have a subdirectory in js/src?

[02:57:46.0651] <yulia|PTO>
what i usually do with a fresh build is:

```
cd js/src
mkdir build_something
cd build_something
/bin/sh ../configure.in <with stuff>
make -j 4 # only do this if you are ok with garbled errors, drop the -j 4 if something goes wrong
dist/bin/js
```

[03:01:16.0460] <wingo>
that is what i do too

[03:02:33.0830] <wingo>
well, similar -- i do `mkdir +build` from the root, then `cd +build; ../configure --enable-project=js --enable-debug; make -j40`

[03:02:41.0235] <wingo>
then run `dist/bin/js`

[03:03:26.0109] <yulia|PTO>
if you are running on mac there might be some issues also

[03:20:51.0695] <katelyngadd>
yeah that's what i did this time

[03:20:59.0744] <katelyngadd>
i had to make install also but that was fine once i configured with --prefix

[03:21:13.0763] <katelyngadd>
do you know if it's possible to cross compile so i can generate an exe file?

[03:40:00.0573] <jandem>
build people are working on cross-compiling our Windows browser builds on Linux right now - https://bugzilla.mozilla.org/show_bug.cgi?id=1620165

[03:40:20.0505] <jandem>
so it should be possible at some point, but I've no idea how hard it would be to set up locally

[03:43:39.0460] <katelyngadd>
ok, thanks. i'll probably just set up a windows build environment

[05:05:52.0887] <automatedtester>
hey all, In this Selenium issue a person is getting the same error when using WASM in firefox and chrome with selenium. Selenium isnt doing anything here really but wondering if someone could me pointers where to look and diagnose further. Selenium issue https://github.com/SeleniumHQ/selenium/issues/8041

[05:37:41.0859] <tcampbell>
automatedtester: The (64-bit) WASM implementations reserve large virtual-address spaces to do clever tricks with sandboxing. (Roughly, WASM uses 32-bit pointers, so you'd want at least a 4GB virtual-address space to avoid any risk of important code being accidentally mapped). I'm not sure what the specific virtual requirement is, but that issue is likely a wontfix

[05:41:22.0379] <Benjamin Bouvier>
automatedtester: you can set javascript.options.wasm_disable_huge_memory to true in about:config to disable this requirement in Firefox

[05:44:26.0846] <tcampbell>
ah, cool

[05:45:11.0733] <tcampbell>
Benjamin Bouvier: so with huge_memory, it is 4GB VA per WASM-memory?

[05:47:21.0658] <Benjamin Bouvier>
tcampbell: https://searchfox.org/mozilla-central/source/js/src/wasm/WasmProcess.cpp#317-320

[05:49:36.0338] <Benjamin Bouvier>
so around 6GB (it's 4GB for the segfault-on-oob trick, plus 2GB for something something offsets?)

[05:53:17.0676] <automatedtester>
oh cool, thanks folks!

[05:58:19.0730] <tcampbell>
I guess the JITs in general reserve a 2GB VA space for executable code. I'm not sure there is a pref to turn that part off though

[06:29:51.0468] <lth>
automatedtester: that's curious, we should have code in place to disable huge memory automatically if the virtual address space is limited

[06:30:18.0105] <lth>
maybe it's simply not on by default...

[06:58:18.0535] <nbp>
tcampbell: I do not think there is, but 2GB is only on 64 bits architecture, we limit to 128 MB on 32 bits, IIRC.

[06:58:44.0705] <tcampbell>
yeah, that looks right

[07:09:17.0107] <automatedtester>
lth: I saw your comment on the issue, could you raise a bug and link to it in the issue please?

[07:12:17.0953] <lth>
automatedtester: looking into it, i can't repro locally on ff73 however

[07:12:34.0999] <automatedtester>
hmmm

[07:15:38.0031] <automatedtester>
lth: in terms of prefs, with Selenium the defaults are created in https://searchfox.org/mozilla-central/source/testing/geckodriver/src/prefs.rs

[07:15:50.0319] <automatedtester>
in case one of those could influence things

[07:22:01.0565] <lth>
automatedtester: the fallback works as it's supposed to in current nightly (built locally, with some logging)

[07:22:30.0471] <automatedtester>
lth: and in release?

[07:23:21.0351] <lth>
well, as i said, in ff73 as rebuilt by red hat for fedora 30 it also works

[07:23:45.0076] <lth>
(so far as i can tell)

[07:25:52.0539] <lth>
i've commented on the github issue

[07:26:08.0809] <lth>
happy to look further if there's something actionable but atm it's WFM

[07:27:19.0454] <automatedtester>
hmmm

[07:29:26.0889] <automatedtester>
yea, it's working for me on OSX too

[07:29:33.0829] <automatedtester>
sorry for the noise

[07:30:06.0902] <lth>
np, useful to check

[07:33:43.0845] <Ms2ger [~half-time dedication]>
/me waves at automatedtester 

[07:33:52.0037] <Ms2ger [~half-time dedication]>
There's also #webassembly:mozilla.org 

[07:34:04.0503] <automatedtester>
oh hai Ms2ger [~half-time dedication] 

[07:34:31.0415] <automatedtester>
matrix is not very good at uncovering channels

[08:41:37.0680] <mgaudet>
/me wonders if the #webassembly room needs a #wasm alias to help discoverability

[08:46:50.0712] <Ms2ger [~half-time dedication]>
Doesn't it have one yet?

[08:48:34.0399] <mgaudet>
When I search `wasm` in Riot-web, I don't find a room; but honestly I don't know how aliases work in combo with the room search: Sort of assumed the missing alias was why it didn't show up, but I could be wrong!

[08:49:33.0954] <Benjamin Bouvier>
i did make the alias, yes

[08:49:58.0025] <mgaudet>
hrm. Maybe this is a riot bug then?

[08:50:55.0770] <mgaudet>
(interim fix would be to put `wasm` in the description, as `rabaldr` finds #webassembly) 

[08:51:04.0480] <jorendorff>
tcampbell: review ping in https://phabricator.services.mozilla.com/D62519

[08:52:11.0232] <tcampbell>
jorendorff: wow. I was about to click the button, when the notification popped up

[08:52:27.0621] <jorendorff>
heh! don't let me distract you then :)

[09:23:38.0763] <iain>
sfink: I just sent you some regexp patches. I was hoping to give them to jonco, because we'd previously talked about them, but he's on PTO. If you want more background on why I am doing these crazy things, let me know.

[09:24:00.0796] <sfink>
ok

[09:34:03.0600] <nox>
We are landing the SpiderMonkey update in Servo! Bringing us to the end of 2019 with SM from Firefox 71.

[09:35:59.0763] <evilpie>
jorendorff: glad you agree. I am going to start by removing the Detecting code like you suggested

[09:41:46.0609] <mgaudet>
Who is the best person to ask about TypedObjects? 

[09:43:43.0952] <sfink>
I'm not sure if there is a great person to ask. I've reviewed a fair amount of them, though, so you could try me.

[09:44:21.0531] <mgaudet>
OK :) 

[09:52:58.0619] <tcampbell>
Async vs AsyncAwait is not intuitive at all.. JS, why u so weird

[10:15:41.0798] <ptomato>
katelyngadd: nox: I would love to get a pull request improving the embedders documentation :-)

[10:16:25.0658] <nox>
ptomato: To what? The GH doc?

[10:16:34.0630] <ptomato>
yes

[10:16:46.0573] <nox>
I'll see if I can allocate some time to that.

[10:17:11.0821] <nox>
I'm supposed to go back to layout stuff once I'm done with the smup, though I would really like to be able to continue improving Rust usage of SM.

[10:17:22.0137] <ptomato>
the current one was written by me and tcampbell

[10:17:29.0150] <nox>
 * I'm supposed to go back to layout stuff once I'm done with the smup, though I would really like to be able to continue improving Rust usage of SM. (smup = SM update)

[10:17:50.0924] <ptomato>
about ICU, I think for the use case of many embedders they'd prefer to link to their system's copy of ICU instead of building the bundled one

[10:17:54.0135] <ptomato>
certainly GNOME would

[10:18:00.0439] <nox>
ptomato: Note that our needs to use it from Servo are quite different than usual embedding. We cannot make it invoke cargo, etc.

[10:18:38.0049] <nox>
ptomato: Internal ICU is trimmed down and some parts are replaced by encoding_rs etc, that is completely disabled when you use system ICU IIRC. Maybe GNOME would change opinions if they knew that.

[10:18:52.0795] <nox>
More Rust > more system libs usage, IMO.

[10:23:53.0509] <ptomato>
nox: I'd love to hear more about what the difference is! and it would be good to document in that repo as well. I assumed there was no difference

[10:26:20.0725] <nox>
ptomato: My wish is to see a SM crate on crates.io. Published crates cannot contain other crates.

[10:50:16.0326] <evilpie>
jorendorff: We can totally simplify JS::ObjectOpResult too

[11:15:20.0196] <zbraniecki>
saw ICU in context of Rust - we just kicked off OmnICU charter at Unicode with an intention to write modular ICU implementation in Rust

[14:11:02.0989] <tcampbell>
mgaudet: ping?

[14:11:42.0168] <mgaudet>
tcampbell: pong

[14:12:42.0605] <tcampbell>
mgaudet: have some time to chat about bytecode ownership?

[14:13:09.0602] <mgaudet>
Yes, can you give me about five minutes?

[14:18:13.0873] <mgaudet>
alright let's do this

[14:18:16.0612] <mgaudet>
:D 

[14:48:27.0271] <evilpie>
Should we kill werror next?


2020-03-06
[16:29:10.0218] <Waldo>
sfink: In case you hadn't noticed, you only looked at two of the three comparison-operator patches.

[16:29:49.0525] <Waldo>
(No real rush on this, probably wouldn't have poked til next week ordinarily, then I realized maybe it got buried in other phabricator goos...)

[22:32:12.0972] <jandem>
evilpie: I filed bug 1275508 a while ago. It wasn't trivial because asm.js jit-tests used it, but they could be converted to getLastWarning or something

[22:32:15.0637] <Botzilla demo>
https://bugzil.la/1275508 — NEW (nobody) — Remove werror

[02:19:35.0457] <nbp>
mgaudet: tcampbell: This might be a good post-stencil optimization to look for: https://bugzilla.mozilla.org/show_bug.cgi?id=1618391 I do not know if you have a bucket for these kind of bugs.

[04:42:40.0756] <tcampbell>
Yes, I have a bug open for that and have a prototype using XDR. It saves about 30% off runtime of jit-tests.

[04:43:38.0751] <tcampbell>
Part of why it didn't finish was I never had a clean way to generate XDR data for cross compiles. We need to run the full parser during build steps

[05:11:49.0960] <tcampbell>
With the new parser and stencil both complete this might actually become trivial though

[05:20:20.0840] <wingo>
 /topic 🕷️🐒

[06:44:12.0160] <wingo>
ok dumb question, i am running jstests for the first time in forever (i mostly run jit tests), but the test runner i get a traceback

[06:44:29.0300] <wingo>
```
    from six import ensure_str, ensure_text
ImportError: cannot import name ensure_str
```

[06:44:46.0953] <wingo>
does this ring any bells?  i am on ubuntu 18.04 with python 3.6

[06:46:51.0984] <iain>
Didn't sfink just make some python-related test changes?

[06:48:00.0375] <wingo>
seems that it works if i run `make check-jstests` but the previous `../js/src/tests/jstests.py dist/bin/js` that i use to do no longer works.  been a while since i did that tho

[06:49:46.0566] <Benjamin Bouvier>
it seems that jstests.py uses `/usr/bin/env python` while the makefile uses what's in the `$PYTHON` env variable (dunno what sets it, though)

[06:50:03.0065] <Benjamin Bouvier>
so that could be that

[06:51:13.0224] <wingo>
`dist/bin/run-mozilla.sh _virtualenvs/init/bin/python -u ../js/src/tests/jstests.py dist/bin/js`<- works

[06:51:28.0935] <wingo>
/me shrug

[06:51:36.0470] <wingo>
virtualenv it is then!

[06:52:07.0364] <iain>
(I was thinking of bug 1619475, but it looks like it was backed out for test failures)

[06:52:08.0753] <Botzilla demo>
https://bugzil.la/1619475 — ASSIGNED (sfink) — Partial conversion of js/src test suites to Python 3

[07:27:17.0914] <jdm>
is there documentation for how to get information out of spidermonkey to figure out when lots of JIT compilation/recompilation is happening?

[07:27:36.0034] <jdm>
I have some servo profiles suggesting that ion might be thrashing a bunch, and I'd like to confirm that

[07:32:10.0793] <jandem>
you could compile with --enable-jitspew and then set the IONFLAGS=scripts env variable

[07:32:41.0675] <jdm>
/me wonders if he can meaningfully set environment variables in UWP

[07:38:06.0480] <jdm>
what flags should I be enabling if I want the best possible stacks when profiling? we're using --enable-profiling, and I still end up with large amounts of time charged to ??? mystery stacks

[07:38:23.0946] <jdm>
I've forced rustc to retain frame pointers, too

[07:47:47.0780] <wingo>
if you are using perf then set IONPERF=func

[07:48:01.0607] <wingo>
stack unwinding still might not work tho

[07:58:14.0267] <jdm>
it's the windows performance analyzer

[08:08:44.0521] <iain>
The JIT code we generate uses its own stack layout and doesn't have frame pointers, so it doesn't profile very nicely with external tools

[08:13:35.0779] <jdm>
:/

[08:14:22.0655] <jdm>
is there special code to give usable output in the gecko profiler, or do JIT frames just hurt everybody equally?

[08:16:52.0458] <iain>
There is special code in our profiler, yeah

[08:17:14.0803] <iain>
It mostly works

[08:17:53.0864] <iain>
We keep talking about adding in frame pointers, but 32-bit x86 has so few registers to start with

[08:25:03.0810] <jdm>
/me makes the puss-in-boots eyes

[08:25:13.0009] <jdm>
arm64 has lots of registers, right? registers out the wazoo.

[08:28:06.0257] <iain>
When we're writing architecture-independent code we often have to go with the lowest common denominator

[08:28:51.0543] <jdm>
would adding a configure flag to opt-in to frame pointers be a reasonable request?

[08:30:21.0980] <sfink>
> <@waldo:mozilla.org> sfink: In case you hadn't noticed, you only looked at two of the three comparison-operator patches.

yes, I've sat down to figure that stuff out 2 or 3 times now and keep getting interrupted. I'll be working a fair chunk this weekend, and will probably end up doing it then.

[08:30:43.0040] <iain>
If we could provide that flag, then we would just turn it on for everything except 32-bit x86, and then we'd be done

[08:31:09.0346] <iain>
It's not impossible, it's just a bunch of work

[08:31:24.0023] <jdm>
ok, that makes sense

[08:31:32.0559] <iain>
And it either ends up with a non-trivial regression on x86, or two parallel codepaths to maintain

[08:31:46.0536] <iain>
It will probably happen eventually

[08:31:49.0829] <iain>
But not soon

[08:32:38.0439] <sfink>
> <@iain:mozilla.org> (I was thinking of bug 1619475, but it looks like it was backed out for test failures)

Yes, I'll be re-landing that shortly. Turns out it's better to get things working *before* landing them. I may try experimenting with that new workflow.

[08:32:51.0968] <iain>
A bold move

[08:33:27.0423] <jdm>
do you happen to know where the JIT-specific parts of the gecko profiling stack walking code are, or should I go talk to the perf team?

[08:36:28.0571] <iain>
js/src/vm/GeckoProfiler.cpp might be a place to start pulling on threads

[09:24:33.0162] <tcampbell>
jdmmmm: djvj should probably know

[09:24:54.0060] <jdmmmm>
thanks!

[10:00:20.0599] <djvj>
jdmmmm: know what?

[10:00:25.0404] <djvj>
/me reads

[10:00:37.0772] <djvj>
jdmmmm: oh, what iain said

[10:01:47.0449] <djvj>
jdmmmm: see ProfilingFrameIterator also

[10:01:48.0499] <djvj>
https://searchfox.org/mozilla-central/source/js/public/ProfilingFrameIterator.h

[10:02:51.0756] <djvj>
jdmmmm: more specifically, JitProfilingFrameIterator and it's increment operator would likely be the place you want to start

[10:02:52.0527] <djvj>
https://searchfox.org/mozilla-central/source/js/src/jit/JSJitFrameIter.h#280

[10:03:42.0568] <jdmmmm>
yeah, https://searchfox.org/mozilla-central/source/tools/profiler/core/platform.cpp#1453-1483 looks like it could be interesting

[11:05:26.0017] <tcampbell>
jorendorff: ping?

[11:05:31.0713] <jorendorff>
hi

[11:05:35.0808] <jorendorff>
on my way!

[11:45:04.0041] <Waldo>
sfink: I'm also happy to walk you through it if needed (tho that might make determining whether comments are adequate a little trickier).

[12:33:35.0732] <evilpie>
Building the browser is so annoying

[12:41:03.0126] <evilpie>
Damn finally

[12:41:44.0007] <evilpie>
We used to run xpcshell tests with "extra warnings"

[12:41:51.0042] <evilpie>
That in turns disables lazy parsing: https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.h#534

[12:42:13.0699] <mgaudet>
anba+++++ 

[12:42:25.0447] <evilpie>
And apparently lazy parsing makes our fucntion naming worse: 

[12:42:26.0167] <evilpie>
https://searchfox.org/mozilla-central/source/devtools/shared/protocol/tests/xpcshell/test_protocol_stack.js#82

[12:42:33.0572] <mgaudet>
Like wow. You're my hero anba . Thank you so much.

[12:42:58.0591] <evilpie>
changes from "run_test/onConnect" to "onConnect/<" ...

[12:43:34.0929] <evilpie>
this just took me all day to find

[12:45:51.0234] <tcampbell>
evilpie: yeah, it is super busted :(

[12:46:20.0331] <tcampbell>
I started trying to fix it, but hit a few hurdles

[12:46:43.0041] <tcampbell>
If you disable syntax parsing, we don't pass our own jit-tests

[12:46:46.0884] <evilpie>
I mean the main issue is that building the browser to bisec a 8 patch stack just takes too long

[12:46:50.0769] <evilpie>
lol

[12:47:14.0711] <evilpie>
load-bearing optimization as we like to say

[12:47:40.0605] <tcampbell>
haha.. indeed. I've always liked the term "load-bearing bugs"

[12:49:22.0982] <tcampbell>
evilpie: there are fun things like https://searchfox.org/mozilla-central/rev/e7fc3314b0dfcc61fb7dc7a09f9555660a2eafc5/js/src/frontend/NameFunctions.cpp#173-195

[12:49:42.0866] <tcampbell>
we mangle names using info that the BCE disagrees with

[12:51:42.0077] <tcampbell>
Ideally we'd throw all that cleverness away, but I can't really figure out why it is there in the first place

[12:51:47.0206] <tcampbell>
debugger maybe?

[12:52:01.0499] <evilpie>
yeah, stack traces and stuff like that

[12:53:33.0392] <evilpie>
I think we actually expose this to content via Error.stack

[12:54:11.0922] <tcampbell>
oh right. that sounds like it

[13:43:32.0792] <jrmuizel>
What's the status of the binjs stuff? It's using an old version of nom which is going to cause duplication because we are trying to import a newer version of nom

[13:44:43.0408] <jrmuizel>
 * What's the status of the binjs stuff? It's using an old version of `nom` which is going to cause duplication because we are trying to import a newer version of `nom`

[14:04:59.0116] <iain>
jrmuizel: The binjs stuff is likely to be mothballed soon.

[14:05:48.0465] <iain>
The project is on hiatus, and even if it gets revived, it will need to be redone for the new parser.

[14:05:56.0758] <jrmuizel>
iain: can we mothball it today?

[14:07:40.0860] <iain>
I think we were going to reach out to Facebook one more time before making the official decision

[14:07:58.0994] <iain>
Also it is 5pm on a Friday

[14:08:16.0305] <iain>
So ... not today, but ask again next week?

[14:09:13.0643] <jrmuizel>
alternatively someone could merge https://github.com/binast/binjs-ref/pull/457

[14:09:34.0963] <evilpie>
arai: ^

[14:09:35.0122] <zombie>
like leftover food.  no intention of eating it later, but don't wanna throw perfectly good food.  so you leave it in the fridge for a few days, until it's not "perfectly good" anymore

[14:10:17.0675] <arai>
jrmuizel: I'm now reviewing it

[14:12:48.0068] <jrmuizel>
arai: thanks. I just fixed the formating

[14:16:19.0708] <arai>
I'll merge after the test passes (it takes some time)

[14:22:04.0877] <jrmuizel>
arai: FWWI, it looks like there are other things that depend on nom4 so this isn't the only thing blocking us 

[14:22:45.0589] <arai>
so, it's not urgent?

[14:22:54.0298] <jrmuizel>
probably not

[14:23:40.0220] <jrmuizel>
arai: I wrote to @glandium here: https://phabricator.services.mozilla.com/D65617#1999925

[14:24:05.0312] <arai>
I don't have the permission to update binjs_meta crate in crates.io.  so I'll ask Yoric after the merge. and after that I'll fix m-c part to refer the new version

[14:24:53.0547] <jrmuizel>
arai: ok thanks

[14:28:12.0962] <arai>
jrmuizel: can you fix this?  https://travis-ci.org/binast/binjs-ref/jobs/659355371#L220

[14:29:04.0243] <arai>
or shall I?

[14:29:12.0435] <jrmuizel>
arai: I'll do it

[14:29:17.0258] <arai>
thanks!

[14:30:41.0785] <jrmuizel>
arai: done

[14:31:01.0175] <arai>
thank you!

[14:47:56.0323] <Yoric>
jrmuizel: How urgent is this? Can it wait until Monday?

[14:48:09.0721] <Yoric>
(it's ~midnight here)

[14:49:08.0226] <jrmuizel>
Yoric: yep not urgent

[15:40:15.0842] <ntim>
I've always loved Rust-style let expressions, so from now on I'm going to write JS like this:
```
var word = eval(`{if (number < 100) {
    "small";
} else if (number < 1000) {
    "medium";
} else {
    "large";
}}`);
```

[15:47:53.0776] <ntim>
Also works nicely with try/catch:
```
var boom = eval(`{try {
  throw new Error("hello");
} catch(e) {
  "explode";
}}`);
```


2020-03-07
[16:21:36.0353] <ntim>
Want to do async functions? no problem: 
```
async function getBugList(filterFn) {
  let asyncfn = (async function() {}).constructor;
  let list = await asyncfn(`try {
    let obj = await fetch("http://bugzilla.mozilla.org/rest/bug?veryinvalid=query");
    return await obj.json();
  } catch(e) {
    return [];
  };`)();
  return list.filter(filterFn);
}
```



2020-03-08
[10:39:00.0637] <sfink>
tcampbell: if you'd like to fix that jit-test --debug problem, you can review + land https://phabricator.services.mozilla.com/D65899

[10:39:25.0923] <sfink>
sadly, py3 compatibility stuff always seems to work like this

[10:39:59.0807] <sfink>
dynamic languages, amirite?

[10:42:41.0500] <evilpie>
Thank god we only work with statically typed languages

[10:57:25.0830] <tcampbell>
evilpie: since you seem to be around.. clang-format https://phabricator.services.mozilla.com/D65900

[10:58:33.0764] <evilpie>
tcampbell: actually one sec

[10:58:40.0161] <evilpie>
there is that magic string for bisecting

[10:59:16.0307] <tcampbell>
ah. I don't think I've bothered with that for this small format fixes

[11:01:51.0487] <evilpie>
I think you just have to add "# ignore-this-changeset" the commit message body

[11:02:52.0448] <evilpie>
 * I think you just have to add "# ignore-this-changeset" to the commit message body

[11:06:46.0465] <tcampbell>
ah. good to know. Are you able to land that for me? I can't seem to access Lando anymore and my keys aren't work =\

[11:08:22.0949] <tcampbell>
scratch that. logging everything out fixed it.

[12:47:47.0896] <Waldo>
sfink: I have seen your email and not yet worked through it.  Maybe today?

[13:16:02.0077] <sfink>
Waldo: no rush on my side. I really ought to stop being stubborn about trying to understand all this stuff, and just review the damn patch.

[13:16:41.0873] <Waldo>
sfink: bzbarsky hath truly sniped us all.

[13:17:03.0235] <Waldo>
Tho honestly, I do think some investment in actually understanding this pays off in the long run.

[13:17:56.0651] <Waldo>
FWIW I have a hockey game to watch today which afford some down time to investigate this stuff.

[13:19:20.0820] <sfink>
I shifted some weekday time to this weekend, so I'll be around for a bit. But I have other things to be fixing that I've recently broken.

[13:19:57.0222] <Waldo>
Some of my days last week ended up curtailed some, so I could stand to do something today.

[15:12:09.0013] <sfink>
oh, right, we're in code freeze. I should probably stop happily landing random trivial patches.


2020-03-09
[19:30:04.0073] <Waldo>
 * FWIW I have a hockey game to watch today which affords some down time to investigate this stuff.

[20:19:44.0175] <Waldo>
sfink: I think I have figured out the spec for your testcase, sent mail about it.

[04:04:08.0273] <evilpie>
This might be interesting for some people here as well: https://addons.mozilla.org/en-US/firefox/addon/phabricator-in-bugzilla/

[05:31:49.0120] <nox>
Out of curiosity, what happens if one does not respect the "one JSContext per thread" thing when embedding?

[05:32:21.0517] <nox>
Is it just how Gecko does things, or is it actually a safety hazard in SM? Is it because of some thread-local storage in SM?

[05:32:33.0053] <padenot>
TLS yeah

[05:32:52.0074] <padenot>
this is/was a big issue for audioworklet, but we've sorted it out

[05:33:25.0620] <nox>
TLS in SM itself, right?

[05:33:42.0444] <padenot>
yes

[05:33:48.0948] <nox>
Not complaining about this constraint, it should help making truly safe bindings from Rust.

[05:34:35.0759] <nox>
(If you have multiple contexts in a single thread, end user could take some objects from a context and pass them to functions with a different context. That's not possible if you never allow making multiple contexts on the same thread and your objects aren't Send nor Sync.)

[05:36:50.0352] <padenot>
would it work though, or would compartments get in the way

[05:37:28.0732] <nox>
Compartments get in the way and the only way to handle them properly without unsafe code is with "generative invariant lifetimes" (I'm feeling word salad today).

[05:37:54.0427] <nox>
"Generative" as in this: https://docs.rs/indexing/0.4.1/indexing/

[05:39:33.0561] <nox>
making something like `ctx.with_entered_realm(obj, |realm, obj| { … })` where `realm` is just a `ctx` wrapper but with the idea that a specific realm was entered in that context, and both `realm` and `obj` both get the same unescapable invariant lifetime.

[05:39:40.0332] <nox>
 * making something like `ctx.with_entered_realm(obj, |realm, obj| { … })` where `realm` is just a `ctx` wrapper but with the idea that a specific realm was entered in that context, and both `realm` and `obj` get the same unescapable invariant lifetime.

[05:40:42.0122] <nox>
The difference is that using generative lifetimes for entered realms is pretty small in scope,

[05:41:23.0516] <nox>
if we had to resort to the same trick for contexts themselves, that would mean that *everything* gets polluted by that lifetime, even, `Node`, `Element`, etc.

[06:30:20.0546] <bzbarsky>
Waldo: What did I snipe you into?

[06:31:34.0105] <Ms2ger [~half-time dedication]>
Work

[07:38:31.0882] <bzbarsky>
heh

[08:39:40.0212] <sfink>
(more specifically, argument-dependent lookup with respect to operator==). I confused myself, Waldo un-confused me. I am now in the process of re-confusing myself by figuring out in what way I was confused the first time I was confused by all of this.

[10:10:50.0859] <sfink>
Waldo: r=me, with changes requested. No changes to the patch, though. Just to my brain. (I sent another email.) Patch is good.

[10:18:01.0386] <sefeng>
how do I trigger `js/src/tests/test262/built-ins/Date/parse/without-utc-offset.js` locally?

[10:18:16.0650] <sefeng>
`./mach test` unable to finds it 

[10:20:04.0213] <evilpie>
something like `python tests/jstests.py dbg-obj/dist/bin/js test262/built-ins/Date/parse/without-utc-offset.js`

[10:20:12.0200] <evilpie>
depending on where you js shell is

[10:22:02.0287] <Ms2ger [~half-time dedication]>
or mach jstests test262/..

[10:22:10.0768] <Ms2ger [~half-time dedication]>
sefeng: ^

[10:23:42.0912] <sefeng>
thanks! 

[10:23:44.0358] <sfink>
argh! `six` isn't installed by default??!

[10:31:25.0770] <lth>
evidently not :-)

[10:32:02.0994] <tcampbell>
sfink: `./mach jit-test --run-binast` seems to complain too

[10:32:39.0998] <sfink>
it was just a simple fix so I could do `./jit_tests.py` instead of `python2 ./jit_tests.py`...

[10:32:41.0115] <sfink>
/me sobs

[10:33:02.0436] <tcampbell>
no good deed..

[10:51:16.0052] <sfink>
ok, patches up for latest round of breakage. Now to see what the fixes broke...

[10:56:17.0915] <padenot>
Can someone that understand module loading of cross origin script help a bit here: https://phabricator.services.mozilla.com/D64766#inline-392782 ?

[10:58:01.0527] <padenot>
Context: if there is an error in a specific GlobalScope, we want to (1) handle the error and send relevant info to another global scope (2) not leak things cross origin. I observe that the line/column/file are blanked when running WPTs, but I don't know if this is the cause

[10:59:23.0028] <padenot>
also we want (3) put the exception back and let it be displayed in the console as usual, but that not as problematic

[11:02:09.0537] <padenot>
Waldo seem to have had a look at this about 9 years ago

[11:02:52.0962] <padenot>
ah maybe not

[11:41:56.0327] <jrmuizel>
Yoric: can we get a new release of the binjs stuff?

[11:47:11.0699] <bzbarsky>
padenot: So workers have some infrastructure for this

[11:47:27.0854] <bzbarsky>
padenot: But of course worker stuff is always same-origin with the page

[11:47:45.0219] <bzbarsky>
padenot: (modulo importscripts in the worker, but that's where error muting comes in)

[11:47:58.0369] <padenot>
Worklet also (which is the case here), but we're talking about imports

[11:48:14.0065] <bzbarsky>
OK.

[11:48:14.0193] <padenot>
However istr static imports don't work on worklets 

[11:48:29.0332] <padenot>
Which is a problem in itself

[11:48:38.0536] <bzbarsky>
So the way I would expect this to work for imports is that error muting should work as usual

[11:48:50.0548] <bzbarsky>
So at the point when you run the import toplevel you mute errors

[11:48:52.0142] <padenot>
But I wanted to know if we're doing something dangerous before doing it

[11:49:06.0609] <bzbarsky>
If the import is across origins

[11:49:50.0220] <padenot>
What if worklet.addModule (that takes a url) is being passed a cross origin url 

[11:49:52.0989] <bzbarsky>
jorendorff and I were talking about our error muting stuff recently; it needs some changes and I am hoping someone will pick that up.

[11:50:09.0654] <bzbarsky>
Is that supposed to work per spec?

[11:51:42.0155] <jorendorff>
bzbarsky!

[11:52:17.0030] <padenot>
I don't know, supposedly the base worklet text has been looked at by ES people 

[11:52:40.0448] <padenot>
This is not in the web audio spec it's on worklet-1

[11:52:51.0839] <padenot>
In*

[11:53:14.0908] <bzbarsky>
yeah, I was just reading it

[11:53:37.0346] <bzbarsky>
anyway, if cross-origin is allowed here we just need to enforce error muting

[11:53:51.0604] <bzbarsky>
in the cross-origin case

[11:54:14.0912] <padenot>
Right

[11:54:52.0812] <padenot>
I think that works, I've seen the message report a muted object in some scenarios but I'll double check 

[11:55:08.0631] <padenot>
Reported as (sorry I'm on my phone) 

[12:16:13.0001] <jdm>
where does the result of jitspew + IONFLAGS end up?

[12:17:24.0477] <Waldo>
I think just stderr, others can verify.

[12:17:48.0060] <jdm>
yeah, I just found the bit that checks for ION_SPEW_FILENAME or defaults to stderr

[12:21:16.0005] <bzbarsky>
padenot: We should make sure to add tests....

[12:27:54.0577] <Yoric>
jrmuizel: On it.

[12:46:42.0380] <Yoric>
jrmuizel: Done.

[13:17:43.0717] <Waldo>
sfink: Happily, that followup question was a bit easier to answer.  (Maybe because the first query had already made me read through it.)

[13:19:27.0187] <Waldo>
sfink: We should figure out _somewhere_ to put this series of emails so other people can become less confuzzled.  Maybe I dump it into a comment in the bug?

[13:20:41.0272] <Waldo>
bzbarsky: Sniped into making `operator==` be defined sanely for stuff, and then intricacies of name lookup that has to (or must not, in rare cases) invoke argument-dependent lookup, and then intricacies of operator overload resolution having subtly different semantics atop that.

[13:21:40.0472] <Waldo>
bzbarsky: Tho in truth most of this series of weekend emails was about us going down rabbit holes of our own making, but IMO ones where actually understanding the system stands a fair chance of paying off in the long run.

[13:21:47.0755] <iain>
What is the easiest way to trigger an interrupt in the shell?

[13:54:41.0822] <Waldo>
sfink: Looks like the Fickle Finger of Fate points at gcc, for why the `nullptr` overloads were needed. https://treeherder.mozilla.org/#/jobs?repo=autoland&revision=f6898bd931c53a7c9ab373a6af960747d06def4b&selectedJob=292344526

[13:54:58.0636] <Waldo>
/me readds them, tries

[14:05:16.0046] <Waldo>
I guess gcc -- or at least haz-gcc -- doesn't correctly implement that when `nullptr` is specified for an argument to an overloaded function, an overload that has `const T*` for the argument type is preferred to one that has `const U&` as argument type (and where `U(nullptr_t)` is offered as an implicit conversion).

[14:05:57.0588] <Waldo>
`nullptr -> const T*` is a standard conversion sequence, and standard conversion sequences are supposed to be better than a user-defined conversion sequence.

[14:30:26.0122] <Waldo>
Or no, I think `nullptr -> const T*` is supposed to be preferred to `nullptr -> const T*&`.  I think.

[14:30:52.0596] <bzbarsky>
Waldo: Ah, I see

[14:59:01.0721] <Waldo>
Looks like C++14 (probably C++11 too) says that `nullptr -> const T*` is a standard conversion sequence (specifically a pointer conversion, with Conversion rank), while `nullptr -> const T*&` is _somehow_ a worse conversion sequence.  I think I've gone past the point at which I should try to determine exactly _why_ it's worse, tho.

[15:01:26.0761] <Waldo>
 * Looks like C++14 (probably C++11 too) says that `nullptr -> const T*` is a standard conversion sequence (specifically a pointer conversion, with Conversion rank), while `nullptr -> T* const&` is _somehow_ a worse conversion sequence.  I think I've gone past the point at which I should try to determine exactly _why_ it's worse, tho.

[16:07:21.0934] <tcampbell>
Waldo: what are your feelings on down-casting `js::BaseScript` to `JSScript`? There are no new fields, but the original constructor call was for `new (..) BaseScript`

[16:08:57.0283] <Waldo>
tcampbell: Uh, explain this a little more?  So we have raw memory, we placement-`new` a `BaseScript` into it, then `class JSScript : public js::BaseScript {};` is what we have, and there's a downcast to what end?

[16:09:04.0783] <Waldo>
I'm just confused right now basically.  :-)

[16:10:51.0599] <tcampbell>
the end is that over a few decades we have plumbed a `JSScript*` type through the engine that implies bytecode exists. I've replaced the underlying guts with both LazyScript and JSScript simply being BaseScript. The GC allocation is for BaseScript now.

[16:11:19.0776] <tcampbell>
so JSScript is currently just a superficial type-system thing to mean hasBytecode

[16:12:18.0074] <tcampbell>
I could have the underlying allocation be for JSScript and then immediately drop it to just BaseScript if the bytecode doesn't exist, but that seems a little silly still

[16:15:58.0469] <Waldo>
I'm still a little confused.  When we allocate, does the script-thingy definitely not have bytecode associated with it yet?

[16:16:19.0527] <Waldo>
Or rather, when we placement-`new` it.

[16:16:41.0667] <tcampbell>
Here is probably the relevant bit: https://searchfox.org/mozilla-central/rev/070a000dd49aac4a26147e137efcd91a728d13b8/js/src/vm/JSScript.cpp#5454

[16:18:13.0226] <tcampbell>
that function will be moved to `BaseScript` shortly, but we will no longer have a separate LazyScript and JSScript. When the lazy is compiled, it will act as a `JSScript`. I'm wondering what the future BaseScript::CreateRaw should reasonably look like

[16:20:16.0608] <tcampbell>
I could have it placement-new to JSScript always, and then return a BaseScript*

[16:20:43.0078] <Waldo>
What does your final class hierarchy look like, and what is the meaning of each level of it?

[16:21:06.0795] <tcampbell>
final will be `JSScript` -> `BaseScript` -> `gc::Cell`

[16:21:24.0854] <tcampbell>
basescript will mean lazy or non-lazy

[16:21:54.0678] <tcampbell>
jsscript will mean a basescript with all the data that need to act as the old jsscript

[16:22:22.0803] <Waldo>
And sometimes a `BaseScript` for location-specific reasons will be known to have associated bytecode, and you want to know if it's safe to downcast and just return the other type?

[16:22:44.0821] <tcampbell>
yes, by checking `BaseScript::sharedData_`

[16:23:02.0072] <tcampbell>
if it is null, we have no bytecode (since it is the bytecode pointer..)

[16:23:14.0872] <Waldo>
This is basically fully analogous to `JSString` and the specialized subclasses of it.  It should be fine, from the C++ language point of view.

[16:23:24.0946] <tcampbell>
oh right, JSString

[16:23:29.0645] <tcampbell>
that makes sense

[16:24:21.0279] <Waldo>
Assuming `JSScript` can have its bytecode thrown away silently under the hood, tho, you do have some hazardous cases to worry about where something might have a rooted pointer to a script-with-bytecode, do something that causes a GC or bytecode be thrown away, then you try to use the bytecode.

[16:24:49.0706] <tcampbell>
yeah, that is a general issue that needs to be make less gross

[16:24:50.0286] <Waldo>
That happens less readily with strings, I think.

[16:25:06.0478] <Waldo>
And I guess the same problem exists for ArrayBuffers and typed arrays.

[16:25:26.0029] <tcampbell>
the previous JSFunction handling tried to do something similar and then gave up and we disallowed relazifying the active compartment

[16:25:38.0618] <Waldo>
But at least for ABs and typed arrays there's an explicit operation that happens, it's not just GC pulling the rug under you.

[16:25:57.0461] <Waldo>
Not sure how much string structures get rewritten under the hood these days.

[16:26:27.0432] <tcampbell>
overall I've been pushing towards using BaseScript for more queries so we don't have to trigger random compiles everywhere

[16:27:08.0000] <Waldo>
We probably don't really have any protection for code that has `Rooted<JSRope*> str(cx, ...); call function that linearizes str; str->stuff();`, do we.  Tho it's gotta be a super-rare sort of thing to do.

[16:29:17.0640] <tcampbell>
the relazification code does have a bunch of checks (such as if a debugger may be involved) to handle the biggest assumptions

[16:29:30.0507] <tcampbell>
 * the relazification code does have a bunch of checks (such as if a debugger may be involved) to handle the biggest risks

[16:30:27.0427] <Waldo>
Some sort of a bit to indicate "I'm pinned" would be a lot better approach than hackish "look at random state of the world bits", ideally.

[16:30:58.0673] <Waldo>
For scripts and strings, at least, the semantic difference is unobservable in the language.

[16:31:17.0124] <Waldo>
Array buffers have it bad because the difference _is_ observable -- and important.

[16:36:03.0170] <syg>
sfink: any updates on the FinalizationRegistry question?

[16:36:47.0830] <tcampbell>
part of the issue is that "I'm pinned" is also "I'm on the call stack" which we don't want to update as we run

[16:37:02.0296] <sfink>
syg: FinalizationRegistry question? You mean the renaming? That's just waiting for jonco to write up the patch when he returns from PTO.

[16:37:13.0968] <sfink>
or do you mean deiteratorizing?

[16:37:35.0639] <tcampbell>
(overall, I'd like to make the relazification process have less uncertainty)

[16:39:52.0719] <Waldo>
sfink: Readded the `nullptr` overloads to the comparison operators and resubmitted the patch -- nothing terribly interesting in it IMO, but feel free to look and diff it against the previous version if you want to know what's changing.  (There is a comment by the overloads that dives into spec stuff a little bit -- enough to argue its case, tho the exact language could be nitpicked or possibly pedantically off in slightish ways.)

[16:40:13.0280] <sfink>
ok, thanks, I'll look

[16:40:28.0058] <Waldo>
Heading to the bike shop briefly to see if I can maybe get some further minor fit adjustments, maybe swing by the office to pick up a couple packages, then back home again -- guessing back in 45, if anyone needs me feel free to poke me here for any Qs I might be able to swipe into existence on a phone.

[16:40:38.0654] <Waldo>
/me kicks off a browser build before he leaves

[16:47:10.0544] <syg>
sfink: i mean deiteratorizing

[16:47:15.0867] <syg>
sfink: we still waiting on till?


2020-03-10
[20:26:00.0219] <sfink>
tcampbell: silly rabbit! Don't you know you're supposed to use what I use in jit-test, and only what I use? https://phabricator.services.mozilla.com/D66171

[20:26:30.0753] <sfink>
I'm getting less and less impressed by the day how Python handled the 2 -> 3 migration

[20:26:54.0385] <Waldo>
How much work we talking about to make the JS test harnesses py3-compatible?  Kinda surprising we haven't managed to do it by this point, given nonsupport and all...

[20:27:14.0016] <sfink>
Waldo: I seem to be doing it, one bug at a time

[20:27:49.0576] <sfink>
the main holdup is the wpt stuff, which I spent a little time looking at and then decided it would be better as Somebody Else's Problem.

[20:35:15.0756] <Waldo>
You know, I could probably write a blog post about operator overloading, overload resolution, and ADL and dump all this fresh newfound knowledge there, couldn't I...

[20:54:37.0395] <sfink>
I have a .org file describing some of it -- but that link you sent me last was probably more useful than what I had gathered. And my file helped me with neither of the two questions you were able to answer for me.

[20:57:39.0443] <Waldo>
The cppreference site is sometimes only a mild rewrite of the spec, but it's also really good at distilling complicated parts sometimes.

[03:11:43.0014] <Ms2ger [~half-time dedication]>
We are working on the wpt stuff, fwiw

[03:19:34.0412] <Ms2ger [~half-time dedication]>
> <@sfink:mozilla.org> I'm getting less and less impressed by the day how Python handled the 2 -> 3 migration

Wait until you realize they're doing a whole bunch of incompatible changes in 3.8

[03:59:49.0097] <nox>
Pretty sure users had 10 years to make things compatible.

[04:00:49.0718] <Ms2ger [~half-time dedication]>
But it took about nine years to get to a point where you could reasonably write hybrid 2-3 code

[04:47:56.0344] <arai>
Yoric: Does binast crate in m-c need change for the update?  https://searchfox.org/mozilla-central/rev/070a000dd49aac4a26147e137efcd91a728d13b8/js/src/frontend/binast/Cargo.toml#8  or does it automatically select the latest one (0.5.4) on the next `mach vendor rust` ?

[05:09:15.0411] <Yoric>
arai: I think  it needs to be updated.

[05:10:23.0306] <arai>
okay, I'll post a patch

[05:29:22.0122] <nox>
Ms2ger [~half-time dedication]: Pretty sure that 9 years in making things compatible was less important than just switching to 3 and abandoning 2.

[06:45:19.0453] <Ms2ger [~half-time dedication]>
Yeah, that doesn't work, sadly

[08:29:02.0691] <djvj>
argh, I need a clean way of turning arbitrary encoded character sequences into a iterator over a sequence of JS char16s without allocating memory.  Someone tell me this exists before I go and write it myself.

[08:30:58.0593] <djvj>
I looked around the jsapi headers, but the best I found was to do an allocating conversion from utf8 to char16.  I need iterators for utf8 and latin1 byte sequences, as well as the trivial iterator over existing char16s

[08:32:57.0539] <Ms2ger [~half-time dedication]>
djvj: "use rust" probably isn't a helpful answer? :)

[08:33:48.0767] <djvj>
Ms2ger [~half-time dedication]: well, considering this is part of the "fix the C++ so we can use rust" work, unlikely :)

[08:34:10.0990] <djvj>
it's fine, I can write it up, and it's probably useful to have around for later.  Just want to make sure this isn't already squirreled away somewhere I haven't found.

[08:34:36.0629] <Ms2ger [~half-time dedication]>
I don't think so - I guess Waldo would know if it existed

[08:44:19.0005] <evilpie>
I always having to fix binast tests is annoying

[08:46:16.0478] <nox>
How come binast is deep in js/src/frontend and not with the rest of the vendored Rust stuff btw?

[08:47:02.0236] <djvj>
I suspect arai put it there since it's basically pure frontend code, but you'd have to ask them.

[08:47:37.0610] <nox>
Oh that makes sense. I asked that because having all the Rust code in the same place makes it easier to remove all of it when vendoring SM in a crate.

[08:48:59.0842] <arai>
the code there is a code generator. that generates some BinAST cpp/h files in js/src/frontend

[08:49:13.0590] <arai>
actually it doesn't have to be in-tree, given it's not used while building

[08:50:07.0647] <nox>
Yeah. We have a patch in servo/mozjs that removes its inclusion. https://github.com/servo/mozjs/blob/master/etc/patches/0003-Don-t-include-binast.patch

[08:53:04.0151] <bc>
jandem, sfink  After looking at https://bugzilla.mozilla.org/show_bug.cgi?id=1621295 is there any reason you couldn't do the same for aarch64 with the arm64-simulator rather than me trying get SM to run on limited physical and flaky Windows 10 aarch64 laptops in https://bugzilla.mozilla.org/show_bug.cgi?id=1618919 ?

[08:54:36.0964] <sfink>
I don't know enough to answer that, jandem or somebody else here will, but it was my impression that we do see different failures on hardware than on the simulators.

[08:55:22.0201] <bc>
Are the Windows aarch64 laptops preferred over Pixel2 phones?

[08:56:39.0556] <sfink>
I *really* don't know the answer to that

[08:56:53.0885] <sfink>
tcampbell: would you know?

[08:56:56.0674] <bc>
Thanks. That  was directed generally but thanks.

[08:58:15.0758] <sfink>
bc: is it possible to run tests of any sort on a pixel2 phone over the network? I borrowed a Pixel 2 for testing, but the only USB-C port I have is in a power brick.

[08:58:34.0972] <sfink>
(I'd mostly want to run JS shell tests, though.)

[08:58:46.0182] <bc>
Yes, we do lots of testing both unit and perf.

[08:59:12.0830] <bc>
Oh. You need to turn on adb tcp but if you need usb to do that.

[08:59:30.0031] <bc>
So you are a bit out of luck. You can get a converter I think.

[08:59:40.0048] <sfink>
Sounds like I need to buy me a converter. Ok, thanks.

[09:00:06.0039] <tcampbell>
bc: the one thing I've wanted for the pixel2 setup is to have the jsshell bundled in a real APK so it works without root

[09:01:00.0597] <bc>
That would help you with your local testing? We still need root in CI but that seems like a good idea.

[09:01:37.0246] <tcampbell>
yes, there have been a serious of very hard to debug android issues in last few years (eg. weird linking issues)

[09:01:39.0618] <bc>
tcampbell: If you file a bug maybe we can get some help from the android folks to get that done.

[09:01:43.0160] <tcampbell>
 * yes, there have been a series of very hard to debug android issues in last few years (eg. weird linking issues)

[09:02:04.0830] <bc>
tcampbell: are you using a personal device which is why you don't want to root it?

[09:02:24.0207] <tcampbell>
rooting has been a shitshow in general for me

[09:02:45.0408] <tcampbell>
especially when looking into jit bugs on non-standard devices

[09:02:55.0957] <bc>
magisk has been pretty good for me . bitbar introduced it to us and it works pretty well. you can turn rooting on / off easily.

[09:03:13.0488] <bc>
yeah. rooting is a very device specific thing.

[09:03:27.0101] <bc>
apk would solve all of that for you hopefully.

[09:03:42.0218] <tcampbell>
I ran into a lot of trouble with older devices unfortunately. Issues where Lineage had deleted the devices, etc

[09:04:11.0783] <tcampbell>
bc: my hope with using an APK is that we could unify on the native-debugging workflows that the android teams are maintaining

[09:05:15.0122] <tcampbell>
I think xpcshell has similar complexity in our testing

[09:05:18.0073] <bc>
We've dreamed of something like that in the past for general testing so we could drop the rooted requirement. It might still be something we can do. aerickson has root-less testing on his radar for the future. Maybe he can help.

[09:07:37.0036] <tcampbell>
being able to run microbenchmarks and stuff in jsshell would be useful for the spidermonkey team. We rely on it a lot for our development and it has resulted in less android perf tuning than we should

[09:08:23.0656] <bc>
tcampbell: Do you have an opinion on Windows 10 aarch64 on Yoga 630 laptops vs arm64-simulators or Pixel2 phones for the short term?

[09:08:34.0256] <bc>
I'll file a bug about the apk and ask for help.

[09:09:35.0097] <tcampbell>
bc: I think for raptor, etc that the Pixel2 is important. For basic CI, the arm64-simulator is our main go-to

[09:09:46.0737] <tcampbell>
(the JITs have a lot of arch specific code)

[09:10:17.0372] <bc>
But you don't necessarily need hardware? The simulator would be good enough?

[09:10:54.0390] <tcampbell>
for autoland, yes. Perf numbers need hardware (unsurprisingly)

[09:11:38.0275] <tcampbell>
probably good to hear from lth tomorrow about specific wasm needs

[09:12:04.0197] <bc>
Right. I'm mostly concerned with https://bugzilla.mozilla.org/show_bug.cgi?id=1618919 at the moment. Even if I get them running there, there will be problems with capacity and flaky machines. Ok.

[09:13:12.0165] <tcampbell>
bc: I'm gonna grab lunch and then can read that bug

[09:13:23.0629] <bc>
Thanks. I'll cc you.

[09:13:31.0270] <bc>
on the new one.

[09:14:09.0377] <tcampbell>
bc: another thing we are wondering about is if some of the SM(*) jobs should use the artificats from browser build (using `--enable-jsshell`) and focus on just tests

[09:14:32.0510] <tcampbell>
cloning and rebuilding shell does add up still

[09:15:04.0010] <jandem>
that's what we do for the 'Jit' jobs fwiw

[09:15:16.0013] <tcampbell>
ah

[09:15:17.0008] <bc>
That was going to be my approach for the yogas. I really don't like mixing the building and test tasks. There are too many things lacking in the build kinds.

[09:21:12.0801] <Waldo>
djvj: I think generally we tend to have if-else separate code paths to handle UTF-8 and Latin-1 and UTF-16 all separate, and not a single iteratory thing to rule them all.

[09:21:32.0866] <Waldo>
djvj: But maybe it depends what your code looks like, feel free to link something if you want.

[09:22:33.0758] <Waldo>
!summon mrgiggles

[09:24:05.0108] <sfink>
Wow. I am truly an idiot, doing truly idiotic things.

[09:25:22.0106] <sfink>
/me just spent time trying to figure out why phabricator wasn't showing an update, then decided "broken tools are broken" and landed anyway, only to discover that he hadn't updated the patch in the first place.

[09:25:57.0061] <djvj>
Waldo: I don't mind separate code-paths or types, as long as I can get the allocation-free iteration over the variety of input text formats I'm dealing with.

[09:26:16.0901] <Waldo>
That should be readily achievable.

[09:26:18.0139] <sfink>
and boy howdy does `mach lint --warnings --fix` go apeshit on all of our test code

[09:26:21.0394] <djvj>
Waldo: which is Utf8Unit, char16_t, and Latin1Char

[09:27:01.0589] <djvj>
er.. allocation-free iteration that produces JS char16_ts, that is

[09:27:41.0819] <Waldo>
For `Utf8Unit` you should be able to use `DecodeOneUtf8CodePoint` (?) successively to get your code points (keeping in mind it requires you handle the ASCII case yourself).  You'll have to encode to `char16_t` on your own, I think we have a helper for that.

[09:28:13.0256] <Waldo>
`char16_t` I imagine you can figure out yourself...unless you are expected to convert invalid code points to U+FFFD, in which case you get that fun coming to you.

[09:28:18.0847] <djvj>
Oh, yeah I found those.  I was wondering if I needed to write the iterator too, and it seems the answer is yes

[09:28:28.0770] <Waldo>
Latin-1 you can inflate yourself, right?

[09:29:49.0815] <djvj>
Yeah.  There are just a few wrinkles to address there, like the fact that the parser table doesn't store Latin1s, and I need to figure out whether the Latin1 string is pure ascii or not before choosing the parser-internal representation for it.

[09:32:02.0904] <djvj>
all of this logic is going to be stuffed into a Hasher::Lookup type to help intern strings into the parser from a variety of sources, making decisions like the above, without allocating memory - mainly because if the string is already in the table I don't want to allocate a lookup string only to discard it.

[09:32:38.0735] <djvj>
one of the sources is JSAtom* coming from the VM, not just the text being parsed

[09:33:10.0885] <djvj>
Waldo: I'll write up a quick helper class to do this and send it to you for review.

[09:35:55.0401] <djvj>
you know, strings are just insidiously weird.  Seems like the one of the simplest data structures, but so hard to work with effectively.

[09:37:45.0196] <Ms2ger [~half-time dedication]>
It helps a lot if you use utf8 all the way :)

[09:39:29.0735] <sfink>
please go back and fix the web to do that. Or at least JS. It would make life much easier.

[09:40:08.0088] <Waldo>
64K ought to be enough for anybody.

[09:40:36.0138] <sfink>
we have another allocation-avoiding string hasher in the tree, used for detecting duplicates for about:memory. But I think it's only for iterating over ropes? I don't remember it does with the various string encodings.

[09:40:54.0978] <sfink>
 * we have another allocation-avoiding string hasher in the tree, used for detecting duplicates for about:memory. But I think it's only for iterating over ropes? I don't remember what it does with the various string encodings.

[09:41:05.0065] <djvj>
Ms2ger [~half-time dedication]: I once saw a bumper sticker that said "I brake for 4-byte unicode", or a photo of one online that is.

[09:42:23.0408] <djvj>
Waldo: I'm pretty sure just the emoji chars would fill that numberspace up these days

[09:42:35.0132] <evilpie>
Waldo: jorendorff 

[09:42:44.0483] <evilpie>
can you review my "strict warning" patch?

[09:43:08.0709] <Waldo>
sfink: Probably nothing very good, I bet it makes a hash of things.

[09:45:44.0860] <sfink>
I don't understand the intersection of emojis and unicode, and don't really want to. "We finally have a sort of workable solution to the most complicated thing we need to deal with in computer science, namely strings representing human languages. Let's add an unbounded number of random symbols with intentionally unspecified and questionable semantics to it! With a modifier system! It'll be great!"

[09:46:57.0150] <sfink>
human timekeeping systems are a close second

[09:47:18.0011] <sfink>
notice the common element, the removal of which would solve all of these problems?

[09:47:22.0491] <Waldo>
":levitate:", wut

[09:47:56.0258] <mgaudet>
the full name is amazing: https://emojipedia.org/person-in-suit-levitating/

[09:48:40.0397] <Waldo>
"This character was originally introduced into the Webdings font as an “exclamation mark in the style of the rude boy logo found on records by The Specials". This levitating man was known as Walt Jabsco."  wat

[09:48:53.0518] <Waldo>
 * "This character was originally introduced into the Webdings font as an 'exclamation mark in the style of the rude boy logo found on records by The Specials'. This levitating man was known as Walt Jabsco."  wat

[09:49:05.0902] <djvj>
sfink: I genuinely believe this is going to lead to an evolution of language over time.  I'm too old to be a part of that scene but it's frighteningly rich and acquiring semantic meaning at a fast pace.

[09:49:59.0605] <sfink>
yeah, it reminds me of Chinese and other pictograph-based languages, with deep embedding meanings beyond the literal that writers may or may not choose to imply

[09:50:22.0920] <iain>
A friend of mine (who did her Master's in linguistics) wrote a book about language on the internet

[09:50:27.0038] <sfink>
I tremble to think of the depth of puns that somebody like Waldo could come up with if he natively spoke Chinese

[09:50:30.0902] <iain>
It has a whole chapter about emoji usage

[09:50:42.0971] <Waldo>
Then there's things like most font vendors choosing to bastardize some of the symbols, which is its own deeply destructive anti-norm.  🔫, I'm looking at you.

[09:50:48.0308] <iain>
https://gretchenmcculloch.com/book/

[09:51:01.0442] <sfink>
good title

[09:51:18.0018] <iain>
The conclusion is that it's best to think of emoji as the online equivalent of gestures

[09:52:00.0673] <djvj>
iain: does she try to predict how they'll evolve in the future?  Seems like an interesting book for sure.

[09:55:13.0060] <iain>
djvj: This article might interest you: https://www.wired.com/story/why-unicode-keeps-adding-boring-emoji/

[09:57:35.0161] <iain>
 * djvj: This article might interest you: https://www.wired.com/story/why-unicode-keeps-adding-boring-emoji/

[09:58:59.0766] <tcampbell>
sfink: have any time to talk about my weird gc tracing issue?

[09:59:11.0920] <sfink>
sure

[10:00:10.0983] <tcampbell>
sfink: This is the stack. https://phabricator.services.mozilla.com/D65226 Does a vid call work for you?

[10:00:28.0268] <tcampbell>
(so I can stumble through my explaination..)

[10:01:25.0054] <sfink>
tcampbell: er, wait. I think I may have a meeting rescheduled to right now.

[10:01:49.0082] <sfink>
nope, never mind, that's not this week

[10:02:04.0071] <sfink>
sure, zoom works

[10:07:03.0047] <mconca>
anba: thank you for sending the two intent-to-ship emails to the dev-platform mailing list

[11:55:44.0296] <djvj>
the tip patch connects to the.. broken patch.  the broken patch connects to the.. rebased patch.  the rebased patch connects to the stale patch.

[12:35:51.0402] <Waldo>
/me mutters about the fugly of reporting an error, then doing `!cx->isExceptionPending() || !GetAndClearException(cx, &destClosed)` to get the exception as a value

[12:50:28.0013] <lth>
tcampbell: bc the arm64 simulator is not bad, it catches a number of problems, but running on real hardware would be nice

[12:50:48.0894] <lth>
we are sort of actively discussing whether we can run microbenchmarks as part of the test suite to guard against regressions

[12:50:58.0437] <lth>
that would require actual hardwaere

[12:51:06.0467] <lth>
 * that would require actual hardware

[12:51:26.0387] <lth>
doesn't have to run on every patch, once a day or a few times a week would be ok

[12:52:02.0977] <tcampbell>
presumably the arm64 windows laptops are not what we'd want to use though, right?

[12:52:19.0530] <lth>
a "current"-ish android phone would be more relevant

[12:52:31.0755] <lth>
but beggars can

[12:52:40.0746] <lth>
 * but beggars can't be choosers...

[12:53:12.0487] <lth>
and for the benchmarking stuff in the test suite, any stable platform would be fine

[13:10:59.0173] <tcampbell>
sfink: does JS_GC_DEBUG work for browser builds?

[13:11:43.0396] <tcampbell>
I'm trying to figure out why an AWSY run uses more memory, and I think it is because it not doing all-zone gcs

[13:12:28.0288] <tcampbell>
(there are many processes and Marionette involved though..)

[13:13:44.0707] <bc>
lth: so a pixel2 running SM is better than a windows aarch 64 laptop but either is better than just arm64?

[13:14:22.0869] <lth>
bc: if by "arm64" you mean the simulator then i think yes, and for any kind of benchmarking the simulator is meaningless, of course

[13:18:00.0281] <Waldo>
Hmm, anyone remember seeing anywhere where we have something like `Maybe<Handle<Value>>` in SpiderMonkey?  Some of the piping algorithm stuffs specify algorithms that optionally take an error value, and I'm not sure what happens to be the idiomatic for such patterns.

[13:18:04.0420] <bc>
right, I'm only talking about the SM tests.

[13:18:24.0986] <Waldo>
https://searchfox.org/mozilla-central/search?q=Maybe%3CHandle is basically nothing, and nothing that's stack-allocated at all.

[13:19:17.0482] <Waldo>
And ideally, whatever I find/use, will not look terribly gross to write out.  (Relying on implicit `Handle` constructors for things means my naive guesses are probably fugly-looking.)

[13:20:26.0668] <bc>
We had SM(arm) and SM(arm64) and supposedly SM(on Windows 10 aarch 64 laptops) but they were actually running on the desktop vms instead. I'm supposed to the SM to actually execute on them but if the current SM(arm64) tests on the arm64-emulators are good, enough I'd rather not bother with the laptops. There a very few of them, the continually fall over and can't get back up and are nothing but trouble.

[13:21:03.0954] <tcampbell>
Waldo: stack-allocated would usually be a Maybe<Rooted<T>> or such

[13:21:14.0043] <bc>
But if they are important to run, I'll get them going. But if they aren't and hardware is necessary, maybe the pixel2 phones would be good enough.

[13:21:33.0813] <lth>
phones would be better / more relevant anyhow

[13:22:05.0804] <bc>
Thanks.

[13:23:40.0695] <tcampbell>
`Handle<Maybe<Value>>` doesn't seem that unreasonable

[13:24:16.0215] <Waldo>
tcampbell: Ah, we have hits for that, those do look less terrible somewhat.  🖖

[13:33:47.0226] <sfink>
tcampbell: sorry, it was math tutoring time here. JS_GC_DEBUG should work in browser builds. I know MOZ_GCTIMER does.

[13:34:17.0510] <sfink>
and Maybe<Rooted<T>> is badnasty yuck yuck. Very very easy to break LIFO ordering.

[13:34:45.0481] <sfink>
Rooted<Maybe<T>> is ok, and some of the warts have been shaved off in using them, though I think it get still be a little clunky (extra .get() or something).

[13:35:15.0216] <sfink>
 * Rooted<Maybe<T>> is ok, and some of the warts have been shaved off in using them, though I think it can still be a little clunky (extra .get() or something).

[13:35:53.0268] <tcampbell>
sfink: we still have LIFO ordering constraints?

[13:36:00.0669] <tcampbell>
I thought that was removed years go

[13:36:03.0363] <tcampbell>
 * I thought that was removed years ago

[13:36:03.0561] <sfink>
for Rooted, absolutely.

[13:36:08.0355] <sfink>
PersistentRooted does not.

[13:36:10.0790] <Waldo>
On `Rooted`, most emphatically definitely.

[13:36:20.0526] <tcampbell>
ah

[13:40:26.0235] <evilpie>
Oh interesting, Safari doesn't support BigInt

[13:40:44.0482] <Waldo>
Are they working 0n it?

[13:40:53.0840] <Waldo>
/me runs

[13:42:24.0062] <Waldo>
/me tries to figure out how to `cx->compartment()->wrap` on a `Rooted<Maybe<Value>>`

[13:43:24.0652] <Waldo>
`fromMarkedLocation`?  😟

[13:47:37.0060] <Waldo>
/me tries to find where `Rooted<Maybe<T>>` properly traces the possibly-present `T`

[13:53:02.0083] <jrmuizel>
Can I get a review from somone on https://phabricator.services.mozilla.com/D66281?

[13:56:31.0456] <Ryan Hunt>

jrmuizel: done

[13:56:41.0084] <Ryan Hunt>
jrmuizel: ^

[13:56:42.0875] <jrmuizel>
Ryan Hunt: thanks

[13:59:11.0105] <sfink>
Waldo:  https://searchfox.org/mozilla-central/source/js/public/GCPolicyAPI.h#212

[14:00:27.0463] <Waldo>
Ah, there we go, thank you kindly sfink.

[14:00:40.0090] <Waldo>
Mazes of twisty templates.

[14:01:10.0842] <Waldo>
"for the code is dark and full of terrors"

[14:05:07.0338] <sfink>
as for how to wrap... ugh.... I want to say it's an "it's hurt when I do this" type of thing

[14:05:47.0489] <sfink>
I guess it's either add an overload, or fromMarkedLocation

[14:07:10.0475] <sfink>
a generic MutableHandle<Maybe<T>> doesn't seem unreasonable, I guess

[14:07:28.0904] <sfink>
 * a generic `wrap(MutableHandle<Maybe<T>>)` doesn't seem unreasonable, I guess

[14:28:21.0711] <Waldo>
I suppose that's moderately un-terrible.

[14:31:12.0193] <sfink>
 * as for how to wrap... ugh.... I want to say it's an "it hurts when I do this" type of thing

[14:35:37.0588] <sfink>
it would look better if we stopped hiding the templates behind nuisance HandleValue typedefs.

[14:43:10.0663] <bzbarsky>
Oh, you mean do the DOM style?  ;)

[14:43:24.0802] <sfink>
yes

[14:43:46.0662] <bzbarsky>
I will say, JS::MutableHandle<JS::Value> gets a bit cumbersome, but presumably inside SM you can drop the "JS::"

[14:43:50.0056] <bzbarsky>
bah

[14:44:05.0678] <sfink>
that's fair

[14:44:09.0916] <bzbarsky>
 * I will say, `JS::MutableHandle<JS::Value>` gets a bit cumbersome, but presumably inside SM you can drop the "JS::"

[14:44:20.0977] <bzbarsky>
/me curses the markdown guesser, fixes

[14:44:23.0650] <Waldo>
Inside DOM in .cpp you could reasonably `using JS::Handle;` IMO.

[14:44:37.0079] <bzbarsky>
Yeah, we could

[14:44:42.0706] <bzbarsky>
And maybe should

[14:44:56.0805] <sfink>
Waldo: what's the recommended way to do a variable-length struct? Is `uint8_t data[1]` ok?

[14:47:56.0019] <Waldo>
sfink: "recommended" is a little strong, but `cx->pod_malloc_with_extra` as `NativeIterator` uses it is at least language-correct.

[14:48:47.0012] <Waldo>
Note that `data[1]` is not actually enough to let you arbitrarily index into `data`, only up to the static declared length of the array.

[14:49:22.0043] <sfink>
hrm. Well, that's not so nice.

[14:49:38.0419] <Waldo>
You're doing not so nice things...

[14:49:50.0037] <sfink>
This is for iain's grafting of irregexp onto our tree, so the constraints here are a little... special.

[15:00:14.0339] <iain>
The intended outcome here is just: `struct ByteArrayData { uint32_t length; uint8_t data[length]; }`

[15:01:15.0607] <iain>
Is the quote-unquote right way to do this to declare ByteArrayData as only containing `length`, and then use machinery similar to NativeIterator to access the memory that we know is immediately following it?

[15:02:20.0461] <Waldo>
Yes, pretty much.

[15:03:00.0593] <Waldo>
That said -- if it's definitely just `uint8_t`, you don't have any alignment considerations, so you can just cast `this + 1` to `uint8_t*` pretty much blithely.

[15:03:32.0562] <Waldo>
(as long as you make sure to write into the range of data before depending on its values, of course)

[15:05:39.0604] <iain>
Bluh. What a terrible language.

[15:11:28.0772] <tcampbell>
whoops.. that was a dumb. When I fold lazy and non-lazy scripts, of course the pointers alias..

[15:13:31.0332] <iain>
If Waldo were not available, what would the algorithm be for figuring out variable-length structs? I spent quite a while kicking Google when I initially wrote this code, and nothing useful more useful than `data[1]` popped out.

[15:14:11.0841] <Waldo>
Day drinking.

[15:14:42.0045] <Waldo>
Mildly more seriously, Boost probably has some implementations of this, whose tactics could be cribbed.  Of course that requires reading Boost code...

[15:15:05.0996] <Waldo>
But really, C++ does not much like the idea of variable-length objects and does not make it simple, and that's just the way it is.

[15:17:30.0447] <iain>
You'd think that at some point somebody would have written a blog post saying "no, `data[1]` is undefined behaviour, use this instead"

[15:18:45.0310] <tcampbell>
iain: I mean, I have some overly complex stuff in PrivateScriptData and friends to try and work around this. Lots of pointer arithmetic and placement-new

[15:18:52.0206] <Waldo>
Well, so it's more complicated than that.  If you did `uint8_t* ptr = data;` and then wrote into/indexed `ptr`, I think you're safe -- it's that using `data` for the task is UB.  Literally using the array variable to index is the problem.

[15:21:10.0865] <iain>
Wait, so `uint8_t get(uint32_t index) { return data[index]; }` is undefined, but `uint8_t get(uint32_t index) { uint8_t* ptr = data; return ptr[index]; }` is fine?

[15:21:27.0726] <tcampbell>
http://llvm.org/doxygen/TrailingObjects_8h_source.html is one model I'd like to consider cribbing part of as a general approach

[15:21:53.0841] <Waldo>
I believe so.  I would not readily and immediately _stake my life_ on it, but yes, I think so.

[15:22:06.0512] <iain>
Bluuuuuuuuuuuh

[15:23:17.0331] <sfink>
iain: what is this regexp-shim.h file? Did you write that, or is it originally a shim between V8 and irregexp, or ?

[15:23:30.0725] <iain>
I wrote it

[15:23:39.0776] <sfink>
why the V8 license, then?

[15:24:15.0130] <iain>
Because I wrote it by copying a bunch of code from V8

[15:24:49.0187] <iain>
Maybe it should be dual-licensed?

[15:25:19.0611] <sfink>
oh, hm. I don't even know what the right thing is. I'll request review from mhoye, I guess.

[15:27:03.0836] <iain>
For reference, the previous irregexp code is also V8-licensed, even though bhackett rewrote it substantially

[15:27:22.0117] <iain>
https://searchfox.org/mozilla-central/source/js/src/irregexp/NativeRegExpMacroAssembler.cpp

[15:27:24.0893] <sfink>
even more reason to not even try to work it out myself :-)

[15:59:12.0745] <evilpie>
It's crazy how slow moz-phab is

[16:14:29.0374] <Waldo>
O brave new world

[16:18:04.0441] <evilpie>
Waldo: I am thinking of adding an API like WarnNumber(cx, errornumber, ..args). Where should I define that? I see you added public/Warnings.h, but this probably shouldn't be a public API

[16:19:20.0643] <Waldo>
evilpie: `js/src/vm/Warnings.h`, I guess.

[16:20:00.0309] <evilpie>
ok. Or maybe we should just switch away from using js.msg for these?

[16:20:04.0383] <Waldo>
I imagine embedders probably do want something error-number-like for warnings, or will at some point, but it's probably best to proceed cautiously for sure.

[16:20:18.0635] <evilpie>
yeah. that was my question

[16:28:30.0043] <Waldo>
Anyone want to double-check me on something streams-related?  Specifically -- in https://streams.spec.whatwg.org/#readable-stream-pipe-to "Closing must be propagated backward" where it asserts no chunks have been read/written, doesn't that seem to implicitly preclude streams that can spontaneously _self_-close?  The piping has a lock on the destination writable stream, so no _code_ can close it (which seems to be what the assertion is about), but if you had, say, a writable stream representing a TCP socket, and the OS decided to just close the socket, isn't it possible the destination could become closed after chunks have been read/written?

[16:38:41.0147] <Waldo>
bzbarsky: Latest comment in bug 1612308 may be of interest to you.  (And I guess I still need to spec-poking I promised I'd do...)

[16:38:42.0389] <Botzilla demo>
https://bugzil.la/1612308


2020-03-11
[18:55:02.0516] <Waldo>
Bleh, implicit conversions.  Our relying on `Rooted` to implicitly convert to `Handle`, and `Rooted*` to `MutableHandle`, does not play well with defining templated overloads of things that work on all `T`, not just particular `T` produced by implicit conversion.

[20:17:31.0022] <bzbarsky>
Waldo: It was, yes!  I commented on that github issue before seeing your ping here.

[20:17:50.0577] <bzbarsky>
Waldo: And yes, that conversion thing was a PITA in some cases in bindings...

[09:17:00.0262] <djvj>
Waldo: always thought that was a little bit of C++ too-clever-for-its-own-goodness

[09:17:41.0647] <djvj>
Waldo: btw, review ping when you get a chance.  I'm proceeding with other work using that patch I put up in the meantime, so not a huge rush.

[09:45:46.0721] <sfink>
@allstarschh: my microphone says it's hearing things

[09:46:02.0346] <sfink>
I'll try leaving and re-joining

[09:46:35.0655] <sfink>
ok

[09:53:06.0845] <@allstarschh>
sdetar: ping

[09:58:28.0655] <sfink>
bug 1608068

[09:58:29.0922] <Botzilla demo>
https://bugzil.la/1608068

[10:10:44.0183] <sfink>
bug 1621372

[10:10:45.0386] <Botzilla demo>
https://bugzil.la/1621372 — NEW (nobody) — Make HeapPtr<T> work for non-GC heap T

[10:18:46.0908] <@allstarschh>
sfink: https://bugzilla.mozilla.org/show_bug.cgi?id=1620209

[10:21:12.0703] <@allstarschh>
sfink: https://bugzilla.mozilla.org/show_bug.cgi?id=1620221

[10:21:30.0819] <@allstarschh>
sfink: https://searchfox.org/mozilla-central/source/js/src/gc/WeakMap-inl.h#172

[10:22:16.0707] <@allstarschh>
sfink: https://searchfox.org/mozilla-central/source/js/src/gc/Marking.cpp#537

[10:22:21.0776] <tcampbell>
evilpie: whenever you get a chance, can you rebase the patches for Bug 1621341. I'm a little lost with the current state and can't seem to apply it locally

[10:22:23.0076] <Botzilla demo>
https://bugzil.la/1621341 — NEW (evilpie) — Remove flags parameter from ReportError APIs

[10:24:22.0335] <evilpie>
tcampbell: strange. I think it applied cleanly to m-c for me, but I can just update it

[10:25:12.0955] <tcampbell>
should the three be in a stack?

[10:25:52.0731] <evilpie>
yeah sure

[10:27:40.0589] <evilpie>
ok right. I think this might have broken because I submitted the commits piece by piece instead of all at once

[10:28:21.0453] <@allstarschh>
sfink: https://searchfox.org/mozilla-central/source/js/src/gc/Marking.cpp#537

[10:28:28.0699] <@allstarschh>
sfink: https://bugzilla.mozilla.org/show_bug.cgi?id=1619080

[10:28:58.0637] <tcampbell>
evilpie: oops, I hadn't pulled m-c yet today

[10:30:37.0578] <evilpie>
tcampbell: it should work now. Rebased and all the parent links fixed

[10:31:06.0430] <tcampbell>
thanks. works for me now

[10:32:48.0114] <evilpie>
I am going to try to manage those stacks better in the future, but phabricator is just so slow and you can't even use your repo while it's uploading

[10:46:49.0185] <tcampbell>
yeah, updating patch orders is pretty unpleasant

[10:47:41.0314] <padenot>
evilpie: how slow are you talking? this works well for me

[10:47:52.0348] <mgaudet>
I've had one really pleasant experience with `moz phab reorg`

[10:48:17.0100] <evilpie>
padenot:  like a minute per patch?

[10:48:24.0740] <padenot>
ah ok you have an issue then

[10:48:33.0026] <padenot>
to me, it's slow, but it's about 1s per patch

[10:49:03.0240] <padenot>
recent mercurial + mozphab, or phabsend ?

[10:49:23.0407] <padenot>
and also, evolve or no evolve ?

[10:49:48.0685] <evilpie>
okay, good tip. I think  my hg version is very old

[10:50:02.0330] <padenot>
recent ones are really really really good

[10:50:37.0255] <evilpie>
how do I get a recent version? pip?

[10:50:50.0432] <padenot>
pip is one way, your package manager otherwise

[10:51:17.0389] <padenot>
I thought `mach bootstrap` did "the right thing"

[10:52:00.0445] <padenot>
once you've upgraded, try `hg absorb` if you're regularly doing big patch series

[10:52:35.0746] <padenot>
and make sure to enable evolve, it's a massive speed boost, in addition to being a good feature and a super nice way to never lost anything

[10:52:45.0588] <padenot>
 * and make sure to enable evolve, it's a massive speed boost, in addition to being a good feature and a super nice way to never lose anything

[10:53:14.0643] <padenot>
all those are ways to have your computer do what you would do manually, in a single command, super quickly

[10:53:14.0997] <evilpie>
I have updated hg now, but now I get "*** failed to import extension evolve from /home/tom/.mozbuild/evolve/hgext3rd/evolve: 'module' object has no attribute '_enabled'"

[10:53:48.0061] <padenot>
yes you need to update `evolve`, `mach bootstrap` will do this for you

[10:57:11.0982] <padenot>
`evolve` is essential, because otherwise, it falls back to strip or other destructive things, and this goes against the data structures in mercurial, so it's slow (hg is based around an append-only log)

[10:58:31.0585] <evilpie>
I ran bootstrap again. And it updated evolve as well, but moz-phab is still slow

[10:58:47.0388] <evilpie>
do I need to recreate my treee?

[11:00:10.0430] <padenot>
I've never had to do that

[11:01:14.0408] <padenot>
I know `mozilla-unified` is more compact and uses a newer way of storing things, but that's about it

[11:01:16.0706] <padenot>
1min is insance

[11:01:23.0174] <padenot>
 * 1min is insane

[11:03:25.0896] <padenot>
maybe an old mozphab ?

[11:03:55.0679] <padenot>
I use phabsend, it's nice as well, made by mercurial folks for themselves, with additions for mozilla workflow bits (bug xxxx, r?asdasd, etc.)

[11:05:05.0758] <evilpie>
https://paste.mozilla.org/G0EBNy63

[11:06:00.0912] <padenot>
same version as me

[11:06:36.0802] <padenot>
usually you don't have to do anything with evolve apart from doing `hg evolve --all --any` if you have troubled changesets

[11:07:01.0006] <evilpie>
I was just showing that it seems to be working

[11:07:56.0262] <padenot>
yeah that'a all good it's really mozphab that slow, is that super old as well ?

[11:08:03.0635] <padenot>
dunno if it's updated by `mach bootstrap`

[11:09:01.0936] <evilpie>
It was on 0.1.79, and I just updated to 0.1.80

[11:09:16.0009] <evilpie>
I am going to try just recreating everything

[11:25:44.0560] <evilpie>
padenot: nope still slow. I guess I will have to file a bug

[11:26:14.0829] <padenot>
maybe `perf top` or `stace` or something will shine a light on the problem

[11:27:25.0954] <padenot>
mercurial has things to self-profile, but this clearly is a mozphab issue

[11:30:30.0563] <padenot>
 * maybe `perf top` or `strace` or something will shine a light on the problem

[11:34:51.0989] <evilpie>
bug 1621731

[11:34:53.0198] <Botzilla demo>
https://bugzil.la/1621731 — NEW (nobody) — moz-phab is too slow

[11:37:19.0708] <padenot>
worst case if you have work to do, https://hg.sr.ht/~kwan/phabsend-moz/ will work well and is like 30s to setup

[11:37:37.0710] <padenot>
ah interesting that a 502

[16:31:34.0484] <evilpie>
haha, every piece of code I keep looking at is just wrong in some way. What is going on?!

[16:47:14.0305] <Waldo>
A day in the life

[16:54:05.0436] <tcampbell>
gah. windows-only, automation-only, compacting-gc-only bug, whyyyy

[16:56:11.0339] <tcampbell>
oh crap. This issue is already on autoland

[16:56:26.0192] <tcampbell>
possibly still my fault, but not for the patch I'm worried about!


2020-03-12
[17:23:46.0097] <mgaudet>
https://twitter.com/rocallahan/status/1237891717967175682 summons djvj 🙂

I suspect the answer is: “depends!”

[17:24:46.0562] <Waldo>
mgaudet: Note that that isn't the same thing as the rabbithole we went down.  He's talking about each `double` being heap-allocated, not about the value format encoding being object-biased with doubles penalized.

[17:24:57.0544] <Waldo>
/me was going to write an answer, then reread more carefully

[17:25:34.0675] <mgaudet>
Oh I see. 

[17:25:44.0034] <mgaudet>
Good catch!

[18:15:24.0059] <Waldo>
djvj: I stole ur patch

[05:34:29.0561] <jhorak>
Hi guys, any idea where can I find code which runs GC when there's a low memory on the system?

[05:52:29.0688] <Ms2ger [~half-time dedication]>
Not just guys here, you know

[05:52:46.0712] <Ms2ger [~half-time dedication]>
There's a list of reasons to GC at https://searchfox.org/mozilla-central/source/js/public/GCAPI.h#432 - I don't immediately see a system oom one

[05:54:42.0774] <jhorak>
Ms2ger [~half-time dedication]: oh, sorry, didn't mean any hurt. I found nsAvailableMemoryWatcher seems to do trigger it eventually by observers.

[05:55:08.0367] <padenot>
last ditch and memory pressure are the ones that look relevant

[05:55:23.0845] <padenot>
looking at https://searchfox.org/mozilla-central/source/js/src/gc/GCInternals.h#312

[05:56:13.0769] <jhorak>
I guess this cannot be configured nor triggered manually or periodically by some preference.

[05:56:25.0687] <padenot>
nsAvailableMemoryWatcher is outside spidermonkey, it can release much more than GC things

[05:56:27.0876] <jhorak>
or web page script

[05:56:49.0219] <padenot>
images, video frames, caches, etc, usually this is super effective, a single image is often megabytes

[05:56:59.0107] <jhorak>
ah I see

[05:57:31.0441] <padenot>
but yeah triggering a GC also happens when a low-memory event happens

[05:57:58.0961] <padenot>
`about:memory` has buttons to trigger things

[05:58:08.0448] <jhorak>
We've got a customer who wants to run 12 individual Firefox processes simultaneously and he eventually gets some killed by OOM.

[05:59:38.0430] <padenot>
12 is normal isn't it? I'm running 14 here on my mac

[06:00:01.0476] <padenot>
or are we talking instances (each firefox instance has multiple processes)

[06:00:17.0615] <jhorak>
hm, not windows but whole new instances

[06:00:38.0786] <jhorak>
Don't ask me why...

[06:00:56.0008] <padenot>
windows don't matter too much either, you can have multiple processes for the same window

[07:03:28.0313] <Ms2ger [~half-time dedication]>
Guh, here I thought `{ x() {...} }` and `{ x: function() {...} }` were basically equivalent

[09:16:04.0765] <sfink>
I'm failing at searchfox. How is TypedObject limited to Nightly? (I checked in a release firefox, just to be sure.) The interface largely comes from the self-hosted TypedObject.js, which seems to exist unconditionally.

[09:22:14.0534] <jonco>
sfink: looks like a configure option: https://searchfox.org/mozilla-central/source/js/moz.configure#501-513

[09:22:40.0626] <sfink>
Oh! Thanks!

[09:22:46.0991] <sfink>
and welcome back!

[09:22:58.0658] <sfink>
I left the hard stuff for you. You can thank me later.

[09:23:06.0613] <jonco>
thank you

[09:23:07.0733] <jonco>
hah

[09:24:33.0061] <sfink>
huh, it boils down to a weird function named GlobalObject::skipDeselectedConstructor

[09:33:48.0457] <nox>
Does anyone know if only .zip archives can be downloaded from hg.mozilla.org now? Or if there is another format? A script in Servo used to download stuff from a .tar.gz and that's disallowed now

[09:41:40.0229] <jorendorff>
tcampbell: mgaudet: caroline: My kids' school just got cancelled, because of a severe weather warning here. I have to run pick them up, might be late for the Stencil meeting

[09:42:00.0625] <tcampbell>
got it

[09:42:29.0940] <jorendorff>
It should not take that long to find them but they are... wandering spirits

[09:42:37.0880] <jorendorff>
and it'll be total chaos there i'm sure

[09:45:05.0890] <caroline>
good luck! 😬

[10:42:56.0345] <mgaudet>
the artist formerly known as botzilla

[10:43:25.0978] <Benjamin Bouvier>
it has a Mozilla.org account now!

[10:43:29.0372] <mgaudet>
botzilla: welcome back

[10:43:33.0366] <mgaudet>
:D 

[10:44:26.0165] <Benjamin Bouvier>
!treestatus autoland

[10:44:27.0487] <botzilla>
autoland: closed (eslint)

[10:44:31.0326] <Benjamin Bouvier>
good bot

[10:45:15.0606] <mgaudet>
how do we ask botzilla for their current set of commands and capabilities? (I used to DM mrgiggles (RIP) help) 

[10:48:43.0821] <bc>
I'm trying to get xpcshell tests to run from mach and am hitting [this assert](https://searchfox.org/mozilla-central/source/js/xpconnect/src/nsXPConnect.cpp#1190). Does any one know off hand what is wrong?

[10:49:01.0980] <Benjamin Bouvier>
> <@mgaudet:mozilla.org> how do we ask botzilla for their current set of commands and capabilities? (I used to DM mrgiggles (RIP) help)

I think you can ask them for "! help" (minus the space) in a private conversation

[10:49:24.0483] <mgaudet>
yep! 

[10:50:05.0241] <Benjamin Bouvier>
(You can do it in a public room too, but it'll spam the entire channel; it doesn't know how to open private conversations yet, because this is a bit complicated to do in matrix (basically have to iterate over all the open channels, query list of participants, and see if it's a 1:1 channel, since private conversations are just that))

[10:50:08.0791] <mgaudet>
(the m.notice message type is a nice touch :) 

[10:50:19.0084] <mgaudet>
 * (the m.notice message type is a nice touch :) )

[11:01:30.0787] <bc>
fwiw, explicitly setting user_pref("security.turn_off_all_security_so_that_viruses_can_take_over_this_computer", true); didn't help. Still getting MOZ_Assert: Assertion failure: ((bool)(__builtin_expect(!!(!NS_FAILED_impl(rv)), 1))), at js/xpconnect/src/nsXPConnect.cpp:1190

[11:12:53.0865] <tcampbell>
weird

[11:37:17.0408] <denispal>
hey, I am wondering how to reproduce a reftest failure locally with mach? e.g.
`[task 2020-03-12T03:20:14.445Z] 03:20:14     INFO - REFTEST TEST-UNEXPECTED-FAIL | js/src/tests/test262/language/expressions/dynamic-import/namespace/await-ns-define-own-property.js;async | No test results reported. (SCRIPT)`

[11:37:33.0788] <denispal>
I tried ./mach reftest js/src/tests/test262/language/expressions/dynamic-import/namespace/await-ns-define-own-property.js but it seems to run no tests

[11:38:06.0104] <denispal>
or maybe that is the failure

[11:38:33.0309] <sfink>
there is a `mach jstestbrowser` command

[11:38:45.0692] <sfink>
that I just ran, and had it exit without running any tests :(

[11:39:11.0411] <sfink>
oh. `Exactly one of reftest.manifests or reftest.tests must be specified.`

[11:40:00.0937] <sfink>
I may try making my own jstests.list that gives just the tests I want.

[11:40:20.0123] <sfink>
(I am coincidentally trying to do exactly the same thing as you right now, just with different tests)

[11:41:45.0944] <sfink>
Huh. It at least tried to load the file. `Error in manifest file file:///home/sfink/src/mozilla/js/src/tests/test262/jstests.list line 3: unknown test type shell-option(--enable-weak-refs)`

[11:44:38.0116] <denispal>
Seems like every command I try ends with:
```
REFTEST SUITE-START | Running 0 tests
REFTEST INFO | Result summary:
REFTEST INFO | Successful: 0 (0 pass, 0 load only)
REFTEST INFO | Unexpected: 0 (0 unexpected fail, 0 unexpected pass, 0 unexpected asserts, 0 failed load, 0 exception)
REFTEST INFO | Known problems: 0 (0 known fail, 0 known asserts, 0 random, 0 skipped, 0 slow)
REFTEST SUITE-END | Shutdown
```



[11:45:07.0378] <sfink>
yeah, I have to scroll way up to find a meaningful error

[11:50:41.0337] <sfink>
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Running_Automated_JavaScript_Tests says you can use `./mach jstestbrowser --filter=PATTERN`

[11:51:10.0262] <sfink>
though it seems I still have to clear up whatever's causing the manifest parsing errors. I must need to delete more things or something.

[11:52:02.0255] <sfink>
and I need to be setting up lunch

[12:33:06.0203] <mgaudet>
there is https://bugzilla.mozilla.org/show_bug.cgi?id=1611473 

[13:02:50.0298] <sfink>
I'm back at it

[13:02:58.0982] <sfink>
and thanks, mgaudet , that gave a crucial hint

[13:03:30.0621] <sfink>
I can get it to work if I run eg `mach jstestbrowser obj-debug/dist/test-stage/jsreftest/tests/js/src/tests/test262/jstests.list`

[13:03:49.0735] <sfink>
one trick is that the jstests.list files in the tree are not usable for jstestbrowser

[13:04:18.0467] <sfink>
it needs the ones generated by `make stage-package`, aka jstests.py --make-manifest

[13:04:29.0967] <sfink>
 * it needs the ones generated by `make stage-package`, aka `jstests.py --make-manifest`

[13:05:04.0685] <sfink>
something about all this needs to be fixed, but I've been down a few too many rabbit holes lately so I'll stay out of this one for now

[13:10:55.0452] <mgaudet>
glad to be of 'service' :) 

[13:11:24.0274] <sfink>
and after all that, it seems to be claiming that everything just works

[13:11:30.0494] <sfink>
I was expecting chaos and mass suffering

[13:12:51.0810] <sfink>
ah! Life is as expected. It looks like it's probably still skipping the ones I want.

[13:17:28.0165] <mgaudet>
(I have had a previous bad experience with jstestbrowser; the bug that I ran into does look a touch different tho: https://bugzilla.mozilla.org/show_bug.cgi?id=1391853

[13:17:32.0476] <mgaudet>
 * (I have had a previous bad experience with jstestbrowser; the bug that I ran into does look a touch different tho: https://bugzilla.mozilla.org/show_bug.cgi?id=1391853 )

[13:18:30.0725] <sfink>
I could've sworn I tracked that one down quite a ways before

[13:20:39.0963] <sfink>
bug 1468677

[13:20:41.0759] <botzilla>
https://bugzil.la/1468677 — RESOLVED (sfink) — ./mach jstestbrowser --filter option runs no tests

[13:20:44.0625] <sfink>
apparently that wasn't enough for your usage

[13:21:07.0958] <mgaudet>
¯\_(ツ)_/¯ the date on this note is May 4, 2018

[13:21:10.0364] <sfink>
oh wait, mine came after yours

[13:21:10.0526] <mgaudet>
so... no idea 

[13:22:03.0399] <sfink>
that looks like a dupe, which is hopefully now fixed?

[13:22:35.0776] <sfink>
/me tries it

[13:22:50.0817] <sfink>
be shallow, my rabbit hole

[13:23:01.0175] <mgaudet>
🤞

[13:44:34.0496] <Waldo>
> <@sfink:mozilla.org> huh, it boils down to a weird function named GlobalObject::skipDeselectedConstructor

That function is up there for the worst-named, worst-semantics in SpiderMonkey IMO.

[13:46:45.0173] <sfink>
that's a pretty high bar

[13:47:31.0596] <Waldo>
It is, but the pile of negatives there and the name make it a serious competitor.

[13:47:48.0787] <Waldo>
And "selected" is totally unspecific too.

[13:48:50.0885] <ptomato>
I would've nominated js::Jsvalify, but it looks like it's removed in mozilla-central, kudos to whoever did that

[13:54:02.0693] <Waldo>
`Jsvalify` was silly, but it wasn't inscrutable.

[13:54:18.0036] <Waldo>
There's no `jsval` any more, just `JS::Value` only.

[13:54:33.0382] <Waldo>
And I think we're back to only having `JSClass` now, too.

[13:55:33.0291] <ptomato>
aha, you might find it was more inscrutable than you think 😃 despite the name it had nothing to do with jsval or JS::Value...

[13:56:51.0504] <Waldo>
If memory serves, it did interconvert between `jsval` and `JS::Value`, among other uses, but it's been awhile.

[13:57:07.0391] <Waldo>
And those brain cells ought be sacrificed to new SpiderMonkey gods.

[13:57:21.0588] <ptomato>
it cast `js::Class*` to `JSClass*`

[14:07:20.0735] <jorendorff>
I rebased and conflict city


2020-03-13
[04:49:56.0355] <nox>
Removing implicit conversions is really useful for future readers whose sole exposure to C++ is calling it from Rust, hah.

[06:13:42.0088] <tcampbell>
🚀🚀🚀 Let's see if this sticks!

[07:28:05.0664] <tcampbell>
do arm64 builds not support asm.js? huh

[07:32:07.0512] <jandem>
I think the wasm baseline compiler doesn't support asm.js, and there's no wasm-Ion on arm64

[07:38:32.0707] <jorendorff>
mgaudet: https://phabricator.services.mozilla.com/D66627 Note that arai is starting to send scopes from Rust to C++

[07:38:56.0612] <jorendorff>
mgaudet: Currently putting more weight on the virtual method

[07:39:26.0203] <jorendorff>
which I understand isn't what we want long term, but maybe it is the right way to proceed tactically

[07:39:35.0883] <jorendorff>
the idea would be,

[07:40:17.0293] <jorendorff>
design the new stencil structures as desired whether we're working on the C++ side or the Rust side

[07:40:49.0672] <jorendorff>
if on the Rust side, use a virtual method to continue supporting the existing C++ way

[07:41:06.0109] <jorendorff>
and later either switch the existing C++ frontend over to the new way and remove the virtual method,

[07:41:21.0534] <jorendorff>
or (in time) delete the existing C++ frontend and remove the virtual method

[07:43:48.0253] <mgaudet>
jorendorff: I think I'm mostly OK with that. 

[07:45:00.0935] <mgaudet>
The only thing that's maybe a little odd is the transliteration from SmooshScopeData to ScopeCreationData; I guess I wonder when we try to get a more unified representation to try to avoid that translation step

[07:45:29.0553] <mgaudet>
(ie, is it worth it for us to try to think about how that's going to look -now-, or is better to see how things evolve first.) 

[07:48:33.0803] <mgaudet>
it is also early and I haven't had coffee yet so maybe don't take me -too- seriously

[07:57:14.0563] <jorendorff>
i wondered about that too

[07:59:25.0451] <nox>
Btw: "jsparagus is not on crates.io yet. The AST design is not stable enough.", that's what 0.y.z versions are for.

[08:00:19.0193] <nbp>
Then we would have to manage version numbers … and the release process.

[08:00:41.0713] <nbp>
which would already be too much knowing the speed at which we break things.

[08:00:58.0364] <nbp>
nox: ^

[08:01:24.0249] <nox>
Disagree. We have done that for years in Servo. We have some 0.30.z versions, it's just a matter of running cargo publish.

[08:02:02.0455] <nbp>
"just" …

[08:03:11.0556] <nox>
Yes. Just. Just like you have to update the rev key when you do a change in the jsparagus repo.

[08:03:55.0838] <nbp>
Sorry to not have time to investigate what "just" means, as I have work to complete.

[08:05:38.0692] <nox>
Don't answer me then. :)

[08:09:19.0751] <nbp>
how would you handle files generated from python?

[08:09:42.0276] <nbp>
 * nox: How would you handle files generated from python?

[08:10:36.0209] <nox>
Just like you do with a git dependency. Or do you mean they are generated outside the build script and thus the project isn't using cargo as the top-level build tool?

[08:10:57.0462] <nox>
That's a better reason to not publish on crates.io, but that's not the reason stated in the readme.

[08:11:51.0189] <nox>
mozjs_sys used to be published on crates.io (it's not anymore because Reasons), and even back then it was the build system from the tarball, thus definitely invoking Python on its own.

[08:12:14.0029] <nbp>
yes for the second, they are generated by a Makefile at the top-level, not the build script.

[08:12:46.0427] <nox>
That's a very good reason to not publish it, and that's a very good reason for me to be anxious about the next smup in Servo once jsparagus is the default frontend.

[08:13:22.0078] <nox>
 * That's a very good reason to not publish it, and that's a very good reason for me to be anxious about the next smup in Servo once jsparagus is the parser generator if it's invoked at build-time when building SM.

[08:14:39.0456] <nox>
Will the generated stuff be versioned in mozilla-central? Or at least included in the tarballs?

[08:15:15.0266] <nox>
 * That's a very good reason to not publish it, and that's a very good reason for me to be anxious about the next smup in Servo once jsparagus is the default parser generator if it's invoked at build-time when building SM.

[08:15:47.0441] <nbp>
so far we have a ci_generated branch, but it is for ci, not to be published.

[08:16:44.0248] <nox>
Ok, there are other things versioned in m-c (binast stuff, ICU stuff, etc), so I'll just hope that those parsers follow the same policy once the generator is used by default.

[08:16:56.0752] <nox>
 * Ok, there are other generated things versioned in m-c (binast stuff, ICU stuff, etc), so I'll just hope that those parsers follow the same policy once the generator is used by default.

[08:28:36.0100] <djvj>
Waldo:  us tole my pach! :)

[08:31:55.0475] <djvj>
looks cleaner than mine anyway.  thanks for fixing it!

[08:33:59.0780] <djvj>
last two days have been kind of insane.  In-laws cancelled their 4-month trip here, and our local grocery store is out of toilet paper, and I went and stocked up on dry goods to prepare for a self-imposed semi-quarantine on the assumption that we're asymptomatic carriers.

[08:34:55.0284] <djvj>
I need to go warn the rest of the Toronto folks to pick up essential dry goods before they run out.  The pasta section was almost empty this morning when I went.

[08:35:53.0216] <nox>
Out of curiosity, what's smoosh?

[08:36:28.0967] <mgaudet>
nox: Project Visage -> Smoosh (see https://mozilla-spidermonkey.github.io/blog/2020/03/12/newsletter-3.html for details) 

[08:37:17.0864] <nox>
mgaudet: Any ETA for when this will be the default?

[08:37:34.0825] <mgaudet>
nox: not soon

[08:37:56.0956] <nox>
Ok good to know.

[08:44:41.0712] <Ms2ger [~half-time dedication]>
Seems like y'all are putting a lot of effort into refactoring 👍️

[08:46:15.0507] <nox>
Gonna be hard integrating all of that in Servo but am also thrilled to see more Rust code in SM.

[08:50:05.0782] <djvj>
Ms2ger [~half-time dedication]: yeah there's major refactorings and cleanups happening in a bunch of places.  Stencil as an umbrella fixes a lot of longstanding issues related to clean separation of concerns in the frontend.  Jan's taking a hatchet to a bunch of type-modeling complexity.  New parser in rust.  Exciting times.

[08:50:52.0252] <nox>
Would you folks accept a patch to make jsparagus' build process be driven by a Rust build script?

[08:51:38.0804] <evilpie>
I don't see why not, but it must work with building the shell and browser

[08:51:47.0646] <djvj>
jorendorff: ^--

[08:52:22.0356] <nox>
Won't do it any time soon, but ultimately that's needed to consume SM itself as a crate.

[09:09:58.0481] <nbp>
nox: I think so, yulia|PTO and arai might know better as they both works on the CI integration.

[09:10:17.0233] <arai>
/me reads

[09:13:35.0467] <arai>
Can a Rust's build script require Python environment? that is Python3 + virtualenv + some modules.   I know it can run command, but I'm wondering if it's something reasonable

[09:14:43.0580] <arai>
if that's okay, I think it's fine to move the build script from Makefile to build.rs

[09:15:48.0671] <arai>
btw, I was thinking that `_generated` files are supposed to be part of crate

[09:16:07.0431] <arai>
they're not tracked by git just because they can conflict

[09:16:45.0365] <arai>
I mean, in master branch

[09:19:04.0423] <nox>
arai: A build script can do whatever you want it to do. :)

[09:19:39.0951] <nox>
Our mozjs_sys script uses Python. And cmake stuff obviously.

[09:20:02.0513] <nox>
The one thing cargo doesn't like is a crate containing other crates.

[09:20:52.0772] <arai>
I see

[09:21:15.0825] <arai>
Another concern is the time taken by the generating those files

[09:21:25.0129] <nox>
arai: Yeah that's fair.

[09:21:51.0756] <arai>
(if those generated files are not part of crate but generated at build time of the consumer

[09:22:39.0776] <nox>
(Indeed, if the generated files are versioned where they are used, then I don't need jsparagus at all. That's also doable.)

[09:23:12.0097] <nox>
 * (Indeed, if the generated files are checked into the repo where they are used, then I don't need jsparagus at all. That's also doable.)

[09:23:47.0056] <arai>
current `ci_generated` branch contains everything the consumer needs. and that doesn't require parser generator or any other python scripts

[09:24:04.0655] <arai>
consumer (smoosh crate) can just use it like usual crate

[09:44:11.0736] <nbp>
jandem: is the newsletter public yet? 

[09:44:30.0705] <mgaudet>
nbp: https://mozilla-spidermonkey.github.io/blog/2020/03/12/newsletter-3.html

[09:44:49.0173] <nbp>
yes, but I do not see it on Hacker News

[09:45:07.0177] <nbp>
 * yes, but I do not see it on Hacker News. Which is why I ask.

[09:45:47.0853] <mgaudet>
Well, it's been emailed and published; you want me to submit it?

[09:46:49.0129] <evilpie>
 that reminds me. We should rename to SpiderMonkey Newsletter and add some introduction blurb that explains what it is

[09:47:33.0770] <nox>
Where should I ask questions about WebIDL.py btw?

[09:48:43.0644] <mgaudet>
nbp: https://news.ycombinator.com/item?id=22568780

[09:49:33.0030] <evilpie>
btw you can't upvote that link

[09:49:36.0626] <evilpie>
go to HN's new

[09:49:39.0543] <nbp>
The reason was that I thought publishing it to hacker news was part of the idea of making these newsletter.

[09:51:58.0746] <mccr8>
nox: #DOM is the channel to ask about WebIDL.py

[09:52:52.0034] <arai>
is DOM promise's `mPromiseObj` supposed to never be a CCW?

[09:52:54.0411] <arai>
https://searchfox.org/mozilla-central/rev/f36cb2af46edd2659f446b7acdb2154e230ee445/dom/promise/Promise.cpp#475-488

[09:54:49.0509] <mccr8>
arai: that would be my guess.

[09:55:17.0108] <arai>
mccr8: maybe we can add an assertion there?

[09:55:21.0097] <mccr8>
we should probably be in the realm of mPromiseObj.

[09:55:42.0534] <jandem>
nbp: I don't know if the typical HN audience is super interested in it, but maybe.. It's not the main audience. Someone did post it on /r/firefox yesterday

[09:55:42.0796] <mccr8>
arai: sure

[09:56:00.0097] <arai>
mccr8: great, thanks :)

[09:56:19.0429] <mccr8>
I don't know if we have the realm checking asserts exposed to DOM. Probably not?

[09:56:25.0027] <mccr8>
But of course you can manually do it.

[09:56:55.0893] <arai>
I mean, assert `JS::IsPromiseObject`

[09:58:00.0742] <mccr8>
Oops, right.

[09:58:20.0054] <mccr8>
Yeah, it doesn't call wrap on the argument or anything, it would have to be passed in like that...

[10:00:40.0105] <arai>
okay, I'll file a bug

[10:31:07.0594] <iain>
Waldo: ping

[10:40:13.0381] <mgaudet>
Today I learned: SpiderMonkey is derived from Beavis and Butt-head 

[10:40:23.0737] <mgaudet>
 * Today I learned: The name SpiderMonkey is derived from Beavis and Butt-head 

[10:40:26.0032] <mgaudet>
http://www.wirfs-brock.com/allen/posts/866

[10:54:04.0521] <nbp>
That's the closest reference I found so far: https://getyarn.io/yarn-clip/e99b2308-5a87-4087-98cb-64549609b7b5

[10:54:29.0997] <mgaudet>
that's it! (According to the references) 

[10:54:54.0335] <mgaudet>
Well tracked down; I gave it approximately 60 seconds and gave up

[10:55:03.0147] <mgaudet>
nbp++

[11:00:15.0686] <nox>
Do SM tarballs work with Python 3 yet?

[11:13:36.0501] <nbp>
I had been using python 3 for a while until someone flagged it to not use python2.7.

[11:13:48.0404] <nbp>
My guess would be yes, by removing the check for python2.7.

[11:14:12.0746] <sfink>
until recently, the test harnesses would have errored out with python3

[11:14:46.0343] <sfink>
but they use `#!/usr/bin/env python`, so it depends on what that is

[11:14:57.0676] <sfink>
(I recently upgraded Fedora, which switched it to python 3)

[11:28:04.0354] <nox>
Nice (we don't run SM's own tests in mozjs_sys crate)

[11:29:55.0872] <whimboo>
Hi. When a Debugger.Object wraps a Symbol, does it still mean it is not an object? I try to set a property on it but that fails with `can't assign to property "backendNodeId" on 42n: not an object`

[11:32:22.0106] <whimboo>
oh please drop the question. I figured out the problem

[11:32:43.0268] <whimboo>
the affected code actually didn't wrap both types

[12:22:51.0505] <Waldo>
djvj: FWIW if it wasn't obvious, I did not actually directly test that patch, so I'm assuming your uses adequately will.

[12:23:54.0603] <Waldo>
iain: pong

[12:45:37.0588] <iain>
Waldo: Steve and I have follow-up questions about variable-length structs: https://phabricator.services.mozilla.com/D65572#inline-396904

[12:46:12.0878] <iain>
Although possibly these questions are better phrased as "So, const methods, eh? What's up with that?"

[12:50:02.0549] <Waldo>
(I have no actual evidence for this as of yst, but ^ 😂)

[12:51:01.0138] <iain>
Oh, indubitably

[12:51:06.0557] <iain>
At this point the question is just where

[12:51:09.0743] <Waldo>
 * (I have no actual evidence for this as of yet, but ^ 😂)

[12:52:01.0550] <iain>
And whether there are specific goofs, or just the general goof of trying to write this code in the first place

[12:53:50.0224] <Waldo>
iain: Is `const` an imposition the v8 code makes on us?  Because it would probably be better to have a `const` function that exposes `const uint8_t*` data, and a non-`const` version that exposes `uint8_t*` data.

[12:54:44.0198] <iain>
Actually it might not even need to be const

[12:55:02.0946] <iain>
I don't think V8 ever uses a const ByteArray

[12:56:50.0281] <iain>
My understanding is that a `const` version returning `uint8_t*` data is technically correct, but potentially error-prone?

[12:57:05.0464] <Waldo>
`const` is somewhat more documentary than anything, you can totally modify an object to which you receive a `const` pointer/reference if you know the underlying object is not actually `const`, it's all sort of a charade.

[12:57:13.0218] <Waldo>
Which is roughly what you commented.

[12:57:39.0048] <iain>
Yeah, I went off on a quest to figure out the truth about `const`, and it turns out there isn't a lot of there there

[13:05:29.0570] <sfink>
oh, you're already talking about it

[13:07:24.0975] <iain>
I think our consensus is that the code is technically correct, but we should rewrite it anyway?

[13:07:28.0421] <sfink>
I'm ok with it landing as-is. It just seems weird to me to say "ooh, I'm const, you can't mess with me, but here's a direct pointer to my innards so you can stir them around all you like."

[13:08:15.0796] <iain>
Technically C++ thinks they are somebody else's innards!

[13:08:46.0113] <sfink>
sure, in this case where the data is past the end

[13:08:53.0465] <iain>
But yeah. I'll rewrite it, and now that I think about it I should also hoist it into the header file for inlining purposes

[13:09:47.0404] <sfink>
argh. I never, ever remember to click submit on Phabricator unless I'm approving or rejecting a change.

[13:41:14.0058] <Waldo>
"_among_ our many phabricator complaints..."

[13:46:11.0323] <iain>
Oh, hey, sfink 

[13:46:42.0458] <iain>
You know how we were talking about licensing on the shim file?

[13:46:57.0008] <iain>
We are both blind

[13:47:12.0273] <iain>
If you scroll up three lines, I had already included the mozilla license there

[13:47:24.0840] <iain>
The file was already dual-licensed

[13:47:42.0924] <iain>
https://searchfox.org/mozilla-central/source/js/src/new-regexp/regexp-shim.h#3-5

[13:47:52.0922] <sfink>
Wat?
Doh!

[13:48:08.0619] <iain>
As the person who did this, you'd think I would have remembered

[13:48:56.0993] <sfink>
Yeah, I do that all the time. I won't be pointing any fingers. 

[14:30:03.0506] <jdm>
anybody ever seen this error before?

[14:30:04.0790] <jdm>
C:/Users/image/mozjs/mozjs/js/src/wasm/WasmGenerator.cpp(932,8): error: range-based for loop requires type for loop variable

[14:30:22.0832] <jdm>
it comes from https://searchfox.org/mozilla-central/source/js/src/wasm/WasmGenerator.cpp#931

[14:30:31.0342] <jdm>
and it makes no sense to me at all

[14:30:47.0618] <jdm>
I only get it when I build with --enable-jitspew which is even weirder, since it seems to be unrelated to spew code

[14:44:13.0466] <tcampbell>
jdm: I presume that is with MSVC?

[14:47:24.0217] <tcampbell>
seems like a weird compiler bug, or otherwise some bizarro header conflict

[14:49:51.0779] <jdm>
tcampbell: this is clang

[14:50:41.0086] <tcampbell>
hmm

[14:53:19.0138] <peey>
Where can I find more about `eval`'s performance characteristics? I read somewhere that JIT-compiled code is cached and re-used if you eval the same string, is this documented somewhere?

[14:53:59.0935] <iain>
jdm: Is that the error you would get if CallFarJump were not visible for some reason? Like, if building with jitspew enabled broke some header somewhere?

[14:54:30.0851] <jdm>
iain: it's defined as a subclass of ModuleGenerator in WasmGenerator.h :/

[14:55:07.0717] <jdm>
I can't figure out how that situation could occur, given those two files

[14:56:40.0322] <iain>
Is this on the arm simulator?

[14:57:08.0630] <iain>
Slash on arm in general?

[14:58:39.0073] <iain>
It looks like the three #defines controlled by --enable-jitspew are JS_JITSPEW, JS_STRUCTURED_SPEW, and JS_DISASM_ARM64

[14:58:52.0487] <tcampbell>
peey: There is a short-lived cache for evals based on an exact string match. It is not the most reliable thing

[14:59:13.0752] <jdm>
iain: it's part of an arm64 build, yeah

[14:59:18.0988] <tcampbell>
Will probably get significantly better in next few months though

[14:59:43.0209] <tcampbell>
(the caching infrastructure is being redone for all things script-related)

[15:01:10.0815] <tcampbell>
(this is the cache https://searchfox.org/mozilla-central/search?q=js%3A%3AEvalCache&path= )

[15:02:24.0029] <peey>
Thanks, this helps a lot! Is there a design doc / mailing list discussion for the caching infra overhaul?

[15:03:18.0872] <tcampbell>
meta-bug https://bugzilla.mozilla.org/show_bug.cgi?id=1586771

[15:04:00.0849] <tcampbell>
one big limitation of eval cache today is no inner functions or most object literals are allowed

[15:04:39.0476] <tcampbell>
(the eval-specific design hasn't been worked out yet)

[15:05:40.0711] <peey>
> <@tcampbell:mozilla.org> one big limitation of eval cache today is no inner functions or most object literals are allowed

Do you mean that the eval results will not be cached if the script being evaluated uses inner functions or object literals?

[15:05:49.0442] <tcampbell>
correct

[15:06:17.0886] <peey>
That's bad. Do you know what the behavior of other browser engines is? 

[15:06:26.0163] <peey>
 * That's bad. Do you know what the behavior of other js engines is? 

[15:06:36.0377] <tcampbell>
not sure

[15:08:00.0145] <sfink>
you definitely want to be profiling for stuff like this, though. Caches and JIT warmup are areas that are notoriously counterintuitive in terms of predicting performance characteristics.

[15:08:52.0358] <iain>
Waldo: about this comment: https://searchfox.org/mozilla-central/source/js/public/RegExpFlags.h#25-30

[15:09:36.0356] <Waldo>
Ooh, you gon' have fun, aren't you.

[15:09:40.0308] <iain>
XDR has a build id burned in that prevents us from reusing stale data. I don't know anything about structured clones.  

[15:09:51.0973] <Waldo>
XDR at least you should...yeah.

[15:10:02.0879] <iain>
If one were to hypothetically add support for a new regexp flag, what would be necessary?

[15:10:08.0167] <Waldo>
Structured clone data can include regular expressions, I think, so you get pain there.

[15:10:32.0349] <iain>
(If it helps, I already have a patch, so I can put it up for review and you can point out the bits that are missing)

[15:11:01.0186] <tcampbell>
Just looking at the engine funny invalidates XDR versions.

[15:11:24.0421] <sfink>
structured clone just stores the flags value and source text, so it should be backwards-compatible at least

[15:11:36.0749] <Waldo>
Hmm.  If SC data is only processed by newer and newer builds over time, you could just add it.  But if new SC data has to be processed by old builds...well, you might lose the flag, but there's a question whether the old builds might restrict flags that are present -- so you'd just get an error trying to read the data.

[15:11:54.0345] <Waldo>
But sfink knows more about this than I do.

[15:12:09.0022] <sfink>
it'll throw an error if you add a new flag

[15:12:10.0631] <Waldo>
Or at least not less.

[15:12:17.0733] <sfink>
based on RegExpFlag::AllFlags

[15:12:59.0486] <iain>
The old build, you mean? I'm updating RegExpFlag::AllFlags as part of my patch

[15:13:09.0202] <sfink>
I mean, if you try to use an old build that deserializes stuff from a new build with an extra flag

[15:13:25.0232] <iain>
Right. Is that a thing that can happen?

[15:13:56.0137] <sfink>
SC has a version number, but it doesn't need to be bumped for backwards-compatible changes like this

[15:14:28.0764] <sfink>
the main place is comes up is in reading local storage from the profile, and there we don't support reading new stuff with old versions

[15:14:46.0062] <sfink>
(it can sometimes get messy if you land something, it gets into people's nightlies, and you back it out, though)

[15:15:02.0804] <sfink>
 * the main place it comes up is in reading local storage from the profile, and there we don't support reading new stuff with old versions

[15:15:57.0609] <iain>
Where does structured cloning deserialize regexps?

[15:16:42.0843] <sfink>
https://searchfox.org/mozilla-central/source/js/src/vm/StructuredClone.cpp#2565

[15:17:49.0584] <iain>
Okay, I think that should be fine

[15:18:04.0045] <iain>
It's creating the RegExpFlags here: https://searchfox.org/mozilla-central/source/js/src/vm/StructuredClone.cpp#2542

[15:18:26.0020] <sfink>
yep, just after checking vs AllFlags

[15:19:17.0134] <iain>
I was thinking that I could land all the flag code early, with the few places that can actually set/read it (the parser and the exposed dotAll property) #ifdef'd out

[15:19:18.0688] <sfink>
is there a nice workflow for editing and rerunning jsreftests in the browser? It seems I need to run a browser with SpecialPowers available or something.

[15:19:48.0599] <jdm>
aha, it appears that `far` is being interpreted as a keyword

[15:20:02.0360] <jdm>
which makes sense but is also weird that this isn't affecting other platforms?

[15:20:59.0689] <jdm>
maybe there's a `#define far` somewhere that's getting in the way

[15:22:09.0614] <jdm>
yeah, the errors I was getting make sense if `far` is silently being removed from those lines

[15:26:05.0193] <jdm>
https://stackoverflow.com/questions/3046964/define-far-define-near-windef-h

[15:26:19.0225] <jdm>
I have a strong suspicion about this one, since I'm building windows arm64

[15:27:04.0681] <Waldo>
Have you considered using Linux?

[15:27:06.0288] <Waldo>
/me runs

[15:27:09.0909] <tcampbell>
yussss... merged successfully

[15:28:02.0379] <tcampbell>
Waldo: it is still your fault I spent two years running windows on a macbook

[15:29:34.0117] <jorendorff>
tcampbell: I tried to land the patches in bug 1615402 twice yesterday and twice today and got conflicts each time. the last rebase is hard

[15:29:35.0665] <botzilla>
https://bugzil.la/1615402 — ASSIGNED (jorendorff) — Factor ImmutableScriptData fields out of ScriptStencil

[15:29:43.0205] <Waldo>
tcampbell: Moi?  C'est impossible!

[15:29:47.0268] <jorendorff>
i'm still trying

[15:30:00.0077] <Waldo>
tcampbell: Actually tho, I don't know what you mean by that or how that could be true...

[15:30:02.0065] <jorendorff>
each time the conflicts were apparently new

[15:30:47.0364] <tcampbell>
Waldo: before I started I asked this channel for dev setup advice, and you gave me the serious/not-serious answer of more people should run windows

[15:30:58.0188] <jorendorff>
yeah this is just a disaster

[15:31:05.0446] <Waldo>
lol, and you listened?  n00b

[15:31:20.0706] <tcampbell>
the first year I always had a few timezone tests failing because it turned out our automation servers were in PST

[15:31:37.0621] <sfink>
everyone in Europe suffered from that too

[15:31:41.0682] <iain>
Before I started, Matt gave me the same advice

[15:31:43.0389] <iain>
I tried for an entire morning

[15:32:07.0708] <sfink>
it takes me a day every time I need to revive my Windows development environment

[15:32:16.0603] <Waldo>
Let the record reflect that the US just went up 4-3 on the Soviet Union in the hockey game just now, on in the background here.

[15:32:29.0289] <sfink>
we'll be cross-compiling from linux to windows soon, though!

[15:33:10.0452] <Waldo>
Getting my Windows setup going again mostly just requires a super-laborious `hg up`, these days.  Tho probably the mozilla-build on it is years old now and in need of a refresh.

[15:33:43.0702] <tcampbell>
I've been running a Windows laptop with VSCode remoting to a beefy linux machine

[15:33:45.0253] <sfink>
I use a VM that shares my Linux checkouts, so I'm spared that part. At the cost of much slower builds.

[15:36:01.0066] <tcampbell>
50s jit-tests is nice

[15:38:21.0184] <jdm>
what does ionspew output look like?

[15:38:30.0233] <jdm>
how do I differentiate it in a crowded stderr?

[15:40:23.0584] <iain>
If (for example) you set IONFLAGS=scripts, then you'll see a line starting with [IonScripts] whenever we compile/recompile/inline a script.

[15:40:41.0571] <jdm>
thanks

[15:42:29.0950] <jorendorff>
tcampbell: I think I am going to try just landing the first four patches in bug 1615402 while I'm trying to figure out what can be salvaged of the rest

[15:42:31.0477] <botzilla>
https://bugzil.la/1615402 — ASSIGNED (jorendorff) — Factor ImmutableScriptData fields out of ScriptStencil

[15:43:03.0944] <tcampbell>
jorendorff: makes sense. I'm not sure how else to manage the churn here

[15:44:07.0147] <tcampbell>
jorendorff: The LazyScript stuff just merged! \o/

[15:44:21.0663] <tcampbell>
gonna remove the `LazyScript` type entirely now

[16:09:25.0055] <mgaudet>
jorendorff: I'm invested in seeing part 5 land; I'm at EOD here, but if you want me to see if I can untangle come Monday, lemme know and I'd gladly try to rebase the last few for you. 

[16:11:30.0790] <mgaudet>
But for now.... https://gph.is/2Jf0zlv


2020-03-14
[17:15:24.0912] <jorendorff>
mgaudet: hi, i took a break and ran an errand

[17:15:30.0104] <jorendorff>
mgaudet: I'm going to take one more look

[17:22:47.0205] <jorendorff>
ok, part 5 might be all right, but it can't land without part 7 because it totally breaks smoosh

[17:34:38.0885] <jorendorff>
mgaudet: things are not as bad as i thought

[17:42:54.0880] <Waldo>
FWIW people, with no reason for me to go to Vegas (NHL game postponed, SCOTUS arguments no longer open to the public), _if_ I still go I can just skip Vegas and save four days of time.  So I can delay deciding whether to go at all, til next Saturday.  And therefore I will be around all next week.

[17:43:41.0925] <Waldo>
The odds on me going at the end of next week seem pretty low, but I can put off making a decision til next week for now.

[03:24:46.0713] <nox>
A bit unfortunate that the SM tarball checks whether autoconf is installed when autoconf shouldn't be used by the tarball.

[15:02:41.0034] <evilpie>
tcampbell ++ congrats on eliminating LazyScript

[15:05:30.0616] <tcampbell>
thanks. It was more of a boil-the-ocean project than I originally intended, but a lot of stuff naturally falls out it which reassures me it was a good move


2020-03-15
[22:07:45.0603] <arai>
Waldo: can you CC me to the bug?

[22:07:59.0517] <Waldo>
Oh, whoops.  Sure.

[22:08:15.0220] <Waldo>
Sec, I'm writing an explanatory comment on the patch.

[22:08:28.0123] <arai>
thanks :)

[22:08:30.0539] <Waldo>
Alternatively I could probably unhide the bug, too, I think.

[22:25:29.0266] <Waldo>
Okay, added you.  If you agree there's no security concern, that would make three of us, so we should be super-safe unhiding.  :-)  But I may wait til just before landing the patch, out of paranoia/abundance of caution.

[22:25:43.0100] <Waldo>
It ought go without saying, there is no rush on this.  ;-)

[23:05:25.0326] <arai>
r+ed.   I'd say semi-super-safe

[23:22:54.0388] <Waldo>
lol

[13:23:45.0099] <arai>
moz-phab with git+git-cinnabar works very quickly compared to mercurial

[13:25:16.0128] <arai>
took less than 1 minute to submit 6 patches

[13:39:56.0657] <Waldo>
arai: Ugh, that patch doesn't work, `uint8_t << N` doesn't have type `uint8_t` and can have a value that exceeds `uint8_t` bounds.  Updating the patch now, and with it writing comprehensive tests...

[13:40:17.0876] <Waldo>
(Shift expressions have the type of their _promoted_ left operand.)

[15:49:50.0268] <Waldo>
arai: I tried adding helper functions, couldn't come up with anything even approaching aesthetically clean.  I _could_ use `DecodeOneUtf8CodePointInline` for the possibly-most-clean tack, but I'm pretty sure I don't trust the compiler to do equivalent boiling-away to what is done here.

[15:51:16.0396] <arai>
okay

[15:52:00.0903] <Waldo>
arai: Also, I checked, only the expected parts of that test fail with the current code.  (I ran the test, found a place that failed, determined it was the failure mode reported in the bug, commented it out, recompiled and retested, then repeated til there were no failures.)

[15:53:01.0405] <Waldo>
I did the same audit of callers you did and came to the same conclusions about nothing else being affected by this.


2020-03-16
[18:28:19.0633] <loganfsmyth>
are there any utilities for helping figure out why something isn't being GCed?

[18:28:56.0057] <arai>
if it's on browser, about:memory

[18:29:13.0510] <arai>
there you can write the GC/CC log to file

[18:29:24.0926] <arai>
the file describes the reference

[18:30:18.0279] <loganfsmyth>
in this case I'm trying to write an XPCshell test, calling `Components.utils.getWeakReference` and then trying to assert that the weak reference is `null` after calling `forceGC` and `forceCC`

[18:30:58.0245] <loganfsmyth>
so it's a mix of SpiderMonkey and XPCOM stuff

[18:30:58.0418] <arai>
in shell test, I think you need to invoke the underlying impl from there

[18:31:44.0477] <loganfsmyth>
could you point me to what you mean by "underlying impl"?

[18:32:16.0441] <arai>
now I'm looking for it

[18:33:35.0504] <arai>
https://searchfox.org/mozilla-central/rev/3f8c67d7fd836d559491e3fe497bc739f707c1a6/toolkit/components/aboutmemory/content/aboutMemory.js#571-601

[18:34:14.0367] <loganfsmyth>
cool, I'll take a look at that

[18:34:17.0661] <loganfsmyth>
thanks!

[18:34:21.0367] <arai>
that's the code called when you click "Save concise"/"Save verbose" buttons in about:memory

[19:07:11.0610] <loganfsmyth>
arai: Are there tools view inspecting the log data graphically?

[19:07:58.0709] <arai>
I'm not aware of.  I usually trace the graph manually inside text editor

[19:09:32.0449] <loganfsmyth>
cool, that's what I'm doing, wanted to make sure there wasn't another way

[21:56:48.0898] <loganfsmyth>
arai: there is zero chance I would have figured that out without that log, thanks so much for the pointer

[21:57:08.0785] <arai>
:D

[22:00:59.0780] <loganfsmyth>
Assuming I'm not missing anything at this point, I think the leaking I was seeing is because mozIJSSubScriptLoader's "loadSubScript" caches the JSScript by default so that it can clone them into any new realms on the next call, which means that whichever global is the first to load a given script basically gets leaked because the JSScript is kept around

[00:52:53.0345] <Waldo>
arai: Let me know if you think the path is semi-super-safe enough to land without going through the sec-approval process.  IMO worrying about dual server/client bugs is too remote to count, as in principle any bugfix could be something some site relied on in JS to prevent XSS...

[02:45:27.0332] <jonco>
anba: thanks for fixing bug 1618258

[02:45:28.0914] <botzilla>
https://bugzil.la/1618258 — ASSIGNED (anba) — Rename FinalizationGroup to FinalizationRegistry in line with the spec

[02:45:40.0843] <jonco>
I had just stareted looking at this when I saw you had already done it

[03:07:48.0372] <arai>
Waldo: yeah, it should be sec-other or something

[04:21:05.0742] <nbp>
I was looking at `finishScopeNotes`, this is quite strange that the Span given as argument is meant to be initialized. I am used to see the opposite, that the data given as argument is used to initialize the content.  `stencil.finishScopeNotes(data->scopeNotes())`  --> `data->initScopeNotes(stencil.scopeNotes())`.

[04:30:33.0528] <arai>
it's because currently only the subclass of `stencil` knows how to initialize (copy).  it will be fixed later

[05:43:46.0860] <tcampbell>
loganfsmyth: can you CC me on bug when you create it. That is super interesting.

[05:44:36.0634] <tcampbell>
My understanding was the cache should be of things compiled in the services/jsm global, but it is possible weird things happen

[05:45:16.0136] <tcampbell>
Once stencil is done, we can rework all that caching to be much saner

[06:17:33.0676] <yulia>
jandem: Hi Jan, I am getting failures with the fix to optional chaining that seems to be related to ion and the baseline compiler. https://treeherder.mozilla.org/#/jobs?repo=try&revision=2b3968e3a42b470f221f9460fdbedd86a32ee48e&selectedJob=293310573

The error message is different. without the base line compiler or ion, the error message has the name of the field being accessed (in this case `[...].r` but with those two settings it comes back as undefined. This doesn't happen on mac so i am not getting the failures locally. Is this a known issue?

[06:18:57.0285] <jandem>
yulia: will take a look..

[06:36:00.0026] <jandem>
yulia: JITs have a different path for DelElem for no good reason. I'll write a patch

[06:36:20.0639] <jandem>
that may not fix Ion but we'll see

[06:36:36.0255] <yulia>
ok, thank you!

[06:38:01.0763] <jandem>
np

[07:36:25.0675] <loganfsmyth>
> <@tcampbell:mozilla.org> My understanding was the cache should be of things compiled in the services/jsm global, but it is possible weird things happen

@tcampbell:mozilla.org: I filed in in https://bugzilla.mozilla.org/show_bug.cgi?id=1622718 I don't think the cache distinguishes what the target global is. The comment in the code certainly makes it sound like expected if surprising behavior. I think if we expose an option to force usage of the separate compilation scope the issue will be resolved.

[07:38:49.0672] <tcampbell>
thanks

[07:40:41.0533] <loganfsmyth>
Happy to hear if you have any thoughts on alternative fixes

[12:24:11.0837] <tcampbell>
evilpie: does `ReportError` mess with flags or not? Some parts you intentionally compute `isWarning` before and others you don't

[12:27:34.0241] <evilpie>
tcampbell: as far as I can tell it's not modified, but you are right I should unify this

[12:27:58.0924] <tcampbell>
sounds good

[13:08:35.0731] <tcampbell>
mgaudet: thanks for the reviews. Now to blow it all away

[13:08:46.0878] <tcampbell>
😃

[13:17:48.0293] <mgaudet>
:D 

[13:17:59.0532] <mgaudet>
Fire ze Missiles seems to be the tradition here

[15:31:54.0566] <jdm>
so if I have jitspew=scripts output that shows lots of Compiling output all the time, what's my next step?

[15:32:17.0822] <jdm>
my impression is that we're spending a lot of time doing jit compiling every frame but not a lot of time executing the jitted code

[15:32:44.0971] <jdm>
there's one particular fragment that was compiled 30 times over the course of ~10 seconds

[15:33:25.0343] <iain>
Can you run with IONFLAGS=bailouts?

[15:34:55.0323] <jdm>
will do

[15:35:08.0348] <iain>
Actually, IONFLAGS=osi might also be good

[15:35:30.0547] <iain>
The former is for cases where we have to leave Ion code and fall back to baseline

[15:35:48.0928] <iain>
But we can continue running the Ion code in the future

[15:35:57.0549] <iain>
The latter is for cases where we have to completely invalidate the Ion code

[15:36:15.0034] <iain>
Enough bailouts trigger an invalidation, so they're correlated

[15:39:28.0056] <jdm>
https://gist.github.com/jdm/142b7cdca6fab921f1d8cd636744e16d is the raw log

[15:41:45.0131] <jdm>
I have a suspicion that working with non-minified js would yield easier to understand results?

[16:05:35.0400] <iain>
Probably, yes. The function name is addStubs, if that helps.

[16:06:28.0988] <iain>
At least for the first one?

[16:06:43.0302] <iain>
Let me look at this a little closer instead of jumping to conclusions

[16:07:40.0670] <iain>
What was the fragment that you said was being recompiled 3 times/second?

[16:17:44.0860] <jdm>
it was 16:108990 in https://joshmatthews.net/servo.org/hl-home/bbjs/preview.babylonjs.com/babylon.min.js

[16:23:01.0260] <jdm>
ok, I have a log with unminified source this time: https://gist.github.com/jdm/9cea7277e1b8d0a23b7476aec88e657c

[16:23:26.0083] <iain>
I think it is e.prototype.scale, for some value of e

[16:24:28.0418] <jdm>
mmm, I see an _update method being invalidated. that looks like it could cause trouble!

[16:27:06.0413] <jdm>
is there a useful way to prioritize the output here?

[16:28:14.0811] <jdm>
would looking for lines that contain "Invalidate" and then grouping them by the script:line:col and sorting by the most frequent be useful?

[16:29:33.0746] <iain>
That would probably be a good start, yeah

[16:29:45.0859] <iain>
Not sure off the top of my head how inlining plays into this

[16:35:16.0794] <jdm>
yeah, e.prototype.scale does show up in the highest invalidations

[16:35:20.0243] <jdm>
https://gist.github.com/jdm/9cea7277e1b8d0a23b7476aec88e657c#gistcomment-3215185

[16:39:16.0941] <jdm>
is there any writeup of how to go about investigating the root cause of invalidations?

[16:42:35.0127] <jdm>
/me wonders if https://blog.mozilla.org/javascript/2012/10/15/the-ins-and-outs-of-invalidation/ is still useful

[16:50:55.0331] <iain>
Skimming through it quickly, it all seems basically accurate

[16:51:05.0108] <iain>
At least the high-level ideas

[16:51:10.0553] <iain>
Some of the names have changed


2020-03-17
[00:14:38.0913] <jandem>
yulia: the DelProp/DelElem patch is on m-c so your patch should be good to go now

[00:50:56.0061] <yulia>
jandem: thank you 

[05:39:18.0553] <opoprus|sheriffduty>
hi, could someone help me with these bustages in builds/worker/checkouts/gecko/js/src/jit/CacheIR.h :  https://treeherder.mozilla.org/#/jobs?repo=try&resultStatus=testfailed%2Cbusted%2Cexception%2Cretry%2Cusercancel%2Crunnable&revision=6666671573cf6e001482518918d2a4fa5cdce5f9&selectedJob=293482086 ?

[06:05:36.0204] <Aryx>
Oana wants to know (I also) which commit from the last day causes these failures in central-as-beta simulations

[06:06:39.0525] <Aryx>
it complains that https://searchfox.org/mozilla-central/source/js/src/jit/CacheIR.h#2688 is unused

[06:08:27.0587] <tcampbell>
jandem: ^

[06:09:44.0180] <jandem>
looking

[06:13:01.0032] <jandem>
Aryx: I don't think there were recent changes here, maybe from a compiler update or so

[06:13:05.0148] <jandem>
I can write a patch

[06:13:31.0544] <Ms2ger [~half-time dedication]>
Is ifdef JS_CACHEIR_SPEW true on central and false on beta?

[06:13:44.0116] <jandem>
yeah that's the problem, but that's nothing new

[06:13:49.0475] <Ms2ger [~half-time dedication]>
Yep, that's it

[06:14:18.0552] <Ms2ger [~half-time dedication]>
But maybe that should've been caught earlier

[06:14:52.0862] <jandem>
Clang probably got smarter

[06:19:47.0209] <Aryx>
https://hg.mozilla.org/mozilla-central/rev/ad204b01a30094d1bc25620b175ad39ca98e5696 is the only clang-ish change

[06:25:23.0637] <jandem>
Aryx: it's probably from https://bugzilla.mozilla.org/show_bug.cgi?id=1613985

[06:25:49.0914] <jandem>
before that Handle had an explicit (empty) constructor but now it's an `= default` one

[06:26:08.0292] <Aryx>
thanks, will ni simon

[06:26:50.0671] <jandem>
Aryx: I can write the patch, let's see if I can repro

[06:27:05.0603] <Aryx>
opoprus|sheriffduty: is there a bug?

[06:28:10.0134] <yulia>
tcampbell: are you around?

[06:29:10.0136] <yulia>
I wanted to check if you had any context on finalization groups / had an opinion on it

[06:29:21.0863] <tcampbell>
yulia: taking today off. Will be pretty available for next few weeks though

[06:29:28.0276] <yulia>
ok! no problem

[06:30:51.0308] <tcampbell>
Today I get to play "State of Emergency"

[06:31:18.0006] <RyanVM>
jonco:  ping

[06:32:21.0897] <opoprus|sheriffduty>
Aryx: no

[06:32:34.0908] <Aryx>
 opoprus|sheriffduty please create one and needinfo jandem

[06:32:40.0325] <opoprus|sheriffduty>
ok

[06:33:22.0508] <jandem>
I have a patch ready so if you tell me the bug number I can submit it

[06:37:42.0383] <jonco>
RyanVM: pong

[06:39:59.0289] <RyanVM>
jonco: does bug 1618131 need an ESR approval request given the related bug getting requested?

[06:40:03.0416] <botzilla>
https://bugzil.la/1618131 — RESOLVED (jonco) — Improve compacting GC assertions and poisoning

[06:40:34.0357] <jonco>
RyanVM: no, that's just diagnostics / assertions

[06:41:06.0537] <jonco>
(I assume the patch applies; I haven't checked)

[06:41:31.0144] <opoprus|sheriffduty>
jandem: https://bugzilla.mozilla.org/show_bug.cgi?id=1623071

[06:42:13.0176] <RyanVM>
jonco: the requested patch does need a bit of rebasing

[06:42:16.0575] <RyanVM>
only one file with conflicts, though

[06:43:00.0789] <RyanVM>
I left a NI for that

[06:43:09.0190] <jonco>
RyanVM: oh right, I'll post a patch

[06:43:21.0500] <RyanVM>
ty

[07:45:20.0625] <jonco>
RyanVM: well, looks like we do need one of the patches from 1618131 after all

[07:45:42.0963] <RyanVM>
if it makes more sense to fold the relevant change into the uplift patch, that'd work for me too

[07:51:26.0311] <jonco>
I think it's better just to uplift the patches as is, since the apply without modification

[07:51:46.0232] <jonco>
 * I think it's better just to uplift the patches as is, since they apply without modification

[07:52:08.0343] <RyanVM>
ok

[07:56:47.0741] <sfink>
Bug 1622757 - Run unmarking work in parallel with other GC tasks

[07:56:48.0320] <sfink>
and my concern is with bufferGrayRoots()

[07:56:49.0283] <botzilla>
https://bugzil.la/1622757 — ASSIGNED (jonco) — Parallel unmarking is slower on 64 bit Linux

[07:57:25.0047] <sfink>
jonco: I'm looking at https://phabricator.services.mozilla.com/D66961

[07:57:25.0605] <sfink>
it looks to me like it calls `Compartment::traceIncomingCrossCompartmentEdgesForZoneGC` -> ... -> `ShouldTraceWrapper` -> `wrapper->isMarkedGray()`

[07:58:42.0810] <sfink>
which seems like a race. But maybe this is a wrapper outside of the collecting region?

[07:59:49.0274] <jonco>
sfink: yes, 'incoming cross compartment edges' means the wrapper is not in a collected zone

[08:00:19.0578] <sfink>
(because I'm not understanding how it would work before this change, if we just cleared all the marks)

[08:00:37.0375] <jonco>
right, I don't think this changed anything from the original situation

[08:00:43.0759] <jonco>
I can add an assertion to make this more obvious

[08:01:00.0259] <jonco>
(or even slightly obvious I guess)

[08:47:57.0452] <@allstarschh>
jonco: ping

[09:05:03.0525] <jonco>
@allstarschh: hey

[09:05:42.0965] <@allstarschh>
jonco: hi, I am looking into bug 1620221

[09:05:44.0275] <botzilla>
https://bugzil.la/1620221 — ASSIGNED (allstars.chh) — Assertion failure: gcMarker->tracingCompartment == comp, at gc/Marking.cpp:273 with Debugger

[09:06:04.0241] <jonco>
great, how's that going?

[09:07:47.0637] <@allstarschh>
jonco: for https://searchfox.org/mozilla-central/source/js/src/gc/WeakMap-inl.h#172,  should I use TraceManuallyBarrieredCrossCompartmentEdge for the value ?

[09:08:09.0140] <@allstarschh>
if the value is DebuggerScript or something similar?

[09:09:02.0245] <sfink>
I don't think you need to make it conditional on the type of value, I think it could really be called TraceManuallyBarrieredPossiblyCrossCompartmentEdge

[09:17:04.0591] <jonco>
oh, is this because debugger weakmaps have looser constraints than normal ones?

[09:17:14.0506] <@allstarschh>
sfink:  how should I provide the 2nd arg to that function?  

[09:17:19.0801] <jonco>
not sure why this didn't come up before if so

[09:18:44.0316] <sfink>
I think this is the assertion you added pretty recently to track the compartment we're marking in?

[09:18:58.0480] <sfink>
regular weakmaps always have the map, key, and value in the same compartment

[09:19:24.0636] <sfink>
debugger weakmaps I thought were map and value in the same compartment, the key in a different one. Though I'm not totally sure about the value.

[09:19:29.0398] <@allstarschh>
jonco: the assertion you added is last December, bug 1596830

[09:19:30.0719] <botzilla>
https://bugzil.la/1596830 — NEW (jonco) — There don't appear to be any assertions that we only trace cross compartment edges with TraceCrossCompartmentEdge

[09:21:07.0658] <jonco>
sfink: sure, I'm wondering why it didn't trigger before since debuggers will (almost?) always have these cross-compartment edges

[09:22:14.0597] <sfink>
yeah, I don't know. I haven't looked into it, and just assumed that this was only happening during the weak marking phase, and so perhaps most of the time all of this stuff gets fully marked before getting there?

[09:22:40.0309] <jonco>
ah right

[09:23:50.0264] <jonco>
I feel like the expected compartment here should really be the debuggee compartment, in which case I wouldn't expect this assertion to fail

[09:23:55.0291] <jonco>
maybe that's the problem?

[09:25:14.0289] <@allstarschh>
let me find the stack trace, I remember the compartment is from the script on mark stack

[09:26:35.0995] <sfink>
let's see, this would be an edge from a JSScript* -> Debugger.Script*, I guess? Then since this is in weak marking phase, we'll be marking in the JSScript* compartment and doing markKey on a value in the Debugger compartment

[09:28:55.0067] <jonco>
ok, so that sounds like we could potentially mark in a compartment that's different to the one we were expecting

[09:29:10.0177] <@allstarschh>
jonco: the stack is https://pastebin.com/LSYZAw3E

[09:29:56.0526] <@allstarschh>
oh, I need to check my daughter, check with you later

[09:31:31.0936] <jonco>
I think GCMarker::markImplicitEdgesHelper should cancel the compartment expectation since it can end up marking cross-compartment

[09:31:46.0224] <jonco>
in the debugger case

[09:34:16.0497] <sfink>
you think it should do it manually rather than calling traceCrossCompartmentEdge or whatever it's called?

[09:41:44.0007] <jonco>
well the value edges should be same-compartment with the map object

[09:41:59.0403] <jonco>
except in the debugger case there's no map object IIRC

[09:44:09.0614] <sfink>
I guess it depends on how you view "cross compartment" in this case. It's cross-compartment from where you're marking, but not from the map. So perhaps the question is whether you think of markKey as being "mark this map's key" vs "mark an object that turns out to be a key in some map".

[09:46:07.0077] <jonco>
yes

[09:46:38.0086] <jonco>
hmm, markKey marking the value is alittle surprising

[09:46:45.0345] <sfink>
actually, I guess this is in WeakMap::MarkEntry, not MarkKey

[09:47:11.0966] <sfink>
which does suggest the first interpretation, I guess

[09:47:36.0125] <sfink>
(yeah, I was wrong when I referred to it as markKey)

[09:50:58.0648] <jonco>
yeah I think it would be confusing to use traceCrossCompartmentEdge for weakmap values since they are not supposed to be CC... well it would confuse me anyway

[09:57:57.0639] <sfink>
I'm a weirdo who thinks of weakmaps as holding edges from <map,key> tuples to values, and in that sense part of that "Y" edge is cross-compartment.

[09:58:15.0878] <sfink>
but the C++ method is on the map, so I'm definitely fine thinking of it that way too

[14:32:22.0825] <zbraniecki>
Waldo: can we expose unified number format now? It's stage 4 and merged into ecma402

[14:52:57.0048] <jdm>
iain: so if https://github.com/BabylonJS/Babylon.js/blob/da661ef2153e10b0e424c6f93792159b53a0a47f/src/Maths/math.color.ts#L144-L151 is called once per frame with the same argument and on a Color3 instance, any idea why that could trigger a "Baseline information failure"?

[14:53:05.0015] <jdm>
 * iain: so if https://github.com/BabylonJS/Babylon.js/blob/da661ef2153e10b0e424c6f93792159b53a0a47f/src/Maths/math.color.ts#L144-L151 is called once per frame with the same argument and on a Color3 instance, any idea why that could trigger a "Baseline info failure"?

[14:53:16.0808] <jdm>
see https://gist.github.com/jdm/9cea7277e1b8d0a23b7476aec88e657c#file-gistfile1-txt-L1627-L1643

[14:53:44.0782] <jdm>
the transpiled JS is the second entry in https://gist.github.com/jdm/9cea7277e1b8d0a23b7476aec88e657c#gistcomment-3215185

[14:58:00.0218] <iain>
jdm: https://searchfox.org/mozilla-central/source/js/src/jit/BaselineBailouts.cpp#2034-2040

[14:58:20.0463] <iain>
This is where the baseline info failure happens

[14:59:27.0466] <iain>
It seems most likely that the result of one of those multiplications overflowed an int32

[14:59:40.0126] <iain>
Which we were assuming would not happen

[14:59:44.0911] <jdm>
the values are 0.0 being modified by 1 according to my firefox debugging session

[14:59:53.0969] <jdm>
 * the values are 0.0 being multiplied by 1 according to my firefox debugging session

[15:00:43.0945] <iain>
Is this invalidation happening once, or repeatedly?

[15:00:49.0793] <jdm>
repeatedly

[15:01:01.0589] <jdm>
I'll try setting a breakpoint on the device and working backwards I guess

[15:01:25.0435] <jdm>
it's a shame getting the JS debugger working is a monumentally large project

[15:02:20.0728] <iain>
Oh! Can you add bl-bails to your IONFLAGS?

[15:02:50.0846] <iain>
It looks like that should give us the bailout kind without guessing: https://searchfox.org/mozilla-central/source/js/src/jit/BaselineBailouts.cpp#1991-1997

[15:03:04.0034] <jdm>
I can

[15:09:29.0525] <jdm>
iain: that's odd - I'm seeing the "Baseline info failure" lines, but bl-bails doesn't cause any "Restored outerScript" lines to appear

[15:09:49.0412] <jdm>
IONFLAGS is "bailouts,osi,scripts,bl-bails"

[15:10:44.0968] <jdm>
sorry, nevermind, was looking at the wrong output file

[15:16:24.0739] <jdm>
Bailout_DoubleOutput

[15:22:28.0464] <jdm>
I imagine it's coming from https://searchfox.org/mozilla-central/source/js/src/jit/arm/Lowering-arm.cpp#355

[15:23:13.0009] <iain>
Yeah, seems likely.

[15:23:33.0215] <jdm>
if we're multiplying 0 by 1.0, do we just end up hitting a slow path over and over?

[15:24:49.0198] <jdm>
I don't notice a difference in bailouts if I change the color values to 0.0 instead

[15:25:18.0158] <iain>
In theory, once we see a double the first time, we should update the typeset, and stop expecting an int32. 

[15:25:28.0337] <iain>
If you multiply by 1.00001, do the bailouts go away?

[15:27:34.0817] <iain>
I believe we convert both 0.0 and 1.0 to int internally

[15:33:19.0608] <jdm>
iain: so there are no bailouts if I change the color to 0.0s and the multiplier to 1.00001

[15:33:28.0960] <jdm>
this seems... suboptimal :)

[15:35:19.0207] <iain>
Do the inputs never change here?

[15:36:04.0490] <jdm>
yes

[15:36:16.0620] <jdm>
and it turns out that keeping the 0s but using 1.00001 has the same effect

[15:36:35.0687] <jdm>
it's just a property that's initialized at startup and used to scale the color values every frame

[15:36:53.0848] <iain>
The multiplier never changes

[15:36:58.0512] <iain>
Does the value being multiplied?

[15:37:05.0112] <jdm>
no

[15:37:41.0667] <iain>
Are you sure?

[15:38:10.0504] <iain>
Because everything is consistent with a situation where 99.9% of the time the values here are integral, but every now and then a non-integral value slips in

[15:38:23.0300] <jdm>
I will double check

[15:39:12.0345] <iain>
And then we invalidate, but we aren't smart enough to remember what happened, so we have another warm-up period during which we only see integral values

[15:39:25.0776] <iain>
And so we recompile with the same dumb optimism, and run into the same wall

[15:44:57.0707] <jdm>
iain: I have verified that the value never changes. we only ever multiply 0 by 1

[15:49:08.0980] <iain>
That is bizarre, and makes me think that we are looking in the wrong place

[15:49:22.0939] <iain>
IonMonkey should be very good at repeatedly multiplying 1 by 0.

[15:49:55.0177] <iain>
How are you verifying it? In the caller? 

[15:50:33.0310] <jdm>
I have an if statement in the function that's bailing that only prints !!!jdm if any of the values don't match the ones I'm verifying

[15:50:44.0428] <jdm>
and the function has the same bailout behaviour

[15:50:55.0109] <iain>
In scale?

[15:50:58.0190] <jdm>
yes

[15:51:36.0395] <jdm>
so something in the range analysis seems to think that one of these cases is true? https://searchfox.org/mozilla-central/source/js/src/jit/MIR.h#5509

[15:51:43.0425] <jdm>
that would leads us to take https://searchfox.org/mozilla-central/source/js/src/jit/arm/Lowering-arm.cpp#355

[15:52:48.0796] <jdm>
would the most useful thing be to try to make a minimized testcase at this point?

[15:53:37.0040] <iain>
It makes sense that canOverflow is true, because it depends on the incoming values

[15:54:53.0499] <iain>
I believe it would be false if, say, this function tested whether they were <10 before multiplying

[15:54:58.0066] <iain>
So that part isn't a mystery

[15:55:27.0415] <iain>
The mystery is why we're bailing with non-doubles

[15:55:41.0896] <iain>
Sorry, with doubles

[15:55:46.0271] <iain>
Double negation there

[15:56:06.0280] <iain>
If you can make a minimized testcase, that would be ideal

[15:56:16.0485] <jdm>
I'm confused - if canOverflow is true, why is there a mystery? fallible() returns true and we take the bailout path in that case.

[15:56:39.0787] <iain>
No, we *generate* a bailout case

[15:56:47.0359] <jdm>
oh

[15:56:52.0992] <iain>
The question is why we end up taking it, if the values coming in are always 0 and 1

[15:58:36.0688] <evilpie>
hello everyone

[15:58:45.0382] <mgaudet>
/me waves

[16:02:05.0544] <iain>
jdm: The code you were looking at islowering from a higher level representation to a lower level one (MIR->LIR)

[16:02:15.0784] <iain>
The actual code generation is here: https://searchfox.org/mozilla-central/source/js/src/jit/arm/CodeGenerator-arm.cpp#335

[16:02:29.0960] <jdm>
Thanks

[16:02:50.0723] <iain>
But that's pretty low-level stuff

[16:07:21.0802] <iain>
jdm: Have you posted a gist with the scripts info included?

[16:07:58.0805] <iain>
I don't see recompilations in the one I'm looking at

[16:11:43.0685] <jdm>
Which scripts info?

[16:12:01.0964] <jdm>
IONFLAGS=scripts?

[16:21:47.0012] <iain>
Yeah

[16:36:35.0382] <jdm>
iain: https://gist.github.com/jdm/d1824b9cd93c72c9b8ea47cbc0f88d46 is a log with scripts


2020-03-18
[17:01:31.0933] <iain>
jdm: Here's a case where we're bailing out of `scale` and the argument is 1 as an Int32: https://gist.github.com/jdm/d1824b9cd93c72c9b8ea47cbc0f88d46#file-gistfile1-txt-L3757

[17:01:56.0348] <iain>
Kind of baffling

[17:02:08.0871] <iain>
Do you want to Zoom about this tomorrow?

[17:02:23.0871] <Waldo>
zbraniecki: Once we update ICU, I think so.  We need the ICU update to not have bad behaviors for rounds-to-zero values that are formatted with zero fractional digits and various directed sign-displays.  The ICU update is in my queue, backed up behind a gnarly mfbt template patch now that I've been reviewing/commandeering/editing off and on for the last few days.

[17:02:39.0949] <zbraniecki>
I see, thank you!

[17:02:56.0034] <zbraniecki>
I poked you because I see more and more potential uses for units in Firefox UI that now have to go through Fluent :/

[17:03:00.0451] <zbraniecki>
thanks for the update!

[17:04:37.0272] <jdm>
iain: zooming tomorrow would be great!

[02:45:21.0400] <wingo>
hi

[02:45:50.0214] <Waldo>
'lo

[02:45:50.0441] <wingo>
i was having problems a little over a week ago running wpt tests and i pasted the successful invocation here

[02:45:56.0602] <wingo>
after floundering about for a while

[02:46:04.0413] <wingo>
hi :)

[02:46:22.0864] <wingo>
was something related to virtualenv, that the tests are unrunnable on a stock ubuntu 18.04

[02:46:56.0584] <wingo>
however apparently the history on this room is restricted to a week and i lost it in the scrollback :(  does anyone know how to run wpt tests on ubuntu 18.04?

[02:47:22.0287] <wingo>
i was trying `./js/src/tests/jstests.py --wpt=enabled dist/bin/js wasm`

[02:47:28.0633] <wingo>
 * i was trying `../js/src/tests/jstests.py --wpt=enabled dist/bin/js wasm`

[02:48:09.0678] <Waldo>
wingo: Channel search finds for me a message from you of "dist/bin/run-mozilla.sh _virtualenvs/init/bin/python -u ../js/src/tests/jstests.py dist/bin/js<- works" just fine.

[02:48:58.0340] <Waldo>
And it can't be that members can only see history starting when they joined, if you typed that out.  Unless maybe you have multiple logins and are commenting from a different one?

[02:49:25.0167] <wingo>
same login.  dunno why me searching for those terms doesn't find it

[02:49:32.0780] <wingo>
maybe something federation-related

[02:49:35.0104] <Waldo>
Gremlins.

[02:49:39.0133] <wingo>
either on igalia or mozilla side, dunno which

[02:49:58.0108] <wingo>
ms2ger had a similar problem

[02:50:08.0161] <wingo>
ah well, waldo as a service it is :)  thank you!

[03:44:55.0223] <Ms2ger [~half-time dedication]>
wingo: have you tried mach, btw?

[04:41:51.0074] <jonco>
anyone have building 32bit SpiderMonkey on MacOS working?  I tried the instructions on the build page but ran into problems with rust

[04:46:23.0303] <jandem>
hm does that still work with 10.15? (most of my builds are on linux now)

[04:47:23.0997] <jandem>
and I'm with Ms2ger [~half-time dedication]  mach is great for JS shell builds too these days. `./mach jstests` works

[04:53:23.0212] <jandem>
 * and I'm with Ms2ger [~half-time dedication] . mach is great for JS shell builds too these days. `./mach jstests` works

[04:55:02.0158] <jandem>
wingo: congrats on multi-value landing

[04:58:08.0156] <Ms2ger [~half-time dedication]>
🎉

[05:00:16.0167] <jonco>
jandem: not sure

[05:00:28.0588] <jonco>
currently don't have access to linux short of installing a VM

[05:07:28.0770] <nox>
32bit on macOS is very dead, and Rust aggressively removes unsupported triples.

[05:10:07.0812] <jonco>
nox: OK, thanks

[05:10:12.0512] <jonco>
*goes back to using try*

[06:21:22.0190] <tcampbell>
settled in to new normal. Now back to bugmail

[07:39:00.0265] <wingo>
i love that you can type --enable-simulator to grant yourself an extra pair of arms

[07:44:57.0561] <tcampbell>
rebasing a branch from a year ago.. what could go wrong..

[07:59:57.0895] <sfink>



[08:04:35.0782] <Benjamin Bouvier>
tcampbell: rabbits!

[08:05:06.0354] <jandem>
zoom call with 460 participants, that's a first

[08:05:14.0648] <Benjamin Bouvier>
we should rename ourselves mozoolla

[08:07:10.0297] <tcampbell>
nbp: I didn't know you had a parrot!

[08:14:22.0553] <jandem>
nbp: you should WFH more :p 

[08:14:49.0814] <nbp>
ahah, that would please my parrot for sure.

[08:17:59.0731] <jandem>
/me just found tcampbell's rabbit 

[08:20:25.0733] <jandem>
/me  * just found tcampbell's rabbits

[08:20:29.0712] <yulia>
i have serious pet envy right now

[08:21:30.0254] <yulia>
in other words, post more pets

[08:24:03.0282] <Benjamin Bouvier>
yulia: did you hear about #cats:mozilla.org and #dogs:mozilla.org?

[08:26:42.0598] <yulia>
ooo

[09:29:50.0624] <mgaudet>
Hey: I'm looking for a good bug for a newish contributor. (`good-third-bug` is not a keyword alas) 

[09:29:59.0558] <mgaudet>
lemme know if anyone has any ideas

[09:39:12.0336] <tcampbell>
mgaudet: Removing debugger realm-delazification is something I'd like to see

[09:39:25.0050] <tcampbell>
it is a little involved, but a self-contained project

[09:39:47.0817] <tcampbell>
(I meant to write it up the other day, but ya know..)

[09:40:17.0632] <tcampbell>
The seed of the work is https://searchfox.org/mozilla-central/rev/61f224ec08ddc6f9a93ac45c8c3c5f7159be7c2a/js/src/debugger/Debugger.cpp#5019

[09:40:46.0283] <tcampbell>
basically the debugger has a few modes where it delazifies _everything_ because it is trying to find more detailed line numbers

[09:41:11.0816] <tcampbell>
instead we should delazify on demand as we walk the inner-function tree (that has the matching SSO)

[09:41:43.0000] <tcampbell>
See also: https://searchfox.org/mozilla-central/rev/61f224ec08ddc6f9a93ac45c8c3c5f7159be7c2a/js/src/debugger/Debugger.cpp#5154

[09:42:09.0891] <tcampbell>
I'll try to write up this afternoon and can also add myself as a mentor

[09:46:04.0923] <mgaudet>
tcampbell: Ok, that sounds good. Would be nice :D 

[09:46:51.0616] <jonco>
sfink: ping

[09:47:59.0027] <sfink>
sorry, coming on. Hopefully my zoom audio will work this time.

[10:01:06.0167] <@allstarschh>
sfink: jonco  https://bugzilla.mozilla.org/show_bug.cgi?id=1619455

[10:02:05.0811] <mccr8>
bug 1620623 is also related.

[10:02:07.0218] <botzilla>
https://bugzil.la/1620623 — RESOLVED (mccr8) — Ignore memory-pressure if we've begun to shut down

[10:02:26.0442] <mccr8>
and bug 1620705

[10:02:27.0919] <botzilla>
https://bugzil.la/1620705 — RESOLVED (mccr8) — Don't send "memory-pressure" if ContentChild::mShuttingDown

[10:47:40.0994] <Harald Kirschner :digitarald>
sfink: for an experiment that should improve DevTools memory leaks; which GC metrics should we observe? GC_TIME_BETWEEN_S and GC_EFFECTIVENESS look interesting.

[11:24:15.0641] <Harald Kirschner :digitarald>
mccr8: ^ maybe you got an idea?

[11:25:01.0711] <mccr8>
I think there's some max pause time number that measures the main thing that users will notice.

[11:25:22.0206] <mccr8>
But the relationship between pause time and memory usage isn't smooth so it depends on what your goals are.

[11:35:34.0216] <Harald Kirschner :digitarald>
mccr8: this would specifically be leaks in content causing performance degredation in long-running devtools sessions

[11:37:16.0965] <mccr8>
an increase in max pauses would be one of the bigger symptoms of high memory usage. That and swapping but I don't think we can really measure that.

[11:45:16.0760] <sfink>
Sorry, back

[11:45:46.0346] <sfink>
Harald Kirschner :digitarald: yeah, GC_MAX_PAUSE_MS_2 is a good one

[11:46:16.0946] <sfink>
GC_MARK_MS might not be bad (if you're leaking, there's more live data to mark)

[11:47:28.0693] <sfink>
but that's more sensitive to sampling bias (as in, you'd be looking at a delta, but different types of users will show up pretty strongly on GC_MARK_MS as well)

[11:48:26.0651] <sfink>
MEMORY_JS_GC_HEAP is similar. Fixing a leak should definitely make it go down, but again it's population-dependent.

[11:48:56.0399] <sfink>
GC_TENURED_SURVIVAL_RATE might show it

[11:49:29.0809] <sfink>
but it looks like there's not enough precision in the buckets on that one. Almost everything is in the 98-100% bucket already.

[11:51:14.0279] <sfink>
you're right that GC_TIME_BETWEEN_S looks kinda good. Though I'm not sure how well differences would show up there.

[11:51:48.0726] <sfink>
also, it seems like it might be kind of tough to see the signal in any of these measures, since the change gets washed out by all of the non-devtools users swamping the data

[11:52:07.0347] <sfink>
perhaps that's not the case with Developer Edition

[11:54:42.0583] <sfink>
GC_EFFECTIVENESS seems like it might be the most sensitive, since presumably the leak means that you end up with the bulk of your heap being taken up with this immortal crap that you're just scanning over and over again without being able to free anything. Hopefully that's not ordinarily the case.

[11:55:31.0368] <sfink>
seems like it has a good distribution to start with, too, so changes are more likely to be noticeable

[12:07:08.0561] <jgilbert>
Waldo: 👍️/👎️: 'moving'/transfering a new backing store into an existing ArrayBuffer

[12:07:38.0312] <jgilbert>
We'd like to reuse ArrayBuffer objects with new contents for GC-less code purposes

[12:07:42.0020] <jgilbert>
(for webgpu)

[12:08:46.0957] <Waldo>
jgilbert: Probably negative.  Having exactly one transition, from having data to not having data, is complicated enough.  Adding support for others seems ill-advised.

[12:09:17.0576] <jgilbert>
Yeah but like, pretty-please? :)

[12:10:20.0896] <jgilbert>
Like, how bad is it actually? 

[12:10:33.0851] <jgilbert>
Happy to Zoom if that's quicker :)

[12:11:02.0850] <Waldo>
Practically, I think we would have to audit every access to data in an array buffer if we were to attempt this.  That's very non-trivial.

[12:11:21.0146] <Waldo>
We have various bounds-checks that might end up requiring changes for this.

[12:11:53.0606] <Waldo>
You might also want to have the bounds-checks "fault" you out of the known code path, if the underlying store changes.

[12:12:01.0904] <jgilbert>
What about a new ArrayBuffer-like type?

[12:12:28.0323] <Waldo>
Right now we can just zero the internal length field when an ArrayBuffer becomes detached, and that relatively naturally propagates through everything safely.

[12:12:34.0012] <jgilbert>
well, I feel like any case that supports detachment should work ok?

[12:12:51.0923] <Waldo>
A new type seems like a possibly better fit, yes.

[12:13:15.0566] <jgilbert>
You are concern people are holding on to the pointer and only watching for length changes, ah

[12:13:23.0925] <jgilbert>
 * You are concerned people are holding on to the pointer and only watching for length changes, ah

[12:13:53.0112] <Waldo>
That is one way we deal with detachment happening, yes.  A fragile one, but I think it may be done that way sometimes.

[12:14:39.0493] <jgilbert>
I have a seed of an idea that I will cultivate over lunch. Thanks for the feedback!

[13:14:39.0750] <Waldo>
Speaking of lunch...

[13:41:58.0134] <jgilbert>
I would have expected this to not be possible? When would we end up with mType == MaxTypedArrayViewType?

[13:42:35.0306] <jgilbert>
(this is unrelated to my previous re-usable arraybuffer questions)

[13:42:49.0712] <Waldo>
I think that may be the case before you call `.Init()` on it.  Memory hazy.

[13:44:18.0464] <jgilbert>
Seems like it must have passed through Init successfully

[13:46:27.0853] <Waldo>
https://searchfox.org/mozilla-central/source/js/src/vm/TypedArrayObject.cpp#2694

[13:46:55.0093] <Waldo>
Looks like that means you have a `DataView`?  Seems odd at first glance that we don't have an enum value for dataviews...

[13:47:10.0570] <jgilbert>
Ahhh, dataviews again!!

[13:47:22.0460] <Waldo>
https://searchfox.org/mozilla-central/source/js/src/jsfriendapi.h#1402  "Types that don't have their own TypedArray equivalent, for now."  wat

[13:47:35.0218] <jgilbert>
hah

[13:47:48.0204] <Waldo>
¯\_(ツ)_/¯ We probably should just have a separate enum class for this, not reuse that one.

[13:49:43.0045] <jgilbert>
I hesitate to volunteer

[13:50:10.0869] <Waldo>
I doubt it'd be too terrible, but fair.

[13:51:27.0467] <jgilbert>
Should js::Scalar::byteSize(DataView) be 1?

[13:52:10.0757] <jgilbert>
they're basically raw ArrayBuffers with typed accessors, but I would say are fundamentally byte-based

[13:53:13.0476] <Waldo>
I don't know that there's any sensible answer to that question.  :-)

[13:53:31.0932] <Waldo>
It's probably a predicate that shouldn't be applied at all to that case.

[13:57:39.0111] <jgilbert>
well I can do that for now, but there be some footguns lyin' 'round here :)

[14:31:52.0349] <jgilbert>
waldo++

[14:32:20.0250] <jgilbert>
Waldo: https://searchfox.org/mozilla-central/rev/61f224ec08ddc6f9a93ac45c8c3c5f7159be7c2a/dom/canvas/ClientWebGLContext.cpp#5278

[14:32:38.0744] <jgilbert>
The answer was within us all along :P

[14:34:51.0927] <tcampbell>
/me makes a note to re-read this on monday

[14:35:03.0457] <Waldo>
lol

[14:35:09.0562] <Waldo>
"run away, run away!"

[14:48:19.0382] <mgaudet>
tcampbell: you say that like it's friday.

It's _Wednesday_

[14:48:52.0740] <tcampbell>
oh boy. I thought we at least made it to thursday

[14:49:33.0926] <tcampbell>
I should go work on dinner plans istead

[14:49:38.0652] <tcampbell>
 * I should go work on dinner plans instead

[14:49:44.0776] <mgaudet>
:D 

[14:50:33.0939] <mgaudet>
Andrea and I live by this: https://www.amazon.ca/dp/1601061536; highly recommended strategy

[14:50:56.0147] <evilpie>
The last two weeks feel like a month already

[14:56:12.0679] <mgaudet>
/me nods agressively

[14:56:20.0123] <mgaudet>
if not more. \

[15:00:27.0174] <Waldo>
tcampbell: Pro-tip: don't go out somewhere.

[15:00:49.0752] <nox>
I vote we collectively say Wednesday is now the new Friday.

[15:02:36.0399] <tcampbell>
We've shut down dine-in at restaurants at this point

[15:13:50.0779] <jdm>
what does it mean that https://searchfox.org/mozilla-central/source/js/src/wasm/WasmIonCompile.cpp#4748 doesn't include ARM64?

[15:18:01.0839] <iain>
jdm: arm64 only uses baseline for wasm

[15:18:16.0246] <jdm>
ah, ok

[15:19:09.0851] <iain>
wasm is switching to (eventually) use cranelift as the backend, so they decided that time spent implementing arm64 ion would be better spent on cranelift

[15:19:27.0745] <iain>
(Actual wasm folks can feel free to step in if I'm getting details wrong)


2020-03-19
[04:18:12.0306] <lth>
jdm: iain is right, the plan of record is to use cranelift as the optimizing backend for arm64, and so long as that work is progressing well there's no reason to change the plan

[04:18:36.0323] <lth>
i expect we'll have a check-in after q1 to make sure things are indeed on track

[04:27:01.0450] <nox>
So if we want better arm64 perf, we need to start using cranelift, is that it?

[04:33:01.0702] <Benjamin Bouvier>
not quite yet! arm64 support for cranelift is still in the works

[04:37:10.0819] <nox>
Benjamin Bouvier: But without cranelift, we will never get a non-baseline arm64 wasm, right?

[04:37:24.0866] <Benjamin Bouvier>
that's right

[04:42:39.0615] <nox>
This is relevant to my interests.

[05:06:29.0059] <lth>
well, "never".  if for any reason cranelift should not work out, we'll do arm64 wasm for ion.  but no sense in fretting about that yet.

[05:30:54.0195] <nox>
lth: Yeah but it's an important detail, because using cranelift from the vendored spidermonkey we maintain as a crate is nontrivial and will require some substantial work.

[05:34:38.0787] <wingo>
who is we? :)

[05:35:52.0228] <nox>
wingo: Servo people.

[05:46:53.0110] <@allstarschh>
jonco: ping

[06:26:54.0535] <jonco>
@allstarschh: pong

[06:28:17.0572] <@allstarschh>
jonco: hi, so I'd like to ask should we uplift bug 1620209 ? I am guessing yes, but it only occurs in debug build,  so I am not sure here...

[06:28:20.0533] <botzilla>
https://bugzil.la/1620209 — RESOLVED (allstars.chh) — Assertion failure: !gc->rt->hasHelperThreadZones(), at gc/PrivateIterators-inl.h:57 with Debugger

[06:29:48.0684] <jonco>
@allstarschh: it just was a problem with the assertion, so it doesn't need to be uplifed

[06:30:41.0434] <@allstarschh>
jonco: cool, thanks

[07:01:28.0897] <nbp>
mgaudet: You mentioned that structured logging is interesting because we can build tools around, right?

[07:02:27.0522] <mgaudet>
nbp: that’s my thesis yes

[07:02:56.0272] <nbp>
what do you mean by "structure", json formatted?

[07:03:54.0153] <mgaudet>
Honestly, it’s more a general statement that the better we structure our output, the easier it is to write tools to consume it. 

[07:04:11.0818] <mgaudet>
But the right structure may change for different consumers 

[07:04:18.0644] <mgaudet>
And producers 

[07:04:51.0038] <mgaudet>
I did build the StructuredSpewer which is JSON

[07:05:09.0985] <nox>
Btw what's the point of botzilla when there is embed support for bugzilla links?

[07:05:13.0220] <mgaudet>
It’s not perfect, but is an example of how I was thinking.  

[07:06:19.0735] <mgaudet>
(AFK for a bit: the baby is up, so I’m gonna go hang with her for an hour or so)

[07:06:22.0974] <nox>
Oh, link vs "bug XXXX", I'm stupid.

[07:06:52.0130] <nbp>
The reason I am asking, is because I wonder whether it is worth it to embedded a real JSON serializer (using serde) in jsparagus, instead of using a simple macro which would to the same kind of work with json-ish.

[07:07:02.0297] <nbp>
mgaudet: ^

[07:07:12.0697] <tcampbell>
botzilla: pun

[07:07:44.0890] <iain>
I don't think botzilla knows puns yet

[07:07:49.0092] <iain>
botzilla: !help

[07:08:20.0771] <mgaudet>
Nbp: not knowing precisely what you are serializing, not sure, but my gut says use a real format

[07:08:53.0131] <mgaudet>
And my understanding is that using serdes isn’t too hard from rust, so makes sense to me to just do that. 

[07:08:55.0366] <nox>
The longer a Rust project exists, the more the probability of it depending on serde is 1.

[07:09:00.0432] <nox>
So just go ahead IMO.

[07:09:05.0523] <mgaudet>
(Ok, now I go!)

[07:12:11.0395] <iain>
nbp: Are you the right person to review a patch to CodeGenerator-arm64.cpp?

[07:12:28.0533] <nbp>
oh crap … I think so.

[07:15:33.0451] <Benjamin Bouvier>
tcampbell: yeah, i had a pun module (it was fetching puns from a website that has an API endpoint to give you a random point), and on the unique time where i demo'd it to other people, it made a pretty offensive joke

[07:15:49.0775] <Benjamin Bouvier>
so i disabled it; i guess the alternative is to pre-select a set of puns, instead of relying on a random website

[07:15:58.0034] <tcampbell>
hah

[07:16:07.0658] <Benjamin Bouvier>
(a lesson learned the hard way)

[09:15:39.0635] <froydnj>
it was a punishing lesson

[10:22:38.0127] <mgaudet>
https://twitter.com/PLDI/status/1240401711124090883 -> PLDI is going to be online with free-registration this year. 

[11:46:02.0321] <nbp>
iain: Do you have some ARM64 instruction set documentation?

[11:47:24.0790] <iain>
nbp: I was looking mostly at this: https://static.docs.arm.com/ddi0596/a/DDI_0596_ARM_a64_instruction_set_architecture.pdf

[12:55:08.0722] <linkmauve>
Hi, is someone working on an AArch64 backend for Cranelift at the moment?

[12:57:41.0291] <cfallin>
linkmauve: yes, a few of us are actively working on it

[12:57:57.0983] <linkmauve>
Cool!

[12:58:38.0385] <linkmauve>
Is there any public branch for that already, or some way to track the progress?

[12:59:19.0054] <cfallin>
you can watch our branch at https://github.com/cfallin/wasmtime, `arm64` branch; a lot of the basic functionality is there but we're still doing bringup (debugging test failures, etc)

[13:00:47.0208] <cfallin>
also, most discussion about Cranelift happens on the Bytecode Alliance Zulip instance: https://bytecodealliance.zulipchat.com/

[13:00:48.0758] <linkmauve>
Interesting, I didn’t know cranelift got moved there.

[13:01:24.0989] <cfallin>
It was merged into the wasmtime repo a few weeks ago, yes

[13:53:37.0944] <djvj>
ok my iphone decided that it wanted to change my 5-digit passcode to a 6-digit passcode that I clearly do not have.  I now have to factory reset it.

[13:54:41.0247] <djvj>
this is documented in other support requests online.  Apple's responses to this, from their reps, to those comments, always refer to this event as you "forgetting your passcode".  Like some gaslighting ex.

[13:56:36.0488] <djvj>
I appreciate Apple's attempts to secure my device against all attackers, but it would really be nice if they accompanied it with software that didn't glitch out like this.

[13:57:19.0108] <mccr8>
The proscribed procedure for changing your 2FA device involves doing the "I lost my device" work flow, which also felt a little bad.

[13:57:25.0626] <mccr8>
(on Steam, I meant)

[13:57:34.0484] <mgaudet>
I wonder if you could get in with 100 tries (prefix and postfix digit?) 

[13:57:43.0725] <mgaudet>
 * I wonder if you could get in with 100 tries (prefix or postfix digit?) 

[13:57:46.0876] <Waldo>
In unrelated news, Matrix reactions are apparently just text strings.  So if you futz with devtools just right, it is actually possible to have a "123456" reaction, or an "r+" reaction, or a "lol" reaction, or...

[13:58:29.0528] <djvj>
I think it does an exponential backoff when you get it wrong too many times.  I'm at a 5-minute lockout now.

[13:58:41.0737] <djvj>
oh well, I think I'll factory reset it.  My dedication to never storing anything on my phone pays off.

[13:58:54.0099] <mgaudet>
:D 

[14:01:35.0932] <djvj>
I find the refusal of reps online to acknowledge that the product can somehow fail to be somewhat infuriating though.  The support question I read was a case where a person was posting about his wife's iPhone resetting from a 4-digit to a 6-digit passcode.  The rep responded with a curt message saying "if you forgot your password, there's nothing to do".

[14:01:49.0910] <djvj>
Kafkaesque

[14:02:47.0931] <djvj>
As if the concept of software glitches in their product is unacceptable, and instead you have to blithely imply your customers are insane without ever explicitly saying so.

[14:09:56.0854] <djvj>
I also really enjoy that the documentation for factory resetting your iPhone references "your computer".  Without ever actually referencing the fact that "your computer" must be an Apple computer.

[14:10:12.0430] <djvj>
"You need a computer to follow these steps. If you don't have a computer, borrow one from a friend, or go to an Apple Retail Store or Apple Authorized Service Provider."

[14:10:20.0845] <djvj>
^-- "a computer".

[14:11:44.0105] <djvj>
I find the use of language by Apple to be very reminiscent of the book 1984.

[14:12:47.0697] <mgaudet>
You can't use windows iTunes to do it?

[14:14:21.0674] <djvj>
Ah, I didn't realize iTunes for windows existed.  Ok, I'll use this.

[14:14:33.0049] <djvj>
And retract my statement about the "a computer" language :)

[14:36:25.0655] <Waldo>
Turns out 1984 might actually be like 1984 😂

[15:09:52.0660] <Waldo>
arai: FYI, the point of the template-object/iteration-result change was to possibly move us closer to a point where we don't have to have a fallible `GetProperty` in `TeeReaderReadHandler`, because the object can be enforced to be `PlainObject*` by the type system possibly.

[15:17:46.0822] <sfink>
is 3.75GB heap-unclassified bad?

[15:18:01.0103] <Waldo>
Either that, or a good start.

[15:22:49.0641] <mccr8>
depends on whether you want to cultivate an air of mystery or not


2020-03-20
[06:11:39.0386] <nox>
 Why does the js/src/configure seems to create both a Python 2 env and a Python 3 env?

[09:23:30.0496] <mgaudet>
/me realizes central is broken by inspection.... and yet... 

[09:40:44.0403] <iain>
mgaudet: Broken how?

[09:41:17.0931] <mgaudet>
iain: It's not; the code is just confusing to read after a refactoring I did. It no longer looks right by inspection

[09:41:29.0558] <mgaudet>
iain: the aside here: https://bugzilla.mozilla.org/show_bug.cgi?id=1623956 

[12:04:32.0084] <nbp>
iain: Nice comment for CCMN usage! 🙂

[12:05:47.0626] <iain>
Thanks!

[15:50:31.0919] <Waldo>
CCMN?

[15:52:18.0785] <iain>
Conditional compare negative

[15:52:48.0864] <iain>
It's an arm64 instruction

[15:55:05.0979] <iain>
See bug 1623437 for all the gory details

[15:55:07.0328] <botzilla>
https://bugzil.la/1623437 — ASSIGNED (iain) — ARM64: Improve negative zero check for LMulI


2020-03-21
[18:29:26.0669] <Waldo>
Pseudo-lol: https://github.com/whatwg/html/pull/3047#issuecomment-547672896

[03:58:41.0727] <Benjamin Bouvier>
Who can review js/src/jit/Ion.cpp?

[03:58:46.0393] <botzilla>
iain x 14, tcampbell x 14, jandem x 12 : /js/src/jit/Ion.cpp

[03:58:55.0500] <Benjamin Bouvier>
arai++ for implementing this feature

[07:47:37.0831] <evilpie>
Benjamin Bouvier fix your bot !!

[07:47:38.0376] <botzilla>
Sorry, you're not a Botzilla admin for this room.

[07:53:58.0526] <Benjamin Bouvier>
ohnoes

[08:22:32.0563] <nox>
Waldo: This can potentially make you chuckle. https://twitter.com/_n0name_____/status/1241354236249718785

[08:22:42.0911] <nox>
Why the hell is the link broken :(

[08:22:57.0679] <nox>
Oh, underscores…

[08:23:20.0702] <nox>
https://pbs.twimg.com/media/ETotGAcXYAMhFAP?format=jpg&name=medium


2020-03-23
[17:44:36.0976] <evilpie>
Do we just leak JSErrorReport::filename? I don't see where we ever free it

[17:56:01.0271] <arai>
at least it's not the owner

[17:56:49.0697] <arai>
the consumer is supposed to call `CopyErrorReport` to allocate another memory space to store all strings etc in single chunk of memory

[17:57:02.0864] <arai>
and copy strings there

[17:57:21.0507] <arai>
the copied one holds a pointer into the chunk

[17:57:45.0494] <evilpie>
but see this: https://searchfox.org/mozilla-central/source/js/src/jsexn.cpp#540

[17:58:00.0429] <evilpie>
this ownership stuff is crazy

[17:58:31.0392] <evilpie>
I guess it's nice to have one continuous block of allocated memory, but all that complication doesn't seem worth it to me

[17:59:15.0915] <arai>
it's ErrorReport

[17:59:31.0357] <arai>
(yes, it's confusing

[17:59:52.0191] <arai>
ErrorReport.filename is UniqueChars

[18:01:40.0074] <evilpie>
oh JSErrorReport::filename points to ErrorReport::filename d'uh

[18:02:56.0274] <evilpie>
thanks

[18:04:13.0634] <arai>
it would be nice to revisit and cleanup the ownership things here, someday :)

[18:16:38.0946] <evilpie>
yeah, I am working on cleaning this up. But I think we need to discuss a proper plan how JSErrorReport should look like in the future

[18:20:30.0343] <evilpie>
I am almost tempted to dupe bug 1623226 to bug 312651 😂

[18:20:31.0800] <botzilla>
https://bugzil.la/1623226 — NEW (evilpie) — Report filename, lineno, colno of problematic position in uncaught non-error exceptions

[18:20:32.0400] <botzilla>
https://bugzil.la/312651 — NEW (nobody) — js_ReportUncaughtException creates report without setting script error properties

[03:07:06.0715] <decoder>
jonco: can you quickly r+ https://phabricator.services.mozilla.com/D67732 for me, so I can stop these intermittents on CI? I will then try some fuzzing with the jsshell to see if I can reproduce this somehow for you, if you like. (I believe this is the GC issue that were not able to reproduce before, but that you deemed interesting?)

[03:07:36.0440] <decoder>
the frequency of this also severely increased

[03:08:17.0904] <jonco>
decoder: sure, looking

[03:15:07.0275] <jonco>
decoder: this is not the same issue as bug 1608068

[03:15:08.0680] <botzilla>
https://bugzil.la/1608068

[03:15:44.0492] <decoder>
interesting. that would explain also the spike

[03:15:56.0173] <decoder>
can you devise a fix without the second stack?

[03:20:25.0420] <decoder>
jonco: oh wait, I mixed up the bugs.. I see what you mean now

[03:22:06.0824] <decoder>
jonco: what would you suggest? I can add suppressions for this bug, but it's pretty frequent so we should try to fix it at some point if possible

[03:22:28.0018] <jonco>
yes, I think suppress it for now if possible

[03:23:08.0295] <jonco>
there's no obvious simple fix right now

[03:26:32.0459] <decoder>
okay, will adjust the patch, thx :)

[03:26:41.0841] <jonco>
np, cheers :)

[03:48:54.0751] <decoder>
jonco: I will try to remove the suppression for 1608068 locally then and see if I can reproduce that one in fuzzing

[03:50:01.0555] <jonco>
ok cool

[04:26:59.0108] <Benjamin Bouvier>
who can review testing/raptor/raptor/tests/benchmarks/raptor-wasm-godot-cranelift.ini?

[04:27:02.0271] <botzilla>
perftest-reviewers x 1, alexandru.irimovici x 1, AlexandruIonescu x 1 : /testing/raptor/raptor/tests/benchmarks/raptor-wasm-godot-cranelift.ini

[04:28:14.0639] <evilpie>
Benjamin Bouvier: ^?

[04:31:49.0131] <Benjamin Bouvier>
evilpie: hi there

[04:32:10.0295] <Benjamin Bouvier>
what's up?

[04:35:32.0609] <Benjamin Bouvier>
(this is a new Botzilla command, you can ask it "who can review" some path to a file, and it'll tell you the most recent reviewers for this file)

[05:48:32.0025] <tcampbell>
Hello world

[05:52:17.0024] <tcampbell>
marco: do you have a link for a report with the duplicate top-level? I'm looking for an example .js file as a starting point

[06:19:14.0503] <marco>
tcampbell: I can't easily know the specific report, but I can quickly tell you a few JS files for which we had the duplicated top-level

[06:20:01.0960] <tcampbell>
that would help

[06:23:00.0731] <marco>
tcampbell: https://paste.mozilla.org/kTszZQLn

[06:24:25.0746] <tcampbell>
marco: thanks! I'll take a look and see if I can repro

[06:25:26.0225] <marco>
ty!

[07:00:55.0084] <@allstarschh>
jonco: ping

[07:14:11.0571] <@allstarschh>
jonco: would like to ask if you saw my comment https://phabricator.services.mozilla.com/D67643#inline-401615

[07:15:10.0399] <jonco>
@allstarschh|afk: pong

[07:15:29.0786] <jonco>
no I didn't see this... looking

[07:16:13.0343] <@allstarschh|afk>
jonco: cool, thanks

[07:17:01.0578] <jonco>
@allstarschh|afk: oh, that comment doesn't apply here

[07:17:59.0953] <jonco>
that's more about not creating Vector<>s of GC things on the stack, because it's easy to forget to root them

[07:25:11.0043] <@allstarschh|afk>
jonco: because I originally use Vector<Value,...> for NurseryKeysVector there and it got compilation error because of that

[07:29:09.0647] <jonco>
oh, that restriction only checks for Value

[07:29:24.0222] <jonco>
for now, can use use mozilla::Vector instead? 

[07:29:38.0456] <jonco>
I'll file a but to fix the restriction

[07:29:46.0568] <jonco>
 * I'll file a bug to fix the restriction

[07:29:54.0703] <jonco>
 * for now, can you use use mozilla::Vector instead? 

[07:37:30.0736] <tcampbell>
marco: ping

[07:37:59.0330] <tcampbell>
What would you expect anonymous function to report as?

[07:38:33.0752] <tcampbell>
I wonder if I should synthesize an internal name like "function-<lineno>-<column>"

[07:41:09.0263] <marco>
tcampbell: that sounds good to me

[07:48:58.0008] <@allstarschh|afk>
> <@jonco:mozilla.org>  * for now, can you use use mozilla::Vector instead? 

jonco  I will try Mozilla: vector thks

[07:49:18.0648] <jonco>
great, cheers

[08:33:44.0483] <tcampbell>
marco: looking at https://coverage.moz.tools/ I see there was a big dip recently that came back. Is that what triggered your investigation?

[08:34:06.0713] <tcampbell>
I see some issues with arrow-functions that probably should be addressed, but they seem to be pre-existing..

[08:40:28.0866] <marco>
tcampbell: that was another bug which we fixed recently

[08:40:40.0697] <marco>
tcampbell: what triggered the investigation was an OOM while parsing coverage artifacts

[08:41:24.0982] <tcampbell>
marco: thanks. When roughly did this start?

[08:42:35.0557] <marco>
tcampbell: c72482e89c472d7d194bd97fec6e57549a79de90 was the latest working one

[08:42:51.0604] <tcampbell>
cool. will look

[08:43:01.0890] <marco>
so I was thinking it could have been maybe bug 1623973 or bug 1623780

[08:43:03.0479] <botzilla>
https://bugzil.la/1623973 — RESOLVED (jonco) — FinalizationRegistry may hold onto FinalizationRecordObjects longer than necessary

[08:43:04.0199] <botzilla>
https://bugzil.la/1623780 — RESOLVED (Waldo) — Template-object and iteration-result-object functions should deal in PlainObject*, not NativeObject* or JSObject*

[08:44:06.0658] <tcampbell>
hmm..

[08:52:18.0558] <jonco>
I think it's unlikely to be related to bug 1623973

[08:52:19.0957] <botzilla>
https://bugzil.la/1623973 — RESOLVED (jonco) — FinalizationRegistry may hold onto FinalizationRecordObjects longer than necessary

[09:14:43.0510] <Benjamin Bouvier>
/me will tweak botzilla so it spams less often mentioned bugs

[13:10:18.0552] <aholm>
Any reason Riot keeps disconnecting me?

[13:14:13.0742] <mgaudet>
Hmm; haven't noticed any major disconnections recently, though, I know earlier we were having scaling hiccups (2 weeks ago lets say) 

[13:14:55.0034] <mgaudet>
if you're still having trouble I'd try #synchronicity:mozilla.org 

[13:17:00.0536] <aholm>
I wonder if Riot doesn't like my work vpn?

[13:18:37.0499] <mgaudet>
¯\_(ツ)_/¯ seems possible if you're using a client. The web-interface I have to imagine should be more stable tho. Nevertheless, I'm no expert on this; there are experts hanging out in #synchronicity tho. 

[13:19:12.0931] <aholm>
I'll poke them if the issue persists, thanks

[13:24:42.0172] <mgaudet>
PS: Good to see you about 

[13:28:37.0851] <aholm>
Thanks :) I finally remembered Mozilla switched to this chat service

[13:39:01.0846] <mgaudet>
tcampbell: Gentle review ping :) 

[14:33:47.0351] <tcampbell>
mgaudet: okay.. let's see

[14:34:35.0407] <tcampbell>
got distracted trying to understand the background of brand checks..

[14:35:57.0180] <tcampbell>
mgaudet: unrelated question. Have you had issues with vscode remote having a lot of errors with intellisense?

[14:36:00.0166] <mgaudet>
tcampbell: I... will have to figure that out when I get into fields.

[14:36:27.0110] <mgaudet>
tcampbell: what kind of errors? Mostly it seems uncomfortable with the way I work 

[14:36:47.0592] <mgaudet>
lots of moving around the revision tree from the command line, but the 'failures' are usually I just don't get completions for a while

[14:37:29.0191] <tcampbell>
it tries to build the intellisense database, and then flashes "Connection to server got closed" and then the process tries again

[14:37:51.0984] <tcampbell>
the main issue is that pops out the "Output" view and steals focus once every 5 minutes

[14:38:20.0835] <tcampbell>
this happened to be before and I managed to delete enough files from server to fix, but I can't seem to make it behave this time

[14:38:23.0236] <mgaudet>
oh, definitely have not had that

[14:39:15.0460] <tcampbell>
mgaudet: I have found this whole thread that yulia linked to be really fascinating https://esdiscuss.org/topic/tostringtag-spoofing-for-null-and-undefined

[14:40:04.0888] <tcampbell>
lot's of interesting people involved and a lot of interesting info about how they think about language design

[14:40:40.0450] <mgaudet>
I will take a look! 

[15:32:18.0078] <tcampbell>
mgaudet: this stack seems to conflict with m-c?

[15:35:35.0583] <mgaudet>
huh. Ok; was up to date as of friday I think, but lemme rebase and reupload

[15:35:39.0817] <mgaudet>
tcampbell: ^ 

[15:39:32.0812] <mgaudet>
oh yes, this is a self-conflict. Script stencil needn't be rooted anymore

[15:43:33.0194] <tcampbell>
oh nice

[16:11:57.0708] <mgaudet>
tcampbell: revisions updated; took a bit extra to make sure it kept building along the way. 

[16:12:09.0309] <mgaudet>
And with that, I'm off; so no rush tcampbell for today :D 


2020-03-24
[17:17:53.0711] <Waldo>
evilpie: Pass that `mutedErrors` look-see over to me, I'm fairly sure from past frontend involvement I'm not worse than anyone else to take that on.

[04:37:37.0110] <achronop>
hi, I am looking for GC people for a second opinion in a crash stack, any idea which room/person to ping?

[04:38:17.0417] <padenot>
jonco: ^ ?

[04:40:29.0752] <jonco>
achronop: hi, I can take a look

[04:43:52.0540] <achronop>
I am triaging crashes, the following signature came up, it is all over the place and it has been happening for a long time. I am not sure if it is a bug or something else ...

[04:43:54.0116] <achronop>
https://crash-stats.mozilla.com/report/index/8c64be3b-ef9e-4759-8045-184e50200323

[04:56:42.0299] <jonco>
achronop: I think you should file a bug, but it's not necessarily a GC issue.  Many of the crashes happen when this is called from the cycle collector too.

[04:58:07.0013] <achronop>
jonco: sure, thank you very much

[05:05:06.0191] <jonco>
jandem: are we still planning on removing TI, and if so will this remove ObjectGroup entirely?

[05:05:13.0276] <jonco>
achronop: np

[05:19:19.0571] <jandem>
> <@jonco:mozilla.org> jandem: are we still planning on removing TI, and if so will this remove ObjectGroup entirely?

Yeah the hope is that we can move some of its fields into Shape/BaseShape and then remove it

[05:19:26.0468] <jandem>
jonco: ^

[05:20:16.0824] <jonco>
jandem: great, thanks

[05:20:33.0448] <jonco>
hopefully that means that races involving it will also disappear

[05:22:15.0549] <jandem>
yeah that's likely I think

[08:30:02.0731] <mgaudet>
> <@tcampbell:mozilla.org> mgaudet: I have found this whole thread that yulia linked to be really fascinating https://esdiscuss.org/topic/tostringtag-spoofing-for-null-and-undefined

That was a really good read. Definitely enlightening about how people are thinking about this and some of the desires therein. 

[11:21:04.0226] <Waldo>
YES to not implementing initprop with the same code that implements setprop 💯 jandem 

[11:31:03.0454] <jandem>
\o/

[15:38:59.0936] <mgaudet>
Huh. So some incentives to follow ted into the glorious mach-build-based future: Builds feel faster... not sure what magic is involved (even incremental) . 

The real kicker though is jit-tests: 

- My build w/o mach, running jit tests manually: 56.7s
- My build w/ mach, running `mach jit-test`: 23.2s

[15:39:11.0281] <mgaudet>
almost exactly 2x faster

[15:39:24.0699] <mgaudet>
 * Huh. So some incentives to follow Ted into the glorious mach-build-based future: Builds feel faster... not sure what magic is involved (even incremental) .

The real kicker though is jit-tests:
- My build w/o mach, running jit tests manually: 56.7s
- My build w/ mach, running `mach jit-test`: 23.2s

[15:43:42.0566] <tcampbell>
do you have sccache now running?

[15:44:04.0990] <tcampbell>
oh, jit-tests.. that is weird

[15:45:31.0485] <tcampbell>
do you have differences in your mozconfig?

[15:45:35.0946] <tcampbell>
 * mgaudet:  do you have differences in your mozconfig?

[15:46:17.0852] <mgaudet>
tcampbell: I tried to line them up side-by-side for an apples-to-apples comparison and got this result. 

[15:46:32.0034] <mgaudet>
(ie, I copied the configure flags in directly from the moz-config) 

[15:47:53.0516] <tcampbell>
I wonder if it was the weird python subprocess issue that Jan run into and build people solved

[15:48:40.0579] <tcampbell>
ulimit something something

[15:49:40.0110] <mgaudet>
oh interesting. I thought that was only configure, but lemme give it a shot!

[15:51:38.0766] <mgaudet>
nah; `ulimit -n 1024` seems to not fix it, though my recollection is that it's noticably improved configure

[15:51:46.0181] <mgaudet>
 * nah; `ulimit -n 1024` seems to not fix it, though my recollection is that it's noticeably improved configure

[15:56:58.0869] <mgaudet>
Whelp: In other news I have a kinda gross looking patch that merges my `ScriptAllocationStencil` (a patch series that never landed) and `BCEScriptStencil` -- with that, I'm going to cut out for the day, because trying to clean that up is a problem for tomorrow Matt. 

[15:57:39.0396] <tcampbell>
mgaudet: my usual enable-debug/enable-optimize jit-test run is about 45s

[15:58:34.0053] <mgaudet>
/me facepalms. 

[15:58:38.0771] <mgaudet>
My mozconfig has disable-debug 

[15:58:41.0320] <mgaudet>
not enable

[15:59:03.0279] <tcampbell>
mystery solved at least

[15:59:05.0853] <tcampbell>
bye!

[15:59:06.0436] <mgaudet>
false alarm everyone, PEBKAC

[15:59:45.0831] <tcampbell>
yeah, 57s for me and I think we have same machine

[16:00:46.0371] <mgaudet>
That seems eminently likely. Aww. 23 second jit tests were nice. Need to get your self-hosted hack in ted. I'd love to drop 30% off jit-tests

[16:08:45.0104] <evilpie>
Oh no, I hope we don't store structured cloned SaveFrames on disk

[16:24:33.0549] <evilpie>
jimb: ^ Do you know? I need to add an additional boolean to SavedFrame for bug 1623226, and I am wondering if we I need to care about backwards compatibility

[16:24:35.0086] <botzilla>
https://bugzil.la/1623226 — NEW (evilpie) — Report filename, lineno, colno of problematic position in uncaught non-error exceptions

[16:24:48.0101] <evilpie>
(I am also wondering if we ever expose savedFrame directly to JS)

[16:26:25.0439] <evilpie>
ah saveStack neat

[16:28:25.0593] <jimb>
evilpie: Yes, we do expose `SavedFrame` to chrome JavaScript.

[16:28:41.0276] <jimb>
and the shell can get to them too

[16:29:32.0693] <jimb>
evilpie: I honestly don't know if `SavedFrame`s get special treatment in the structured cloning algorithm.

[16:30:04.0760] <evilpie>
jimb: okay I think making this backwards compatible is actually relatively straight forward and we can test it in the shell, so that is fine

[16:30:09.0303] <jimb>
But I don't think we expose them to content. They conform to no Web standard.

[16:30:34.0746] <jimb>
So we can change them at will, and the fallout will be confined to Firefox developers.

[16:31:16.0932] <evilpie>
jimb: thanks


2020-03-25
[02:29:05.0217] <decoder>
jonco: the baseUnowned race also showed up in fuzzing. I can maybe make you a test

[03:14:37.0395] <jonco>
decoder: thanks, it would be great to get the other stack

[03:15:12.0874] <decoder>
so far all ocurrences I have seen have the second stack missing, but I can reproduce it deterministically 

[03:15:29.0259] <decoder>
thats unusual. if it was a suppressed stack, it would be intermittent

[03:15:37.0011] <jonco>
oh, interesting

[03:15:44.0851] <jonco>
yeah none of the suppressions seemed relevant

[03:17:42.0677] <decoder>
im trying to reduce it now, maybe that will help

[07:13:38.0604] <zombie>
do we have a rule for ASI on MDN pages?

[07:13:59.0779] <zombie>
"Minor tweaks to formatting, phrasing, and punctuation." -> removes all semicolons https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Class_fields$compare?locale=en-US&to=1598522&from=1593037 

[07:24:25.0387] <evilpie>
zombie: you should ask #mdn, but most code  I have seen on MDN uses semicolons, so this change seems bad

[07:25:21.0060] <zombie>
nod

[07:25:25.0319] <zombie>
i just thought the recommendation on ASI would come from this channel

[07:25:54.0658] <evilpie>
I am actually not sure if static fields require ASI

[07:26:48.0345] <evilpie>
ah it does https://tc39.es/proposal-class-fields/#prod-FieldDefinition

[07:39:06.0196] <Benjamin Bouvier>
imo it's not a good idea to use ASI in MDN examples, because there's a chance the person reading doesn't know about this rule and thus should be taught about it

[07:39:46.0363] <Benjamin Bouvier>
and then each MDN page would have a link to the ASI page, with the text "this example doesn't use semicolons. Why?"

[08:40:22.0382] <jonco>
jandem: do you know what the alignment of generated JIT code is?

[08:41:00.0003] <jonco>
(the pointer that's stored at the start of JitCode)

[08:51:27.0113] <jandem>
jonco: I think that's computed here: https://searchfox.org/mozilla-central/rev/4d9cd186767978a99dafe77eb536a9525980e118/js/src/jit/Linker.cpp#57

[08:52:30.0838] <jandem>
CodeAlignment is 8 or 16 on all platforms

[08:52:53.0434] <tcampbell>
oh, for the gc::Cell requirements? yeah we did check at the time, but it is certainly a little sketch

[08:53:09.0920] <jonco>
jandem: great, thanks, looks like it's already aligned to at least 8 bytes

[08:53:20.0732] <jandem>
yeah

[08:53:30.0334] <tcampbell>
at the very least we should assert in JitCode constrcutor

[08:53:37.0045] <jonco>
tcampbell: looks like there's a check already https://searchfox.org/mozilla-central/source/js/src/gc/GC.cpp#293

[08:53:54.0017] <tcampbell>
ah

[08:54:14.0351] <tcampbell>
sometimes I do the right thing I guess

[08:54:32.0705] <jonco>
haha

[08:55:19.0063] <tcampbell>
never-the-less, a wrapper type for the pointer wouldn't be the worst

[08:55:31.0710] <jonco>
I was adding more assertions and something violates our requirements... it's not JIT code, so it must be JSClass alignments

[08:55:41.0226] <jonco>
*is working on it*

[08:55:52.0323] <jonco>
 * I was adding more assertions and something violates our requirements... it's not JIT code, so it must be JSClass alignment

[08:56:05.0804] <jandem>
oh ObjectGroup?  you could probably swap it with realm_ or so

[08:57:33.0468] <jonco>
yeah, and also BaseShape has one

[08:58:10.0999] <tcampbell>
class has a pointer member. I guess on 32-bit it is a problem?

[08:59:07.0883] <jonco>
this is on 32 bit yes

[08:59:21.0389] <tcampbell>
adding align-as on class is probably a good idea

[08:59:25.0022] <jandem>
yeah it can be 4 byte aligned I suppose

[08:59:31.0232] <tcampbell>
and a similar static assert

[08:59:36.0843] <jonco>
yes

[08:59:59.0696] <jonco>
do we still dynamically generate JSClasses anywhere?

[09:00:12.0019] <jandem>
not anymore fortunately

[09:00:19.0853] <jonco>
great!

[09:01:23.0812] <jandem>
while you're there, we should add MOZ_STATIC_CLASS to JSClass. Some of the other structs there have it but not this one

[09:02:58.0903] <jonco>
cool, will do

[09:03:59.0272] <jandem>
awesome

[09:08:10.0913] <tcampbell>
oh jeez, dynamic classes were a thing? I'm guess that whole java-reflection thing existed

[09:09:05.0718] <sfink>
is there a good way to return multiple values (a number and an int, here) in JS without creating garbage temporary objects? Or rather, something nicer than passing in an array to be filled in.

[09:09:29.0734] <sfink>
if the JIT can optimize away the temporary used for destructuring a return value, that would be good enough for me

[09:11:00.0325] <sfink>
eg `let [v1, v2] = foo();` where foo returns a literal `[computed1, computed2]`

[09:11:28.0643] <jandem>
tcampbell: yeah xpconnect used to do that, caused some weird lifetime issues

[09:12:02.0806] <jandem>
sfink: it's hard to guarantee that happens consistently I think

[09:19:06.0249] <jandem>
is the use case self-hosted code? we reuse a global array/object there sometimes for this purpose, or we used to

[09:43:49.0978] <sfink>
no, it's a GC microbenchmark I'm setting up, and I don't want the timing code to interfere too much by generating its own garbage

[10:23:45.0446] <sfink>
nice writeup on strict aliasing: https://gist.github.com/shafik/848ae25ee209f698763cffee272a58f8

[11:18:15.0217] <yulia>
are there any issues with me posting feedback issues on tc39 repos tomorrow based on the drafts we discussed?

[11:25:54.0487] <djvj>
yulia: your write-up seemed pretty good to me.  +1

[12:51:04.0778] <mgaudet>
tcampbell: you around for a chat about yet-more-flags discussion with caroline and I? For myself I'm trying to figure out a bit of the top-level-flag responsibility questions. 

[12:52:00.0927] <tcampbell>
yep

[12:52:28.0643] <mgaudet>
Cool. Any time preference or is now OK? 

[12:53:07.0459] <tcampbell>
now is fine

[12:53:58.0347] <mgaudet>
OK

[13:41:16.0223] <iain>
Waldo: oops, thanks, I actually had no intention of changing the state on that bug at all

[13:41:39.0540] <iain>
I must have been looking through the list of possible states to see if there was anything that fit better

[13:41:54.0247] <Waldo>
I figured as much -- or at least that you meant to reopen, seeing as the flag isn't actually supported yet.

[13:42:43.0314] <iain>
I mean, the state of affairs is pretty clear: the flag is not supported until the re-import lands, but we're not doing any more work in that bug

[13:42:52.0249] <iain>
I don't know how best to reflect that in bugzilla state

[13:43:16.0266] <iain>
I guess reopened is as good a state as anything

[13:44:40.0910] <Waldo>
Make the bug depend on the reimport, is the usual way.

[13:48:30.0815] <iain>
Yeah, I did that a long time ago

[13:49:36.0286] <iain>
Ah, whatever, if the state is wrong somebody will come and complain at me

[13:52:55.0153] <Waldo>
 * Make the bug depend on the reimport, is the usual way (and close it when/after the dependency closes).


2020-03-26
[17:51:52.0545] <Waldo>
Man, this `pipeTo` streams spec stuff is weird.

[17:53:35.0837] <Waldo>
If the source/dest copying that is happening ends prematurely because source/dest became closed or errored, you're supposed to write any remaining chunks that were read before completing the shutdown process.  Makes sense.  But in that case, you are also supposed to _drop on the floor_ any rejection that happens while those chunks are written.  Very weird to give no notice whatsoever that something went wrong in that process.

[03:57:13.0820] <evilpie>
oh wow nice jandem 

[03:57:51.0729] <evilpie>
Waldo: you should at list rise such issues in the appropriate spec repo

[03:58:33.0530] <Waldo>
evilpie: Well, it's possible this behavior is not actually undesirable, too.

[03:58:45.0550] <Waldo>
I am not sure I grok everything well enough to have a strong position on it, yet.

[03:59:02.0231] <Waldo>
(finishing up some intl work, I really shouldn't be here now)

[04:00:02.0584] <Waldo>
I should have procrastinated the streams coding yesterday to today, and done the intl stuff yesterday instead, but here I am.

[04:00:39.0598] <jandem>
evilpie: it's still the slowest possible implementation and fails a number of tests (missing OSR support, some other things.. the next step), but it is a nice point

[04:05:54.0272] <jandem>
evilpie: (with `--warp --ion-eager --ion-osr=off --no-threads` I get about 40 failures/timeouts and >7600 passes. Some of the timeouts are silly tests that break without OSR (via `inIon`) and a lot of failures are caused by just a few different issues I hope)

[04:06:12.0928] <jandem>
I'm pretty happy with that, was worried it would expose more issues

[04:06:22.0202] <evilpie>
jandem: actually that still sounds really good for a new jit

[04:06:51.0727] <jandem>
yeah

[04:15:09.0331] <evilpie>
jandem: any chance warp could make support for async functions easier?

[04:19:08.0781] <jandem>
evilpie: I'm not sure. We have to see how OSR turns out because it's somewhat similar. The type barriers IonBuilder has there aren't great and I hope we can avoid or simplify that

[04:19:55.0536] <jandem>
also baseline is a bit faster without TI, that's nice too

[04:20:49.0935] <jandem>
/me lunch

[04:39:01.0363] <Benjamin Bouvier>
confession: hello confession my old friend, I've come to talk with you again 🎵

[04:39:04.0137] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[04:40:08.0050] <Waldo>
Benjamin Bouvier: Would be nice if there were a dedicated confession bot so I can tab-complete confession.  😇

[04:40:45.0938] <Waldo>
(while we're focusing on the really important stuff)

[04:41:37.0106] <Benjamin Bouvier>
Waldo: it took me some time to get a dedicated account for botzilla, and i wouldn't retry this any time soon, so probably a fine tradeoff in the meanwhile

[05:26:24.0799] <froydnj>
anba: oh hai

[06:52:29.0594] <nbp>
https://bugzilla.mozilla.org/show_bug.cgi?id=1618198#c59 jandem++

[06:53:03.0158] <nbp>
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1618198#c59 @jandem++

[06:53:08.0760] <nbp>
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1618198#c59 jandem ++

[07:00:03.0527] <jandem>
:)

[08:29:22.0735] <nbp>
jonco: Do you know if we can allocate more than 4G of JSObject?

[08:30:22.0863] <mgaudet>
> <@bnjbvr:mozilla.org> Waldo: it took me some time to get a dedicated account for botzilla, and i wouldn't retry this any time soon, so probably a fine tradeoff in the meanwhile

I don't think you'd need a fully featured bot; literally any matrix account called confession in this room would accomplish the same thing I think. Whilst still a PITA, not nearly as much :) 

[08:34:28.0679] <mgaudet>
tcampbell: In https://phabricator.services.mozilla.com/D68306 you mention HelperThreads.cpp; Maybe I'm under-caffinated just yet, but I don't see anything in there that gets impacted? All the DebugAPI::onNewScript calls there are already unconditional. What were you seeing?

[08:36:15.0596] <jonco>
nbp: the GC heap is limited to 4BG at the moment

[08:36:49.0312] <jonco>
(that's for the cell themselves; malloc data such as object elements can exceed this)

[08:36:50.0297] <tcampbell>
: mgaudet oh, you are right

[08:37:08.0683] <tcampbell>
I guess we don't support that combination...

[08:37:22.0888] <tcampbell>
Or we do it wrong?

[08:37:36.0982] <mgaudet>
Regardless, not gonna be a problem any more \o/ 

[08:37:37.0753] <mgaudet>
:D 

[08:37:47.0483] <tcampbell>
I thought that the hide from debugger was for eager offthread before dom

[08:40:58.0111] <mgaudet>
It has something to do with modules; I remember we were considering -using it- for eager compilation, but those patches never ended up happening. 

[08:41:44.0081] <mgaudet>
The scriptloader stuff got passed over to denispal... probably should ask: Would you be upset if we got rid of the HideScriptFromDebugger flag? 

[08:42:23.0160] <tcampbell>
mgaudet: oh, we do need to make the off-thread conditional

[08:43:08.0170] <tcampbell>
on off-thread, the frontend itself doesn't call onNewScript, and instead the HelperThreads.cp code does

[08:43:24.0424] <tcampbell>
the existing onNewScript checks the flag, but we are rmoving that check

[08:43:38.0392] <tcampbell>
thus, the call to onNewScript in HelperThreads.cpp must be made conditional instead

[08:43:59.0372] <mgaudet>
Yep; on the same page now :) 

[08:44:13.0093] <tcampbell>
sorry, denis, we figured it out

[08:44:21.0223] <mgaudet>
denispal: nvm; we'll get rid of the flag, but not the -option- 

[08:44:21.0822] <denispal>
mgaudet: I don't think it would affect my patch.  All I really need is the Loadedscript in the sso

[08:44:22.0509] <mgaudet>
:D 

[08:44:25.0247] <denispal>
ah ok

[08:44:51.0187] <tcampbell>
denis, by any chance are you available at 1pm for a call?

[08:47:24.0306] <tcampbell>
* denispal  any chance are you available at 1pm for a call?

[08:48:44.0151] <denispal>
tcampbell: I can probably join 5-10min after 1pm if that works 

[08:49:19.0019] <denispal>
unless the kid goes down for nap perfectly, which has been a rare event the last few weeks

[08:49:19.0092] <tcampbell>
Yep. Will send you details in bit.

[08:56:53.0999] <nbp>
> <@jonco:mozilla.org> nbp: the GC heap is limited to 4BG at the moment

ok, it make sense, then just answer this in the lastest need-info I asked you ;)

[08:57:25.0115] <nbp>
sorry for not catching this reply sooner :/

[09:03:09.0774] <sfink>
confession: trying out the reincarnation of the confession bot

[09:03:12.0263] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[09:06:13.0897] <cfallin>
The bot's emoji reaction is a nice touch :-)

[09:20:57.0439] <Benjamin Bouvier>
yeah, the emoji is there to let you know that your message has been seen; but if there was a recent confession, then it'll just post the emoji and not repeat the "Seen!" message

[09:21:25.0024] <Benjamin Bouvier>
confession: crossing my fingers that it'll work as expected

[09:21:47.0762] <iain>
Benjamin Bouvier++

[09:21:47.0850] <Benjamin Bouvier>
(it's the equivalent of mrggigles' "ok" answer after a recent submit)

[09:29:54.0916] <iain>
confession: Wrangled 90% of my giant "write all the masm" regexp codegen patch into coherent reviewable units that I'm mostly happy with. Sending the first batch out for review.

[09:30:50.0103] <evilpie>
ok that reaction is indeed super clever

[09:43:37.0132] <Waldo>
confession: I feel seen.

[09:43:54.0003] <Waldo>
Bwhahahaha, small minds, small pleasures.

[09:44:49.0387] <nox>
We have a volunteer on Servo who put this emoji everywhere, I love it.

[09:54:29.0171] <Ms2ger [~half-time dedication]>
It wasn't me, I promise 👀

[12:48:29.0887] <sheppy>
Crazy question -- is there a way to "promote" a variable to a constant or to create a constant after-the-fact somehow?

[12:49:09.0622] <sheppy>
If you have something that should be a constant but there are multiple ways in which the value could be obtained, creating it as a constant is potentially tricky.

[12:50:13.0005] <sheppy>
Also -- the room topic lists https://github.com/spidermonkey-embedders/ for embedders, but that's a 404

[12:55:06.0459] <iain>
Does something like `var mut_x; <initialize mut_x somehow>; const x = mut_x` work for you?

[12:56:16.0382] <sheppy>
Yeah, that has occurred to me. Was curious if there was some super clever other approach. Don't know why...

[12:57:28.0430] <ptomato>
sheppy: good catch, could an op replace that link with https://github.com/mozilla-spidermonkey/spidermonkey-embedding-examples please?

[12:58:07.0235] <Waldo>
Note that `const` is about _referential_ constancy, so `const x = {}; x.y = 42;` is totally a thing.  Arguably `const` is not terribly useful given this...

[12:58:20.0752] <sheppy>
Waldo: Yeah, I know.

[12:58:43.0677] <sheppy>
Basically I want to avoid having references to APIs accidentally change on the fly, stuff like that.

[12:59:03.0756] <sheppy>
const xr = navigator.xr etc

[13:00:05.0567] <sheppy>
Except if the polyfill needs loading, except if there's no polyfill and no native, that kind of thing. Just one example case. This has come up a few times of late, where I was thinking "it would be neat to have the ability to lock a value down once you finalize it.

[13:03:30.0169] <iain>
Is `const xr = getXR()`, with all the special cases in getXR, an option?

[13:04:26.0550] <sheppy>
Yeah, that's basically what I wound up with in the end. For some reason I got the idea in my brain about var->const promotion and cannot remember where it came from so was wondering if that was in JS. Guess not. :D

[13:04:30.0073] <sheppy>
Thanks! :)

[13:06:03.0806] <sheppy>
Hm, or was it some language that let you do `const foo;` then later on `foo = bar;` and that set and locked the constant...?

[13:06:07.0539] <sheppy>
Anyway...

[13:07:06.0894] <Waldo>
I think Java may allow assign-later-once for `const`.  All this is technically feasible, for sure, but enforcing "once" either becomes awkward syntactically or requires an implicit boolean for assignment be kept, which is rather dumb.

[13:07:40.0789] <sheppy>
Yeah, that's a very fair point.

[13:12:24.0067] <iain>
I believe Rust allows you to say `let x;` (which is an immutable binding) and then assign to it once, so long as it is initialized along every path where it is used.

[13:13:15.0502] <Waldo>
And probably forbids the assignment to be in a loop?  Or in a lambda with the binding captured, if Rust supports that (can't remember if it does)?

[13:13:33.0383] <Waldo>
Like, this is all technically manageable, it's just the special cases proliferate.

[13:14:17.0184] <iain>
I don't know the precise definition of "once", but it's basically "we can determine statically that this will only be initialized once dynamically"

[13:14:23.0642] <sheppy>
I hear you there. OK, thought experiment concluded. :)

[14:16:09.0715] <bwidawsk>
Hi there everyone. I'm a complete js and spidermonkey noob - I'm interested in trying to help get Intel CET support to the JIT. I'm interested in the most expedient way to do that, whether it's help enabling testing on internal machines, or dig into the code and try to implement it myself. 

[14:57:02.0856] <mgaudet>
Hi bwidawsk; sorry to leave you hanging there. I think there's not a good established process for something like this. 

[14:57:55.0854] <mgaudet>
I think before we were able to consider resourcing it ourselves, we'd need to have a good understanding of the costs and benefits. Are there other JIT implementations that can be pointed at to give us an estimate of the complexity? 

[14:58:25.0308] <bwidawsk>
mgaudet:  You don't really have a choice. On a CET enabled processor/kernel, you will SIGBUS if you don't implement it

[14:58:44.0231] <bwidawsk>
gcc and llvm both have it enabled

[14:59:03.0649] <mgaudet>
If your goal is to have it done, certainly you starting the work is the fastest way, but I'd still recommend having some design discussions on a bugzilla bug to avoid going off an implementing too much without guidance 

[14:59:17.0220] <mgaudet>
bwidawsk: do you know if any of the other JS engines have it working yet?

[14:59:52.0173] <bwidawsk>
mgaudet: I can certainly start something - no idea if any other JS engines have it, but I'd bet Chakra (or whatever it's called) would have it somewhere

[15:00:14.0624] <bwidawsk>
I can get a real answer on other JS engines

[15:01:01.0834] <mgaudet>
bwidawsk: I'd also recommend opening a bugzilla bug against the Javascript Engine component so that we can track this and have information centralized

[15:01:15.0931] <mgaudet>
(it'll also help in getting comment from our security team, and prioritization)

[15:01:22.0199] <bwidawsk>
It should be fairly trivial to implement, just looking through the jit subdirectory in x86, I think I might be able to do it ourself too

[15:01:23.0294] <tcampbell>
The biggest blocker for CET is the JIT bailout machinery

[15:01:41.0397] <bwidawsk>
tcampbell: bailout from what?

[15:02:00.0542] <tcampbell>
it replaces one stack frame with several and synthesizes return values

[15:02:08.0692] <tcampbell>
 * it replaces one stack frame with several and synthesizes return addresses

[15:02:22.0748] <bwidawsk>
I was mostly looking at the IBT side

[15:03:03.0286] <tcampbell>
which is IBT? (I've only partially read the CET docs)

[15:03:25.0323] <tcampbell>
for reference, bailout handling https://searchfox.org/mozilla-central/source/js/src/jit/BaselineBailouts.cpp#603

[15:05:21.0498] <bwidawsk>
tcampbell: essentially you need the first opcode of an indirect branch target to be special

[15:05:43.0064] <bwidawsk>
see https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/3865/diffs?commit_id=8ebd9f2541d4326e3eaebf49ed9dfb24882fb5d6

[15:07:52.0540] <bwidawsk>
without this, on an enabled cpu/kernel, you will have issues

[15:09:23.0891] <tcampbell>
There are about half a dozen types of indirect branch targets.

[15:10:04.0275] <tcampbell>
You could open a bug for just this IBT stuff, and I think if it was behind a compile guard we probably be fine to accept patches

[15:10:51.0197] <bwidawsk>
okay, any quick tips on where I might find these - I see in Trampoline-x86

[15:12:55.0620] <tcampbell>
bwidawsk: I think the first step is to see if you can get a no-jit build to even run

[15:13:10.0548] <tcampbell>
It was not clear to me of https://bugzilla.mozilla.org/show_bug.cgi?id=1483885 affects IBT or not

[15:17:02.0691] <bwidawsk>
Sounds similar - vtables are basically what we had to fix in Mesa as well

[15:17:34.0536] <tcampbell>
are you with a vendor?

[15:17:43.0347] <bwidawsk>
I work for Intel

[15:18:11.0874] <tcampbell>
ah, got it. Let me see if I can dig up the bugs

[15:19:13.0469] <bwidawsk>
I don't see anything in configure to disable jit... any hints there?

[15:20:10.0683] <tcampbell>
I think for some reason the option is called `--disable-ion`

[15:20:22.0127] <tcampbell>
(that will include all codegen)

[15:20:44.0996] <bwidawsk>
okay, got it

[15:23:22.0296] <tcampbell>
bwidawsk: here are some updated build docs that are coming https://d3kxowhw4s8amj.cloudfront.net/file/data/ebcxst335j2vkrbeml3i/PHID-FILE-okr2xmw4xgjripgo5k7k/js_src_doc_build.rst

[15:24:01.0134] <tcampbell>
using `mach` and mozconfig files is probably useful so you can target both the standalone spidermonkey shell and full browser

[15:24:12.0732] <bwidawsk>
okay, thanks

[15:26:30.0691] <tcampbell>
caroline: I wonder if we should subdivide "parser" flags into function vs all-script. See: JSScript::initFromFunctionBox

[15:29:45.0092] <caroline>
yeah i like that idea! 

[15:31:39.0374] <caroline>
tcampbell: ill try to write up that and the stuff from the last two days into the make flags better bug tree 

[15:32:22.0441] <tcampbell>
:)

[15:39:08.0874] <bwidawsk>
tcampbell: I must be doing something wrong, but a debug build doesn't build

[15:39:28.0925] <bwidawsk>
`0:00.92 /home/bwidawsk/work/cet/spidermonkey/obj-x86_64-pc-linux-gnu/js/src/js-config.h:28:4: error: "SpiderMonkey was configured with --disable-debug, so DEBUG must be not defined when including this header"`

[15:39:47.0650] <bwidawsk>
hang on, let me clean...

[15:41:25.0630] <tcampbell>
I usually start with a mozconfig like:
```
mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/obj-dbg-spidermonkey
  
ac_add_options --enable-debug
ac_add_options --disable-optimize

ac_add_options --enable-application=js
```

[15:43:29.0235] <bwidawsk>
that and --disable-ion are all I Have

[15:47:30.0419] <tcampbell>
weird.. is this on linux or other?

[15:49:15.0240] <bwidawsk>
yes, linux

[15:50:35.0865] <mgaudet>
bwidawsk: I have some build docs I've been working on. These are prototypes, but might help: https://phabricator.services.mozilla.com/D68299 (guide to building with mach) 

[15:50:51.0734] <mgaudet>
(they do assume a whole mozilla-central or unified checkout tho) 

[15:51:31.0293] <bwidawsk>
@mg

[15:51:52.0943] <bwidawsk>
mgaudet: thanks, tcampbell had shared it with me above

[15:52:37.0246] <mgaudet>
bwidawsk: haha -- didn't realize they were the same. Missed the context in that crazy cloudfront url!

[15:53:17.0047] <bwidawsk>
👍️

[15:54:40.0993] <tcampbell>
I'm mostly signing off for the day. Getting the shell building and then making sure `./mach jit-test` works on the CET platform is probably the place to start.

[15:55:01.0140] <bwidawsk>
tcampbell: got it, thanks

[15:55:19.0200] <tcampbell>
I expect it should work for non-jit flows of the jsshell. I expect the full browser to fail though even without jit

[15:55:58.0476] <tcampbell>
for browser, just make another mozconfig and change the obj directory and use `ac_add_options --enable-application=browser`

[15:57:18.0232] <bwidawsk>
okay, well one step at a time

[15:57:22.0526] <bwidawsk>
thanks for the help

[15:57:22.0969] <tcampbell>
you'll need to check out the `./mach bootstrap` stuff for a full browser build to download toolchains (https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Simple_Firefox_build/Linux_and_MacOS_build_preparation )

[16:05:32.0764] <bwidawsk>
dang, it doesn't work on centos8

[16:05:37.0079] <bwidawsk>
i really regret install centos9

[16:05:39.0202] <bwidawsk>
*8

[16:06:24.0882] <mgaudet>
(PS: for build issues, you might try #developers and have more luck. I too am signing off though. Best of luck in the short term, hope to see you around!) 

[16:06:45.0995] <bwidawsk>
/me needs to get weechat-matrix working and then I'll be around much more often

[16:06:53.0443] <bwidawsk>
I'm looking forward to working/helping on this

[16:07:04.0308] <mgaudet>
confession: Working on converting FunctionBox::finish to something that works on a tree walk; which means first validating the integrity of the FunctionTree... working on it. 

[16:07:07.0162] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire


2020-03-27
[19:10:28.0599] <bwidawsk>
tcampbell: I had 4 failures on my ICL machine, expected?

[19:11:57.0514] <tcampbell>
Where they timeouts? Debug builds are sometimes too slow depending on how parallelism lines up 

[19:12:49.0053] <tcampbell>
You can also rerun specific test with `mach jit-test some/partial/filename`

[21:28:51.0600] <bwidawsk>
tcampbell: sorry, apparently my notifications are broken here 

[21:29:18.0030] <bwidawsk>
and my remote machine isn't responding right now... ☹︎

[23:34:31.0313] <jandem>
bwidawsk: it would be good to understand what mitigations are needed exactly. If we fix IBT but still get segfaults due to shadow stack issues.. we should have a plan for that too

[23:40:22.0675] <arai>
where is `js::Value` defined?  I spotted some use of `js::Value` instead of `JS::Value`, and I cannot find where it's defined/aliased.  searchfox directly jumps to `JS;:Value`

[23:41:03.0152] <Waldo>
arai: https://searchfox.org/mozilla-central/source/js/src/NamespaceImports.h#67

[23:41:24.0399] <arai>
Waldo: thanks!

[23:41:34.0849] <Waldo>
/me glares daggers at that header, which should not exist

[23:42:22.0991] <arai>
so, you're not supposed to use js::Value ?

[23:42:55.0071] <Waldo>
IMO it should be idiomatic to use `JS::Value`, and I am trying to model that norm.  (I assume you're looking at my patches.)

[23:43:12.0279] <arai>
yes

[23:43:12.0875] <arai>
https://phabricator.services.mozilla.com/D68473

[23:43:26.0211] <arai>
`MutableHandle<mozilla::Maybe<Value>>`

[23:43:29.0572] <Waldo>
Many things we don't alias into `namespace js`, no reason I can see for `JS::Value` to be exceptional.

[23:43:50.0476] <Waldo>
arai: Isn't that inside `namespace JS`, tho?

[23:44:21.0675] <arai>
it seems to be inside `namespace js`

[23:44:24.0802] <Waldo>
Any type you name inside a function that's in `namespace JS` will search in `JS` for the declaration automatically, so it seems reasonable to omit qualification on those.

[23:45:06.0017] <arai>
oh, I overlooked '}  // namespace js` just before class

[23:45:08.0398] <Waldo>
arai: So at least the arguments to `JS::Compartment::wrap` are going to be looked up in `JS::Compartment`, then in `JS`, then in `::`.

[23:45:13.0023] <arai>
 * oh, I overlooked `}  // namespace js` just before class

[23:45:33.0543] <Waldo>
Same for the `wrap` in the class body.

[23:45:59.0108] <Waldo>
You're right, tho, `void check(Handle<mozilla::Maybe<Value>> maybe, int argIndex) {` should have some `JS` in it.

[23:51:18.0475] <arai>
okay, I'll add comment for that line, as a reminder

[23:58:51.0820] <Waldo>
I've updated it locally.  :-)

[23:59:32.0667] <arai>
:)

[05:33:05.0737] <froydnj>
wingo: I too would have been tempted to optimize that add w/ a constant case in the baseline wasm compiler

[05:34:05.0321] <wingo>
hehe

[05:34:37.0375] <Ms2ger [~half-time dedication]>
froydnj: ɴᴏ ɴᴏᴏᴅʟɪɴɢ

[05:35:32.0973] <froydnj>
Ms2ger [~half-time dedication]: hm, what's the opposite of SpaghettiMonkey

[05:35:57.0011] <Ms2ger [~half-time dedication]>
RiceMonkey?

[05:42:59.0935] <nox>
The real question is, is the JIT al dente?

[05:43:20.0956] <yulia>
👀

[05:43:29.0053] <Ms2ger [~half-time dedication]>
🥖🐒

[06:36:43.0269] <@allstarschh|afk>
sdetar: https://bugzilla.mozilla.org/show_bug.cgi?id=1625230

[06:38:45.0429] <nbp>
My blind guess would be that this sound more like a RegExp engine issue creating garbage more than a GC issue.

[06:39:08.0595] <@allstarschh|afk>
sdetar: https://bugzilla.mozilla.org/show_bug.cgi?id=1619080#c4

[07:31:21.0323] <jandem>
confession: simplifying global/eval declaration conflict checking by moving it from the prologue to a separate `JSOp` (bug 1625471)

[07:31:24.0076] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[07:31:25.0598] <botzilla>
https://bugzil.la/1625471 — ASSIGNED (jandem) — Add a separate JSOp for CheckGlobalOrEvalDeclarationConflicts

[07:32:06.0662] <jandem>
confession: WarpBuilder prototype now has JSOp parity with IonBuilder (except for Eval) for the slow paths

[07:32:50.0531] <jandem>
Benjamin Bouvier: hm this could be a good source for newsletter items

[07:33:57.0833] <Benjamin Bouvier>
jandem: good point! i was wondering if i should try to also group updates by channel (then looking at #spidermonkey would be a good source of info for the newsletter)

[07:34:15.0188] <jandem>
yeah that would be perfect

[08:38:32.0637] <yulia>
don't know if this helps anyone else, but i asked how realms / compartments apply to different use cases mentioned in the realms proposal, and i got the following answer: https://github.com/bmeck/proposal-compartments/issues/1#issuecomment-605058820 cc jandem  tcampbell jorendorff 

[09:06:04.0854] <jandem>
yulia: thanks. I thought a compartment was a new realm + virtualization on top of it, but they mention a compartment can inherit intrinsics like Array.prototype from an existing realm

[09:22:08.0308] <yulia>
jandem: yes, thats right. a compartment is kind of like a global with shared intrinsics from its parent

[09:22:16.0288] <yulia>
but no access to the host? i think thats the case at least

[09:24:32.0882] <mgaudet>
 (Q: The "How-we-work" glossary doesn't yet have an entry for Host; Is this approximately what we'd call an "embedder"; so for example, extra name resolution rules (like our Non-syntactic scopes)? ) 

[09:25:45.0211] <bwidawsk>
jandem:  Let me get that information as best I can..

[09:30:55.0607] <bwidawsk>
and I'll open a bugzilla as well

[09:41:22.0756] <bwidawsk>
tcampbell: 
`TIMEOUTS:
    basic/bug617139.js
    gc/bug-1543589.js
    ion/inlining/isFiniteInline.js
    ion/inlining/isNaNInline.js`

[09:42:19.0976] <tcampbell>
bwidawsk: I wouldn't worry about those timeouts. You can re-run the specific tests and confirm they pass individually

[10:00:04.0857] <mgaudet>
tcampbell: have you run binast test with mach yet? (getting `TypeError: startswith first arg must be bytes or a tuple of bytes, not str` for ` ./mach jit-test --run-binast` 

[10:00:07.0756] <mgaudet>
 * tcampbell: have you run binast test with mach yet? (getting `TypeError: startswith first arg must be bytes or a tuple of bytes, not str` for `./mach jit-test --run-binast`)

[10:00:38.0153] <tcampbell>
mgaudet: oh.. blame sfink 

[10:01:04.0629] <mgaudet>
hah. Will open a bug. 

[10:01:53.0806] <tcampbell>
https://bugzilla.mozilla.org/show_bug.cgi?id=1619475

[10:02:12.0337] <tcampbell>
add regression to that

[10:27:16.0174] <nbp>
confession: Optimizing the code produced by a code generator is way easier than rewriting thousands of lines by hands. The only problem is knowing what to optimize. https://github.com/mozilla-spidermonkey/jsparagus/issues/362

[10:27:18.0424] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[10:29:58.0092] <bwidawsk>
jandem, tcampbell Yeah, I guess shadow stack would also be an issue for you guys if you skip call stack frames

[10:30:03.0097] <bwidawsk>
that's harder...

[10:33:40.0177] <Benjamin Bouvier>
confession: rewrote linear scan in regalloc.rs so it operates on coarse intervals, which makes it much faster to run (compile time)... but much more eager to spill (slower run times).

[10:49:34.0139] <tcampbell>
bwidawsk: does CET require all types of green-threads to use syscalls?

[10:50:12.0837] <bwidawsk>
what's a green thread?

[10:50:32.0070] <tcampbell>
usermode-threads

[10:50:58.0290] <tcampbell>
things based on swapcontext and others

[10:51:09.0352] <tcampbell>
(I see the patches were added to swapcontext to add syscalls)

[10:53:12.0932] <bwidawsk>
I'm not sure if "require" is the right word. In my mind, that's definitely the easiest way to do it

[10:53:29.0521] <bwidawsk>
when you switch protection levels you get a different shadow stack

[10:53:48.0178] <bwidawsk>
(it might be the only sane way)

[10:53:51.0945] <bwidawsk>
I'm new to the technology

[10:56:40.0309] <tcampbell>
ah, ok. I'm trying to understand what you can do if anything to shadow stack with unprivledged instructions

[10:58:52.0755] <tcampbell>
I see things like `INCSSP` that seem to let you unwind multiple frames (and presumably from usermode for setjmp/longjmp)

[11:10:30.0350] <bwidawsk>
oh, I haven't seen that yet... for the short term you can disable ibt and shstk separately in the elf header

[11:14:46.0411] <bwidawsk>
tcampbell: I don't think there's any way to modify the stack itself, even from a vmm, just the pointers like you see

[11:15:19.0924] <bwidawsk>
it's scary to me that someone in security signed off on those actually

[11:19:18.0685] <tcampbell>
I'm not sure if there will be any good way to have fast JITs with shadow stacks enabled.

[11:20:55.0129] <tcampbell>
Could always bailout to the C++ interpreter I guess and convert stack frames into simulated stack frame.

[11:21:37.0395] <tcampbell>
would need a lot of trampoline frames when cross being C++ and JIT so that there is a point to unwind to with INCSSP

[11:24:51.0318] <bwidawsk>
tcampbell: Is this pattern common of returning to some other place?

[11:27:05.0473] <tcampbell>
bwidawsk: One of the optimization strategies is to generate code and inline assuming things are well behaved. If deep in call stack the code touches some state that invalidates assumptions we are making, we need to pretend the inlining did not happen. In that case we create stack frames as though the low-tier JITs had run, since they have less assumptions and can continue to execute correctly

[11:27:21.0509] <yulia>
sdetar: a couple of us are hanging out in hub.link/tLxtknv and we should totally do this for webvm meetings

[11:27:22.0391] <tcampbell>
It is reasonably common

[11:28:05.0660] <bwidawsk>
thanks for the explanation

[11:31:50.0437] <tcampbell>
bwidawsk: if you or your colleagues have ideas, let us know. We've only done some initial thinking about this, but are wondering if any ideas existed for these types of problems before CET taped-out.

[11:32:35.0208] <tcampbell>
I'm not sure there will be a quick fix

[11:35:15.0266] <bwidawsk>
well perhaps short term solution is enable ibt and disable shstk

[11:38:46.0534] <bwidawsk>
I did not realize originally linux would let you opt out

[11:40:36.0995] <sdetar>
yulia:  Sound cool, I will have check that out later

[12:21:45.0741] <Waldo>
Oh right, I should actually eat while I still can...

[12:22:27.0488] <aholm>
Probably a good idea

[12:36:24.0562] <nbp>
> <@yulia:mozilla.org> sdetar: a couple of us are hanging out in hub.link/tLxtknv and we should totally do this for webvm meetings

It takes ages to load and my fan go spinning … not sure I want to run that while running other benchmarks on my laptop.

[12:54:13.0026] <tcampbell>
mgaudet: ping if you are around

[12:54:41.0966] <mgaudet>
tcampbell: pong

[13:01:36.0801] <bwidawsk>
is there a decent __git_ps1 equivalent for hg? I've found https://www.mercurial-scm.org/wiki/PromptExtension to be horrendously slow

[13:31:16.0943] <bwidawsk>
@tc

[13:31:22.0610] <bwidawsk>
dang, I'll get the hang of this eventually

[13:31:38.0183] <bwidawsk>
tcampbell: `   We suggested a workaround by marking all inlined functions and
   replacing their ret with pop & jmp.`

[13:31:47.0441] <bwidawsk>
that's from the v8 team

[13:43:03.0672] <tcampbell>
ha, that is slightly wild. will have to think more about it. jandem ^

[13:44:09.0570] <bwidawsk>
I'll try to create the bugzilla shortly-ish as I get more information

[13:44:15.0404] <jandem>
yeah I was wondering about things like that. Pretty big hack though

[13:44:17.0689] <bwidawsk>
trying to trapse through how you do CFLAGS atm

[13:44:41.0481] <tcampbell>
bwidawsk: you may need to ask in #build:mozilla.org 

[13:44:50.0976] <tcampbell>
they kindly maintain all that stuff for us

[13:45:11.0768] <bwidawsk>
will do - thanks

[14:02:21.0727] <sfink>
confession: I really ought to stop writing quickie patches on top of my usual teetering piles of other changes, such that the trivial patch gets held up on all the bugs in my other stuff that show up when I do the "obviously fine" try push.

[14:02:23.0811] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[14:03:46.0340] <sfink>
mgaudet: or in other words, I long ago fixed your bug 1625522 but I'm paranoid about encodings on the other platforms, and I still haven't managed a clean try run because I'm stoopid.

[14:03:47.0752] <botzilla>
https://bugzil.la/1625522 — NEW (nobody) — ./mach jit-test --run-binast fails with `TypeError: startswith first arg must be bytes or a tuple of bytes, not str`

[14:05:08.0271] <mgaudet>
sfink: No rush! I have the workaround, just a small papercut. But glad to hear there's a working fix in plan :) 

[14:06:36.0336] <Waldo>
sfink: You don't rebase the quickie patches elsewhere in your tree when it becomes clear there's a holdup?

[14:07:07.0320] <sfink>
no, because there's always just one more quick fix and then it'll all be good!

[14:07:15.0226] <Waldo>
I make the mistake of doing fixups atop long-term work fairly often, but I can generally extricate them easily -- and do so they're not taunting me in the face with every `hg wip`.

[14:07:42.0269] <sfink>
sure, once I decide to stop being stubborn, rebasing atop central is easy

[14:07:59.0931] <sfink>
(but... but... my object directory! I'll have to rebuild!)

[14:08:14.0744] <Waldo>
RIP my compile times.

[14:08:39.0787] <Waldo>
I would probably be much more reticent if my patches typically were fine being tested just compiling SpiderMonkey.

[14:09:00.0738] <Waldo>
 * I would probably be much more reticent if my patches typically were fine being tested _not_ just by compiling SpiderMonkey.

[14:09:16.0274] <Waldo>
(we are so spoiled)

[14:10:17.0441] <sfink>
even recompiling SpiderMonkey takes long enough for me to wander off to twitter, and so must be avoided at all costs

[14:10:30.0210] <Waldo>
heh

[14:11:02.0651] <Waldo>
The worst cases for me are patches where I'm moving stuff between headers or so and so need to do full _non-unified_ builds, particularly if it's a series of patches to test.  😱

[14:11:14.0085] <sfink>
ouch, yeah

[14:11:27.0190] <Waldo>
Even with `-j8` that's forever and a day each time.

[14:17:28.0581] <evilpie>
I wish there was a flag to disable *all* rust compilation

[14:20:47.0006] <Waldo>
I want Rust compilation that doesn't push the most recent compiler error far out of screen view.  :-(

[14:59:36.0980] <nox>
Waldo: https://github.com/rust-lang/rust/issues/27189

[15:00:27.0643] <Waldo>
nox: Sorry, I meant in the context of compiling SpiderMonkey -- Rust compilation runs in parallel with C++, so if the error is early in C++ compilation the Rust warnings and stuff push it out of view.

[15:00:52.0880] <nox>
Oh I see, no worries.

[15:01:12.0320] <nox>
Not like my link is a solution anyway even without C++, given it's just an issue hah.

[15:30:04.0868] <sfink>
I need to cache a bool setting that is set during startup and never changes, in code that doesn't have a cx or anything to grab it from. What's the best way to do that? Function-local `static` would probably work in practice, but I think would theoretically still be a race.

[15:30:22.0987] <sfink>
`thread_local` would work, but apparently that doesn't work on Android

[15:31:55.0097] <sfink>
(and the value will be identical across threads, fwiw)

[15:32:13.0556] <evilpie>
Waldo: Would be nice if you could at least give some general feedback on my SavedFrame patch

[15:32:45.0132] <Waldo>
evilpie: Will give a look after I finish dealing with a couple review comments and get these patches queued to land.

[15:32:53.0265] <evilpie>
thanks

[15:47:19.0389] <sfink>
ah! The answer to my question: c++11 changed block scoped `static` to be threadsafe


2020-03-29
[10:20:08.0916] <yulia>
smooshmonkey poster progress for yall

[11:29:28.0633] <iain>
That is amazing


2020-03-30
[02:34:22.0751] <decoder>
I'm revisiting all JS shell functions right now... they must have been growing exponentially since I last checked in detail

[08:42:25.0252] <mgaudet>
tcampbell: ping? 

[08:42:28.0644] <tcampbell>
caroline: Thanks for removing HideScriptFromDebugger. We can probably also remove this wrapper: https://searchfox.org/mozilla-central/rev/9c6e7500c0015a2c60be7b1b888261d95095ce27/js/src/vm/JSScript.cpp#4257-4265

[08:42:31.0240] <tcampbell>
mgaudet: pong

[08:43:41.0565] <tcampbell>
caroline: if you inline that into callers you can simplify most of them

[08:44:43.0241] <mgaudet>
tcampbell: About your CloneScriptIntoFunction patch. I'm trying to figure out the end state: It seems this change means that we're going to have a new bytecode for each self-hosted constructor. Which isn't necessarily a bad thing, but is this sort of the longer term plan that we're not going to share bytecode with the self-hosted compartment? 

[08:45:20.0452] <caroline>
Sure, sounds good to me! 

[08:46:11.0613] <tcampbell>
mgaudet: the existing code creates a new JSFunction and new JSScript, and shared the RuntimeScriptData. My patch doesn't change that, just tweaks the construction of the JSFunction to go directly to correct state rather than being wrong and then mutating immutable fields

[08:47:07.0030] <mgaudet>
Hrm. Ok, I need to read this older code a bit more closely. 

[08:47:22.0728] <tcampbell>
BaseScript::sourceObject can then become `const`

[08:47:31.0705] <tcampbell>
.. probably should add that

[08:48:28.0370] <tcampbell>
mgaudet: yeah, the self-hosted cloning still makes clones of everything (including all the inner functions!) into the realm. The 'saving' is that we can use bytecode directly instead of compiling

[08:48:49.0393] <tcampbell>
It turns out a lot of self-hosted clones can't actually relazify

[08:49:14.0990] <mgaudet>
Oh, I see how the old code is working. What a curious rube goldberg machine

[08:49:17.0979] <tcampbell>
the system is less effective than I originally expected. Replacing it all with stencil forms may make sense

[08:49:52.0648] <tcampbell>
we 'execute' the top-level self-hosted realm, but even that is just hacks to set special marker flags

[08:51:40.0382] <tcampbell>
mgaudet: okay, updated patch with the const annotation

[08:55:19.0106] <mgaudet>
tcampbell: Alright. I think this is good to go. Because of the global scope restriction, I don't think we need the scope copying functionality of CloneScriptIntoFunction... which makes me wonder if that shouldn't be broken into two helpers, but if I'm right about that (only 80% sure) that'd be followup 

[08:56:00.0947] <tcampbell>
mgaudet: long term it would be nicer to synthesize these directly from frontend

[08:56:10.0371] <tcampbell>
so we don't have bogus srcnotes

[08:56:20.0913] <tcampbell>
and can make the SourceExtent const as well

[08:57:04.0450] <tcampbell>
Maybe I can stack another patch on this that manually builds the script, and just steals the RSD pointer

[08:57:32.0224] <tcampbell>
then immutableflags can remove the clear method and sourceextent is const

[08:58:04.0348] <mgaudet>
tcampbell: perhaps (actually, one nit might be leaving a comment about the state of the script SELF_HOSTED flag and SrcNotes, like your phab comment) 

[08:58:17.0715] <tcampbell>
can do.

[08:58:29.0931] <mgaudet>
tcampbell: For future archeolgists / you in a few months if this gets dropped :P 

[08:58:36.0572] <tcampbell>
ha

[09:11:06.0644] <tcampbell>
jandem: I wonder if I can disable ColSpan / SetLine source notes entirely when compiling self-hosted

[09:12:16.0027] <tcampbell>
(I guess we should never be generating SetLine in self-hosted to begin with..

[09:12:20.0864] <tcampbell>
 * (I guess we should never be generating SetLine in self-hosted to begin with..)

[09:18:20.0436] <jandem>
tcampbell could be a nice size win. Maybe also the debugger hints 

[09:18:45.0623] <tcampbell>
good point

[09:19:03.0241] <tcampbell>
ah, arai cleaned up their definitions recently :)

[09:20:11.0044] <evilpie>
weird constant folding for MToDouble and some other's like MToString is basically non existent in Ion

[09:37:02.0460] <iain>
Do we do stack probes on Windows?

[09:37:13.0828] <iain>
The old irregexp implementation has them: https://searchfox.org/mozilla-central/source/js/src/irregexp/NativeRegExpMacroAssembler.cpp#182-188

[09:38:16.0741] <iain>
But my cursory search foxing doesn't turn anything up anywhere else

[09:39:02.0485] <iain>
Oh, found it: https://searchfox.org/mozilla-central/source/js/src/jit/x64/MacroAssembler-x64.cpp#264

[09:39:10.0643] <sfink>
Huh. I didn't even know it might be a problem on Windows. I know of Linux-only reasons for doing this.

[09:41:59.0577] <sfink>
"someone" really ought to do something about this. Someday. I CC'd you on bug 909094.

[09:42:01.0390] <botzilla>
https://bugzil.la/909094

[09:42:25.0207] <sfink>
oh, wait. You've commented there already! (A comment I never read.)

[09:42:49.0621] <iain>
I was just going to say that I was already acquainted with that bug :P

[09:43:36.0750] <sfink>
then why haven't you fixed it already??!

[09:43:40.0069] <sfink>
:-)

[09:52:14.0251] <tcampbell>
iain: I think we do stack probes for all platforms these days

[09:53:14.0905] <tcampbell>
windows really needed them for the double-fault mechanism, but it wasn't worth having platform variation here. It came up again with Windows on ARM.

[09:55:11.0458] <tcampbell>
see also `MacroAssembler::touchFrameValue`

[09:58:56.0342] <iain>
Cool

[10:00:07.0630] <iain>
I was just polishing up my patches for the regexp prologue, and it seemed like there should be a more standard way to do this than the code that I copied from bhackett

[10:00:24.0742] <iain>
And it turns out that there was, and I was already using it via reserve_stack, so I got to delete some code

[10:00:39.0710] <iain>
\o/

[10:00:51.0692] <iain>
 * And it turns out that there was, and I was already using it via reserveStack, so I got to delete some code

[10:02:59.0425] <sfink>
tcampbell: I'm not sure if `touchFrameValues` should be claiming it's just for Windows. It'll only happen near OOM, but this can do bad stuff on Linux as well.

[10:04:12.0484] <sfink>
hm, actually, maybe it's not just near OOM. Near OOM is another problem, but I know there can be issues with vaulting over a guard page on the stack as well.

[10:04:46.0619] <sfink>
MAP_GROWSDOWN does not want you to jump over it

[10:05:06.0049] <tcampbell>
yeah, comment is probably out of date

[10:05:26.0824] <sfink>
confession: I will never truly understand unicode handling in Python 2, no matter how many times I convince myself that I do.

[10:05:31.0537] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[10:09:17.0580] <sfink>
confession: in related news, after carefully explaining to arai why my way is better, I have come to the understanding of why arai's way is better. This is not an uncommon occurrence.

[10:39:55.0658] <nbp>
https://v8.dev/blog/pointer-compression (sounds like this would be harder to apply to SpiderMonkey, knowing that we have double packing)

[10:40:07.0771] <mgaudet>
tcampbell: Hopefully the updated https://phabricator.services.mozilla.com/D67571 makes sense to you, reflecting our discussion the other day

[10:42:55.0789] <Waldo>
confession: `pipeTo` is starting to really come together in my head conceptually -- code is following too.

[11:06:40.0206] <tcampbell>
mgaudet: should FunctionBox::flags_ become funFlags_?

[11:07:19.0871] <mgaudet>
tcampbell: afk: maybe? Would need to look closer 

[11:12:55.0940] <evilpie>
jandem: do you have a sec?

[11:13:16.0499] <jandem>
evilpie: sure

[11:13:48.0568] <evilpie>
bug 1607986 produces new test failures related to JSOP_POS

[11:13:50.0042] <botzilla>
https://bugzil.la/1607986 — NEW (evilpie) — Clicking "play" on paper.io is extremely slow on Firefox, smooth on Chrome

[11:14:20.0662] <evilpie>
it seems to me like basically everything but MBinaryArithInstruction inside jsop_binary_arith is actually dead code for JSOP_POS

[11:14:27.0903] <evilpie>
not concat

[11:14:58.0096] <jandem>
looking..

[11:15:11.0042] <evilpie>
binaryArithTrySpecialized and binaryArithTrySpecializedOnBaselineInspector both use the baselineinspector

[11:15:19.0892] <evilpie>
arithTryBinaryStub bails out early

[11:16:19.0991] <Waldo>
/me stabs `MBinaryArithInstruction` not being N different separate binary ops

[11:16:38.0393] <evilpie>
well also unary ops which is worse...

[11:16:40.0440] <jandem>
evilpie: for Warp I added MToNumber for JSOp::Pos, wondering if we should use that. It's not very well optimized right now, we could fix that

[11:17:01.0502] <evilpie>
would be nice, I think

[11:17:30.0634] <evilpie>
JSOp::Neg also uses it

[11:17:39.0789] <jandem>
in the past inc/dec operators used Pos but now they use ToNumeric

[11:17:51.0338] <jandem>
so Pos is not super hot

[11:18:28.0106] <evilpie>
are we concerned about some folds failing?

[11:18:57.0353] <jandem>
it would be nice to at least fold the known-number cases, I have a todo to fix that for warp, but we also do that in IonBuilder already

[11:20:25.0478] <evilpie>
sure. I actually notice that we also don't do much folding for MToDouble

[11:20:40.0102] <evilpie>
I think I can do

[11:21:32.0222] <evilpie>
 * I think I can do that

[11:21:48.0090] <jandem>
MToNumber might actually be better anyway because worst-case we still have a `masm.branchTestNumber` fast path whereas reusing binary arith probably results in c++ calls

[12:06:44.0329] <tcampbell>
mgaudet: I put comments in bug. What you have looks good and I think we can push for dropping one flag and having a little more uniformity also.

[13:03:47.0316] <mgaudet>
tcampbell: Using 1 flag is better, yes. Let me know what you think of `JSScript::updateArgsUsageAnalysis()`; it's a bit different than you'd suggested, but also enforces the invariant I was trying to assert previously.

[13:05:54.0445] <Waldo>
evilpie: Almost done looking at those patches, in theory.

[13:15:41.0980] <tcampbell>
mgaudet: looks better. I still think we should avoid the condition tree on BCE side so that flags initialization is much more direct

[13:16:05.0858] <tcampbell>
(and helps with general flag unification work)

[13:17:09.0426] <mgaudet>
tcampbell: I'm not sure which condition you're talking about there

[13:17:20.0079] <mgaudet>
the phab comment isn't super clear what it's attached to

[13:19:06.0839] <tcampbell>
mgaudet: ` if (funbox->argumentsHasLocalBinding()) {`

[13:19:24.0369] <tcampbell>
Ideally we have unconditional sets setFlags like the lines above

[13:19:38.0794] <tcampbell>
and move the decision logic to stencil instantiation

[13:22:31.0509] <mgaudet>
tcampbell: Uhm. I guess I am concerned about that leading to weird flag values, and what that means for scripts later. I'd sort of like to keep it like this and open a followup bug to investigate this further. 

[13:23:15.0911] <mgaudet>
(because right now we just take the stencil's immutableFlags and meld them into the scripts, so creating slightly non-sensical combos of immutable flags, but making sure the mutable flags work out at instantiation time seems uncomfortable to me, unless I'm misunderstanding) 

[13:24:41.0199] <tcampbell>
mgaudet: my expectation is that the flags have clear definitions that there is no non-sensical combo

[13:26:16.0381] <mgaudet>
So you're just suggesting this? 

```
    if (functionBox->definitelyNeedsArgsObj()) {
      immutableFlags.setFlag(ImmutableScriptFlagsEnum::AlwaysNeedsArgsObj);
    }

    if (functionBox->argumentsHasLocalBinding()) {
      // See JSScript::setArgumentsHasVarBinding and setNeedsArgsObj
      immutableFlags.setFlag(ImmutableScriptFlagsEnum::ArgumentsHasVarBinding);
    } else {
      MOZ_ASSERT(!functionBox->definitelyNeedsArgsObj());
    }
```

[13:26:31.0915] <mgaudet>
 * So you're just suggesting this?
```
    if (functionBox->definitelyNeedsArgsObj()) {     // See JSScript::setArgumentsHasVarBinding and setNeedsArgsObj
      immutableFlags.setFlag(ImmutableScriptFlagsEnum::AlwaysNeedsArgsObj);
    }

    if (functionBox->argumentsHasLocalBinding()) {
 
      immutableFlags.setFlag(ImmutableScriptFlagsEnum::ArgumentsHasVarBinding);
    } else {
      MOZ_ASSERT(!functionBox->definitelyNeedsArgsObj());
    }
```

[13:26:40.0578] <mgaudet>
 * So you're just suggesting this?
```
    if (functionBox->definitelyNeedsArgsObj()) {    
     // See JSScript::setArgumentsHasVarBinding and setNeedsArgsObj
      immutableFlags.setFlag(ImmutableScriptFlagsEnum::AlwaysNeedsArgsObj);
    }

    if (functionBox->argumentsHasLocalBinding()) {
 
      immutableFlags.setFlag(ImmutableScriptFlagsEnum::ArgumentsHasVarBinding);
    } else {
      MOZ_ASSERT(!functionBox->definitelyNeedsArgsObj());
    }
```

[13:26:54.0969] <tcampbell>
no, suggesting `immutableFlags.setFlag(AlwaysNeedsArgsObj, funbox->definitelyNeedsArgsObj())`

[13:27:08.0212] <tcampbell>
similar to HasMappedArgs

[13:28:02.0028] <tcampbell>
that assert can then just be `MOZ_ASSERT_IF(hasFlag(AlwaysNeedsArgsObj), hasFlag(ArgumentsHasVarBinding))` but in the update/init/reset function

[13:30:52.0184] <tcampbell>
mgaudet: does that make any sense?

[13:31:50.0246] <mgaudet>
tcampbell: that makes more sense for sure

[13:31:53.0546] <mgaudet>
thanks!

[13:34:08.0086] <tcampbell>
mgaudet: this helps to make this all more boring

[13:34:44.0684] <tcampbell>
and then we have have a single common helper method for I-have-a-new-script-that-I-need-to-make-ready-to-run

[13:34:51.0205] <tcampbell>
that applies to the XDR and Clone case as well

[13:35:13.0721] <tcampbell>
and we can get the functionbox flag copying to become a bulk operation

[13:35:40.0880] <tcampbell>
https://searchfox.org/mozilla-central/search?q=symbol:_ZN2js10BaseScript25setArgumentsHasVarBindingEv&redirect=false

[13:45:49.0956] <mgaudet>
Alright: updated the patch again -- you're right, much better looking. 

[13:50:27.0014] <tcampbell>
mgaudet: yeah, great progress. Added a few notes for out-of-date comments

[13:55:09.0225] <mgaudet>
tcampbell: I didn't verify the BCE need; when I said computation I really meant they didn't have flag-word only storage. Perhaps I should be more explicit there? (I just don't want to put in the BCE comment without audit, or are you pretty sure of that?)

[13:56:31.0747] <tcampbell>
mgaudet: compare the list of flags with the ones listed as NonLazyFlags

[13:56:53.0888] <tcampbell>
I think I'm wrong though

[13:57:18.0817] <mgaudet>
I guess I'm looking at it more from the perspective of how does that flag get derived out of the functionbox

[13:57:42.0724] <mgaudet>
(though, I agree, there's a  nice matching with the NonLazyFlags, which maybe means something) 

[13:57:48.0069] <tcampbell>
yeah, that makes sense. I would like to understand the symetry with the lazyflag initialization

[13:58:28.0237] <tcampbell>
FunctionBox::definitelyNeedsArgsObj_ probably should be moved to your flags

[13:58:41.0591] <tcampbell>
(sorry I've made a mess of your stackup with these requests..)

[13:59:22.0285] <mgaudet>
mostly this has totally rolled through the stack just fine. That last one we'll do as followup though, just so that I can get these things landed 

[13:59:32.0309] <mgaudet>
(Need coffee before I start a rebase though) 

[14:00:40.0577] <evilpie>
Waldo: thanks! did you read my comment about just not serializing mutedErrors? Basically we really don't need it currently

[14:00:56.0474] <evilpie>
I think this would simplify the patch quite a bit

[14:03:06.0062] <evilpie>
About ErrorReport::init some callers have a stack, but we really can't just look it up ourself because the caller might have the correct stashed away somewhere

[14:03:54.0928] <Waldo>
evilpie: Um, maybe I missed it?  I think I would hesitate to not serialize actual state of a thing being serialized, on the assumption that users of the serialized form need not care about that actual state being preserved.

[14:04:30.0314] <evilpie>
about UAF, in theory ErrorReport is keeping it alive: https://searchfox.org/mozilla-central/source/js/src/jsfriendapi.h#1360

[14:05:00.0187] <evilpie>
(yes this is quite ...) but JSErrorReport doesn't own filename

[14:05:15.0456] <Waldo>
evilpie: Re callers having a correct stashed stack, it seems to me there ought be two forms: one where you provide a stack explicitly, and one that produces and uses the current stack, under the hood.  The case where you have a special stack to run with ought be the exceptional case, called out exceptionally with a specific different-named function.

[14:06:33.0813] <evilpie>
well it's not exceptional

[14:06:59.0052] <evilpie>
feel free to look at the callers of ErrorReport::init

[14:07:13.0918] <Waldo>
Why not?  I assume cases that want to have some sort of async stack info need it, but in straight-line synchronous code, what's wrong with capturing the transient stack invisibly?

[14:07:36.0547] <Waldo>
I took a look, very briefly, at Searchfox hits, but it wasn't obvious to me that other than the async case things got weird.

[14:07:47.0615] <evilpie>
a lot of callers clear the pending exception and stuff like that

[14:09:28.0250] <evilpie>
I think we can introduce a new type for <exception, stack> and use that more

[14:11:52.0862] <Waldo>
That would probably be helpful, yes.

[14:13:01.0624] <Waldo>
Basically I really don't want this to be something everyone has to specially think about, and as things are drawn up it seems like they would have to so specially think.  If we can't get there immediately that's fine, but I would like to get there Soon.

[14:13:34.0650] <evilpie>
That's fine, I can do that pretty quickly

[14:18:51.0052] <evilpie>
mhm phabricator being slow

[14:41:31.0706] <evilpie>
Waldo: ok please have a look. I think the structured cloning is easier to understand now

[15:07:10.0563] <Waldo>
evilpie: Looks good.

[15:14:51.0224] <Waldo>
evilpie: Gonna patch-bomb you with patches removing all the `JS::*DontInflate` functions that were temporarily added to control the transition to compiling and evaluating UTF-8 without inflating it to UTF-16 -- seems like we're at the point now where it's safe to just make all the UTF-8 paths never inflate.  Nothing interesting, just renaming the existing function and removing the non-inflating one everywhere.

[15:19:25.0246] <evilpie>
Waldo: ok sure

[15:19:56.0732] <Waldo>
Five minutes later I'm sure `moz-phab` will finish uploading it all...

[15:20:30.0115] <evilpie>
Waldo: yeah I think the server is slow actually at the moment

[15:20:44.0277] <evilpie>
I opened a bug and they actually made it a bit faster

[15:21:14.0757] <Waldo>
Yeah, I was joking mostly, but now that I look I kicked this off at 15:14 and it's usually not _this_ slow...

[15:24:00.0964] <evilpie>
Waldo: what do you think of this? https://paste.centos.org/view/c6a709d1

[15:28:17.0853] <Waldo>
evilpie: The `ExceptionAndStack` functions should just return their values, but that doesn't look crazy.  Also you're going to want to implement support for `cx->check(...)` and probably `cx->compartment->wrap(cx, ...)` for that, which means adding some stuff to `vm/JSContext-inl.h` and `vm/Compartment-inl.h`.

[15:28:33.0501] <Waldo>
Coincidentally https://phabricator.services.mozilla.com/D68473 was me adding similar things just the other day.

[15:30:45.0676] <evilpie>
ok thanks. I am not sure yet if wrapping will be required. I guess check is useful when we start accepting it in ErrorReport::init?

[15:31:28.0513] <Waldo>
Possibly?  I know our story around errors and their compartment and wrapping is very sad, and I feel like some paranoia about this is probably well warranted.

[15:32:44.0491] <evilpie>
JSContext::getPendingException is interesting lol

[15:36:22.0908] <tcampbell>
so.. if I where to disable source-notes for self-hosting, we'd lose the detailed column info if the self-hosted code itself is buggy. Is this actually a problem for anyone? The self-hosted frames are filtered in most things anyways

[15:37:36.0894] <tcampbell>
I don't think we can even attach a debugger to the self-hosted startup

[15:38:34.0040] <iain>
Would we still have line numbers? I frequently grab the line number off self-hosted scripts in rr to figure out which function I am looking at

[15:38:48.0653] <tcampbell>
scripts still have lineno/column

[15:39:07.0014] <tcampbell>
this is the column numbers of like an `foo.x` that throws

[15:39:35.0395] <tcampbell>
and stuff like the "suggested single-step points"

[15:41:45.0715] <tcampbell>
it saves a tiny bit of memory and avoids having non-sense when we clone self-hosted stuff in weird ways (default constructors and bound functions)


2020-03-31
[19:27:52.0123] <mgaudet>
confession: Landed preliminary in-tree build documentation (focused on `mach` workflow) on Friday. Looks good! https://firefox-source-docs.mozilla.org/js/build.html 

[19:27:54.0309] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[19:43:03.0205] <aholm>
nice mgaudet, it does look good!

[09:05:40.0992] <djvj>
confession: successfully transitioned code to no-allocation parser atoms interning.  tests running.  parser migration in progress.

[12:05:50.0785] <tcampbell>
mgaudet: ping?

[12:06:10.0462] <mgaudet>
tcampbell: pong

[12:06:18.0951] <tcampbell>
mgaudet: so.. https://searchfox.org/mozilla-central/rev/fa2df28a49883612bd7af4dacd80cdfedcccd2f6/js/src/vm/JSScript.cpp#1207-1208

[12:06:26.0438] <tcampbell>
I noticed you changed to to ::New

[12:06:37.0091] <tcampbell>
and I was just about to change it back to ::Create without realizing

[12:07:16.0988] <tcampbell>
did you see https://phabricator.services.mozilla.com/D68882

[12:07:39.0881] <mgaudet>
I did not, but definitely it's a good cleanup item: I don't have a strong opinion on the name

[12:07:42.0593] <mgaudet>
but we don't need two 

[12:07:52.0934] <mgaudet>
(anymore) 

[12:08:30.0831] <tcampbell>
yeah, they also need to unify with BaseScript

[12:08:37.0669] <tcampbell>
was wondering if we should have BaseScript::New

[12:08:59.0150] <mgaudet>
I would support that, yes.

[12:10:36.0727] <tcampbell>
mgaudet: did you have plans to add the resetArgsUsageAnalysis() to the other places it belongs, or should I?

[12:11:19.0540] <mgaudet>
tcampbell: I did not have that planned no, so would be fine if you leapt upon that 

[12:14:26.0323] <tcampbell>
caroline: ping?

[12:15:25.0057] <caroline>
tcampbell: pong

[12:15:28.0307] <tcampbell>
For Bug 1626069, I'm wondering if we should move JSScript::New to become BaseScript::New, and then remove the other JSScript::Create as well

[12:15:29.0701] <botzilla>
https://bugzil.la/1626069 — NEW (caroline) — Remove JSScript::Create hideScriptFromDebugger wrapper

[12:15:37.0481] <tcampbell>
(additional patches on that bug, I mean)

[12:15:52.0420] <tcampbell>
that isn't the right number... hmm

[12:16:32.0588] <tcampbell>
oh.. it is.. title is just stale :)

[13:15:32.0089] <yulia>
Waldo: do you know what the status is for our regex implementation?

[13:16:09.0244] <Waldo>
yulia: Definitely these days iain is the better person to ask, I only know stuff by hazy bugmail-watching.

[13:16:15.0304] <yulia>
ah great, thanks!

[13:16:21.0638] <yulia>
hi iain  :D

[13:16:57.0110] <Waldo>
I think we're supposed to be an irregexp update away from supporting all the new stuff, but I might be wrong, and it might be that "new stuff" is really "old new stuff" now.

[13:17:01.0676] <yulia>
tldr: unicode surrogate as a named capture group -- do we rely on chromes implementation ehre?

[13:17:06.0190] <yulia>
 * tldr: unicode surrogate as a named capture group -- do we rely on chromes implementation here?

[13:17:29.0342] <Waldo>
Their parsing would govern that, yes, I think.

[13:17:46.0496] <Waldo>
(also _trash_ 😛)

[13:18:14.0694] <yulia>
so `/(?<\ud835\udc9c>.)/` should follow their implementation right?

[13:18:26.0163] <yulia>
 * so `/(?<\ud835\udc9c>.)/` and `/(?<\ud835\udc9c>.)/u`should follow their implementation right?

[13:19:12.0109] <Waldo>
Probably?  (said with as much confidence as I feel)

[13:19:27.0735] <yulia>
ok

[13:19:33.0640] <yulia>
i will double check with iain

[13:22:50.0679] <iain>
I am here!

[13:23:12.0046] <yulia>
:wave:

[13:23:23.0191] <yulia>
 * 👋

[13:23:53.0120] <iain>
I believe our regexp status is as follows:

[13:24:18.0465] <iain>
1. We do not currently support look-behind assertions. When the irregexp update lands, we will support those out of the box.

[13:25:25.0439] <iain>
2. We do not currently support the dotAll flag. Updating the engine gives us most of the work; the last part is adding support in the parser, etc, for the flag. This has already been done. I can grab the bug number if it helps.

[13:25:56.0156] <yulia>
i guess the question is really related to the example i gave above. `/(?<\ud835\udc9c>.)/` is illegal in chrome and safari, `/(?<\ud835\udc9c>.)/u` is legal in chrome and safari

[13:26:05.0413] <yulia>
the committee is discussing making them both legal

[13:26:06.0960] <iain>
3. We do not currently support named captures. Updating the engine gives us backend support for it, but there will be extra work afterwards.

[13:26:10.0973] <yulia>
aha!

[13:26:40.0482] <yulia>
ok very interesting, thank you!

[13:27:20.0358] <yulia>
so, we need to implement this feature anyway, is what i understand here?

[13:27:42.0635] <iain>
We need to implement *some* of it

[13:27:45.0935] <yulia>
ok

[13:28:49.0356] <iain>
IIRC, when you parse a regexp with named captures, the engine gives you back an array of names

[13:29:44.0587] <iain>
Actually, wait, let me check

[13:30:12.0811] <iain>
I think when you *execute* a regexp with named captures, you get back an array of (name, index) pairs pointing into the capture list

[13:30:48.0485] <iain>
The parts we still need to implement are the parts that consume that array

[13:31:14.0100] <iain>
(And also the shim code to actually represent that array)

[13:31:53.0882] <iain>
The important part of all this being that the responsiblity for parsing the names of named captures lies, as far as I can tell, inside the engine

[13:31:57.0492] <iain>
So if Chrome does it one way, I think we will also do it the same way

[13:32:10.0984] <iain>
 * The important part of all this being that the responsibility for parsing the names of named captures lies, as far as I can tell, inside the engine

[13:32:22.0537] <yulia>
ok, that is good to know

[13:32:35.0201] <yulia>
but we would have some work to do around this, if i got it right

[13:33:01.0707] <iain>
Yes

[13:33:24.0884] <yulia>
thanks for the info, that helps a lot

[13:33:34.0507] <iain>
You're welcome!

[13:38:24.0517] <iain>
yulia: Actually, now that I think about it, I can do one better

[13:39:10.0120] <iain>
If I take your two regexps and try to parse them in my local build, the version without /u gives a syntax error, and the version with /u parses properly

[13:39:28.0574] <yulia>
yes, this is what chrome and safari do now

[13:40:07.0297] <yulia>
(in other words: this is great that it already works like that)

[13:49:20.0383] <yulia>
(it may change... according to the current conversation, but it sounds from what you said that this might be managable?)

[13:49:27.0738] <yulia>
 * (it may change... according to the current conversation, but it sounds from what you said that this might be manageable?)

[13:53:35.0949] <iain>
It should be very manageable

[13:54:17.0481] <iain>
Possibly even at the level of "run a python script to pull in a new version of irregexp from v8 and commit the results" manageable

[13:54:49.0510] <yulia>
great :D

[14:12:10.0495] <sfink>
Waldo: need moar halp

[14:18:02.0406] <Waldo>
sfink: Can it be quick?  It's been 16 days since I last got groceries and I'm running mostly on fumes, was going to make one, maybe two mega-trips to stock up for another 2+ weeks now.

[14:18:46.0950] <sfink>
I don't know if I can control the duration, but I can control the timing. I've already been stalling off this review for several days, I'm ok with one more!

[14:20:36.0551] <sfink>
but if it *is* quick: I have a class with a uintptr_t field u. I have a ctor `Cls::Cls(Foo* foo) { uintptr_t data = uintptr_t(foo); ...; u = data; }`. After that, what is the actual type stored in this->u? uintptr_t or Foo*?

[14:20:50.0725] <sfink>
(no need to reply anytime soon)

[14:21:54.0616] <Waldo>
 `u` if you assign to it normally, will contain a `uintptr_t`.  It would only _not_ contain one, if you placement-`new`'d into its memory.

[14:22:19.0842] <sfink>
assignment carries along actual types?

[14:22:22.0069] <Waldo>
The fact that the value you assign into it was derived from a pointer doesn't change that you're storing a `uintptr_t` there.

[14:22:53.0005] <Waldo>
Within the bounds of loose usage of language here, yes, I think so.

[14:23:30.0797] <sfink>
ok, thanks. I *think* in this case I'd rather it contained a Foo* (in a uintptr_t field), since that may make the subclasses less error prone.

[14:23:43.0486] <sfink>
I'm sure I'll have more questions as I work through this.

[14:24:03.0665] <sfink>
but you'll probably be better at answering if you're not starving to death

[14:24:26.0356] <Waldo>
If you want it to contain a `Foo*`, then make the field type that.  It's generally not very common that you would want to repurpose memory of a given type _by reusing its underlying storage_.

[14:25:24.0209] <Waldo>
I can stick around long enough to wrap up this conversation, at least.  :-)

[14:26:10.0703] <sfink>
I'm afraid that might be exactly what I want to do. This is for a base Cell class. Subclasses would be used to mark what's actually stored in the first word of a given Cell subclass.

[14:26:51.0021] <sfink>
and we do indeed reuse the underlying storage for forwarding pointers & such

[14:27:20.0934] <Waldo>
It would be preferable not to have a field of type `uintptr_t` or `Foo*`, then, but a union with separate arms separately assigned and read from.

[14:27:39.0962] <Waldo>
Tho if you're trying to common up low-order bits for tagging, that's not going to be adequate.

[14:28:01.0934] <sfink>
yes, this is an attempt to do the tagging without UB

[14:28:42.0693] <sfink>
or rather, it's for safely doing in that and checking that we don't violate the alignment constraints that give us access to those bits, but I'd also like to get rid of some UB in the process if possible

[14:29:27.0391] <Waldo>
If you need to store tag bits, that rules out storing pointer values with the tag bits set (assuming the pointee type has alignment greater than 1).

[14:29:59.0430] <Waldo>
_Technically_ `uintptr_t` may be larger than pointer-sized, but we more or less assume otherwise (and so does most everything).

[14:30:23.0581] <Waldo>
You probably should use `uintptr_t` in the base class, make the field private, then only expose access to it through public casting functions or something.

[14:30:34.0712] <sfink>
that's roughly what's going on

[14:30:50.0641] <Waldo>
Where you have to specify the type you want to read out, or something, and the tag bits get masked out/in by the accessors.

[14:31:32.0179] <sfink>
yes, that sounds right. The patch is not doing that yet, but I was requesting some of it in my review.

[14:32:12.0519] <sfink>
I *think* I understand enough to come up with a plausible story now, and then see whether I can convince myself of it

[14:32:15.0910] <sfink>
thanks!

[14:33:34.0901] <Waldo>
/me heads out, if he doesn't make it back it's been nice knowing everyone ;-)

[15:20:49.0837] <tcampbell>
caroline: I'm idly wondering if we should make `IsFunction`, `IsForEval`, `IsModule` into the "input" category

[15:21:28.0747] <tcampbell>
they are selected primarily by which compile method we call rather than the text itself

[15:24:23.0989] <yulia>
with regards to stride -- does anyone know why the JITs are not badly affected by typedArrayBuffers having the offset parameter?

[15:24:49.0038] <yulia>
wrt https://github.com/tc39/proposal-typedarray-stride/issues

[15:24:56.0362] <yulia>
 * wrt https://github.com/tc39/proposal-typedarray-stride

[15:25:47.0913] <tcampbell>
yulia: I believe that offset just affects the initial address computation when we grab it out of the ArrayBuffer

[15:26:14.0673] <tcampbell>
whereas stride affects every use of the TypedArray

[15:27:01.0050] <yulia>
great, thanks

[15:32:40.0245] <sefeng>
hey folks. I am trying to reproduce a call path, how do I create an object that can reach to here https://searchfox.org/mozilla-central/source/dom/base/WindowNamedPropertiesHandler.cpp#101-103 when I call `getOwnPropertyDescriptor`? 

[15:34:06.0516] <caroline>
tcampbell:  We could do it that way, although i thought it made sense that they were parser flags because the origin of where they are being set is distinct from the other input flags, and to be i thought that was sort of in the vein of the parser flags. I do fore sure see where you're coming from, once again its sort of a sliding scale of how we could categorize them 

[15:34:35.0415] <tcampbell>
caroline: we could try setting them earlier if needed for that consistency

[15:34:44.0274] <tcampbell>
(you have a good point)

[15:35:25.0316] <tcampbell>
caroline: Ideally we'd like to have a clear set of conditions to say precisely if a stencil can be re-used for another request

[15:36:17.0444] <iain>
confession: The last of my regexp macro assembler patches are up for review, and now I am slowly slicing the "connect the new engine to the rest of SM" mega-patch into digestible chunks

[15:36:19.0606] <botzilla>
Seen! Your update will eventually appear on https://robotzilla.github.io/histoire

[15:37:19.0357] <tcampbell>
mccr8: do you know the answer to sefeng 's question above? I'm not actually sure what a WindowNamedProperties is..

[15:39:09.0678] <tcampbell>
sefeng: I wonder if this is a clue.. https://searchfox.org/mozilla-central/source/dom/bindings/test/test_dom_xrays.html#76

[15:40:10.0343] <mgaudet>
confession: After doing the 'simple' version of trying to use a tree-walk to do FunctionBox::finish, I'm relatively convinced that this is just pushing deckchairs around on the titanic. Instead, the right thing to do is going to be to revisit JSFunction allocation deferral, and use the magical transmuatation abilities of an AbstractScopePtr to do the right thing. 

I think. 

[15:40:34.0778] <caroline>
tcampbell: I think that setting them earlier makes sense! makes the answer to that question for straight forward

[15:40:45.0768] <tcampbell>
sweet

[15:41:01.0452] <tcampbell>
(no rush, but you can probably add it to your metabug list)

[15:41:08.0718] <caroline>
will add to the bug tree 👍️

[15:44:58.0290] <mccr8>
sefeng: I'm not sure the answer to your question off the top of my head, but asking in the #DOM channel is probably going to be more useful.

[15:45:37.0175] <mccr8>
sefeng: you could try emailing peterv. He's probably most familiar with that.

[15:46:03.0960] <sefeng>
okay, thanks for the suggestion! 

[15:47:03.0230] <tcampbell>
sefeng: there is always the classic: Put in a MOZ_CRASH and run xpcshell tests

[15:47:36.0053] <mccr8>
I don't know if there are windows in xpcshell tests, but yeah something like running XPConnect mochitests or something under dom might help.

[15:47:49.0695] <sefeng>
I seeee :) thanks 

